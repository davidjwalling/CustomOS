     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.010
     6                                  ;
     7                                  ;       Description:    In this sample program, logic is added to allocate and free memory blocks at the kernel level.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMEM...         Memory Management values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   331                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   332                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   333                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   334                                  EASCIISPACE             equ     020h                                            ;space
   335                                  EASCIIUPPERA            equ     041h                                            ;'A'
   336                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   337                                  EASCIILOWERA            equ     061h                                            ;'a'
   338                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   339                                  EASCIITILDE             equ     07Eh                                            ;'~'
   340                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   341                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   342                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   343                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   344                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   345                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   346                                  EASCIICASE              equ     00100000b                                       ;case bit
   347                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  ;
   350                                  ;       Operating System Values
   351                                  ;
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   356                                  ;
   357                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   358                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   362                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   363                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   364                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   365                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   366                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   367                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;       Console Constants                                                       ECON...
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ECONCOLS                equ     80                                              ;columns per row
   372                                  ECONROWS                equ     24                                              ;console rows
   373                                  ECONOIAROW              equ     24                                              ;operator information area row
   374                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   375                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   376                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   377                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   378                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   383                                  EGDTCGA                 equ     020h                                            ;cga video selector
   384                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   385                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   386                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   387                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   388                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   389                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;       Keyboard Flags                                                          EKEYF...
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   394                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   395                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   396                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   397                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   398                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   399                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   400                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   401                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   402                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   403                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;       Kernel Constants                                                        EKRN...
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   408                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   409                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   410                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   411                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   412                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ;       Memory Management Constants                                             EMEM...
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   421                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   422                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   423                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;       Message Identifiers                                                     EMSG...
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   428                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   429                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   430                                  ;=======================================================================================================================
   431                                  ;
   432                                  ;       Structures
   433                                  ;
   434                                  ;=======================================================================================================================
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ;
   437                                  ;       MEMBLOCK
   438                                  ;
   439                                  ;       The MEMBLOCK structure defines a memory block.
   440                                  ;
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  struc                   MEMBLOCK
   443 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   444 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   445 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   446 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   447 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   448 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   449 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   450 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   451                                  EMEMBLOCKLEN            equ     ($-.signature)
   452                                  endstruc
   453                                  ;-----------------------------------------------------------------------------------------------------------------------
   454                                  ;
   455                                  ;       MEMROOT
   456                                  ;
   457                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   458                                  ;
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  struc                   MEMROOT
   461 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   462 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   463 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   464 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   465 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   466 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   467                                  EMEMROOTLEN             equ     ($-.firstcontig)
   468                                  endstruc
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  ;
   471                                  ;       MQUEUE
   472                                  ;
   473                                  ;       The MQUEUE structure maps memory used for a message queue.
   474                                  ;
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  struc                   MQUEUE
   477 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   478 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   479 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   480                                  endstruc
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  ;
   483                                  ;       OSDATA
   484                                  ;
   485                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   486                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   487                                  ;
   488                                  ;-----------------------------------------------------------------------------------------------------------------------
   489                                  struc                   OSDATA
   490 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   491 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   492 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   493 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   494 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   495 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   496 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   497 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   498 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   499 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   500 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   501 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   502 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   503 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   504 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   505 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   506 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   507 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   508 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   509 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   510 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   511 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   512 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   513 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   514 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   515 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   516 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   517 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   518 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   519 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   520 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   521 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   522 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   523 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   524 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   525 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   526 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   527 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   528 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   529 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   530 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   531 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   532 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   533 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   534 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   535 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   536 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   537 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   538 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   539 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   540 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   541 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   542 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   543 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   544 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   545 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   546 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   547 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   548 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   549 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   550 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   551 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   552 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   553 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   554 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   555 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   556 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   557 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   558 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   559 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   560 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   561 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   562 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   563 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   564 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   565 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   566 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   567 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   568 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   569 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   570 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   571 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   572 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   573 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   574 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   575 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   576 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   577 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   578 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   579 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   580 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   581 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   582 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   583 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   584 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   585 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   586 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   587 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   588 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   589 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   590 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   591                                  ;-----------------------------------------------------------------------------------------------------------------------
   592                                  ;
   593                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   594                                  ;
   595                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   596                                  ;
   597                                  ;-----------------------------------------------------------------------------------------------------------------------
   598                                  ECONDATA                equ     ($)
   599 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   600 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   601 00000808 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   602 00000820 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   603 00000821 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   604 00000822 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   605 00000823 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   606 00000824 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   607 00000825 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   608 00000826 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   609 00000827 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   610 00000828 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   611 00000829 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   612 0000082A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   613 0000082B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   614 0000082C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   615 0000087C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   616 000008CC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   617                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   618                                  ;-----------------------------------------------------------------------------------------------------------------------
   619                                  ;
   620                                  ;       End of OS Variables
   621                                  ;
   622                                  ;-----------------------------------------------------------------------------------------------------------------------
   623                                  endstruc
   624                                  ;-----------------------------------------------------------------------------------------------------------------------
   625                                  ;
   626                                  ;       Macros
   627                                  ;
   628                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   629                                  ;
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631                                  %macro                  mint    1
   632                                  _%1                     equ     ($-$$) / EX86DESCLEN
   633                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   634                                  %endmacro
   635                                  %macro                  mtrap   1
   636                                  _%1                     equ     ($-$$) / EX86DESCLEN
   637                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   638                                  %endmacro
   639                                  %macro                  menter  1
   640                                  ?%1                     equ     ($-$$)
   641                                  %endmacro
   642                                  %macro                  tsvce   1
   643                                  e%1                     equ     ($-tsvc)/4
   644                                                          dd      %1
   645                                  %endmacro
   646                                  %ifdef BUILDBOOT
   647                                  ;=======================================================================================================================
   648                                  ;
   649                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   650                                  ;
   651                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   652                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   653                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   654                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   655                                  ;
   656                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   657                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   658                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   659                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   660                                  ;       immediately followed by a disk parameter table.
   661                                  ;
   662                                  ;=======================================================================================================================
   663                                                          cpu     8086                                            ;assume minimal CPU
   664                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   665                                                          bits    16                                              ;16-bit code at power-up
   666                                  %ifdef BUILDPREP
   667 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   668                                  %else
   669                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   670                                  %endif
   671                                  ;-----------------------------------------------------------------------------------------------------------------------
   672                                  ;
   673                                  ;       Disk Parameter Table
   674                                  ;
   675                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   676                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   677                                  ;
   678                                  ;-----------------------------------------------------------------------------------------------------------------------
   679 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   680 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   681 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   682 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   683 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   684 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   685 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   686 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   687 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   688                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   689 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   690 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   691 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   692                                  ;
   693                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   694                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   695                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   696                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   697                                  ;       given several possible starting values for CS:IP.
   698                                  ;
   699                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   700 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   701                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   702 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   703 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   704 00000025 B104                                            mov     cl,4                                            ;shift count
   705 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   706 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   707 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   708                                  ;
   709                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   710                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   711                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   712                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   713                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   714                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   715                                  ;
   716 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   717 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   718 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   719 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   720 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   721                                  ;
   722                                  ;       Our boot addressability is now set up according to the following diagram.
   723                                  ;
   724                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   725                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   726                                  ;                               |  256 = 100h bytes                             |
   727                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   728                                  ;                               |  Boot Sector (vstart=0100h)                   |
   729                                  ;                               |  1 sector = 512 = 200h bytes                  |
   730                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   731                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   732                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   733                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   734                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   735                                  ;                               |  2 sectors = 1024 = 400h bytes
   736                                  ;                       009400  +-----------------------------------------------+ DS:1900
   737                                  ;
   738                                  ;       On entry, DL indicates the drive being booted from.
   739                                  ;
   740 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   741                                  ;
   742                                  ;       Compute directory i/o buffer address.
   743                                  ;
   744 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   745 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   746 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   747 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   748                                  ;
   749                                  ;       Compute segment where os.com will be loaded.
   750                                  ;
   751 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   752 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   753 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   754 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   755                                  ;
   756                                  ;       Set the video mode to 80 column, 25 row, text.
   757                                  ;
   758 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   759 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   760                                  ;
   761                                  ;       Write a message to the console so we know we have our addressability established.
   762                                  ;
   763 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   764 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   765                                  ;
   766                                  ;       Initialize the number of directory sectors to search.
   767                                  ;
   768 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   769 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   770                                  ;
   771                                  ;       Compute number of directory sectors and initialize overhead count.
   772                                  ;
   773 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   774 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   775 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   776 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   777                                  ;
   778                                  ;       Compute directory entries per sector.
   779                                  ;
   780 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   781 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   782 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   783                                  ;
   784                                  ;       Compute first logical directory sector and update overhead count.
   785                                  ;
   786 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   787 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   788 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   789 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   790 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   791 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   792                                  ;
   793                                  ;       Read directory sector.
   794                                  ;
   795 0000008E B001                    .30                     mov     al,1                                            ;sector count
   796 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   797 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   798 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   799                                  ;
   800                                  ;       Setup variables to search this directory sector.
   801                                  ;
   802 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   803 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   804 000000A1 7603                                            jna     .40                                             ;no, continue
   805 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   806 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   807 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   808 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   809                                  ;
   810                                  ;       Loop through directory sectors searching for kernel program.
   811                                  ;
   812 000000B1 56                      .50                     push    si                                              ;save kernel name address
   813 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   814 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   815 000000B6 FC                                              cld                                                     ;forward strings
   816 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   817 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   818 000000BA 5E                                              pop     si                                              ;restore kernel name address
   819 000000BB 7418                                            je      .60                                             ;exit loop if found
   820 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   821 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   822 000000C2 75ED                                            jnz     .50                                             ;next entry
   823                                  ;
   824                                  ;       Repeat search if we are not at the end of the directory.
   825                                  ;
   826 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   827 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   828 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   829 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   830 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   831                                  ;
   832                                  ;       If we find the kernel program in the directory, read the FAT.
   833                                  ;
   834 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   835 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   836 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   837 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   838 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   839 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   840                                  ;
   841                                  ;       Get the starting cluster of the kernel program and target address.
   842                                  ;
   843 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   844 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   845                                  ;
   846                                  ;       Read each program cluster into RAM.
   847                                  ;
   848 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   849 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   850 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   851 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   852 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   853 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   854 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   855 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   856 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   857                                  ;
   858                                  ;       Update buffer pointer for next cluster.
   859                                  ;
   860 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   861 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   862 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   863 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   864 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   865                                  ;
   866                                  ;       Compute next cluster number.
   867                                  ;
   868 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   869 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   870 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   871 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   872 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   873 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   874 00000120 83E701                                          and     di,1                                            ;get low bit
   875 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   876 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   877 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   878                                  ;
   879                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   880                                  ;
   881 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   882 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   883 00000130 B104                                            mov     cl,4                                            ;shift count
   884 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   885 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   886 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   887 0000013A 75B2                                            jne     .70                                             ;no, continue
   888                                  ;
   889                                  ;       Transfer control to the operating system program.
   890                                  ;
   891 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   892 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   893 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   894                                  ;
   895                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   896                                  ;
   897 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   898 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   899 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   900 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   901 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   902 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   903 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   904 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   905 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   906 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   907                                  ;
   908                                  ;       Try maxtries times to read sector.
   909                                  ;
   910 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   911 00000160 53                      .10                     push    bx                                              ;save buffer address
   912 00000161 51                                              push    cx                                              ;save retry count
   913 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   914 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   915 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   916 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   917 0000016F 59                                              pop     cx                                              ;restore retry count
   918 00000170 5B                                              pop     bx                                              ;restore buffer address
   919 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   920 00000173 E2EB                                            loop    .10                                             ;retry
   921                                  ;
   922                                  ;       Handle disk error: convert to ASCII and store in error string.
   923                                  ;
   924 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   925 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   926 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   927 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   928 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   929 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   930 00000183 7203                                            jb      .20                                             ;continue if numeral
   931 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   932 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   933 0000018A 7203                                            jb      .30                                             ;continue if numeral
   934 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   935 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   936 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   937 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   938                                  ;
   939                                  ;       Wait for a key press.
   940                                  ;
   941 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   942 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   943 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   944 0000019E FB                                              sti                                                     ;enable maskable interrupts
   945 0000019F F4                                              hlt                                                     ;wait for interrupt
   946 000001A0 EBF6                                            jmp     .10                                             ;repeat
   947                                  ;
   948                                  ;       Reset the system.
   949                                  ;
   950 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   951 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   952 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   953 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   954 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   955                                  ;
   956                                  ;       Display text message.
   957                                  ;
   958 000001AA FC                      BootPrint               cld                                                     ;forward strings
   959 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   960 000001AC 84C0                                            test    al,al                                           ;end of string?
   961 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   962 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   963 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   964 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   965 000001B6 C3                      BootReturn              ret                                                     ;return
   966                                  ;-----------------------------------------------------------------------------------------------------------------------
   967                                  ;
   968                                  ;       Constants
   969                                  ;
   970                                  ;-----------------------------------------------------------------------------------------------------------------------
   971 000001B7 90                                              align   2
   972 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   973 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   973 000001C3 4F4D               
   974 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   974 000001CE 530D0A00           
   975 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   975 000001DB 7220               
   976 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   977 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   977 000001E9 6700               
   978                                  ;-----------------------------------------------------------------------------------------------------------------------
   979                                  ;
   980                                  ;       Work Areas
   981                                  ;
   982                                  ;-----------------------------------------------------------------------------------------------------------------------
   983 000001EB 90                                              align   2
   984 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   985 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   986 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   987 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   988 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   989                                  wwReadCountCommand      equ     $                                               ;read count and command
   990 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   991 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   992                                  wwDriveHead             equ     $                                               ;drive, head (word)
   993 000001F8 00                      wbDrive                 db      0                                               ;drive
   994 000001F9 00                      wbHead                  db      0                                               ;head
   995                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   996 000001FA 00                                              db      0                                               ;sector
   997 000001FB 00                      wbTrack                 db      0                                               ;track
   998 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   999 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1000                                  %endif
  1001                                  %ifdef BUILDPREP
  1002                                  ;=======================================================================================================================
  1003                                  ;
  1004                                  ;       Diskette Preparation Code
  1005                                  ;
  1006                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1007                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1008                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1009                                  ;
  1010                                  ;=======================================================================================================================
  1011                                  ;
  1012                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1013                                  ;
  1014 00000200 BE[CA02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1015 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1016                                  ;
  1017                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1018                                  ;
  1019 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1020 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1021 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1022 0000020C FB                                              sti                                                     ;enable interrupts
  1023 0000020D F4                                              hlt                                                     ;wait for interrupt
  1024 0000020E EBF6                                            jmp     .10                                             ;repeat
  1025 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1026 00000212 7407                                            je      .30                                             ;yes, branch
  1027 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1028 00000216 75EE                                            jne     .10                                             ;no, repeat
  1029 00000218 E9A900                                          jmp     .120                                            ;yes, exit program
  1030                                  ;
  1031                                  ;       Display writing-sector message and patch the JMP instruction.
  1032                                  ;
  1033 0000021B BE[6E04]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1034 0000021E E889FF                                          call    BootPrint                                       ;display message
  1035 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1036 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1037 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1038                                  ;
  1039                                  ;       Try to read the boot sector.
  1040                                  ;
  1041 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1042 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1043 0000022D BB[760A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1044 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1045 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1046 00000236 B80102                                          mov     ax,0201h                                        ;read one sector
  1047 00000239 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1048 0000023B 59                                              pop     cx                                              ;restore remaining retries
  1049 0000023C 7307                                            jnc     .50                                             ;skip ahead if successful
  1050 0000023E E2EC                                            loop    .40                                             ;try again
  1051 00000240 BE[9E04]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1052 00000243 EB2C                                            jmp     .70                                             ;branch to error routine
  1053                                  ;
  1054                                  ;       Copy diskette parms from input buffer to output buffer.
  1055                                  ;
  1056 00000245 BE[760A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1057 00000248 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1058 0000024B BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1059 0000024E 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1060 00000251 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1061 00000254 FC                                              cld                                                     ;forward string copies
  1062 00000255 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1063                                  ;
  1064                                  ;       Try to write boot sector to diskette.
  1065                                  ;
  1066 00000257 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1067 0000025A 51                      .60                     push    cx                                              ;save remaining tries
  1068 0000025B BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1069 0000025E BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1070 00000261 B90100                                          mov     cx,1                                            ;track zero, sector one
  1071 00000264 B80103                                          mov     ax,0301h                                        ;write one sector
  1072 00000267 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1073 00000269 59                                              pop     cx                                              ;restore remaining retries
  1074 0000026A 7326                                            jnc     .100                                            ;skip ahead if successful
  1075 0000026C E2EC                                            loop    .60                                             ;try again
  1076 0000026E BE[EC04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1077                                  ;
  1078                                  ;       Convert the error code to ASCII and display the error message.
  1079                                  ;
  1080 00000271 50                      .70                     push    ax                                              ;save error code
  1081 00000272 88E0                                            mov     al,ah                                           ;copy error code
  1082 00000274 B400                                            mov     ah,0                                            ;AX = error code
  1083 00000276 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1084 00000278 F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1085 0000027A 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1086 0000027D 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1087 00000280 7203                                            jb      .80                                             ;yes, continue
  1088 00000282 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1089 00000285 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1090 00000287 7202                                            jb      .90                                             ;yes, continue
  1091 00000289 0407                                            add     al,7                                            ;no, make ASCII
  1092 0000028B 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1093 0000028E E819FF                                          call    BootPrint                                       ;write error message
  1094 00000291 58                                              pop     ax                                              ;restore error code
  1095                                  ;
  1096                                  ;       Display the completion message.
  1097                                  ;
  1098 00000292 BE[3805]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1099 00000295 88E0                                            mov     al,ah                                           ;BIOS return code
  1100 00000297 3C00                                            cmp     al,0                                            ;success?
  1101 00000299 7426                                            je      .110                                            ;yes, continue
  1102 0000029B BE[D705]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1103 0000029E 3C01                                            cmp     al,1                                            ;disk parameter error?
  1104 000002A0 741F                                            je      .110                                            ;yes, continue
  1105 000002A2 BE[A106]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1106 000002A5 3C02                                            cmp     al,2                                            ;address mark not found?
  1107 000002A7 7418                                            je      .110                                            ;yes, continue
  1108 000002A9 BE[2A07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1109 000002AC 3C03                                            cmp     al,3                                            ;protected disk?
  1110 000002AE 7411                                            je      .110                                            ;yes, continue
  1111 000002B0 BE[E407]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1112 000002B3 3C06                                            cmp     al,6                                            ;diskette removed?
  1113 000002B5 740A                                            je      .110                                            ;yes, continue
  1114 000002B7 BE[1409]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1115 000002BA 3C80                                            cmp     al,80H                                          ;drive timed out?
  1116 000002BC 7403                                            je      .110                                            ;yes, continue
  1117 000002BE BE[C509]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1118 000002C1 E8E6FE                  .110                    call    BootPrint                                       ;display result message
  1119 000002C4 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1120 000002C7 CD21                                            int     021h                                            ;terminate DOS program
  1121 000002C9 C3                                              ret                                                     ;return (should not execute)
  1122                                  ;-----------------------------------------------------------------------------------------------------------------------
  1123                                  ;
  1124                                  ;       Diskette Preparation Messages
  1125                                  ;
  1126                                  ;-----------------------------------------------------------------------------------------------------------------------
  1127 000002CA 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1127 000002D3 5320426F6F742D4469-
  1127 000002DC 736B65747465205072-
  1127 000002E5 657061726174696F6E-
  1127 000002EE 2050726F6772616D   
  1128 000002F6 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1128 000002FF 687420284329203230-
  1128 00000308 31302D323031372044-
  1128 00000311 61766964204A2E2057-
  1128 0000031A 616C6C696E672E2041-
  1128 00000323 6C6C20726967687473-
  1128 0000032C 207265736572766564-
  1128 00000335 2E                 
  1129 00000336 0D0A                                            db      13,10
  1130 00000338 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1130 00000341 6F6772616D206F7665-
  1130 0000034A 727772697465732074-
  1130 00000353 686520626F6F742073-
  1130 0000035C 6563746F72206F6620-
  1130 00000365 61206469736B657474-
  1130 0000036E 652077697468207374-
  1130 00000377 617274757020636F64-
  1130 00000380 652074686174       
  1131 00000386 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1131 0000038F 616420746865206F70-
  1131 00000398 65726174696E672073-
  1131 000003A1 797374656D20696E74-
  1131 000003AA 6F206D656D6F727920-
  1131 000003B3 7768656E2074686520-
  1131 000003BC 636F6D707574657220-
  1131 000003C5 697320726573746172-
  1131 000003CE 7465642E           
  1132 000003D2 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1132 000003DB 6565642C20706C6163-
  1132 000003E4 65206120666F726D61-
  1132 000003ED 74746564206469736B-
  1132 000003F6 6574746520696E746F-
  1132 000003FF 20647269766520413A-
  1132 00000408 20616E642070726573-
  1132 00000411 732074686520456E74-
  1132 0000041A 6572206B65792E     
  1133 00000421 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1133 0000042A 20746869732070726F-
  1133 00000433 6772616D2077697468-
  1133 0000043C 6F7574207072657061-
  1133 00000445 72696E672061206469-
  1133 0000044E 736B657474652C2070-
  1133 00000457 726573732074686520-
  1133 00000460 457363617065206B65-
  1133 00000469 792E               
  1134 0000046B 0D0A00                                          db      13,10,0
  1135 0000046E 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1135 00000477 2074686520626F6F74-
  1135 00000480 20736563746F722074-
  1135 00000489 6F2074686520646973-
  1135 00000492 6B65747465202E2E2E 
  1136 0000049B 0D0A00                                          db      13,10,0
  1137 0000049E 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1137 000004A7 6F722D636F6465202E-
  1137 000004B0 2E2077617320726574-
  1137 000004B9 75726E65642066726F-
  1137 000004C2 6D207468652042494F-
  1137 000004CB 53207768696C652072-
  1137 000004D4 656164696E67206672-
  1137 000004DD 6F6D20746865206469-
  1137 000004E6 736B2E             
  1138 000004E9 0D0A00                                          db      13,10,0
  1139 000004EC 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1139 000004F5 6F722D636F6465202E-
  1139 000004FE 2E2077617320726574-
  1139 00000507 75726E65642066726F-
  1139 00000510 6D207468652042494F-
  1139 00000519 53207768696C652077-
  1139 00000522 726974696E6720746F-
  1139 0000052B 20746865206469736B-
  1139 00000534 2E                 
  1140 00000535 0D0A00                                          db      13,10,0
  1141 00000538 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1141 00000541 742D736563746F7220-
  1141 0000054A 776173207772697474-
  1141 00000553 656E20746F20746865-
  1141 0000055C 206469736B65747465-
  1141 00000565 2E204265666F726520-
  1141 0000056E 626F6F74696E672079-
  1141 00000577 6F757220636F6D7075-
  1141 00000580 7465722077697468   
  1142 00000588 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1142 00000591 736B657474652C206D-
  1142 0000059A 616B65207375726520-
  1142 000005A3 746861742074686520-
  1142 000005AC 66696C65204F532E43-
  1142 000005B5 4F4D20697320636F70-
  1142 000005BE 696564206F6E746F20-
  1142 000005C7 746865206469736B65-
  1142 000005D0 7474652E           
  1143 000005D4 0D0A00                                          db      13,10,0
  1144 000005D7 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1144 000005E0 76616C696420446973-
  1144 000005E9 6B20506172616D6574-
  1144 000005F2 6572               
  1145 000005F4 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1145 000005FD 20616E20696E746572-
  1145 00000606 6E616C206572726F72-
  1145 0000060F 206361757365642062-
  1145 00000618 7920616E20696E7661-
  1145 00000621 6C69642076616C7565-
  1145 0000062A 206265696E67207061-
  1145 00000633 7373656420746F2061-
  1145 0000063C 2073797374656D     
  1146 00000643 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1146 0000064C 6E2E20546865204F53-
  1146 00000655 424F4F542E434F4D20-
  1146 0000065E 66696C65206D617920-
  1146 00000667 626520636F72727570-
  1146 00000670 742E20436F7079206F-
  1146 00000679 7220646F776E6C6F61-
  1146 00000682 64207468652066696C-
  1146 0000068B 6520616761696E     
  1147 00000692 0D0A616E6420726574-                             db      13,10,"and retry."
  1147 0000069B 72792E             
  1148 0000069E 0D0A00                                          db      13,10,0
  1149 000006A1 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1149 000006AA 6472657373204D6172-
  1149 000006B3 6B204E6F7420466F75-
  1149 000006BC 6E64               
  1150 000006BE 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1150 000006C7 726F7220696E646963-
  1150 000006D0 617465732061207068-
  1150 000006D9 79736963616C207072-
  1150 000006E2 6F626C656D20776974-
  1150 000006EB 682074686520666C6F-
  1150 000006F4 707079206469736B65-
  1150 000006FD 7474652E20506C6561-
  1150 00000706 7365207265747279   
  1151 0000070E 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1151 00000717 6E6F74686572206469-
  1151 00000720 736B657474652E     
  1152 00000727 0D0A00                                          db      13,10,0
  1153 0000072A 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1153 00000733 6F7465637465642044-
  1153 0000073C 69736B             
  1154 0000073F 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1154 00000748 726F72206973207573-
  1154 00000751 75616C6C7920636175-
  1154 0000075A 736564206279206174-
  1154 00000763 74656D7074696E6720-
  1154 0000076C 746F20777269746520-
  1154 00000775 746F20612077726974-
  1154 0000077E 652D70726F74656374-
  1154 00000787 6564206469736B2E   
  1155 0000078F 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1155 00000798 686520277772697465-
  1155 000007A1 2D70726F7465637427-
  1155 000007AA 2073657474696E6720-
  1155 000007B3 6F6E20746865206469-
  1155 000007BC 736B206F7220726574-
  1155 000007C5 7279207573696E6720-
  1155 000007CE 7573696E6720616E6F-
  1155 000007D7 74686572206469736B-
  1155 000007E0 2E                 
  1156 000007E1 0D0A00                                          db      13,10,0
  1157 000007E4 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1157 000007ED 736B65747465205265-
  1157 000007F6 6D6F766564         
  1158 000007FB 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1158 00000804 726F72206D61792069-
  1158 0000080D 6E6469636174652074-
  1158 00000816 686174207468652066-
  1158 0000081F 6C6F70707920646973-
  1158 00000828 6B6574746520686173-
  1158 00000831 206265656E2072656D-
  1158 0000083A 6F7665642066726F6D-
  1158 00000843 20746865           
  1159 00000847 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1159 00000850 652064726976652E20-
  1159 00000859 4F6E20736F6D652073-
  1159 00000862 797374656D732C2074-
  1159 0000086B 68697320636F646520-
  1159 00000874 6D617920616C736F20-
  1159 0000087D 6F6363757220696620-
  1159 00000886 746865206469736B65-
  1159 0000088F 747465206973       
  1160 00000895 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1160 0000089E 70726F746563746564-
  1160 000008A7 2E2720506C65617365-
  1160 000008B0 207665726966792074-
  1160 000008B9 686174207468652064-
  1160 000008C2 69736B657474652069-
  1160 000008CB 73206E6F7420777269-
  1160 000008D4 74652D70726F746563-
  1160 000008DD 74656420616E64     
  1161 000008E4 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1161 000008ED 65726C7920696E7365-
  1161 000008F6 7274656420696E2074-
  1161 000008FF 6865206469736B6574-
  1161 00000908 74652064726976652E 
  1162 00000911 0D0A00                                          db      13,10,0
  1163 00000914 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1163 0000091D 6976652054696D6564-
  1163 00000926 204F7574           
  1164 0000092A 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1164 00000933 726F7220757375616C-
  1164 0000093C 6C7920696E64696361-
  1164 00000945 746573207468617420-
  1164 0000094E 6E6F206469736B6574-
  1164 00000957 746520697320696E20-
  1164 00000960 746865206469736B65-
  1164 00000969 747465206472697665-
  1164 00000972 2E20506C65617365   
  1165 0000097A 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1165 00000983 726520746861742074-
  1165 0000098C 6865206469736B6574-
  1165 00000995 74652069732070726F-
  1165 0000099E 7065726C7920736561-
  1165 000009A7 74656420696E207468-
  1165 000009B0 652064726976652061-
  1165 000009B9 6E642072657472792E 
  1166 000009C2 0D0A00                                          db      13,10,0
  1167 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1167 000009CE 6B6E6F776E20457272-
  1167 000009D7 6F72               
  1168 000009D9 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1168 000009E2 6F722D636F64652072-
  1168 000009EB 657475726E65642062-
  1168 000009F4 79207468652042494F-
  1168 000009FD 53206973206E6F7420-
  1168 00000A06 61207265636F676E69-
  1168 00000A0F 7A6564206572726F72-
  1168 00000A18 2E20506C6561736520-
  1168 00000A21 636F6E73756C74     
  1169 00000A28 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1169 00000A31 6D7075746572277320-
  1169 00000A3A 746563686E6963616C-
  1169 00000A43 207265666572656E63-
  1169 00000A4C 6520666F7220612064-
  1169 00000A55 65736372697074696F-
  1169 00000A5E 6E206F662074686973-
  1169 00000A67 206572726F7220636F-
  1169 00000A70 64652E             
  1170 00000A73 0D0A00                                          db      13,10,0
  1171                                  wcPrepInBuf             equ     $
  1172                                  %endif
  1173                                  %ifdef BUILDDISK
  1174                                  ;=======================================================================================================================
  1175                                  ;
  1176                                  ;       File Allocation Tables
  1177                                  ;
  1178                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1179                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1180                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1181                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1182                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1183                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1184                                  ;       the last cluster in the chain.
  1185                                  ;
  1186                                  ;       Every three bytes encode two FAT entries as follows:
  1187                                  ;
  1188                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1189                                  ;
  1190                                  ;=======================================================================================================================
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  ;
  1193                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1194                                  ;
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  section                 fat1                                                    ;first copy of FAT
  1197                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1198                                                          db      005h,060h,000h, 007h,080h,000h
  1199                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1200                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1201                                                          db      011h,020h,001h, 013h,040h,001h
  1202                                                          db      015h,060h,001h, 017h,080h,001h
  1203                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1204                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1205                                                          db      021h,020h,002h, 023h,040h,002h
  1206                                                          db      025h,060h,002h, 027h,080h,002h
  1207                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1208                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1209                                  ;-----------------------------------------------------------------------------------------------------------------------
  1210                                  ;
  1211                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1212                                  ;
  1213                                  ;-----------------------------------------------------------------------------------------------------------------------
  1214                                  section                 fat2                                                    ;second copy of FAT
  1215                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1216                                                          db      005h,060h,000h, 007h,080h,000h
  1217                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1218                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1219                                                          db      011h,020h,001h, 013h,040h,001h
  1220                                                          db      015h,060h,001h, 017h,080h,001h
  1221                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1222                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1223                                                          db      021h,020h,002h, 023h,040h,002h
  1224                                                          db      025h,060h,002h, 027h,080h,002h
  1225                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1226                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  ;
  1229                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1230                                  ;
  1231                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1232                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1233                                  ;       copy.
  1234                                  ;
  1235                                  ;-----------------------------------------------------------------------------------------------------------------------
  1236                                  section                 dir                                                     ;diskette directory
  1237                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1238                                                          db      020h                                            ;attribute (archive bit set)
  1239                                                          times   10 db 0                                         ;unused
  1240                                                          dw      0h                                              ;time
  1241                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1242                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1243                                                          dw      2                                               ;first cluster
  1244                                                          dd      05400h                                          ;file size
  1245                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1246                                  %endif
  1247                                  %ifdef BUILDCOM
  1248                                  ;=======================================================================================================================
  1249                                  ;
  1250                                  ;       OS.COM
  1251                                  ;
  1252                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1253                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1254                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1255                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1256                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1257                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1258                                  ;
  1259                                  ;       Our loader addressability is set up according to the following diagram.
  1260                                  ;
  1261                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1262                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1263                                  ;                               |  256 = 100h bytes                             |
  1264                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1265                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1266                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1267                                  ;                       007e00  +-----------------------------------------------+
  1268                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1269                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1270                                  ;                               |                                               |
  1271                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1272                                  ;                               |                                               |
  1273                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1274                                  ;                               |  Loader Code                                  |
  1275                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1276                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1277                                  ;
  1278                                  ;=======================================================================================================================
  1279                                  ;-----------------------------------------------------------------------------------------------------------------------
  1280                                  ;
  1281                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1282                                  ;
  1283                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1284                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1285                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1286                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1287                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1288                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1289                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1290                                  ;       registers.
  1291                                  ;
  1292                                  ;-----------------------------------------------------------------------------------------------------------------------
  1293                                                          cpu     8086                                            ;assume minimal CPU
  1294                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1295                                                          bits    16                                              ;this is 16-bit code
  1296                                  Loader                  push    cs                                              ;use the code segment
  1297                                                          pop     ds                                              ;...as our data segment
  1298                                                          push    cs                                              ;use the code segment
  1299                                                          pop     es                                              ;...as our extra segment
  1300                                  ;
  1301                                  ;       Write a message to the console so we know we have our addressability established.
  1302                                  ;
  1303                                                          mov     si,czStartingMsg                                ;starting message
  1304                                                          call    PutTTYString                                    ;display loader message
  1305                                  ;
  1306                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1307                                  ;
  1308                                                          call    GetCPUType                                      ;AL = cpu type
  1309                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1310                                                          cmp     al,3                                            ;80386+?
  1311                                                          jb      LoaderExit                                      ;no, exit with error message
  1312                                                          cpu     386                                             ;allow 80386 instructions
  1313                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1314                                                          call    PutTTYString                                    ;display message
  1315                                  ;
  1316                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1317                                  ;
  1318                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1319                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1320                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1321                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1322                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1323                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1324                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1325                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1326                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1327                                                          call    PutTTYString                                    ;display message
  1328                                  ;
  1329                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1330                                  ;
  1331                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1332                                                          pop     es                                              ;... as target segment
  1333                                                          xor     di,di                                           ;ES:DI = target address
  1334                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1335                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1336                                                          cld                                                     ;forward strings
  1337                                                          rep     movsb                                           ;copy kernel image
  1338                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1339                                                          call    PutTTYString                                    ;display message
  1340                                  ;
  1341                                  ;       Switch to protected mode.
  1342                                  ;
  1343                                                          xor     si,si                                           ;ES:SI = gdt addr
  1344                                                          mov     ss,si                                           ;protected mode ss
  1345                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1346                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1347                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1348                                                          mov     dx,001Fh                                        ;outer delay loop count
  1349                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1350                                                          loop    $                                               ;wait out pending interrupts
  1351                                                          dec     dx                                              ;restore outer loop count
  1352                                                          jnz     .10                                             ;continue outer loop
  1353                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1354                                  ;
  1355                                  ;       Enable hardware and maskable interrupts.
  1356                                  ;
  1357                                                          xor     al,al                                           ;enable all registers code
  1358                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1359                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1360                                                          sti                                                     ;enable maskable interrupts
  1361                                  ;
  1362                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1363                                  ;
  1364                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1365                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1366                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  ;
  1369                                  ;       Routine:        LoaderExit
  1370                                  ;
  1371                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1372                                  ;
  1373                                  ;       In:             DS:SI   string address
  1374                                  ;
  1375                                  ;-----------------------------------------------------------------------------------------------------------------------
  1376                                  LoaderExit              call    PutTTYString                                    ;display error message
  1377                                  ;
  1378                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1379                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1380                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1381                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1382                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1383                                  ;
  1384                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1385                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1386                                                          jnz     .40                                             ;exit if key pressed
  1387                                                          sti                                                     ;enable maskable interrupts
  1388                                                          hlt                                                     ;wait for interrupt
  1389                                                          jmp     .30                                             ;repeat until keypress
  1390                                  ;
  1391                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1392                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1393                                  ;       HLT until the system resets.
  1394                                  ;
  1395                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1396                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1397                                  .50                     sti                                                     ;enable maskable interrupts
  1398                                                          hlt                                                     ;stop until reset, int, nmi
  1399                                                          jmp     .50                                             ;loop until restart kicks in
  1400                                  ;-----------------------------------------------------------------------------------------------------------------------
  1401                                  ;
  1402                                  ;       Routine:        GetCPUType
  1403                                  ;
  1404                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1405                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1406                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1407                                  ;
  1408                                  ;       Out:            AX      0 = 808x, v20, etc.
  1409                                  ;                               1 = 80186
  1410                                  ;                               2 = 80286
  1411                                  ;                               3 = 80386
  1412                                  ;
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  GetCPUType              mov     al,1                                            ;AL = 1
  1415                                                          mov     cl,32                                           ;shift count
  1416                                                          shr     al,cl                                           ;try a 32-bit shift
  1417                                                          or      al,al                                           ;did the shift happen?
  1418                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1419                                                          cpu     186
  1420                                                          push    sp                                              ;save stack pointer
  1421                                                          pop     cx                                              ;...into cx
  1422                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1423                                                          jne     .10                                             ;yes, cpu is 80186
  1424                                                          cpu     286
  1425                                                          inc     ax                                              ;AX = 2
  1426                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1427                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1428                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1429                                                          jz      .10                                             ;yes, cpu is 80286
  1430                                                          inc     ax                                              ;AX = 3
  1431                                  .10                     ret                                                     ;return
  1432                                  ;-----------------------------------------------------------------------------------------------------------------------
  1433                                  ;
  1434                                  ;       Routine:        PutTTYString
  1435                                  ;
  1436                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1437                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1438                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1439                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1440                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1441                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1442                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1443                                  ;                       to LODSB is not needed.
  1444                                  ;
  1445                                  ;       In:             DS:SI   address of string
  1446                                  ;
  1447                                  ;       Out:            DF      0
  1448                                  ;                       ZF      1
  1449                                  ;                       AL      0
  1450                                  ;
  1451                                  ;-----------------------------------------------------------------------------------------------------------------------
  1452                                  PutTTYString            cld                                                     ;forward strings
  1453                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1454                                                          test    al,al                                           ;end of string?
  1455                                                          jz      .20                                             ;... yes, exit our loop
  1456                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1457                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1458                                                          jmp     .10                                             ;repeat until done
  1459                                  .20                     ret                                                     ;return
  1460                                  ;-----------------------------------------------------------------------------------------------------------------------
  1461                                  ;
  1462                                  ;       Loader Data
  1463                                  ;
  1464                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1465                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1466                                  ;
  1467                                  ;-----------------------------------------------------------------------------------------------------------------------
  1468                                                          align   2
  1469                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1470                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1471                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1472                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1473                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1474                                                          db      "Please press any key to restart the computer.",13,10,0
  1475                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1476                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1477                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1478                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1479                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1480                                  ;=======================================================================================================================
  1481                                  ;
  1482                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1483                                  ;
  1484                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1485                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1486                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1487                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1488                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1489                                  ;
  1490                                  ;=======================================================================================================================
  1491                                  ;=======================================================================================================================
  1492                                  ;
  1493                                  ;       Kernel Tables
  1494                                  ;
  1495                                  ;=======================================================================================================================
  1496                                  ;-----------------------------------------------------------------------------------------------------------------------
  1497                                  ;
  1498                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1499                                  ;
  1500                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1501                                  ;       first descriptor must be all nulls.
  1502                                  ;
  1503                                  ;       6   5         4         3         2         1         0
  1504                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1505                                  ;       ----------------------------------------------------------------
  1506                                  ;       h......hffffmmmma......ab......................bn..............n
  1507                                  ;       00000000                        all areas have base addresses below 2^24
  1508                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1509                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1510                                  ;                   1001                present, ring-0, selector
  1511                                  ;
  1512                                  ;       h...h   hi-order base address (bits 24-31)
  1513                                  ;       ffff    flags
  1514                                  ;       mmmm    hi-order limit (bits 16-19)
  1515                                  ;       a...a   access
  1516                                  ;       b...b   lo-order base address (bits 0-23)
  1517                                  ;       n...n   lo-order limit (bits 0-15)
  1518                                  ;
  1519                                  ;-----------------------------------------------------------------------------------------------------------------------
  1520                                  section                 gdt                                                     ;global descriptor table
  1521                                                          dq      0000000000000000h                               ;00 required null selector
  1522                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1523                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1524                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1525                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1526                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1527                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1528                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1529                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1530                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1531                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1532                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1533                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1534                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1535                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1536                                  ;-----------------------------------------------------------------------------------------------------------------------
  1537                                  ;
  1538                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1539                                  ;
  1540                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1541                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1542                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1543                                  ;
  1544                                  ;       6   5         4         3         2         1         0
  1545                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1546                                  ;       ----------------------------------------------------------------
  1547                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1548                                  ;
  1549                                  ;       h...h   high-order offset (bits 16-31)
  1550                                  ;       P       present (0=unused interrupt)
  1551                                  ;       zz      descriptor privilege level
  1552                                  ;       S       storage segment (must be zero for IDT)
  1553                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1554                                  ;       S...S   handling code selector in GDT
  1555                                  ;       l...l   lo-order offset (bits 0-15)
  1556                                  ;
  1557                                  ;-----------------------------------------------------------------------------------------------------------------------
  1558                                  section                 idt                                                     ;interrupt descriptor table
  1559                                                          mint    dividebyzero                                    ;00 divide by zero
  1560                                                          mint    singlestep                                      ;01 single step
  1561                                                          mint    nmi                                             ;02 non-maskable
  1562                                                          mint    break                                           ;03 break
  1563                                                          mint    into                                            ;04 into
  1564                                                          mint    bounds                                          ;05 bounds
  1565                                                          mint    badopcode                                       ;06 bad op code
  1566                                                          mint    nocoproc                                        ;07 no coprocessor
  1567                                                          mint    doublefault                                     ;08 double-fault
  1568                                                          mint    operand                                         ;09 operand
  1569                                                          mint    badtss                                          ;0a bad TSS
  1570                                                          mint    notpresent                                      ;0b not-present
  1571                                                          mint    stacklimit                                      ;0c stack limit
  1572                                                          mint    protection                                      ;0d general protection fault
  1573                                                          mint    int14                                           ;0e (reserved)
  1574                                                          mint    int15                                           ;0f (reserved)
  1575                                                          mint    coproccalc                                      ;10 (reserved)
  1576                                                          mint    int17                                           ;11 (reserved)
  1577                                                          mint    int18                                           ;12 (reserved)
  1578                                                          mint    int19                                           ;13 (reserved)
  1579                                                          mint    int20                                           ;14 (reserved)
  1580                                                          mint    int21                                           ;15 (reserved)
  1581                                                          mint    int22                                           ;16 (reserved)
  1582                                                          mint    int23                                           ;17 (reserved)
  1583                                                          mint    int24                                           ;18 (reserved)
  1584                                                          mint    int25                                           ;19 (reserved)
  1585                                                          mint    int26                                           ;1a (reserved)
  1586                                                          mint    int27                                           ;1b (reserved)
  1587                                                          mint    int28                                           ;1c (reserved)
  1588                                                          mint    int29                                           ;1d (reserved)
  1589                                                          mint    int30                                           ;1e (reserved)
  1590                                                          mint    int31                                           ;1f (reserved)
  1591                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1592                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1593                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1594                                                          mtrap   com2                                            ;23 IRQ3 com2
  1595                                                          mtrap   com1                                            ;24 IRQ4 com1
  1596                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1597                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1598                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1599                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1600                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1601                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1602                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1603                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1604                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1605                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1606                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1607                                                          mtrap   svc                                             ;30 OS services
  1608                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1609                                  ;=======================================================================================================================
  1610                                  ;
  1611                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1612                                  ;
  1613                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1614                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1615                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1616                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1617                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1618                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1619                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1620                                  ;
  1621                                  ;=======================================================================================================================
  1622                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1623                                                          cpu     386                                             ;allow 80386 instructions
  1624                                                          bits    32                                              ;this is 32-bit code
  1625                                  ;=======================================================================================================================
  1626                                  ;
  1627                                  ;       CPU Interrupt Handlers
  1628                                  ;
  1629                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1630                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1631                                  ;
  1632                                  ;=======================================================================================================================
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  ;
  1635                                  ;       INT0    Divide By Zero
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                                          menter  dividebyzero                                    ;divide by zero
  1639                                                          push    0                                               ;store interrupt nbr
  1640                                                          push    czIntDivideByZero                               ;store message offset
  1641                                                          jmp     ReportInterrupt                                 ;report interrupt
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  ;
  1644                                  ;       INT1    Single Step
  1645                                  ;
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                                          menter  singlestep                                      ;single step
  1648                                                          push    1                                               ;store interrupt nbr
  1649                                                          push    czIntSingleStep                                 ;store message offset
  1650                                                          jmp     ReportInterrupt                                 ;report interrupt
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  ;
  1653                                  ;       INT2    Non-Maskable Interrupt
  1654                                  ;
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                                          menter  nmi                                             ;non-maskable
  1657                                                          push    2                                               ;store interrupt nbr
  1658                                                          push    czIntNonMaskable                                ;store message offset
  1659                                                          jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT3    Break
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  break                                           ;break
  1666                                                          push    3                                               ;store interrupt nbr
  1667                                                          push    czIntBreak                                      ;store message offset
  1668                                                          jmp     ReportInterrupt                                 ;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;       INT4    Into
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                                          menter  into                                            ;into
  1675                                                          push    4                                               ;store interrupt nbr
  1676                                                          push    czIntInto                                       ;store message offset
  1677                                                          jmp     ReportInterrupt                                 ;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;       INT5    Bounds
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                                          menter  bounds                                          ;bounds
  1684                                                          push    5                                               ;store interrupt nbr
  1685                                                          push    czIntBounds                                     ;store message offset
  1686                                                          jmp     ReportInterrupt                                 ;report interrupt
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  ;
  1689                                  ;       INT6    Bad Operation Code
  1690                                  ;
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                                          menter  badopcode                                       ;bad opcode interrupt
  1693                                                          push    6                                               ;store interrupt nbr
  1694                                                          push    czIntBadOpCode                                  ;store message offset
  1695                                                          jmp     ReportInterrupt                                 ;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;       INT7    No Coprocessor
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1702                                                          push    7                                               ;store interrupt nbr
  1703                                                          push    czIntNoCoprocessor                              ;store message offset
  1704                                                          jmp     ReportInterrupt                                 ;report interrupt
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  ;
  1707                                  ;       INT8    Double Fault
  1708                                  ;
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                                          menter  doublefault                                     ;doublefault interrupt
  1711                                                          push    8                                               ;store interrupt nbr
  1712                                                          push    czIntDoubleFault                                ;store message offset
  1713                                                          jmp     ReportInterrupt                                 ;report interrupt
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  ;
  1716                                  ;       INT9    Operand
  1717                                  ;
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                                          menter  operand                                         ;operand interrupt
  1720                                                          push    9                                               ;store interrupt nbr
  1721                                                          push    czIntOperand                                    ;store message offset
  1722                                                          jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT10   Bad Task State Segment
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  badtss                                          ;bad TSS interrupt
  1729                                                          push    10                                              ;store interrupt nbr
  1730                                                          push    czIntBadTSS                                     ;store message offset
  1731                                                          jmp     ReportInterrupt                                 ;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;       INT11   Not Present
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                                          menter  notpresent                                      ;not present interrupt
  1738                                                          push    11                                              ;store interrupt nbr
  1739                                                          push    czIntNotPresent                                 ;store message offset
  1740                                                          jmp     ReportInterrupt                                 ;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;       INT12   Stack Limit
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                                          menter  stacklimit                                      ;stack limit interrupt
  1747                                                          push    12                                              ;store interrupt nbr
  1748                                                          push    czIntStackLimit                                 ;store message offset
  1749                                                          jmp     ReportInterrupt                                 ;report interrupt
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  ;
  1752                                  ;       INT13   General Protection Fault
  1753                                  ;
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                                          menter  protection                                      ;protection fault interrupt
  1756                                                          push    13                                              ;store interrupt nbr
  1757                                                          push    czIntProtection                                 ;store message offset
  1758                                                          jmp     ReportInterrupt                                 ;report interrupt
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  ;
  1761                                  ;       INT14   Reserved
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                                          menter  int14                                           ;(reserved)
  1765                                                          push    14                                              ;store interrupt nbr
  1766                                                          push    czIntReserved                                   ;store message offset
  1767                                                          jmp     ReportInterrupt                                 ;report interrupt
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  ;
  1770                                  ;       INT15   Reserved
  1771                                  ;
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                                          menter  int15                                           ;(reserved)
  1774                                                          push    15                                              ;store interrupt nbr
  1775                                                          push    czIntReserved                                   ;store message offset
  1776                                                          jmp     ReportInterrupt                                 ;report interrupt
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  ;
  1779                                  ;       INT16   Coprocessor Calculation
  1780                                  ;
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                                          menter  coproccalc                                      ;coprocessor calculation
  1783                                                          push    16                                              ;store interrupt nbr
  1784                                                          push    czIntCoprocessorCalc                            ;store message offset
  1785                                                          jmp     ReportInterrupt                                 ;report interrupt
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ;
  1788                                  ;       INT17   Reserved
  1789                                  ;
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                                          menter  int17                                           ;(reserved)
  1792                                                          push    17                                              ;store interrupt nbr
  1793                                                          push    czIntReserved                                   ;store message offset
  1794                                                          jmp     ReportInterrupt                                 ;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;       INT18   Reserved
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                                          menter  int18                                           ;(reserved)
  1801                                                          push    18                                              ;store interrupt nbr
  1802                                                          push    czIntReserved                                   ;store message offset
  1803                                                          jmp     ReportInterrupt                                 ;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;       INT19   Reserved
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                                          menter  int19                                           ;(reserved)
  1810                                                          push    19                                              ;store interrupt nbr
  1811                                                          push    czIntReserved                                   ;store message offset
  1812                                                          jmp     ReportInterrupt                                 ;report interrupt
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                  ;
  1815                                  ;       INT20   Reserved
  1816                                  ;
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                                          menter  int20                                           ;(reserved)
  1819                                                          push    20                                              ;store interrupt nbr
  1820                                                          push    czIntReserved                                   ;store message offset
  1821                                                          jmp     ReportInterrupt                                 ;report interrupt
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                  ;
  1824                                  ;       INT21   Reserved
  1825                                  ;
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                                          menter  int21                                           ;(reserved)
  1828                                                          push    21                                              ;store interrupt nbr
  1829                                                          push    czIntReserved                                   ;store message offset
  1830                                                          jmp     ReportInterrupt                                 ;report interrupt
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;       INT22   Reserved
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                                          menter  int22                                           ;(reserved)
  1837                                                          push    22                                              ;store interrupt nbr
  1838                                                          push    czIntReserved                                   ;store message offset
  1839                                                          jmp     ReportInterrupt                                 ;report interrupt
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  ;
  1842                                  ;       INT23   Reserved
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                                          menter  int23                                           ;(reserved)
  1846                                                          push    23                                              ;store interrupt nbr
  1847                                                          push    czIntReserved                                   ;store message offset
  1848                                                          jmp     ReportInterrupt                                 ;report interrupt
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                  ;
  1851                                  ;       INT24   Reserved
  1852                                  ;
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                                          menter  int24                                           ;(reserved)
  1855                                                          push    24                                              ;store interrupt nbr
  1856                                                          push    czIntReserved                                   ;store message offset
  1857                                                          jmp     ReportInterrupt                                 ;report interrupt
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;       INT25   Reserved
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                                          menter  int25                                           ;(reserved)
  1864                                                          push    25                                              ;store interrupt nbr
  1865                                                          push    czIntReserved                                   ;store message offset
  1866                                                          jmp     ReportInterrupt                                 ;report interrupt
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                  ;
  1869                                  ;       INT26   Reserved
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                                          menter  int26                                           ;(reserved)
  1873                                                          push    26                                              ;store interrupt nbr
  1874                                                          push    czIntReserved                                   ;store message offset
  1875                                                          jmp     ReportInterrupt                                 ;report interrupt
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;       INT27   Reserved
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                                          menter  int27                                           ;(reserved)
  1882                                                          push    27                                              ;store interrupt nbr
  1883                                                          push    czIntReserved                                   ;store message offset
  1884                                                          jmp     ReportInterrupt                                 ;report interrupt
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  ;
  1887                                  ;       INT28   Reserved
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                                          menter  int28                                           ;(reserved)
  1891                                                          push    28                                              ;store interrupt nbr
  1892                                                          push    czIntReserved                                   ;store message offset
  1893                                                          jmp     ReportInterrupt                                 ;report interrupt
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;       INT29   Reserved
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                                          menter  int29                                           ;(reserved)
  1900                                                          push    29                                              ;store interrupt nbr
  1901                                                          push    czIntReserved                                   ;store message offset
  1902                                                          jmp     ReportInterrupt                                 ;report interrupt
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;
  1905                                  ;       INT30   Reserved
  1906                                  ;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                                          menter  int30                                           ;(reserved)
  1909                                                          push    30                                              ;store interrupt nbr
  1910                                                          push    czIntReserved                                   ;store message offset
  1911                                                          jmp     ReportInterrupt                                 ;report interrupt
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;       INT31   Reserved
  1915                                  ;
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                                          menter  int31                                           ;(reserved)
  1918                                                          push    31                                              ;store interrupt nbr
  1919                                                          push    czIntReserved                                   ;store message offset
  1920                                                          jmp     ReportInterrupt                                 ;report interrupt
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;       Routine:        ReportInterrupt
  1924                                  ;
  1925                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1926                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1927                                  ;
  1928                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1929                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1930                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1931                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1932                                  ;                       [esp+0]         error message address                   stored by push instructions
  1933                                  ;
  1934                                  ;       Out:            N/A             This routine does not exit.
  1935                                  ;
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1938                                                          push    es                                              ;save ES at time of interrupt
  1939                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1940                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1941                                  ;
  1942                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1943                                  ;
  1944                                  ;                       [ebp+56]        eflags
  1945                                  ;                       [ebp+52]        cs
  1946                                  ;                       [ebp+48]        eip
  1947                                  ;                       [ebp+44]        interrupt number (0-31)
  1948                                  ;                       [ebp+40]        error message address
  1949                                  ;                       [ebp+36]        ds
  1950                                  ;                       [ebp+32]        es
  1951                                  ;                       [ebp+28]        eax
  1952                                  ;                       [ebp+24]        ecx
  1953                                  ;                       [ebp+20]        edx
  1954                                  ;                       [ebp+16]        ebx
  1955                                  ;                       [ebp+12]        esp
  1956                                  ;                       [ebp+8]         ebp
  1957                                  ;                       [ebp+4]         esi
  1958                                  ;                       [ebp+0]         edi
  1959                                  ;
  1960                                                          push    cs                                              ;load code selector ...
  1961                                                          pop     ds                                              ;... into DS
  1962                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1963                                                          pop     es                                              ;... into ES
  1964                                  ;
  1965                                  ;       Display the interrupt report boundary box
  1966                                  ;
  1967                                                          mov     cl,13                                           ;column
  1968                                                          mov     ch,6                                            ;row
  1969                                                          mov     dl,50                                           ;width
  1970                                                          mov     dh,8                                            ;height
  1971                                                          mov     bh,07h                                          ;attribute
  1972                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1973                                  ;
  1974                                  ;       Display the report header
  1975                                  ;
  1976                                                          mov     cl,15                                           ;column
  1977                                                          mov     ch,7                                            ;row
  1978                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1979                                                          call    SetConsoleString                                ;draw text string
  1980                                  ;
  1981                                  ;       Display the interrupt description label
  1982                                  ;
  1983                                                          mov     cl,15                                           ;column
  1984                                                          mov     ch,8                                            ;row
  1985                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1986                                                          call    SetConsoleString                                ;draw text string
  1987                                  ;
  1988                                  ;       Display the interrupt number
  1989                                  ;
  1990                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1991                                                          mov     cl,26                                           ;column
  1992                                                          mov     ch,8                                            ;row
  1993                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1994                                  ;
  1995                                  ;       Display the interrupt name
  1996                                  ;
  1997                                                          mov     cl,29                                           ;column
  1998                                                          mov     ch,8                                            ;row
  1999                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2000                                                          call    SetConsoleString                                ;display interrupt description
  2001                                  ;
  2002                                  ;       Display the register values header
  2003                                  ;
  2004                                                          mov     cl,15                                           ;column
  2005                                                          mov     ch,10                                           ;row
  2006                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2007                                                          call    SetConsoleString                                ;draw text string
  2008                                  ;
  2009                                  ;       Display the EAX register label and value
  2010                                  ;
  2011                                                          mov     cl,15                                           ;column
  2012                                                          mov     ch,11                                           ;row
  2013                                                          mov     esi,czIntEAX                                    ;register EAX label
  2014                                                          call    SetConsoleString                                ;draw label
  2015                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2016                                                          mov     cl,19                                           ;column
  2017                                                          mov     ch,11                                           ;row
  2018                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2019                                  ;
  2020                                  ;       Display the ECX register label and value
  2021                                  ;
  2022                                                          mov     cl,15                                           ;column
  2023                                                          mov     ch,12                                           ;row
  2024                                                          mov     esi,czIntECX                                    ;label
  2025                                                          call    SetConsoleString                                ;draw label
  2026                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2027                                                          mov     cl,19                                           ;column
  2028                                                          mov     ch,12                                           ;row
  2029                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2030                                  ;
  2031                                  ;       Display the EDX register label and value
  2032                                  ;
  2033                                                          mov     cl,15                                           ;column
  2034                                                          mov     ch,13                                           ;row
  2035                                                          mov     esi,czIntEDX                                    ;label
  2036                                                          call    SetConsoleString                                ;draw label
  2037                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2038                                                          mov     cl,19                                           ;column
  2039                                                          mov     ch,13                                           ;row
  2040                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2041                                  ;
  2042                                  ;       Display the EBX register label and value
  2043                                  ;
  2044                                                          mov     cl,15                                           ;column
  2045                                                          mov     ch,14                                           ;row
  2046                                                          mov     esi,czIntEBX                                    ;label
  2047                                                          call    SetConsoleString                                ;draw label
  2048                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2049                                                          mov     cl,19                                           ;column
  2050                                                          mov     ch,14                                           ;row
  2051                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2052                                  ;
  2053                                  ;       Display the ESI register label and value
  2054                                  ;
  2055                                                          mov     cl,29                                           ;column
  2056                                                          mov     ch,11                                           ;row
  2057                                                          mov     esi,czIntESI                                    ;label
  2058                                                          call    SetConsoleString                                ;draw label
  2059                                                          mov     eax,[ebp+4]                                     ;ESI
  2060                                                          mov     cl,33                                           ;column
  2061                                                          mov     ch,11                                           ;row
  2062                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;       Display the EDI register label and value
  2065                                  ;
  2066                                                          mov     cl,29                                           ;column
  2067                                                          mov     ch,12                                           ;row
  2068                                                          mov     esi,czIntEDI                                    ;label
  2069                                                          call    SetConsoleString                                ;draw label
  2070                                                          mov     eax,[ebp+0]                                     ;EDI
  2071                                                          mov     cl,33                                           ;column
  2072                                                          mov     ch,12                                           ;row
  2073                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2074                                  ;
  2075                                  ;       Display the EBP register label and value
  2076                                  ;
  2077                                                          mov     cl,29                                           ;column
  2078                                                          mov     ch,13                                           ;row
  2079                                                          mov     esi,czIntEBP                                    ;label
  2080                                                          call    SetConsoleString                                ;draw label
  2081                                                          mov     eax,[ebp+8]                                     ;EBP
  2082                                                          mov     cl,33                                           ;column
  2083                                                          mov     ch,13                                           ;row
  2084                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2085                                  ;
  2086                                  ;       Display the DS register label and value
  2087                                  ;
  2088                                                          mov     cl,42                                           ;column
  2089                                                          mov     ch,11                                           ;row
  2090                                                          mov     esi,czIntDS                                     ;label
  2091                                                          call    SetConsoleString                                ;draw label
  2092                                                          xor     eax,eax                                         ;zero register
  2093                                                          mov     ax,[ebp+36]                                     ;DS
  2094                                                          mov     cl,46                                           ;column
  2095                                                          mov     ch,11                                           ;row
  2096                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2097                                  ;
  2098                                  ;       Display the ES register label and value
  2099                                  ;
  2100                                                          mov     cl,42                                           ;column
  2101                                                          mov     ch,12                                           ;row
  2102                                                          mov     esi,czIntES                                     ;label
  2103                                                          call    SetConsoleString                                ;draw label
  2104                                                          xor     eax,eax                                         ;zero register
  2105                                                          mov     ax,[ebp+32]                                     ;ES
  2106                                                          mov     cl,46                                           ;column
  2107                                                          mov     ch,12                                           ;row
  2108                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2109                                  ;
  2110                                  ;       Display the SS register label and value
  2111                                  ;
  2112                                                          mov     cl,42                                           ;column
  2113                                                          mov     ch,13                                           ;row
  2114                                                          mov     esi,czIntSS                                     ;label
  2115                                                          call    SetConsoleString                                ;draw label
  2116                                                          xor     eax,eax                                         ;zero register
  2117                                                          mov     ax,ss                                           ;SS
  2118                                                          mov     cl,46                                           ;column
  2119                                                          mov     ch,13                                           ;row
  2120                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2121                                  ;
  2122                                  ;       Display the CS register lable and value
  2123                                  ;
  2124                                                          mov     cl,42                                           ;column
  2125                                                          mov     ch,14                                           ;row
  2126                                                          mov     esi,czIntCS                                     ;label
  2127                                                          call    SetConsoleString                                ;draw label
  2128                                                          xor     eax,eax                                         ;zero register
  2129                                                          mov     ax,[ebp+52]                                     ;CS
  2130                                                          mov     cl,46                                           ;column
  2131                                                          mov     ch,14                                           ;row
  2132                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2133                                  ;
  2134                                  ;       Display the EFLAGS register label and value
  2135                                  ;
  2136                                                          mov     cl,51                                           ;column
  2137                                                          mov     ch,11                                           ;row
  2138                                                          mov     esi,czIntEFLAGS                                 ;label
  2139                                                          call    SetConsoleString                                ;draw label
  2140                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2141                                                          mov     cl,55                                           ;column
  2142                                                          mov     ch,11                                           ;row
  2143                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2144                                  ;
  2145                                  ;       Display the ESP register label and value
  2146                                  ;
  2147                                                          mov     cl,51                                           ;column
  2148                                                          mov     ch,13                                           ;row
  2149                                                          mov     esi,czIntESP                                    ;label
  2150                                                          call    SetConsoleString                                ;draw label
  2151                                                          mov     eax,[ebp+12]                                    ;ESP
  2152                                                          mov     cl,55                                           ;column
  2153                                                          mov     ch,13                                           ;row
  2154                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2155                                  ;
  2156                                  ;       Display the EIP register label and value
  2157                                  ;
  2158                                                          mov     cl,51                                           ;column
  2159                                                          mov     ch,14                                           ;row
  2160                                                          mov     esi,czIntEIP                                    ;label
  2161                                                          call    SetConsoleString                                ;draw label
  2162                                                          mov     eax,[ebp+48]                                    ;EIP
  2163                                                          mov     cl,55                                           ;column
  2164                                                          mov     ch,14                                           ;row
  2165                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2166                                  ;
  2167                                  ;       Halt and loop until reset
  2168                                  ;
  2169                                  .10                     sti                                                     ;enable maskable interrupts
  2170                                                          hlt                                                     ;halt processor
  2171                                                          jmp     .10                                             ;resume on interrupt
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                  ;
  2174                                  ;       Processor Interrupt Name Strings
  2175                                  ;
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  czIntDivideByZero       db      "Division by zero",0
  2178                                  czIntSingleStep         db      "Single step",0
  2179                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2180                                  czIntBreak              db      "Break",0
  2181                                  czIntInto               db      "Into",0
  2182                                  czIntBounds             db      "Bounds",0
  2183                                  czIntBadOpCode          db      "Bad Operation Code",0
  2184                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2185                                  czIntDoubleFault        db      "Double Fault",0
  2186                                  czIntOperand            db      "Operand",0
  2187                                  czIntBadTSS             db      "Bad Task State Segment",0
  2188                                  czIntNotPresent         db      "Not Present",0
  2189                                  czIntStackLimit         db      "Stack Limit",0
  2190                                  czIntProtection         db      "General Protection Fault",0
  2191                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2192                                  czIntReserved           db      "Reserved",0
  2193                                  ;-----------------------------------------------------------------------------------------------------------------------
  2194                                  ;
  2195                                  ;       Processor Interrupt Handling Strings
  2196                                  ;
  2197                                  ;-----------------------------------------------------------------------------------------------------------------------
  2198                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2199                                  czIntLabel              db      "Interrupt #",0
  2200                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2201                                  czIntEAX                db      "EAX:",0
  2202                                  czIntECX                db      "ECX:",0
  2203                                  czIntEDX                db      "EDX:",0
  2204                                  czIntEBX                db      "EBX:",0
  2205                                  czIntESI                db      "ESI:",0
  2206                                  czIntEDI                db      "EDI:",0
  2207                                  czIntEBP                db      "EBP:",0
  2208                                  czIntESP                db      "ESP:",0
  2209                                  czIntDS                 db      " DS:",0
  2210                                  czIntES                 db      " ES:",0
  2211                                  czIntSS                 db      " SS:",0
  2212                                  czIntCS                 db      " CS:",0
  2213                                  czIntEFLAGS             db      "FLG:",0
  2214                                  czIntEIP                db      "EIP:",0
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;       Routine:        DrawTextDialogBox
  2218                                  ;
  2219                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2220                                  ;
  2221                                  ;       In:             CL      upper left column (0-79)
  2222                                  ;                       CH      upper left row (0-24)
  2223                                  ;                       DL      column width, excluding border
  2224                                  ;                       DH      row height, excluding border
  2225                                  ;                       BH      color attribute
  2226                                  ;
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2229                                                          push    esi                                             ;
  2230                                                          push    edi                                             ;
  2231                                                          push    es                                              ;
  2232                                                          push    EGDTCGA                                         ;load CGA selector ...
  2233                                                          pop     es                                              ;... into ES
  2234                                  ;
  2235                                  ;       Compute target display offset
  2236                                  ;
  2237                                                          xor     eax,eax                                         ;zero register
  2238                                                          mov     al,ch                                           ;row
  2239                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2240                                                          mul     ah                                              ;row offset
  2241                                                          add     al,cl                                           ;add column
  2242                                                          adc     ah,0                                            ;add overflow
  2243                                                          add     al,cl                                           ;add column
  2244                                                          adc     ah,0                                            ;add overflow
  2245                                                          mov     edi,eax                                         ;target row offset
  2246                                  ;
  2247                                  ;       Display top border row
  2248                                  ;
  2249                                                          push    edi                                             ;save target row offset
  2250                                                          mov     ah,bh                                           ;attribute
  2251                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2252                                                          stosw                                                   ;display character and attribute
  2253                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2254                                                          xor     ecx,ecx                                         ;zero register
  2255                                                          mov     cl,dl                                           ;width, excluding border
  2256                                                          rep     stosw                                           ;display horizontal border
  2257                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2258                                                          stosw                                                   ;display character and attribute
  2259                                                          pop     edi                                             ;restore target row offset
  2260                                                          add     edi,ECONROWBYTES                                ;next row
  2261                                  ;
  2262                                  ;       Display dialog box body rows
  2263                                  ;
  2264                                                          xor     ecx,ecx                                         ;zero register
  2265                                                          mov     cl,dh                                           ;height, excluding border
  2266                                  .10                     push    ecx                                             ;save remaining rows
  2267                                                          push    edi                                             ;save target row offset
  2268                                                          mov     ah,bh                                           ;attribute
  2269                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2270                                                          stosw                                                   ;display character and attribute
  2271                                                          mov     al,EASCIISPACE                                  ;space
  2272                                                          xor     ecx,ecx                                         ;zero register
  2273                                                          mov     cl,dl                                           ;width, excluding border
  2274                                                          rep     stosw                                           ;display row
  2275                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2276                                                          stosw                                                   ;display character and attribute
  2277                                                          pop     edi                                             ;restore target row offset
  2278                                                          add     edi,ECONROWBYTES                                ;next row
  2279                                                          pop     ecx                                             ;remaining rows
  2280                                                          loop    .10                                             ;next row
  2281                                  ;
  2282                                  ;       Display bottom border row
  2283                                  ;
  2284                                                          push    edi                                             ;save target row offset
  2285                                                          mov     ah,bh                                           ;attribute
  2286                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2287                                                          stosw                                                   ;display character and attribute
  2288                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2289                                                          xor     ecx,ecx                                         ;zero register
  2290                                                          mov     cl,dl                                           ;width, excluding border
  2291                                                          rep     stosw                                           ;display horizontal border
  2292                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2293                                                          stosw                                                   ;display character and attribute
  2294                                                          pop     edi                                             ;restore target row offset
  2295                                                          add     edi,ECONROWBYTES                                ;next row
  2296                                  ;
  2297                                  ;       Restore and return
  2298                                  ;
  2299                                                          pop     es                                              ;restore non-volatile regs
  2300                                                          pop     edi                                             ;
  2301                                                          pop     esi                                             ;
  2302                                                          pop     ecx                                             ;
  2303                                                          ret                                                     ;return
  2304                                  ;=======================================================================================================================
  2305                                  ;
  2306                                  ;       Hardware Device Interupts
  2307                                  ;
  2308                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2309                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2310                                  ;       (BX=2028h).
  2311                                  ;
  2312                                  ;=======================================================================================================================
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                  ;
  2315                                  ;       IRQ0    Clock Tick Interrupt
  2316                                  ;
  2317                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2318                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2319                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2320                                  ;
  2321                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2322                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2323                                  ;
  2324                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2325                                  ;       zero, the floppy disk motors are turned off.
  2326                                  ;
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                                          menter  clocktick                                       ;clock tick interrupt
  2329                                                          push    eax                                             ;save modified regs
  2330                                                          push    edx                                             ;
  2331                                                          push    ds                                              ;
  2332                                  ;
  2333                                  ;       Update the clock tick count and the elapsed days as needed.
  2334                                  ;
  2335                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2336                                                          pop     ds                                              ;... into data segment register
  2337                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2338                                                          inc     eax                                             ;increment clock ticks
  2339                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2340                                                          jb      irq0.10                                         ;no, skip ahead
  2341                                                          inc     byte [wbClockDays]                              ;increment clock days
  2342                                                          xor     eax,eax                                         ;reset clock ticks
  2343                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2344                                  ;
  2345                                  ;       Decrement floppy disk motor timeout.
  2346                                  ;
  2347                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2348                                                          je      irq0.20                                         ;yes, skip ahead
  2349                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2350                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2351                                  ;
  2352                                  ;       Turn off the floppy disk motor if appropriate.
  2353                                  ;
  2354                                                          sti                                                     ;enable maskable interrupts
  2355                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2356                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2357                                                          in      al,dx                                           ;FDC main status byte
  2358                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2359                                                          jnz     irq0.15                                         ;wait while busy
  2360                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2361                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2362                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2363                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2364                                                          out     dx,al                                           ;turn motor off
  2365                                  ;
  2366                                  ;       Signal the end of the hardware interrupt.
  2367                                  ;
  2368                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2369                                  ;
  2370                                  ;       Restore and return.
  2371                                  ;
  2372                                                          pop     ds                                              ;restore modified regs
  2373                                                          pop     edx                                             ;
  2374                                                          pop     eax                                             ;
  2375                                                          iretd                                                   ;return
  2376                                  ;-----------------------------------------------------------------------------------------------------------------------
  2377                                  ;
  2378                                  ;       IRQ1    Keyboard Interrupt
  2379                                  ;
  2380                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2381                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2382                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2383                                  ;       ALL modified registers upon return.
  2384                                  ;
  2385                                  ;-----------------------------------------------------------------------------------------------------------------------
  2386                                                          menter  keyboard                                        ;keyboard interrrupt
  2387                                                          push    eax                                             ;save non-volatile regs
  2388                                                          push    ebx                                             ;
  2389                                                          push    ecx                                             ;
  2390                                                          push    esi                                             ;
  2391                                                          push    ds                                              ;
  2392                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2393                                                          pop     ds                                              ;... into data segment register
  2394                                                          xor     al,al                                           ;zero
  2395                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2396                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2397                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2398                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2399                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2400                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2401                                                          mov     al,' '                                          ;space
  2402                                                          mov     [wbConsoleChar],al                              ;set character to space
  2403                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2404                                                          not     al                                              ;controller timeout mask
  2405                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2406                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2407                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2408                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2409                                                          jz      irq1.140                                        ;yes, skip ahead
  2410                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2411                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2412                                                          mov     ah,al                                           ;copy scan code 0
  2413                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2414                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2415                                                          je      irq1.30                                         ;yes, set flag
  2416                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2417                                                          je      irq1.40                                         ;yes, reset flag
  2418                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2419                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2420                                                          je      irq1.30                                         ;yes, set flag
  2421                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2422                                                          je      irq1.40                                         ;yes, reset flag
  2423                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2424                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2425                                                          je      irq1.30                                         ;yes, set flag
  2426                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2427                                                          je      irq1.40                                         ;yes, reset flag
  2428                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2429                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2430                                                          je      irq1.30                                         ;yes, set flag
  2431                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2432                                                          je      irq1.40                                         ;yes, reset flag
  2433                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2434                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2435                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2436                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2437                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2438                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2439                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2440                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2441                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2442                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2443                                                          jne     irq1.70                                         ;no, skip ahead
  2444                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2445                                                          jz      irq1.140                                        ;yes, skip ahead
  2446                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2447                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2448                                                          mov     ah,al                                           ;copy scan code 1
  2449                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2450                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2451                                                          je      irq1.30                                         ;yes, set flag
  2452                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2453                                                          je      irq1.40                                         ;yes, reset flag
  2454                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2455                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2456                                                          je      irq1.30                                         ;yes, set flag
  2457                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2458                                                          je      irq1.40                                         ;yes, reset flag
  2459                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2460                                                          je      irq1.80                                         ;yes, skip ahead
  2461                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2462                                                          je      irq1.80                                         ;yes, skip ahead
  2463                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2464                                                          je      irq1.10                                         ;yes, continue
  2465                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2466                                                          jne     irq1.20                                         ;no, skip ahead
  2467                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2468                                                          jz      irq1.140                                        ;yes, skip ahead
  2469                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2470                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2471                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2472                                                          jz      irq1.140                                        ;yes, skip ahead
  2473                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2474                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2475                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2476                                  irq1.30                 or      bl,al                                           ;set shift flag
  2477                                                          jmp     irq1.60                                         ;skip ahead
  2478                                  irq1.40                 not     al                                              ;convert flag to mask
  2479                                                          and     bl,al                                           ;reset shift flag
  2480                                                          jmp     irq1.60                                         ;skip ahead
  2481                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2482                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2483                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2484                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2485                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2486                                                          jmp     irq1.150                                        ;finish keyboard handling
  2487                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2488                                                          jne     irq1.80                                         ;no continue
  2489                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2490                                                          jz      irq1.140                                        ;yes, skip ahead
  2491                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2492                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2493                                                          mov     ah,al                                           ;copy scan code 1
  2494                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2495                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2496                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2497                                                          jz      irq1.140                                        ;yes, skip ahead
  2498                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2499                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2500                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2501                                                          jz      irq1.140                                        ;yes, skip ahead
  2502                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2503                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2504                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2505                                                          jz      irq1.140                                        ;yes, skip ahead
  2506                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2507                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2508                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2509                                                          jz      irq1.140                                        ;yes, skip ahead
  2510                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2511                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2512                                                          jmp     irq1.150                                        ;continue
  2513                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2514                                                          test    ah,EKEYBUP                                      ;release code?
  2515                                                          jnz     irq1.130                                        ;yes, skip ahead
  2516                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2517                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2518                                                          jz      irq1.90                                         ;no, skip ahead
  2519                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2520                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2521                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2522                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2523                                                          jz      irq1.100                                        ;no skip ahead
  2524                                                          mov     cl,al                                           ;copy ASCII code
  2525                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2526                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2527                                                          jb      irq1.100                                        ;yes, skip ahead
  2528                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2529                                                          ja      irq1.100                                        ;yes, skip ahead
  2530                                                          xor     al,EASCIICASE                                   ;switch case
  2531                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2532                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2533                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2534                                                          jz      irq1.120                                        ;no, skip ahead
  2535                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2536                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2537                                                          or      edx,eax                                         ;msg id and codes
  2538                                                          xor     ecx,ecx                                         ;null param
  2539                                                          push    eax                                             ;save codes
  2540                                                          call    PutMessage                                      ;put message to console
  2541                                                          pop     eax                                             ;restore codes
  2542                                                          test    al,al                                           ;ASCII translation?
  2543                                                          jz      irq1.130                                        ;no, skip ahead
  2544                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2545                                                          and     eax,0FFFFh                                      ;clear high-order word
  2546                                                          or      edx,eax                                         ;msg id and codes
  2547                                                          xor     ecx,ecx                                         ;null param
  2548                                                          call    PutMessage                                      ;put message to console
  2549                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2550                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2551                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2552                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2553                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2554                                                          pop     ds                                              ;restore non-volatile regs
  2555                                                          pop     esi                                             ;
  2556                                                          pop     ecx                                             ;
  2557                                                          pop     ebx                                             ;
  2558                                                          pop     eax                                             ;
  2559                                                          iretd                                                   ;return
  2560                                  ;-----------------------------------------------------------------------------------------------------------------------
  2561                                  ;       Scan-Code to ASCII Translation Tables
  2562                                  ;-----------------------------------------------------------------------------------------------------------------------
  2563                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2564                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2565                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2566                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2567                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2568                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2569                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2570                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2571                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2572                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2573                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2574                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2575                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2576                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2577                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2578                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2579                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2580                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2581                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2582                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2583                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2584                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2585                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2586                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2587                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2588                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2589                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2590                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2591                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2592                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2593                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2594                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  iochannel                                       ;secondary 8259A cascade
  2601                                                          push    eax                                             ;save modified regs
  2602                                                          jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  com2                                            ;serial port 2 interrupt
  2609                                                          push    eax                                             ;save modified regs
  2610                                                          jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  com1                                            ;serial port 1 interrupt
  2617                                                          push    eax                                             ;save modified regs
  2618                                                          jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2625                                                          push    eax                                             ;save modified regs
  2626                                                          jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ6    Diskette Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  diskette                                        ;floppy disk interrupt
  2633                                                          push    eax                                             ;save non-volatile regs
  2634                                                          push    ds                                              ;
  2635                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2636                                                          pop     ds                                              ;... into DS register
  2637                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2638                                                          or      al,10000000b                                    ;set IRQ flag
  2639                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2640                                                          pop     ds                                              ;restore non-volatile regs
  2641                                                          jmp     hwint                                           ;end primary PIC interrupt
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                  ;
  2644                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2648                                                          push    eax                                             ;save modified regs
  2649                                                          jmp     hwint                                           ;end interrupt and return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                                          menter  rtclock                                         ;real-time clock interrupt
  2656                                                          push    eax                                             ;save modified regs
  2657                                                          jmp     hwwint                                          ;end interrupt and return
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                  ;
  2660                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2664                                                          push    eax                                             ;save modified regs
  2665                                                          jmp     hwwint                                          ;end interrupt and return
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ10   Reserved Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  irq10                                           ;reserved
  2672                                                          push    eax                                             ;save modified regs
  2673                                                          jmp     hwwint                                          ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ11   Reserved Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  irq11                                           ;reserved
  2680                                                          push    eax                                             ;save modified regs
  2681                                                          jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2688                                                          push    eax                                             ;save modified regs
  2689                                                          jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  coprocessor                                     ;coprocessor interrupt
  2696                                                          push    eax                                             ;save modified regs
  2697                                                          jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2704                                                          push    eax                                             ;save modified regs
  2705                                                          jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       IRQ15   Reserved Hardware Interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                                          menter  irq15                                           ;reserved
  2712                                                          push    eax                                             ;save modified regs
  2713                                                          jmp     hwwint                                          ;end interrupt and return
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                  ;
  2716                                  ;       Exit from hardware interrupt
  2717                                  ;
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2720                                                          jmp     hwint90                                         ;skip ahead
  2721                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2722                                  hwint90                 pop     eax                                             ;restore modified regs
  2723                                                          iretd                                                   ;return from interrupt
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;       INT 30h Operating System Software Service Interrupt
  2727                                  ;
  2728                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2729                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2730                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2731                                  ;       the entry address of the specific function from a table.
  2732                                  ;
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                                          menter  svc
  2735                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2736                                                          jae     svc90                                           ;yes, skip ahead
  2737                                                          movzx   eax,al                                          ;function
  2738                                                          shl     eax,2                                           ;offset into table
  2739                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2740                                  svc90                   iretd                                                   ;return from interrupt
  2741                                  ;-----------------------------------------------------------------------------------------------------------------------
  2742                                  ;
  2743                                  ;       Service Request Table
  2744                                  ;
  2745                                  ;
  2746                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2747                                  ;
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2750                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2751                                                          tsvce   CompareMemory                                   ;compare memory
  2752                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2753                                                          tsvce   FreeMemory                                      ;free memory block
  2754                                                          tsvce   GetConsoleString                                ;get string input
  2755                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2756                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2757                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2758                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2759                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2760                                                          tsvce   UpperCaseString                                 ;upper-case string
  2761                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       Service Request Macros
  2765                                  ;
  2766                                  ;       These macros provide positional parameterization of service request calls.
  2767                                  ;
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  %macro                  allocateMemory 1
  2770                                                          mov     ecx,%1                                          ;bytes to allocate
  2771                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2772                                                          int     _svc                                            ;invoke OS service
  2773                                  %endmacro
  2774                                  %macro                  clearConsoleScreen 0
  2775                                                          mov     al,eClearConsoleScreen                          ;function code
  2776                                                          int     _svc                                            ;invoke OS service
  2777                                  %endmacro
  2778                                  %macro                  compareMemory 0
  2779                                                          mov     al,eCompareMemory                               ;function code
  2780                                                          int     _svc                                            ;invoke OS service
  2781                                  %endmacro
  2782                                  %macro                  decimalToUnsigned 0
  2783                                                          mov     al,eDecimalToUnsigned                           ;function code
  2784                                                          int     _svc                                            ;invoke OS servie
  2785                                  %endmacro
  2786                                  %macro                  freeMemory 1
  2787                                                          mov     edx,%1                                          ;address of memory block
  2788                                                          mov     al,eFreeMemory                                  ;function code
  2789                                                          int     _svc                                            ;invoke OS service
  2790                                  %endmacro
  2791                                  %macro                  getConsoleString 4
  2792                                                          mov     edx,%1                                          ;buffer address
  2793                                                          mov     ecx,%2                                          ;max characters
  2794                                                          mov     bh,%3                                           ;echo indicator
  2795                                                          mov     bl,%4                                           ;terminator
  2796                                                          mov     al,eGetConsoleString                            ;function code
  2797                                                          int     _svc                                            ;invoke OS service
  2798                                  %endmacro
  2799                                  %macro                  hexadecimalToUnsigned 0
  2800                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2801                                                          int     _svc                                            ;invoke OS service
  2802                                  %endmacro
  2803                                  %macro                  placeCursor 0
  2804                                                          mov     al,ePlaceCursor                                 ;function code
  2805                                                          int     _svc                                            ;invoke OS service
  2806                                  %endmacro
  2807                                  %macro                  putConsoleString 1
  2808                                                          mov     edx,%1                                          ;string address
  2809                                                          mov     al,ePutConsoleString                            ;function code
  2810                                                          int     _svc                                            ;invoke OS service
  2811                                  %endmacro
  2812                                  %macro                  resetSystem 0
  2813                                                          mov     al,eResetSystem                                 ;function code
  2814                                                          int     _svc                                            ;invoke OS service
  2815                                  %endmacro
  2816                                  %macro                  unsignedToHexadecimal 0
  2817                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2818                                                          int     _svc                                            ;invoke OS service
  2819                                  %endmacro
  2820                                  %macro                  upperCaseString 0
  2821                                                          mov     al,eUpperCaseString                             ;function code
  2822                                                          int     _svc                                            ;invoke OS service
  2823                                  %endmacro
  2824                                  ;=======================================================================================================================
  2825                                  ;
  2826                                  ;       Kernel Function Library
  2827                                  ;
  2828                                  ;=======================================================================================================================
  2829                                  ;=======================================================================================================================
  2830                                  ;
  2831                                  ;       Memory Helper Routines
  2832                                  ;
  2833                                  ;       AllocateMemory
  2834                                  ;       FreeMemory
  2835                                  ;
  2836                                  ;=======================================================================================================================
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  ;
  2839                                  ;       Routine:        AllocateMemory
  2840                                  ;
  2841                                  ;       Description:    This routine allocates a memory block for the given task.
  2842                                  ;
  2843                                  ;       In:             ECX     bytes of memory to allocate
  2844                                  ;
  2845                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2846                                  ;                               0       unable to allocate memory
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  2850                                                          push    ecx                                             ;
  2851                                                          push    esi                                             ;
  2852                                                          push    ds                                              ;
  2853                                  ;
  2854                                  ;       Address kernel memory structures
  2855                                  ;
  2856                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2857                                                          pop     ds                                              ;... into data segment reg
  2858                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2859                                  ;
  2860                                  ;       Set requested size to minimum block size if requested size is too small.
  2861                                  ;
  2862                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2863                                                          jae     .10                                             ;no, branch
  2864                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2865                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2866                                  ;
  2867                                  ;       Find the first free memory block large enough to satisfy the request.
  2868                                  ;
  2869                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2870                                  .20                     test    eax,eax                                         ;end of free block chain?
  2871                                                          jz      .220                                            ;yes, branch
  2872                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2873                                                          jbe     .30                                             ;yes, branch
  2874                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2875                                                          jmp     .20                                             ;continue
  2876                                  ;-----------------------------------------------------------------------------------------------------------------------
  2877                                  ;
  2878                                  ;       Address the previous and next free memory blocks.
  2879                                  ;
  2880                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2881                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2882                                  ;
  2883                                  ;       Remove the free memory block from the forward free memory block chain.
  2884                                  ;
  2885                                                          test    ebx,ebx                                         ;any previous free memory block?
  2886                                                          jz      .40                                             ;no, branch
  2887                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2888                                                          jmp     .50                                             ;continue
  2889                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2890                                  ;
  2891                                  ;       Remove the free memory block from the reverse free memory block chain.
  2892                                  ;
  2893                                  .50                     test    edx,edx                                         ;any next free memory block?
  2894                                                          jz      .60                                             ;no, branch
  2895                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2896                                                          jmp     .70                                             ;continue
  2897                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  ;
  2900                                  ;       Determine if the free memory block can be split.
  2901                                  ;
  2902                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2903                                                          sub     ebx,ecx                                         ;subtract requested memory size
  2904                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2905                                                          jb      .150                                            ;no, branch
  2906                                  ;
  2907                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2908                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2909                                  ;       of the requested memory size.
  2910                                  ;
  2911                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2912                                                          mov     edx,eax                                         ;memory block address
  2913                                                          add     edx,ecx                                         ;address new new next contig block
  2914                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2915                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2916                                  ;
  2917                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2918                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2919                                  ;
  2920                                                          jecxz   .80                                             ;no next contig, branch
  2921                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2922                                                          jmp     .90                                             ;continue
  2923                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2924                                  ;
  2925                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2926                                  ;
  2927                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2928                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2929                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2930                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  2931                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2932                                                          xor     ebx,ebx                                         ;zero register
  2933                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2934                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2935                                  ;
  2936                                  ;       Find the proper location in the free block chain for the new free block
  2937                                  ;
  2938                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  2939                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  2940                                  .100                    jecxz   .110                                            ;branch if at end of chain
  2941                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  2942                                                          jbe     .110                                            ;yes, branch
  2943                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  2944                                                          jmp     .100                                            ;continue
  2945                                  ;
  2946                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  2947                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  2948                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  2949                                  ;       block of hte next block, if there is one.
  2950                                  ;
  2951                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  2952                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  2953                                                          jecxz   .120                                            ;branch if no next block
  2954                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  2955                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  2956                                                          jmp     .130                                            ;continue
  2957                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  2958                                  ;
  2959                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  2960                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  2961                                  ;       last user block pointers if necessary.
  2962                                  ;
  2963                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  2964                                                          test    ebx,ebx                                         ;is there a previous block?
  2965                                                          jz      .140                                            ;no, branch
  2966                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  2967                                                          jmp     .150                                            ;continue
  2968                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  2969                                  ;
  2970                                  ;       Update the newly allocated block's owner and signature.
  2971                                  ;
  2972                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  2973                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  2974                                                          xor     edx,edx                                         ;zero register
  2975                                                          str     dx                                              ;load the task state register
  2976                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  2977                                  ;
  2978                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  2979                                  ;
  2980                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  2981                                  .160                    jecxz   .180                                            ;branch if at end of chain
  2982                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  2983                                                          jb      .180                                            ;branch if block belongs to next task
  2984                                                          je      .170                                            ;branch if block belongs to this task
  2985                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  2986                                                          jmp     .160                                            ;continue
  2987                                  ;
  2988                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  2989                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  2990                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  2991                                  ;       place to insert the block.
  2992                                  ;
  2993                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  2994                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  2995                                                          jbe     .180                                            ;yes, branch
  2996                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  2997                                                          test    ecx,ecx                                         ;end of chain?
  2998                                                          jz      .180                                            ;yes, branch
  2999                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3000                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3001                                                          je      .170                                            ;yes, continue search
  3002                                  ;
  3003                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3004                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3005                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3006                                  ;       do have a previous-block, we update that block's next-block pointer.
  3007                                  ;
  3008                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3009                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3010                                                          jecxz   .190                                            ;branch if no next-task block
  3011                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3012                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3013                                                          jmp     .200                                            ;continue
  3014                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3015                                  ;
  3016                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3017                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3018                                  ;       global first and/or last user-block pointers if necessary.
  3019                                  ;
  3020                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3021                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3022                                                          jz      .210                                            ;no, branch
  3023                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3024                                                          jmp     .220                                            ;continue
  3025                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3026                                  ;
  3027                                  ;       Restore registers and return to caller.
  3028                                  ;
  3029                                  .220                    pop     ds                                              ;restore non-volatie regs
  3030                                                          pop     esi                                             ;
  3031                                                          pop     ecx                                             ;
  3032                                                          pop     ebx                                             ;
  3033                                                          ret                                                     ;return
  3034                                  ;-----------------------------------------------------------------------------------------------------------------------
  3035                                  ;
  3036                                  ;       Routine:        FreeMemory
  3037                                  ;
  3038                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3039                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3040                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3041                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3042                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3043                                  ;
  3044                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3045                                  ;
  3046                                  ;       Out:            EAX     -1      invalid memory block
  3047                                  ;                               0       memory block freed
  3048                                  ;
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3051                                                          push    ecx                                             ;
  3052                                                          push    esi                                             ;
  3053                                                          push    edi                                             ;
  3054                                                          push    ds                                              ;
  3055                                                          push    es                                              ;
  3056                                  ;
  3057                                  ;       Address the root memory structure
  3058                                  ;
  3059                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3060                                                          pop     es                                              ;... into extra segment reg
  3061                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3062                                                          pop     ds                                              ;... into data segment reg
  3063                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3064                                                          mov     edi,edx                                         ;memory block address
  3065                                  ;
  3066                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3067                                  ;
  3068                                                          xor     eax,eax                                         ;indicate success
  3069                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3070                                                          je      .240                                            ;yes, branch
  3071                                                          dec     eax                                             ;indicate failure
  3072                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3073                                                          jne     .240                                            ;no, branch
  3074                                  ;-----------------------------------------------------------------------------------------------------------------------
  3075                                  ;
  3076                                  ;       Unlink the USER memory block.
  3077                                  ;
  3078                                  ;-----------------------------------------------------------------------------------------------------------------------
  3079                                  ;
  3080                                  ;       Set the block signature. Reset owner.
  3081                                  ;
  3082                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3083                                                          xor     eax,eax                                         ;zero register
  3084                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3085                                  ;
  3086                                  ;       Wipe user area.
  3087                                  ;
  3088                                                          push    edi                                             ;save block address
  3089                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3090                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3091                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3092                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3093                                                          rep     stosb                                           ;clear memory
  3094                                                          pop     edi                                             ;restore block address
  3095                                  ;
  3096                                  ;       Address the preceding and following USER memory blocks
  3097                                  ;
  3098                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3099                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3100                                  ;
  3101                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3102                                  ;       pointer to point to the USER block following this block.
  3103                                  ;
  3104                                                          test    ebx,ebx                                         ;is there a previous block?
  3105                                                          jz      .10                                             ;no, branch
  3106                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3107                                                          jmp     .20                                             ;continue
  3108                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3109                                  ;
  3110                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3111                                  ;       pointer to point to the USER block preceding this block.
  3112                                  ;
  3113                                  .20                     jecxz   .30                                             ;branch if no next block
  3114                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3115                                                          jmp     .40                                             ;continue
  3116                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118                                  ;
  3119                                  ;       Merge with a previous contiguous FREE memory block.
  3120                                  ;
  3121                                  ;-----------------------------------------------------------------------------------------------------------------------
  3122                                  ;
  3123                                  ;       Address the preceding and following contiguous memory blocks.
  3124                                  ;
  3125                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3126                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3127                                  ;
  3128                                  ;       Verify we have a previous contiguous FREE block.
  3129                                  ;
  3130                                                          test    ebx,ebx                                         ;is there a previous block?
  3131                                                          jz      .100                                            ;no, branch
  3132                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3133                                                          jne     .100                                            ;no, branch
  3134                                  ;
  3135                                  ;       Update adjacent block's contiguous pointers.
  3136                                  ;
  3137                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3138                                                          jecxz   .50                                             ;branch if no next contiguous block
  3139                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3140                                                          jmp     .60                                             ;continue
  3141                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3142                                  ;
  3143                                  ;       Update the size of the merged FREE block.
  3144                                  ;
  3145                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3146                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3147                                  ;
  3148                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3149                                  ;
  3150                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3151                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3152                                                          rep     stosb                                           ;clear memory header
  3153                                                          mov     edi,ebx                                         ;current block is now previous block
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155                                  ;
  3156                                  ;       Unlink the previous contiguous FREE memory block
  3157                                  ;
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  ;
  3160                                  ;       Address the preceding and following USER memory blocks
  3161                                  ;
  3162                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3163                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3164                                  ;
  3165                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3166                                  ;       block pointer.
  3167                                  ;
  3168                                                          test    ebx,ebx                                         ;is there a previous block?
  3169                                                          jz      .70                                             ;no, branch
  3170                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3171                                                          jmp     .80                                             ;branch
  3172                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3173                                  ;
  3174                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3175                                  ;       pointer.
  3176                                  ;
  3177                                  .80                     jecxz   .90                                             ;branch if no next block
  3178                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3179                                                          jmp     .100                                            ;continue
  3180                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Merge with a following contiguous FREE memory block.
  3184                                  ;
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       Verify we have a following contiguous FREE block.
  3188                                  ;
  3189                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3190                                                          jecxz   .170                                            ;branch if no next contiguous block
  3191                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3192                                                          jne     .170                                            ;no, branch
  3193                                  ;
  3194                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3195                                  ;
  3196                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3197                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3198                                  ;
  3199                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3200                                  ;
  3201                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3202                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3203                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3204                                                          jz      .110                                            ;no, branch
  3205                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3206                                                          jmp     .120                                            ;continue
  3207                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;       Unlink the following contiguous FREE memory block
  3211                                  ;
  3212                                  ;-----------------------------------------------------------------------------------------------------------------------
  3213                                  ;
  3214                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3215                                  ;
  3216                                  .120                    push    edi                                             ;save this block
  3217                                                          mov     edi,ecx                                         ;next contiguous block
  3218                                                          push    ecx                                             ;save next contiguous block
  3219                                  ;
  3220                                  ;       Address the preceding and following USER memory blocks
  3221                                  ;
  3222                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3223                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3224                                  ;
  3225                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3226                                  ;       block pointer.
  3227                                  ;
  3228                                                          test    ebx,ebx                                         ;is there a previous block?
  3229                                                          jz      .130                                            ;no, branch
  3230                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3231                                                          jmp     .140                                            ;branch
  3232                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3233                                  ;
  3234                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3235                                  ;       pointer.
  3236                                  ;
  3237                                  .140                    jecxz   .150                                            ;branch if no next block
  3238                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3239                                                          jmp     .160                                            ;continue
  3240                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3241                                  ;
  3242                                  ;       Clear next contiguous block's header
  3243                                  ;
  3244                                  .160                    pop     edi                                             ;next congiguous block pointer
  3245                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3246                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3247                                                          rep     stosb                                           ;clear memory header
  3248                                                          pop     edi                                             ;this block's pointer
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Insert the final FREE block back into the block chain.
  3252                                  ;
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3256                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3257                                  ;       all are smaller in size.
  3258                                  ;
  3259                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3260                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3261                                  .180                    jecxz   .190                                            ;exit if no ptr
  3262                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3263                                                          jb      .190                                            ;yes, branch
  3264                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3265                                                          jmp     .180                                            ;continue
  3266                                  ;
  3267                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3268                                  ;       larger free block. Update the next block's previous block pointer.
  3269                                  ;
  3270                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3271                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3272                                                          jecxz   .200                                            ;branch if no block found
  3273                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3274                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3275                                                          jmp     .210                                            ;continue
  3276                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3277                                  ;
  3278                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3279                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3280                                  ;       next pointer.
  3281                                  ;
  3282                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3283                                                          test    ebx,ebx                                         ;do we have a previous block?
  3284                                                          jz      .220                                            ;no, branch
  3285                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3286                                                          jmp     .230                                            ;continue
  3287                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3288                                  ;
  3289                                  ;       The memory free has completed.
  3290                                  ;
  3291                                  .230                    xor     eax,eax                                         ;indicate success
  3292                                  ;
  3293                                  ;       Restore and return.
  3294                                  ;
  3295                                  .240                    pop     es                                              ;restore non-volatile regs
  3296                                                          pop     ds                                              ;
  3297                                                          pop     edi                                             ;
  3298                                                          pop     esi                                             ;
  3299                                                          pop     ecx                                             ;
  3300                                                          pop     ebx                                             ;
  3301                                                          ret                                                     ;return
  3302                                  ;=======================================================================================================================
  3303                                  ;
  3304                                  ;       String Helper Routines
  3305                                  ;
  3306                                  ;       CompareMemory
  3307                                  ;       UpperCaseString
  3308                                  ;
  3309                                  ;=======================================================================================================================
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  ;
  3312                                  ;       Routine:        CompareMemory
  3313                                  ;
  3314                                  ;       Description:    This routine compares two byte arrays.
  3315                                  ;
  3316                                  ;       In:             DS:EDX  first source address
  3317                                  ;                       DS:EBX  second source address
  3318                                  ;                       ECX     comparison length
  3319                                  ;
  3320                                  ;       Out:            EDX     first source address
  3321                                  ;                       EBX     second source address
  3322                                  ;                       ECX     0       array 1 = array 2
  3323                                  ;                               <0      array 1 < array 2
  3324                                  ;                               >0      array 1 > array 2
  3325                                  ;
  3326                                  ;-----------------------------------------------------------------------------------------------------------------------
  3327                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3328                                                          push    edi                                             ;
  3329                                                          push    es                                              ;
  3330                                                          push    ds                                              ;copy DS
  3331                                                          pop     es                                              ;... to ES
  3332                                                          mov     esi,edx                                         ;first source address
  3333                                                          mov     edi,ebx                                         ;second source address
  3334                                                          cld                                                     ;forward strings
  3335                                                          rep     cmpsb                                           ;compare bytes
  3336                                                          mov     al,0                                            ;default result
  3337                                                          jz      .10                                             ;branch if arrays equal
  3338                                                          mov     al,1                                            ;positive result
  3339                                                          jnc     .10                                             ;branch if target > source
  3340                                                          mov     al,-1                                           ;negative result
  3341                                  .10                     movsx   ecx,al                                          ;extend sign
  3342                                                          pop     es                                              ;restore non-volatile regs
  3343                                                          pop     edi                                             ;
  3344                                                          pop     esi                                             ;
  3345                                                          ret                                                     ;return
  3346                                  ;-----------------------------------------------------------------------------------------------------------------------
  3347                                  ;
  3348                                  ;       Routine:        UpperCaseString
  3349                                  ;
  3350                                  ;       Description:    This routine places all characters in the given string to upper case.
  3351                                  ;
  3352                                  ;       In:             DS:EDX  string address
  3353                                  ;
  3354                                  ;       Out:            EDX     string address
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3358                                                          mov     esi,edx                                         ;string address
  3359                                                          cld                                                     ;forward strings
  3360                                  .10                     lodsb                                                   ;string character
  3361                                                          test    al,al                                           ;null?
  3362                                                          jz      .20                                             ;yes, skip ahead
  3363                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3364                                                          jb      .10                                             ;no, continue
  3365                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3366                                                          ja      .10                                             ;no, continue
  3367                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3368                                                          mov     [esi-1],al                                      ;upper character
  3369                                                          jmp     .10                                             ;continue
  3370                                  .20                     pop     esi                                             ;restore non-volatile regs
  3371                                                          ret                                                     ;return
  3372                                  ;=======================================================================================================================
  3373                                  ;
  3374                                  ;       Console Helper Routines
  3375                                  ;
  3376                                  ;       FirstConsoleColumn
  3377                                  ;       GetConsoleChar
  3378                                  ;       GetConsoleString
  3379                                  ;       NextConsoleColumn
  3380                                  ;       NextConsoleRow
  3381                                  ;       PreviousConsoleColumn
  3382                                  ;       PutConsoleChar
  3383                                  ;       PutConsoleHexByte
  3384                                  ;       PutConsoleHexDword
  3385                                  ;       PutConsoleHexWord
  3386                                  ;       PutConsoleOIAChar
  3387                                  ;       PutConsoleOIAShift
  3388                                  ;       PutConsoleString
  3389                                  ;       Yield
  3390                                  ;
  3391                                  ;=======================================================================================================================
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  ;
  3394                                  ;       Routine:        FirstConsoleColumn
  3395                                  ;
  3396                                  ;       Description:    This routine resets the console column to start of the row.
  3397                                  ;
  3398                                  ;       In:             DS      OS data selector
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3402                                                          mov     [wbConsoleColumn],al                            ;save column
  3403                                                          ret                                                     ;return
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Routine:        GetConsoleChar
  3407                                  ;
  3408                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3409                                  ;
  3410                                  ;       Out:            AL      ASCII character code
  3411                                  ;                       AH      keyboard scan code
  3412                                  ;
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3415                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3416                                                          or      eax,eax                                         ;do we have a message?
  3417                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3418                                                          push    eax                                             ;save key codes
  3419                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3420                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3421                                                          pop     eax                                             ;restore key codes
  3422                                                          jne     GetConsoleChar                                  ;no, try again
  3423                                                          and     eax,0000ffffh                                   ;mask for key codes
  3424                                                          ret                                                     ;return
  3425                                  ;-----------------------------------------------------------------------------------------------------------------------
  3426                                  ;
  3427                                  ;       Routine:        GetConsoleString
  3428                                  ;
  3429                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3430                                  ;
  3431                                  ;       In:             DS:EDX  target buffer address
  3432                                  ;                       ECX     maximum number of characters to accept
  3433                                  ;                       BH      echo to terminal
  3434                                  ;                       BL      terminating character
  3435                                  ;
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3438                                                          push    esi                                             ;
  3439                                                          push    edi                                             ;
  3440                                                          push    es                                              ;
  3441                                                          push    ds                                              ;load data segment selector ...
  3442                                                          pop     es                                              ;... into extra segment register
  3443                                                          mov     edi,edx                                         ;edi = target buffer
  3444                                                          push    ecx                                             ;save maximum characters
  3445                                                          xor     al,al                                           ;zero register
  3446                                                          cld                                                     ;forward strings
  3447                                                          rep     stosb                                           ;zero fill buffer
  3448                                                          pop     ecx                                             ;maximum characters
  3449                                                          mov     edi,edx                                         ;edi = target buffer
  3450                                                          mov     esi,edx                                         ;esi = target buffer
  3451                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  3452                                  .20                     call    GetConsoleChar                                  ;al = next input char
  3453                                                          cmp     al,bl                                           ;is this the terminator?
  3454                                                          je      .50                                             ;yes, exit
  3455                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3456                                                          jne     .30                                             ;no, skip ahead
  3457                                                          cmp     esi,edi                                         ;at start of buffer?
  3458                                                          je      .20                                             ;yes, get next character
  3459                                                          dec     edi                                             ;backup target pointer
  3460                                                          mov     byte [edi],0                                    ;zero previous character
  3461                                                          inc     ecx                                             ;increment remaining chars
  3462                                                          test    bh,1                                            ;echo to console?
  3463                                                          jz      .20                                             ;no, get next character
  3464                                                          call    PreviousConsoleColumn                           ;backup console position
  3465                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3466                                                          call    PutConsoleChar                                  ;write space to console
  3467                                                          call    PlaceCursor                                     ;position the cursor
  3468                                                          jmp     .20                                             ;get next character
  3469                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3470                                                          jb      .20                                             ;no, get another character
  3471                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3472                                                          ja      .20                                             ;no, get another character
  3473                                                          stosb                                                   ;store character in buffer
  3474                                                          test    bh,1                                            ;echo to console?
  3475                                                          jz      .40                                             ;no, skip ahead
  3476                                                          call    PutConsoleChar                                  ;write character to console
  3477                                                          call    NextConsoleColumn                               ;advance console position
  3478                                                          call    PlaceCursor                                     ;position the cursor
  3479                                  .40                     dec     ecx                                             ;decrement remaining chars
  3480                                                          jmp     .10                                             ;next
  3481                                  .50                     xor     al,al                                           ;null
  3482                                                          stosb                                                   ;terminate buffer
  3483                                                          pop     es                                              ;restore non-volatile regs
  3484                                                          pop     edi                                             ;
  3485                                                          pop     esi                                             ;
  3486                                                          pop     ecx                                             ;
  3487                                                          ret                                                     ;return
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  ;
  3490                                  ;       Routine:        NextConsoleColumn
  3491                                  ;
  3492                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3493                                  ;                       incremented if the end of the current row is reached.
  3494                                  ;
  3495                                  ;       In:             DS      OS data selector
  3496                                  ;
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3499                                                          inc     al                                              ;increment column
  3500                                                          mov     [wbConsoleColumn],al                            ;save column
  3501                                                          cmp     al,ECONCOLS                                     ;end of row?
  3502                                                          jb      .10                                             ;no, skip ahead
  3503                                                          call    FirstConsoleColumn                              ;reset column to start of row
  3504                                                          call    NextConsoleRow                                  ;line feed to next row
  3505                                  .10                     ret                                                     ;return
  3506                                  ;-----------------------------------------------------------------------------------------------------------------------
  3507                                  ;
  3508                                  ;       Routine:        NextConsoleRow
  3509                                  ;
  3510                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3511                                  ;
  3512                                  ;       In:             DS      OS data selector
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3516                                                          inc     al                                              ;increment row
  3517                                                          mov     [wbConsoleRow],al                               ;save row
  3518                                                          cmp     al,ECONROWS                                     ;end of screen?
  3519                                                          jb      .10                                             ;no, skip ahead
  3520                                                          call    ScrollConsoleRow                                ;scroll up one row
  3521                                                          mov     al,[wbConsoleRow]                               ;row
  3522                                                          dec     al                                              ;decrement row
  3523                                                          mov     [wbConsoleRow],al                               ;save row
  3524                                  .10                     ret                                                     ;return
  3525                                  ;-----------------------------------------------------------------------------------------------------------------------
  3526                                  ;
  3527                                  ;       Routine:        PreviousConsoleColumn
  3528                                  ;
  3529                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3530                                  ;                       the column is set to the last position in the row and the row is decremented.
  3531                                  ;
  3532                                  ;       In:             DS      OS data selector
  3533                                  ;
  3534                                  ;-----------------------------------------------------------------------------------------------------------------------
  3535                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3536                                                          or      al,al                                           ;start of row?
  3537                                                          jnz     .10                                             ;no, skip ahead
  3538                                                          mov     ah,[wbConsoleRow]                               ;current row
  3539                                                          or      ah,ah                                           ;top of screen?
  3540                                                          jz      .20                                             ;yes, exit with no change
  3541                                                          dec     ah                                              ;decrement row
  3542                                                          mov     [wbConsoleRow],ah                               ;save row
  3543                                                          mov     al,ECONCOLS                                     ;set maximum column
  3544                                  .10                     dec     al                                              ;decrement column
  3545                                                          mov     [wbConsoleColumn],al                            ;save column
  3546                                  .20                     ret                                                     ;return
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  ;
  3549                                  ;       Routine:        PutConsoleChar
  3550                                  ;
  3551                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3552                                  ;
  3553                                  ;       In:             AL      ASCII character
  3554                                  ;                       DS      OS data selector
  3555                                  ;
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3558                                                          push    es                                              ;
  3559                                                          push    EGDTCGA                                         ;load CGA selector ...
  3560                                                          pop     es                                              ;... into extra segment reg
  3561                                                          mov     cl,[wbConsoleColumn]                            ;column
  3562                                                          mov     ch,[wbConsoleRow]                               ;row
  3563                                                          call    SetConsoleChar                                  ;put character at row, column
  3564                                                          pop     es                                              ;restore non-volatile regs
  3565                                                          pop     ecx                                             ;
  3566                                                          ret                                                     ;return
  3567                                  ;-----------------------------------------------------------------------------------------------------------------------
  3568                                  ;
  3569                                  ;       Routine:        PutConsoleHexByte
  3570                                  ;
  3571                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3572                                  ;
  3573                                  ;       In:             AL      byte value
  3574                                  ;                       CL      column
  3575                                  ;                       CH      row
  3576                                  ;                       DS      OS data selector
  3577                                  ;                       ES      CGA selector
  3578                                  ;
  3579                                  ;-----------------------------------------------------------------------------------------------------------------------
  3580                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3581                                                          mov     bl,al                                           ;save byte value
  3582                                                          shr     al,4                                            ;hi-order nybble
  3583                                                          or      al,030h                                         ;apply ASCII zone
  3584                                                          cmp     al,03ah                                         ;numeric?
  3585                                                          jb      .10                                             ;yes, skip ahead
  3586                                                          add     al,7                                            ;add ASCII offset for alpha
  3587                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3588                                                          mov     al,bl                                           ;byte value
  3589                                                          and     al,0fh                                          ;lo-order nybble
  3590                                                          or      al,30h                                          ;apply ASCII zone
  3591                                                          cmp     al,03ah                                         ;numeric?
  3592                                                          jb      .20                                             ;yes, skip ahead
  3593                                                          add     al,7                                            ;add ASCII offset for alpha
  3594                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3595                                                          pop     ebx                                             ;restore non-volatile regs
  3596                                                          ret                                                     ;return
  3597                                  ;-----------------------------------------------------------------------------------------------------------------------
  3598                                  ;
  3599                                  ;       Routine:        PutConsoleHexDword
  3600                                  ;
  3601                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3602                                  ;
  3603                                  ;       In:             EAX     value
  3604                                  ;                       CL      column
  3605                                  ;                       CH      row
  3606                                  ;                       DS      OS data selector
  3607                                  ;                       ES      CGA selector
  3608                                  ;
  3609                                  ;-----------------------------------------------------------------------------------------------------------------------
  3610                                  PutConsoleHexDword      push    eax
  3611                                                          shr     eax,16
  3612                                                          call    PutConsoleHexWord
  3613                                                          pop     eax
  3614                                                          call    PutConsoleHexWord
  3615                                                          ret
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617                                  ;
  3618                                  ;       Routine:        PutConsoleHexWord
  3619                                  ;
  3620                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3621                                  ;
  3622                                  ;       In:             EAX     value
  3623                                  ;                       CL      column
  3624                                  ;                       CH      row
  3625                                  ;                       DS      OS data selector
  3626                                  ;                       ES      CGA selector
  3627                                  ;
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629                                  PutConsoleHexWord       push    eax
  3630                                                          shr     eax,8
  3631                                                          call    PutConsoleHexByte
  3632                                                          pop     eax
  3633                                                          call    PutConsoleHexByte
  3634                                                          ret
  3635                                  ;-----------------------------------------------------------------------------------------------------------------------
  3636                                  ;
  3637                                  ;       Routine:        PutConsoleOIAChar
  3638                                  ;
  3639                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3640                                  ;
  3641                                  ;       In:             DS      OS data selector
  3642                                  ;
  3643                                  ;-----------------------------------------------------------------------------------------------------------------------
  3644                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3645                                                          push    ecx                                             ;
  3646                                                          push    esi                                             ;
  3647                                                          push    ds                                              ;
  3648                                                          push    es                                              ;
  3649                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3650                                                          pop     ds                                              ;... into data segment register
  3651                                                          push    EGDTCGA                                         ;load CGA selector ...
  3652                                                          pop     es                                              ;... into extra segment register
  3653                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3654                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3655                                                          mov     bl,0                                            ;starting column
  3656                                                          mov     ecx,6                                           ;maximum scan codes
  3657                                  .10                     push    ecx                                             ;save remaining count
  3658                                                          mov     ecx,ebx                                         ;row, column
  3659                                                          lodsb                                                   ;read scan code
  3660                                                          or      al,al                                           ;scan code present?
  3661                                                          jz      .20                                             ;no, skip ahead
  3662                                                          call    PutConsoleHexByte                               ;display scan code
  3663                                                          jmp     .30                                             ;continue
  3664                                  .20                     mov     al,' '                                          ;ASCII space
  3665                                                          call    SetConsoleChar                                  ;display space
  3666                                                          mov     al,' '                                          ;ASCII space
  3667                                                          call    SetConsoleChar                                  ;display space
  3668                                  .30                     add     bl,2                                            ;next column (+2)
  3669                                                          pop     ecx                                             ;restore remaining
  3670                                                          loop    .10                                             ;next code
  3671                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3672                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3673                                                          jb      .40                                             ;no, skip ahead
  3674                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3675                                                          ja      .40                                             ;no, skip ahead
  3676                                                          mov     ch,bh                                           ;OIA row
  3677                                                          mov     cl,40                                           ;character display column
  3678                                                          call    SetConsoleChar                                  ;display ASCII character
  3679                                  .40                     pop     es                                              ;restore non-volatile regs
  3680                                                          pop     ds                                              ;
  3681                                                          pop     esi                                             ;
  3682                                                          pop     ecx                                             ;
  3683                                                          pop     ebx                                             ;
  3684                                                          ret                                                     ;return
  3685                                  ;-----------------------------------------------------------------------------------------------------------------------
  3686                                  ;
  3687                                  ;       Routine:        PutConsoleOIAShift
  3688                                  ;
  3689                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3690                                  ;
  3691                                  ;       In:             BL      shift flags
  3692                                  ;                       BH      lock flags
  3693                                  ;                       DS      OS data selector
  3694                                  ;
  3695                                  ;-----------------------------------------------------------------------------------------------------------------------
  3696                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3697                                                          push    es                                              ;
  3698                                                          push    EGDTCGA                                         ;load CGA selector ...
  3699                                                          pop     es                                              ;... into ES register
  3700                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3701                                                          mov     al,EASCIISPACE                                  ;space is default character
  3702                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3703                                                          jz      .10                                             ;no, skip ahead
  3704                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3705                                  .10                     mov     cl,14                                           ;indicator column
  3706                                                          call    SetConsoleChar                                  ;display ASCII character
  3707                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3708                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3709                                                          jz      .20                                             ;no, skip ahead
  3710                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3711                                  .20                     mov     cl,64                                           ;indicator column
  3712                                                          call    SetConsoleChar                                  ;display ASCII character
  3713                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3714                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3715                                                          jz      .30                                             ;no, skip ahead
  3716                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3717                                  .30                     mov     cl,15                                           ;indicator column
  3718                                                          call    SetConsoleChar                                  ;display ASCII character
  3719                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3720                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3721                                                          jz      .40                                             ;no, skip ahead
  3722                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3723                                  .40                     mov     cl,63                                           ;indicator column
  3724                                                          call    SetConsoleChar                                  ;display ASCII character
  3725                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3726                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3727                                                          jz      .50                                             ;no, skip ahead
  3728                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3729                                  .50                     mov     cl,16                                           ;indicator column
  3730                                                          call    SetConsoleChar                                  ;display ASCII character
  3731                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3732                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3733                                                          jz      .60                                             ;no, skip ahead
  3734                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3735                                  .60                     mov     cl,62                                           ;indicator column
  3736                                                          call    SetConsoleChar                                  ;display ASCII character
  3737                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3738                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3739                                                          jz      .70                                             ;no, skip ahead
  3740                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3741                                  .70                     mov     cl,78                                           ;indicator column
  3742                                                          call    SetConsoleChar                                  ;display ASCII character
  3743                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3744                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3745                                                          jz      .80                                             ;no, skip ahead
  3746                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3747                                  .80                     mov     cl,77                                           ;indicator column
  3748                                                          call    SetConsoleChar                                  ;display ASCII character
  3749                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3750                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3751                                                          jz      .90                                             ;no, skip ahead
  3752                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3753                                  .90                     mov     cl,76                                           ;indicator column
  3754                                                          call    SetConsoleChar                                  ;display ASCII character
  3755                                                          pop     es                                              ;restore non-volatile regs
  3756                                                          pop     ecx                                             ;
  3757                                                          ret                                                     ;return
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Routine:        PutConsoleString
  3761                                  ;
  3762                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3763                                  ;                       console position as needed.
  3764                                  ;
  3765                                  ;       In:             EDX     source address
  3766                                  ;                       DS      OS data selector
  3767                                  ;
  3768                                  ;-----------------------------------------------------------------------------------------------------------------------
  3769                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3770                                                          mov     esi,edx                                         ;source address
  3771                                                          cld                                                     ;forward strings
  3772                                  .10                     lodsb                                                   ;ASCII character
  3773                                                          or      al,al                                           ;end of string?
  3774                                                          jz      .40                                             ;yes, skip ahead
  3775                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3776                                                          jne     .20                                             ;no, skip ahead
  3777                                                          call    FirstConsoleColumn                              ;move to start of row
  3778                                                          jmp     .10                                             ;next character
  3779                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3780                                                          jne     .30                                             ;no, skip ahead
  3781                                                          call    NextConsoleRow                                  ;move to next row
  3782                                                          jmp     .10                                             ;next character
  3783                                  .30                     call    PutConsoleChar                                  ;output character to console
  3784                                                          call    NextConsoleColumn                               ;advance to next column
  3785                                                          jmp     .10                                             ;next character
  3786                                  .40                     pop     esi                                             ;restore non-volatile regs
  3787                                                          ret                                                     ;return
  3788                                  ;-----------------------------------------------------------------------------------------------------------------------
  3789                                  ;
  3790                                  ;       Routine:        Yield
  3791                                  ;
  3792                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3793                                  ;
  3794                                  ;-----------------------------------------------------------------------------------------------------------------------
  3795                                  Yield                   sti                                                     ;enable maskagle interrupts
  3796                                                          hlt                                                     ;halt until external interrupt
  3797                                                          ret                                                     ;return
  3798                                  ;=======================================================================================================================
  3799                                  ;
  3800                                  ;       Data-Type Conversion Helper Routines
  3801                                  ;
  3802                                  ;       DecimalToUnsigned
  3803                                  ;       HexadecimalToUnsigned
  3804                                  ;       UnsignedToHexadecimal
  3805                                  ;
  3806                                  ;=======================================================================================================================
  3807                                  ;-----------------------------------------------------------------------------------------------------------------------
  3808                                  ;
  3809                                  ;       Routine:        DecimalToUnsigned
  3810                                  ;
  3811                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3812                                  ;
  3813                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3814                                  ;
  3815                                  ;       Output:         EAX     unsigned integer value
  3816                                  ;
  3817                                  ;-----------------------------------------------------------------------------------------------------------------------
  3818                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3819                                                          mov     esi,edx                                         ;source address
  3820                                                          xor     edx,edx                                         ;zero total
  3821                                  .10                     lodsb                                                   ;source byte
  3822                                                          cmp     al,','                                          ;comma?
  3823                                                          je      .10                                             ;yes, ignore
  3824                                                          test    al,al                                           ;end of string?
  3825                                                          jz      .30                                             ;yes, done
  3826                                                          cmp     al,'.'                                          ;decimal point?
  3827                                                          je      .30                                             ;yes, done
  3828                                                          cmp     al,'0'                                          ;numeral?
  3829                                                          jb      .20                                             ;no, invalid string
  3830                                                          cmp     al,'9'                                          ;numeral?
  3831                                                          ja      .20                                             ;no, invalid string
  3832                                                          and     al,00Fh                                         ;mask ASCII zone
  3833                                                          push    eax                                             ;save numeral
  3834                                                          shl     edx,1                                           ;total * 2
  3835                                                          mov     eax,edx                                         ;total * 2
  3836                                                          shl     edx,2                                           ;total * 8
  3837                                                          add     edx,eax                                         ;total * 10
  3838                                                          pop     eax                                             ;restore numeral
  3839                                                          add     edx,eax                                         ;accumulate decimal digit
  3840                                                          xor     eax,eax                                         ;zero register
  3841                                                          jmp     .10                                             ;next
  3842                                  .20                     xor     edx,edx                                         ;zero result on error
  3843                                  .30                     mov     eax,edx                                         ;result
  3844                                                          pop     esi                                             ;restore non-volatile regs
  3845                                                          ret                                                     ;return
  3846                                  ;-----------------------------------------------------------------------------------------------------------------------
  3847                                  ;
  3848                                  ;       Routine:        HexadecimalToUnsigned
  3849                                  ;
  3850                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3851                                  ;
  3852                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3853                                  ;
  3854                                  ;       Output:         EAX     unsigned integer value
  3855                                  ;
  3856                                  ;-----------------------------------------------------------------------------------------------------------------------
  3857                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3858                                                          mov     esi,edx                                         ;source address
  3859                                                          xor     edx,edx                                         ;zero register
  3860                                  .10                     lodsb                                                   ;source byte
  3861                                                          test    al,al                                           ;end of string?
  3862                                                          jz      .30                                             ;yes, branch
  3863                                                          cmp     al,'9'                                          ;hexadecimal?
  3864                                                          jna     .20                                             ;no, skip ahead
  3865                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3866                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3867                                                          shl     edx,4                                           ;previous total x 16
  3868                                                          add     edx,eax                                         ;add prior value x 16
  3869                                                          jmp     .10                                             ;next
  3870                                  .30                     mov     eax,edx                                         ;result
  3871                                                          pop     esi                                             ;restore non-volatile regs
  3872                                                          ret                                                     ;return
  3873                                  ;-----------------------------------------------------------------------------------------------------------------------
  3874                                  ;
  3875                                  ;       Routine:        UnsignedToHexadecimal
  3876                                  ;
  3877                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3878                                  ;
  3879                                  ;       Input:          DS:EDX  output buffer address
  3880                                  ;                       ECX     32-bit binary
  3881                                  ;
  3882                                  ;-----------------------------------------------------------------------------------------------------------------------
  3883                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3884                                                          mov     edi,edx                                         ;output buffer address
  3885                                                          mov     edx,ecx                                         ;32-bit unsigned
  3886                                                          xor     ecx,ecx                                         ;zero register
  3887                                                          mov     cl,8                                            ;nybble count
  3888                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3889                                                          mov     al,dl                                           ;????bbbb
  3890                                                          and     al,0fh                                          ;mask out bits 4-7
  3891                                                          or      al,30h                                          ;mask in ascii zone
  3892                                                          cmp     al,3ah                                          ;A through F?
  3893                                                          jb      .20                                             ;no, skip ahead
  3894                                                          add     al,7                                            ;41h through 46h
  3895                                  .20                     stosb                                                   ;store hexnum
  3896                                                          loop    .10                                             ;next nybble
  3897                                                          xor     al,al                                           ;zero reg
  3898                                                          stosb                                                   ;null terminate
  3899                                                          pop     edi                                             ;restore non-volatile regs
  3900                                                          ret                                                     ;return
  3901                                  ;=======================================================================================================================
  3902                                  ;
  3903                                  ;       Message Queue Helper Routines
  3904                                  ;
  3905                                  ;       GetMessage
  3906                                  ;       PutMessage
  3907                                  ;
  3908                                  ;=======================================================================================================================
  3909                                  ;-----------------------------------------------------------------------------------------------------------------------
  3910                                  ;
  3911                                  ;       Routine:        GetMessage
  3912                                  ;
  3913                                  ;       Description:    This routine reads and removes a message from the message queue.
  3914                                  ;
  3915                                  ;       Out:            EAX     lo-order message data
  3916                                  ;                       EDX     hi-order message data
  3917                                  ;
  3918                                  ;                       CY      0 = message read
  3919                                  ;                               1 = no message to read
  3920                                  ;
  3921                                  ;-----------------------------------------------------------------------------------------------------------------------
  3922                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3923                                                          push    ecx                                             ;
  3924                                                          push    ds                                              ;
  3925                                                          push    ELDTMQ                                          ;load message queue selector ...
  3926                                                          pop     ds                                              ;... into data segment register
  3927                                                          mov     ebx,[MQHead]                                    ;head ptr
  3928                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3929                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3930                                                          or      eax,edx                                         ;is queue empty?
  3931                                                          stc                                                     ;assume queue is emtpy
  3932                                                          jz      .20                                             ;yes, skip ahead
  3933                                                          xor     ecx,ecx                                         ;store zero
  3934                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3935                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3936                                                          add     ebx,8                                           ;next queue element
  3937                                                          and     ebx,03fch                                       ;at end of queue?
  3938                                                          jnz     .10                                             ;no, skip ahead
  3939                                                          mov     bl,8                                            ;reset to 1st entry
  3940                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3941                                                          clc                                                     ;indicate message read
  3942                                  .20                     pop     ds                                              ;restore non-volatile regs
  3943                                                          pop     ecx                                             ;
  3944                                                          pop     ebx                                             ;
  3945                                                          ret                                                     ;return
  3946                                  ;-----------------------------------------------------------------------------------------------------------------------
  3947                                  ;
  3948                                  ;       Routine:        PutMessage
  3949                                  ;
  3950                                  ;       Description:    This routine adda a message to the message queue.
  3951                                  ;
  3952                                  ;       In:             ECX     hi-order data word
  3953                                  ;                       EDX     lo-order data word
  3954                                  ;
  3955                                  ;       Out:            CY      0 = success
  3956                                  ;                               1 = fail: queue is full
  3957                                  ;
  3958                                  ;-----------------------------------------------------------------------------------------------------------------------
  3959                                  PutMessage              push    ds                                              ;save non-volatile regs
  3960                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3961                                                          pop     ds                                              ;... into data segment register
  3962                                                          mov     eax,[MQTail]                                    ;tail ptr
  3963                                                          cmp     dword [eax],0                                   ;is queue full?
  3964                                                          stc                                                     ;assume failure
  3965                                                          jne     .20                                             ;yes, cannot store
  3966                                                          mov     [eax],edx                                       ;store lo-order data
  3967                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3968                                                          add     eax,8                                           ;next queue element adr
  3969                                                          and     eax,03fch                                       ;at end of queue?
  3970                                                          jnz     .10                                             ;no, skip ahead
  3971                                                          mov     al,8                                            ;reset to top of queue
  3972                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3973                                                          clc                                                     ;indicate success
  3974                                  .20                     pop     ds                                              ;restore non-volatile regs
  3975                                                          ret                                                     ;return
  3976                                  ;=======================================================================================================================
  3977                                  ;
  3978                                  ;       Memory-Mapped Video Routines
  3979                                  ;
  3980                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3981                                  ;
  3982                                  ;       ClearConsoleScreen
  3983                                  ;       ScrollConsoleRow
  3984                                  ;       SetConsoleChar
  3985                                  ;       SetConsoleString
  3986                                  ;
  3987                                  ;=======================================================================================================================
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ;
  3990                                  ;       Routine:        ClearConsoleScreen
  3991                                  ;
  3992                                  ;       Description:    This routine clears the console (CGA) screen.
  3993                                  ;
  3994                                  ;-----------------------------------------------------------------------------------------------------------------------
  3995                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3996                                                          push    edi                                             ;
  3997                                                          push    ds                                              ;
  3998                                                          push    es                                              ;
  3999                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4000                                                          pop     ds                                              ;... into DS register
  4001                                                          push    EGDTCGA                                         ;load CGA selector ...
  4002                                                          pop     es                                              ;... into ES register
  4003                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4004                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4005                                                          xor     edi,edi                                         ;target offset
  4006                                                          cld                                                     ;forward strings
  4007                                                          rep     stosd                                           ;reset screen body
  4008                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4009                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4010                                                          rep     stosd                                           ;reset OIA line
  4011                                                          xor     al,al                                           ;zero register
  4012                                                          mov     [wbConsoleRow],al                               ;reset console row
  4013                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4014                                                          call    PlaceCursor                                     ;place cursor at current position
  4015                                                          pop     es                                              ;restore non-volatile regs
  4016                                                          pop     ds                                              ;
  4017                                                          pop     edi                                             ;
  4018                                                          pop     ecx                                             ;
  4019                                                          ret                                                     ;return
  4020                                  ;-----------------------------------------------------------------------------------------------------------------------
  4021                                  ;
  4022                                  ;       Routine:        ScrollConsoleRow
  4023                                  ;
  4024                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4025                                  ;
  4026                                  ;-----------------------------------------------------------------------------------------------------------------------
  4027                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4028                                                          push    esi                                             ;
  4029                                                          push    edi                                             ;
  4030                                                          push    ds                                              ;
  4031                                                          push    es                                              ;
  4032                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4033                                                          pop     ds                                              ;... into DS
  4034                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4035                                                          pop     es                                              ;... into ES
  4036                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4037                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4038                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4039                                                          cld                                                     ;forward strings
  4040                                                          rep     movsd                                           ;move 24 lines up
  4041                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4042                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4043                                                          rep     stosd                                           ;clear bottom row
  4044                                                          pop     es                                              ;restore non-volatile regs
  4045                                                          pop     ds                                              ;
  4046                                                          pop     edi                                             ;
  4047                                                          pop     esi                                             ;
  4048                                                          pop     ecx                                             ;
  4049                                                          ret                                                     ;return
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ;
  4052                                  ;       Routine:        SetConsoleChar
  4053                                  ;
  4054                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4055                                  ;
  4056                                  ;       In:             AL      ASCII character
  4057                                  ;                       CL      column
  4058                                  ;                       CH      row
  4059                                  ;                       ES      CGA selector
  4060                                  ;
  4061                                  ;       Out:            EAX     last target address written (ES:)
  4062                                  ;                       CL      column + 1
  4063                                  ;
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4066                                                          movzx   eax,ch                                          ;row
  4067                                                          mov     ah,ECONCOLS                                     ;cols/row
  4068                                                          mul     ah                                              ;row * cols/row
  4069                                                          add     al,cl                                           ;add column
  4070                                                          adc     ah,0                                            ;handle carry
  4071                                                          shl     eax,1                                           ;screen offset
  4072                                                          mov     [es:eax],dl                                     ;store character
  4073                                                          inc     cl                                              ;next column
  4074                                                          ret                                                     ;return
  4075                                  ;-----------------------------------------------------------------------------------------------------------------------
  4076                                  ;
  4077                                  ;       Routine:        SetConsoleString
  4078                                  ;
  4079                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4080                                  ;
  4081                                  ;       In:             ESI     source offset (DS:)
  4082                                  ;                       CL      column
  4083                                  ;                       CH      row
  4084                                  ;                       ES      CGA selector
  4085                                  ;
  4086                                  ;-----------------------------------------------------------------------------------------------------------------------
  4087                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4088                                                          cld                                                     ;forward strings
  4089                                  .10                     lodsb                                                   ;next ASCII character
  4090                                                          test    al,al                                           ;end of string?
  4091                                                          jz      .20                                             ;yes, branch
  4092                                                          call    SetConsoleChar                                  ;store character
  4093                                                          jmp     .10                                             ;continue
  4094                                  .20                     pop     esi                                             ;restore non-volatile regs
  4095                                                          ret                                                     ;return
  4096                                  ;=======================================================================================================================
  4097                                  ;
  4098                                  ;       Input/Output Routines
  4099                                  ;
  4100                                  ;       These routines read and/or write directly to ports.
  4101                                  ;
  4102                                  ;       PlaceCursor
  4103                                  ;       PutPrimaryEndOfInt
  4104                                  ;       PutSecondaryEndOfInt
  4105                                  ;       ResetSystem
  4106                                  ;       SetKeyboardLamps
  4107                                  ;       WaitForKeyInBuffer
  4108                                  ;       WaitForKeyOutBuffer
  4109                                  ;
  4110                                  ;=======================================================================================================================
  4111                                  ;-----------------------------------------------------------------------------------------------------------------------
  4112                                  ;
  4113                                  ;       Routine:        PlaceCursor
  4114                                  ;
  4115                                  ;       Description:    This routine positions the cursor on the console.
  4116                                  ;
  4117                                  ;       In:             DS      OS data selector
  4118                                  ;
  4119                                  ;-----------------------------------------------------------------------------------------------------------------------
  4120                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4121                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4122                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4123                                                          mul     ah                                              ;row offset
  4124                                                          add     al,[wbConsoleColumn]                            ;add column
  4125                                                          adc     ah,0                                            ;add overflow
  4126                                                          mov     ecx,eax                                         ;screen offset
  4127                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4128                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4129                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4130                                                          out     dx,al                                           ;select register
  4131                                                          inc     edx                                             ;data port
  4132                                                          mov     al,ch                                           ;hi-order cursor loc
  4133                                                          out     dx,al                                           ;store hi-order loc
  4134                                                          dec     edx                                             ;register select port
  4135                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4136                                                          out     dx,al                                           ;select register
  4137                                                          inc     edx                                             ;data port
  4138                                                          mov     al,cl                                           ;lo-order cursor loc
  4139                                                          out     dx,al                                           ;store lo-order loc
  4140                                                          pop     ecx                                             ;restore non-volatile regs
  4141                                                          ret                                                     ;return
  4142                                  ;-----------------------------------------------------------------------------------------------------------------------
  4143                                  ;
  4144                                  ;       Routine:        PutPrimaryEndOfInt
  4145                                  ;
  4146                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4147                                  ;
  4148                                  ;-----------------------------------------------------------------------------------------------------------------------
  4149                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4150                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4151                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4152                                                          ret                                                     ;return
  4153                                  ;-----------------------------------------------------------------------------------------------------------------------
  4154                                  ;
  4155                                  ;       Routine:        PutSecondaryEndOfInt
  4156                                  ;
  4157                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4158                                  ;
  4159                                  ;-----------------------------------------------------------------------------------------------------------------------
  4160                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4161                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4162                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4163                                                          ret                                                     ;return
  4164                                  ;-----------------------------------------------------------------------------------------------------------------------
  4165                                  ;
  4166                                  ;       Routine:        ResetSystem
  4167                                  ;
  4168                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4169                                  ;
  4170                                  ;       Out:            N/A     This routine does not return.
  4171                                  ;
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4174                                                          loop    $                                               ;clear interrupts
  4175                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4176                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4177                                  .10                     sti                                                     ;enable maskable interrupts
  4178                                                          hlt                                                     ;halt until interrupt
  4179                                                          jmp     .10                                             ;repeat until reset kicks in
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181                                  ;
  4182                                  ;       Routine:        SetKeyboardLamps
  4183                                  ;
  4184                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4185                                  ;
  4186                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4187                                  ;
  4188                                  ;-----------------------------------------------------------------------------------------------------------------------
  4189                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4190                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4191                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4192                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4193                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4194                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4195                                                          mov     al,bh                                           ;set/reset lamps value
  4196                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4197                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4198                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4199                                                          ret                                                     ;return
  4200                                  ;-----------------------------------------------------------------------------------------------------------------------
  4201                                  ;
  4202                                  ;       Routine:        WaitForKeyInBuffer
  4203                                  ;
  4204                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4205                                  ;
  4206                                  ;       Out:            ZF      1 = Input buffer ready
  4207                                  ;                               0 = Input buffer not ready after timeout
  4208                                  ;
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4211                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4212                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4213                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4214                                                          loopnz  .10                                             ;yes, repeat till timeout
  4215                                                          pop     ecx                                             ;restore non-volatile regs
  4216                                                          ret                                                     ;return
  4217                                  ;-----------------------------------------------------------------------------------------------------------------------
  4218                                  ;
  4219                                  ;       Routine:        WaitForKeyOutBuffer
  4220                                  ;
  4221                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4222                                  ;
  4223                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4224                                  ;                               0 = Output buffer empty after timeout
  4225                                  ;
  4226                                  ;-----------------------------------------------------------------------------------------------------------------------
  4227                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4228                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4229                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4230                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4231                                                          loopz   .10                                             ;loop until output buffer bit
  4232                                                          pop     ecx                                             ;restore non-volatile regs
  4233                                                          ret                                                     ;return
  4234                                  ;-----------------------------------------------------------------------------------------------------------------------
  4235                                  ;
  4236                                  ;       End of the Kernel Function Library
  4237                                  ;
  4238                                  ;-----------------------------------------------------------------------------------------------------------------------
  4239                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4240                                  ;=======================================================================================================================
  4241                                  ;
  4242                                  ;       Console Task
  4243                                  ;
  4244                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4245                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4246                                  ;       screen and responds to user commands.
  4247                                  ;
  4248                                  ;=======================================================================================================================
  4249                                  ;-----------------------------------------------------------------------------------------------------------------------
  4250                                  ;
  4251                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4252                                  ;
  4253                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4254                                  ;
  4255                                  ;-----------------------------------------------------------------------------------------------------------------------
  4256                                  section                 constack                                                ;console task stack
  4257                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4258                                  ;-----------------------------------------------------------------------------------------------------------------------
  4259                                  ;
  4260                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4261                                  ;
  4262                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4263                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4264                                  ;       16 descriptors. Six are initially defined.
  4265                                  ;
  4266                                  ;-----------------------------------------------------------------------------------------------------------------------
  4267                                  section                 conldt                                                  ;console local descriptors
  4268                                                          dq      004093004780007Fh                               ;04 TSS alias
  4269                                                          dq      004093004700007Fh                               ;0c LDT alias
  4270                                                          dq      00409300400006FFh                               ;14 stack
  4271                                                          dq      00CF93000000FFFFh                               ;1c data
  4272                                                          dq      00409B0050000FFFh                               ;24 code
  4273                                                          dq      00409300480007FFh                               ;2c message queue
  4274                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4275                                  ;-----------------------------------------------------------------------------------------------------------------------
  4276                                  ;
  4277                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4278                                  ;
  4279                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4280                                  ;       segment. CS to console code.
  4281                                  ;
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283                                  section                 contss                                                  ;console task state segment
  4284                                                          dd      0                                               ;00 back-link tss
  4285                                                          dd      0700h                                           ;04 esp ring 0
  4286                                                          dd      0014h                                           ;08 ss ring 0
  4287                                                          dd      0700h                                           ;0c esp ring 1
  4288                                                          dd      0014h                                           ;10 es ring 1
  4289                                                          dd      0700h                                           ;14 esp ring 2
  4290                                                          dd      0014h                                           ;18 ss ring 2
  4291                                                          dd      0                                               ;1c cr ring 3
  4292                                                          dd      0                                               ;20 eip
  4293                                                          dd      0200h                                           ;24 eflags
  4294                                                          dd      0                                               ;28 eax
  4295                                                          dd      0                                               ;2c ecx
  4296                                                          dd      0                                               ;30 edx
  4297                                                          dd      0                                               ;34 ebx
  4298                                                          dd      0700h                                           ;38 esp ring 3
  4299                                                          dd      0                                               ;3c ebp
  4300                                                          dd      0                                               ;40 esi
  4301                                                          dd      0                                               ;44 edi
  4302                                                          dd      001Ch                                           ;48 es
  4303                                                          dd      0024h                                           ;4c cs
  4304                                                          dd      0014h                                           ;50 ss ring 3
  4305                                                          dd      001Ch                                           ;54 ds
  4306                                                          dd      0                                               ;58 fs
  4307                                                          dd      0                                               ;5c gs
  4308                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4309                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4310                                  ;-----------------------------------------------------------------------------------------------------------------------
  4311                                  ;
  4312                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4313                                  ;
  4314                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4315                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4316                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4317                                  ;       event.
  4318                                  ;
  4319                                  ;-----------------------------------------------------------------------------------------------------------------------
  4320                                  section                 conmque                                                 ;console message queue
  4321                                                          dd      8                                               ;head pointer
  4322                                                          dd      8                                               ;tail pointer
  4323                                                          times   510 dd 0                                        ;queue elements
  4324                                  ;-----------------------------------------------------------------------------------------------------------------------
  4325                                  ;
  4326                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4327                                  ;
  4328                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4329                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4330                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4331                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4332                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4333                                  ;       board input, echoing to the console screen and responding to user commands.
  4334                                  ;
  4335                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4336                                  ;
  4337                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4338                                  ;                               |  Real Mode Interrupt Vectors                  |
  4339                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4340                                  ;                               |  Reserved BIOS Memory Area                    |
  4341                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4342                                  ;                               |  Shared Kernel Memory Area                    |
  4343                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4344                                  ;                               |  Global Descriptor Table (GDT)                |
  4345                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4346                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4347                                  ;                       002000  +-----------------------------------------------+
  4348                                  ;                               |  Interrupt Handlers                           |
  4349                                  ;                               |  Kernel Function Library                      |
  4350                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4351                                  ;                               |  Console Task Stack Area                      |
  4352                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4353                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4354                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4355                                  ;                               |  Console Task Task State Segment (TSS)        |
  4356                                  ;                       004800  +-----------------------------------------------+
  4357                                  ;                               |  Console Task Message Queue                   |
  4358                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4359                                  ;                               |  Console Task Code                            |
  4360                                  ;                               |  Console Task Constants                       |
  4361                                  ;                       006000  +===============================================+
  4362                                  ;
  4363                                  ;-----------------------------------------------------------------------------------------------------------------------
  4364                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4365                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  4366                                  
  4367                                                          clearConsoleScreen                                      ;clear the console screen
  4368                                                          putConsoleString czTitle                                ;display startup message
  4369                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4370                                                          placeCursor                                             ;set CRT cursor location
  4371                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4372                                                          putConsoleString czNewLine                              ;newline
  4373                                  
  4374                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  4375                                                          mov     ebx,wzConsoleToken                              ;token buffer
  4376                                                          call    ConTakeToken                                    ;handle console input
  4377                                                          mov     edx,wzConsoleToken                              ;token buffer
  4378                                                          call    ConDetermineCommand                             ;determine command number
  4379                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4380                                                          jb      .20                                             ;yes, branch
  4381                                  
  4382                                                          putConsoleString czUnknownCommand                       ;display error message
  4383                                  
  4384                                                          jmp     .10                                             ;next command
  4385                                  .20                     shl     eax,2                                           ;index into jump table
  4386                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  4387                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4388                                                          call    eax                                             ;call command handler
  4389                                                          jmp     .10                                             ;next command
  4390                                  ;-----------------------------------------------------------------------------------------------------------------------
  4391                                  ;
  4392                                  ;       Routine:        ConInitializeData
  4393                                  ;
  4394                                  ;       Description:    This routine initializes console task variables.
  4395                                  ;
  4396                                  ;-----------------------------------------------------------------------------------------------------------------------
  4397                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  4398                                                          push    edi                                             ;
  4399                                                          push    es                                              ;
  4400                                  ;
  4401                                  ;       Initialize console work areas.
  4402                                  ;
  4403                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4404                                                          pop     es                                              ;... into extra segment register
  4405                                                          mov     edi,ECONDATA                                    ;OS console data address
  4406                                                          xor     al,al                                           ;initialization value
  4407                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  4408                                                          cld                                                     ;forward strings
  4409                                                          rep     stosb                                           ;initialize data
  4410                                  ;
  4411                                  ;       Initialize heap size
  4412                                  ;
  4413                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4414                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  4415                                  ;
  4416                                  ;       Initialize MEMROOT structure
  4417                                  ;
  4418                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4419                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4420                                                          xor     ecx,ecx                                         ;zero register
  4421                                                          mov     cl,4                                            ;count
  4422                                                          rep     stosd                                           ;store first/last contig and free addrs
  4423                                                          xor     eax,eax                                         ;zero register
  4424                                                          stosd                                                   ;zero first task block
  4425                                                          stosd                                                   ;zero last task block
  4426                                  ;
  4427                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4428                                  ;
  4429                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4430                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  4431                                                          stosd                                                   ;store signature
  4432                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4433                                                          stosd                                                   ;store block size
  4434                                                          xor     ecx,ecx                                         ;zero register
  4435                                                          mov     cl,6                                            ;count
  4436                                                          xor     eax,eax                                         ;zero register
  4437                                                          rep     stosd                                           ;zero owner, reserved, pointers
  4438                                  ;
  4439                                  ;       Restore and return.
  4440                                  ;
  4441                                                          pop     es                                              ;restore non-volatile regs
  4442                                                          pop     edi                                             ;
  4443                                                          pop     ecx                                             ;
  4444                                                          ret                                                     ;return
  4445                                  ;-----------------------------------------------------------------------------------------------------------------------
  4446                                  ;
  4447                                  ;       Routine:        ConTakeToken
  4448                                  ;
  4449                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4450                                  ;
  4451                                  ;       In:             DS:EDX  source buffer address
  4452                                  ;                       DS:EBX  target buffer address
  4453                                  ;
  4454                                  ;       Out:            DS:EDX  source buffer address
  4455                                  ;                       DS:EBX  target buffer address
  4456                                  ;
  4457                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4458                                  ;
  4459                                  ;-----------------------------------------------------------------------------------------------------------------------
  4460                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  4461                                                          push    edi                                             ;
  4462                                                          push    es                                              ;
  4463                                                          push    ds                                              ;load data segment selector ...
  4464                                                          pop     es                                              ;... into extra segment reg
  4465                                                          mov     esi,edx                                         ;source buffer address
  4466                                                          mov     edi,ebx                                         ;target buffer address
  4467                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4468                                                          cld                                                     ;forward strings
  4469                                  .10                     lodsb                                                   ;load byte
  4470                                                          cmp     al,EASCIISPACE                                  ;space?
  4471                                                          je      .10                                             ;yes, continue
  4472                                                          test    al,al                                           ;end of line?
  4473                                                          jz      .40                                             ;yes, branch
  4474                                  .20                     stosb                                                   ;store byte
  4475                                                          lodsb                                                   ;load byte
  4476                                                          test    al,al                                           ;end of line?
  4477                                                          jz      .40                                             ;no, continue
  4478                                                          cmp     al,EASCIISPACE                                  ;space?
  4479                                                          jne     .20                                             ;no, continue
  4480                                  .30                     lodsb                                                   ;load byte
  4481                                                          cmp     al,EASCIISPACE                                  ;space?
  4482                                                          je      .30                                             ;yes, continue
  4483                                                          dec     esi                                             ;pre-position
  4484                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4485                                                          mov     edi,edx                                         ;source buffer address
  4486                                  .50                     lodsb                                                   ;remaining byte
  4487                                                          stosb                                                   ;move to front of buffer
  4488                                                          test    al,al                                           ;end of line?
  4489                                                          jnz     .50                                             ;no, continue
  4490                                                          pop     es                                              ;restore non-volatile regs
  4491                                                          pop     edi                                             ;
  4492                                                          pop     esi                                             ;
  4493                                                          ret                                                     ;return
  4494                                  ;-----------------------------------------------------------------------------------------------------------------------
  4495                                  ;
  4496                                  ;       Routine:        ConDetermineCommand
  4497                                  ;
  4498                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4499                                  ;
  4500                                  ;       input:          DS:EDX  command address
  4501                                  ;
  4502                                  ;       output:         EAX     >=0     = command nbr
  4503                                  ;                               0       = unknown command
  4504                                  ;
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4507                                                          push    ecx                                             ;
  4508                                                          push    esi                                             ;
  4509                                                          push    edi                                             ;
  4510                                  
  4511                                                          upperCaseString                                         ;upper-case string at EDX
  4512                                  
  4513                                                          mov     esi,tConCmdTbl                                  ;commands table
  4514                                                          xor     edi,edi                                         ;intialize command number
  4515                                                          cld                                                     ;forward strings
  4516                                  .10                     lodsb                                                   ;command length
  4517                                                          movzx   ecx,al                                          ;command length
  4518                                                          jecxz   .20                                             ;branch if end of table
  4519                                                          mov     ebx,esi                                         ;table entry address
  4520                                                          add     esi,ecx                                         ;next table entry address
  4521                                  
  4522                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4523                                  
  4524                                                          jecxz   .20                                             ;branch if equal
  4525                                                          inc     edi                                             ;increment command nbr
  4526                                                          jmp     .10                                             ;repeat
  4527                                  .20                     mov     eax,edi                                         ;command number
  4528                                                          pop     edi                                             ;restore non-volatile regs
  4529                                                          pop     esi                                             ;
  4530                                                          pop     ecx                                             ;
  4531                                                          pop     ebx                                             ;
  4532                                                          ret                                                     ;return
  4533                                  ;-----------------------------------------------------------------------------------------------------------------------
  4534                                  ;
  4535                                  ;       Routine:        ConClear
  4536                                  ;
  4537                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4538                                  ;
  4539                                  ;-----------------------------------------------------------------------------------------------------------------------
  4540                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4541                                                          ret                                                     ;return
  4542                                  ;-----------------------------------------------------------------------------------------------------------------------
  4543                                  ;
  4544                                  ;       Routine:        ConExit
  4545                                  ;
  4546                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4547                                  ;
  4548                                  ;-----------------------------------------------------------------------------------------------------------------------
  4549                                  ConExit                 resetSystem                                             ;issue system reset
  4550                                                          ret                                                     ;return
  4551                                  ;-----------------------------------------------------------------------------------------------------------------------
  4552                                  ;
  4553                                  ;       Routine:        ConFree
  4554                                  ;
  4555                                  ;       Description:    This routine handles the FREE command.
  4556                                  ;
  4557                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4558                                  ;
  4559                                  ;-----------------------------------------------------------------------------------------------------------------------
  4560                                  ConFree                 push    ebx                                             ;save non-volatile regs
  4561                                                          push    ecx                                             ;
  4562                                                          push    esi                                             ;
  4563                                                          push    edi                                             ;
  4564                                  ;
  4565                                  ;       Get address parameter
  4566                                  ;
  4567                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4568                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4569                                                          call    ConTakeToken                                    ;take first param as token
  4570                                  ;
  4571                                  ;       Convert input parameter from hexadecimal string to binary
  4572                                  ;
  4573                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4574                                                          je      .10                                             ;no, branch
  4575                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4576                                  
  4577                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4578                                  
  4579                                                          test    eax,eax                                         ;valid parameter?
  4580                                                          jz      .10                                             ;no, branch
  4581                                  ;
  4582                                  ;       Free memory block
  4583                                  ;
  4584                                                          freeMemory eax                                          ;free memory
  4585                                  
  4586                                                          cmp     eax,-1                                          ;memory freed?
  4587                                                          je      .10                                             ;no, branch
  4588                                  ;
  4589                                  ;       Indicate memory freed
  4590                                  ;
  4591                                                          putConsoleString czOK                                   ;indicate success
  4592                                  ;
  4593                                  ;       Restore and return
  4594                                  ;
  4595                                  .10                     pop     edi                                             ;restore non-volatile regs
  4596                                                          pop     esi                                             ;
  4597                                                          pop     ecx                                             ;
  4598                                                          pop     ebx                                             ;
  4599                                                          ret                                                     ;return
  4600                                  ;-----------------------------------------------------------------------------------------------------------------------
  4601                                  ;
  4602                                  ;       Routine:        ConInt6
  4603                                  ;
  4604                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4605                                  ;
  4606                                  ;-----------------------------------------------------------------------------------------------------------------------
  4607                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  4608                                                          ret                                                     ;return (not executed)
  4609                                  ;-----------------------------------------------------------------------------------------------------------------------
  4610                                  ;
  4611                                  ;       Routine:        ConMalloc
  4612                                  ;
  4613                                  ;       Description:    This routine handles the MALLOC command.
  4614                                  ;
  4615                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4616                                  ;
  4617                                  ;-----------------------------------------------------------------------------------------------------------------------
  4618                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  4619                                                          push    ecx                                             ;
  4620                                                          push    esi                                             ;
  4621                                                          push    edi                                             ;
  4622                                  ;
  4623                                  ;       Get size parameter
  4624                                  ;
  4625                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4626                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4627                                                          call    ConTakeToken                                    ;take first param as token
  4628                                  ;
  4629                                  ;       Convert input parameter from decimal string to binary
  4630                                  ;
  4631                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4632                                                          je      .10                                             ;no, branch
  4633                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4634                                  
  4635                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4636                                  
  4637                                                          test    eax,eax                                         ;valid parameter?
  4638                                                          jz      .10                                             ;no, branch
  4639                                  ;
  4640                                  ;       Allocate memory block
  4641                                  ;
  4642                                                          allocateMemory eax                                      ;allocate memory
  4643                                  
  4644                                                          test    eax,eax                                         ;memory allocated?
  4645                                                          jz      .10                                             ;no, branch
  4646                                  ;
  4647                                  ;       Report allocated memory block address
  4648                                  ;
  4649                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4650                                                          mov     ecx,eax                                         ;memory address
  4651                                  
  4652                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4653                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4654                                                          putConsoleString czNewLine                              ;display new line
  4655                                  
  4656                                  .10                     pop     edi                                             ;restore non-volatile regs
  4657                                                          pop     esi                                             ;
  4658                                                          pop     ecx                                             ;
  4659                                                          pop     ebx                                             ;
  4660                                                          ret                                                     ;return
  4661                                  ;-----------------------------------------------------------------------------------------------------------------------
  4662                                  ;
  4663                                  ;       Routine:        ConMem
  4664                                  ;
  4665                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4666                                  ;
  4667                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4668                                  ;
  4669                                  ;-----------------------------------------------------------------------------------------------------------------------
  4670                                  ConMem                  push    ebx                                             ;save non-volatile regs
  4671                                                          push    esi                                             ;
  4672                                                          push    edi                                             ;
  4673                                  ;
  4674                                  ;                       update the source address if a parameter is given
  4675                                  ;
  4676                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4677                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4678                                                          call    ConTakeToken                                    ;take first param as token
  4679                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4680                                                          je      .10                                             ;no, branch
  4681                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4682                                  
  4683                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4684                                  
  4685                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4686                                  ;
  4687                                  ;                       setup source address and row count
  4688                                  ;
  4689                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4690                                                          xor     ecx,ecx                                         ;zero register
  4691                                                          mov     cl,16                                           ;row count
  4692                                  ;
  4693                                  ;                       start the row with the source address in hexadecimal
  4694                                  ;
  4695                                  .20                     push    ecx                                             ;save remaining rows
  4696                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4697                                                          mov     edx,edi                                         ;output buffer address
  4698                                                          mov     ecx,esi                                         ;console memory address
  4699                                  
  4700                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4701                                  
  4702                                                          add     edi,8                                           ;end of memory addr hexnum
  4703                                                          mov     al,' '                                          ;ascii space
  4704                                                          stosb                                                   ;store delimiter
  4705                                  ;
  4706                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4707                                  ;
  4708                                                          xor     ecx,ecx                                         ;zero register
  4709                                                          mov     cl,16                                           ;loop count
  4710                                  .30                     push    ecx                                             ;save loop count
  4711                                                          lodsb                                                   ;memory byte
  4712                                                          mov     ah,al                                           ;memory byte
  4713                                                          shr     al,4                                            ;high-order in bits 3-0
  4714                                                          or      al,30h                                          ;apply ascii numeric zone
  4715                                                          cmp     al,3ah                                          ;numeric range?
  4716                                                          jb      .40                                             ;yes, skip ahead
  4717                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4718                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4719                                                          mov     al,ah                                           ;low-order in bits 3-0
  4720                                                          and     al,0fh                                          ;mask out high-order bits
  4721                                                          or      al,30h                                          ;apply ascii numeric zone
  4722                                                          cmp     al,3ah                                          ;numeric range?
  4723                                                          jb      .50                                             ;yes, skip ahead
  4724                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4725                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4726                                                          mov     al,' '                                          ;ascii space
  4727                                                          stosb                                                   ;store ascii space delimiter
  4728                                                          pop     ecx                                             ;loop count
  4729                                                          loop    .30                                             ;next
  4730                                  ;
  4731                                  ;                       output printable ASCII character section for the row
  4732                                  ;
  4733                                                          sub     esi,16                                          ;reset source pointer
  4734                                                          mov     cl,16                                           ;loop count
  4735                                  .60                     lodsb                                                   ;source byte
  4736                                                          cmp     al,32                                           ;printable? (low-range test)
  4737                                                          jb      .70                                             ;no, skip ahead
  4738                                                          cmp     al,128                                          ;printable? (high-range test)
  4739                                                          jb      .80                                             ;yes, skip ahead
  4740                                  .70                     mov     al,' '                                          ;display space instead of printable
  4741                                  .80                     stosb                                                   ;store printable ascii byte
  4742                                                          loop    .60                                             ;next source byte
  4743                                                          xor     al,al                                           ;nul-terminator
  4744                                                          stosb                                                   ;terminate output line
  4745                                  ;
  4746                                  ;                       display constructed output buffer and newline
  4747                                  ;
  4748                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4749                                                          putConsoleString czNewLine                              ;display new line
  4750                                  ;
  4751                                  ;                       repeat until all lines displayed and preserve source address
  4752                                  ;
  4753                                                          pop     ecx                                             ;remaining rows
  4754                                                          loop    .20                                             ;next row
  4755                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4756                                                          pop     edi                                             ;restore regs
  4757                                                          pop     esi                                             ;
  4758                                                          pop     ebx                                             ;
  4759                                                          ret                                                     ;return
  4760                                  ;-----------------------------------------------------------------------------------------------------------------------
  4761                                  ;
  4762                                  ;       Routine:        ConVersion
  4763                                  ;
  4764                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4765                                  ;
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ConVersion              putConsoleString czTitle                                ;display version message
  4768                                                          ret                                                     ;return
  4769                                  ;-----------------------------------------------------------------------------------------------------------------------
  4770                                  ;
  4771                                  ;       Tables
  4772                                  ;
  4773                                  ;-----------------------------------------------------------------------------------------------------------------------
  4774                                                                                                                  ;---------------------------------------
  4775                                                                                                                  ;  Command Jump Table
  4776                                                                                                                  ;---------------------------------------
  4777                                  tConJmpTbl              equ     $                                               ;command jump table
  4778                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4779                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4780                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4781                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4782                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4783                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4784                                                          dd      ConFree         - ConCode                       ;free command routine offset
  4785                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4786                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4787                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4788                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4789                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4790                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4791                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4792                                                                                                                  ;---------------------------------------
  4793                                                                                                                  ;  Command Name Table
  4794                                                                                                                  ;---------------------------------------
  4795                                  tConCmdTbl              equ     $                                               ;command name table
  4796                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4797                                                          db      8,"VERSION",0                                   ;version command
  4798                                                          db      7,"MALLOC",0                                    ;malloc command
  4799                                                          db      7,"MEMORY",0                                    ;memory command
  4800                                                          db      6,"CLEAR",0                                     ;clear command
  4801                                                          db      5,"EXIT",0                                      ;exit command
  4802                                                          db      5,"FREE",0                                      ;free command
  4803                                                          db      5,"INT6",0                                      ;int6 command
  4804                                                          db      5,"QUIT",0                                      ;quit command
  4805                                                          db      4,"CLS",0                                       ;cls command
  4806                                                          db      4,"MEM",0                                       ;mem command
  4807                                                          db      4,"VER",0                                       ;ver command
  4808                                                          db      0                                               ;end of table
  4809                                  ;-----------------------------------------------------------------------------------------------------------------------
  4810                                  ;
  4811                                  ;       Constants
  4812                                  ;
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814                                  czNewLine               db      13,10,0                                         ;new line string
  4815                                  czOK                    db      "ok",13,10,0                                    ;ok string
  4816                                  czPrompt                db      ":",0                                           ;prompt string
  4817                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4818                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4819                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4820                                  %endif
  4821                                  %ifdef BUILDDISK
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ;
  4824                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4825                                  ;
  4826                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4827                                  ;
  4828                                  ;-----------------------------------------------------------------------------------------------------------------------
  4829                                  section                 unused                                                  ;unused disk space
  4830                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4831                                  %endif
  4832                                  ;=======================================================================================================================
  4833                                  ;
  4834                                  ;       End of Program Code
  4835                                  ;
  4836                                  ;=======================================================================================================================
