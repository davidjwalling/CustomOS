     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.010
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMSG...         Message identifers
   166                                  ;
   167                                  ;=======================================================================================================================
   168                                  ;-----------------------------------------------------------------------------------------------------------------------
   169                                  ;
   170                                  ;       Hardware-Defined Values
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   176                                  ;
   177                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   178                                  ;       for CGA, EGA, VGA and compatible video modes.
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   182                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   183                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   184                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ;
   187                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   188                                  ;
   189                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   190                                  ;
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   193                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   194                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   195                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   196                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  ;
   199                                  ;       8042 Keyboard Controller                                                EKEYB...
   200                                  ;
   201                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   202                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   203                                  ;
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  EKEYBPORTDATA           equ     060h                                            ;data port
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   209                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   210                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   211                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   212                                                                                                                  ;---------------------------------------
   213                                                                                                                  ;       Keyboard Scan Codes
   214                                                                                                                  ;---------------------------------------
   215                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   216                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   217                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   218                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   219                                  EKEYBSLASH              equ     035h                                            ;slash
   220                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   221                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   222                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   223                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   224                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   225                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   226                                  EKEYBUP                 equ     080h                                            ;up
   227                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   228                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   229                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   230                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   231                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   232                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   233                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   234                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   235                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   236                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   237                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   238                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  ;
   241                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   242                                  ;
   243                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   244                                  ;       external devices and signals a hardware interrupt to the CPU.
   245                                  ;
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   248                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   249                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   250                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   251                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  ;
   254                                  ;       8253 Programmable Interval Timer                                        EPIT...
   255                                  ;
   256                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   257                                  ;       approximately 18.2 times per second.
   258                                  ;
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;
   263                                  ;       x86 CPU Architecture                                                    ;EX86...
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   270                                  ;
   271                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  ERTCREGPORT             equ     70h                                             ;register select port
   275                                  ERTCDATAPORT            equ     71h                                             ;data port
   276                                  ERTCSECONDREG           equ     00h                                             ;second
   277                                  ERTCMINUTEREG           equ     02h                                             ;minute
   278                                  ERTCHOURREG             equ     04h                                             ;hour
   279                                  ERTCWEEKDAYREG          equ     06h                                             ;weekday
   280                                  ERTCDAYREG              equ     07h                                             ;day
   281                                  ERTCMONTHREG            equ     08h                                             ;month
   282                                  ERTCYEARREG             equ     09h                                             ;year of the century
   283                                  ERTCSTATUSREG           equ     0bh                                             ;status
   284                                  ERTCCENTURYREG          equ     32h                                             ;century
   285                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   289                                  ;
   290                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   291                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   292                                  ;
   293                                  ;       0.......        Segment is not present in memory (triggers int 11)
   294                                  ;       1.......        Segment is present in memory
   295                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   296                                  ;       ...0....        Segment is a system segment
   297                                  ;       ...00010                Local Descriptor Table
   298                                  ;       ...00101                Task Gate
   299                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   300                                  ;       ...01100                Call Gate (386)
   301                                  ;       ...01110                Interrupt Gate (386)
   302                                  ;       ...01111                Trap Gate (386)
   303                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   304                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   305                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   309                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   310                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   311                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   312                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   313                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   314                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   315                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;
   318                                  ;       Firmware-Defined Values
   319                                  ;
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   324                                  ;
   325                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   326                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   330                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   331                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   332                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   333                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   334                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   335                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   336                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   337                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  ;
   340                                  ;       Standards-Based Values
   341                                  ;
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;
   345                                  ;       ASCII                                                                   EASCII...
   346                                  ;
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   349                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   350                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   351                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   352                                  EASCIISPACE             equ     020h                                            ;space
   353                                  EASCIIUPPERA            equ     041h                                            ;'A'
   354                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   355                                  EASCIILOWERA            equ     061h                                            ;'a'
   356                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   357                                  EASCIITILDE             equ     07Eh                                            ;'~'
   358                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   359                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   360                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   361                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   362                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   363                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   364                                  EASCIICASE              equ     00100000b                                       ;case bit
   365                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;
   368                                  ;       Operating System Values
   369                                  ;
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  ;
   373                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   374                                  ;
   375                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   376                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   377                                  ;
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   380                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   381                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   382                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   383                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   384                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   385                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  ;       Console Constants                                                       ECON...
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ECONCOLS                equ     80                                              ;columns per row
   390                                  ECONROWS                equ     24                                              ;console rows
   391                                  ECONOIAROW              equ     24                                              ;operator information area row
   392                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   393                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   394                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   395                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   396                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   401                                  EGDTCGA                 equ     020h                                            ;cga video selector
   402                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   403                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   404                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   405                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   406                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   407                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Keyboard Flags                                                          EKEYF...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   412                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   413                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   414                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   415                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   416                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   417                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   418                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   419                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   420                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   421                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Kernel Constants                                                        EKRN...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   426                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   427                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   428                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   429                                  ;-----------------------------------------------------------------------------------------------------------------------
   430                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Message Identifiers                                                     EMSG...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   437                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   438                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   439                                  ;=======================================================================================================================
   440                                  ;
   441                                  ;       Structures
   442                                  ;
   443                                  ;=======================================================================================================================
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;
   446                                  ;       DATETIME
   447                                  ;
   448                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   449                                  ;
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  struc                   DATETIME
   452 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   453 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   454 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   455 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   456 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   457 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   458 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   459 00000007 <res 00000001>          .century                resb    1                                               ;century
   460                                  EDATETIMELEN            equ     ($-.second)
   461                                  endstruc
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;
   464                                  ;       MQUEUE
   465                                  ;
   466                                  ;       The MQUEUE structure maps memory used for a message queue.
   467                                  ;
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  struc                   MQUEUE
   470 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   471 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   472 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   473                                  endstruc
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ;
   476                                  ;       OSDATA
   477                                  ;
   478                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   479                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   480                                  ;
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  struc                   OSDATA
   483 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   484 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   485 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   486 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   487 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   488 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   489 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   490 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   491 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   492 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   493 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   494 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   495 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   496 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   497 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   498 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   499 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   500 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   501 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   502 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   503 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   504 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   505 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   506 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   507 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   508 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   509 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   510 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   511 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   512 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   513 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   514 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   515 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   516 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   517 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   518 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   519 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   520 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   521 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   522 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   523 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   524 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   525 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   526 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   527 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   528 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   529 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   530 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   531 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   532 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   533 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   534 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   535 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   536 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   537 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   538 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   539 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   540 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   541 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   542 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   543 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   544 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   545 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   546 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   547 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   548 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   549 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   550 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   551 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   552 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   553 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   554 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   555 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   556 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   557 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   558 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   559 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   560 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   561 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   562 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   563 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   564 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   565 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   566 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   567 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   568 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   569 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   570 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   571 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   572 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   573 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   574 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   575 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   576 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   577 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   578 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   579 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   580 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   581 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   582 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   583 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   584                                  ;-----------------------------------------------------------------------------------------------------------------------
   585                                  ;
   586                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   587                                  ;
   588                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   589                                  ;
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ECONDATA                equ     ($)
   592 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   593 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   594 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   595 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   596 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   597 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   598 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   599 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   600 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   601 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   602 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   603 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   604 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   605 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   606 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   607 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   608 00000900 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   609                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   610                                  ;-----------------------------------------------------------------------------------------------------------------------
   611                                  ;
   612                                  ;       End of OS Variables
   613                                  ;
   614                                  ;-----------------------------------------------------------------------------------------------------------------------
   615                                  endstruc
   616                                  ;-----------------------------------------------------------------------------------------------------------------------
   617                                  ;
   618                                  ;       Macros
   619                                  ;
   620                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   621                                  ;
   622                                  ;-----------------------------------------------------------------------------------------------------------------------
   623                                  %macro                  mint    1
   624                                  _%1                     equ     ($-$$) / EX86DESCLEN
   625                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   626                                  %endmacro
   627                                  %macro                  mtrap   1
   628                                  _%1                     equ     ($-$$) / EX86DESCLEN
   629                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   630                                  %endmacro
   631                                  %macro                  menter  1
   632                                  ?%1                     equ     ($-$$)
   633                                  %endmacro
   634                                  %macro                  tsvce   1
   635                                  e%1                     equ     ($-tsvc)/4
   636                                                          dd      %1
   637                                  %endmacro
   638                                  %ifdef BUILDBOOT
   639                                  ;=======================================================================================================================
   640                                  ;
   641                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   642                                  ;
   643                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   644                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   645                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   646                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   647                                  ;
   648                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   649                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   650                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   651                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   652                                  ;       immediately followed by a disk parameter table.
   653                                  ;
   654                                  ;=======================================================================================================================
   655                                                          cpu     8086                                            ;assume minimal CPU
   656                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   657                                                          bits    16                                              ;16-bit code at power-up
   658                                  %ifdef BUILDPREP
   659 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   660                                  %else
   661                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   662                                  %endif
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  ;
   665                                  ;       Disk Parameter Table
   666                                  ;
   667                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   668                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   669                                  ;
   670                                  ;-----------------------------------------------------------------------------------------------------------------------
   671 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   672 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   673 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   674 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   675 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   676 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   677 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   678 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   679 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   680                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   681 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   682 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   683 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   684                                  ;
   685                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   686                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   687                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   688                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   689                                  ;       given several possible starting values for CS:IP.
   690                                  ;
   691                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   692 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   693                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   694 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   695 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   696 00000025 B104                                            mov     cl,4                                            ;shift count
   697 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   698 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   699 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   700                                  ;
   701                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   702                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   703                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   704                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   705                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   706                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   707                                  ;
   708 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   709 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   710 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   711 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   712 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   713                                  ;
   714                                  ;       Our boot addressability is now set up according to the following diagram.
   715                                  ;
   716                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   717                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   718                                  ;                               |  256 = 100h bytes                             |
   719                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   720                                  ;                               |  Boot Sector (vstart=0100h)                   |
   721                                  ;                               |  1 sector = 512 = 200h bytes                  |
   722                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   723                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   724                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   725                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   726                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   727                                  ;                               |  2 sectors = 1024 = 400h bytes
   728                                  ;                       009400  +-----------------------------------------------+ DS:1900
   729                                  ;
   730                                  ;       On entry, DL indicates the drive being booted from.
   731                                  ;
   732 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   733                                  ;
   734                                  ;       Compute directory i/o buffer address.
   735                                  ;
   736 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   737 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   738 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   739 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   740                                  ;
   741                                  ;       Compute segment where os.com will be loaded.
   742                                  ;
   743 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   744 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   745 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   746 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   747                                  ;
   748                                  ;       Set the video mode to 80 column, 25 row, text.
   749                                  ;
   750 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   751 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   752                                  ;
   753                                  ;       Write a message to the console so we know we have our addressability established.
   754                                  ;
   755 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   756 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   757                                  ;
   758                                  ;       Initialize the number of directory sectors to search.
   759                                  ;
   760 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   761 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   762                                  ;
   763                                  ;       Compute number of directory sectors and initialize overhead count.
   764                                  ;
   765 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   766 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   767 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   768 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   769                                  ;
   770                                  ;       Compute directory entries per sector.
   771                                  ;
   772 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   773 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   774 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   775                                  ;
   776                                  ;       Compute first logical directory sector and update overhead count.
   777                                  ;
   778 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   779 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   780 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   781 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   782 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   783 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   784                                  ;
   785                                  ;       Read directory sector.
   786                                  ;
   787 0000008E B001                    .30                     mov     al,1                                            ;sector count
   788 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   789 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   790 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   791                                  ;
   792                                  ;       Setup variables to search this directory sector.
   793                                  ;
   794 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   795 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   796 000000A1 7603                                            jna     .40                                             ;no, continue
   797 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   798 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   799 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   800 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   801                                  ;
   802                                  ;       Loop through directory sectors searching for kernel program.
   803                                  ;
   804 000000B1 56                      .50                     push    si                                              ;save kernel name address
   805 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   806 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   807 000000B6 FC                                              cld                                                     ;forward strings
   808 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   809 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   810 000000BA 5E                                              pop     si                                              ;restore kernel name address
   811 000000BB 7418                                            je      .60                                             ;exit loop if found
   812 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   813 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   814 000000C2 75ED                                            jnz     .50                                             ;next entry
   815                                  ;
   816                                  ;       Repeat search if we are not at the end of the directory.
   817                                  ;
   818 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   819 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   820 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   821 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   822 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   823                                  ;
   824                                  ;       If we find the kernel program in the directory, read the FAT.
   825                                  ;
   826 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   827 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   828 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   829 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   830 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   831 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   832                                  ;
   833                                  ;       Get the starting cluster of the kernel program and target address.
   834                                  ;
   835 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   836 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   837                                  ;
   838                                  ;       Read each program cluster into RAM.
   839                                  ;
   840 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   841 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   842 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   843 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   844 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   845 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   846 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   847 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   848 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   849                                  ;
   850                                  ;       Update buffer pointer for next cluster.
   851                                  ;
   852 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   853 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   854 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   855 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   856 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   857                                  ;
   858                                  ;       Compute next cluster number.
   859                                  ;
   860 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   861 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   862 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   863 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   864 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   865 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   866 00000120 83E701                                          and     di,1                                            ;get low bit
   867 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   868 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   869 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   870                                  ;
   871                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   872                                  ;
   873 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   874 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   875 00000130 B104                                            mov     cl,4                                            ;shift count
   876 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   877 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   878 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   879 0000013A 75B2                                            jne     .70                                             ;no, continue
   880                                  ;
   881                                  ;       Transfer control to the operating system program.
   882                                  ;
   883 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   884 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   885 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   886                                  ;
   887                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   888                                  ;
   889 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   890 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   891 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   892 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   893 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   894 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   895 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   896 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   897 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   898 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   899                                  ;
   900                                  ;       Try maxtries times to read sector.
   901                                  ;
   902 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   903 00000160 53                      .10                     push    bx                                              ;save buffer address
   904 00000161 51                                              push    cx                                              ;save retry count
   905 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   906 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   907 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   908 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   909 0000016F 59                                              pop     cx                                              ;restore retry count
   910 00000170 5B                                              pop     bx                                              ;restore buffer address
   911 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   912 00000173 E2EB                                            loop    .10                                             ;retry
   913                                  ;
   914                                  ;       Handle disk error: convert to ASCII and store in error string.
   915                                  ;
   916 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   917 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   918 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   919 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   920 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   921 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   922 00000183 7203                                            jb      .20                                             ;continue if numeral
   923 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   924 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   925 0000018A 7203                                            jb      .30                                             ;continue if numeral
   926 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   927 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   928 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   929 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   930                                  ;
   931                                  ;       Wait for a key press.
   932                                  ;
   933 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   934 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   935 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   936 0000019E FB                                              sti                                                     ;enable maskable interrupts
   937 0000019F F4                                              hlt                                                     ;wait for interrupt
   938 000001A0 EBF6                                            jmp     .10                                             ;repeat
   939                                  ;
   940                                  ;       Reset the system.
   941                                  ;
   942 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   943 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   944 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   945 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   946 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   947                                  ;
   948                                  ;       Display text message.
   949                                  ;
   950 000001AA FC                      BootPrint               cld                                                     ;forward strings
   951 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   952 000001AC 84C0                                            test    al,al                                           ;end of string?
   953 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   954 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   955 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   956 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   957 000001B6 C3                      BootReturn              ret                                                     ;return
   958                                  ;-----------------------------------------------------------------------------------------------------------------------
   959                                  ;
   960                                  ;       Constants
   961                                  ;
   962                                  ;-----------------------------------------------------------------------------------------------------------------------
   963 000001B7 90                                              align   2
   964 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   965 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   965 000001C3 4F4D               
   966 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   966 000001CE 530D0A00           
   967 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   967 000001DB 7220               
   968 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   969 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   969 000001E9 6700               
   970                                  ;-----------------------------------------------------------------------------------------------------------------------
   971                                  ;
   972                                  ;       Work Areas
   973                                  ;
   974                                  ;-----------------------------------------------------------------------------------------------------------------------
   975 000001EB 90                                              align   2
   976 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   977 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   978 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   979 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   980 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   981                                  wwReadCountCommand      equ     $                                               ;read count and command
   982 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   983 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   984                                  wwDriveHead             equ     $                                               ;drive, head (word)
   985 000001F8 00                      wbDrive                 db      0                                               ;drive
   986 000001F9 00                      wbHead                  db      0                                               ;head
   987                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   988 000001FA 00                                              db      0                                               ;sector
   989 000001FB 00                      wbTrack                 db      0                                               ;track
   990 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   991 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   992                                  %endif
   993                                  %ifdef BUILDPREP
   994                                  ;=======================================================================================================================
   995                                  ;
   996                                  ;       Diskette Preparation Code
   997                                  ;
   998                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   999                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1000                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1001                                  ;
  1002                                  ;=======================================================================================================================
  1003                                  ;
  1004                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1005                                  ;
  1006 00000200 BE[CA02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1007 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1008                                  ;
  1009                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1010                                  ;
  1011 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1012 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1013 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1014 0000020C FB                                              sti                                                     ;enable interrupts
  1015 0000020D F4                                              hlt                                                     ;wait for interrupt
  1016 0000020E EBF6                                            jmp     .10                                             ;repeat
  1017 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1018 00000212 7407                                            je      .30                                             ;yes, branch
  1019 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1020 00000216 75EE                                            jne     .10                                             ;no, repeat
  1021 00000218 E9A900                                          jmp     .120                                            ;yes, exit program
  1022                                  ;
  1023                                  ;       Display writing-sector message and patch the JMP instruction.
  1024                                  ;
  1025 0000021B BE[6E04]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1026 0000021E E889FF                                          call    BootPrint                                       ;display message
  1027 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1028 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1029 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1030                                  ;
  1031                                  ;       Try to read the boot sector.
  1032                                  ;
  1033 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1034 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1035 0000022D BB[760A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1036 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1037 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1038 00000236 B80102                                          mov     ax,0201h                                        ;read one sector
  1039 00000239 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1040 0000023B 59                                              pop     cx                                              ;restore remaining retries
  1041 0000023C 7307                                            jnc     .50                                             ;skip ahead if successful
  1042 0000023E E2EC                                            loop    .40                                             ;try again
  1043 00000240 BE[9E04]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1044 00000243 EB2C                                            jmp     .70                                             ;branch to error routine
  1045                                  ;
  1046                                  ;       Copy diskette parms from input buffer to output buffer.
  1047                                  ;
  1048 00000245 BE[760A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1049 00000248 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1050 0000024B BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1051 0000024E 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1052 00000251 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1053 00000254 FC                                              cld                                                     ;forward string copies
  1054 00000255 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1055                                  ;
  1056                                  ;       Try to write boot sector to diskette.
  1057                                  ;
  1058 00000257 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1059 0000025A 51                      .60                     push    cx                                              ;save remaining tries
  1060 0000025B BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1061 0000025E BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1062 00000261 B90100                                          mov     cx,1                                            ;track zero, sector one
  1063 00000264 B80103                                          mov     ax,0301h                                        ;write one sector
  1064 00000267 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1065 00000269 59                                              pop     cx                                              ;restore remaining retries
  1066 0000026A 7326                                            jnc     .100                                            ;skip ahead if successful
  1067 0000026C E2EC                                            loop    .60                                             ;try again
  1068 0000026E BE[EC04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1069                                  ;
  1070                                  ;       Convert the error code to ASCII and display the error message.
  1071                                  ;
  1072 00000271 50                      .70                     push    ax                                              ;save error code
  1073 00000272 88E0                                            mov     al,ah                                           ;copy error code
  1074 00000274 B400                                            mov     ah,0                                            ;AX = error code
  1075 00000276 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1076 00000278 F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1077 0000027A 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1078 0000027D 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1079 00000280 7203                                            jb      .80                                             ;yes, continue
  1080 00000282 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1081 00000285 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1082 00000287 7202                                            jb      .90                                             ;yes, continue
  1083 00000289 0407                                            add     al,7                                            ;no, make ASCII
  1084 0000028B 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1085 0000028E E819FF                                          call    BootPrint                                       ;write error message
  1086 00000291 58                                              pop     ax                                              ;restore error code
  1087                                  ;
  1088                                  ;       Display the completion message.
  1089                                  ;
  1090 00000292 BE[3805]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1091 00000295 88E0                                            mov     al,ah                                           ;BIOS return code
  1092 00000297 3C00                                            cmp     al,0                                            ;success?
  1093 00000299 7426                                            je      .110                                            ;yes, continue
  1094 0000029B BE[D705]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1095 0000029E 3C01                                            cmp     al,1                                            ;disk parameter error?
  1096 000002A0 741F                                            je      .110                                            ;yes, continue
  1097 000002A2 BE[A106]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1098 000002A5 3C02                                            cmp     al,2                                            ;address mark not found?
  1099 000002A7 7418                                            je      .110                                            ;yes, continue
  1100 000002A9 BE[2A07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1101 000002AC 3C03                                            cmp     al,3                                            ;protected disk?
  1102 000002AE 7411                                            je      .110                                            ;yes, continue
  1103 000002B0 BE[E407]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1104 000002B3 3C06                                            cmp     al,6                                            ;diskette removed?
  1105 000002B5 740A                                            je      .110                                            ;yes, continue
  1106 000002B7 BE[1409]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1107 000002BA 3C80                                            cmp     al,80H                                          ;drive timed out?
  1108 000002BC 7403                                            je      .110                                            ;yes, continue
  1109 000002BE BE[C509]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1110 000002C1 E8E6FE                  .110                    call    BootPrint                                       ;display result message
  1111 000002C4 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1112 000002C7 CD21                                            int     021h                                            ;terminate DOS program
  1113 000002C9 C3                                              ret                                                     ;return (should not execute)
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115                                  ;
  1116                                  ;       Diskette Preparation Messages
  1117                                  ;
  1118                                  ;-----------------------------------------------------------------------------------------------------------------------
  1119 000002CA 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1119 000002D3 5320426F6F742D4469-
  1119 000002DC 736B65747465205072-
  1119 000002E5 657061726174696F6E-
  1119 000002EE 2050726F6772616D   
  1120 000002F6 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1120 000002FF 687420284329203230-
  1120 00000308 31302D323031372044-
  1120 00000311 61766964204A2E2057-
  1120 0000031A 616C6C696E672E2041-
  1120 00000323 6C6C20726967687473-
  1120 0000032C 207265736572766564-
  1120 00000335 2E                 
  1121 00000336 0D0A                                            db      13,10
  1122 00000338 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1122 00000341 6F6772616D206F7665-
  1122 0000034A 727772697465732074-
  1122 00000353 686520626F6F742073-
  1122 0000035C 6563746F72206F6620-
  1122 00000365 61206469736B657474-
  1122 0000036E 652077697468207374-
  1122 00000377 617274757020636F64-
  1122 00000380 652074686174       
  1123 00000386 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1123 0000038F 616420746865206F70-
  1123 00000398 65726174696E672073-
  1123 000003A1 797374656D20696E74-
  1123 000003AA 6F206D656D6F727920-
  1123 000003B3 7768656E2074686520-
  1123 000003BC 636F6D707574657220-
  1123 000003C5 697320726573746172-
  1123 000003CE 7465642E           
  1124 000003D2 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1124 000003DB 6565642C20706C6163-
  1124 000003E4 65206120666F726D61-
  1124 000003ED 74746564206469736B-
  1124 000003F6 6574746520696E746F-
  1124 000003FF 20647269766520413A-
  1124 00000408 20616E642070726573-
  1124 00000411 732074686520456E74-
  1124 0000041A 6572206B65792E     
  1125 00000421 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1125 0000042A 20746869732070726F-
  1125 00000433 6772616D2077697468-
  1125 0000043C 6F7574207072657061-
  1125 00000445 72696E672061206469-
  1125 0000044E 736B657474652C2070-
  1125 00000457 726573732074686520-
  1125 00000460 457363617065206B65-
  1125 00000469 792E               
  1126 0000046B 0D0A00                                          db      13,10,0
  1127 0000046E 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1127 00000477 2074686520626F6F74-
  1127 00000480 20736563746F722074-
  1127 00000489 6F2074686520646973-
  1127 00000492 6B65747465202E2E2E 
  1128 0000049B 0D0A00                                          db      13,10,0
  1129 0000049E 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1129 000004A7 6F722D636F6465202E-
  1129 000004B0 2E2077617320726574-
  1129 000004B9 75726E65642066726F-
  1129 000004C2 6D207468652042494F-
  1129 000004CB 53207768696C652072-
  1129 000004D4 656164696E67206672-
  1129 000004DD 6F6D20746865206469-
  1129 000004E6 736B2E             
  1130 000004E9 0D0A00                                          db      13,10,0
  1131 000004EC 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1131 000004F5 6F722D636F6465202E-
  1131 000004FE 2E2077617320726574-
  1131 00000507 75726E65642066726F-
  1131 00000510 6D207468652042494F-
  1131 00000519 53207768696C652077-
  1131 00000522 726974696E6720746F-
  1131 0000052B 20746865206469736B-
  1131 00000534 2E                 
  1132 00000535 0D0A00                                          db      13,10,0
  1133 00000538 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1133 00000541 742D736563746F7220-
  1133 0000054A 776173207772697474-
  1133 00000553 656E20746F20746865-
  1133 0000055C 206469736B65747465-
  1133 00000565 2E204265666F726520-
  1133 0000056E 626F6F74696E672079-
  1133 00000577 6F757220636F6D7075-
  1133 00000580 7465722077697468   
  1134 00000588 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1134 00000591 736B657474652C206D-
  1134 0000059A 616B65207375726520-
  1134 000005A3 746861742074686520-
  1134 000005AC 66696C65204F532E43-
  1134 000005B5 4F4D20697320636F70-
  1134 000005BE 696564206F6E746F20-
  1134 000005C7 746865206469736B65-
  1134 000005D0 7474652E           
  1135 000005D4 0D0A00                                          db      13,10,0
  1136 000005D7 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1136 000005E0 76616C696420446973-
  1136 000005E9 6B20506172616D6574-
  1136 000005F2 6572               
  1137 000005F4 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1137 000005FD 20616E20696E746572-
  1137 00000606 6E616C206572726F72-
  1137 0000060F 206361757365642062-
  1137 00000618 7920616E20696E7661-
  1137 00000621 6C69642076616C7565-
  1137 0000062A 206265696E67207061-
  1137 00000633 7373656420746F2061-
  1137 0000063C 2073797374656D     
  1138 00000643 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1138 0000064C 6E2E20546865204F53-
  1138 00000655 424F4F542E434F4D20-
  1138 0000065E 66696C65206D617920-
  1138 00000667 626520636F72727570-
  1138 00000670 742E20436F7079206F-
  1138 00000679 7220646F776E6C6F61-
  1138 00000682 64207468652066696C-
  1138 0000068B 6520616761696E     
  1139 00000692 0D0A616E6420726574-                             db      13,10,"and retry."
  1139 0000069B 72792E             
  1140 0000069E 0D0A00                                          db      13,10,0
  1141 000006A1 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1141 000006AA 6472657373204D6172-
  1141 000006B3 6B204E6F7420466F75-
  1141 000006BC 6E64               
  1142 000006BE 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1142 000006C7 726F7220696E646963-
  1142 000006D0 617465732061207068-
  1142 000006D9 79736963616C207072-
  1142 000006E2 6F626C656D20776974-
  1142 000006EB 682074686520666C6F-
  1142 000006F4 707079206469736B65-
  1142 000006FD 7474652E20506C6561-
  1142 00000706 7365207265747279   
  1143 0000070E 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1143 00000717 6E6F74686572206469-
  1143 00000720 736B657474652E     
  1144 00000727 0D0A00                                          db      13,10,0
  1145 0000072A 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1145 00000733 6F7465637465642044-
  1145 0000073C 69736B             
  1146 0000073F 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1146 00000748 726F72206973207573-
  1146 00000751 75616C6C7920636175-
  1146 0000075A 736564206279206174-
  1146 00000763 74656D7074696E6720-
  1146 0000076C 746F20777269746520-
  1146 00000775 746F20612077726974-
  1146 0000077E 652D70726F74656374-
  1146 00000787 6564206469736B2E   
  1147 0000078F 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1147 00000798 686520277772697465-
  1147 000007A1 2D70726F7465637427-
  1147 000007AA 2073657474696E6720-
  1147 000007B3 6F6E20746865206469-
  1147 000007BC 736B206F7220726574-
  1147 000007C5 7279207573696E6720-
  1147 000007CE 7573696E6720616E6F-
  1147 000007D7 74686572206469736B-
  1147 000007E0 2E                 
  1148 000007E1 0D0A00                                          db      13,10,0
  1149 000007E4 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1149 000007ED 736B65747465205265-
  1149 000007F6 6D6F766564         
  1150 000007FB 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1150 00000804 726F72206D61792069-
  1150 0000080D 6E6469636174652074-
  1150 00000816 686174207468652066-
  1150 0000081F 6C6F70707920646973-
  1150 00000828 6B6574746520686173-
  1150 00000831 206265656E2072656D-
  1150 0000083A 6F7665642066726F6D-
  1150 00000843 20746865           
  1151 00000847 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1151 00000850 652064726976652E20-
  1151 00000859 4F6E20736F6D652073-
  1151 00000862 797374656D732C2074-
  1151 0000086B 68697320636F646520-
  1151 00000874 6D617920616C736F20-
  1151 0000087D 6F6363757220696620-
  1151 00000886 746865206469736B65-
  1151 0000088F 747465206973       
  1152 00000895 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1152 0000089E 70726F746563746564-
  1152 000008A7 2E2720506C65617365-
  1152 000008B0 207665726966792074-
  1152 000008B9 686174207468652064-
  1152 000008C2 69736B657474652069-
  1152 000008CB 73206E6F7420777269-
  1152 000008D4 74652D70726F746563-
  1152 000008DD 74656420616E64     
  1153 000008E4 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1153 000008ED 65726C7920696E7365-
  1153 000008F6 7274656420696E2074-
  1153 000008FF 6865206469736B6574-
  1153 00000908 74652064726976652E 
  1154 00000911 0D0A00                                          db      13,10,0
  1155 00000914 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1155 0000091D 6976652054696D6564-
  1155 00000926 204F7574           
  1156 0000092A 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1156 00000933 726F7220757375616C-
  1156 0000093C 6C7920696E64696361-
  1156 00000945 746573207468617420-
  1156 0000094E 6E6F206469736B6574-
  1156 00000957 746520697320696E20-
  1156 00000960 746865206469736B65-
  1156 00000969 747465206472697665-
  1156 00000972 2E20506C65617365   
  1157 0000097A 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1157 00000983 726520746861742074-
  1157 0000098C 6865206469736B6574-
  1157 00000995 74652069732070726F-
  1157 0000099E 7065726C7920736561-
  1157 000009A7 74656420696E207468-
  1157 000009B0 652064726976652061-
  1157 000009B9 6E642072657472792E 
  1158 000009C2 0D0A00                                          db      13,10,0
  1159 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1159 000009CE 6B6E6F776E20457272-
  1159 000009D7 6F72               
  1160 000009D9 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1160 000009E2 6F722D636F64652072-
  1160 000009EB 657475726E65642062-
  1160 000009F4 79207468652042494F-
  1160 000009FD 53206973206E6F7420-
  1160 00000A06 61207265636F676E69-
  1160 00000A0F 7A6564206572726F72-
  1160 00000A18 2E20506C6561736520-
  1160 00000A21 636F6E73756C74     
  1161 00000A28 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1161 00000A31 6D7075746572277320-
  1161 00000A3A 746563686E6963616C-
  1161 00000A43 207265666572656E63-
  1161 00000A4C 6520666F7220612064-
  1161 00000A55 65736372697074696F-
  1161 00000A5E 6E206F662074686973-
  1161 00000A67 206572726F7220636F-
  1161 00000A70 64652E             
  1162 00000A73 0D0A00                                          db      13,10,0
  1163                                  wcPrepInBuf             equ     $
  1164                                  %endif
  1165                                  %ifdef BUILDDISK
  1166                                  ;=======================================================================================================================
  1167                                  ;
  1168                                  ;       File Allocation Tables
  1169                                  ;
  1170                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1171                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1172                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1173                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1174                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1175                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1176                                  ;       the last cluster in the chain.
  1177                                  ;
  1178                                  ;       Every three bytes encode two FAT entries as follows:
  1179                                  ;
  1180                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1181                                  ;
  1182                                  ;=======================================================================================================================
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  ;
  1185                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1186                                  ;
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  section                 fat1                                                    ;first copy of FAT
  1189                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1190                                                          db      005h,060h,000h, 007h,080h,000h
  1191                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1192                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1193                                                          db      011h,020h,001h, 013h,040h,001h
  1194                                                          db      015h,060h,001h, 017h,080h,001h
  1195                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1196                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1197                                                          db      021h,020h,002h, 023h,040h,002h
  1198                                                          db      025h,060h,002h, 027h,080h,002h
  1199                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1200                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1201                                  ;-----------------------------------------------------------------------------------------------------------------------
  1202                                  ;
  1203                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1204                                  ;
  1205                                  ;-----------------------------------------------------------------------------------------------------------------------
  1206                                  section                 fat2                                                    ;second copy of FAT
  1207                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1208                                                          db      005h,060h,000h, 007h,080h,000h
  1209                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1210                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1211                                                          db      011h,020h,001h, 013h,040h,001h
  1212                                                          db      015h,060h,001h, 017h,080h,001h
  1213                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1214                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1215                                                          db      021h,020h,002h, 023h,040h,002h
  1216                                                          db      025h,060h,002h, 027h,080h,002h
  1217                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1218                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1219                                  ;-----------------------------------------------------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1222                                  ;
  1223                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1224                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1225                                  ;       copy.
  1226                                  ;
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  section                 dir                                                     ;diskette directory
  1229                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1230                                                          db      020h                                            ;attribute (archive bit set)
  1231                                                          times   10 db 0                                         ;unused
  1232                                                          dw      0h                                              ;time
  1233                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1234                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1235                                                          dw      2                                               ;first cluster
  1236                                                          dd      05400h                                          ;file size
  1237                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1238                                  %endif
  1239                                  %ifdef BUILDCOM
  1240                                  ;=======================================================================================================================
  1241                                  ;
  1242                                  ;       OS.COM
  1243                                  ;
  1244                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1245                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1246                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1247                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1248                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1249                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1250                                  ;
  1251                                  ;       Our loader addressability is set up according to the following diagram.
  1252                                  ;
  1253                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1254                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1255                                  ;                               |  256 = 100h bytes                             |
  1256                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1257                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1258                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1259                                  ;                       007e00  +-----------------------------------------------+
  1260                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1261                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1262                                  ;                               |                                               |
  1263                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1264                                  ;                               |                                               |
  1265                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1266                                  ;                               |  Loader Code                                  |
  1267                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1268                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1269                                  ;
  1270                                  ;=======================================================================================================================
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272                                  ;
  1273                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1274                                  ;
  1275                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1276                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1277                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1278                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1279                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1280                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1281                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1282                                  ;       registers.
  1283                                  ;
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                                          cpu     8086                                            ;assume minimal CPU
  1286                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1287                                                          bits    16                                              ;this is 16-bit code
  1288                                  Loader                  push    cs                                              ;use the code segment
  1289                                                          pop     ds                                              ;...as our data segment
  1290                                                          push    cs                                              ;use the code segment
  1291                                                          pop     es                                              ;...as our extra segment
  1292                                  ;
  1293                                  ;       Write a message to the console so we know we have our addressability established.
  1294                                  ;
  1295                                                          mov     si,czStartingMsg                                ;starting message
  1296                                                          call    PutTTYString                                    ;display loader message
  1297                                  ;
  1298                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1299                                  ;
  1300                                                          call    GetCPUType                                      ;AL = cpu type
  1301                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1302                                                          cmp     al,3                                            ;80386+?
  1303                                                          jb      LoaderExit                                      ;no, exit with error message
  1304                                                          cpu     386                                             ;allow 80386 instructions
  1305                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1306                                                          call    PutTTYString                                    ;display message
  1307                                  ;
  1308                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1309                                  ;
  1310                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1311                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1312                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1313                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1314                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1315                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1316                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1317                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1318                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1319                                                          call    PutTTYString                                    ;display message
  1320                                  ;
  1321                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1322                                  ;
  1323                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1324                                                          pop     es                                              ;... as target segment
  1325                                                          xor     di,di                                           ;ES:DI = target address
  1326                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1327                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1328                                                          cld                                                     ;forward strings
  1329                                                          rep     movsb                                           ;copy kernel image
  1330                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1331                                                          call    PutTTYString                                    ;display message
  1332                                  ;
  1333                                  ;       Switch to protected mode.
  1334                                  ;
  1335                                                          xor     si,si                                           ;ES:SI = gdt addr
  1336                                                          mov     ss,si                                           ;protected mode ss
  1337                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1338                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1339                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1340                                                          mov     dx,001Fh                                        ;outer delay loop count
  1341                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1342                                                          loop    $                                               ;wait out pending interrupts
  1343                                                          dec     dx                                              ;restore outer loop count
  1344                                                          jnz     .10                                             ;continue outer loop
  1345                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1346                                  ;
  1347                                  ;       Enable hardware and maskable interrupts.
  1348                                  ;
  1349                                                          xor     al,al                                           ;enable all registers code
  1350                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1351                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1352                                                          sti                                                     ;enable maskable interrupts
  1353                                  ;
  1354                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1355                                  ;
  1356                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1357                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1358                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;       Routine:        LoaderExit
  1362                                  ;
  1363                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1364                                  ;
  1365                                  ;       In:             DS:SI   string address
  1366                                  ;
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  LoaderExit              call    PutTTYString                                    ;display error message
  1369                                  ;
  1370                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1371                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1372                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1373                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1374                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1375                                  ;
  1376                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1377                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1378                                                          jnz     .40                                             ;exit if key pressed
  1379                                                          sti                                                     ;enable maskable interrupts
  1380                                                          hlt                                                     ;wait for interrupt
  1381                                                          jmp     .30                                             ;repeat until keypress
  1382                                  ;
  1383                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1384                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1385                                  ;       HLT until the system resets.
  1386                                  ;
  1387                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1388                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1389                                  .50                     sti                                                     ;enable maskable interrupts
  1390                                                          hlt                                                     ;stop until reset, int, nmi
  1391                                                          jmp     .50                                             ;loop until restart kicks in
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  ;
  1394                                  ;       Routine:        GetCPUType
  1395                                  ;
  1396                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1397                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1398                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1399                                  ;
  1400                                  ;       Out:            AX      0 = 808x, v20, etc.
  1401                                  ;                               1 = 80186
  1402                                  ;                               2 = 80286
  1403                                  ;                               3 = 80386
  1404                                  ;
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406                                  GetCPUType              mov     al,1                                            ;AL = 1
  1407                                                          mov     cl,32                                           ;shift count
  1408                                                          shr     al,cl                                           ;try a 32-bit shift
  1409                                                          or      al,al                                           ;did the shift happen?
  1410                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1411                                                          cpu     186
  1412                                                          push    sp                                              ;save stack pointer
  1413                                                          pop     cx                                              ;...into cx
  1414                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1415                                                          jne     .10                                             ;yes, cpu is 80186
  1416                                                          cpu     286
  1417                                                          inc     ax                                              ;AX = 2
  1418                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1419                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1420                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1421                                                          jz      .10                                             ;yes, cpu is 80286
  1422                                                          inc     ax                                              ;AX = 3
  1423                                  .10                     ret                                                     ;return
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                  ;
  1426                                  ;       Routine:        PutTTYString
  1427                                  ;
  1428                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1429                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1430                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1431                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1432                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1433                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1434                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1435                                  ;                       to LODSB is not needed.
  1436                                  ;
  1437                                  ;       In:             DS:SI   address of string
  1438                                  ;
  1439                                  ;       Out:            DF      0
  1440                                  ;                       ZF      1
  1441                                  ;                       AL      0
  1442                                  ;
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  PutTTYString            cld                                                     ;forward strings
  1445                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1446                                                          test    al,al                                           ;end of string?
  1447                                                          jz      .20                                             ;... yes, exit our loop
  1448                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1449                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1450                                                          jmp     .10                                             ;repeat until done
  1451                                  .20                     ret                                                     ;return
  1452                                  ;-----------------------------------------------------------------------------------------------------------------------
  1453                                  ;
  1454                                  ;       Loader Data
  1455                                  ;
  1456                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1457                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1458                                  ;
  1459                                  ;-----------------------------------------------------------------------------------------------------------------------
  1460                                                          align   2
  1461                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1462                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1463                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1464                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1465                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1466                                                          db      "Please press any key to restart the computer.",13,10,0
  1467                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1468                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1469                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1470                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1471                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1472                                  ;=======================================================================================================================
  1473                                  ;
  1474                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1475                                  ;
  1476                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1477                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1478                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1479                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1480                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1481                                  ;
  1482                                  ;=======================================================================================================================
  1483                                  ;=======================================================================================================================
  1484                                  ;
  1485                                  ;       Kernel Tables
  1486                                  ;
  1487                                  ;=======================================================================================================================
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1491                                  ;
  1492                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1493                                  ;       first descriptor must be all nulls.
  1494                                  ;
  1495                                  ;       6   5         4         3         2         1         0
  1496                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1497                                  ;       ----------------------------------------------------------------
  1498                                  ;       h......hffffmmmma......ab......................bn..............n
  1499                                  ;       00000000                        all areas have base addresses below 2^24
  1500                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1501                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1502                                  ;                   1001                present, ring-0, selector
  1503                                  ;
  1504                                  ;       h...h   hi-order base address (bits 24-31)
  1505                                  ;       ffff    flags
  1506                                  ;       mmmm    hi-order limit (bits 16-19)
  1507                                  ;       a...a   access
  1508                                  ;       b...b   lo-order base address (bits 0-23)
  1509                                  ;       n...n   lo-order limit (bits 0-15)
  1510                                  ;
  1511                                  ;-----------------------------------------------------------------------------------------------------------------------
  1512                                  section                 gdt                                                     ;global descriptor table
  1513                                                          dq      0000000000000000h                               ;00 required null selector
  1514                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1515                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1516                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1517                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1518                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1519                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1520                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1521                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1522                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1523                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1524                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1525                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1526                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1527                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                  ;
  1530                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1531                                  ;
  1532                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1533                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1534                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1535                                  ;
  1536                                  ;       6   5         4         3         2         1         0
  1537                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1538                                  ;       ----------------------------------------------------------------
  1539                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1540                                  ;
  1541                                  ;       h...h   high-order offset (bits 16-31)
  1542                                  ;       P       present (0=unused interrupt)
  1543                                  ;       zz      descriptor privilege level
  1544                                  ;       S       storage segment (must be zero for IDT)
  1545                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1546                                  ;       S...S   handling code selector in GDT
  1547                                  ;       l...l   lo-order offset (bits 0-15)
  1548                                  ;
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  section                 idt                                                     ;interrupt descriptor table
  1551                                                          mint    dividebyzero                                    ;00 divide by zero
  1552                                                          mint    singlestep                                      ;01 single step
  1553                                                          mint    nmi                                             ;02 non-maskable
  1554                                                          mint    break                                           ;03 break
  1555                                                          mint    into                                            ;04 into
  1556                                                          mint    bounds                                          ;05 bounds
  1557                                                          mint    badopcode                                       ;06 bad op code
  1558                                                          mint    nocoproc                                        ;07 no coprocessor
  1559                                                          mint    doublefault                                     ;08 double-fault
  1560                                                          mint    operand                                         ;09 operand
  1561                                                          mint    badtss                                          ;0a bad TSS
  1562                                                          mint    notpresent                                      ;0b not-present
  1563                                                          mint    stacklimit                                      ;0c stack limit
  1564                                                          mint    protection                                      ;0d general protection fault
  1565                                                          mint    int14                                           ;0e (reserved)
  1566                                                          mint    int15                                           ;0f (reserved)
  1567                                                          mint    coproccalc                                      ;10 (reserved)
  1568                                                          mint    int17                                           ;11 (reserved)
  1569                                                          mint    int18                                           ;12 (reserved)
  1570                                                          mint    int19                                           ;13 (reserved)
  1571                                                          mint    int20                                           ;14 (reserved)
  1572                                                          mint    int21                                           ;15 (reserved)
  1573                                                          mint    int22                                           ;16 (reserved)
  1574                                                          mint    int23                                           ;17 (reserved)
  1575                                                          mint    int24                                           ;18 (reserved)
  1576                                                          mint    int25                                           ;19 (reserved)
  1577                                                          mint    int26                                           ;1a (reserved)
  1578                                                          mint    int27                                           ;1b (reserved)
  1579                                                          mint    int28                                           ;1c (reserved)
  1580                                                          mint    int29                                           ;1d (reserved)
  1581                                                          mint    int30                                           ;1e (reserved)
  1582                                                          mint    int31                                           ;1f (reserved)
  1583                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1584                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1585                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1586                                                          mtrap   com2                                            ;23 IRQ3 com2
  1587                                                          mtrap   com1                                            ;24 IRQ4 com1
  1588                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1589                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1590                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1591                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1592                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1593                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1594                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1595                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1596                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1597                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1598                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1599                                                          mtrap   svc                                             ;30 OS services
  1600                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1601                                  ;=======================================================================================================================
  1602                                  ;
  1603                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1604                                  ;
  1605                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1606                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1607                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1608                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1609                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1610                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1611                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1612                                  ;
  1613                                  ;=======================================================================================================================
  1614                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1615                                                          cpu     386                                             ;allow 80386 instructions
  1616                                                          bits    32                                              ;this is 32-bit code
  1617                                  ;=======================================================================================================================
  1618                                  ;
  1619                                  ;       CPU Interrupt Handlers
  1620                                  ;
  1621                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1622                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1623                                  ;
  1624                                  ;=======================================================================================================================
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT0    Divide By Zero
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  dividebyzero                                    ;divide by zero
  1631                                                          push    0                                               ;store interrupt nbr
  1632                                                          push    czIntDivideByZero                               ;store message offset
  1633                                                          jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT1    Single Step
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  singlestep                                      ;single step
  1640                                                          push    1                                               ;store interrupt nbr
  1641                                                          push    czIntSingleStep                                 ;store message offset
  1642                                                          jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT2    Non-Maskable Interrupt
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  nmi                                             ;non-maskable
  1649                                                          push    2                                               ;store interrupt nbr
  1650                                                          push    czIntNonMaskable                                ;store message offset
  1651                                                          jmp     ReportInterrupt                                 ;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;       INT3    Break
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                                          menter  break                                           ;break
  1658                                                          push    3                                               ;store interrupt nbr
  1659                                                          push    czIntBreak                                      ;store message offset
  1660                                                          jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT4    Into
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  into                                            ;into
  1667                                                          push    4                                               ;store interrupt nbr
  1668                                                          push    czIntInto                                       ;store message offset
  1669                                                          jmp     ReportInterrupt                                 ;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;       INT5    Bounds
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                                          menter  bounds                                          ;bounds
  1676                                                          push    5                                               ;store interrupt nbr
  1677                                                          push    czIntBounds                                     ;store message offset
  1678                                                          jmp     ReportInterrupt                                 ;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;       INT6    Bad Operation Code
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                                          menter  badopcode                                       ;bad opcode interrupt
  1685                                                          push    6                                               ;store interrupt nbr
  1686                                                          push    czIntBadOpCode                                  ;store message offset
  1687                                                          jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT7    No Coprocessor
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1694                                                          push    7                                               ;store interrupt nbr
  1695                                                          push    czIntNoCoprocessor                              ;store message offset
  1696                                                          jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT8    Double Fault
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  doublefault                                     ;doublefault interrupt
  1703                                                          push    8                                               ;store interrupt nbr
  1704                                                          push    czIntDoubleFault                                ;store message offset
  1705                                                          jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT9    Operand
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  operand                                         ;operand interrupt
  1712                                                          push    9                                               ;store interrupt nbr
  1713                                                          push    czIntOperand                                    ;store message offset
  1714                                                          jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT10   Bad Task State Segment
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  badtss                                          ;bad TSS interrupt
  1721                                                          push    10                                              ;store interrupt nbr
  1722                                                          push    czIntBadTSS                                     ;store message offset
  1723                                                          jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT11   Not Present
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  notpresent                                      ;not present interrupt
  1730                                                          push    11                                              ;store interrupt nbr
  1731                                                          push    czIntNotPresent                                 ;store message offset
  1732                                                          jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT12   Stack Limit
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  stacklimit                                      ;stack limit interrupt
  1739                                                          push    12                                              ;store interrupt nbr
  1740                                                          push    czIntStackLimit                                 ;store message offset
  1741                                                          jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT13   General Protection Fault
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  protection                                      ;protection fault interrupt
  1748                                                          push    13                                              ;store interrupt nbr
  1749                                                          push    czIntProtection                                 ;store message offset
  1750                                                          jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT14   Reserved
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  int14                                           ;(reserved)
  1757                                                          push    14                                              ;store interrupt nbr
  1758                                                          push    czIntReserved                                   ;store message offset
  1759                                                          jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT15   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int15                                           ;(reserved)
  1766                                                          push    15                                              ;store interrupt nbr
  1767                                                          push    czIntReserved                                   ;store message offset
  1768                                                          jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT16   Coprocessor Calculation
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  coproccalc                                      ;coprocessor calculation
  1775                                                          push    16                                              ;store interrupt nbr
  1776                                                          push    czIntCoprocessorCalc                            ;store message offset
  1777                                                          jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT17   Reserved
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  int17                                           ;(reserved)
  1784                                                          push    17                                              ;store interrupt nbr
  1785                                                          push    czIntReserved                                   ;store message offset
  1786                                                          jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT18   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int18                                           ;(reserved)
  1793                                                          push    18                                              ;store interrupt nbr
  1794                                                          push    czIntReserved                                   ;store message offset
  1795                                                          jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT19   Reserved
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  int19                                           ;(reserved)
  1802                                                          push    19                                              ;store interrupt nbr
  1803                                                          push    czIntReserved                                   ;store message offset
  1804                                                          jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT20   Reserved
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  int20                                           ;(reserved)
  1811                                                          push    20                                              ;store interrupt nbr
  1812                                                          push    czIntReserved                                   ;store message offset
  1813                                                          jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT21   Reserved
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  int21                                           ;(reserved)
  1820                                                          push    21                                              ;store interrupt nbr
  1821                                                          push    czIntReserved                                   ;store message offset
  1822                                                          jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT22   Reserved
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  int22                                           ;(reserved)
  1829                                                          push    22                                              ;store interrupt nbr
  1830                                                          push    czIntReserved                                   ;store message offset
  1831                                                          jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT23   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int23                                           ;(reserved)
  1838                                                          push    23                                              ;store interrupt nbr
  1839                                                          push    czIntReserved                                   ;store message offset
  1840                                                          jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT24   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int24                                           ;(reserved)
  1847                                                          push    24                                              ;store interrupt nbr
  1848                                                          push    czIntReserved                                   ;store message offset
  1849                                                          jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT25   Reserved
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  int25                                           ;(reserved)
  1856                                                          push    25                                              ;store interrupt nbr
  1857                                                          push    czIntReserved                                   ;store message offset
  1858                                                          jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT26   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int26                                           ;(reserved)
  1865                                                          push    26                                              ;store interrupt nbr
  1866                                                          push    czIntReserved                                   ;store message offset
  1867                                                          jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT27   Reserved
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  int27                                           ;(reserved)
  1874                                                          push    27                                              ;store interrupt nbr
  1875                                                          push    czIntReserved                                   ;store message offset
  1876                                                          jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT28   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int28                                           ;(reserved)
  1883                                                          push    28                                              ;store interrupt nbr
  1884                                                          push    czIntReserved                                   ;store message offset
  1885                                                          jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT29   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int29                                           ;(reserved)
  1892                                                          push    29                                              ;store interrupt nbr
  1893                                                          push    czIntReserved                                   ;store message offset
  1894                                                          jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       INT30   Reserved
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                                          menter  int30                                           ;(reserved)
  1901                                                          push    30                                              ;store interrupt nbr
  1902                                                          push    czIntReserved                                   ;store message offset
  1903                                                          jmp     ReportInterrupt                                 ;report interrupt
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;       INT31   Reserved
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                                          menter  int31                                           ;(reserved)
  1910                                                          push    31                                              ;store interrupt nbr
  1911                                                          push    czIntReserved                                   ;store message offset
  1912                                                          jmp     ReportInterrupt                                 ;report interrupt
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       Routine:        ReportInterrupt
  1916                                  ;
  1917                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1918                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1919                                  ;
  1920                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1921                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1922                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1923                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1924                                  ;                       [esp+0]         error message address                   stored by push instructions
  1925                                  ;
  1926                                  ;       Out:            N/A             This routine does not exit.
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1930                                                          push    es                                              ;save ES at time of interrupt
  1931                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1932                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1933                                  ;
  1934                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1935                                  ;
  1936                                  ;                       [ebp+56]        eflags
  1937                                  ;                       [ebp+52]        cs
  1938                                  ;                       [ebp+48]        eip
  1939                                  ;                       [ebp+44]        interrupt number (0-31)
  1940                                  ;                       [ebp+40]        error message address
  1941                                  ;                       [ebp+36]        ds
  1942                                  ;                       [ebp+32]        es
  1943                                  ;                       [ebp+28]        eax
  1944                                  ;                       [ebp+24]        ecx
  1945                                  ;                       [ebp+20]        edx
  1946                                  ;                       [ebp+16]        ebx
  1947                                  ;                       [ebp+12]        esp
  1948                                  ;                       [ebp+8]         ebp
  1949                                  ;                       [ebp+4]         esi
  1950                                  ;                       [ebp+0]         edi
  1951                                  ;
  1952                                                          push    cs                                              ;load code selector ...
  1953                                                          pop     ds                                              ;... into DS
  1954                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1955                                                          pop     es                                              ;... into ES
  1956                                  ;
  1957                                  ;       Display the interrupt report boundary box
  1958                                  ;
  1959                                                          mov     cl,13                                           ;column
  1960                                                          mov     ch,6                                            ;row
  1961                                                          mov     dl,50                                           ;width
  1962                                                          mov     dh,8                                            ;height
  1963                                                          mov     bh,07h                                          ;attribute
  1964                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1965                                  ;
  1966                                  ;       Display the report header
  1967                                  ;
  1968                                                          mov     cl,15                                           ;column
  1969                                                          mov     ch,7                                            ;row
  1970                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1971                                                          call    SetConsoleString                                ;draw text string
  1972                                  ;
  1973                                  ;       Display the interrupt description label
  1974                                  ;
  1975                                                          mov     cl,15                                           ;column
  1976                                                          mov     ch,8                                            ;row
  1977                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1978                                                          call    SetConsoleString                                ;draw text string
  1979                                  ;
  1980                                  ;       Display the interrupt number
  1981                                  ;
  1982                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1983                                                          mov     cl,26                                           ;column
  1984                                                          mov     ch,8                                            ;row
  1985                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1986                                  ;
  1987                                  ;       Display the interrupt name
  1988                                  ;
  1989                                                          mov     cl,29                                           ;column
  1990                                                          mov     ch,8                                            ;row
  1991                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1992                                                          call    SetConsoleString                                ;display interrupt description
  1993                                  ;
  1994                                  ;       Display the register values header
  1995                                  ;
  1996                                                          mov     cl,15                                           ;column
  1997                                                          mov     ch,10                                           ;row
  1998                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1999                                                          call    SetConsoleString                                ;draw text string
  2000                                  ;
  2001                                  ;       Display the EAX register label and value
  2002                                  ;
  2003                                                          mov     cl,15                                           ;column
  2004                                                          mov     ch,11                                           ;row
  2005                                                          mov     esi,czIntEAX                                    ;register EAX label
  2006                                                          call    SetConsoleString                                ;draw label
  2007                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2008                                                          mov     cl,19                                           ;column
  2009                                                          mov     ch,11                                           ;row
  2010                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2011                                  ;
  2012                                  ;       Display the ECX register label and value
  2013                                  ;
  2014                                                          mov     cl,15                                           ;column
  2015                                                          mov     ch,12                                           ;row
  2016                                                          mov     esi,czIntECX                                    ;label
  2017                                                          call    SetConsoleString                                ;draw label
  2018                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2019                                                          mov     cl,19                                           ;column
  2020                                                          mov     ch,12                                           ;row
  2021                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2022                                  ;
  2023                                  ;       Display the EDX register label and value
  2024                                  ;
  2025                                                          mov     cl,15                                           ;column
  2026                                                          mov     ch,13                                           ;row
  2027                                                          mov     esi,czIntEDX                                    ;label
  2028                                                          call    SetConsoleString                                ;draw label
  2029                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2030                                                          mov     cl,19                                           ;column
  2031                                                          mov     ch,13                                           ;row
  2032                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2033                                  ;
  2034                                  ;       Display the EBX register label and value
  2035                                  ;
  2036                                                          mov     cl,15                                           ;column
  2037                                                          mov     ch,14                                           ;row
  2038                                                          mov     esi,czIntEBX                                    ;label
  2039                                                          call    SetConsoleString                                ;draw label
  2040                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2041                                                          mov     cl,19                                           ;column
  2042                                                          mov     ch,14                                           ;row
  2043                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2044                                  ;
  2045                                  ;       Display the ESI register label and value
  2046                                  ;
  2047                                                          mov     cl,29                                           ;column
  2048                                                          mov     ch,11                                           ;row
  2049                                                          mov     esi,czIntESI                                    ;label
  2050                                                          call    SetConsoleString                                ;draw label
  2051                                                          mov     eax,[ebp+4]                                     ;ESI
  2052                                                          mov     cl,33                                           ;column
  2053                                                          mov     ch,11                                           ;row
  2054                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2055                                  ;
  2056                                  ;       Display the EDI register label and value
  2057                                  ;
  2058                                                          mov     cl,29                                           ;column
  2059                                                          mov     ch,12                                           ;row
  2060                                                          mov     esi,czIntEDI                                    ;label
  2061                                                          call    SetConsoleString                                ;draw label
  2062                                                          mov     eax,[ebp+0]                                     ;EDI
  2063                                                          mov     cl,33                                           ;column
  2064                                                          mov     ch,12                                           ;row
  2065                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2066                                  ;
  2067                                  ;       Display the EBP register label and value
  2068                                  ;
  2069                                                          mov     cl,29                                           ;column
  2070                                                          mov     ch,13                                           ;row
  2071                                                          mov     esi,czIntEBP                                    ;label
  2072                                                          call    SetConsoleString                                ;draw label
  2073                                                          mov     eax,[ebp+8]                                     ;EBP
  2074                                                          mov     cl,33                                           ;column
  2075                                                          mov     ch,13                                           ;row
  2076                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2077                                  ;
  2078                                  ;       Display the DS register label and value
  2079                                  ;
  2080                                                          mov     cl,42                                           ;column
  2081                                                          mov     ch,11                                           ;row
  2082                                                          mov     esi,czIntDS                                     ;label
  2083                                                          call    SetConsoleString                                ;draw label
  2084                                                          xor     eax,eax                                         ;zero register
  2085                                                          mov     ax,[ebp+36]                                     ;DS
  2086                                                          mov     cl,46                                           ;column
  2087                                                          mov     ch,11                                           ;row
  2088                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2089                                  ;
  2090                                  ;       Display the ES register label and value
  2091                                  ;
  2092                                                          mov     cl,42                                           ;column
  2093                                                          mov     ch,12                                           ;row
  2094                                                          mov     esi,czIntES                                     ;label
  2095                                                          call    SetConsoleString                                ;draw label
  2096                                                          xor     eax,eax                                         ;zero register
  2097                                                          mov     ax,[ebp+32]                                     ;ES
  2098                                                          mov     cl,46                                           ;column
  2099                                                          mov     ch,12                                           ;row
  2100                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2101                                  ;
  2102                                  ;       Display the SS register label and value
  2103                                  ;
  2104                                                          mov     cl,42                                           ;column
  2105                                                          mov     ch,13                                           ;row
  2106                                                          mov     esi,czIntSS                                     ;label
  2107                                                          call    SetConsoleString                                ;draw label
  2108                                                          xor     eax,eax                                         ;zero register
  2109                                                          mov     ax,ss                                           ;SS
  2110                                                          mov     cl,46                                           ;column
  2111                                                          mov     ch,13                                           ;row
  2112                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2113                                  ;
  2114                                  ;       Display the CS register lable and value
  2115                                  ;
  2116                                                          mov     cl,42                                           ;column
  2117                                                          mov     ch,14                                           ;row
  2118                                                          mov     esi,czIntCS                                     ;label
  2119                                                          call    SetConsoleString                                ;draw label
  2120                                                          xor     eax,eax                                         ;zero register
  2121                                                          mov     ax,[ebp+52]                                     ;CS
  2122                                                          mov     cl,46                                           ;column
  2123                                                          mov     ch,14                                           ;row
  2124                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2125                                  ;
  2126                                  ;       Display the EFLAGS register label and value
  2127                                  ;
  2128                                                          mov     cl,51                                           ;column
  2129                                                          mov     ch,11                                           ;row
  2130                                                          mov     esi,czIntEFLAGS                                 ;label
  2131                                                          call    SetConsoleString                                ;draw label
  2132                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2133                                                          mov     cl,55                                           ;column
  2134                                                          mov     ch,11                                           ;row
  2135                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2136                                  ;
  2137                                  ;       Display the ESP register label and value
  2138                                  ;
  2139                                                          mov     cl,51                                           ;column
  2140                                                          mov     ch,13                                           ;row
  2141                                                          mov     esi,czIntESP                                    ;label
  2142                                                          call    SetConsoleString                                ;draw label
  2143                                                          mov     eax,[ebp+12]                                    ;ESP
  2144                                                          mov     cl,55                                           ;column
  2145                                                          mov     ch,13                                           ;row
  2146                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2147                                  ;
  2148                                  ;       Display the EIP register label and value
  2149                                  ;
  2150                                                          mov     cl,51                                           ;column
  2151                                                          mov     ch,14                                           ;row
  2152                                                          mov     esi,czIntEIP                                    ;label
  2153                                                          call    SetConsoleString                                ;draw label
  2154                                                          mov     eax,[ebp+48]                                    ;EIP
  2155                                                          mov     cl,55                                           ;column
  2156                                                          mov     ch,14                                           ;row
  2157                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2158                                  ;
  2159                                  ;       Halt and loop until reset
  2160                                  ;
  2161                                  .10                     sti                                                     ;enable maskable interrupts
  2162                                                          hlt                                                     ;halt processor
  2163                                                          jmp     .10                                             ;resume on interrupt
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  ;
  2166                                  ;       Processor Interrupt Name Strings
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                  czIntDivideByZero       db      "Division by zero",0
  2170                                  czIntSingleStep         db      "Single step",0
  2171                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2172                                  czIntBreak              db      "Break",0
  2173                                  czIntInto               db      "Into",0
  2174                                  czIntBounds             db      "Bounds",0
  2175                                  czIntBadOpCode          db      "Bad Operation Code",0
  2176                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2177                                  czIntDoubleFault        db      "Double Fault",0
  2178                                  czIntOperand            db      "Operand",0
  2179                                  czIntBadTSS             db      "Bad Task State Segment",0
  2180                                  czIntNotPresent         db      "Not Present",0
  2181                                  czIntStackLimit         db      "Stack Limit",0
  2182                                  czIntProtection         db      "General Protection Fault",0
  2183                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2184                                  czIntReserved           db      "Reserved",0
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  ;
  2187                                  ;       Processor Interrupt Handling Strings
  2188                                  ;
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2191                                  czIntLabel              db      "Interrupt #",0
  2192                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2193                                  czIntEAX                db      "EAX:",0
  2194                                  czIntECX                db      "ECX:",0
  2195                                  czIntEDX                db      "EDX:",0
  2196                                  czIntEBX                db      "EBX:",0
  2197                                  czIntESI                db      "ESI:",0
  2198                                  czIntEDI                db      "EDI:",0
  2199                                  czIntEBP                db      "EBP:",0
  2200                                  czIntESP                db      "ESP:",0
  2201                                  czIntDS                 db      " DS:",0
  2202                                  czIntES                 db      " ES:",0
  2203                                  czIntSS                 db      " SS:",0
  2204                                  czIntCS                 db      " CS:",0
  2205                                  czIntEFLAGS             db      "FLG:",0
  2206                                  czIntEIP                db      "EIP:",0
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  ;
  2209                                  ;       Routine:        DrawTextDialogBox
  2210                                  ;
  2211                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2212                                  ;
  2213                                  ;       In:             CL      upper left column (0-79)
  2214                                  ;                       CH      upper left row (0-24)
  2215                                  ;                       DL      column width, excluding border
  2216                                  ;                       DH      row height, excluding border
  2217                                  ;                       BH      color attribute
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2221                                                          push    esi                                             ;
  2222                                                          push    edi                                             ;
  2223                                                          push    es                                              ;
  2224                                                          push    EGDTCGA                                         ;load CGA selector ...
  2225                                                          pop     es                                              ;... into ES
  2226                                  ;
  2227                                  ;       Compute target display offset
  2228                                  ;
  2229                                                          xor     eax,eax                                         ;zero register
  2230                                                          mov     al,ch                                           ;row
  2231                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2232                                                          mul     ah                                              ;row offset
  2233                                                          add     al,cl                                           ;add column
  2234                                                          adc     ah,0                                            ;add overflow
  2235                                                          add     al,cl                                           ;add column
  2236                                                          adc     ah,0                                            ;add overflow
  2237                                                          mov     edi,eax                                         ;target row offset
  2238                                  ;
  2239                                  ;       Display top border row
  2240                                  ;
  2241                                                          push    edi                                             ;save target row offset
  2242                                                          mov     ah,bh                                           ;attribute
  2243                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2244                                                          stosw                                                   ;display character and attribute
  2245                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2246                                                          xor     ecx,ecx                                         ;zero register
  2247                                                          mov     cl,dl                                           ;width, excluding border
  2248                                                          rep     stosw                                           ;display horizontal border
  2249                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2250                                                          stosw                                                   ;display character and attribute
  2251                                                          pop     edi                                             ;restore target row offset
  2252                                                          add     edi,ECONROWBYTES                                ;next row
  2253                                  ;
  2254                                  ;       Display dialog box body rows
  2255                                  ;
  2256                                                          xor     ecx,ecx                                         ;zero register
  2257                                                          mov     cl,dh                                           ;height, excluding border
  2258                                  .10                     push    ecx                                             ;save remaining rows
  2259                                                          push    edi                                             ;save target row offset
  2260                                                          mov     ah,bh                                           ;attribute
  2261                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2262                                                          stosw                                                   ;display character and attribute
  2263                                                          mov     al,EASCIISPACE                                  ;space
  2264                                                          xor     ecx,ecx                                         ;zero register
  2265                                                          mov     cl,dl                                           ;width, excluding border
  2266                                                          rep     stosw                                           ;display row
  2267                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2268                                                          stosw                                                   ;display character and attribute
  2269                                                          pop     edi                                             ;restore target row offset
  2270                                                          add     edi,ECONROWBYTES                                ;next row
  2271                                                          pop     ecx                                             ;remaining rows
  2272                                                          loop    .10                                             ;next row
  2273                                  ;
  2274                                  ;       Display bottom border row
  2275                                  ;
  2276                                                          push    edi                                             ;save target row offset
  2277                                                          mov     ah,bh                                           ;attribute
  2278                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2279                                                          stosw                                                   ;display character and attribute
  2280                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2281                                                          xor     ecx,ecx                                         ;zero register
  2282                                                          mov     cl,dl                                           ;width, excluding border
  2283                                                          rep     stosw                                           ;display horizontal border
  2284                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2285                                                          stosw                                                   ;display character and attribute
  2286                                                          pop     edi                                             ;restore target row offset
  2287                                                          add     edi,ECONROWBYTES                                ;next row
  2288                                  ;
  2289                                  ;       Restore and return
  2290                                  ;
  2291                                                          pop     es                                              ;restore non-volatile regs
  2292                                                          pop     edi                                             ;
  2293                                                          pop     esi                                             ;
  2294                                                          pop     ecx                                             ;
  2295                                                          ret                                                     ;return
  2296                                  ;=======================================================================================================================
  2297                                  ;
  2298                                  ;       Hardware Device Interupts
  2299                                  ;
  2300                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2301                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2302                                  ;       (BX=2028h).
  2303                                  ;
  2304                                  ;=======================================================================================================================
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;       IRQ0    Clock Tick Interrupt
  2308                                  ;
  2309                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2310                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2311                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2312                                  ;
  2313                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2314                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2315                                  ;
  2316                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2317                                  ;       zero, the floppy disk motors are turned off.
  2318                                  ;
  2319                                  ;-----------------------------------------------------------------------------------------------------------------------
  2320                                                          menter  clocktick                                       ;clock tick interrupt
  2321                                                          push    eax                                             ;save modified regs
  2322                                                          push    edx                                             ;
  2323                                                          push    ds                                              ;
  2324                                  ;
  2325                                  ;       Update the clock tick count and the elapsed days as needed.
  2326                                  ;
  2327                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2328                                                          pop     ds                                              ;... into data segment register
  2329                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2330                                                          inc     eax                                             ;increment clock ticks
  2331                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2332                                                          jb      irq0.10                                         ;no, skip ahead
  2333                                                          inc     byte [wbClockDays]                              ;increment clock days
  2334                                                          xor     eax,eax                                         ;reset clock ticks
  2335                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2336                                  ;
  2337                                  ;       Decrement floppy disk motor timeout.
  2338                                  ;
  2339                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2340                                                          je      irq0.20                                         ;yes, skip ahead
  2341                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2342                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2343                                  ;
  2344                                  ;       Turn off the floppy disk motor if appropriate.
  2345                                  ;
  2346                                                          sti                                                     ;enable maskable interrupts
  2347                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2348                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2349                                                          in      al,dx                                           ;FDC main status byte
  2350                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2351                                                          jnz     irq0.15                                         ;wait while busy
  2352                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2353                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2354                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2355                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2356                                                          out     dx,al                                           ;turn motor off
  2357                                  ;
  2358                                  ;       Signal the end of the hardware interrupt.
  2359                                  ;
  2360                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2361                                  ;
  2362                                  ;       Restore and return.
  2363                                  ;
  2364                                                          pop     ds                                              ;restore modified regs
  2365                                                          pop     edx                                             ;
  2366                                                          pop     eax                                             ;
  2367                                                          iretd                                                   ;return
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369                                  ;
  2370                                  ;       IRQ1    Keyboard Interrupt
  2371                                  ;
  2372                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2373                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2374                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2375                                  ;       ALL modified registers upon return.
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378                                                          menter  keyboard                                        ;keyboard interrrupt
  2379                                                          push    eax                                             ;save non-volatile regs
  2380                                                          push    ebx                                             ;
  2381                                                          push    ecx                                             ;
  2382                                                          push    esi                                             ;
  2383                                                          push    ds                                              ;
  2384                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2385                                                          pop     ds                                              ;... into data segment register
  2386                                                          xor     al,al                                           ;zero
  2387                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2388                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2389                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2390                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2391                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2392                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2393                                                          mov     al,' '                                          ;space
  2394                                                          mov     [wbConsoleChar],al                              ;set character to space
  2395                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2396                                                          not     al                                              ;controller timeout mask
  2397                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2398                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2399                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2400                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2401                                                          jz      irq1.140                                        ;yes, skip ahead
  2402                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2403                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2404                                                          mov     ah,al                                           ;copy scan code 0
  2405                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2406                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2407                                                          je      irq1.30                                         ;yes, set flag
  2408                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2409                                                          je      irq1.40                                         ;yes, reset flag
  2410                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2411                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2412                                                          je      irq1.30                                         ;yes, set flag
  2413                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2414                                                          je      irq1.40                                         ;yes, reset flag
  2415                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2416                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2417                                                          je      irq1.30                                         ;yes, set flag
  2418                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2419                                                          je      irq1.40                                         ;yes, reset flag
  2420                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2421                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2422                                                          je      irq1.30                                         ;yes, set flag
  2423                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2424                                                          je      irq1.40                                         ;yes, reset flag
  2425                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2426                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2427                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2428                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2429                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2430                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2431                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2432                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2433                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2434                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2435                                                          jne     irq1.70                                         ;no, skip ahead
  2436                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2437                                                          jz      irq1.140                                        ;yes, skip ahead
  2438                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2439                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2440                                                          mov     ah,al                                           ;copy scan code 1
  2441                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2442                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2443                                                          je      irq1.30                                         ;yes, set flag
  2444                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2445                                                          je      irq1.40                                         ;yes, reset flag
  2446                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2447                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2448                                                          je      irq1.30                                         ;yes, set flag
  2449                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2450                                                          je      irq1.40                                         ;yes, reset flag
  2451                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2452                                                          je      irq1.80                                         ;yes, skip ahead
  2453                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2454                                                          je      irq1.80                                         ;yes, skip ahead
  2455                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2456                                                          je      irq1.10                                         ;yes, continue
  2457                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2458                                                          jne     irq1.20                                         ;no, skip ahead
  2459                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2460                                                          jz      irq1.140                                        ;yes, skip ahead
  2461                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2462                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2463                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2464                                                          jz      irq1.140                                        ;yes, skip ahead
  2465                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2466                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2467                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2468                                  irq1.30                 or      bl,al                                           ;set shift flag
  2469                                                          jmp     irq1.60                                         ;skip ahead
  2470                                  irq1.40                 not     al                                              ;convert flag to mask
  2471                                                          and     bl,al                                           ;reset shift flag
  2472                                                          jmp     irq1.60                                         ;skip ahead
  2473                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2474                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2475                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2476                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2477                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2478                                                          jmp     irq1.150                                        ;finish keyboard handling
  2479                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2480                                                          jne     irq1.80                                         ;no continue
  2481                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2482                                                          jz      irq1.140                                        ;yes, skip ahead
  2483                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2484                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2485                                                          mov     ah,al                                           ;copy scan code 1
  2486                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2487                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2488                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2489                                                          jz      irq1.140                                        ;yes, skip ahead
  2490                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2491                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2492                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2493                                                          jz      irq1.140                                        ;yes, skip ahead
  2494                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2495                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2496                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2497                                                          jz      irq1.140                                        ;yes, skip ahead
  2498                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2499                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2500                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2501                                                          jz      irq1.140                                        ;yes, skip ahead
  2502                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2503                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2504                                                          jmp     irq1.150                                        ;continue
  2505                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2506                                                          test    ah,EKEYBUP                                      ;release code?
  2507                                                          jnz     irq1.130                                        ;yes, skip ahead
  2508                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2509                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2510                                                          jz      irq1.90                                         ;no, skip ahead
  2511                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2512                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2513                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2514                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2515                                                          jz      irq1.100                                        ;no skip ahead
  2516                                                          mov     cl,al                                           ;copy ASCII code
  2517                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2518                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2519                                                          jb      irq1.100                                        ;yes, skip ahead
  2520                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2521                                                          ja      irq1.100                                        ;yes, skip ahead
  2522                                                          xor     al,EASCIICASE                                   ;switch case
  2523                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2524                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2525                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2526                                                          jz      irq1.120                                        ;no, skip ahead
  2527                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2528                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2529                                                          or      edx,eax                                         ;msg id and codes
  2530                                                          xor     ecx,ecx                                         ;null param
  2531                                                          push    eax                                             ;save codes
  2532                                                          call    PutMessage                                      ;put message to console
  2533                                                          pop     eax                                             ;restore codes
  2534                                                          test    al,al                                           ;ASCII translation?
  2535                                                          jz      irq1.130                                        ;no, skip ahead
  2536                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2537                                                          and     eax,0FFFFh                                      ;clear high-order word
  2538                                                          or      edx,eax                                         ;msg id and codes
  2539                                                          xor     ecx,ecx                                         ;null param
  2540                                                          call    PutMessage                                      ;put message to console
  2541                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2542                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2543                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2544                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2545                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2546                                                          pop     ds                                              ;restore non-volatile regs
  2547                                                          pop     esi                                             ;
  2548                                                          pop     ecx                                             ;
  2549                                                          pop     ebx                                             ;
  2550                                                          pop     eax                                             ;
  2551                                                          iretd                                                   ;return
  2552                                  ;-----------------------------------------------------------------------------------------------------------------------
  2553                                  ;       Scan-Code to ASCII Translation Tables
  2554                                  ;-----------------------------------------------------------------------------------------------------------------------
  2555                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2556                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2557                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2558                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2559                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2560                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2561                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2562                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2563                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2564                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2565                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2566                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2567                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2568                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2569                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2570                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2571                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2572                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2573                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2574                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2575                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2576                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2577                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2578                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2579                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2580                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2581                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2582                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2583                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2584                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2585                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2586                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;
  2589                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2590                                  ;
  2591                                  ;-----------------------------------------------------------------------------------------------------------------------
  2592                                                          menter  iochannel                                       ;secondary 8259A cascade
  2593                                                          push    eax                                             ;save modified regs
  2594                                                          jmp     hwint                                           ;end interrupt and return
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  com2                                            ;serial port 2 interrupt
  2601                                                          push    eax                                             ;save modified regs
  2602                                                          jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  com1                                            ;serial port 1 interrupt
  2609                                                          push    eax                                             ;save modified regs
  2610                                                          jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2617                                                          push    eax                                             ;save modified regs
  2618                                                          jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ6    Diskette Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  diskette                                        ;floppy disk interrupt
  2625                                                          push    eax                                             ;save non-volatile regs
  2626                                                          push    ds                                              ;
  2627                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2628                                                          pop     ds                                              ;... into DS register
  2629                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2630                                                          or      al,10000000b                                    ;set IRQ flag
  2631                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2632                                                          pop     ds                                              ;restore non-volatile regs
  2633                                                          jmp     hwint                                           ;end primary PIC interrupt
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  ;
  2636                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2637                                  ;
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2640                                                          push    eax                                             ;save modified regs
  2641                                                          jmp     hwint                                           ;end interrupt and return
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                  ;
  2644                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                                          menter  rtclock                                         ;real-time clock interrupt
  2648                                                          push    eax                                             ;save modified regs
  2649                                                          jmp     hwwint                                          ;end interrupt and return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2656                                                          push    eax                                             ;save modified regs
  2657                                                          jmp     hwwint                                          ;end interrupt and return
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                  ;
  2660                                  ;       IRQ10   Reserved Hardware Interrupt
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                                          menter  irq10                                           ;reserved
  2664                                                          push    eax                                             ;save modified regs
  2665                                                          jmp     hwwint                                          ;end interrupt and return
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ11   Reserved Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  irq11                                           ;reserved
  2672                                                          push    eax                                             ;save modified regs
  2673                                                          jmp     hwwint                                          ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2680                                                          push    eax                                             ;save modified regs
  2681                                                          jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  coprocessor                                     ;coprocessor interrupt
  2688                                                          push    eax                                             ;save modified regs
  2689                                                          jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2696                                                          push    eax                                             ;save modified regs
  2697                                                          jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ15   Reserved Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  irq15                                           ;reserved
  2704                                                          push    eax                                             ;save modified regs
  2705                                                          jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       Exit from hardware interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2712                                                          jmp     hwint90                                         ;skip ahead
  2713                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2714                                  hwint90                 pop     eax                                             ;restore modified regs
  2715                                                          iretd                                                   ;return from interrupt
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       INT 30h Operating System Software Service Interrupt
  2719                                  ;
  2720                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2721                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2722                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2723                                  ;       the entry address of the specific function from a table.
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                                          menter  svc
  2727                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2728                                                          jae     svc90                                           ;yes, skip ahead
  2729                                                          movzx   eax,al                                          ;function
  2730                                                          shl     eax,2                                           ;offset into table
  2731                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2732                                  svc90                   iretd                                                   ;return from interrupt
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;       Service Request Table
  2736                                  ;
  2737                                  ;
  2738                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2742                                                          tsvce   CompareMemory                                   ;compare memory
  2743                                                          tsvce   GetConsoleString                                ;get string input
  2744                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2745                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2746                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2747                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2748                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2749                                                          tsvce   PutDayString                                    ;put DD string
  2750                                                          tsvce   PutHourString                                   ;put hh string
  2751                                                          tsvce   PutMinuteString                                 ;put mm string
  2752                                                          tsvce   PutMonthString                                  ;put MM string
  2753                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2754                                                          tsvce   PutSecondString                                 ;put ss string
  2755                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2756                                                          tsvce   PutWeekdayString                                ;put weekday string
  2757                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2758                                                          tsvce   PutYearString                                   ;put YYYY string
  2759                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2760                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2761                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2762                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2763                                                          tsvce   UpperCaseString                                 ;upper-case string
  2764                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                  ;
  2767                                  ;       Service Request Macros
  2768                                  ;
  2769                                  ;       These macros provide positional parameterization of service request calls.
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  %macro                  clearConsoleScreen 0
  2773                                                          mov     al,eClearConsoleScreen                          ;function code
  2774                                                          int     _svc                                            ;invoke OS service
  2775                                  %endmacro
  2776                                  %macro                  compareMemory 0
  2777                                                          mov     al,eCompareMemory                               ;function code
  2778                                                          int     _svc                                            ;invoke OS service
  2779                                  %endmacro
  2780                                  %macro                  getConsoleString 4
  2781                                                          mov     edx,%1                                          ;buffer address
  2782                                                          mov     ecx,%2                                          ;max characters
  2783                                                          mov     bh,%3                                           ;echo indicator
  2784                                                          mov     bl,%4                                           ;terminator
  2785                                                          mov     al,eGetConsoleString                            ;function code
  2786                                                          int     _svc                                            ;invoke OS service
  2787                                  %endmacro
  2788                                  %macro                  hexadecimalToUnsigned 0
  2789                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2790                                                          int     _svc                                            ;invoke OS service
  2791                                  %endmacro
  2792                                  %macro                  isLeapYear 1
  2793                                                          mov     ebx,%1                                          ;DATETIME addr
  2794                                                          mov     al,eIsLeapYear                                  ;function code
  2795                                                          int     _svc                                            ;invoke OS service
  2796                                  %endmacro
  2797                                  %macro                  placeCursor 0
  2798                                                          mov     al,ePlaceCursor                                 ;function code
  2799                                                          int     _svc                                            ;invoke OS service
  2800                                  %endmacro
  2801                                  %macro                  putConsoleString 1
  2802                                                          mov     edx,%1                                          ;string address
  2803                                                          mov     al,ePutConsoleString                            ;function code
  2804                                                          int     _svc                                            ;invoke OS service
  2805                                  %endmacro
  2806                                  %macro                  putDateString 0
  2807                                                          mov     al,ePutDateString                               ;function code
  2808                                                          int     _svc                                            ;invoke OS service
  2809                                  %endmacro
  2810                                  %macro                  putDateString 2
  2811                                                          mov     ebx,%1                                          ;DATETIME addr
  2812                                                          mov     edx,%2                                          ;output buffer addr
  2813                                                          mov     al,ePutDateString                               ;function code
  2814                                                          int     _svc                                            ;invoke OS service
  2815                                  %endmacro
  2816                                  %macro                  putDayString 2
  2817                                                          mov     ebx,%1                                          ;DATETIME addr
  2818                                                          mov     edx,%2                                          ;output buffer addr
  2819                                                          mov     al,ePutDayString                                ;function code
  2820                                                          int     _svc                                            ;invoke OS service
  2821                                  %endmacro
  2822                                  %macro                  putHourString 2
  2823                                                          mov     ebx,%1                                          ;DATETIME addr
  2824                                                          mov     edx,%2                                          ;output buffer addr
  2825                                                          mov     al,ePutHourString                               ;function code
  2826                                                          int     _svc                                            ;invoke OS service
  2827                                  %endmacro
  2828                                  %macro                  putMinuteString 2
  2829                                                          mov     ebx,%1                                          ;DATETIME addr
  2830                                                          mov     edx,%2                                          ;output buffer addr
  2831                                                          mov     al,ePutMinuteString                             ;function code
  2832                                                          int     _svc                                            ;invoke OS service
  2833                                  %endmacro
  2834                                  %macro                  putMonthString 2
  2835                                                          mov     ebx,%1                                          ;DATETIME addr
  2836                                                          mov     edx,%2                                          ;output buffer addr
  2837                                                          mov     al,ePutMonthString                              ;function code
  2838                                                          int     _svc                                            ;invoke OS service
  2839                                  %endmacro
  2840                                  %macro                  putMonthNameString 2
  2841                                                          mov     ebx,%1                                          ;DATETIME addr
  2842                                                          mov     edx,%2                                          ;output buffer addr
  2843                                                          mov     al,ePutMonthNameString                          ;function code
  2844                                                          int     _svc                                            ;invoke OS service
  2845                                  %endmacro
  2846                                  %macro                  putSecondString 2
  2847                                                          mov     ebx,%1                                          ;DATETIME addr
  2848                                                          mov     edx,%2                                          ;output buffer addr
  2849                                                          mov     al,ePutSecondString                             ;function code
  2850                                                          int     _svc                                            ;invoke OS service
  2851                                  %endmacro
  2852                                  %macro                  putTimeString 0
  2853                                                          mov     al,ePutTimeString                               ;function code
  2854                                                          int     _svc                                            ;invoke OS service
  2855                                  %endmacro
  2856                                  %macro                  putTimeString 2
  2857                                                          mov     ebx,%1                                          ;DATETIME addr
  2858                                                          mov     edx,%2                                          ;output buffer addr
  2859                                                          mov     al,ePutTimeString                               ;function code
  2860                                                          int     _svc                                            ;invoke OS service
  2861                                  %endmacro
  2862                                  %macro                  putWeekdayString 2
  2863                                                          mov     ebx,%1                                          ;DATETIME addr
  2864                                                          mov     edx,%2                                          ;output buffer addr
  2865                                                          mov     al,ePutWeekdayString                            ;function code
  2866                                                          int     _svc                                            ;invoke OS service
  2867                                  %endmacro
  2868                                  %macro                  putWeekdayNameString 2
  2869                                                          mov     ebx,%1                                          ;DATETIME addr
  2870                                                          mov     edx,%2                                          ;output buffer addr
  2871                                                          mov     al,ePutWeekdayNameString                        ;function code
  2872                                                          int     _svc                                            ;invoke OS service
  2873                                  %endmacro
  2874                                  %macro                  putYearString 2
  2875                                                          mov     ebx,%1                                          ;DATETIME addr
  2876                                                          mov     edx,%2                                          ;output buffer addr
  2877                                                          mov     al,ePutYearString                               ;function code
  2878                                                          int     _svc                                            ;invoke OS service
  2879                                  %endmacro
  2880                                  %macro                  readRealTimeClock 0
  2881                                                          mov     al,eReadRealTimeClock                           ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  readRealTimeClock 1
  2885                                                          mov     ebx,%1                                          ;DATETIME addr
  2886                                                          mov     al,eReadRealTimeClock                           ;function code
  2887                                                          int     _svc                                            ;invoke OS service
  2888                                  %endmacro
  2889                                  %macro                  resetSystem 0
  2890                                                          mov     al,eResetSystem                                 ;function code
  2891                                                          int     _svc                                            ;invoke OS service
  2892                                  %endmacro
  2893                                  %macro                  unsignedToDecimalString 0
  2894                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2895                                                          int     _svc                                            ;invoke OS service
  2896                                  %endmacro
  2897                                  %macro                  unsignedToHexadecimal 0
  2898                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2899                                                          int     _svc                                            ;invoke OS service
  2900                                  %endmacro
  2901                                  %macro                  upperCaseString 0
  2902                                                          mov     al,eUpperCaseString                             ;function code
  2903                                                          int     _svc                                            ;invoke OS service
  2904                                  %endmacro
  2905                                  ;=======================================================================================================================
  2906                                  ;
  2907                                  ;       Kernel Function Library
  2908                                  ;
  2909                                  ;=======================================================================================================================
  2910                                  ;=======================================================================================================================
  2911                                  ;
  2912                                  ;       Date and Time Helper Routines
  2913                                  ;
  2914                                  ;       GetYear
  2915                                  ;       IsLeapYear
  2916                                  ;       PutDateString
  2917                                  ;       PutDayString
  2918                                  ;       PutHourString
  2919                                  ;       PutMinuteString
  2920                                  ;       PutMonthString
  2921                                  ;       PutMonthNameString
  2922                                  ;       PutSecondString
  2923                                  ;       PutTimeString
  2924                                  ;       PutWeekdayString
  2925                                  ;       PutWeekdayNameString
  2926                                  ;       PutYearString
  2927                                  ;
  2928                                  ;=======================================================================================================================
  2929                                  ;-----------------------------------------------------------------------------------------------------------------------
  2930                                  ;
  2931                                  ;       Routine:        GetYear
  2932                                  ;
  2933                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  2934                                  ;
  2935                                  ;       In:             DS:EBX  DATETIME address
  2936                                  ;
  2937                                  ;       Out:            ECX     year
  2938                                  ;
  2939                                  ;-----------------------------------------------------------------------------------------------------------------------
  2940                                  GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  2941                                                          imul    ecx,100                                         ;century * 100
  2942                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  2943                                                          add     ecx,eax                                         ;year (YYYY)
  2944                                                          ret                                                     ;return
  2945                                  ;-----------------------------------------------------------------------------------------------------------------------
  2946                                  ;
  2947                                  ;       Routine:        IsLeapYear
  2948                                  ;
  2949                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  2950                                  ;
  2951                                  ;       In:             DS:EBX  DATETIME ADDRESS
  2952                                  ;
  2953                                  ;       Out:            ECX     0 = not a leap year
  2954                                  ;                               1 = leap year
  2955                                  ;
  2956                                  ;-----------------------------------------------------------------------------------------------------------------------
  2957                                  IsLeapYear              call    GetYear                                         ;ECX = YYYY
  2958                                                          mov     eax,ecx                                         ;EAX = YYYY
  2959                                                          xor     ecx,ecx                                         ;assume not leap year
  2960                                                          test    al,00000011b                                    ;multiple of four?
  2961                                                          jnz     .no                                             ;no, branch
  2962                                                          mov     dl,100                                          ;divisor
  2963                                                          div     dl                                              ;divide by 100
  2964                                                          test    ah,ah                                           ;multiple of 100?
  2965                                                          jnz     .yes                                            ;yes, branch
  2966                                                          test    al,00000011b                                    ;multiple of 400?
  2967                                                          jnz     .no                                             ;no, branch
  2968                                  .yes                    inc     ecx                                             ;indicate leap
  2969                                  .no                     ret                                                     ;return
  2970                                  ;-----------------------------------------------------------------------------------------------------------------------
  2971                                  ;
  2972                                  ;       Routine:        PutDateString
  2973                                  ;
  2974                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2975                                  ;                       structure at ds:ebx.
  2976                                  ;
  2977                                  ;       In:             DS:EBX  DATETIME address
  2978                                  ;                       DS:EDX  output buffer address
  2979                                  ;
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981                                  PutDateString           push    ecx                                             ;save non-volatile regs
  2982                                                          push    edi                                             ;
  2983                                                          push    es                                              ;
  2984                                                          push    ds                                              ;store data selector ...
  2985                                                          pop     es                                              ;... in extra segment reg
  2986                                                          mov     edi,edx                                         ;output buffer address
  2987                                                          mov     cl,10                                           ;divisor
  2988                                                          mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  2989                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month
  2990                                                          div     cl                                              ;AH = rem; AL = quotient
  2991                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  2992                                                          cld                                                     ;forward strings
  2993                                                          stosd                                                   ;store "mm/"nul
  2994                                                          dec     edi                                             ;address of terminator
  2995                                                          movzx   eax,byte [ebx+DATETIME.day]                     ;day
  2996                                                          div     cl                                              ;AH = rem; AL = quotient
  2997                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  2998                                                          stosd                                                   ;store "dd/"nul
  2999                                                          dec     edi                                             ;address of terminator
  3000                                                          movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3001                                                          div     cl                                              ;AH = rem; AL = quotient
  3002                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3003                                                          stosd                                                   ;store "cc/"null
  3004                                                          dec     edi                                             ;address of terminator
  3005                                                          dec     edi                                             ;address of delimiter
  3006                                                          movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3007                                                          div     cl                                              ;AH = rem; AL = quotient
  3008                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3009                                                          stosb                                                   ;store quotient
  3010                                                          mov     al,ah                                           ;remainder
  3011                                                          stosb                                                   ;store remainder
  3012                                                          xor     al,al                                           ;null terminator
  3013                                                          stosb                                                   ;store terminator
  3014                                                          pop     es                                              ;restore non-volatile regs
  3015                                                          pop     edi                                             ;
  3016                                                          pop     ecx                                             ;
  3017                                                          ret                                                     ;return
  3018                                  ;-----------------------------------------------------------------------------------------------------------------------
  3019                                  ;
  3020                                  ;       Routine:        PutDayString
  3021                                  ;
  3022                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3023                                  ;                       structure at ds:ebx.
  3024                                  ;
  3025                                  ;       In:             DS:EBX  DATETIME address
  3026                                  ;                       DS:EDX  output buffer address
  3027                                  ;
  3028                                  ;-----------------------------------------------------------------------------------------------------------------------
  3029                                  PutDayString            push    ecx                                             ;save non-volatile regs
  3030                                                          movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3031                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3032                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3033                                                          pop     ecx                                             ;
  3034                                                          ret                                                     ;return
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036                                  ;
  3037                                  ;       Routine:        PutHourString
  3038                                  ;
  3039                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3040                                  ;                       structure at ds:ebx.
  3041                                  ;
  3042                                  ;       In:             DS:EBX  DATETIME address
  3043                                  ;                       DS:EDX  output buffer address
  3044                                  ;
  3045                                  ;-----------------------------------------------------------------------------------------------------------------------
  3046                                  PutHourString           push    ecx                                             ;save non-volatile regs
  3047                                                          movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3048                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3049                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3050                                                          pop     ecx                                             ;
  3051                                                          ret                                                     ;return
  3052                                  ;-----------------------------------------------------------------------------------------------------------------------
  3053                                  ;
  3054                                  ;       Routine:        PutMinuteString
  3055                                  ;
  3056                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3057                                  ;                       structure at ds:ebx.
  3058                                  ;
  3059                                  ;       In:             DS:EBX  DATETIME address
  3060                                  ;                       DS:EDX  output buffer address
  3061                                  ;
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063                                  PutMinuteString         push    ecx                                             ;save non-volatile regs
  3064                                                          movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3065                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3066                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3067                                                          pop     ecx                                             ;
  3068                                                          ret                                                     ;return
  3069                                  ;-----------------------------------------------------------------------------------------------------------------------
  3070                                  ;
  3071                                  ;       Routine:        PutMonthString
  3072                                  ;
  3073                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3074                                  ;                       structure at ds:ebx.
  3075                                  ;
  3076                                  ;       In:             DS:EBX  DATETIME address
  3077                                  ;                       DS:EDX  output buffer address
  3078                                  ;
  3079                                  ;-----------------------------------------------------------------------------------------------------------------------
  3080                                  PutMonthString          push    ecx                                             ;save non-volatile regs
  3081                                                          movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3082                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3083                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3084                                                          pop     ecx                                             ;
  3085                                                          ret                                                     ;return
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  ;
  3088                                  ;       Routine:        PutMonthNameString
  3089                                  ;
  3090                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3091                                  ;                       structure at ds:ebx.
  3092                                  ;
  3093                                  ;       In:             DS:EBX  DATETIME address
  3094                                  ;                       DS:EDX  output buffer address
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  PutMonthNameString      push    esi                                             ;save non-volatile regs
  3098                                                          push    edi                                             ;
  3099                                                          push    ds                                              ;
  3100                                                          push    es                                              ;
  3101                                                          push    ds                                              ;load data selector ...
  3102                                                          pop     es                                              ;... into extra segment
  3103                                                          mov     edi,edx                                         ;output buffer address
  3104                                                          movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3105                                                          dec     eax                                             ;month (0-11)
  3106                                                          shl     eax,2                                           ;offset into month name lookup table
  3107                                                          push    cs                                              ;load code selector ...
  3108                                                          pop     ds                                              ;... into data segment
  3109                                                          mov     esi,[tMonthNames+eax]                           ;month name address
  3110                                                          cld                                                     ;forward strings
  3111                                  .10                     lodsb                                                   ;name character
  3112                                                          stosb                                                   ;store in output buffer
  3113                                                          test    al,al                                           ;end of string?
  3114                                                          jnz     .10                                             ;no, continue
  3115                                                          pop     es                                              ;restore non-volatile regs
  3116                                                          pop     ds                                              ;
  3117                                                          pop     edi                                             ;
  3118                                                          pop     esi                                             ;
  3119                                                          ret                                                     ;return
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121                                  ;
  3122                                  ;       Routine:        PutSecondString
  3123                                  ;
  3124                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3125                                  ;                       structure at ds:ebx.
  3126                                  ;
  3127                                  ;       In:             DS:EBX  DATETIME address
  3128                                  ;                       DS:EDX  output buffer address
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131                                  PutSecondString         push    ecx                                             ;save non-volatile regs
  3132                                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3133                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3134                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3135                                                          pop     ecx                                             ;
  3136                                                          ret                                                     ;return
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138                                  ;
  3139                                  ;       Routine:        PutTimeString
  3140                                  ;
  3141                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3142                                  ;                       structure at ds:ebx.
  3143                                  ;
  3144                                  ;       In:             DS:EBX  DATETIME address
  3145                                  ;                       DS:EDX  output buffer address
  3146                                  ;
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148                                  PutTimeString           push    ecx                                             ;save non-volatile regs
  3149                                                          push    edi                                             ;
  3150                                                          push    es                                              ;
  3151                                                          push    ds                                              ;store data selector ...
  3152                                                          pop     es                                              ;... in extra segment reg
  3153                                                          mov     edi,edx                                         ;output buffer address
  3154                                                          mov     cl,10                                           ;divisor
  3155                                                          mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3156                                                          movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3157                                                          div     cl                                              ;ah = rem; al = quotient
  3158                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3159                                                          cld                                                     ;forward strings
  3160                                                          stosd                                                   ;store "mm/"nul
  3161                                                          dec     edi                                             ;address of terminator
  3162                                                          movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3163                                                          div     cl                                              ;ah = rem; al = quotient
  3164                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3165                                                          stosd                                                   ;store "dd/"nul
  3166                                                          dec     edi                                             ;address of terminator
  3167                                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3168                                                          div     cl                                              ;ah = rem; al = quotient
  3169                                                          or      eax,edx                                         ;apply ASCII zones and delimiter
  3170                                                          stosb                                                   ;store quotient
  3171                                                          mov     al,ah                                           ;remainder
  3172                                                          stosb                                                   ;store remainder
  3173                                                          xor     al,al                                           ;null terminator
  3174                                                          stosb                                                   ;store terminator
  3175                                                          pop     es                                              ;restore non-volatile regs
  3176                                                          pop     edi                                             ;
  3177                                                          pop     ecx                                             ;
  3178                                                          ret                                                     ;return
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180                                  ;
  3181                                  ;       Routine:        PutWeekdayString
  3182                                  ;
  3183                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3184                                  ;                       structure at ds:ebx.
  3185                                  ;
  3186                                  ;       In:             DS:EBX  DATETIME address
  3187                                  ;                       DS:EDX  output buffer address
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3191                                                          movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3192                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3193                                                          call    UnsignedToDecimalString                         ;store ASCII decimal string
  3194                                                          pop     ecx                                             ;
  3195                                                          ret                                                     ;return
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  ;
  3198                                  ;       Routine:        PutWeekdayNameString
  3199                                  ;
  3200                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3201                                  ;                       structure at ds:ebx.
  3202                                  ;
  3203                                  ;       In:             DS:EBX  DATETIME address
  3204                                  ;                       DS:EDX  output buffer address
  3205                                  ;
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3208                                                          push    edi                                             ;
  3209                                                          push    ds                                              ;
  3210                                                          push    es                                              ;
  3211                                                          push    ds                                              ;load data selector ...
  3212                                                          pop     es                                              ;... into extra segment
  3213                                                          mov     edi,edx                                         ;output buffer address
  3214                                                          movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3215                                                          shl     eax,2                                           ;offset into day name lookup table
  3216                                                          push    cs                                              ;load code selector ...
  3217                                                          pop     ds                                              ;... into data segment
  3218                                                          mov     esi,[tDayNames+eax]                             ;day name address
  3219                                                          cld                                                     ;forward strings
  3220                                  .10                     lodsb                                                   ;name character
  3221                                                          stosb                                                   ;store in output buffer
  3222                                                          test    al,al                                           ;end of string?
  3223                                                          jnz     .10                                             ;no, continue
  3224                                                          pop     es                                              ;restore non-volatile regs
  3225                                                          pop     ds                                              ;
  3226                                                          pop     edi                                             ;
  3227                                                          pop     esi                                             ;
  3228                                                          ret                                                     ;return
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230                                  ;
  3231                                  ;       Routine:        PutYearString
  3232                                  ;
  3233                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3234                                  ;                       structure at ds:ebx.
  3235                                  ;
  3236                                  ;       In:             DS:EBX  DATETIME address
  3237                                  ;                       DS:EDX  output buffer address
  3238                                  ;
  3239                                  ;-----------------------------------------------------------------------------------------------------------------------
  3240                                  PutYearString           push    ecx                                             ;save non-volatile regs
  3241                                                          call    GetYear                                         ;ECX = YYYY
  3242                                                          mov     bh,1                                            ;trim leading zeros; no commas
  3243                                                          call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3244                                                          pop     ecx                                             ;restore non-volatile regs
  3245                                                          ret                                                     ;return
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247                                  ;
  3248                                  ;       Day Names
  3249                                  ;
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251                                  czSunday                db      "Sunday",0
  3252                                  czMonday                db      "Monday",0
  3253                                  czTuesday               db      "Tuesday",0
  3254                                  czWednesday             db      "Wednesday",0
  3255                                  czThursday              db      "Thursday",0
  3256                                  czFriday                db      "Friday",0
  3257                                  czSaturday              db      "Saturday",0
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;       Month Names
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  czJanuary               db      "January",0
  3264                                  czFebruary              db      "February",0
  3265                                  czMarch                 db      "March",0
  3266                                  czApril                 db      "April",0
  3267                                  czMay                   db      "May",0
  3268                                  czJune                  db      "June",0
  3269                                  czJuly                  db      "July",0
  3270                                  czAugust                db      "August",0
  3271                                  czSeptember             db      "September",0
  3272                                  czOctober               db      "October",0
  3273                                  czNovember              db      "November",0
  3274                                  czDecember              db      "December",0
  3275                                  ;-----------------------------------------------------------------------------------------------------------------------
  3276                                  ;
  3277                                  ;       Day Names Lookup Table
  3278                                  ;
  3279                                  ;-----------------------------------------------------------------------------------------------------------------------
  3280                                                          align   4
  3281                                  tDayNames               equ     $
  3282                                                          dd      czSunday
  3283                                                          dd      czMonday
  3284                                                          dd      czTuesday
  3285                                                          dd      czWednesday
  3286                                                          dd      czThursday
  3287                                                          dd      czFriday
  3288                                                          dd      czSaturday
  3289                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3290                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292                                  ;
  3293                                  ;       Month Names Lookup Table
  3294                                  ;
  3295                                  ;-----------------------------------------------------------------------------------------------------------------------
  3296                                                          align   4
  3297                                  tMonthNames             equ     $
  3298                                                          dd      czJanuary
  3299                                                          dd      czFebruary
  3300                                                          dd      czMarch
  3301                                                          dd      czApril
  3302                                                          dd      czMay
  3303                                                          dd      czJune
  3304                                                          dd      czJuly
  3305                                                          dd      czAugust
  3306                                                          dd      czSeptember
  3307                                                          dd      czOctober
  3308                                                          dd      czNovember
  3309                                                          dd      czDecember
  3310                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3311                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3312                                  ;=======================================================================================================================
  3313                                  ;
  3314                                  ;       String Helper Routines
  3315                                  ;
  3316                                  ;       CompareMemory
  3317                                  ;       UpperCaseString
  3318                                  ;
  3319                                  ;=======================================================================================================================
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  ;
  3322                                  ;       Routine:        CompareMemory
  3323                                  ;
  3324                                  ;       Description:    This routine compares two byte arrays.
  3325                                  ;
  3326                                  ;       In:             DS:EDX  first source address
  3327                                  ;                       DS:EBX  second source address
  3328                                  ;                       ECX     comparison length
  3329                                  ;
  3330                                  ;       Out:            EDX     first source address
  3331                                  ;                       EBX     second source address
  3332                                  ;                       ECX     0       array 1 = array 2
  3333                                  ;                               <0      array 1 < array 2
  3334                                  ;                               >0      array 1 > array 2
  3335                                  ;
  3336                                  ;-----------------------------------------------------------------------------------------------------------------------
  3337                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3338                                                          push    edi                                             ;
  3339                                                          push    es                                              ;
  3340                                                          push    ds                                              ;copy DS
  3341                                                          pop     es                                              ;... to ES
  3342                                                          mov     esi,edx                                         ;first source address
  3343                                                          mov     edi,ebx                                         ;second source address
  3344                                                          cld                                                     ;forward strings
  3345                                                          rep     cmpsb                                           ;compare bytes
  3346                                                          mov     al,0                                            ;default result
  3347                                                          jz      .10                                             ;branch if arrays equal
  3348                                                          mov     al,1                                            ;positive result
  3349                                                          jnc     .10                                             ;branch if target > source
  3350                                                          mov     al,-1                                           ;negative result
  3351                                  .10                     movsx   ecx,al                                          ;extend sign
  3352                                                          pop     es                                              ;restore non-volatile regs
  3353                                                          pop     edi                                             ;
  3354                                                          pop     esi                                             ;
  3355                                                          ret                                                     ;return
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                  ;
  3358                                  ;       Routine:        UpperCaseString
  3359                                  ;
  3360                                  ;       Description:    This routine places all characters in the given string to upper case.
  3361                                  ;
  3362                                  ;       In:             DS:EDX  string address
  3363                                  ;
  3364                                  ;       Out:            EDX     string address
  3365                                  ;
  3366                                  ;-----------------------------------------------------------------------------------------------------------------------
  3367                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3368                                                          mov     esi,edx                                         ;string address
  3369                                                          cld                                                     ;forward strings
  3370                                  .10                     lodsb                                                   ;string character
  3371                                                          test    al,al                                           ;null?
  3372                                                          jz      .20                                             ;yes, skip ahead
  3373                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3374                                                          jb      .10                                             ;no, continue
  3375                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3376                                                          ja      .10                                             ;no, continue
  3377                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3378                                                          mov     [esi-1],al                                      ;upper character
  3379                                                          jmp     .10                                             ;continue
  3380                                  .20                     pop     esi                                             ;restore non-volatile regs
  3381                                                          ret                                                     ;return
  3382                                  ;=======================================================================================================================
  3383                                  ;
  3384                                  ;       Console Helper Routines
  3385                                  ;
  3386                                  ;       FirstConsoleColumn
  3387                                  ;       GetConsoleChar
  3388                                  ;       GetConsoleString
  3389                                  ;       NextConsoleColumn
  3390                                  ;       NextConsoleRow
  3391                                  ;       PreviousConsoleColumn
  3392                                  ;       PutConsoleChar
  3393                                  ;       PutConsoleHexByte
  3394                                  ;       PutConsoleHexDword
  3395                                  ;       PutConsoleHexWord
  3396                                  ;       PutConsoleOIAChar
  3397                                  ;       PutConsoleOIAShift
  3398                                  ;       PutConsoleString
  3399                                  ;       Yield
  3400                                  ;
  3401                                  ;=======================================================================================================================
  3402                                  ;-----------------------------------------------------------------------------------------------------------------------
  3403                                  ;
  3404                                  ;       Routine:        FirstConsoleColumn
  3405                                  ;
  3406                                  ;       Description:    This routine resets the console column to start of the row.
  3407                                  ;
  3408                                  ;       In:             DS      OS data selector
  3409                                  ;
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3412                                                          mov     [wbConsoleColumn],al                            ;save column
  3413                                                          ret                                                     ;return
  3414                                  ;-----------------------------------------------------------------------------------------------------------------------
  3415                                  ;
  3416                                  ;       Routine:        GetConsoleChar
  3417                                  ;
  3418                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3419                                  ;
  3420                                  ;       Out:            AL      ASCII character code
  3421                                  ;                       AH      keyboard scan code
  3422                                  ;
  3423                                  ;-----------------------------------------------------------------------------------------------------------------------
  3424                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3425                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3426                                                          or      eax,eax                                         ;do we have a message?
  3427                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3428                                                          push    eax                                             ;save key codes
  3429                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3430                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3431                                                          pop     eax                                             ;restore key codes
  3432                                                          jne     GetConsoleChar                                  ;no, try again
  3433                                                          and     eax,0000ffffh                                   ;mask for key codes
  3434                                                          ret                                                     ;return
  3435                                  ;-----------------------------------------------------------------------------------------------------------------------
  3436                                  ;
  3437                                  ;       Routine:        GetConsoleString
  3438                                  ;
  3439                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3440                                  ;
  3441                                  ;       In:             DS:EDX  target buffer address
  3442                                  ;                       ECX     maximum number of characters to accept
  3443                                  ;                       BH      echo to terminal
  3444                                  ;                       BL      terminating character
  3445                                  ;
  3446                                  ;-----------------------------------------------------------------------------------------------------------------------
  3447                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3448                                                          push    esi                                             ;
  3449                                                          push    edi                                             ;
  3450                                                          push    es                                              ;
  3451                                                          push    ds                                              ;load data segment selector ...
  3452                                                          pop     es                                              ;... into extra segment register
  3453                                                          mov     edi,edx                                         ;edi = target buffer
  3454                                                          push    ecx                                             ;save maximum characters
  3455                                                          xor     al,al                                           ;zero register
  3456                                                          cld                                                     ;forward strings
  3457                                                          rep     stosb                                           ;zero fill buffer
  3458                                                          pop     ecx                                             ;maximum characters
  3459                                                          mov     edi,edx                                         ;edi = target buffer
  3460                                                          mov     esi,edx                                         ;esi = target buffer
  3461                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  3462                                  .20                     call    GetConsoleChar                                  ;al = next input char
  3463                                                          cmp     al,bl                                           ;is this the terminator?
  3464                                                          je      .50                                             ;yes, exit
  3465                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3466                                                          jne     .30                                             ;no, skip ahead
  3467                                                          cmp     esi,edi                                         ;at start of buffer?
  3468                                                          je      .20                                             ;yes, get next character
  3469                                                          dec     edi                                             ;backup target pointer
  3470                                                          mov     byte [edi],0                                    ;zero previous character
  3471                                                          inc     ecx                                             ;increment remaining chars
  3472                                                          test    bh,1                                            ;echo to console?
  3473                                                          jz      .20                                             ;no, get next character
  3474                                                          call    PreviousConsoleColumn                           ;backup console position
  3475                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3476                                                          call    PutConsoleChar                                  ;write space to console
  3477                                                          call    PlaceCursor                                     ;position the cursor
  3478                                                          jmp     .20                                             ;get next character
  3479                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3480                                                          jb      .20                                             ;no, get another character
  3481                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3482                                                          ja      .20                                             ;no, get another character
  3483                                                          stosb                                                   ;store character in buffer
  3484                                                          test    bh,1                                            ;echo to console?
  3485                                                          jz      .40                                             ;no, skip ahead
  3486                                                          call    PutConsoleChar                                  ;write character to console
  3487                                                          call    NextConsoleColumn                               ;advance console position
  3488                                                          call    PlaceCursor                                     ;position the cursor
  3489                                  .40                     dec     ecx                                             ;decrement remaining chars
  3490                                                          jmp     .10                                             ;next
  3491                                  .50                     xor     al,al                                           ;null
  3492                                                          stosb                                                   ;terminate buffer
  3493                                                          pop     es                                              ;restore non-volatile regs
  3494                                                          pop     edi                                             ;
  3495                                                          pop     esi                                             ;
  3496                                                          pop     ecx                                             ;
  3497                                                          ret                                                     ;return
  3498                                  ;-----------------------------------------------------------------------------------------------------------------------
  3499                                  ;
  3500                                  ;       Routine:        NextConsoleColumn
  3501                                  ;
  3502                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3503                                  ;                       incremented if the end of the current row is reached.
  3504                                  ;
  3505                                  ;       In:             DS      OS data selector
  3506                                  ;
  3507                                  ;-----------------------------------------------------------------------------------------------------------------------
  3508                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3509                                                          inc     al                                              ;increment column
  3510                                                          mov     [wbConsoleColumn],al                            ;save column
  3511                                                          cmp     al,ECONCOLS                                     ;end of row?
  3512                                                          jb      .10                                             ;no, skip ahead
  3513                                                          call    FirstConsoleColumn                              ;reset column to start of row
  3514                                                          call    NextConsoleRow                                  ;line feed to next row
  3515                                  .10                     ret                                                     ;return
  3516                                  ;-----------------------------------------------------------------------------------------------------------------------
  3517                                  ;
  3518                                  ;       Routine:        NextConsoleRow
  3519                                  ;
  3520                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3521                                  ;
  3522                                  ;       In:             DS      OS data selector
  3523                                  ;
  3524                                  ;-----------------------------------------------------------------------------------------------------------------------
  3525                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3526                                                          inc     al                                              ;increment row
  3527                                                          mov     [wbConsoleRow],al                               ;save row
  3528                                                          cmp     al,ECONROWS                                     ;end of screen?
  3529                                                          jb      .10                                             ;no, skip ahead
  3530                                                          call    ScrollConsoleRow                                ;scroll up one row
  3531                                                          mov     al,[wbConsoleRow]                               ;row
  3532                                                          dec     al                                              ;decrement row
  3533                                                          mov     [wbConsoleRow],al                               ;save row
  3534                                  .10                     ret                                                     ;return
  3535                                  ;-----------------------------------------------------------------------------------------------------------------------
  3536                                  ;
  3537                                  ;       Routine:        PreviousConsoleColumn
  3538                                  ;
  3539                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3540                                  ;                       the column is set to the last position in the row and the row is decremented.
  3541                                  ;
  3542                                  ;       In:             DS      OS data selector
  3543                                  ;
  3544                                  ;-----------------------------------------------------------------------------------------------------------------------
  3545                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3546                                                          or      al,al                                           ;start of row?
  3547                                                          jnz     .10                                             ;no, skip ahead
  3548                                                          mov     ah,[wbConsoleRow]                               ;current row
  3549                                                          or      ah,ah                                           ;top of screen?
  3550                                                          jz      .20                                             ;yes, exit with no change
  3551                                                          dec     ah                                              ;decrement row
  3552                                                          mov     [wbConsoleRow],ah                               ;save row
  3553                                                          mov     al,ECONCOLS                                     ;set maximum column
  3554                                  .10                     dec     al                                              ;decrement column
  3555                                                          mov     [wbConsoleColumn],al                            ;save column
  3556                                  .20                     ret                                                     ;return
  3557                                  ;-----------------------------------------------------------------------------------------------------------------------
  3558                                  ;
  3559                                  ;       Routine:        PutConsoleChar
  3560                                  ;
  3561                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3562                                  ;
  3563                                  ;       In:             AL      ASCII character
  3564                                  ;                       DS      OS data selector
  3565                                  ;
  3566                                  ;-----------------------------------------------------------------------------------------------------------------------
  3567                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3568                                                          push    es                                              ;
  3569                                                          push    EGDTCGA                                         ;load CGA selector ...
  3570                                                          pop     es                                              ;... into extra segment reg
  3571                                                          mov     cl,[wbConsoleColumn]                            ;column
  3572                                                          mov     ch,[wbConsoleRow]                               ;row
  3573                                                          call    SetConsoleChar                                  ;put character at row, column
  3574                                                          pop     es                                              ;restore non-volatile regs
  3575                                                          pop     ecx                                             ;
  3576                                                          ret                                                     ;return
  3577                                  ;-----------------------------------------------------------------------------------------------------------------------
  3578                                  ;
  3579                                  ;       Routine:        PutConsoleHexByte
  3580                                  ;
  3581                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3582                                  ;
  3583                                  ;       In:             AL      byte value
  3584                                  ;                       CL      column
  3585                                  ;                       CH      row
  3586                                  ;                       DS      OS data selector
  3587                                  ;                       ES      CGA selector
  3588                                  ;
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3591                                                          mov     bl,al                                           ;save byte value
  3592                                                          shr     al,4                                            ;hi-order nybble
  3593                                                          or      al,030h                                         ;apply ASCII zone
  3594                                                          cmp     al,03ah                                         ;numeric?
  3595                                                          jb      .10                                             ;yes, skip ahead
  3596                                                          add     al,7                                            ;add ASCII offset for alpha
  3597                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3598                                                          mov     al,bl                                           ;byte value
  3599                                                          and     al,0fh                                          ;lo-order nybble
  3600                                                          or      al,30h                                          ;apply ASCII zone
  3601                                                          cmp     al,03ah                                         ;numeric?
  3602                                                          jb      .20                                             ;yes, skip ahead
  3603                                                          add     al,7                                            ;add ASCII offset for alpha
  3604                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3605                                                          pop     ebx                                             ;restore non-volatile regs
  3606                                                          ret                                                     ;return
  3607                                  ;-----------------------------------------------------------------------------------------------------------------------
  3608                                  ;
  3609                                  ;       Routine:        PutConsoleHexDword
  3610                                  ;
  3611                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3612                                  ;
  3613                                  ;       In:             EAX     value
  3614                                  ;                       CL      column
  3615                                  ;                       CH      row
  3616                                  ;                       DS      OS data selector
  3617                                  ;                       ES      CGA selector
  3618                                  ;
  3619                                  ;-----------------------------------------------------------------------------------------------------------------------
  3620                                  PutConsoleHexDword      push    eax
  3621                                                          shr     eax,16
  3622                                                          call    PutConsoleHexWord
  3623                                                          pop     eax
  3624                                                          call    PutConsoleHexWord
  3625                                                          ret
  3626                                  ;-----------------------------------------------------------------------------------------------------------------------
  3627                                  ;
  3628                                  ;       Routine:        PutConsoleHexWord
  3629                                  ;
  3630                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3631                                  ;
  3632                                  ;       In:             EAX     value
  3633                                  ;                       CL      column
  3634                                  ;                       CH      row
  3635                                  ;                       DS      OS data selector
  3636                                  ;                       ES      CGA selector
  3637                                  ;
  3638                                  ;-----------------------------------------------------------------------------------------------------------------------
  3639                                  PutConsoleHexWord       push    eax
  3640                                                          shr     eax,8
  3641                                                          call    PutConsoleHexByte
  3642                                                          pop     eax
  3643                                                          call    PutConsoleHexByte
  3644                                                          ret
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646                                  ;
  3647                                  ;       Routine:        PutConsoleOIAChar
  3648                                  ;
  3649                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3650                                  ;
  3651                                  ;       In:             DS      OS data selector
  3652                                  ;
  3653                                  ;-----------------------------------------------------------------------------------------------------------------------
  3654                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3655                                                          push    ecx                                             ;
  3656                                                          push    esi                                             ;
  3657                                                          push    ds                                              ;
  3658                                                          push    es                                              ;
  3659                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3660                                                          pop     ds                                              ;... into data segment register
  3661                                                          push    EGDTCGA                                         ;load CGA selector ...
  3662                                                          pop     es                                              ;... into extra segment register
  3663                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3664                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3665                                                          mov     bl,0                                            ;starting column
  3666                                                          mov     ecx,6                                           ;maximum scan codes
  3667                                  .10                     push    ecx                                             ;save remaining count
  3668                                                          mov     ecx,ebx                                         ;row, column
  3669                                                          lodsb                                                   ;read scan code
  3670                                                          or      al,al                                           ;scan code present?
  3671                                                          jz      .20                                             ;no, skip ahead
  3672                                                          call    PutConsoleHexByte                               ;display scan code
  3673                                                          jmp     .30                                             ;continue
  3674                                  .20                     mov     al,' '                                          ;ASCII space
  3675                                                          call    SetConsoleChar                                  ;display space
  3676                                                          mov     al,' '                                          ;ASCII space
  3677                                                          call    SetConsoleChar                                  ;display space
  3678                                  .30                     add     bl,2                                            ;next column (+2)
  3679                                                          pop     ecx                                             ;restore remaining
  3680                                                          loop    .10                                             ;next code
  3681                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3682                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3683                                                          jb      .40                                             ;no, skip ahead
  3684                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3685                                                          ja      .40                                             ;no, skip ahead
  3686                                                          mov     ch,bh                                           ;OIA row
  3687                                                          mov     cl,40                                           ;character display column
  3688                                                          call    SetConsoleChar                                  ;display ASCII character
  3689                                  .40                     pop     es                                              ;restore non-volatile regs
  3690                                                          pop     ds                                              ;
  3691                                                          pop     esi                                             ;
  3692                                                          pop     ecx                                             ;
  3693                                                          pop     ebx                                             ;
  3694                                                          ret                                                     ;return
  3695                                  ;-----------------------------------------------------------------------------------------------------------------------
  3696                                  ;
  3697                                  ;       Routine:        PutConsoleOIAShift
  3698                                  ;
  3699                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3700                                  ;
  3701                                  ;       In:             BL      shift flags
  3702                                  ;                       BH      lock flags
  3703                                  ;                       DS      OS data selector
  3704                                  ;
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3707                                                          push    es                                              ;
  3708                                                          push    EGDTCGA                                         ;load CGA selector ...
  3709                                                          pop     es                                              ;... into ES register
  3710                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3711                                                          mov     al,EASCIISPACE                                  ;space is default character
  3712                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3713                                                          jz      .10                                             ;no, skip ahead
  3714                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3715                                  .10                     mov     cl,14                                           ;indicator column
  3716                                                          call    SetConsoleChar                                  ;display ASCII character
  3717                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3718                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3719                                                          jz      .20                                             ;no, skip ahead
  3720                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3721                                  .20                     mov     cl,64                                           ;indicator column
  3722                                                          call    SetConsoleChar                                  ;display ASCII character
  3723                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3724                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3725                                                          jz      .30                                             ;no, skip ahead
  3726                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3727                                  .30                     mov     cl,15                                           ;indicator column
  3728                                                          call    SetConsoleChar                                  ;display ASCII character
  3729                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3730                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3731                                                          jz      .40                                             ;no, skip ahead
  3732                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3733                                  .40                     mov     cl,63                                           ;indicator column
  3734                                                          call    SetConsoleChar                                  ;display ASCII character
  3735                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3736                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3737                                                          jz      .50                                             ;no, skip ahead
  3738                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3739                                  .50                     mov     cl,16                                           ;indicator column
  3740                                                          call    SetConsoleChar                                  ;display ASCII character
  3741                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3742                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3743                                                          jz      .60                                             ;no, skip ahead
  3744                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3745                                  .60                     mov     cl,62                                           ;indicator column
  3746                                                          call    SetConsoleChar                                  ;display ASCII character
  3747                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3748                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3749                                                          jz      .70                                             ;no, skip ahead
  3750                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3751                                  .70                     mov     cl,78                                           ;indicator column
  3752                                                          call    SetConsoleChar                                  ;display ASCII character
  3753                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3754                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3755                                                          jz      .80                                             ;no, skip ahead
  3756                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3757                                  .80                     mov     cl,77                                           ;indicator column
  3758                                                          call    SetConsoleChar                                  ;display ASCII character
  3759                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3760                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3761                                                          jz      .90                                             ;no, skip ahead
  3762                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3763                                  .90                     mov     cl,76                                           ;indicator column
  3764                                                          call    SetConsoleChar                                  ;display ASCII character
  3765                                                          pop     es                                              ;restore non-volatile regs
  3766                                                          pop     ecx                                             ;
  3767                                                          ret                                                     ;return
  3768                                  ;-----------------------------------------------------------------------------------------------------------------------
  3769                                  ;
  3770                                  ;       Routine:        PutConsoleString
  3771                                  ;
  3772                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3773                                  ;                       console position as needed.
  3774                                  ;
  3775                                  ;       In:             EDX     source address
  3776                                  ;                       DS      OS data selector
  3777                                  ;
  3778                                  ;-----------------------------------------------------------------------------------------------------------------------
  3779                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3780                                                          mov     esi,edx                                         ;source address
  3781                                                          cld                                                     ;forward strings
  3782                                  .10                     lodsb                                                   ;ASCII character
  3783                                                          or      al,al                                           ;end of string?
  3784                                                          jz      .40                                             ;yes, skip ahead
  3785                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3786                                                          jne     .20                                             ;no, skip ahead
  3787                                                          call    FirstConsoleColumn                              ;move to start of row
  3788                                                          jmp     .10                                             ;next character
  3789                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3790                                                          jne     .30                                             ;no, skip ahead
  3791                                                          call    NextConsoleRow                                  ;move to next row
  3792                                                          jmp     .10                                             ;next character
  3793                                  .30                     call    PutConsoleChar                                  ;output character to console
  3794                                                          call    NextConsoleColumn                               ;advance to next column
  3795                                                          jmp     .10                                             ;next character
  3796                                  .40                     pop     esi                                             ;restore non-volatile regs
  3797                                                          ret                                                     ;return
  3798                                  ;-----------------------------------------------------------------------------------------------------------------------
  3799                                  ;
  3800                                  ;       Routine:        Yield
  3801                                  ;
  3802                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3803                                  ;
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805                                  Yield                   sti                                                     ;enable maskagle interrupts
  3806                                                          hlt                                                     ;halt until external interrupt
  3807                                                          ret                                                     ;return
  3808                                  ;=======================================================================================================================
  3809                                  ;
  3810                                  ;       Data-Type Conversion Helper Routines
  3811                                  ;
  3812                                  ;       HexadecimalToUnsigned
  3813                                  ;       UnsignedToDecimalString
  3814                                  ;       UnsignedToHexadecimal
  3815                                  ;
  3816                                  ;=======================================================================================================================
  3817                                  ;-----------------------------------------------------------------------------------------------------------------------
  3818                                  ;
  3819                                  ;       Routine:        HexadecimalToUnsigned
  3820                                  ;
  3821                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3822                                  ;
  3823                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3824                                  ;
  3825                                  ;       Output:         EAX     unsigned integer value
  3826                                  ;
  3827                                  ;-----------------------------------------------------------------------------------------------------------------------
  3828                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3829                                                          mov     esi,edx                                         ;source address
  3830                                                          xor     edx,edx                                         ;zero register
  3831                                  .10                     lodsb                                                   ;source byte
  3832                                                          test    al,al                                           ;end of string?
  3833                                                          jz      .30                                             ;yes, branch
  3834                                                          cmp     al,'9'                                          ;hexadecimal?
  3835                                                          jna     .20                                             ;no, skip ahead
  3836                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3837                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3838                                                          shl     edx,4                                           ;previous total x 16
  3839                                                          add     edx,eax                                         ;add prior value x 16
  3840                                                          jmp     .10                                             ;next
  3841                                  .30                     mov     eax,edx                                         ;result
  3842                                                          pop     esi                                             ;restore non-volatile regs
  3843                                                          ret                                                     ;return
  3844                                  ;-----------------------------------------------------------------------------------------------------------------------
  3845                                  ;
  3846                                  ;       Routine:        UnsignedToDecimalString
  3847                                  ;
  3848                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3849                                  ;
  3850                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  3851                                  ;                                               bit 1: 1 = include comma grouping delimiters
  3852                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  3853                                  ;                       ECX     32-bit binary
  3854                                  ;                       DS:EDX  output buffer address
  3855                                  ;
  3856                                  ;-----------------------------------------------------------------------------------------------------------------------
  3857                                  UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  3858                                                          push    ecx                                             ;
  3859                                                          push    edi                                             ;
  3860                                                          push    es                                              ;
  3861                                                          push    ds                                              ;load data selector
  3862                                                          pop     es                                              ;... into extra segment reg
  3863                                                          mov     edi,edx                                         ;output buffer address
  3864                                                          and     bh,00001111b                                    ;zero internal flags
  3865                                                          mov     edx,ecx                                         ;binary
  3866                                                          mov     ecx,1000000000                                  ;10^9 divisor
  3867                                                          call    .30                                             ;divide and store
  3868                                                          mov     ecx,100000000                                   ;10^8 divisor
  3869                                                          call    .10                                             ;divide and store
  3870                                                          mov     ecx,10000000                                    ;10^7 divisor
  3871                                                          call    .30                                             ;divide and store
  3872                                                          mov     ecx,1000000                                     ;10^6 divisor
  3873                                                          call    .30                                             ;divide and store
  3874                                                          mov     ecx,100000                                      ;10^5 divisor
  3875                                                          call    .10                                             ;divide and store
  3876                                                          mov     ecx,10000                                       ;10^4 divisor
  3877                                                          call    .30                                             ;divide and store
  3878                                                          mov     ecx,1000                                        ;10^3 divisor
  3879                                                          call    .30                                             ;divide and store
  3880                                                          mov     ecx,100                                         ;10^2 divisor
  3881                                                          call    .10                                             ;divide and store
  3882                                                          mov     ecx,10                                          ;10^2 divisor
  3883                                                          call    .30                                             ;divide and store
  3884                                                          mov     eax,edx                                         ;10^1 remainder
  3885                                                          call    .40                                             ;store
  3886                                                          xor     al,al                                           ;null terminator
  3887                                                          stosb
  3888                                                          pop     es                                              ;restore non-volatile regs
  3889                                                          pop     edi                                             ;
  3890                                                          pop     ecx                                             ;
  3891                                                          pop     ebx                                             ;
  3892                                                          ret                                                     ;return
  3893                                  .10                     test    bh,00000010b                                    ;comma group delims?
  3894                                                          jz      .30                                             ;no, branch
  3895                                                          test    bh,00000001b                                    ;trim leading zeros?
  3896                                                          jz      .20                                             ;no, store delim
  3897                                                          test    bh,00010000b                                    ;non-zero found?
  3898                                                          jz      .30                                             ;no, branch
  3899                                  .20                     mov     al,','                                          ;delimiter
  3900                                                          stosb                                                   ;store delimiter
  3901                                  .30                     mov     eax,edx                                         ;lo-orer dividend
  3902                                                          xor     edx,edx                                         ;zero hi-order
  3903                                                          div     ecx                                             ;divide by power of 10
  3904                                                          test    al,al                                           ;zero?
  3905                                                          jz      .50                                             ;yes, branch
  3906                                                          or      bh,00010000b                                    ;non-zero found
  3907                                  .40                     or      al,30h                                          ;ASCII zone
  3908                                                          stosb                                                   ;store digit
  3909                                                          ret                                                     ;return
  3910                                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  3911                                                          jz      .40                                             ;no, store and continue
  3912                                                          test    bh,00010000b                                    ;non-zero found?
  3913                                                          jnz     .40                                             ;yes, store and continue
  3914                                                          ret                                                     ;return
  3915                                  ;-----------------------------------------------------------------------------------------------------------------------
  3916                                  ;
  3917                                  ;       Routine:        UnsignedToHexadecimal
  3918                                  ;
  3919                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3920                                  ;
  3921                                  ;       Input:          DS:EDX  output buffer address
  3922                                  ;                       ECX     32-bit binary
  3923                                  ;
  3924                                  ;-----------------------------------------------------------------------------------------------------------------------
  3925                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3926                                                          mov     edi,edx                                         ;output buffer address
  3927                                                          mov     edx,ecx                                         ;32-bit unsigned
  3928                                                          xor     ecx,ecx                                         ;zero register
  3929                                                          mov     cl,8                                            ;nybble count
  3930                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3931                                                          mov     al,dl                                           ;????bbbb
  3932                                                          and     al,0fh                                          ;mask out bits 4-7
  3933                                                          or      al,30h                                          ;mask in ascii zone
  3934                                                          cmp     al,3ah                                          ;A through F?
  3935                                                          jb      .20                                             ;no, skip ahead
  3936                                                          add     al,7                                            ;41h through 46h
  3937                                  .20                     stosb                                                   ;store hexnum
  3938                                                          loop    .10                                             ;next nybble
  3939                                                          xor     al,al                                           ;zero reg
  3940                                                          stosb                                                   ;null terminate
  3941                                                          pop     edi                                             ;restore non-volatile regs
  3942                                                          ret                                                     ;return
  3943                                  ;=======================================================================================================================
  3944                                  ;
  3945                                  ;       Message Queue Helper Routines
  3946                                  ;
  3947                                  ;       GetMessage
  3948                                  ;       PutMessage
  3949                                  ;
  3950                                  ;=======================================================================================================================
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  ;
  3953                                  ;       Routine:        GetMessage
  3954                                  ;
  3955                                  ;       Description:    This routine reads and removes a message from the message queue.
  3956                                  ;
  3957                                  ;       Out:            EAX     lo-order message data
  3958                                  ;                       EDX     hi-order message data
  3959                                  ;
  3960                                  ;                       CY      0 = message read
  3961                                  ;                               1 = no message to read
  3962                                  ;
  3963                                  ;-----------------------------------------------------------------------------------------------------------------------
  3964                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3965                                                          push    ecx                                             ;
  3966                                                          push    ds                                              ;
  3967                                                          push    ELDTMQ                                          ;load message queue selector ...
  3968                                                          pop     ds                                              ;... into data segment register
  3969                                                          mov     ebx,[MQHead]                                    ;head ptr
  3970                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3971                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3972                                                          or      eax,edx                                         ;is queue empty?
  3973                                                          stc                                                     ;assume queue is emtpy
  3974                                                          jz      .20                                             ;yes, skip ahead
  3975                                                          xor     ecx,ecx                                         ;store zero
  3976                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3977                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3978                                                          add     ebx,8                                           ;next queue element
  3979                                                          and     ebx,03fch                                       ;at end of queue?
  3980                                                          jnz     .10                                             ;no, skip ahead
  3981                                                          mov     bl,8                                            ;reset to 1st entry
  3982                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3983                                                          clc                                                     ;indicate message read
  3984                                  .20                     pop     ds                                              ;restore non-volatile regs
  3985                                                          pop     ecx                                             ;
  3986                                                          pop     ebx                                             ;
  3987                                                          ret                                                     ;return
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ;
  3990                                  ;       Routine:        PutMessage
  3991                                  ;
  3992                                  ;       Description:    This routine adda a message to the message queue.
  3993                                  ;
  3994                                  ;       In:             ECX     hi-order data word
  3995                                  ;                       EDX     lo-order data word
  3996                                  ;
  3997                                  ;       Out:            CY      0 = success
  3998                                  ;                               1 = fail: queue is full
  3999                                  ;
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001                                  PutMessage              push    ds                                              ;save non-volatile regs
  4002                                                          push    ELDTMQ                                          ;load task message queue selector ...
  4003                                                          pop     ds                                              ;... into data segment register
  4004                                                          mov     eax,[MQTail]                                    ;tail ptr
  4005                                                          cmp     dword [eax],0                                   ;is queue full?
  4006                                                          stc                                                     ;assume failure
  4007                                                          jne     .20                                             ;yes, cannot store
  4008                                                          mov     [eax],edx                                       ;store lo-order data
  4009                                                          mov     [eax+4],ecx                                     ;store hi-order data
  4010                                                          add     eax,8                                           ;next queue element adr
  4011                                                          and     eax,03fch                                       ;at end of queue?
  4012                                                          jnz     .10                                             ;no, skip ahead
  4013                                                          mov     al,8                                            ;reset to top of queue
  4014                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4015                                                          clc                                                     ;indicate success
  4016                                  .20                     pop     ds                                              ;restore non-volatile regs
  4017                                                          ret                                                     ;return
  4018                                  ;=======================================================================================================================
  4019                                  ;
  4020                                  ;       Memory-Mapped Video Routines
  4021                                  ;
  4022                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4023                                  ;
  4024                                  ;       ClearConsoleScreen
  4025                                  ;       ScrollConsoleRow
  4026                                  ;       SetConsoleChar
  4027                                  ;       SetConsoleString
  4028                                  ;
  4029                                  ;=======================================================================================================================
  4030                                  ;-----------------------------------------------------------------------------------------------------------------------
  4031                                  ;
  4032                                  ;       Routine:        ClearConsoleScreen
  4033                                  ;
  4034                                  ;       Description:    This routine clears the console (CGA) screen.
  4035                                  ;
  4036                                  ;-----------------------------------------------------------------------------------------------------------------------
  4037                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4038                                                          push    edi                                             ;
  4039                                                          push    ds                                              ;
  4040                                                          push    es                                              ;
  4041                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4042                                                          pop     ds                                              ;... into DS register
  4043                                                          push    EGDTCGA                                         ;load CGA selector ...
  4044                                                          pop     es                                              ;... into ES register
  4045                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4046                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4047                                                          xor     edi,edi                                         ;target offset
  4048                                                          cld                                                     ;forward strings
  4049                                                          rep     stosd                                           ;reset screen body
  4050                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4051                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4052                                                          rep     stosd                                           ;reset OIA line
  4053                                                          xor     al,al                                           ;zero register
  4054                                                          mov     [wbConsoleRow],al                               ;reset console row
  4055                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4056                                                          call    PlaceCursor                                     ;place cursor at current position
  4057                                                          pop     es                                              ;restore non-volatile regs
  4058                                                          pop     ds                                              ;
  4059                                                          pop     edi                                             ;
  4060                                                          pop     ecx                                             ;
  4061                                                          ret                                                     ;return
  4062                                  ;-----------------------------------------------------------------------------------------------------------------------
  4063                                  ;
  4064                                  ;       Routine:        ScrollConsoleRow
  4065                                  ;
  4066                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4067                                  ;
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4070                                                          push    esi                                             ;
  4071                                                          push    edi                                             ;
  4072                                                          push    ds                                              ;
  4073                                                          push    es                                              ;
  4074                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4075                                                          pop     ds                                              ;... into DS
  4076                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4077                                                          pop     es                                              ;... into ES
  4078                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4079                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4080                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4081                                                          cld                                                     ;forward strings
  4082                                                          rep     movsd                                           ;move 24 lines up
  4083                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4084                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4085                                                          rep     stosd                                           ;clear bottom row
  4086                                                          pop     es                                              ;restore non-volatile regs
  4087                                                          pop     ds                                              ;
  4088                                                          pop     edi                                             ;
  4089                                                          pop     esi                                             ;
  4090                                                          pop     ecx                                             ;
  4091                                                          ret                                                     ;return
  4092                                  ;-----------------------------------------------------------------------------------------------------------------------
  4093                                  ;
  4094                                  ;       Routine:        SetConsoleChar
  4095                                  ;
  4096                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4097                                  ;
  4098                                  ;       In:             AL      ASCII character
  4099                                  ;                       CL      column
  4100                                  ;                       CH      row
  4101                                  ;                       ES      CGA selector
  4102                                  ;
  4103                                  ;       Out:            EAX     last target address written (ES:)
  4104                                  ;                       CL      column + 1
  4105                                  ;
  4106                                  ;-----------------------------------------------------------------------------------------------------------------------
  4107                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4108                                                          movzx   eax,ch                                          ;row
  4109                                                          mov     ah,ECONCOLS                                     ;cols/row
  4110                                                          mul     ah                                              ;row * cols/row
  4111                                                          add     al,cl                                           ;add column
  4112                                                          adc     ah,0                                            ;handle carry
  4113                                                          shl     eax,1                                           ;screen offset
  4114                                                          mov     [es:eax],dl                                     ;store character
  4115                                                          inc     cl                                              ;next column
  4116                                                          ret                                                     ;return
  4117                                  ;-----------------------------------------------------------------------------------------------------------------------
  4118                                  ;
  4119                                  ;       Routine:        SetConsoleString
  4120                                  ;
  4121                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4122                                  ;
  4123                                  ;       In:             ESI     source offset (DS:)
  4124                                  ;                       CL      column
  4125                                  ;                       CH      row
  4126                                  ;                       ES      CGA selector
  4127                                  ;
  4128                                  ;-----------------------------------------------------------------------------------------------------------------------
  4129                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4130                                                          cld                                                     ;forward strings
  4131                                  .10                     lodsb                                                   ;next ASCII character
  4132                                                          test    al,al                                           ;end of string?
  4133                                                          jz      .20                                             ;yes, branch
  4134                                                          call    SetConsoleChar                                  ;store character
  4135                                                          jmp     .10                                             ;continue
  4136                                  .20                     pop     esi                                             ;restore non-volatile regs
  4137                                                          ret                                                     ;return
  4138                                  ;=======================================================================================================================
  4139                                  ;
  4140                                  ;       Input/Output Routines
  4141                                  ;
  4142                                  ;       These routines read and/or write directly to ports.
  4143                                  ;
  4144                                  ;       PlaceCursor
  4145                                  ;       PutPrimaryEndOfInt
  4146                                  ;       PutSecondaryEndOfInt
  4147                                  ;       ReadRealTimeClock
  4148                                  ;       ResetSystem
  4149                                  ;       SetKeyboardLamps
  4150                                  ;       WaitForKeyInBuffer
  4151                                  ;       WaitForKeyOutBuffer
  4152                                  ;
  4153                                  ;=======================================================================================================================
  4154                                  ;-----------------------------------------------------------------------------------------------------------------------
  4155                                  ;
  4156                                  ;       Routine:        PlaceCursor
  4157                                  ;
  4158                                  ;       Description:    This routine positions the cursor on the console.
  4159                                  ;
  4160                                  ;       In:             DS      OS data selector
  4161                                  ;
  4162                                  ;-----------------------------------------------------------------------------------------------------------------------
  4163                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4164                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4165                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4166                                                          mul     ah                                              ;row offset
  4167                                                          add     al,[wbConsoleColumn]                            ;add column
  4168                                                          adc     ah,0                                            ;add overflow
  4169                                                          mov     ecx,eax                                         ;screen offset
  4170                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4171                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4172                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4173                                                          out     dx,al                                           ;select register
  4174                                                          inc     edx                                             ;data port
  4175                                                          mov     al,ch                                           ;hi-order cursor loc
  4176                                                          out     dx,al                                           ;store hi-order loc
  4177                                                          dec     edx                                             ;register select port
  4178                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4179                                                          out     dx,al                                           ;select register
  4180                                                          inc     edx                                             ;data port
  4181                                                          mov     al,cl                                           ;lo-order cursor loc
  4182                                                          out     dx,al                                           ;store lo-order loc
  4183                                                          pop     ecx                                             ;restore non-volatile regs
  4184                                                          ret                                                     ;return
  4185                                  ;-----------------------------------------------------------------------------------------------------------------------
  4186                                  ;
  4187                                  ;       Routine:        PutPrimaryEndOfInt
  4188                                  ;
  4189                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4190                                  ;
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4193                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4194                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4195                                                          ret                                                     ;return
  4196                                  ;-----------------------------------------------------------------------------------------------------------------------
  4197                                  ;
  4198                                  ;       Routine:        PutSecondaryEndOfInt
  4199                                  ;
  4200                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4201                                  ;
  4202                                  ;-----------------------------------------------------------------------------------------------------------------------
  4203                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4204                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4205                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4206                                                          ret                                                     ;return
  4207                                  ;-----------------------------------------------------------------------------------------------------------------------
  4208                                  ;
  4209                                  ;       Routine:        ReadRealTimeClock
  4210                                  ;
  4211                                  ;       Description:    This routine gets current date time from the real-time clock.
  4212                                  ;
  4213                                  ;       In:             DS:EBX  DATETIME structure
  4214                                  ;
  4215                                  ;-----------------------------------------------------------------------------------------------------------------------
  4216                                  ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4217                                                          push    edi                                             ;
  4218                                                          push    es                                              ;
  4219                                                          push    ds                                              ;store data selector ...
  4220                                                          pop     es                                              ;... in es register
  4221                                                          mov     edi,ebx                                         ;date-time structure
  4222                                                          mov     al,ERTCSECONDREG                                ;second register
  4223                                                          out     ERTCREGPORT,al                                  ;select second register
  4224                                                          in      al,ERTCDATAPORT                                 ;read second register
  4225                                                          cld                                                     ;forward strings
  4226                                                          stosb                                                   ;store second value
  4227                                                          mov     al,ERTCMINUTEREG                                ;minute register
  4228                                                          out     ERTCREGPORT,al                                  ;select minute register
  4229                                                          in      al,ERTCDATAPORT                                 ;read minute register
  4230                                                          stosb                                                   ;store minute value
  4231                                                          mov     al,ERTCHOURREG                                  ;hour register
  4232                                                          out     ERTCREGPORT,al                                  ;select hour register
  4233                                                          in      al,ERTCDATAPORT                                 ;read hour register
  4234                                                          stosb                                                   ;store hour value
  4235                                                          mov     al,ERTCWEEKDAYREG                               ;weekday register
  4236                                                          out     ERTCREGPORT,al                                  ;select weekday register
  4237                                                          in      al,ERTCDATAPORT                                 ;read weekday register
  4238                                                          stosb                                                   ;store weekday value
  4239                                                          mov     al,ERTCDAYREG                                   ;day register
  4240                                                          out     ERTCREGPORT,al                                  ;select day register
  4241                                                          in      al,ERTCDATAPORT                                 ;read day register
  4242                                                          stosb                                                   ;store day value
  4243                                                          mov     al,ERTCMONTHREG                                 ;month register
  4244                                                          out     ERTCREGPORT,al                                  ;select month register
  4245                                                          in      al,ERTCDATAPORT                                 ;read month register
  4246                                                          stosb                                                   ;store month value
  4247                                                          mov     al,ERTCYEARREG                                  ;year register
  4248                                                          out     ERTCREGPORT,al                                  ;select year register
  4249                                                          in      al,ERTCDATAPORT                                 ;read year register
  4250                                                          stosb                                                   ;store year value
  4251                                                          mov     al,ERTCCENTURYREG                               ;century register
  4252                                                          out     ERTCREGPORT,al                                  ;select century register
  4253                                                          in      al,ERTCDATAPORT                                 ;read century register
  4254                                                          stosb                                                   ;store century value
  4255                                                          mov     al,ERTCSTATUSREG                                ;status register
  4256                                                          out     ERTCREGPORT,al                                  ;select status register
  4257                                                          in      al,ERTCDATAPORT                                 ;read status register
  4258                                                          test    al,ERTCBINARYVALS                               ;test if values are binary
  4259                                                          jnz     .20                                             ;skip ahead if binary values
  4260                                                          mov     esi,ebx                                         ;date-time structure address
  4261                                                          mov     edi,ebx                                         ;date-time structure address
  4262                                                          mov     ecx,8                                           ;loop counter
  4263                                  .10                     lodsb                                                   ;BCD value
  4264                                                          mov     ah,al                                           ;BCD value
  4265                                                          and     al,00001111b                                    ;low-order decimal zone
  4266                                                          and     ah,11110000b                                    ;hi-order decimal zone
  4267                                                          shr     ah,1                                            ;hi-order decimal * 8
  4268                                                          add     al,ah                                           ;low-order + hi-order * 8
  4269                                                          shr     ah,2                                            ;hi-order decimal * 2
  4270                                                          add     al,ah                                           ;low-order + hi-order * 10
  4271                                                          stosb                                                   ;replace BCD with binary
  4272                                                          loop    .10                                             ;next value
  4273                                  .20                     pop     es                                              ;restore non-volatile regs
  4274                                                          pop     edi                                             ;
  4275                                                          pop     esi                                             ;
  4276                                                          ret                                                     ;return
  4277                                  ;-----------------------------------------------------------------------------------------------------------------------
  4278                                  ;
  4279                                  ;       Routine:        ResetSystem
  4280                                  ;
  4281                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4282                                  ;
  4283                                  ;       Out:            N/A     This routine does not return.
  4284                                  ;
  4285                                  ;-----------------------------------------------------------------------------------------------------------------------
  4286                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4287                                                          loop    $                                               ;clear interrupts
  4288                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4289                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4290                                  .10                     sti                                                     ;enable maskable interrupts
  4291                                                          hlt                                                     ;halt until interrupt
  4292                                                          jmp     .10                                             ;repeat until reset kicks in
  4293                                  ;-----------------------------------------------------------------------------------------------------------------------
  4294                                  ;
  4295                                  ;       Routine:        SetKeyboardLamps
  4296                                  ;
  4297                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4298                                  ;
  4299                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4300                                  ;
  4301                                  ;-----------------------------------------------------------------------------------------------------------------------
  4302                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4303                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4304                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4305                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4306                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4307                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4308                                                          mov     al,bh                                           ;set/reset lamps value
  4309                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4310                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4311                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4312                                                          ret                                                     ;return
  4313                                  ;-----------------------------------------------------------------------------------------------------------------------
  4314                                  ;
  4315                                  ;       Routine:        WaitForKeyInBuffer
  4316                                  ;
  4317                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4318                                  ;
  4319                                  ;       Out:            ZF      1 = Input buffer ready
  4320                                  ;                               0 = Input buffer not ready after timeout
  4321                                  ;
  4322                                  ;-----------------------------------------------------------------------------------------------------------------------
  4323                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4324                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4325                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4326                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4327                                                          loopnz  .10                                             ;yes, repeat till timeout
  4328                                                          pop     ecx                                             ;restore non-volatile regs
  4329                                                          ret                                                     ;return
  4330                                  ;-----------------------------------------------------------------------------------------------------------------------
  4331                                  ;
  4332                                  ;       Routine:        WaitForKeyOutBuffer
  4333                                  ;
  4334                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4335                                  ;
  4336                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4337                                  ;                               0 = Output buffer empty after timeout
  4338                                  ;
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4341                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4342                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4343                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4344                                                          loopz   .10                                             ;loop until output buffer bit
  4345                                                          pop     ecx                                             ;restore non-volatile regs
  4346                                                          ret                                                     ;return
  4347                                  ;-----------------------------------------------------------------------------------------------------------------------
  4348                                  ;
  4349                                  ;       End of the Kernel Function Library
  4350                                  ;
  4351                                  ;-----------------------------------------------------------------------------------------------------------------------
  4352                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4353                                  ;=======================================================================================================================
  4354                                  ;
  4355                                  ;       Console Task
  4356                                  ;
  4357                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4358                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4359                                  ;       screen and responds to user commands.
  4360                                  ;
  4361                                  ;=======================================================================================================================
  4362                                  ;-----------------------------------------------------------------------------------------------------------------------
  4363                                  ;
  4364                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4365                                  ;
  4366                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4367                                  ;
  4368                                  ;-----------------------------------------------------------------------------------------------------------------------
  4369                                  section                 constack                                                ;console task stack
  4370                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4371                                  ;-----------------------------------------------------------------------------------------------------------------------
  4372                                  ;
  4373                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4374                                  ;
  4375                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4376                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4377                                  ;       16 descriptors. Six are initially defined.
  4378                                  ;
  4379                                  ;-----------------------------------------------------------------------------------------------------------------------
  4380                                  section                 conldt                                                  ;console local descriptors
  4381                                                          dq      004093004780007Fh                               ;04 TSS alias
  4382                                                          dq      004093004700007Fh                               ;0c LDT alias
  4383                                                          dq      00409300400006FFh                               ;14 stack
  4384                                                          dq      00CF93000000FFFFh                               ;1c data
  4385                                                          dq      00409B0050000FFFh                               ;24 code
  4386                                                          dq      00409300480007FFh                               ;2c message queue
  4387                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4388                                  ;-----------------------------------------------------------------------------------------------------------------------
  4389                                  ;
  4390                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4391                                  ;
  4392                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4393                                  ;       segment. CS to console code.
  4394                                  ;
  4395                                  ;-----------------------------------------------------------------------------------------------------------------------
  4396                                  section                 contss                                                  ;console task state segment
  4397                                                          dd      0                                               ;00 back-link tss
  4398                                                          dd      0700h                                           ;04 esp ring 0
  4399                                                          dd      0014h                                           ;08 ss ring 0
  4400                                                          dd      0700h                                           ;0c esp ring 1
  4401                                                          dd      0014h                                           ;10 es ring 1
  4402                                                          dd      0700h                                           ;14 esp ring 2
  4403                                                          dd      0014h                                           ;18 ss ring 2
  4404                                                          dd      0                                               ;1c cr ring 3
  4405                                                          dd      0                                               ;20 eip
  4406                                                          dd      0200h                                           ;24 eflags
  4407                                                          dd      0                                               ;28 eax
  4408                                                          dd      0                                               ;2c ecx
  4409                                                          dd      0                                               ;30 edx
  4410                                                          dd      0                                               ;34 ebx
  4411                                                          dd      0700h                                           ;38 esp ring 3
  4412                                                          dd      0                                               ;3c ebp
  4413                                                          dd      0                                               ;40 esi
  4414                                                          dd      0                                               ;44 edi
  4415                                                          dd      001Ch                                           ;48 es
  4416                                                          dd      0024h                                           ;4c cs
  4417                                                          dd      0014h                                           ;50 ss ring 3
  4418                                                          dd      001Ch                                           ;54 ds
  4419                                                          dd      0                                               ;58 fs
  4420                                                          dd      0                                               ;5c gs
  4421                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4422                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4423                                  ;-----------------------------------------------------------------------------------------------------------------------
  4424                                  ;
  4425                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4426                                  ;
  4427                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4428                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4429                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4430                                  ;       event.
  4431                                  ;
  4432                                  ;-----------------------------------------------------------------------------------------------------------------------
  4433                                  section                 conmque                                                 ;console message queue
  4434                                                          dd      8                                               ;head pointer
  4435                                                          dd      8                                               ;tail pointer
  4436                                                          times   510 dd 0                                        ;queue elements
  4437                                  ;-----------------------------------------------------------------------------------------------------------------------
  4438                                  ;
  4439                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4440                                  ;
  4441                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4442                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4443                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4444                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4445                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4446                                  ;       board input, echoing to the console screen and responding to user commands.
  4447                                  ;
  4448                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4449                                  ;
  4450                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4451                                  ;                               |  Real Mode Interrupt Vectors                  |
  4452                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4453                                  ;                               |  Reserved BIOS Memory Area                    |
  4454                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4455                                  ;                               |  Shared Kernel Memory Area                    |
  4456                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4457                                  ;                               |  Global Descriptor Table (GDT)                |
  4458                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4459                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4460                                  ;                       002000  +-----------------------------------------------+
  4461                                  ;                               |  Interrupt Handlers                           |
  4462                                  ;                               |  Kernel Function Library                      |
  4463                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4464                                  ;                               |  Console Task Stack Area                      |
  4465                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4466                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4467                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4468                                  ;                               |  Console Task Task State Segment (TSS)        |
  4469                                  ;                       004800  +-----------------------------------------------+
  4470                                  ;                               |  Console Task Message Queue                   |
  4471                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4472                                  ;                               |  Console Task Code                            |
  4473                                  ;                               |  Console Task Constants                       |
  4474                                  ;                       006000  +===============================================+
  4475                                  ;
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4478                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  4479                                  
  4480                                                          clearConsoleScreen                                      ;clear the console screen
  4481                                                          putConsoleString czTitle                                ;display startup message
  4482                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4483                                                          placeCursor                                             ;set CRT cursor location
  4484                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4485                                                          putConsoleString czNewLine                              ;newline
  4486                                  
  4487                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  4488                                                          mov     ebx,wzConsoleToken                              ;token buffer
  4489                                                          call    ConTakeToken                                    ;handle console input
  4490                                                          mov     edx,wzConsoleToken                              ;token buffer
  4491                                                          call    ConDetermineCommand                             ;determine command number
  4492                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4493                                                          jb      .20                                             ;yes, branch
  4494                                  
  4495                                                          putConsoleString czUnknownCommand                       ;display error message
  4496                                  
  4497                                                          jmp     .10                                             ;next command
  4498                                  .20                     shl     eax,2                                           ;index into jump table
  4499                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  4500                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4501                                                          call    eax                                             ;call command handler
  4502                                                          jmp     .10                                             ;next command
  4503                                  ;-----------------------------------------------------------------------------------------------------------------------
  4504                                  ;
  4505                                  ;       Routine:        ConInitializeData
  4506                                  ;
  4507                                  ;       Description:    This routine initializes console task variables.
  4508                                  ;
  4509                                  ;-----------------------------------------------------------------------------------------------------------------------
  4510                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  4511                                                          push    edi                                             ;
  4512                                                          push    es                                              ;
  4513                                  ;
  4514                                  ;       Initialize console work areas.
  4515                                  ;
  4516                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4517                                                          pop     es                                              ;... into extra segment register
  4518                                                          mov     edi,ECONDATA                                    ;OS console data address
  4519                                                          xor     al,al                                           ;initialization value
  4520                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  4521                                                          cld                                                     ;forward strings
  4522                                                          rep     stosb                                           ;initialize data
  4523                                  ;
  4524                                  ;       Restore and return.
  4525                                  ;
  4526                                                          pop     es                                              ;restore non-volatile regs
  4527                                                          pop     edi                                             ;
  4528                                                          pop     ecx                                             ;
  4529                                                          ret                                                     ;return
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531                                  ;
  4532                                  ;       Routine:        ConTakeToken
  4533                                  ;
  4534                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4535                                  ;
  4536                                  ;       In:             DS:EDX  source buffer address
  4537                                  ;                       DS:EBX  target buffer address
  4538                                  ;
  4539                                  ;       Out:            DS:EDX  source buffer address
  4540                                  ;                       DS:EBX  target buffer address
  4541                                  ;
  4542                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  4546                                                          push    edi                                             ;
  4547                                                          push    es                                              ;
  4548                                                          push    ds                                              ;load data segment selector ...
  4549                                                          pop     es                                              ;... into extra segment reg
  4550                                                          mov     esi,edx                                         ;source buffer address
  4551                                                          mov     edi,ebx                                         ;target buffer address
  4552                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4553                                                          cld                                                     ;forward strings
  4554                                  .10                     lodsb                                                   ;load byte
  4555                                                          cmp     al,EASCIISPACE                                  ;space?
  4556                                                          je      .10                                             ;yes, continue
  4557                                                          test    al,al                                           ;end of line?
  4558                                                          jz      .40                                             ;yes, branch
  4559                                  .20                     stosb                                                   ;store byte
  4560                                                          lodsb                                                   ;load byte
  4561                                                          test    al,al                                           ;end of line?
  4562                                                          jz      .40                                             ;no, continue
  4563                                                          cmp     al,EASCIISPACE                                  ;space?
  4564                                                          jne     .20                                             ;no, continue
  4565                                  .30                     lodsb                                                   ;load byte
  4566                                                          cmp     al,EASCIISPACE                                  ;space?
  4567                                                          je      .30                                             ;yes, continue
  4568                                                          dec     esi                                             ;pre-position
  4569                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4570                                                          mov     edi,edx                                         ;source buffer address
  4571                                  .50                     lodsb                                                   ;remaining byte
  4572                                                          stosb                                                   ;move to front of buffer
  4573                                                          test    al,al                                           ;end of line?
  4574                                                          jnz     .50                                             ;no, continue
  4575                                                          pop     es                                              ;restore non-volatile regs
  4576                                                          pop     edi                                             ;
  4577                                                          pop     esi                                             ;
  4578                                                          ret                                                     ;return
  4579                                  ;-----------------------------------------------------------------------------------------------------------------------
  4580                                  ;
  4581                                  ;       Routine:        ConDetermineCommand
  4582                                  ;
  4583                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4584                                  ;
  4585                                  ;       input:          DS:EDX  command address
  4586                                  ;
  4587                                  ;       output:         EAX     >=0     = command nbr
  4588                                  ;                               0       = unknown command
  4589                                  ;
  4590                                  ;-----------------------------------------------------------------------------------------------------------------------
  4591                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4592                                                          push    ecx                                             ;
  4593                                                          push    esi                                             ;
  4594                                                          push    edi                                             ;
  4595                                  
  4596                                                          upperCaseString                                         ;upper-case string at EDX
  4597                                  
  4598                                                          mov     esi,tConCmdTbl                                  ;commands table
  4599                                                          xor     edi,edi                                         ;intialize command number
  4600                                                          cld                                                     ;forward strings
  4601                                  .10                     lodsb                                                   ;command length
  4602                                                          movzx   ecx,al                                          ;command length
  4603                                                          jecxz   .20                                             ;branch if end of table
  4604                                                          mov     ebx,esi                                         ;table entry address
  4605                                                          add     esi,ecx                                         ;next table entry address
  4606                                  
  4607                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4608                                  
  4609                                                          jecxz   .20                                             ;branch if equal
  4610                                                          inc     edi                                             ;increment command nbr
  4611                                                          jmp     .10                                             ;repeat
  4612                                  .20                     mov     eax,edi                                         ;command number
  4613                                                          pop     edi                                             ;restore non-volatile regs
  4614                                                          pop     esi                                             ;
  4615                                                          pop     ecx                                             ;
  4616                                                          pop     ebx                                             ;
  4617                                                          ret                                                     ;return
  4618                                  ;-----------------------------------------------------------------------------------------------------------------------
  4619                                  ;
  4620                                  ;       Routine:        ConClear
  4621                                  ;
  4622                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4623                                  ;
  4624                                  ;-----------------------------------------------------------------------------------------------------------------------
  4625                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4626                                                          ret                                                     ;return
  4627                                  ;-----------------------------------------------------------------------------------------------------------------------
  4628                                  ;
  4629                                  ;       Routine:        ConDate
  4630                                  ;
  4631                                  ;       Description:    This routine handles the DATE command.
  4632                                  ;
  4633                                  ;-----------------------------------------------------------------------------------------------------------------------
  4634                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4635                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  4636                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4637                                                          putConsoleString  czNewLine                             ;write newline to console
  4638                                                          ret                                                     ;return
  4639                                  ;-----------------------------------------------------------------------------------------------------------------------
  4640                                  ;
  4641                                  ;       Routine:        ConDay
  4642                                  ;
  4643                                  ;       Description:    This routine handles the DAY command.
  4644                                  ;
  4645                                  ;-----------------------------------------------------------------------------------------------------------------------
  4646                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4647                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  4648                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4649                                                          putConsoleString  czNewLine                             ;write newline to console
  4650                                                          ret                                                     ;return
  4651                                  ;-----------------------------------------------------------------------------------------------------------------------
  4652                                  ;
  4653                                  ;       Routine:        ConExit
  4654                                  ;
  4655                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4656                                  ;
  4657                                  ;-----------------------------------------------------------------------------------------------------------------------
  4658                                  ConExit                 resetSystem                                             ;issue system reset
  4659                                                          ret                                                     ;return
  4660                                  ;-----------------------------------------------------------------------------------------------------------------------
  4661                                  ;
  4662                                  ;       Routine:        ConHour
  4663                                  ;
  4664                                  ;       Description:    This routine Handles the HOUR command.
  4665                                  ;
  4666                                  ;-----------------------------------------------------------------------------------------------------------------------
  4667                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4668                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  4669                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4670                                                          putConsoleString  czNewLine                             ;write newline to console
  4671                                                          ret                                                     ;return
  4672                                  ;-----------------------------------------------------------------------------------------------------------------------
  4673                                  ;
  4674                                  ;       Routine:        ConInt6
  4675                                  ;
  4676                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4677                                  ;
  4678                                  ;-----------------------------------------------------------------------------------------------------------------------
  4679                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  4680                                                          ret                                                     ;return (not executed)
  4681                                  ;-----------------------------------------------------------------------------------------------------------------------
  4682                                  ;
  4683                                  ;       Routine:        ConMem
  4684                                  ;
  4685                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4686                                  ;
  4687                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4688                                  ;
  4689                                  ;-----------------------------------------------------------------------------------------------------------------------
  4690                                  ConMem                  push    ebx                                             ;save non-volatile regs
  4691                                                          push    esi                                             ;
  4692                                                          push    edi                                             ;
  4693                                  ;
  4694                                  ;                       update the source address if a parameter is given
  4695                                  ;
  4696                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4697                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4698                                                          call    ConTakeToken                                    ;take first param as token
  4699                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4700                                                          je      .10                                             ;no, branch
  4701                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4702                                  
  4703                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4704                                  
  4705                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4706                                  ;
  4707                                  ;                       setup source address and row count
  4708                                  ;
  4709                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4710                                                          xor     ecx,ecx                                         ;zero register
  4711                                                          mov     cl,16                                           ;row count
  4712                                  ;
  4713                                  ;                       start the row with the source address in hexadecimal
  4714                                  ;
  4715                                  .20                     push    ecx                                             ;save remaining rows
  4716                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4717                                                          mov     edx,edi                                         ;output buffer address
  4718                                                          mov     ecx,esi                                         ;console memory address
  4719                                  
  4720                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4721                                  
  4722                                                          add     edi,8                                           ;end of memory addr hexnum
  4723                                                          mov     al,' '                                          ;ascii space
  4724                                                          stosb                                                   ;store delimiter
  4725                                  ;
  4726                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4727                                  ;
  4728                                                          xor     ecx,ecx                                         ;zero register
  4729                                                          mov     cl,16                                           ;loop count
  4730                                  .30                     push    ecx                                             ;save loop count
  4731                                                          lodsb                                                   ;memory byte
  4732                                                          mov     ah,al                                           ;memory byte
  4733                                                          shr     al,4                                            ;high-order in bits 3-0
  4734                                                          or      al,30h                                          ;apply ascii numeric zone
  4735                                                          cmp     al,3ah                                          ;numeric range?
  4736                                                          jb      .40                                             ;yes, skip ahead
  4737                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4738                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4739                                                          mov     al,ah                                           ;low-order in bits 3-0
  4740                                                          and     al,0fh                                          ;mask out high-order bits
  4741                                                          or      al,30h                                          ;apply ascii numeric zone
  4742                                                          cmp     al,3ah                                          ;numeric range?
  4743                                                          jb      .50                                             ;yes, skip ahead
  4744                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4745                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4746                                                          mov     al,' '                                          ;ascii space
  4747                                                          stosb                                                   ;store ascii space delimiter
  4748                                                          pop     ecx                                             ;loop count
  4749                                                          loop    .30                                             ;next
  4750                                  ;
  4751                                  ;                       output printable ASCII character section for the row
  4752                                  ;
  4753                                                          sub     esi,16                                          ;reset source pointer
  4754                                                          mov     cl,16                                           ;loop count
  4755                                  .60                     lodsb                                                   ;source byte
  4756                                                          cmp     al,32                                           ;printable? (low-range test)
  4757                                                          jb      .70                                             ;no, skip ahead
  4758                                                          cmp     al,128                                          ;printable? (high-range test)
  4759                                                          jb      .80                                             ;yes, skip ahead
  4760                                  .70                     mov     al,' '                                          ;display space instead of printable
  4761                                  .80                     stosb                                                   ;store printable ascii byte
  4762                                                          loop    .60                                             ;next source byte
  4763                                                          xor     al,al                                           ;nul-terminator
  4764                                                          stosb                                                   ;terminate output line
  4765                                  ;
  4766                                  ;                       display constructed output buffer and newline
  4767                                  ;
  4768                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4769                                                          putConsoleString czNewLine                              ;display new line
  4770                                  ;
  4771                                  ;                       repeat until all lines displayed and preserve source address
  4772                                  ;
  4773                                                          pop     ecx                                             ;remaining rows
  4774                                                          loop    .20                                             ;next row
  4775                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4776                                                          pop     edi                                             ;restore regs
  4777                                                          pop     esi                                             ;
  4778                                                          pop     ebx                                             ;
  4779                                                          ret                                                     ;return
  4780                                  ;-----------------------------------------------------------------------------------------------------------------------
  4781                                  ;
  4782                                  ;       Routine:        ConMinute
  4783                                  ;
  4784                                  ;       Description:    This routine Handles the MINUTE command.
  4785                                  ;
  4786                                  ;-----------------------------------------------------------------------------------------------------------------------
  4787                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4788                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  4789                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4790                                                          putConsoleString  czNewLine                             ;write newline to console
  4791                                                          ret                                                     ;return
  4792                                  ;-----------------------------------------------------------------------------------------------------------------------
  4793                                  ;
  4794                                  ;       Routine:        ConMonth
  4795                                  ;
  4796                                  ;       Description:    This routine Handles the MONTH command.
  4797                                  ;
  4798                                  ;-----------------------------------------------------------------------------------------------------------------------
  4799                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4800                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  4801                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4802                                                          putConsoleString  czNewLine                             ;write newline to console
  4803                                                          ret                                                     ;return
  4804                                  ;-----------------------------------------------------------------------------------------------------------------------
  4805                                  ;
  4806                                  ;       Routine:        ConMonthName
  4807                                  ;
  4808                                  ;       Description:    This routine Handles the MONTH.NAME command.
  4809                                  ;
  4810                                  ;-----------------------------------------------------------------------------------------------------------------------
  4811                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  4812                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  4813                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  4814                                                          putConsoleString   czNewLine                            ;write newline to console
  4815                                                          ret                                                     ;return
  4816                                  ;-----------------------------------------------------------------------------------------------------------------------
  4817                                  ;
  4818                                  ;       Routine:        ConSecond
  4819                                  ;
  4820                                  ;       Description:    This routine Handles the SECOND command.
  4821                                  ;
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4824                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  4825                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4826                                                          putConsoleString  czNewLine                             ;write newline to console
  4827                                                          ret                                                     ;return
  4828                                  ;-----------------------------------------------------------------------------------------------------------------------
  4829                                  ;
  4830                                  ;       Routine:        ConTime
  4831                                  ;
  4832                                  ;       Description:    This routine Handles the TIME command.
  4833                                  ;
  4834                                  ;-----------------------------------------------------------------------------------------------------------------------
  4835                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4836                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  4837                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4838                                                          putConsoleString  czNewLine                             ;write newline to console
  4839                                                          ret                                                     ;return
  4840                                  ;-----------------------------------------------------------------------------------------------------------------------
  4841                                  ;
  4842                                  ;       Routine:        ConVersion
  4843                                  ;
  4844                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4845                                  ;
  4846                                  ;-----------------------------------------------------------------------------------------------------------------------
  4847                                  ConVersion              putConsoleString czTitle                                ;display version message
  4848                                                          ret                                                     ;return
  4849                                  ;-----------------------------------------------------------------------------------------------------------------------
  4850                                  ;
  4851                                  ;       Routine:        ConWeekday
  4852                                  ;
  4853                                  ;       Description:    This routine handles the WEEKDAY command.
  4854                                  ;
  4855                                  ;-----------------------------------------------------------------------------------------------------------------------
  4856                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4857                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  4858                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4859                                                          putConsoleString  czNewLine                             ;write newline to console
  4860                                                          ret                                                     ;return
  4861                                  ;-----------------------------------------------------------------------------------------------------------------------
  4862                                  ;
  4863                                  ;       Routine:        ConWeekdayName
  4864                                  ;
  4865                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  4866                                  ;
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  4869                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  4870                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  4871                                                          putConsoleString     czNewLine                                  ;write newline to console
  4872                                                          ret                                                             ;return
  4873                                  ;-----------------------------------------------------------------------------------------------------------------------
  4874                                  ;
  4875                                  ;       Routine:        ConYear
  4876                                  ;
  4877                                  ;       Description:    This routine Handles the YEAR command.
  4878                                  ;
  4879                                  ;-----------------------------------------------------------------------------------------------------------------------
  4880                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4881                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  4882                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4883                                                          putConsoleString  czNewLine                             ;write newline to console
  4884                                                          ret                                                     ;return
  4885                                  ;-----------------------------------------------------------------------------------------------------------------------
  4886                                  ;
  4887                                  ;       Routine:        ConYearIsLeap
  4888                                  ;
  4889                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  4890                                  ;
  4891                                  ;-----------------------------------------------------------------------------------------------------------------------
  4892                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4893                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  4894                                  
  4895                                                          jecxz   .10                                             ;branch if not leap
  4896                                  
  4897                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  4898                                  
  4899                                                          jmp     .20                                             ;continue
  4900                                  
  4901                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  4902                                  .20                     ret                                                     ;return
  4903                                  ;-----------------------------------------------------------------------------------------------------------------------
  4904                                  ;
  4905                                  ;       Tables
  4906                                  ;
  4907                                  ;-----------------------------------------------------------------------------------------------------------------------
  4908                                                                                                                  ;---------------------------------------
  4909                                                                                                                  ;  Command Jump Table
  4910                                                                                                                  ;---------------------------------------
  4911                                  tConJmpTbl              equ     $                                               ;command jump table
  4912                                                          dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  4913                                                          dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  4914                                                          dd      ConMonthName    - ConCode                       ;month.name command routine offset
  4915                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4916                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4917                                                          dd      ConWeekday      - ConCode                       ;weekday command routine offset
  4918                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4919                                                          dd      ConMinute       - ConCode                       ;minute command routine offset
  4920                                                          dd      ConSecond       - ConCode                       ;second command routine offset
  4921                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4922                                                          dd      ConMonth        - ConCode                       ;month command routine offset
  4923                                                          dd      ConDate         - ConCode                       ;date command routine offset
  4924                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4925                                                          dd      ConHour         - ConCode                       ;hour command routine offset
  4926                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4927                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4928                                                          dd      ConTime         - ConCode                       ;time command routine offset
  4929                                                          dd      ConYear         - ConCode                       ;year command routine offset
  4930                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4931                                                          dd      ConDay          - ConCode                       ;day command routine offset
  4932                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4933                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4934                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4935                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4936                                                                                                                  ;---------------------------------------
  4937                                                                                                                  ;  Command Name Table
  4938                                                                                                                  ;---------------------------------------
  4939                                  tConCmdTbl              equ     $                                               ;command name table
  4940                                                          db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  4941                                                          db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  4942                                                          db      11,"MONTH.NAME",0                               ;month.name command
  4943                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4944                                                          db      8,"VERSION",0                                   ;version command
  4945                                                          db      8,"WEEKDAY",0                                   ;weekday command
  4946                                                          db      7,"MEMORY",0                                    ;memory command
  4947                                                          db      7,"MINUTE",0                                    ;minute command
  4948                                                          db      7,"SECOND",0                                    ;second command
  4949                                                          db      6,"CLEAR",0                                     ;clear command
  4950                                                          db      6,"MONTH",0                                     ;month command
  4951                                                          db      5,"DATE",0                                      ;date command
  4952                                                          db      5,"EXIT",0                                      ;exit command
  4953                                                          db      5,"HOUR",0                                      ;hour command
  4954                                                          db      5,"INT6",0                                      ;int6 command
  4955                                                          db      5,"QUIT",0                                      ;quit command
  4956                                                          db      5,"TIME",0                                      ;time command
  4957                                                          db      5,"YEAR",0                                      ;year command
  4958                                                          db      4,"CLS",0                                       ;cls command
  4959                                                          db      4,"DAY",0                                       ;day command
  4960                                                          db      4,"MEM",0                                       ;mem command
  4961                                                          db      4,"VER",0                                       ;ver command
  4962                                                          db      0                                               ;end of table
  4963                                  ;-----------------------------------------------------------------------------------------------------------------------
  4964                                  ;
  4965                                  ;       Constants
  4966                                  ;
  4967                                  ;-----------------------------------------------------------------------------------------------------------------------
  4968                                  czNewLine               db      13,10,0                                         ;new line string
  4969                                  czPrompt                db      ":",0                                           ;prompt string
  4970                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4971                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4972                                  czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  4973                                  czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  4974                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4975                                  %endif
  4976                                  %ifdef BUILDDISK
  4977                                  ;-----------------------------------------------------------------------------------------------------------------------
  4978                                  ;
  4979                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4980                                  ;
  4981                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4982                                  ;
  4983                                  ;-----------------------------------------------------------------------------------------------------------------------
  4984                                  section                 unused                                                  ;unused disk space
  4985                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4986                                  %endif
  4987                                  ;=======================================================================================================================
  4988                                  ;
  4989                                  ;       End of Program Code
  4990                                  ;
  4991                                  ;=======================================================================================================================
