     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.010
     6                                  ;
     7                                  ;       Description:    In this sample program, logic is added to allocate and free memory blocks at the kernel level.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMEM...         Memory Management values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   317                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   318                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   319                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   320                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   321                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Standards-Based Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       ASCII                                                                   EASCII...
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   333                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   334                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   335                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   336                                  EASCIISPACE             equ     020h                                            ;space
   337                                  EASCIIUPPERA            equ     041h                                            ;'A'
   338                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   339                                  EASCIILOWERA            equ     061h                                            ;'a'
   340                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   341                                  EASCIITILDE             equ     07Eh                                            ;'~'
   342                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   343                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   344                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   345                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   346                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   347                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   348                                  EASCIICASE              equ     00100000b                                       ;case bit
   349                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;       Operating System Values
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;
   357                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   358                                  ;
   359                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   360                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   361                                  ;
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   364                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   365                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   366                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   367                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   368                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   369                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;       Console Constants                                                       ECON...
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ECONCOLS                equ     80                                              ;columns per row
   374                                  ECONROWS                equ     24                                              ;console rows
   375                                  ECONOIAROW              equ     24                                              ;operator information area row
   376                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   377                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   378                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   379                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   380                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   385                                  EGDTCGA                 equ     020h                                            ;cga video selector
   386                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   387                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   388                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   389                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   390                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   391                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ;       Keyboard Flags                                                          EKEYF...
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   396                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   397                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   398                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   399                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   400                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   401                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   402                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   403                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   404                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   405                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;       Kernel Constants                                                        EKRN...
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   410                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   411                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   412                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   413                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   414                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;       Memory Management Constants                                             EMEM...
   421                                  ;-----------------------------------------------------------------------------------------------------------------------
   422                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   423                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   424                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   425                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  ;       Message Identifiers                                                     EMSG...
   428                                  ;-----------------------------------------------------------------------------------------------------------------------
   429                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   430                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   431                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   432                                  ;=======================================================================================================================
   433                                  ;
   434                                  ;       Structures
   435                                  ;
   436                                  ;=======================================================================================================================
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;
   439                                  ;       MEMBLOCK
   440                                  ;
   441                                  ;       The MEMBLOCK structure defines a memory block.
   442                                  ;
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  struc                   MEMBLOCK
   445 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   446 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   447 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   448 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   449 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   450 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   451 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   452 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   453                                  EMEMBLOCKLEN            equ     ($-.signature)
   454                                  endstruc
   455                                  ;-----------------------------------------------------------------------------------------------------------------------
   456                                  ;
   457                                  ;       MEMROOT
   458                                  ;
   459                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   460                                  ;
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  struc                   MEMROOT
   463 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   464 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   465 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   466 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   467 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   468 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   469                                  EMEMROOTLEN             equ     ($-.firstcontig)
   470                                  endstruc
   471                                  ;-----------------------------------------------------------------------------------------------------------------------
   472                                  ;
   473                                  ;       MQUEUE
   474                                  ;
   475                                  ;       The MQUEUE structure maps memory used for a message queue.
   476                                  ;
   477                                  ;-----------------------------------------------------------------------------------------------------------------------
   478                                  struc                   MQUEUE
   479 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   480 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   481 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   482                                  endstruc
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;       OSDATA
   486                                  ;
   487                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   488                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   489                                  ;
   490                                  ;-----------------------------------------------------------------------------------------------------------------------
   491                                  struc                   OSDATA
   492 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   493 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   494 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   495 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   496 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   497 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   498 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   499 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   500 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   501 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   502 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   503 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   504 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   505 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   506 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   507 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   508 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   509 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   510 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   511 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   512 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   513 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   514 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   515 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   516 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   517 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   518 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   519 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   520 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   521 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   522 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   523 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   524 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   525 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   526 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   527 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   528 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   529 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   530 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   531 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   532 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   533 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   534 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   535 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   536 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   537 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   538 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   539 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   540 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   541 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   542 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   543 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   544 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   545 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   546 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   547 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   548 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   549 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   550 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   551 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   552 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   553 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   554 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   555 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   556 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   557 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   558 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   559 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   560 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   561 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   562 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   563 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   564 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   565 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   566 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   567 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   568 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   569 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   570 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   571 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   572 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   573 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   574 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   575 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   576 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   577 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   578 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   579 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   580 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   581 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   582 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   583 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   584 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   585 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   586 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   587 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   588 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   589 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   590 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   591 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   592 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   593                                  ;-----------------------------------------------------------------------------------------------------------------------
   594                                  ;
   595                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   596                                  ;
   597                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   598                                  ;
   599                                  ;-----------------------------------------------------------------------------------------------------------------------
   600                                  ECONDATA                equ     ($)
   601 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   602 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   603 00000808 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   604 00000820 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   605 00000821 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   606 00000822 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   607 00000823 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   608 00000824 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   609 00000825 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   610 00000826 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   611 00000827 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   612 00000828 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   613 00000829 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   614 0000082A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   615 0000082B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   616 0000082C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   617 0000087C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   618 000008CC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   619                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   620                                  ;-----------------------------------------------------------------------------------------------------------------------
   621                                  ;
   622                                  ;       End of OS Variables
   623                                  ;
   624                                  ;-----------------------------------------------------------------------------------------------------------------------
   625                                  endstruc
   626                                  ;-----------------------------------------------------------------------------------------------------------------------
   627                                  ;
   628                                  ;       Macros
   629                                  ;
   630                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   631                                  ;
   632                                  ;-----------------------------------------------------------------------------------------------------------------------
   633                                  %macro                  mint    1
   634                                  _%1                     equ     ($-$$) / EX86DESCLEN
   635                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   636                                  %endmacro
   637                                  %macro                  mtrap   1
   638                                  _%1                     equ     ($-$$) / EX86DESCLEN
   639                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   640                                  %endmacro
   641                                  %macro                  menter  1
   642                                  ?%1                     equ     ($-$$)
   643                                  %endmacro
   644                                  %macro                  tsvce   1
   645                                  e%1                     equ     ($-tsvc)/4
   646                                                          dd      %1
   647                                  %endmacro
   648                                  %ifdef BUILDBOOT
   649                                  ;=======================================================================================================================
   650                                  ;
   651                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   652                                  ;
   653                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   654                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   655                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   656                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   657                                  ;
   658                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   659                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   660                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   661                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   662                                  ;       immediately followed by a disk parameter table.
   663                                  ;
   664                                  ;=======================================================================================================================
   665                                                          cpu     8086                                            ;assume minimal CPU
   666                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   667                                                          bits    16                                              ;16-bit code at power-up
   668                                  %ifdef BUILDPREP
   669 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   670                                  %else
   671                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   672                                  %endif
   673                                  ;-----------------------------------------------------------------------------------------------------------------------
   674                                  ;
   675                                  ;       Disk Parameter Table
   676                                  ;
   677                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   678                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   679                                  ;
   680                                  ;-----------------------------------------------------------------------------------------------------------------------
   681 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   682 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   683 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   684 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   685 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   686 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   687 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   688 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   689 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   690                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   691 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   692 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   693 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   694                                  ;
   695                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   696                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   697                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   698                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   699                                  ;       given several possible starting values for CS:IP.
   700                                  ;
   701                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   702 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   703                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   704 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   705 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   706 00000025 B104                                            mov     cl,4                                            ;shift count
   707 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   708 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   709 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   710                                  ;
   711                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   712                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   713                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   714                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   715                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   716                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   717                                  ;
   718 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   719 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   720 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   721 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   722 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   723                                  ;
   724                                  ;       Our boot addressability is now set up according to the following diagram.
   725                                  ;
   726                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   727                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   728                                  ;                               |  256 = 100h bytes                             |
   729                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   730                                  ;                               |  Boot Sector (vstart=0100h)                   |
   731                                  ;                               |  1 sector = 512 = 200h bytes                  |
   732                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   733                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   734                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   735                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   736                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   737                                  ;                               |  2 sectors = 1024 = 400h bytes
   738                                  ;                       009400  +-----------------------------------------------+ DS:1900
   739                                  ;
   740                                  ;       On entry, DL indicates the drive being booted from.
   741                                  ;
   742 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   743                                  ;
   744                                  ;       Compute directory i/o buffer address.
   745                                  ;
   746 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   747 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   748 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   749 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   750                                  ;
   751                                  ;       Compute segment where os.com will be loaded.
   752                                  ;
   753 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   754 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   755 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   756 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   757                                  ;
   758                                  ;       Set the video mode to 80 column, 25 row, text.
   759                                  ;
   760 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   761 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   762                                  ;
   763                                  ;       Write a message to the console so we know we have our addressability established.
   764                                  ;
   765 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   766 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   767                                  ;
   768                                  ;       Initialize the number of directory sectors to search.
   769                                  ;
   770 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   771 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   772                                  ;
   773                                  ;       Compute number of directory sectors and initialize overhead count.
   774                                  ;
   775 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   776 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   777 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   778 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   779                                  ;
   780                                  ;       Compute directory entries per sector.
   781                                  ;
   782 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   783 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   784 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   785                                  ;
   786                                  ;       Compute first logical directory sector and update overhead count.
   787                                  ;
   788 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   789 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   790 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   791 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   792 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   793 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   794                                  ;
   795                                  ;       Read directory sector.
   796                                  ;
   797 0000008E B001                    .30                     mov     al,1                                            ;sector count
   798 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   799 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   800 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   801                                  ;
   802                                  ;       Setup variables to search this directory sector.
   803                                  ;
   804 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   805 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   806 000000A1 7603                                            jna     .40                                             ;no, continue
   807 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   808 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   809 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   810 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   811                                  ;
   812                                  ;       Loop through directory sectors searching for kernel program.
   813                                  ;
   814 000000B1 56                      .50                     push    si                                              ;save kernel name address
   815 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   816 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   817 000000B6 FC                                              cld                                                     ;forward strings
   818 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   819 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   820 000000BA 5E                                              pop     si                                              ;restore kernel name address
   821 000000BB 7418                                            je      .60                                             ;exit loop if found
   822 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   823 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   824 000000C2 75ED                                            jnz     .50                                             ;next entry
   825                                  ;
   826                                  ;       Repeat search if we are not at the end of the directory.
   827                                  ;
   828 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   829 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   830 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   831 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   832 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   833                                  ;
   834                                  ;       If we find the kernel program in the directory, read the FAT.
   835                                  ;
   836 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   837 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   838 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   839 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   840 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   841 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   842                                  ;
   843                                  ;       Get the starting cluster of the kernel program and target address.
   844                                  ;
   845 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   846 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   847                                  ;
   848                                  ;       Read each program cluster into RAM.
   849                                  ;
   850 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   851 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   852 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   853 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   854 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   855 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   856 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   857 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   858 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   859                                  ;
   860                                  ;       Update buffer pointer for next cluster.
   861                                  ;
   862 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   863 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   864 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   865 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   866 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   867                                  ;
   868                                  ;       Compute next cluster number.
   869                                  ;
   870 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   871 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   872 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   873 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   874 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   875 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   876 00000120 83E701                                          and     di,1                                            ;get low bit
   877 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   878 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   879 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   880                                  ;
   881                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   882                                  ;
   883 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   884 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   885 00000130 B104                                            mov     cl,4                                            ;shift count
   886 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   887 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   888 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   889 0000013A 75B2                                            jne     .70                                             ;no, continue
   890                                  ;
   891                                  ;       Transfer control to the operating system program.
   892                                  ;
   893 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   894 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   895 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   896                                  ;
   897                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   898                                  ;
   899 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   900 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   901 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   902 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   903 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   904 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   905 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   906 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   907 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   908 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   909                                  ;
   910                                  ;       Try maxtries times to read sector.
   911                                  ;
   912 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   913 00000160 53                      .10                     push    bx                                              ;save buffer address
   914 00000161 51                                              push    cx                                              ;save retry count
   915 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   916 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   917 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   918 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   919 0000016F 59                                              pop     cx                                              ;restore retry count
   920 00000170 5B                                              pop     bx                                              ;restore buffer address
   921 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   922 00000173 E2EB                                            loop    .10                                             ;retry
   923                                  ;
   924                                  ;       Handle disk error: convert to ASCII and store in error string.
   925                                  ;
   926 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   927 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   928 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   929 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   930 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   931 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   932 00000183 7203                                            jb      .20                                             ;continue if numeral
   933 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   934 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   935 0000018A 7203                                            jb      .30                                             ;continue if numeral
   936 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   937 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   938 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   939 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   940                                  ;
   941                                  ;       Wait for a key press.
   942                                  ;
   943 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   944 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   945 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   946 0000019E FB                                              sti                                                     ;enable maskable interrupts
   947 0000019F F4                                              hlt                                                     ;wait for interrupt
   948 000001A0 EBF6                                            jmp     .10                                             ;repeat
   949                                  ;
   950                                  ;       Reset the system.
   951                                  ;
   952 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   953 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   954 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   955 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   956 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   957                                  ;
   958                                  ;       Display text message.
   959                                  ;
   960 000001AA FC                      BootPrint               cld                                                     ;forward strings
   961 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   962 000001AC 84C0                                            test    al,al                                           ;end of string?
   963 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   964 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   965 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   966 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   967 000001B6 C3                      BootReturn              ret                                                     ;return
   968                                  ;-----------------------------------------------------------------------------------------------------------------------
   969                                  ;
   970                                  ;       Constants
   971                                  ;
   972                                  ;-----------------------------------------------------------------------------------------------------------------------
   973 000001B7 90                                              align   2
   974 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   975 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   975 000001C3 4F4D               
   976 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   976 000001CE 530D0A00           
   977 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   977 000001DB 7220               
   978 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   979 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   979 000001E9 6700               
   980                                  ;-----------------------------------------------------------------------------------------------------------------------
   981                                  ;
   982                                  ;       Work Areas
   983                                  ;
   984                                  ;-----------------------------------------------------------------------------------------------------------------------
   985 000001EB 90                                              align   2
   986 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   987 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   988 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   989 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   990 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   991                                  wwReadCountCommand      equ     $                                               ;read count and command
   992 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   993 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   994                                  wwDriveHead             equ     $                                               ;drive, head (word)
   995 000001F8 00                      wbDrive                 db      0                                               ;drive
   996 000001F9 00                      wbHead                  db      0                                               ;head
   997                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   998 000001FA 00                                              db      0                                               ;sector
   999 000001FB 00                      wbTrack                 db      0                                               ;track
  1000 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1001 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1002                                  %endif
  1003                                  %ifdef BUILDPREP
  1004                                  ;=======================================================================================================================
  1005                                  ;
  1006                                  ;       Diskette Preparation Code
  1007                                  ;
  1008                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1009                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1010                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1011                                  ;
  1012                                  ;=======================================================================================================================
  1013                                  ;
  1014                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1015                                  ;
  1016 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1017 00000203 E8A4FF                                          call    BootPrint                                       ;display message
  1018                                  ;
  1019                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1020                                  ;
  1021 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1022 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
  1023 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
  1024 0000020C FB                                              sti                                                     ;enable interrupts
  1025 0000020D F4                                              hlt                                                     ;wait for interrupt
  1026 0000020E EBF6                                            jmp     .10                                             ;repeat
  1027 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1028 00000212 7407                                            je      .30                                             ;yes, branch
  1029 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1030 00000216 75EE                                            jne     .10                                             ;no, repeat
  1031 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
  1032                                  ;
  1033                                  ;       Display writing-sector message and patch the JMP instruction.
  1034                                  ;
  1035 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1036 0000021E E889FF                                          call    BootPrint                                       ;display message
  1037 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
  1038 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
  1039 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
  1040                                  ;
  1041                                  ;       Try to read the boot sector.
  1042                                  ;
  1043 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1044 0000022C 51                      .40                     push    cx                                              ;save remaining tries
  1045 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
  1046 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1047 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1048 00000236 B001                                            mov     al,1                                            ;one sector
  1049 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1050 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1051 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1052 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1053 0000023F E2EB                                            loop    .40                                             ;try again
  1054 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1055 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1056                                  ;
  1057                                  ;       Copy diskette parms from input buffer to output buffer.
  1058                                  ;
  1059 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1060 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1061 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1062 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1063 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1064 00000255 FC                                              cld                                                     ;forward string copies
  1065 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1066                                  ;
  1067                                  ;       Try to write boot sector to diskette.
  1068                                  ;
  1069 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1070 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1071 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1072 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1073 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1074 00000265 B001                                            mov     al,1                                            ;one sector
  1075 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1076 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1077 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1078 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1079 0000026E E2EB                                            loop    .60                                             ;try again
  1080 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1081                                  ;
  1082                                  ;       Convert the error code to ASCII and display the error message.
  1083                                  ;
  1084 00000273 50                      .70                     push    ax                                              ;save error code
  1085 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1086 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1087 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1088 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1089 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1090 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1091 00000282 7203                                            jb      .80                                             ;yes, continue
  1092 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1093 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1094 00000289 7202                                            jb      .90                                             ;yes, continue
  1095 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1096 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1097 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1098 00000293 58                                              pop     ax                                              ;restore error code
  1099                                  ;
  1100                                  ;       Display the completion message.
  1101                                  ;
  1102 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1103 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1104 00000299 3C00                                            cmp     al,0                                            ;success?
  1105 0000029B 7426                                            je      .110                                            ;yes, continue
  1106 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1107 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1108 000002A2 741F                                            je      .110                                            ;yes, continue
  1109 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1110 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1111 000002A9 7418                                            je      .110                                            ;yes, continue
  1112 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1113 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1114 000002B0 7411                                            je      .110                                            ;yes, continue
  1115 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1116 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1117 000002B7 740A                                            je      .110                                            ;yes, continue
  1118 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1119 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1120 000002BE 7403                                            je      .110                                            ;yes, continue
  1121 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1122 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1123 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1124 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1125 000002CB C3                                              ret                                                     ;return (should not execute)
  1126                                  ;-----------------------------------------------------------------------------------------------------------------------
  1127                                  ;
  1128                                  ;       Diskette Preparation Messages
  1129                                  ;
  1130                                  ;-----------------------------------------------------------------------------------------------------------------------
  1131 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1131 000002D5 5320426F6F742D4469-
  1131 000002DE 736B65747465205072-
  1131 000002E7 657061726174696F6E-
  1131 000002F0 2050726F6772616D   
  1132 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1132 00000301 687420284329203230-
  1132 0000030A 31302D323031382044-
  1132 00000313 61766964204A2E2057-
  1132 0000031C 616C6C696E672E2041-
  1132 00000325 6C6C20726967687473-
  1132 0000032E 207265736572766564-
  1132 00000337 2E                 
  1133 00000338 0D0A                                            db      13,10
  1134 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1134 00000343 6F6772616D206F7665-
  1134 0000034C 727772697465732074-
  1134 00000355 686520626F6F742073-
  1134 0000035E 6563746F72206F6620-
  1134 00000367 61206469736B657474-
  1134 00000370 652077697468207374-
  1134 00000379 617274757020636F64-
  1134 00000382 652074686174       
  1135 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1135 00000391 616420746865206F70-
  1135 0000039A 65726174696E672073-
  1135 000003A3 797374656D20696E74-
  1135 000003AC 6F206D656D6F727920-
  1135 000003B5 7768656E2074686520-
  1135 000003BE 636F6D707574657220-
  1135 000003C7 697320726573746172-
  1135 000003D0 7465642E           
  1136 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1136 000003DD 6565642C20706C6163-
  1136 000003E6 65206120666F726D61-
  1136 000003EF 74746564206469736B-
  1136 000003F8 6574746520696E746F-
  1136 00000401 20647269766520413A-
  1136 0000040A 20616E642070726573-
  1136 00000413 732074686520456E74-
  1136 0000041C 6572206B65792E     
  1137 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1137 0000042C 20746869732070726F-
  1137 00000435 6772616D2077697468-
  1137 0000043E 6F7574207072657061-
  1137 00000447 72696E672061206469-
  1137 00000450 736B657474652C2070-
  1137 00000459 726573732074686520-
  1137 00000462 457363617065206B65-
  1137 0000046B 792E               
  1138 0000046D 0D0A00                                          db      13,10,0
  1139 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1139 00000479 2074686520626F6F74-
  1139 00000482 20736563746F722074-
  1139 0000048B 6F2074686520646973-
  1139 00000494 6B65747465202E2E2E 
  1140 0000049D 0D0A00                                          db      13,10,0
  1141 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1141 000004A9 6F722D636F6465202E-
  1141 000004B2 2E2077617320726574-
  1141 000004BB 75726E65642066726F-
  1141 000004C4 6D207468652042494F-
  1141 000004CD 53207768696C652072-
  1141 000004D6 656164696E67206672-
  1141 000004DF 6F6D20746865206469-
  1141 000004E8 736B2E             
  1142 000004EB 0D0A00                                          db      13,10,0
  1143 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1143 000004F7 6F722D636F6465202E-
  1143 00000500 2E2077617320726574-
  1143 00000509 75726E65642066726F-
  1143 00000512 6D207468652042494F-
  1143 0000051B 53207768696C652077-
  1143 00000524 726974696E6720746F-
  1143 0000052D 20746865206469736B-
  1143 00000536 2E                 
  1144 00000537 0D0A00                                          db      13,10,0
  1145 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1145 00000543 742D736563746F7220-
  1145 0000054C 776173207772697474-
  1145 00000555 656E20746F20746865-
  1145 0000055E 206469736B65747465-
  1145 00000567 2E204265666F726520-
  1145 00000570 626F6F74696E672079-
  1145 00000579 6F757220636F6D7075-
  1145 00000582 7465722077697468   
  1146 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1146 00000593 736B657474652C206D-
  1146 0000059C 616B65207375726520-
  1146 000005A5 746861742074686520-
  1146 000005AE 66696C65204F532E43-
  1146 000005B7 4F4D20697320636F70-
  1146 000005C0 696564206F6E746F20-
  1146 000005C9 746865206469736B65-
  1146 000005D2 7474652E           
  1147 000005D6 0D0A00                                          db      13,10,0
  1148 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1148 000005E2 76616C696420446973-
  1148 000005EB 6B20506172616D6574-
  1148 000005F4 6572               
  1149 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1149 000005FF 20616E20696E746572-
  1149 00000608 6E616C206572726F72-
  1149 00000611 206361757365642062-
  1149 0000061A 7920616E20696E7661-
  1149 00000623 6C69642076616C7565-
  1149 0000062C 206265696E67207061-
  1149 00000635 7373656420746F2061-
  1149 0000063E 2073797374656D     
  1150 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1150 0000064E 6E2E20546865204F53-
  1150 00000657 424F4F542E434F4D20-
  1150 00000660 66696C65206D617920-
  1150 00000669 626520636F72727570-
  1150 00000672 742E20436F7079206F-
  1150 0000067B 7220646F776E6C6F61-
  1150 00000684 64207468652066696C-
  1150 0000068D 6520616761696E     
  1151 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1151 0000069D 72792E             
  1152 000006A0 0D0A00                                          db      13,10,0
  1153 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1153 000006AC 6472657373204D6172-
  1153 000006B5 6B204E6F7420466F75-
  1153 000006BE 6E64               
  1154 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1154 000006C9 726F7220696E646963-
  1154 000006D2 617465732061207068-
  1154 000006DB 79736963616C207072-
  1154 000006E4 6F626C656D20776974-
  1154 000006ED 682074686520666C6F-
  1154 000006F6 707079206469736B65-
  1154 000006FF 7474652E20506C6561-
  1154 00000708 7365207265747279   
  1155 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1155 00000719 6E6F74686572206469-
  1155 00000722 736B657474652E     
  1156 00000729 0D0A00                                          db      13,10,0
  1157 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1157 00000735 6F7465637465642044-
  1157 0000073E 69736B             
  1158 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1158 0000074A 726F72206973207573-
  1158 00000753 75616C6C7920636175-
  1158 0000075C 736564206279206174-
  1158 00000765 74656D7074696E6720-
  1158 0000076E 746F20777269746520-
  1158 00000777 746F20612077726974-
  1158 00000780 652D70726F74656374-
  1158 00000789 6564206469736B2E   
  1159 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1159 0000079A 686520277772697465-
  1159 000007A3 2D70726F7465637427-
  1159 000007AC 2073657474696E6720-
  1159 000007B5 6F6E20746865206469-
  1159 000007BE 736B206F7220726574-
  1159 000007C7 7279207573696E6720-
  1159 000007D0 7573696E6720616E6F-
  1159 000007D9 74686572206469736B-
  1159 000007E2 2E                 
  1160 000007E3 0D0A00                                          db      13,10,0
  1161 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1161 000007EF 736B65747465205265-
  1161 000007F8 6D6F766564         
  1162 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1162 00000806 726F72206D61792069-
  1162 0000080F 6E6469636174652074-
  1162 00000818 686174207468652066-
  1162 00000821 6C6F70707920646973-
  1162 0000082A 6B6574746520686173-
  1162 00000833 206265656E2072656D-
  1162 0000083C 6F7665642066726F6D-
  1162 00000845 20746865           
  1163 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1163 00000852 652064726976652E20-
  1163 0000085B 4F6E20736F6D652073-
  1163 00000864 797374656D732C2074-
  1163 0000086D 68697320636F646520-
  1163 00000876 6D617920616C736F20-
  1163 0000087F 6F6363757220696620-
  1163 00000888 746865206469736B65-
  1163 00000891 747465206973       
  1164 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1164 000008A0 70726F746563746564-
  1164 000008A9 2E2720506C65617365-
  1164 000008B2 207665726966792074-
  1164 000008BB 686174207468652064-
  1164 000008C4 69736B657474652069-
  1164 000008CD 73206E6F7420777269-
  1164 000008D6 74652D70726F746563-
  1164 000008DF 74656420616E64     
  1165 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1165 000008EF 65726C7920696E7365-
  1165 000008F8 7274656420696E2074-
  1165 00000901 6865206469736B6574-
  1165 0000090A 74652064726976652E 
  1166 00000913 0D0A00                                          db      13,10,0
  1167 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1167 0000091F 6976652054696D6564-
  1167 00000928 204F7574           
  1168 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1168 00000935 726F7220757375616C-
  1168 0000093E 6C7920696E64696361-
  1168 00000947 746573207468617420-
  1168 00000950 6E6F206469736B6574-
  1168 00000959 746520697320696E20-
  1168 00000962 746865206469736B65-
  1168 0000096B 747465206472697665-
  1168 00000974 2E20506C65617365   
  1169 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1169 00000985 726520746861742074-
  1169 0000098E 6865206469736B6574-
  1169 00000997 74652069732070726F-
  1169 000009A0 7065726C7920736561-
  1169 000009A9 74656420696E207468-
  1169 000009B2 652064726976652061-
  1169 000009BB 6E642072657472792E 
  1170 000009C4 0D0A00                                          db      13,10,0
  1171 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1171 000009D0 6B6E6F776E20457272-
  1171 000009D9 6F72               
  1172 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1172 000009E4 6F722D636F64652072-
  1172 000009ED 657475726E65642062-
  1172 000009F6 79207468652042494F-
  1172 000009FF 53206973206E6F7420-
  1172 00000A08 61207265636F676E69-
  1172 00000A11 7A6564206572726F72-
  1172 00000A1A 2E20506C6561736520-
  1172 00000A23 636F6E73756C74     
  1173 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1173 00000A33 6D7075746572277320-
  1173 00000A3C 746563686E6963616C-
  1173 00000A45 207265666572656E63-
  1173 00000A4E 6520666F7220612064-
  1173 00000A57 65736372697074696F-
  1173 00000A60 6E206F662074686973-
  1173 00000A69 206572726F7220636F-
  1173 00000A72 64652E             
  1174 00000A75 0D0A00                                          db      13,10,0
  1175                                  wcPrepInBuf             equ     $
  1176                                  %endif
  1177                                  %ifdef BUILDDISK
  1178                                  ;=======================================================================================================================
  1179                                  ;
  1180                                  ;       File Allocation Tables
  1181                                  ;
  1182                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1183                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1184                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1185                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1186                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1187                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1188                                  ;       the last cluster in the chain.
  1189                                  ;
  1190                                  ;       Every three bytes encode two FAT entries as follows:
  1191                                  ;
  1192                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1193                                  ;
  1194                                  ;=======================================================================================================================
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  ;
  1197                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1198                                  ;
  1199                                  ;-----------------------------------------------------------------------------------------------------------------------
  1200                                  section                 fat1                                                    ;first copy of FAT
  1201                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1202                                                          db      005h,060h,000h, 007h,080h,000h
  1203                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1204                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1205                                                          db      011h,020h,001h, 013h,040h,001h
  1206                                                          db      015h,060h,001h, 017h,080h,001h
  1207                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1208                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1209                                                          db      021h,020h,002h, 023h,040h,002h
  1210                                                          db      025h,060h,002h, 027h,080h,002h
  1211                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1212                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1213                                  ;-----------------------------------------------------------------------------------------------------------------------
  1214                                  ;
  1215                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1216                                  ;
  1217                                  ;-----------------------------------------------------------------------------------------------------------------------
  1218                                  section                 fat2                                                    ;second copy of FAT
  1219                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1220                                                          db      005h,060h,000h, 007h,080h,000h
  1221                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1222                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1223                                                          db      011h,020h,001h, 013h,040h,001h
  1224                                                          db      015h,060h,001h, 017h,080h,001h
  1225                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1226                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1227                                                          db      021h,020h,002h, 023h,040h,002h
  1228                                                          db      025h,060h,002h, 027h,080h,002h
  1229                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1230                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232                                  ;
  1233                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1234                                  ;
  1235                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1236                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1237                                  ;       copy.
  1238                                  ;
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                  section                 dir                                                     ;diskette directory
  1241                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1242                                                          db      020h                                            ;attribute (archive bit set)
  1243                                                          times   10 db 0                                         ;unused
  1244                                                          dw      0h                                              ;time
  1245                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1246                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1247                                                          dw      2                                               ;first cluster
  1248                                                          dd      05400h                                          ;file size
  1249                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1250                                  %endif
  1251                                  %ifdef BUILDCOM
  1252                                  ;=======================================================================================================================
  1253                                  ;
  1254                                  ;       OS.COM
  1255                                  ;
  1256                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1257                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1258                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1259                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1260                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1261                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1262                                  ;
  1263                                  ;       Our loader addressability is set up according to the following diagram.
  1264                                  ;
  1265                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1266                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1267                                  ;                               |  256 = 100h bytes                             |
  1268                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1269                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1270                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1271                                  ;                       007e00  +-----------------------------------------------+
  1272                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1273                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1274                                  ;                               |                                               |
  1275                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1276                                  ;                               |                                               |
  1277                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1278                                  ;                               |  Loader Code                                  |
  1279                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1280                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1281                                  ;
  1282                                  ;=======================================================================================================================
  1283                                  ;-----------------------------------------------------------------------------------------------------------------------
  1284                                  ;
  1285                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1286                                  ;
  1287                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1288                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1289                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1290                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1291                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1292                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1293                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1294                                  ;       registers.
  1295                                  ;
  1296                                  ;-----------------------------------------------------------------------------------------------------------------------
  1297                                                          cpu     8086                                            ;assume minimal CPU
  1298                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1299                                                          bits    16                                              ;this is 16-bit code
  1300                                  Loader                  push    cs                                              ;use the code segment
  1301                                                          pop     ds                                              ;...as our data segment
  1302                                                          push    cs                                              ;use the code segment
  1303                                                          pop     es                                              ;...as our extra segment
  1304                                  ;
  1305                                  ;       Write a message to the console so we know we have our addressability established.
  1306                                  ;
  1307                                                          mov     si,czStartingMsg                                ;starting message
  1308                                                          call    PutTTYString                                    ;display loader message
  1309                                  ;
  1310                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1311                                  ;
  1312                                                          call    GetCPUType                                      ;AL = cpu type
  1313                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1314                                                          cmp     al,3                                            ;80386+?
  1315                                                          jb      LoaderExit                                      ;no, exit with error message
  1316                                                          cpu     386                                             ;allow 80386 instructions
  1317                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1318                                                          call    PutTTYString                                    ;display message
  1319                                  ;
  1320                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1321                                  ;
  1322                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1323                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1324                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1325                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1326                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1327                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1328                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1329                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1330                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1331                                                          call    PutTTYString                                    ;display message
  1332                                  ;
  1333                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1334                                  ;
  1335                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1336                                                          pop     es                                              ;... as target segment
  1337                                                          xor     di,di                                           ;ES:DI = target address
  1338                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1339                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1340                                                          cld                                                     ;forward strings
  1341                                                          rep     movsb                                           ;copy kernel image
  1342                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1343                                                          call    PutTTYString                                    ;display message
  1344                                  ;
  1345                                  ;       Switch to protected mode.
  1346                                  ;
  1347                                                          xor     si,si                                           ;ES:SI = gdt addr
  1348                                                          mov     ss,si                                           ;protected mode ss
  1349                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1350                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1351                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1352                                                          mov     dx,001Fh                                        ;outer delay loop count
  1353                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1354                                                          loop    $                                               ;wait out pending interrupts
  1355                                                          dec     dx                                              ;restore outer loop count
  1356                                                          jnz     .10                                             ;continue outer loop
  1357                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1358                                  ;
  1359                                  ;       Enable hardware and maskable interrupts.
  1360                                  ;
  1361                                                          xor     al,al                                           ;enable all registers code
  1362                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1363                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1364                                                          sti                                                     ;enable maskable interrupts
  1365                                  ;
  1366                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1367                                  ;
  1368                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1369                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1370                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1371                                  ;-----------------------------------------------------------------------------------------------------------------------
  1372                                  ;
  1373                                  ;       Routine:        LoaderExit
  1374                                  ;
  1375                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1376                                  ;
  1377                                  ;       In:             DS:SI   string address
  1378                                  ;
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  LoaderExit              call    PutTTYString                                    ;display error message
  1381                                  ;
  1382                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1383                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1384                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1385                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1386                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1387                                  ;
  1388                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1389                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1390                                                          jnz     .40                                             ;exit if key pressed
  1391                                                          sti                                                     ;enable maskable interrupts
  1392                                                          hlt                                                     ;wait for interrupt
  1393                                                          jmp     .30                                             ;repeat until keypress
  1394                                  ;
  1395                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1396                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1397                                  ;       HLT until the system resets.
  1398                                  ;
  1399                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1400                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1401                                  .50                     sti                                                     ;enable maskable interrupts
  1402                                                          hlt                                                     ;stop until reset, int, nmi
  1403                                                          jmp     .50                                             ;loop until restart kicks in
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  ;
  1406                                  ;       Routine:        GetCPUType
  1407                                  ;
  1408                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1409                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1410                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1411                                  ;
  1412                                  ;       Out:            AX      0 = 808x, v20, etc.
  1413                                  ;                               1 = 80186
  1414                                  ;                               2 = 80286
  1415                                  ;                               3 = 80386
  1416                                  ;
  1417                                  ;-----------------------------------------------------------------------------------------------------------------------
  1418                                  GetCPUType              mov     al,1                                            ;AL = 1
  1419                                                          mov     cl,32                                           ;shift count
  1420                                                          shr     al,cl                                           ;try a 32-bit shift
  1421                                                          or      al,al                                           ;did the shift happen?
  1422                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1423                                                          cpu     186
  1424                                                          push    sp                                              ;save stack pointer
  1425                                                          pop     cx                                              ;...into cx
  1426                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1427                                                          jne     .10                                             ;yes, cpu is 80186
  1428                                                          cpu     286
  1429                                                          inc     ax                                              ;AX = 2
  1430                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1431                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1432                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1433                                                          jz      .10                                             ;yes, cpu is 80286
  1434                                                          inc     ax                                              ;AX = 3
  1435                                  .10                     ret                                                     ;return
  1436                                  ;-----------------------------------------------------------------------------------------------------------------------
  1437                                  ;
  1438                                  ;       Routine:        PutTTYString
  1439                                  ;
  1440                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1441                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1442                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1443                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1444                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1445                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1446                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1447                                  ;                       to LODSB is not needed.
  1448                                  ;
  1449                                  ;       In:             DS:SI   address of string
  1450                                  ;
  1451                                  ;       Out:            DF      0
  1452                                  ;                       ZF      1
  1453                                  ;                       AL      0
  1454                                  ;
  1455                                  ;-----------------------------------------------------------------------------------------------------------------------
  1456                                  PutTTYString            cld                                                     ;forward strings
  1457                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1458                                                          test    al,al                                           ;end of string?
  1459                                                          jz      .20                                             ;... yes, exit our loop
  1460                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1461                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1462                                                          jmp     .10                                             ;repeat until done
  1463                                  .20                     ret                                                     ;return
  1464                                  ;-----------------------------------------------------------------------------------------------------------------------
  1465                                  ;
  1466                                  ;       Loader Data
  1467                                  ;
  1468                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1469                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1470                                  ;
  1471                                  ;-----------------------------------------------------------------------------------------------------------------------
  1472                                                          align   2
  1473                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1474                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1475                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1476                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1477                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1478                                                          db      "Please press any key to restart the computer.",13,10,0
  1479                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1480                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1481                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1482                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1483                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1484                                  ;=======================================================================================================================
  1485                                  ;
  1486                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1487                                  ;
  1488                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1489                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1490                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1491                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1492                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1493                                  ;
  1494                                  ;=======================================================================================================================
  1495                                  ;=======================================================================================================================
  1496                                  ;
  1497                                  ;       Kernel Tables
  1498                                  ;
  1499                                  ;=======================================================================================================================
  1500                                  ;-----------------------------------------------------------------------------------------------------------------------
  1501                                  ;
  1502                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1503                                  ;
  1504                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1505                                  ;       first descriptor must be all nulls.
  1506                                  ;
  1507                                  ;       6   5         4         3         2         1         0
  1508                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1509                                  ;       ----------------------------------------------------------------
  1510                                  ;       h......hffffmmmma......ab......................bn..............n
  1511                                  ;       00000000                        all areas have base addresses below 2^24
  1512                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1513                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1514                                  ;                   1001                present, ring-0, selector
  1515                                  ;
  1516                                  ;       h...h   hi-order base address (bits 24-31)
  1517                                  ;       ffff    flags
  1518                                  ;       mmmm    hi-order limit (bits 16-19)
  1519                                  ;       a...a   access
  1520                                  ;       b...b   lo-order base address (bits 0-23)
  1521                                  ;       n...n   lo-order limit (bits 0-15)
  1522                                  ;
  1523                                  ;-----------------------------------------------------------------------------------------------------------------------
  1524                                  section                 gdt                                                     ;global descriptor table
  1525                                                          dq      0000000000000000h                               ;00 required null selector
  1526                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1527                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1528                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1529                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1530                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1531                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1532                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1533                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1534                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1535                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1536                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1537                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1538                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1539                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1540                                  ;-----------------------------------------------------------------------------------------------------------------------
  1541                                  ;
  1542                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1543                                  ;
  1544                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1545                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1546                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1547                                  ;
  1548                                  ;       6   5         4         3         2         1         0
  1549                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1550                                  ;       ----------------------------------------------------------------
  1551                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1552                                  ;
  1553                                  ;       h...h   high-order offset (bits 16-31)
  1554                                  ;       P       present (0=unused interrupt)
  1555                                  ;       zz      descriptor privilege level
  1556                                  ;       S       storage segment (must be zero for IDT)
  1557                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1558                                  ;       S...S   handling code selector in GDT
  1559                                  ;       l...l   lo-order offset (bits 0-15)
  1560                                  ;
  1561                                  ;-----------------------------------------------------------------------------------------------------------------------
  1562                                  section                 idt                                                     ;interrupt descriptor table
  1563                                                          mint    dividebyzero                                    ;00 divide by zero
  1564                                                          mint    singlestep                                      ;01 single step
  1565                                                          mint    nmi                                             ;02 non-maskable
  1566                                                          mint    break                                           ;03 break
  1567                                                          mint    into                                            ;04 into
  1568                                                          mint    bounds                                          ;05 bounds
  1569                                                          mint    badopcode                                       ;06 bad op code
  1570                                                          mint    nocoproc                                        ;07 no coprocessor
  1571                                                          mint    doublefault                                     ;08 double-fault
  1572                                                          mint    operand                                         ;09 operand
  1573                                                          mint    badtss                                          ;0a bad TSS
  1574                                                          mint    notpresent                                      ;0b not-present
  1575                                                          mint    stacklimit                                      ;0c stack limit
  1576                                                          mint    protection                                      ;0d general protection fault
  1577                                                          mint    int14                                           ;0e (reserved)
  1578                                                          mint    int15                                           ;0f (reserved)
  1579                                                          mint    coproccalc                                      ;10 (reserved)
  1580                                                          mint    int17                                           ;11 (reserved)
  1581                                                          mint    int18                                           ;12 (reserved)
  1582                                                          mint    int19                                           ;13 (reserved)
  1583                                                          mint    int20                                           ;14 (reserved)
  1584                                                          mint    int21                                           ;15 (reserved)
  1585                                                          mint    int22                                           ;16 (reserved)
  1586                                                          mint    int23                                           ;17 (reserved)
  1587                                                          mint    int24                                           ;18 (reserved)
  1588                                                          mint    int25                                           ;19 (reserved)
  1589                                                          mint    int26                                           ;1a (reserved)
  1590                                                          mint    int27                                           ;1b (reserved)
  1591                                                          mint    int28                                           ;1c (reserved)
  1592                                                          mint    int29                                           ;1d (reserved)
  1593                                                          mint    int30                                           ;1e (reserved)
  1594                                                          mint    int31                                           ;1f (reserved)
  1595                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1596                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1597                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1598                                                          mtrap   com2                                            ;23 IRQ3 com2
  1599                                                          mtrap   com1                                            ;24 IRQ4 com1
  1600                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1601                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1602                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1603                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1604                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1605                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1606                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1607                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1608                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1609                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1610                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1611                                                          mtrap   svc                                             ;30 OS services
  1612                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1613                                  ;=======================================================================================================================
  1614                                  ;
  1615                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1616                                  ;
  1617                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1618                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1619                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1620                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1621                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1622                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1623                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1624                                  ;
  1625                                  ;=======================================================================================================================
  1626                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1627                                                          cpu     386                                             ;allow 80386 instructions
  1628                                                          bits    32                                              ;this is 32-bit code
  1629                                  ;=======================================================================================================================
  1630                                  ;
  1631                                  ;       CPU Interrupt Handlers
  1632                                  ;
  1633                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1634                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1635                                  ;
  1636                                  ;=======================================================================================================================
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;       INT0    Divide By Zero
  1640                                  ;
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                                          menter  dividebyzero                                    ;divide by zero
  1643                                                          push    0                                               ;store interrupt nbr
  1644                                                          push    czIntDivideByZero                               ;store message offset
  1645                                                          jmp     ReportInterrupt                                 ;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;       INT1    Single Step
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                                          menter  singlestep                                      ;single step
  1652                                                          push    1                                               ;store interrupt nbr
  1653                                                          push    czIntSingleStep                                 ;store message offset
  1654                                                          jmp     ReportInterrupt                                 ;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;       INT2    Non-Maskable Interrupt
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                                          menter  nmi                                             ;non-maskable
  1661                                                          push    2                                               ;store interrupt nbr
  1662                                                          push    czIntNonMaskable                                ;store message offset
  1663                                                          jmp     ReportInterrupt                                 ;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;       INT3    Break
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                                          menter  break                                           ;break
  1670                                                          push    3                                               ;store interrupt nbr
  1671                                                          push    czIntBreak                                      ;store message offset
  1672                                                          jmp     ReportInterrupt                                 ;report interrupt
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                  ;
  1675                                  ;       INT4    Into
  1676                                  ;
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                                          menter  into                                            ;into
  1679                                                          push    4                                               ;store interrupt nbr
  1680                                                          push    czIntInto                                       ;store message offset
  1681                                                          jmp     ReportInterrupt                                 ;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;       INT5    Bounds
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                                          menter  bounds                                          ;bounds
  1688                                                          push    5                                               ;store interrupt nbr
  1689                                                          push    czIntBounds                                     ;store message offset
  1690                                                          jmp     ReportInterrupt                                 ;report interrupt
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  ;
  1693                                  ;       INT6    Bad Operation Code
  1694                                  ;
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                                          menter  badopcode                                       ;bad opcode interrupt
  1697                                                          push    6                                               ;store interrupt nbr
  1698                                                          push    czIntBadOpCode                                  ;store message offset
  1699                                                          jmp     ReportInterrupt                                 ;report interrupt
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                  ;
  1702                                  ;       INT7    No Coprocessor
  1703                                  ;
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1706                                                          push    7                                               ;store interrupt nbr
  1707                                                          push    czIntNoCoprocessor                              ;store message offset
  1708                                                          jmp     ReportInterrupt                                 ;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;       INT8    Double Fault
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                                          menter  doublefault                                     ;doublefault interrupt
  1715                                                          push    8                                               ;store interrupt nbr
  1716                                                          push    czIntDoubleFault                                ;store message offset
  1717                                                          jmp     ReportInterrupt                                 ;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;       INT9    Operand
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                                          menter  operand                                         ;operand interrupt
  1724                                                          push    9                                               ;store interrupt nbr
  1725                                                          push    czIntOperand                                    ;store message offset
  1726                                                          jmp     ReportInterrupt                                 ;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;       INT10   Bad Task State Segment
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                                          menter  badtss                                          ;bad TSS interrupt
  1733                                                          push    10                                              ;store interrupt nbr
  1734                                                          push    czIntBadTSS                                     ;store message offset
  1735                                                          jmp     ReportInterrupt                                 ;report interrupt
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                  ;
  1738                                  ;       INT11   Not Present
  1739                                  ;
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                                          menter  notpresent                                      ;not present interrupt
  1742                                                          push    11                                              ;store interrupt nbr
  1743                                                          push    czIntNotPresent                                 ;store message offset
  1744                                                          jmp     ReportInterrupt                                 ;report interrupt
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  ;
  1747                                  ;       INT12   Stack Limit
  1748                                  ;
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                                          menter  stacklimit                                      ;stack limit interrupt
  1751                                                          push    12                                              ;store interrupt nbr
  1752                                                          push    czIntStackLimit                                 ;store message offset
  1753                                                          jmp     ReportInterrupt                                 ;report interrupt
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;       INT13   General Protection Fault
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                                          menter  protection                                      ;protection fault interrupt
  1760                                                          push    13                                              ;store interrupt nbr
  1761                                                          push    czIntProtection                                 ;store message offset
  1762                                                          jmp     ReportInterrupt                                 ;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;       INT14   Reserved
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                                          menter  int14                                           ;(reserved)
  1769                                                          push    14                                              ;store interrupt nbr
  1770                                                          push    czIntReserved                                   ;store message offset
  1771                                                          jmp     ReportInterrupt                                 ;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;       INT15   Reserved
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                                          menter  int15                                           ;(reserved)
  1778                                                          push    15                                              ;store interrupt nbr
  1779                                                          push    czIntReserved                                   ;store message offset
  1780                                                          jmp     ReportInterrupt                                 ;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;       INT16   Coprocessor Calculation
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                                          menter  coproccalc                                      ;coprocessor calculation
  1787                                                          push    16                                              ;store interrupt nbr
  1788                                                          push    czIntCoprocessorCalc                            ;store message offset
  1789                                                          jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT17   Reserved
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  int17                                           ;(reserved)
  1796                                                          push    17                                              ;store interrupt nbr
  1797                                                          push    czIntReserved                                   ;store message offset
  1798                                                          jmp     ReportInterrupt                                 ;report interrupt
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                  ;
  1801                                  ;       INT18   Reserved
  1802                                  ;
  1803                                  ;-----------------------------------------------------------------------------------------------------------------------
  1804                                                          menter  int18                                           ;(reserved)
  1805                                                          push    18                                              ;store interrupt nbr
  1806                                                          push    czIntReserved                                   ;store message offset
  1807                                                          jmp     ReportInterrupt                                 ;report interrupt
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                  ;
  1810                                  ;       INT19   Reserved
  1811                                  ;
  1812                                  ;-----------------------------------------------------------------------------------------------------------------------
  1813                                                          menter  int19                                           ;(reserved)
  1814                                                          push    19                                              ;store interrupt nbr
  1815                                                          push    czIntReserved                                   ;store message offset
  1816                                                          jmp     ReportInterrupt                                 ;report interrupt
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                  ;
  1819                                  ;       INT20   Reserved
  1820                                  ;
  1821                                  ;-----------------------------------------------------------------------------------------------------------------------
  1822                                                          menter  int20                                           ;(reserved)
  1823                                                          push    20                                              ;store interrupt nbr
  1824                                                          push    czIntReserved                                   ;store message offset
  1825                                                          jmp     ReportInterrupt                                 ;report interrupt
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                  ;
  1828                                  ;       INT21   Reserved
  1829                                  ;
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                                          menter  int21                                           ;(reserved)
  1832                                                          push    21                                              ;store interrupt nbr
  1833                                                          push    czIntReserved                                   ;store message offset
  1834                                                          jmp     ReportInterrupt                                 ;report interrupt
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                  ;
  1837                                  ;       INT22   Reserved
  1838                                  ;
  1839                                  ;-----------------------------------------------------------------------------------------------------------------------
  1840                                                          menter  int22                                           ;(reserved)
  1841                                                          push    22                                              ;store interrupt nbr
  1842                                                          push    czIntReserved                                   ;store message offset
  1843                                                          jmp     ReportInterrupt                                 ;report interrupt
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;       INT23   Reserved
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                                          menter  int23                                           ;(reserved)
  1850                                                          push    23                                              ;store interrupt nbr
  1851                                                          push    czIntReserved                                   ;store message offset
  1852                                                          jmp     ReportInterrupt                                 ;report interrupt
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                  ;
  1855                                  ;       INT24   Reserved
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  int24                                           ;(reserved)
  1859                                                          push    24                                              ;store interrupt nbr
  1860                                                          push    czIntReserved                                   ;store message offset
  1861                                                          jmp     ReportInterrupt                                 ;report interrupt
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                  ;
  1864                                  ;       INT25   Reserved
  1865                                  ;
  1866                                  ;-----------------------------------------------------------------------------------------------------------------------
  1867                                                          menter  int25                                           ;(reserved)
  1868                                                          push    25                                              ;store interrupt nbr
  1869                                                          push    czIntReserved                                   ;store message offset
  1870                                                          jmp     ReportInterrupt                                 ;report interrupt
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  ;
  1873                                  ;       INT26   Reserved
  1874                                  ;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                                          menter  int26                                           ;(reserved)
  1877                                                          push    26                                              ;store interrupt nbr
  1878                                                          push    czIntReserved                                   ;store message offset
  1879                                                          jmp     ReportInterrupt                                 ;report interrupt
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                  ;
  1882                                  ;       INT27   Reserved
  1883                                  ;
  1884                                  ;-----------------------------------------------------------------------------------------------------------------------
  1885                                                          menter  int27                                           ;(reserved)
  1886                                                          push    27                                              ;store interrupt nbr
  1887                                                          push    czIntReserved                                   ;store message offset
  1888                                                          jmp     ReportInterrupt                                 ;report interrupt
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ;
  1891                                  ;       INT28   Reserved
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                                          menter  int28                                           ;(reserved)
  1895                                                          push    28                                              ;store interrupt nbr
  1896                                                          push    czIntReserved                                   ;store message offset
  1897                                                          jmp     ReportInterrupt                                 ;report interrupt
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                  ;
  1900                                  ;       INT29   Reserved
  1901                                  ;
  1902                                  ;-----------------------------------------------------------------------------------------------------------------------
  1903                                                          menter  int29                                           ;(reserved)
  1904                                                          push    29                                              ;store interrupt nbr
  1905                                                          push    czIntReserved                                   ;store message offset
  1906                                                          jmp     ReportInterrupt                                 ;report interrupt
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  ;
  1909                                  ;       INT30   Reserved
  1910                                  ;
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                                          menter  int30                                           ;(reserved)
  1913                                                          push    30                                              ;store interrupt nbr
  1914                                                          push    czIntReserved                                   ;store message offset
  1915                                                          jmp     ReportInterrupt                                 ;report interrupt
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  ;
  1918                                  ;       INT31   Reserved
  1919                                  ;
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                                          menter  int31                                           ;(reserved)
  1922                                                          push    31                                              ;store interrupt nbr
  1923                                                          push    czIntReserved                                   ;store message offset
  1924                                                          jmp     ReportInterrupt                                 ;report interrupt
  1925                                  ;-----------------------------------------------------------------------------------------------------------------------
  1926                                  ;
  1927                                  ;       Routine:        ReportInterrupt
  1928                                  ;
  1929                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1930                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1931                                  ;
  1932                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1933                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1934                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1935                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1936                                  ;                       [esp+0]         error message address                   stored by push instructions
  1937                                  ;
  1938                                  ;       Out:            N/A             This routine does not exit.
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1942                                                          push    es                                              ;save ES at time of interrupt
  1943                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1944                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1945                                  ;
  1946                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1947                                  ;
  1948                                  ;                       [ebp+56]        eflags
  1949                                  ;                       [ebp+52]        cs
  1950                                  ;                       [ebp+48]        eip
  1951                                  ;                       [ebp+44]        interrupt number (0-31)
  1952                                  ;                       [ebp+40]        error message address
  1953                                  ;                       [ebp+36]        ds
  1954                                  ;                       [ebp+32]        es
  1955                                  ;                       [ebp+28]        eax
  1956                                  ;                       [ebp+24]        ecx
  1957                                  ;                       [ebp+20]        edx
  1958                                  ;                       [ebp+16]        ebx
  1959                                  ;                       [ebp+12]        esp
  1960                                  ;                       [ebp+8]         ebp
  1961                                  ;                       [ebp+4]         esi
  1962                                  ;                       [ebp+0]         edi
  1963                                  ;
  1964                                                          push    cs                                              ;load code selector ...
  1965                                                          pop     ds                                              ;... into DS
  1966                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1967                                                          pop     es                                              ;... into ES
  1968                                  ;
  1969                                  ;       Display the interrupt report boundary box
  1970                                  ;
  1971                                                          mov     cl,13                                           ;column
  1972                                                          mov     ch,6                                            ;row
  1973                                                          mov     dl,50                                           ;width
  1974                                                          mov     dh,8                                            ;height
  1975                                                          mov     bh,07h                                          ;attribute
  1976                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1977                                  ;
  1978                                  ;       Display the report header
  1979                                  ;
  1980                                                          mov     cl,15                                           ;column
  1981                                                          mov     ch,7                                            ;row
  1982                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1983                                                          call    SetConsoleString                                ;draw text string
  1984                                  ;
  1985                                  ;       Display the interrupt description label
  1986                                  ;
  1987                                                          mov     cl,15                                           ;column
  1988                                                          mov     ch,8                                            ;row
  1989                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1990                                                          call    SetConsoleString                                ;draw text string
  1991                                  ;
  1992                                  ;       Display the interrupt number
  1993                                  ;
  1994                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1995                                                          mov     cl,26                                           ;column
  1996                                                          mov     ch,8                                            ;row
  1997                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1998                                  ;
  1999                                  ;       Display the interrupt name
  2000                                  ;
  2001                                                          mov     cl,29                                           ;column
  2002                                                          mov     ch,8                                            ;row
  2003                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2004                                                          call    SetConsoleString                                ;display interrupt description
  2005                                  ;
  2006                                  ;       Display the register values header
  2007                                  ;
  2008                                                          mov     cl,15                                           ;column
  2009                                                          mov     ch,10                                           ;row
  2010                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2011                                                          call    SetConsoleString                                ;draw text string
  2012                                  ;
  2013                                  ;       Display the EAX register label and value
  2014                                  ;
  2015                                                          mov     cl,15                                           ;column
  2016                                                          mov     ch,11                                           ;row
  2017                                                          mov     esi,czIntEAX                                    ;register EAX label
  2018                                                          call    SetConsoleString                                ;draw label
  2019                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2020                                                          mov     cl,19                                           ;column
  2021                                                          mov     ch,11                                           ;row
  2022                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2023                                  ;
  2024                                  ;       Display the ECX register label and value
  2025                                  ;
  2026                                                          mov     cl,15                                           ;column
  2027                                                          mov     ch,12                                           ;row
  2028                                                          mov     esi,czIntECX                                    ;label
  2029                                                          call    SetConsoleString                                ;draw label
  2030                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2031                                                          mov     cl,19                                           ;column
  2032                                                          mov     ch,12                                           ;row
  2033                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2034                                  ;
  2035                                  ;       Display the EDX register label and value
  2036                                  ;
  2037                                                          mov     cl,15                                           ;column
  2038                                                          mov     ch,13                                           ;row
  2039                                                          mov     esi,czIntEDX                                    ;label
  2040                                                          call    SetConsoleString                                ;draw label
  2041                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2042                                                          mov     cl,19                                           ;column
  2043                                                          mov     ch,13                                           ;row
  2044                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2045                                  ;
  2046                                  ;       Display the EBX register label and value
  2047                                  ;
  2048                                                          mov     cl,15                                           ;column
  2049                                                          mov     ch,14                                           ;row
  2050                                                          mov     esi,czIntEBX                                    ;label
  2051                                                          call    SetConsoleString                                ;draw label
  2052                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2053                                                          mov     cl,19                                           ;column
  2054                                                          mov     ch,14                                           ;row
  2055                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2056                                  ;
  2057                                  ;       Display the ESI register label and value
  2058                                  ;
  2059                                                          mov     cl,29                                           ;column
  2060                                                          mov     ch,11                                           ;row
  2061                                                          mov     esi,czIntESI                                    ;label
  2062                                                          call    SetConsoleString                                ;draw label
  2063                                                          mov     eax,[ebp+4]                                     ;ESI
  2064                                                          mov     cl,33                                           ;column
  2065                                                          mov     ch,11                                           ;row
  2066                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2067                                  ;
  2068                                  ;       Display the EDI register label and value
  2069                                  ;
  2070                                                          mov     cl,29                                           ;column
  2071                                                          mov     ch,12                                           ;row
  2072                                                          mov     esi,czIntEDI                                    ;label
  2073                                                          call    SetConsoleString                                ;draw label
  2074                                                          mov     eax,[ebp+0]                                     ;EDI
  2075                                                          mov     cl,33                                           ;column
  2076                                                          mov     ch,12                                           ;row
  2077                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2078                                  ;
  2079                                  ;       Display the EBP register label and value
  2080                                  ;
  2081                                                          mov     cl,29                                           ;column
  2082                                                          mov     ch,13                                           ;row
  2083                                                          mov     esi,czIntEBP                                    ;label
  2084                                                          call    SetConsoleString                                ;draw label
  2085                                                          mov     eax,[ebp+8]                                     ;EBP
  2086                                                          mov     cl,33                                           ;column
  2087                                                          mov     ch,13                                           ;row
  2088                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2089                                  ;
  2090                                  ;       Display the DS register label and value
  2091                                  ;
  2092                                                          mov     cl,42                                           ;column
  2093                                                          mov     ch,11                                           ;row
  2094                                                          mov     esi,czIntDS                                     ;label
  2095                                                          call    SetConsoleString                                ;draw label
  2096                                                          xor     eax,eax                                         ;zero register
  2097                                                          mov     ax,[ebp+36]                                     ;DS
  2098                                                          mov     cl,46                                           ;column
  2099                                                          mov     ch,11                                           ;row
  2100                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2101                                  ;
  2102                                  ;       Display the ES register label and value
  2103                                  ;
  2104                                                          mov     cl,42                                           ;column
  2105                                                          mov     ch,12                                           ;row
  2106                                                          mov     esi,czIntES                                     ;label
  2107                                                          call    SetConsoleString                                ;draw label
  2108                                                          xor     eax,eax                                         ;zero register
  2109                                                          mov     ax,[ebp+32]                                     ;ES
  2110                                                          mov     cl,46                                           ;column
  2111                                                          mov     ch,12                                           ;row
  2112                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2113                                  ;
  2114                                  ;       Display the SS register label and value
  2115                                  ;
  2116                                                          mov     cl,42                                           ;column
  2117                                                          mov     ch,13                                           ;row
  2118                                                          mov     esi,czIntSS                                     ;label
  2119                                                          call    SetConsoleString                                ;draw label
  2120                                                          xor     eax,eax                                         ;zero register
  2121                                                          mov     ax,ss                                           ;SS
  2122                                                          mov     cl,46                                           ;column
  2123                                                          mov     ch,13                                           ;row
  2124                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2125                                  ;
  2126                                  ;       Display the CS register lable and value
  2127                                  ;
  2128                                                          mov     cl,42                                           ;column
  2129                                                          mov     ch,14                                           ;row
  2130                                                          mov     esi,czIntCS                                     ;label
  2131                                                          call    SetConsoleString                                ;draw label
  2132                                                          xor     eax,eax                                         ;zero register
  2133                                                          mov     ax,[ebp+52]                                     ;CS
  2134                                                          mov     cl,46                                           ;column
  2135                                                          mov     ch,14                                           ;row
  2136                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2137                                  ;
  2138                                  ;       Display the EFLAGS register label and value
  2139                                  ;
  2140                                                          mov     cl,51                                           ;column
  2141                                                          mov     ch,11                                           ;row
  2142                                                          mov     esi,czIntEFLAGS                                 ;label
  2143                                                          call    SetConsoleString                                ;draw label
  2144                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2145                                                          mov     cl,55                                           ;column
  2146                                                          mov     ch,11                                           ;row
  2147                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2148                                  ;
  2149                                  ;       Display the ESP register label and value
  2150                                  ;
  2151                                                          mov     cl,51                                           ;column
  2152                                                          mov     ch,13                                           ;row
  2153                                                          mov     esi,czIntESP                                    ;label
  2154                                                          call    SetConsoleString                                ;draw label
  2155                                                          mov     eax,[ebp+12]                                    ;ESP
  2156                                                          mov     cl,55                                           ;column
  2157                                                          mov     ch,13                                           ;row
  2158                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2159                                  ;
  2160                                  ;       Display the EIP register label and value
  2161                                  ;
  2162                                                          mov     cl,51                                           ;column
  2163                                                          mov     ch,14                                           ;row
  2164                                                          mov     esi,czIntEIP                                    ;label
  2165                                                          call    SetConsoleString                                ;draw label
  2166                                                          mov     eax,[ebp+48]                                    ;EIP
  2167                                                          mov     cl,55                                           ;column
  2168                                                          mov     ch,14                                           ;row
  2169                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2170                                  ;
  2171                                  ;       Halt and loop until reset
  2172                                  ;
  2173                                  .10                     sti                                                     ;enable maskable interrupts
  2174                                                          hlt                                                     ;halt processor
  2175                                                          jmp     .10                                             ;resume on interrupt
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177                                  ;
  2178                                  ;       Processor Interrupt Name Strings
  2179                                  ;
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                  czIntDivideByZero       db      "Division by zero",0
  2182                                  czIntSingleStep         db      "Single step",0
  2183                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2184                                  czIntBreak              db      "Break",0
  2185                                  czIntInto               db      "Into",0
  2186                                  czIntBounds             db      "Bounds",0
  2187                                  czIntBadOpCode          db      "Bad Operation Code",0
  2188                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2189                                  czIntDoubleFault        db      "Double Fault",0
  2190                                  czIntOperand            db      "Operand",0
  2191                                  czIntBadTSS             db      "Bad Task State Segment",0
  2192                                  czIntNotPresent         db      "Not Present",0
  2193                                  czIntStackLimit         db      "Stack Limit",0
  2194                                  czIntProtection         db      "General Protection Fault",0
  2195                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2196                                  czIntReserved           db      "Reserved",0
  2197                                  ;-----------------------------------------------------------------------------------------------------------------------
  2198                                  ;
  2199                                  ;       Processor Interrupt Handling Strings
  2200                                  ;
  2201                                  ;-----------------------------------------------------------------------------------------------------------------------
  2202                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2203                                  czIntLabel              db      "Interrupt #",0
  2204                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2205                                  czIntEAX                db      "EAX:",0
  2206                                  czIntECX                db      "ECX:",0
  2207                                  czIntEDX                db      "EDX:",0
  2208                                  czIntEBX                db      "EBX:",0
  2209                                  czIntESI                db      "ESI:",0
  2210                                  czIntEDI                db      "EDI:",0
  2211                                  czIntEBP                db      "EBP:",0
  2212                                  czIntESP                db      "ESP:",0
  2213                                  czIntDS                 db      " DS:",0
  2214                                  czIntES                 db      " ES:",0
  2215                                  czIntSS                 db      " SS:",0
  2216                                  czIntCS                 db      " CS:",0
  2217                                  czIntEFLAGS             db      "FLG:",0
  2218                                  czIntEIP                db      "EIP:",0
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220                                  ;
  2221                                  ;       Routine:        DrawTextDialogBox
  2222                                  ;
  2223                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2224                                  ;
  2225                                  ;       In:             CL      upper left column (0-79)
  2226                                  ;                       CH      upper left row (0-24)
  2227                                  ;                       DL      column width, excluding border
  2228                                  ;                       DH      row height, excluding border
  2229                                  ;                       BH      color attribute
  2230                                  ;
  2231                                  ;-----------------------------------------------------------------------------------------------------------------------
  2232                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2233                                                          push    esi                                             ;
  2234                                                          push    edi                                             ;
  2235                                                          push    es                                              ;
  2236                                                          push    EGDTCGA                                         ;load CGA selector ...
  2237                                                          pop     es                                              ;... into ES
  2238                                  ;
  2239                                  ;       Compute target display offset
  2240                                  ;
  2241                                                          xor     eax,eax                                         ;zero register
  2242                                                          mov     al,ch                                           ;row
  2243                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2244                                                          mul     ah                                              ;row offset
  2245                                                          add     al,cl                                           ;add column
  2246                                                          adc     ah,0                                            ;add overflow
  2247                                                          add     al,cl                                           ;add column
  2248                                                          adc     ah,0                                            ;add overflow
  2249                                                          mov     edi,eax                                         ;target row offset
  2250                                  ;
  2251                                  ;       Display top border row
  2252                                  ;
  2253                                                          push    edi                                             ;save target row offset
  2254                                                          mov     ah,bh                                           ;attribute
  2255                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2256                                                          stosw                                                   ;display character and attribute
  2257                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2258                                                          xor     ecx,ecx                                         ;zero register
  2259                                                          mov     cl,dl                                           ;width, excluding border
  2260                                                          rep     stosw                                           ;display horizontal border
  2261                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2262                                                          stosw                                                   ;display character and attribute
  2263                                                          pop     edi                                             ;restore target row offset
  2264                                                          add     edi,ECONROWBYTES                                ;next row
  2265                                  ;
  2266                                  ;       Display dialog box body rows
  2267                                  ;
  2268                                                          xor     ecx,ecx                                         ;zero register
  2269                                                          mov     cl,dh                                           ;height, excluding border
  2270                                  .10                     push    ecx                                             ;save remaining rows
  2271                                                          push    edi                                             ;save target row offset
  2272                                                          mov     ah,bh                                           ;attribute
  2273                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2274                                                          stosw                                                   ;display character and attribute
  2275                                                          mov     al,EASCIISPACE                                  ;space
  2276                                                          xor     ecx,ecx                                         ;zero register
  2277                                                          mov     cl,dl                                           ;width, excluding border
  2278                                                          rep     stosw                                           ;display row
  2279                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2280                                                          stosw                                                   ;display character and attribute
  2281                                                          pop     edi                                             ;restore target row offset
  2282                                                          add     edi,ECONROWBYTES                                ;next row
  2283                                                          pop     ecx                                             ;remaining rows
  2284                                                          loop    .10                                             ;next row
  2285                                  ;
  2286                                  ;       Display bottom border row
  2287                                  ;
  2288                                                          push    edi                                             ;save target row offset
  2289                                                          mov     ah,bh                                           ;attribute
  2290                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2291                                                          stosw                                                   ;display character and attribute
  2292                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2293                                                          xor     ecx,ecx                                         ;zero register
  2294                                                          mov     cl,dl                                           ;width, excluding border
  2295                                                          rep     stosw                                           ;display horizontal border
  2296                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2297                                                          stosw                                                   ;display character and attribute
  2298                                                          pop     edi                                             ;restore target row offset
  2299                                                          add     edi,ECONROWBYTES                                ;next row
  2300                                  ;
  2301                                  ;       Restore and return
  2302                                  ;
  2303                                                          pop     es                                              ;restore non-volatile regs
  2304                                                          pop     edi                                             ;
  2305                                                          pop     esi                                             ;
  2306                                                          pop     ecx                                             ;
  2307                                                          ret                                                     ;return
  2308                                  ;=======================================================================================================================
  2309                                  ;
  2310                                  ;       Hardware Device Interupts
  2311                                  ;
  2312                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2313                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2314                                  ;       (BX=2028h).
  2315                                  ;
  2316                                  ;=======================================================================================================================
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  ;
  2319                                  ;       IRQ0    Clock Tick Interrupt
  2320                                  ;
  2321                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2322                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2323                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2324                                  ;
  2325                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2326                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2327                                  ;
  2328                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2329                                  ;       zero, the floppy disk motors are turned off.
  2330                                  ;
  2331                                  ;-----------------------------------------------------------------------------------------------------------------------
  2332                                                          menter  clocktick                                       ;clock tick interrupt
  2333                                                          push    eax                                             ;save non-volatile regs
  2334                                                          push    edx                                             ;
  2335                                                          push    ds                                              ;
  2336                                  ;
  2337                                  ;       Update the clock tick count and the elapsed days as needed.
  2338                                  ;
  2339                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2340                                                          pop     ds                                              ;... into data segment register
  2341                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2342                                                          inc     eax                                             ;increment clock ticks
  2343                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2344                                                          jb      irq0.10                                         ;no, skip ahead
  2345                                                          inc     byte [wbClockDays]                              ;increment clock days
  2346                                                          xor     eax,eax                                         ;reset clock ticks
  2347                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2348                                  ;
  2349                                  ;       Decrement floppy disk motor timeout.
  2350                                  ;
  2351                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2352                                                          je      irq0.20                                         ;yes, skip ahead
  2353                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2354                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2355                                  ;
  2356                                  ;       Turn off the floppy disk motor if appropriate.
  2357                                  ;
  2358                                                          sti                                                     ;enable maskable interrupts
  2359                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2360                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2361                                                          in      al,dx                                           ;FDC main status byte
  2362                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2363                                                          jnz     irq0.15                                         ;wait while busy
  2364                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2365                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2366                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2367                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2368                                                          out     dx,al                                           ;turn motor off
  2369                                  ;
  2370                                  ;       Signal the end of the hardware interrupt.
  2371                                  ;
  2372                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2373                                  ;
  2374                                  ;       Restore and return.
  2375                                  ;
  2376                                                          pop     ds                                              ;restore modified regs
  2377                                                          pop     edx                                             ;
  2378                                                          pop     eax                                             ;
  2379                                                          iretd                                                   ;return
  2380                                  ;-----------------------------------------------------------------------------------------------------------------------
  2381                                  ;
  2382                                  ;       IRQ1    Keyboard Interrupt
  2383                                  ;
  2384                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2385                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2386                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2387                                  ;       ALL modified registers upon return.
  2388                                  ;
  2389                                  ;-----------------------------------------------------------------------------------------------------------------------
  2390                                                          menter  keyboard                                        ;keyboard interrrupt
  2391                                                          push    eax                                             ;save non-volatile regs
  2392                                                          push    ebx                                             ;
  2393                                                          push    ecx                                             ;
  2394                                                          push    esi                                             ;
  2395                                                          push    ds                                              ;
  2396                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2397                                                          pop     ds                                              ;... into data segment register
  2398                                                          xor     al,al                                           ;zero
  2399                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2400                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2401                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2402                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2403                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2404                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2405                                                          mov     al,' '                                          ;space
  2406                                                          mov     [wbConsoleChar],al                              ;set character to space
  2407                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2408                                                          not     al                                              ;controller timeout mask
  2409                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2410                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2411                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2412                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2413                                                          jz      irq1.140                                        ;yes, skip ahead
  2414                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2415                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2416                                                          mov     ah,al                                           ;copy scan code 0
  2417                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2418                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2419                                                          je      irq1.30                                         ;yes, set flag
  2420                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2421                                                          je      irq1.40                                         ;yes, reset flag
  2422                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2423                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2424                                                          je      irq1.30                                         ;yes, set flag
  2425                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2426                                                          je      irq1.40                                         ;yes, reset flag
  2427                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2428                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2429                                                          je      irq1.30                                         ;yes, set flag
  2430                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2431                                                          je      irq1.40                                         ;yes, reset flag
  2432                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2433                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2434                                                          je      irq1.30                                         ;yes, set flag
  2435                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2436                                                          je      irq1.40                                         ;yes, reset flag
  2437                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2438                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2439                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2440                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2441                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2442                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2443                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2444                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2445                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2446                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2447                                                          jne     irq1.70                                         ;no, skip ahead
  2448                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2449                                                          jz      irq1.140                                        ;yes, skip ahead
  2450                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2451                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2452                                                          mov     ah,al                                           ;copy scan code 1
  2453                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2454                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2455                                                          je      irq1.30                                         ;yes, set flag
  2456                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2457                                                          je      irq1.40                                         ;yes, reset flag
  2458                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2459                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2460                                                          je      irq1.30                                         ;yes, set flag
  2461                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2462                                                          je      irq1.40                                         ;yes, reset flag
  2463                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2464                                                          je      irq1.80                                         ;yes, skip ahead
  2465                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2466                                                          je      irq1.80                                         ;yes, skip ahead
  2467                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2468                                                          je      irq1.10                                         ;yes, continue
  2469                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2470                                                          jne     irq1.20                                         ;no, skip ahead
  2471                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2472                                                          jz      irq1.140                                        ;yes, skip ahead
  2473                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2474                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2475                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2476                                                          jz      irq1.140                                        ;yes, skip ahead
  2477                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2478                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2479                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2480                                  irq1.30                 or      bl,al                                           ;set shift flag
  2481                                                          jmp     irq1.60                                         ;skip ahead
  2482                                  irq1.40                 not     al                                              ;convert flag to mask
  2483                                                          and     bl,al                                           ;reset shift flag
  2484                                                          jmp     irq1.60                                         ;skip ahead
  2485                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2486                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2487                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2488                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2489                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2490                                                          jmp     irq1.150                                        ;finish keyboard handling
  2491                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2492                                                          jne     irq1.80                                         ;no continue
  2493                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2494                                                          jz      irq1.140                                        ;yes, skip ahead
  2495                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2496                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2497                                                          mov     ah,al                                           ;copy scan code 1
  2498                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2499                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2500                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2501                                                          jz      irq1.140                                        ;yes, skip ahead
  2502                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2503                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2504                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2505                                                          jz      irq1.140                                        ;yes, skip ahead
  2506                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2507                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2508                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2509                                                          jz      irq1.140                                        ;yes, skip ahead
  2510                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2511                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2512                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2513                                                          jz      irq1.140                                        ;yes, skip ahead
  2514                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2515                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2516                                                          jmp     irq1.150                                        ;continue
  2517                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2518                                                          test    ah,EKEYBUP                                      ;release code?
  2519                                                          jnz     irq1.130                                        ;yes, skip ahead
  2520                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2521                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2522                                                          jz      irq1.90                                         ;no, skip ahead
  2523                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2524                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2525                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2526                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2527                                                          jz      irq1.100                                        ;no skip ahead
  2528                                                          mov     cl,al                                           ;copy ASCII code
  2529                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2530                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2531                                                          jb      irq1.100                                        ;yes, skip ahead
  2532                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2533                                                          ja      irq1.100                                        ;yes, skip ahead
  2534                                                          xor     al,EASCIICASE                                   ;switch case
  2535                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2536                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2537                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2538                                                          jz      irq1.120                                        ;no, skip ahead
  2539                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2540                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2541                                                          or      edx,eax                                         ;msg id and codes
  2542                                                          xor     ecx,ecx                                         ;null param
  2543                                                          push    eax                                             ;save codes
  2544                                                          call    PutMessage                                      ;put message to console
  2545                                                          pop     eax                                             ;restore codes
  2546                                                          test    al,al                                           ;ASCII translation?
  2547                                                          jz      irq1.130                                        ;no, skip ahead
  2548                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2549                                                          and     eax,0FFFFh                                      ;clear high-order word
  2550                                                          or      edx,eax                                         ;msg id and codes
  2551                                                          xor     ecx,ecx                                         ;null param
  2552                                                          call    PutMessage                                      ;put message to console
  2553                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2554                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2555                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2556                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2557                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2558                                                          pop     ds                                              ;restore non-volatile regs
  2559                                                          pop     esi                                             ;
  2560                                                          pop     ecx                                             ;
  2561                                                          pop     ebx                                             ;
  2562                                                          pop     eax                                             ;
  2563                                                          iretd                                                   ;return
  2564                                  ;-----------------------------------------------------------------------------------------------------------------------
  2565                                  ;       Scan-Code to ASCII Translation Tables
  2566                                  ;-----------------------------------------------------------------------------------------------------------------------
  2567                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2568                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2569                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2570                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2571                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2572                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2573                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2574                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2575                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2576                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2577                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2578                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2579                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2580                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2581                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2582                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2583                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2584                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2585                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2586                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2587                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2588                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2589                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2590                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2591                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2592                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2593                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2594                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2595                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2596                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2597                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2598                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                  ;
  2601                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2602                                  ;
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                                          menter  iochannel                                       ;secondary 8259A cascade
  2605                                                          push    eax                                             ;save modified regs
  2606                                                          jmp     hwint                                           ;end interrupt and return
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                  ;
  2609                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2610                                  ;
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                                          menter  com2                                            ;serial port 2 interrupt
  2613                                                          push    eax                                             ;save modified regs
  2614                                                          jmp     hwint                                           ;end interrupt and return
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                  ;
  2617                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2618                                  ;
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                                          menter  com1                                            ;serial port 1 interrupt
  2621                                                          push    eax                                             ;save modified regs
  2622                                                          jmp     hwint                                           ;end interrupt and return
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                  ;
  2625                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2626                                  ;
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2629                                                          push    eax                                             ;save modified regs
  2630                                                          jmp     hwint                                           ;end interrupt and return
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                  ;
  2633                                  ;       IRQ6    Diskette Hardware Interrupt
  2634                                  ;
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                                          menter  diskette                                        ;floppy disk interrupt
  2637                                                          push    eax                                             ;save non-volatile regs
  2638                                                          push    ds                                              ;
  2639                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2640                                                          pop     ds                                              ;... into DS register
  2641                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2642                                                          or      al,10000000b                                    ;set IRQ flag
  2643                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2644                                                          pop     ds                                              ;restore non-volatile regs
  2645                                                          jmp     hwint                                           ;end primary PIC interrupt
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                  ;
  2648                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2649                                  ;
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2652                                                          push    eax                                             ;save modified regs
  2653                                                          jmp     hwint                                           ;end interrupt and return
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                  ;
  2656                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2657                                  ;
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                                          menter  rtclock                                         ;real-time clock interrupt
  2660                                                          push    eax                                             ;save modified regs
  2661                                                          jmp     hwwint                                          ;end interrupt and return
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  ;
  2664                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2665                                  ;
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2668                                                          push    eax                                             ;save modified regs
  2669                                                          jmp     hwwint                                          ;end interrupt and return
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                  ;
  2672                                  ;       IRQ10   Reserved Hardware Interrupt
  2673                                  ;
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                                          menter  irq10                                           ;reserved
  2676                                                          push    eax                                             ;save modified regs
  2677                                                          jmp     hwwint                                          ;end interrupt and return
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                  ;
  2680                                  ;       IRQ11   Reserved Hardware Interrupt
  2681                                  ;
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                                          menter  irq11                                           ;reserved
  2684                                                          push    eax                                             ;save modified regs
  2685                                                          jmp     hwwint                                          ;end interrupt and return
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                  ;
  2688                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2689                                  ;
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2692                                                          push    eax                                             ;save modified regs
  2693                                                          jmp     hwwint                                          ;end interrupt and return
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2697                                  ;
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                                          menter  coprocessor                                     ;coprocessor interrupt
  2700                                                          push    eax                                             ;save modified regs
  2701                                                          jmp     hwwint                                          ;end interrupt and return
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  ;
  2704                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2705                                  ;
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2708                                                          push    eax                                             ;save modified regs
  2709                                                          jmp     hwwint                                          ;end interrupt and return
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;
  2712                                  ;       IRQ15   Reserved Hardware Interrupt
  2713                                  ;
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                                          menter  irq15                                           ;reserved
  2716                                                          push    eax                                             ;save modified regs
  2717                                                          jmp     hwwint                                          ;end interrupt and return
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;       Exit from hardware interrupt
  2721                                  ;
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2724                                                          jmp     hwint90                                         ;skip ahead
  2725                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2726                                  hwint90                 pop     eax                                             ;restore modified regs
  2727                                                          iretd                                                   ;return from interrupt
  2728                                  ;-----------------------------------------------------------------------------------------------------------------------
  2729                                  ;
  2730                                  ;       INT 30h Operating System Software Service Interrupt
  2731                                  ;
  2732                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2733                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2734                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2735                                  ;       the entry address of the specific function from a table.
  2736                                  ;
  2737                                  ;-----------------------------------------------------------------------------------------------------------------------
  2738                                                          menter  svc
  2739                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2740                                                          jae     svc90                                           ;yes, skip ahead
  2741                                                          movzx   eax,al                                          ;function
  2742                                                          shl     eax,2                                           ;offset into table
  2743                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2744                                  svc90                   iretd                                                   ;return from interrupt
  2745                                  ;-----------------------------------------------------------------------------------------------------------------------
  2746                                  ;
  2747                                  ;       Service Request Table
  2748                                  ;
  2749                                  ;
  2750                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2751                                  ;
  2752                                  ;-----------------------------------------------------------------------------------------------------------------------
  2753                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2754                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2755                                                          tsvce   CompareMemory                                   ;compare memory
  2756                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2757                                                          tsvce   FreeMemory                                      ;free memory block
  2758                                                          tsvce   GetConsoleString                                ;get string input
  2759                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2760                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2761                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2762                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2763                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2764                                                          tsvce   UpperCaseString                                 ;upper-case string
  2765                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2766                                  ;-----------------------------------------------------------------------------------------------------------------------
  2767                                  ;
  2768                                  ;       Service Request Macros
  2769                                  ;
  2770                                  ;       These macros provide positional parameterization of service request calls.
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  %macro                  allocateMemory 1
  2774                                                          mov     ecx,%1                                          ;bytes to allocate
  2775                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2776                                                          int     _svc                                            ;invoke OS service
  2777                                  %endmacro
  2778                                  %macro                  clearConsoleScreen 0
  2779                                                          mov     al,eClearConsoleScreen                          ;function code
  2780                                                          int     _svc                                            ;invoke OS service
  2781                                  %endmacro
  2782                                  %macro                  compareMemory 0
  2783                                                          mov     al,eCompareMemory                               ;function code
  2784                                                          int     _svc                                            ;invoke OS service
  2785                                  %endmacro
  2786                                  %macro                  decimalToUnsigned 0
  2787                                                          mov     al,eDecimalToUnsigned                           ;function code
  2788                                                          int     _svc                                            ;invoke OS servie
  2789                                  %endmacro
  2790                                  %macro                  freeMemory 1
  2791                                                          mov     edx,%1                                          ;address of memory block
  2792                                                          mov     al,eFreeMemory                                  ;function code
  2793                                                          int     _svc                                            ;invoke OS service
  2794                                  %endmacro
  2795                                  %macro                  getConsoleString 4
  2796                                                          mov     edx,%1                                          ;buffer address
  2797                                                          mov     ecx,%2                                          ;max characters
  2798                                                          mov     bh,%3                                           ;echo indicator
  2799                                                          mov     bl,%4                                           ;terminator
  2800                                                          mov     al,eGetConsoleString                            ;function code
  2801                                                          int     _svc                                            ;invoke OS service
  2802                                  %endmacro
  2803                                  %macro                  hexadecimalToUnsigned 0
  2804                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2805                                                          int     _svc                                            ;invoke OS service
  2806                                  %endmacro
  2807                                  %macro                  placeCursor 0
  2808                                                          mov     al,ePlaceCursor                                 ;function code
  2809                                                          int     _svc                                            ;invoke OS service
  2810                                  %endmacro
  2811                                  %macro                  putConsoleString 1
  2812                                                          mov     edx,%1                                          ;string address
  2813                                                          mov     al,ePutConsoleString                            ;function code
  2814                                                          int     _svc                                            ;invoke OS service
  2815                                  %endmacro
  2816                                  %macro                  resetSystem 0
  2817                                                          mov     al,eResetSystem                                 ;function code
  2818                                                          int     _svc                                            ;invoke OS service
  2819                                  %endmacro
  2820                                  %macro                  unsignedToHexadecimal 0
  2821                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2822                                                          int     _svc                                            ;invoke OS service
  2823                                  %endmacro
  2824                                  %macro                  upperCaseString 0
  2825                                                          mov     al,eUpperCaseString                             ;function code
  2826                                                          int     _svc                                            ;invoke OS service
  2827                                  %endmacro
  2828                                  ;=======================================================================================================================
  2829                                  ;
  2830                                  ;       Kernel Function Library
  2831                                  ;
  2832                                  ;=======================================================================================================================
  2833                                  ;=======================================================================================================================
  2834                                  ;
  2835                                  ;       Memory Helper Routines
  2836                                  ;
  2837                                  ;       AllocateMemory
  2838                                  ;       FreeMemory
  2839                                  ;
  2840                                  ;=======================================================================================================================
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                  ;
  2843                                  ;       Routine:        AllocateMemory
  2844                                  ;
  2845                                  ;       Description:    This routine allocates a memory block for the given task.
  2846                                  ;
  2847                                  ;       In:             ECX     bytes of memory to allocate
  2848                                  ;
  2849                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2850                                  ;                               0       unable to allocate memory
  2851                                  ;
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  2854                                                          push    ecx                                             ;
  2855                                                          push    esi                                             ;
  2856                                                          push    ds                                              ;
  2857                                  ;
  2858                                  ;       Address kernel memory structures
  2859                                  ;
  2860                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2861                                                          pop     ds                                              ;... into data segment reg
  2862                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2863                                  ;
  2864                                  ;       Set requested size to minimum block size if requested size is too small.
  2865                                  ;
  2866                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2867                                                          jae     .10                                             ;no, branch
  2868                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2869                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2870                                  ;
  2871                                  ;       Find the first free memory block large enough to satisfy the request.
  2872                                  ;
  2873                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2874                                  .20                     test    eax,eax                                         ;end of free block chain?
  2875                                                          jz      .220                                            ;yes, branch
  2876                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2877                                                          jbe     .30                                             ;yes, branch
  2878                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2879                                                          jmp     .20                                             ;continue
  2880                                  ;-----------------------------------------------------------------------------------------------------------------------
  2881                                  ;
  2882                                  ;       Address the previous and next free memory blocks.
  2883                                  ;
  2884                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2885                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2886                                  ;
  2887                                  ;       Remove the free memory block from the forward free memory block chain.
  2888                                  ;
  2889                                                          test    ebx,ebx                                         ;any previous free memory block?
  2890                                                          jz      .40                                             ;no, branch
  2891                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2892                                                          jmp     .50                                             ;continue
  2893                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2894                                  ;
  2895                                  ;       Remove the free memory block from the reverse free memory block chain.
  2896                                  ;
  2897                                  .50                     test    edx,edx                                         ;any next free memory block?
  2898                                                          jz      .60                                             ;no, branch
  2899                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2900                                                          jmp     .70                                             ;continue
  2901                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       Determine if the free memory block can be split.
  2905                                  ;
  2906                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2907                                                          sub     ebx,ecx                                         ;subtract requested memory size
  2908                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2909                                                          jb      .150                                            ;no, branch
  2910                                  ;
  2911                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2912                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2913                                  ;       of the requested memory size.
  2914                                  ;
  2915                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2916                                                          mov     edx,eax                                         ;memory block address
  2917                                                          add     edx,ecx                                         ;address new new next contig block
  2918                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2919                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2920                                  ;
  2921                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2922                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2923                                  ;
  2924                                                          jecxz   .80                                             ;no next contig, branch
  2925                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2926                                                          jmp     .90                                             ;continue
  2927                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2928                                  ;
  2929                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2930                                  ;
  2931                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2932                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2933                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2934                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  2935                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2936                                                          xor     ebx,ebx                                         ;zero register
  2937                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2938                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2939                                  ;
  2940                                  ;       Find the proper location in the free block chain for the new free block
  2941                                  ;
  2942                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  2943                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  2944                                  .100                    jecxz   .110                                            ;branch if at end of chain
  2945                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  2946                                                          jbe     .110                                            ;yes, branch
  2947                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  2948                                                          jmp     .100                                            ;continue
  2949                                  ;
  2950                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  2951                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  2952                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  2953                                  ;       block of hte next block, if there is one.
  2954                                  ;
  2955                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  2956                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  2957                                                          jecxz   .120                                            ;branch if no next block
  2958                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  2959                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  2960                                                          jmp     .130                                            ;continue
  2961                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  2962                                  ;
  2963                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  2964                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  2965                                  ;       last user block pointers if necessary.
  2966                                  ;
  2967                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  2968                                                          test    ebx,ebx                                         ;is there a previous block?
  2969                                                          jz      .140                                            ;no, branch
  2970                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  2971                                                          jmp     .150                                            ;continue
  2972                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  2973                                  ;
  2974                                  ;       Update the newly allocated block's owner and signature.
  2975                                  ;
  2976                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  2977                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  2978                                                          xor     edx,edx                                         ;zero register
  2979                                                          str     dx                                              ;load the task state register
  2980                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  2981                                  ;
  2982                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  2983                                  ;
  2984                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  2985                                  .160                    jecxz   .180                                            ;branch if at end of chain
  2986                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  2987                                                          jb      .180                                            ;branch if block belongs to next task
  2988                                                          je      .170                                            ;branch if block belongs to this task
  2989                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  2990                                                          jmp     .160                                            ;continue
  2991                                  ;
  2992                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  2993                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  2994                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  2995                                  ;       place to insert the block.
  2996                                  ;
  2997                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  2998                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  2999                                                          jbe     .180                                            ;yes, branch
  3000                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3001                                                          test    ecx,ecx                                         ;end of chain?
  3002                                                          jz      .180                                            ;yes, branch
  3003                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3004                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3005                                                          je      .170                                            ;yes, continue search
  3006                                  ;
  3007                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3008                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3009                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3010                                  ;       do have a previous-block, we update that block's next-block pointer.
  3011                                  ;
  3012                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3013                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3014                                                          jecxz   .190                                            ;branch if no next-task block
  3015                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3016                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3017                                                          jmp     .200                                            ;continue
  3018                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3019                                  ;
  3020                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3021                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3022                                  ;       global first and/or last user-block pointers if necessary.
  3023                                  ;
  3024                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3025                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3026                                                          jz      .210                                            ;no, branch
  3027                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3028                                                          jmp     .220                                            ;continue
  3029                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3030                                  ;
  3031                                  ;       Restore registers and return to caller.
  3032                                  ;
  3033                                  .220                    pop     ds                                              ;restore non-volatie regs
  3034                                                          pop     esi                                             ;
  3035                                                          pop     ecx                                             ;
  3036                                                          pop     ebx                                             ;
  3037                                                          ret                                                     ;return
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  ;
  3040                                  ;       Routine:        FreeMemory
  3041                                  ;
  3042                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3043                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3044                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3045                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3046                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3047                                  ;
  3048                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3049                                  ;
  3050                                  ;       Out:            EAX     -1      invalid memory block
  3051                                  ;                               0       memory block freed
  3052                                  ;
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3055                                                          push    ecx                                             ;
  3056                                                          push    esi                                             ;
  3057                                                          push    edi                                             ;
  3058                                                          push    ds                                              ;
  3059                                                          push    es                                              ;
  3060                                  ;
  3061                                  ;       Address the root memory structure
  3062                                  ;
  3063                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3064                                                          pop     es                                              ;... into extra segment reg
  3065                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3066                                                          pop     ds                                              ;... into data segment reg
  3067                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3068                                                          mov     edi,edx                                         ;memory block address
  3069                                  ;
  3070                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3071                                  ;
  3072                                                          xor     eax,eax                                         ;indicate success
  3073                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3074                                                          je      .240                                            ;yes, branch
  3075                                                          dec     eax                                             ;indicate failure
  3076                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3077                                                          jne     .240                                            ;no, branch
  3078                                  ;-----------------------------------------------------------------------------------------------------------------------
  3079                                  ;
  3080                                  ;       Unlink the USER memory block.
  3081                                  ;
  3082                                  ;-----------------------------------------------------------------------------------------------------------------------
  3083                                  ;
  3084                                  ;       Set the block signature. Reset owner.
  3085                                  ;
  3086                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3087                                                          xor     eax,eax                                         ;zero register
  3088                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3089                                  ;
  3090                                  ;       Wipe user area.
  3091                                  ;
  3092                                                          push    edi                                             ;save block address
  3093                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3094                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3095                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3096                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3097                                                          rep     stosb                                           ;clear memory
  3098                                                          pop     edi                                             ;restore block address
  3099                                  ;
  3100                                  ;       Address the preceding and following USER memory blocks
  3101                                  ;
  3102                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3103                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3104                                  ;
  3105                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3106                                  ;       pointer to point to the USER block following this block.
  3107                                  ;
  3108                                                          test    ebx,ebx                                         ;is there a previous block?
  3109                                                          jz      .10                                             ;no, branch
  3110                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3111                                                          jmp     .20                                             ;continue
  3112                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3113                                  ;
  3114                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3115                                  ;       pointer to point to the USER block preceding this block.
  3116                                  ;
  3117                                  .20                     jecxz   .30                                             ;branch if no next block
  3118                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3119                                                          jmp     .40                                             ;continue
  3120                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3121                                  ;-----------------------------------------------------------------------------------------------------------------------
  3122                                  ;
  3123                                  ;       Merge with a previous contiguous FREE memory block.
  3124                                  ;
  3125                                  ;-----------------------------------------------------------------------------------------------------------------------
  3126                                  ;
  3127                                  ;       Address the preceding and following contiguous memory blocks.
  3128                                  ;
  3129                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3130                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3131                                  ;
  3132                                  ;       Verify we have a previous contiguous FREE block.
  3133                                  ;
  3134                                                          test    ebx,ebx                                         ;is there a previous block?
  3135                                                          jz      .100                                            ;no, branch
  3136                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3137                                                          jne     .100                                            ;no, branch
  3138                                  ;
  3139                                  ;       Update adjacent block's contiguous pointers.
  3140                                  ;
  3141                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3142                                                          jecxz   .50                                             ;branch if no next contiguous block
  3143                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3144                                                          jmp     .60                                             ;continue
  3145                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3146                                  ;
  3147                                  ;       Update the size of the merged FREE block.
  3148                                  ;
  3149                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3150                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3151                                  ;
  3152                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3153                                  ;
  3154                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3155                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3156                                                          rep     stosb                                           ;clear memory header
  3157                                                          mov     edi,ebx                                         ;current block is now previous block
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  ;
  3160                                  ;       Unlink the previous contiguous FREE memory block
  3161                                  ;
  3162                                  ;-----------------------------------------------------------------------------------------------------------------------
  3163                                  ;
  3164                                  ;       Address the preceding and following USER memory blocks
  3165                                  ;
  3166                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3167                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3168                                  ;
  3169                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3170                                  ;       block pointer.
  3171                                  ;
  3172                                                          test    ebx,ebx                                         ;is there a previous block?
  3173                                                          jz      .70                                             ;no, branch
  3174                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3175                                                          jmp     .80                                             ;branch
  3176                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3177                                  ;
  3178                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3179                                  ;       pointer.
  3180                                  ;
  3181                                  .80                     jecxz   .90                                             ;branch if no next block
  3182                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3183                                                          jmp     .100                                            ;continue
  3184                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       Merge with a following contiguous FREE memory block.
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  ;
  3191                                  ;       Verify we have a following contiguous FREE block.
  3192                                  ;
  3193                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3194                                                          jecxz   .170                                            ;branch if no next contiguous block
  3195                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3196                                                          jne     .170                                            ;no, branch
  3197                                  ;
  3198                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3199                                  ;
  3200                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3201                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3202                                  ;
  3203                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3204                                  ;
  3205                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3206                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3207                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3208                                                          jz      .110                                            ;no, branch
  3209                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3210                                                          jmp     .120                                            ;continue
  3211                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3212                                  ;-----------------------------------------------------------------------------------------------------------------------
  3213                                  ;
  3214                                  ;       Unlink the following contiguous FREE memory block
  3215                                  ;
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  ;
  3218                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3219                                  ;
  3220                                  .120                    push    edi                                             ;save this block
  3221                                                          mov     edi,ecx                                         ;next contiguous block
  3222                                                          push    ecx                                             ;save next contiguous block
  3223                                  ;
  3224                                  ;       Address the preceding and following USER memory blocks
  3225                                  ;
  3226                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3227                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3228                                  ;
  3229                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3230                                  ;       block pointer.
  3231                                  ;
  3232                                                          test    ebx,ebx                                         ;is there a previous block?
  3233                                                          jz      .130                                            ;no, branch
  3234                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3235                                                          jmp     .140                                            ;branch
  3236                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3237                                  ;
  3238                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3239                                  ;       pointer.
  3240                                  ;
  3241                                  .140                    jecxz   .150                                            ;branch if no next block
  3242                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3243                                                          jmp     .160                                            ;continue
  3244                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3245                                  ;
  3246                                  ;       Clear next contiguous block's header
  3247                                  ;
  3248                                  .160                    pop     edi                                             ;next congiguous block pointer
  3249                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3250                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3251                                                          rep     stosb                                           ;clear memory header
  3252                                                          pop     edi                                             ;this block's pointer
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;       Insert the final FREE block back into the block chain.
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  ;
  3259                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3260                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3261                                  ;       all are smaller in size.
  3262                                  ;
  3263                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3264                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3265                                  .180                    jecxz   .190                                            ;exit if no ptr
  3266                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3267                                                          jb      .190                                            ;yes, branch
  3268                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3269                                                          jmp     .180                                            ;continue
  3270                                  ;
  3271                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3272                                  ;       larger free block. Update the next block's previous block pointer.
  3273                                  ;
  3274                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3275                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3276                                                          jecxz   .200                                            ;branch if no block found
  3277                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3278                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3279                                                          jmp     .210                                            ;continue
  3280                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3281                                  ;
  3282                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3283                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3284                                  ;       next pointer.
  3285                                  ;
  3286                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3287                                                          test    ebx,ebx                                         ;do we have a previous block?
  3288                                                          jz      .220                                            ;no, branch
  3289                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3290                                                          jmp     .230                                            ;continue
  3291                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3292                                  ;
  3293                                  ;       The memory free has completed.
  3294                                  ;
  3295                                  .230                    xor     eax,eax                                         ;indicate success
  3296                                  ;
  3297                                  ;       Restore and return.
  3298                                  ;
  3299                                  .240                    pop     es                                              ;restore non-volatile regs
  3300                                                          pop     ds                                              ;
  3301                                                          pop     edi                                             ;
  3302                                                          pop     esi                                             ;
  3303                                                          pop     ecx                                             ;
  3304                                                          pop     ebx                                             ;
  3305                                                          ret                                                     ;return
  3306                                  ;=======================================================================================================================
  3307                                  ;
  3308                                  ;       String Helper Routines
  3309                                  ;
  3310                                  ;       CompareMemory
  3311                                  ;       UpperCaseString
  3312                                  ;
  3313                                  ;=======================================================================================================================
  3314                                  ;-----------------------------------------------------------------------------------------------------------------------
  3315                                  ;
  3316                                  ;       Routine:        CompareMemory
  3317                                  ;
  3318                                  ;       Description:    This routine compares two byte arrays.
  3319                                  ;
  3320                                  ;       In:             DS:EDX  first source address
  3321                                  ;                       DS:EBX  second source address
  3322                                  ;                       ECX     comparison length
  3323                                  ;
  3324                                  ;       Out:            EDX     first source address
  3325                                  ;                       EBX     second source address
  3326                                  ;                       ECX     0       array 1 = array 2
  3327                                  ;                               <0      array 1 < array 2
  3328                                  ;                               >0      array 1 > array 2
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3332                                                          push    edi                                             ;
  3333                                                          push    es                                              ;
  3334                                                          push    ds                                              ;copy DS
  3335                                                          pop     es                                              ;... to ES
  3336                                                          mov     esi,edx                                         ;first source address
  3337                                                          mov     edi,ebx                                         ;second source address
  3338                                                          cld                                                     ;forward strings
  3339                                                          rep     cmpsb                                           ;compare bytes
  3340                                                          mov     al,0                                            ;default result
  3341                                                          jz      .10                                             ;branch if arrays equal
  3342                                                          mov     al,1                                            ;positive result
  3343                                                          jnc     .10                                             ;branch if target > source
  3344                                                          mov     al,-1                                           ;negative result
  3345                                  .10                     movsx   ecx,al                                          ;extend sign
  3346                                                          pop     es                                              ;restore non-volatile regs
  3347                                                          pop     edi                                             ;
  3348                                                          pop     esi                                             ;
  3349                                                          ret                                                     ;return
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351                                  ;
  3352                                  ;       Routine:        UpperCaseString
  3353                                  ;
  3354                                  ;       Description:    This routine places all characters in the given string to upper case.
  3355                                  ;
  3356                                  ;       In:             DS:EDX  string address
  3357                                  ;
  3358                                  ;       Out:            EDX     string address
  3359                                  ;
  3360                                  ;-----------------------------------------------------------------------------------------------------------------------
  3361                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3362                                                          mov     esi,edx                                         ;string address
  3363                                                          cld                                                     ;forward strings
  3364                                  .10                     lodsb                                                   ;string character
  3365                                                          test    al,al                                           ;null?
  3366                                                          jz      .20                                             ;yes, skip ahead
  3367                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3368                                                          jb      .10                                             ;no, continue
  3369                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3370                                                          ja      .10                                             ;no, continue
  3371                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3372                                                          mov     [esi-1],al                                      ;upper character
  3373                                                          jmp     .10                                             ;continue
  3374                                  .20                     pop     esi                                             ;restore non-volatile regs
  3375                                                          ret                                                     ;return
  3376                                  ;=======================================================================================================================
  3377                                  ;
  3378                                  ;       Console Helper Routines
  3379                                  ;
  3380                                  ;       FirstConsoleColumn
  3381                                  ;       GetConsoleChar
  3382                                  ;       GetConsoleString
  3383                                  ;       NextConsoleColumn
  3384                                  ;       NextConsoleRow
  3385                                  ;       PreviousConsoleColumn
  3386                                  ;       PutConsoleChar
  3387                                  ;       PutConsoleHexByte
  3388                                  ;       PutConsoleHexDword
  3389                                  ;       PutConsoleHexWord
  3390                                  ;       PutConsoleOIAChar
  3391                                  ;       PutConsoleOIAShift
  3392                                  ;       PutConsoleString
  3393                                  ;       Yield
  3394                                  ;
  3395                                  ;=======================================================================================================================
  3396                                  ;-----------------------------------------------------------------------------------------------------------------------
  3397                                  ;
  3398                                  ;       Routine:        FirstConsoleColumn
  3399                                  ;
  3400                                  ;       Description:    This routine resets the console column to start of the row.
  3401                                  ;
  3402                                  ;       In:             DS      OS data selector
  3403                                  ;
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3406                                                          mov     [wbConsoleColumn],al                            ;save column
  3407                                                          ret                                                     ;return
  3408                                  ;-----------------------------------------------------------------------------------------------------------------------
  3409                                  ;
  3410                                  ;       Routine:        GetConsoleChar
  3411                                  ;
  3412                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3413                                  ;
  3414                                  ;       Out:            AL      ASCII character code
  3415                                  ;                       AH      keyboard scan code
  3416                                  ;
  3417                                  ;-----------------------------------------------------------------------------------------------------------------------
  3418                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3419                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3420                                                          or      eax,eax                                         ;do we have a message?
  3421                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3422                                                          push    eax                                             ;save key codes
  3423                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3424                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3425                                                          pop     eax                                             ;restore key codes
  3426                                                          jne     GetConsoleChar                                  ;no, try again
  3427                                                          and     eax,0000ffffh                                   ;mask for key codes
  3428                                                          ret                                                     ;return
  3429                                  ;-----------------------------------------------------------------------------------------------------------------------
  3430                                  ;
  3431                                  ;       Routine:        GetConsoleString
  3432                                  ;
  3433                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3434                                  ;
  3435                                  ;       In:             DS:EDX  target buffer address
  3436                                  ;                       ECX     maximum number of characters to accept
  3437                                  ;                       BH      echo to terminal
  3438                                  ;                       BL      terminating character
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3442                                                          push    esi                                             ;
  3443                                                          push    edi                                             ;
  3444                                                          push    es                                              ;
  3445                                                          push    ds                                              ;load data segment selector ...
  3446                                                          pop     es                                              ;... into extra segment register
  3447                                                          mov     edi,edx                                         ;edi = target buffer
  3448                                                          push    ecx                                             ;save maximum characters
  3449                                                          xor     al,al                                           ;zero register
  3450                                                          cld                                                     ;forward strings
  3451                                                          rep     stosb                                           ;zero fill buffer
  3452                                                          pop     ecx                                             ;maximum characters
  3453                                                          mov     edi,edx                                         ;edi = target buffer
  3454                                                          mov     esi,edx                                         ;esi = target buffer
  3455                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  3456                                  .20                     call    GetConsoleChar                                  ;al = next input char
  3457                                                          cmp     al,bl                                           ;is this the terminator?
  3458                                                          je      .50                                             ;yes, exit
  3459                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3460                                                          jne     .30                                             ;no, skip ahead
  3461                                                          cmp     esi,edi                                         ;at start of buffer?
  3462                                                          je      .20                                             ;yes, get next character
  3463                                                          dec     edi                                             ;backup target pointer
  3464                                                          mov     byte [edi],0                                    ;zero previous character
  3465                                                          inc     ecx                                             ;increment remaining chars
  3466                                                          test    bh,1                                            ;echo to console?
  3467                                                          jz      .20                                             ;no, get next character
  3468                                                          call    PreviousConsoleColumn                           ;backup console position
  3469                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3470                                                          call    PutConsoleChar                                  ;write space to console
  3471                                                          call    PlaceCursor                                     ;position the cursor
  3472                                                          jmp     .20                                             ;get next character
  3473                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3474                                                          jb      .20                                             ;no, get another character
  3475                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3476                                                          ja      .20                                             ;no, get another character
  3477                                                          stosb                                                   ;store character in buffer
  3478                                                          test    bh,1                                            ;echo to console?
  3479                                                          jz      .40                                             ;no, skip ahead
  3480                                                          call    PutConsoleChar                                  ;write character to console
  3481                                                          call    NextConsoleColumn                               ;advance console position
  3482                                                          call    PlaceCursor                                     ;position the cursor
  3483                                  .40                     dec     ecx                                             ;decrement remaining chars
  3484                                                          jmp     .10                                             ;next
  3485                                  .50                     xor     al,al                                           ;null
  3486                                                          stosb                                                   ;terminate buffer
  3487                                                          pop     es                                              ;restore non-volatile regs
  3488                                                          pop     edi                                             ;
  3489                                                          pop     esi                                             ;
  3490                                                          pop     ecx                                             ;
  3491                                                          ret                                                     ;return
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  ;
  3494                                  ;       Routine:        NextConsoleColumn
  3495                                  ;
  3496                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3497                                  ;                       incremented if the end of the current row is reached.
  3498                                  ;
  3499                                  ;       In:             DS      OS data selector
  3500                                  ;
  3501                                  ;-----------------------------------------------------------------------------------------------------------------------
  3502                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3503                                                          inc     al                                              ;increment column
  3504                                                          mov     [wbConsoleColumn],al                            ;save column
  3505                                                          cmp     al,ECONCOLS                                     ;end of row?
  3506                                                          jb      .10                                             ;no, skip ahead
  3507                                                          call    FirstConsoleColumn                              ;reset column to start of row
  3508                                                          call    NextConsoleRow                                  ;line feed to next row
  3509                                  .10                     ret                                                     ;return
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;       Routine:        NextConsoleRow
  3513                                  ;
  3514                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3515                                  ;
  3516                                  ;       In:             DS      OS data selector
  3517                                  ;
  3518                                  ;-----------------------------------------------------------------------------------------------------------------------
  3519                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3520                                                          inc     al                                              ;increment row
  3521                                                          mov     [wbConsoleRow],al                               ;save row
  3522                                                          cmp     al,ECONROWS                                     ;end of screen?
  3523                                                          jb      .10                                             ;no, skip ahead
  3524                                                          call    ScrollConsoleRow                                ;scroll up one row
  3525                                                          mov     al,[wbConsoleRow]                               ;row
  3526                                                          dec     al                                              ;decrement row
  3527                                                          mov     [wbConsoleRow],al                               ;save row
  3528                                  .10                     ret                                                     ;return
  3529                                  ;-----------------------------------------------------------------------------------------------------------------------
  3530                                  ;
  3531                                  ;       Routine:        PreviousConsoleColumn
  3532                                  ;
  3533                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3534                                  ;                       the column is set to the last position in the row and the row is decremented.
  3535                                  ;
  3536                                  ;       In:             DS      OS data selector
  3537                                  ;
  3538                                  ;-----------------------------------------------------------------------------------------------------------------------
  3539                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3540                                                          or      al,al                                           ;start of row?
  3541                                                          jnz     .10                                             ;no, skip ahead
  3542                                                          mov     ah,[wbConsoleRow]                               ;current row
  3543                                                          or      ah,ah                                           ;top of screen?
  3544                                                          jz      .20                                             ;yes, exit with no change
  3545                                                          dec     ah                                              ;decrement row
  3546                                                          mov     [wbConsoleRow],ah                               ;save row
  3547                                                          mov     al,ECONCOLS                                     ;set maximum column
  3548                                  .10                     dec     al                                              ;decrement column
  3549                                                          mov     [wbConsoleColumn],al                            ;save column
  3550                                  .20                     ret                                                     ;return
  3551                                  ;-----------------------------------------------------------------------------------------------------------------------
  3552                                  ;
  3553                                  ;       Routine:        PutConsoleChar
  3554                                  ;
  3555                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3556                                  ;
  3557                                  ;       In:             AL      ASCII character
  3558                                  ;                       DS      OS data selector
  3559                                  ;
  3560                                  ;-----------------------------------------------------------------------------------------------------------------------
  3561                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3562                                                          push    es                                              ;
  3563                                                          push    EGDTCGA                                         ;load CGA selector ...
  3564                                                          pop     es                                              ;... into extra segment reg
  3565                                                          mov     cl,[wbConsoleColumn]                            ;column
  3566                                                          mov     ch,[wbConsoleRow]                               ;row
  3567                                                          call    SetConsoleChar                                  ;put character at row, column
  3568                                                          pop     es                                              ;restore non-volatile regs
  3569                                                          pop     ecx                                             ;
  3570                                                          ret                                                     ;return
  3571                                  ;-----------------------------------------------------------------------------------------------------------------------
  3572                                  ;
  3573                                  ;       Routine:        PutConsoleHexByte
  3574                                  ;
  3575                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3576                                  ;
  3577                                  ;       In:             AL      byte value
  3578                                  ;                       CL      column
  3579                                  ;                       CH      row
  3580                                  ;                       DS      OS data selector
  3581                                  ;                       ES      CGA selector
  3582                                  ;
  3583                                  ;-----------------------------------------------------------------------------------------------------------------------
  3584                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3585                                                          mov     bl,al                                           ;save byte value
  3586                                                          shr     al,4                                            ;hi-order nybble
  3587                                                          or      al,030h                                         ;apply ASCII zone
  3588                                                          cmp     al,03ah                                         ;numeric?
  3589                                                          jb      .10                                             ;yes, skip ahead
  3590                                                          add     al,7                                            ;add ASCII offset for alpha
  3591                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3592                                                          mov     al,bl                                           ;byte value
  3593                                                          and     al,0fh                                          ;lo-order nybble
  3594                                                          or      al,30h                                          ;apply ASCII zone
  3595                                                          cmp     al,03ah                                         ;numeric?
  3596                                                          jb      .20                                             ;yes, skip ahead
  3597                                                          add     al,7                                            ;add ASCII offset for alpha
  3598                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3599                                                          pop     ebx                                             ;restore non-volatile regs
  3600                                                          ret                                                     ;return
  3601                                  ;-----------------------------------------------------------------------------------------------------------------------
  3602                                  ;
  3603                                  ;       Routine:        PutConsoleHexDword
  3604                                  ;
  3605                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3606                                  ;
  3607                                  ;       In:             EAX     value
  3608                                  ;                       CL      column
  3609                                  ;                       CH      row
  3610                                  ;                       DS      OS data selector
  3611                                  ;                       ES      CGA selector
  3612                                  ;
  3613                                  ;-----------------------------------------------------------------------------------------------------------------------
  3614                                  PutConsoleHexDword      push    eax
  3615                                                          shr     eax,16
  3616                                                          call    PutConsoleHexWord
  3617                                                          pop     eax
  3618                                                          call    PutConsoleHexWord
  3619                                                          ret
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621                                  ;
  3622                                  ;       Routine:        PutConsoleHexWord
  3623                                  ;
  3624                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3625                                  ;
  3626                                  ;       In:             EAX     value
  3627                                  ;                       CL      column
  3628                                  ;                       CH      row
  3629                                  ;                       DS      OS data selector
  3630                                  ;                       ES      CGA selector
  3631                                  ;
  3632                                  ;-----------------------------------------------------------------------------------------------------------------------
  3633                                  PutConsoleHexWord       push    eax
  3634                                                          shr     eax,8
  3635                                                          call    PutConsoleHexByte
  3636                                                          pop     eax
  3637                                                          call    PutConsoleHexByte
  3638                                                          ret
  3639                                  ;-----------------------------------------------------------------------------------------------------------------------
  3640                                  ;
  3641                                  ;       Routine:        PutConsoleOIAChar
  3642                                  ;
  3643                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3644                                  ;
  3645                                  ;       In:             DS      OS data selector
  3646                                  ;
  3647                                  ;-----------------------------------------------------------------------------------------------------------------------
  3648                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3649                                                          push    ecx                                             ;
  3650                                                          push    esi                                             ;
  3651                                                          push    ds                                              ;
  3652                                                          push    es                                              ;
  3653                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3654                                                          pop     ds                                              ;... into data segment register
  3655                                                          push    EGDTCGA                                         ;load CGA selector ...
  3656                                                          pop     es                                              ;... into extra segment register
  3657                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3658                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3659                                                          mov     bl,0                                            ;starting column
  3660                                                          mov     ecx,6                                           ;maximum scan codes
  3661                                  .10                     push    ecx                                             ;save remaining count
  3662                                                          mov     ecx,ebx                                         ;row, column
  3663                                                          lodsb                                                   ;read scan code
  3664                                                          or      al,al                                           ;scan code present?
  3665                                                          jz      .20                                             ;no, skip ahead
  3666                                                          call    PutConsoleHexByte                               ;display scan code
  3667                                                          jmp     .30                                             ;continue
  3668                                  .20                     mov     al,' '                                          ;ASCII space
  3669                                                          call    SetConsoleChar                                  ;display space
  3670                                                          mov     al,' '                                          ;ASCII space
  3671                                                          call    SetConsoleChar                                  ;display space
  3672                                  .30                     add     bl,2                                            ;next column (+2)
  3673                                                          pop     ecx                                             ;restore remaining
  3674                                                          loop    .10                                             ;next code
  3675                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3676                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3677                                                          jb      .40                                             ;no, skip ahead
  3678                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3679                                                          ja      .40                                             ;no, skip ahead
  3680                                                          mov     ch,bh                                           ;OIA row
  3681                                                          mov     cl,40                                           ;character display column
  3682                                                          call    SetConsoleChar                                  ;display ASCII character
  3683                                  .40                     pop     es                                              ;restore non-volatile regs
  3684                                                          pop     ds                                              ;
  3685                                                          pop     esi                                             ;
  3686                                                          pop     ecx                                             ;
  3687                                                          pop     ebx                                             ;
  3688                                                          ret                                                     ;return
  3689                                  ;-----------------------------------------------------------------------------------------------------------------------
  3690                                  ;
  3691                                  ;       Routine:        PutConsoleOIAShift
  3692                                  ;
  3693                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3694                                  ;
  3695                                  ;       In:             BL      shift flags
  3696                                  ;                       BH      lock flags
  3697                                  ;                       DS      OS data selector
  3698                                  ;
  3699                                  ;-----------------------------------------------------------------------------------------------------------------------
  3700                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3701                                                          push    es                                              ;
  3702                                                          push    EGDTCGA                                         ;load CGA selector ...
  3703                                                          pop     es                                              ;... into ES register
  3704                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3705                                                          mov     al,EASCIISPACE                                  ;space is default character
  3706                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3707                                                          jz      .10                                             ;no, skip ahead
  3708                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3709                                  .10                     mov     cl,14                                           ;indicator column
  3710                                                          call    SetConsoleChar                                  ;display ASCII character
  3711                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3712                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3713                                                          jz      .20                                             ;no, skip ahead
  3714                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3715                                  .20                     mov     cl,64                                           ;indicator column
  3716                                                          call    SetConsoleChar                                  ;display ASCII character
  3717                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3718                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3719                                                          jz      .30                                             ;no, skip ahead
  3720                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3721                                  .30                     mov     cl,15                                           ;indicator column
  3722                                                          call    SetConsoleChar                                  ;display ASCII character
  3723                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3724                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3725                                                          jz      .40                                             ;no, skip ahead
  3726                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3727                                  .40                     mov     cl,63                                           ;indicator column
  3728                                                          call    SetConsoleChar                                  ;display ASCII character
  3729                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3730                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3731                                                          jz      .50                                             ;no, skip ahead
  3732                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3733                                  .50                     mov     cl,16                                           ;indicator column
  3734                                                          call    SetConsoleChar                                  ;display ASCII character
  3735                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3736                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3737                                                          jz      .60                                             ;no, skip ahead
  3738                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3739                                  .60                     mov     cl,62                                           ;indicator column
  3740                                                          call    SetConsoleChar                                  ;display ASCII character
  3741                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3742                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3743                                                          jz      .70                                             ;no, skip ahead
  3744                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3745                                  .70                     mov     cl,78                                           ;indicator column
  3746                                                          call    SetConsoleChar                                  ;display ASCII character
  3747                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3748                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3749                                                          jz      .80                                             ;no, skip ahead
  3750                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3751                                  .80                     mov     cl,77                                           ;indicator column
  3752                                                          call    SetConsoleChar                                  ;display ASCII character
  3753                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3754                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3755                                                          jz      .90                                             ;no, skip ahead
  3756                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3757                                  .90                     mov     cl,76                                           ;indicator column
  3758                                                          call    SetConsoleChar                                  ;display ASCII character
  3759                                                          pop     es                                              ;restore non-volatile regs
  3760                                                          pop     ecx                                             ;
  3761                                                          ret                                                     ;return
  3762                                  ;-----------------------------------------------------------------------------------------------------------------------
  3763                                  ;
  3764                                  ;       Routine:        PutConsoleString
  3765                                  ;
  3766                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3767                                  ;                       console position as needed.
  3768                                  ;
  3769                                  ;       In:             EDX     source address
  3770                                  ;                       DS      OS data selector
  3771                                  ;
  3772                                  ;-----------------------------------------------------------------------------------------------------------------------
  3773                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3774                                                          mov     esi,edx                                         ;source address
  3775                                                          cld                                                     ;forward strings
  3776                                  .10                     lodsb                                                   ;ASCII character
  3777                                                          or      al,al                                           ;end of string?
  3778                                                          jz      .40                                             ;yes, skip ahead
  3779                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3780                                                          jne     .20                                             ;no, skip ahead
  3781                                                          call    FirstConsoleColumn                              ;move to start of row
  3782                                                          jmp     .10                                             ;next character
  3783                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3784                                                          jne     .30                                             ;no, skip ahead
  3785                                                          call    NextConsoleRow                                  ;move to next row
  3786                                                          jmp     .10                                             ;next character
  3787                                  .30                     call    PutConsoleChar                                  ;output character to console
  3788                                                          call    NextConsoleColumn                               ;advance to next column
  3789                                                          jmp     .10                                             ;next character
  3790                                  .40                     pop     esi                                             ;restore non-volatile regs
  3791                                                          ret                                                     ;return
  3792                                  ;-----------------------------------------------------------------------------------------------------------------------
  3793                                  ;
  3794                                  ;       Routine:        Yield
  3795                                  ;
  3796                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3797                                  ;
  3798                                  ;-----------------------------------------------------------------------------------------------------------------------
  3799                                  Yield                   sti                                                     ;enable maskagle interrupts
  3800                                                          hlt                                                     ;halt until external interrupt
  3801                                                          ret                                                     ;return
  3802                                  ;=======================================================================================================================
  3803                                  ;
  3804                                  ;       Data-Type Conversion Helper Routines
  3805                                  ;
  3806                                  ;       DecimalToUnsigned
  3807                                  ;       HexadecimalToUnsigned
  3808                                  ;       UnsignedToHexadecimal
  3809                                  ;
  3810                                  ;=======================================================================================================================
  3811                                  ;-----------------------------------------------------------------------------------------------------------------------
  3812                                  ;
  3813                                  ;       Routine:        DecimalToUnsigned
  3814                                  ;
  3815                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3816                                  ;
  3817                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3818                                  ;
  3819                                  ;       Output:         EAX     unsigned integer value
  3820                                  ;
  3821                                  ;-----------------------------------------------------------------------------------------------------------------------
  3822                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3823                                                          mov     esi,edx                                         ;source address
  3824                                                          xor     edx,edx                                         ;zero total
  3825                                  .10                     lodsb                                                   ;source byte
  3826                                                          cmp     al,','                                          ;comma?
  3827                                                          je      .10                                             ;yes, ignore
  3828                                                          test    al,al                                           ;end of string?
  3829                                                          jz      .30                                             ;yes, done
  3830                                                          cmp     al,'.'                                          ;decimal point?
  3831                                                          je      .30                                             ;yes, done
  3832                                                          cmp     al,'0'                                          ;numeral?
  3833                                                          jb      .20                                             ;no, invalid string
  3834                                                          cmp     al,'9'                                          ;numeral?
  3835                                                          ja      .20                                             ;no, invalid string
  3836                                                          and     al,00Fh                                         ;mask ASCII zone
  3837                                                          push    eax                                             ;save numeral
  3838                                                          shl     edx,1                                           ;total * 2
  3839                                                          mov     eax,edx                                         ;total * 2
  3840                                                          shl     edx,2                                           ;total * 8
  3841                                                          add     edx,eax                                         ;total * 10
  3842                                                          pop     eax                                             ;restore numeral
  3843                                                          add     edx,eax                                         ;accumulate decimal digit
  3844                                                          xor     eax,eax                                         ;zero register
  3845                                                          jmp     .10                                             ;next
  3846                                  .20                     xor     edx,edx                                         ;zero result on error
  3847                                  .30                     mov     eax,edx                                         ;result
  3848                                                          pop     esi                                             ;restore non-volatile regs
  3849                                                          ret                                                     ;return
  3850                                  ;-----------------------------------------------------------------------------------------------------------------------
  3851                                  ;
  3852                                  ;       Routine:        HexadecimalToUnsigned
  3853                                  ;
  3854                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3855                                  ;
  3856                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3857                                  ;
  3858                                  ;       Output:         EAX     unsigned integer value
  3859                                  ;
  3860                                  ;-----------------------------------------------------------------------------------------------------------------------
  3861                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3862                                                          mov     esi,edx                                         ;source address
  3863                                                          xor     edx,edx                                         ;zero register
  3864                                  .10                     lodsb                                                   ;source byte
  3865                                                          test    al,al                                           ;end of string?
  3866                                                          jz      .30                                             ;yes, branch
  3867                                                          cmp     al,'9'                                          ;hexadecimal?
  3868                                                          jna     .20                                             ;no, skip ahead
  3869                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3870                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3871                                                          shl     edx,4                                           ;previous total x 16
  3872                                                          add     edx,eax                                         ;add prior value x 16
  3873                                                          jmp     .10                                             ;next
  3874                                  .30                     mov     eax,edx                                         ;result
  3875                                                          pop     esi                                             ;restore non-volatile regs
  3876                                                          ret                                                     ;return
  3877                                  ;-----------------------------------------------------------------------------------------------------------------------
  3878                                  ;
  3879                                  ;       Routine:        UnsignedToHexadecimal
  3880                                  ;
  3881                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3882                                  ;
  3883                                  ;       Input:          DS:EDX  output buffer address
  3884                                  ;                       ECX     32-bit binary
  3885                                  ;
  3886                                  ;-----------------------------------------------------------------------------------------------------------------------
  3887                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3888                                                          mov     edi,edx                                         ;output buffer address
  3889                                                          mov     edx,ecx                                         ;32-bit unsigned
  3890                                                          xor     ecx,ecx                                         ;zero register
  3891                                                          mov     cl,8                                            ;nybble count
  3892                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3893                                                          mov     al,dl                                           ;????bbbb
  3894                                                          and     al,0fh                                          ;mask out bits 4-7
  3895                                                          or      al,30h                                          ;mask in ascii zone
  3896                                                          cmp     al,3ah                                          ;A through F?
  3897                                                          jb      .20                                             ;no, skip ahead
  3898                                                          add     al,7                                            ;41h through 46h
  3899                                  .20                     stosb                                                   ;store hexnum
  3900                                                          loop    .10                                             ;next nybble
  3901                                                          xor     al,al                                           ;zero reg
  3902                                                          stosb                                                   ;null terminate
  3903                                                          pop     edi                                             ;restore non-volatile regs
  3904                                                          ret                                                     ;return
  3905                                  ;=======================================================================================================================
  3906                                  ;
  3907                                  ;       Message Queue Helper Routines
  3908                                  ;
  3909                                  ;       GetMessage
  3910                                  ;       PutMessage
  3911                                  ;
  3912                                  ;=======================================================================================================================
  3913                                  ;-----------------------------------------------------------------------------------------------------------------------
  3914                                  ;
  3915                                  ;       Routine:        GetMessage
  3916                                  ;
  3917                                  ;       Description:    This routine reads and removes a message from the message queue.
  3918                                  ;
  3919                                  ;       Out:            EAX     lo-order message data
  3920                                  ;                       EDX     hi-order message data
  3921                                  ;
  3922                                  ;                       CY      0 = message read
  3923                                  ;                               1 = no message to read
  3924                                  ;
  3925                                  ;-----------------------------------------------------------------------------------------------------------------------
  3926                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3927                                                          push    ecx                                             ;
  3928                                                          push    ds                                              ;
  3929                                                          push    ELDTMQ                                          ;load message queue selector ...
  3930                                                          pop     ds                                              ;... into data segment register
  3931                                                          mov     ebx,[MQHead]                                    ;head ptr
  3932                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3933                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3934                                                          or      eax,edx                                         ;is queue empty?
  3935                                                          stc                                                     ;assume queue is emtpy
  3936                                                          jz      .20                                             ;yes, skip ahead
  3937                                                          xor     ecx,ecx                                         ;store zero
  3938                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3939                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3940                                                          add     ebx,8                                           ;next queue element
  3941                                                          and     ebx,03fch                                       ;at end of queue?
  3942                                                          jnz     .10                                             ;no, skip ahead
  3943                                                          mov     bl,8                                            ;reset to 1st entry
  3944                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3945                                                          clc                                                     ;indicate message read
  3946                                  .20                     pop     ds                                              ;restore non-volatile regs
  3947                                                          pop     ecx                                             ;
  3948                                                          pop     ebx                                             ;
  3949                                                          ret                                                     ;return
  3950                                  ;-----------------------------------------------------------------------------------------------------------------------
  3951                                  ;
  3952                                  ;       Routine:        PutMessage
  3953                                  ;
  3954                                  ;       Description:    This routine adda a message to the message queue.
  3955                                  ;
  3956                                  ;       In:             ECX     hi-order data word
  3957                                  ;                       EDX     lo-order data word
  3958                                  ;
  3959                                  ;       Out:            CY      0 = success
  3960                                  ;                               1 = fail: queue is full
  3961                                  ;
  3962                                  ;-----------------------------------------------------------------------------------------------------------------------
  3963                                  PutMessage              push    ds                                              ;save non-volatile regs
  3964                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3965                                                          pop     ds                                              ;... into data segment register
  3966                                                          mov     eax,[MQTail]                                    ;tail ptr
  3967                                                          cmp     dword [eax],0                                   ;is queue full?
  3968                                                          stc                                                     ;assume failure
  3969                                                          jne     .20                                             ;yes, cannot store
  3970                                                          mov     [eax],edx                                       ;store lo-order data
  3971                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3972                                                          add     eax,8                                           ;next queue element adr
  3973                                                          and     eax,03fch                                       ;at end of queue?
  3974                                                          jnz     .10                                             ;no, skip ahead
  3975                                                          mov     al,8                                            ;reset to top of queue
  3976                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3977                                                          clc                                                     ;indicate success
  3978                                  .20                     pop     ds                                              ;restore non-volatile regs
  3979                                                          ret                                                     ;return
  3980                                  ;=======================================================================================================================
  3981                                  ;
  3982                                  ;       Memory-Mapped Video Routines
  3983                                  ;
  3984                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3985                                  ;
  3986                                  ;       ClearConsoleScreen
  3987                                  ;       ScrollConsoleRow
  3988                                  ;       SetConsoleChar
  3989                                  ;       SetConsoleString
  3990                                  ;
  3991                                  ;=======================================================================================================================
  3992                                  ;-----------------------------------------------------------------------------------------------------------------------
  3993                                  ;
  3994                                  ;       Routine:        ClearConsoleScreen
  3995                                  ;
  3996                                  ;       Description:    This routine clears the console (CGA) screen.
  3997                                  ;
  3998                                  ;-----------------------------------------------------------------------------------------------------------------------
  3999                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4000                                                          push    edi                                             ;
  4001                                                          push    ds                                              ;
  4002                                                          push    es                                              ;
  4003                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4004                                                          pop     ds                                              ;... into DS register
  4005                                                          push    EGDTCGA                                         ;load CGA selector ...
  4006                                                          pop     es                                              ;... into ES register
  4007                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4008                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4009                                                          xor     edi,edi                                         ;target offset
  4010                                                          cld                                                     ;forward strings
  4011                                                          rep     stosd                                           ;reset screen body
  4012                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4013                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4014                                                          rep     stosd                                           ;reset OIA line
  4015                                                          xor     al,al                                           ;zero register
  4016                                                          mov     [wbConsoleRow],al                               ;reset console row
  4017                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4018                                                          call    PlaceCursor                                     ;place cursor at current position
  4019                                                          pop     es                                              ;restore non-volatile regs
  4020                                                          pop     ds                                              ;
  4021                                                          pop     edi                                             ;
  4022                                                          pop     ecx                                             ;
  4023                                                          ret                                                     ;return
  4024                                  ;-----------------------------------------------------------------------------------------------------------------------
  4025                                  ;
  4026                                  ;       Routine:        ScrollConsoleRow
  4027                                  ;
  4028                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4029                                  ;
  4030                                  ;-----------------------------------------------------------------------------------------------------------------------
  4031                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4032                                                          push    esi                                             ;
  4033                                                          push    edi                                             ;
  4034                                                          push    ds                                              ;
  4035                                                          push    es                                              ;
  4036                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4037                                                          pop     ds                                              ;... into DS
  4038                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4039                                                          pop     es                                              ;... into ES
  4040                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4041                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4042                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4043                                                          cld                                                     ;forward strings
  4044                                                          rep     movsd                                           ;move 24 lines up
  4045                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4046                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4047                                                          rep     stosd                                           ;clear bottom row
  4048                                                          pop     es                                              ;restore non-volatile regs
  4049                                                          pop     ds                                              ;
  4050                                                          pop     edi                                             ;
  4051                                                          pop     esi                                             ;
  4052                                                          pop     ecx                                             ;
  4053                                                          ret                                                     ;return
  4054                                  ;-----------------------------------------------------------------------------------------------------------------------
  4055                                  ;
  4056                                  ;       Routine:        SetConsoleChar
  4057                                  ;
  4058                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4059                                  ;
  4060                                  ;       In:             AL      ASCII character
  4061                                  ;                       CL      column
  4062                                  ;                       CH      row
  4063                                  ;                       ES      CGA selector
  4064                                  ;
  4065                                  ;       Out:            EAX     last target address written (ES:)
  4066                                  ;                       CL      column + 1
  4067                                  ;
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4070                                                          movzx   eax,ch                                          ;row
  4071                                                          mov     ah,ECONCOLS                                     ;cols/row
  4072                                                          mul     ah                                              ;row * cols/row
  4073                                                          add     al,cl                                           ;add column
  4074                                                          adc     ah,0                                            ;handle carry
  4075                                                          shl     eax,1                                           ;screen offset
  4076                                                          mov     [es:eax],dl                                     ;store character
  4077                                                          inc     cl                                              ;next column
  4078                                                          ret                                                     ;return
  4079                                  ;-----------------------------------------------------------------------------------------------------------------------
  4080                                  ;
  4081                                  ;       Routine:        SetConsoleString
  4082                                  ;
  4083                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4084                                  ;
  4085                                  ;       In:             ESI     source offset (DS:)
  4086                                  ;                       CL      column
  4087                                  ;                       CH      row
  4088                                  ;                       ES      CGA selector
  4089                                  ;
  4090                                  ;-----------------------------------------------------------------------------------------------------------------------
  4091                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4092                                                          cld                                                     ;forward strings
  4093                                  .10                     lodsb                                                   ;next ASCII character
  4094                                                          test    al,al                                           ;end of string?
  4095                                                          jz      .20                                             ;yes, branch
  4096                                                          call    SetConsoleChar                                  ;store character
  4097                                                          jmp     .10                                             ;continue
  4098                                  .20                     pop     esi                                             ;restore non-volatile regs
  4099                                                          ret                                                     ;return
  4100                                  ;=======================================================================================================================
  4101                                  ;
  4102                                  ;       Input/Output Routines
  4103                                  ;
  4104                                  ;       These routines read and/or write directly to ports.
  4105                                  ;
  4106                                  ;       PlaceCursor
  4107                                  ;       PutPrimaryEndOfInt
  4108                                  ;       PutSecondaryEndOfInt
  4109                                  ;       ResetSystem
  4110                                  ;       SetKeyboardLamps
  4111                                  ;       WaitForKeyInBuffer
  4112                                  ;       WaitForKeyOutBuffer
  4113                                  ;
  4114                                  ;=======================================================================================================================
  4115                                  ;-----------------------------------------------------------------------------------------------------------------------
  4116                                  ;
  4117                                  ;       Routine:        PlaceCursor
  4118                                  ;
  4119                                  ;       Description:    This routine positions the cursor on the console.
  4120                                  ;
  4121                                  ;       In:             DS      OS data selector
  4122                                  ;
  4123                                  ;-----------------------------------------------------------------------------------------------------------------------
  4124                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4125                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4126                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4127                                                          mul     ah                                              ;row offset
  4128                                                          add     al,[wbConsoleColumn]                            ;add column
  4129                                                          adc     ah,0                                            ;add overflow
  4130                                                          mov     ecx,eax                                         ;screen offset
  4131                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4132                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4133                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4134                                                          out     dx,al                                           ;select register
  4135                                                          inc     edx                                             ;data port
  4136                                                          mov     al,ch                                           ;hi-order cursor loc
  4137                                                          out     dx,al                                           ;store hi-order loc
  4138                                                          dec     edx                                             ;register select port
  4139                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4140                                                          out     dx,al                                           ;select register
  4141                                                          inc     edx                                             ;data port
  4142                                                          mov     al,cl                                           ;lo-order cursor loc
  4143                                                          out     dx,al                                           ;store lo-order loc
  4144                                                          pop     ecx                                             ;restore non-volatile regs
  4145                                                          ret                                                     ;return
  4146                                  ;-----------------------------------------------------------------------------------------------------------------------
  4147                                  ;
  4148                                  ;       Routine:        PutPrimaryEndOfInt
  4149                                  ;
  4150                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4151                                  ;
  4152                                  ;-----------------------------------------------------------------------------------------------------------------------
  4153                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4154                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4155                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4156                                                          ret                                                     ;return
  4157                                  ;-----------------------------------------------------------------------------------------------------------------------
  4158                                  ;
  4159                                  ;       Routine:        PutSecondaryEndOfInt
  4160                                  ;
  4161                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4162                                  ;
  4163                                  ;-----------------------------------------------------------------------------------------------------------------------
  4164                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4165                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4166                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4167                                                          ret                                                     ;return
  4168                                  ;-----------------------------------------------------------------------------------------------------------------------
  4169                                  ;
  4170                                  ;       Routine:        ResetSystem
  4171                                  ;
  4172                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4173                                  ;
  4174                                  ;       Out:            N/A     This routine does not return.
  4175                                  ;
  4176                                  ;-----------------------------------------------------------------------------------------------------------------------
  4177                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4178                                                          loop    $                                               ;clear interrupts
  4179                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4180                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4181                                  .10                     sti                                                     ;enable maskable interrupts
  4182                                                          hlt                                                     ;halt until interrupt
  4183                                                          jmp     .10                                             ;repeat until reset kicks in
  4184                                  ;-----------------------------------------------------------------------------------------------------------------------
  4185                                  ;
  4186                                  ;       Routine:        SetKeyboardLamps
  4187                                  ;
  4188                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4189                                  ;
  4190                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4191                                  ;
  4192                                  ;-----------------------------------------------------------------------------------------------------------------------
  4193                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4194                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4195                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4196                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4197                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4198                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4199                                                          mov     al,bh                                           ;set/reset lamps value
  4200                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4201                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4202                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4203                                                          ret                                                     ;return
  4204                                  ;-----------------------------------------------------------------------------------------------------------------------
  4205                                  ;
  4206                                  ;       Routine:        WaitForKeyInBuffer
  4207                                  ;
  4208                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4209                                  ;
  4210                                  ;       Out:            ZF      1 = Input buffer ready
  4211                                  ;                               0 = Input buffer not ready after timeout
  4212                                  ;
  4213                                  ;-----------------------------------------------------------------------------------------------------------------------
  4214                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4215                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4216                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4217                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4218                                                          loopnz  .10                                             ;yes, repeat till timeout
  4219                                                          pop     ecx                                             ;restore non-volatile regs
  4220                                                          ret                                                     ;return
  4221                                  ;-----------------------------------------------------------------------------------------------------------------------
  4222                                  ;
  4223                                  ;       Routine:        WaitForKeyOutBuffer
  4224                                  ;
  4225                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4226                                  ;
  4227                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4228                                  ;                               0 = Output buffer empty after timeout
  4229                                  ;
  4230                                  ;-----------------------------------------------------------------------------------------------------------------------
  4231                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4232                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4233                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4234                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4235                                                          loopz   .10                                             ;loop until output buffer bit
  4236                                                          pop     ecx                                             ;restore non-volatile regs
  4237                                                          ret                                                     ;return
  4238                                  ;-----------------------------------------------------------------------------------------------------------------------
  4239                                  ;
  4240                                  ;       End of the Kernel Function Library
  4241                                  ;
  4242                                  ;-----------------------------------------------------------------------------------------------------------------------
  4243                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4244                                  ;=======================================================================================================================
  4245                                  ;
  4246                                  ;       Console Task
  4247                                  ;
  4248                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4249                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4250                                  ;       screen and responds to user commands.
  4251                                  ;
  4252                                  ;=======================================================================================================================
  4253                                  ;-----------------------------------------------------------------------------------------------------------------------
  4254                                  ;
  4255                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4256                                  ;
  4257                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4258                                  ;
  4259                                  ;-----------------------------------------------------------------------------------------------------------------------
  4260                                  section                 constack                                                ;console task stack
  4261                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263                                  ;
  4264                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4265                                  ;
  4266                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4267                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4268                                  ;       16 descriptors. Six are initially defined.
  4269                                  ;
  4270                                  ;-----------------------------------------------------------------------------------------------------------------------
  4271                                  section                 conldt                                                  ;console local descriptors
  4272                                                          dq      004093004780007Fh                               ;04 TSS alias
  4273                                                          dq      004093004700007Fh                               ;0c LDT alias
  4274                                                          dq      00409300400006FFh                               ;14 stack
  4275                                                          dq      00CF93000000FFFFh                               ;1c data
  4276                                                          dq      00409B0050000FFFh                               ;24 code
  4277                                                          dq      00409300480007FFh                               ;2c message queue
  4278                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4279                                  ;-----------------------------------------------------------------------------------------------------------------------
  4280                                  ;
  4281                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4282                                  ;
  4283                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4284                                  ;       segment. CS to console code.
  4285                                  ;
  4286                                  ;-----------------------------------------------------------------------------------------------------------------------
  4287                                  section                 contss                                                  ;console task state segment
  4288                                                          dd      0                                               ;00 back-link tss
  4289                                                          dd      0700h                                           ;04 esp ring 0
  4290                                                          dd      0014h                                           ;08 ss ring 0
  4291                                                          dd      0700h                                           ;0c esp ring 1
  4292                                                          dd      0014h                                           ;10 es ring 1
  4293                                                          dd      0700h                                           ;14 esp ring 2
  4294                                                          dd      0014h                                           ;18 ss ring 2
  4295                                                          dd      0                                               ;1c cr ring 3
  4296                                                          dd      0                                               ;20 eip
  4297                                                          dd      0200h                                           ;24 eflags
  4298                                                          dd      0                                               ;28 eax
  4299                                                          dd      0                                               ;2c ecx
  4300                                                          dd      0                                               ;30 edx
  4301                                                          dd      0                                               ;34 ebx
  4302                                                          dd      0700h                                           ;38 esp ring 3
  4303                                                          dd      0                                               ;3c ebp
  4304                                                          dd      0                                               ;40 esi
  4305                                                          dd      0                                               ;44 edi
  4306                                                          dd      001Ch                                           ;48 es
  4307                                                          dd      0024h                                           ;4c cs
  4308                                                          dd      0014h                                           ;50 ss ring 3
  4309                                                          dd      001Ch                                           ;54 ds
  4310                                                          dd      0                                               ;58 fs
  4311                                                          dd      0                                               ;5c gs
  4312                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4313                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4314                                  ;-----------------------------------------------------------------------------------------------------------------------
  4315                                  ;
  4316                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4317                                  ;
  4318                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4319                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4320                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4321                                  ;       event.
  4322                                  ;
  4323                                  ;-----------------------------------------------------------------------------------------------------------------------
  4324                                  section                 conmque                                                 ;console message queue
  4325                                                          dd      8                                               ;head pointer
  4326                                                          dd      8                                               ;tail pointer
  4327                                                          times   510 dd 0                                        ;queue elements
  4328                                  ;-----------------------------------------------------------------------------------------------------------------------
  4329                                  ;
  4330                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4331                                  ;
  4332                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4333                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4334                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4335                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4336                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4337                                  ;       board input, echoing to the console screen and responding to user commands.
  4338                                  ;
  4339                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4340                                  ;
  4341                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4342                                  ;                               |  Real Mode Interrupt Vectors                  |
  4343                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4344                                  ;                               |  Reserved BIOS Memory Area                    |
  4345                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4346                                  ;                               |  Shared Kernel Memory Area                    |
  4347                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4348                                  ;                               |  Global Descriptor Table (GDT)                |
  4349                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4350                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4351                                  ;                       002000  +-----------------------------------------------+
  4352                                  ;                               |  Interrupt Handlers                           |
  4353                                  ;                               |  Kernel Function Library                      |
  4354                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4355                                  ;                               |  Console Task Stack Area                      |
  4356                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4357                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4358                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4359                                  ;                               |  Console Task Task State Segment (TSS)        |
  4360                                  ;                       004800  +-----------------------------------------------+
  4361                                  ;                               |  Console Task Message Queue                   |
  4362                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4363                                  ;                               |  Console Task Code                            |
  4364                                  ;                               |  Console Task Constants                       |
  4365                                  ;                       006000  +===============================================+
  4366                                  ;
  4367                                  ;-----------------------------------------------------------------------------------------------------------------------
  4368                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4369                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  4370                                  
  4371                                                          clearConsoleScreen                                      ;clear the console screen
  4372                                                          putConsoleString czTitle                                ;display startup message
  4373                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4374                                                          placeCursor                                             ;set CRT cursor location
  4375                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4376                                                          putConsoleString czNewLine                              ;newline
  4377                                  
  4378                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  4379                                                          mov     ebx,wzConsoleToken                              ;token buffer
  4380                                                          call    ConTakeToken                                    ;handle console input
  4381                                                          mov     edx,wzConsoleToken                              ;token buffer
  4382                                                          call    ConDetermineCommand                             ;determine command number
  4383                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4384                                                          jb      .20                                             ;yes, branch
  4385                                  
  4386                                                          putConsoleString czUnknownCommand                       ;display error message
  4387                                  
  4388                                                          jmp     .10                                             ;next command
  4389                                  .20                     shl     eax,2                                           ;index into jump table
  4390                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  4391                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4392                                                          call    eax                                             ;call command handler
  4393                                                          jmp     .10                                             ;next command
  4394                                  ;-----------------------------------------------------------------------------------------------------------------------
  4395                                  ;
  4396                                  ;       Routine:        ConInitializeData
  4397                                  ;
  4398                                  ;       Description:    This routine initializes console task variables.
  4399                                  ;
  4400                                  ;-----------------------------------------------------------------------------------------------------------------------
  4401                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  4402                                                          push    edi                                             ;
  4403                                                          push    es                                              ;
  4404                                  ;
  4405                                  ;       Initialize console work areas.
  4406                                  ;
  4407                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4408                                                          pop     es                                              ;... into extra segment register
  4409                                                          mov     edi,ECONDATA                                    ;OS console data address
  4410                                                          xor     al,al                                           ;initialization value
  4411                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  4412                                                          cld                                                     ;forward strings
  4413                                                          rep     stosb                                           ;initialize data
  4414                                  ;
  4415                                  ;       Initialize heap size
  4416                                  ;
  4417                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4418                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  4419                                  ;
  4420                                  ;       Initialize MEMROOT structure
  4421                                  ;
  4422                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4423                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4424                                                          xor     ecx,ecx                                         ;zero register
  4425                                                          mov     cl,4                                            ;count
  4426                                                          rep     stosd                                           ;store first/last contig and free addrs
  4427                                                          xor     eax,eax                                         ;zero register
  4428                                                          stosd                                                   ;zero first task block
  4429                                                          stosd                                                   ;zero last task block
  4430                                  ;
  4431                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4432                                  ;
  4433                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4434                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  4435                                                          stosd                                                   ;store signature
  4436                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4437                                                          stosd                                                   ;store block size
  4438                                                          xor     ecx,ecx                                         ;zero register
  4439                                                          mov     cl,6                                            ;count
  4440                                                          xor     eax,eax                                         ;zero register
  4441                                                          rep     stosd                                           ;zero owner, reserved, pointers
  4442                                  ;
  4443                                  ;       Restore and return.
  4444                                  ;
  4445                                                          pop     es                                              ;restore non-volatile regs
  4446                                                          pop     edi                                             ;
  4447                                                          pop     ecx                                             ;
  4448                                                          ret                                                     ;return
  4449                                  ;-----------------------------------------------------------------------------------------------------------------------
  4450                                  ;
  4451                                  ;       Routine:        ConTakeToken
  4452                                  ;
  4453                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4454                                  ;
  4455                                  ;       In:             DS:EDX  source buffer address
  4456                                  ;                       DS:EBX  target buffer address
  4457                                  ;
  4458                                  ;       Out:            DS:EDX  source buffer address
  4459                                  ;                       DS:EBX  target buffer address
  4460                                  ;
  4461                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4462                                  ;
  4463                                  ;-----------------------------------------------------------------------------------------------------------------------
  4464                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  4465                                                          push    edi                                             ;
  4466                                                          push    es                                              ;
  4467                                                          push    ds                                              ;load data segment selector ...
  4468                                                          pop     es                                              ;... into extra segment reg
  4469                                                          mov     esi,edx                                         ;source buffer address
  4470                                                          mov     edi,ebx                                         ;target buffer address
  4471                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4472                                                          cld                                                     ;forward strings
  4473                                  .10                     lodsb                                                   ;load byte
  4474                                                          cmp     al,EASCIISPACE                                  ;space?
  4475                                                          je      .10                                             ;yes, continue
  4476                                                          test    al,al                                           ;end of line?
  4477                                                          jz      .40                                             ;yes, branch
  4478                                  .20                     stosb                                                   ;store byte
  4479                                                          lodsb                                                   ;load byte
  4480                                                          test    al,al                                           ;end of line?
  4481                                                          jz      .40                                             ;no, continue
  4482                                                          cmp     al,EASCIISPACE                                  ;space?
  4483                                                          jne     .20                                             ;no, continue
  4484                                  .30                     lodsb                                                   ;load byte
  4485                                                          cmp     al,EASCIISPACE                                  ;space?
  4486                                                          je      .30                                             ;yes, continue
  4487                                                          dec     esi                                             ;pre-position
  4488                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4489                                                          mov     edi,edx                                         ;source buffer address
  4490                                  .50                     lodsb                                                   ;remaining byte
  4491                                                          stosb                                                   ;move to front of buffer
  4492                                                          test    al,al                                           ;end of line?
  4493                                                          jnz     .50                                             ;no, continue
  4494                                                          pop     es                                              ;restore non-volatile regs
  4495                                                          pop     edi                                             ;
  4496                                                          pop     esi                                             ;
  4497                                                          ret                                                     ;return
  4498                                  ;-----------------------------------------------------------------------------------------------------------------------
  4499                                  ;
  4500                                  ;       Routine:        ConDetermineCommand
  4501                                  ;
  4502                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4503                                  ;
  4504                                  ;       input:          DS:EDX  command address
  4505                                  ;
  4506                                  ;       output:         EAX     >=0     = command nbr
  4507                                  ;                               0       = unknown command
  4508                                  ;
  4509                                  ;-----------------------------------------------------------------------------------------------------------------------
  4510                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4511                                                          push    ecx                                             ;
  4512                                                          push    esi                                             ;
  4513                                                          push    edi                                             ;
  4514                                  
  4515                                                          upperCaseString                                         ;upper-case string at EDX
  4516                                  
  4517                                                          mov     esi,tConCmdTbl                                  ;commands table
  4518                                                          xor     edi,edi                                         ;intialize command number
  4519                                                          cld                                                     ;forward strings
  4520                                  .10                     lodsb                                                   ;command length
  4521                                                          movzx   ecx,al                                          ;command length
  4522                                                          jecxz   .20                                             ;branch if end of table
  4523                                                          mov     ebx,esi                                         ;table entry address
  4524                                                          add     esi,ecx                                         ;next table entry address
  4525                                  
  4526                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4527                                  
  4528                                                          jecxz   .20                                             ;branch if equal
  4529                                                          inc     edi                                             ;increment command nbr
  4530                                                          jmp     .10                                             ;repeat
  4531                                  .20                     mov     eax,edi                                         ;command number
  4532                                                          pop     edi                                             ;restore non-volatile regs
  4533                                                          pop     esi                                             ;
  4534                                                          pop     ecx                                             ;
  4535                                                          pop     ebx                                             ;
  4536                                                          ret                                                     ;return
  4537                                  ;-----------------------------------------------------------------------------------------------------------------------
  4538                                  ;
  4539                                  ;       Routine:        ConClear
  4540                                  ;
  4541                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4542                                  ;
  4543                                  ;-----------------------------------------------------------------------------------------------------------------------
  4544                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4545                                                          ret                                                     ;return
  4546                                  ;-----------------------------------------------------------------------------------------------------------------------
  4547                                  ;
  4548                                  ;       Routine:        ConExit
  4549                                  ;
  4550                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4551                                  ;
  4552                                  ;-----------------------------------------------------------------------------------------------------------------------
  4553                                  ConExit                 resetSystem                                             ;issue system reset
  4554                                                          ret                                                     ;return
  4555                                  ;-----------------------------------------------------------------------------------------------------------------------
  4556                                  ;
  4557                                  ;       Routine:        ConFree
  4558                                  ;
  4559                                  ;       Description:    This routine handles the FREE command.
  4560                                  ;
  4561                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4562                                  ;
  4563                                  ;-----------------------------------------------------------------------------------------------------------------------
  4564                                  ConFree                 push    ebx                                             ;save non-volatile regs
  4565                                                          push    ecx                                             ;
  4566                                                          push    esi                                             ;
  4567                                                          push    edi                                             ;
  4568                                  ;
  4569                                  ;       Get address parameter
  4570                                  ;
  4571                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4572                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4573                                                          call    ConTakeToken                                    ;take first param as token
  4574                                  ;
  4575                                  ;       Convert input parameter from hexadecimal string to binary
  4576                                  ;
  4577                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4578                                                          je      .10                                             ;no, branch
  4579                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4580                                  
  4581                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4582                                  
  4583                                                          test    eax,eax                                         ;valid parameter?
  4584                                                          jz      .10                                             ;no, branch
  4585                                  ;
  4586                                  ;       Free memory block
  4587                                  ;
  4588                                                          freeMemory eax                                          ;free memory
  4589                                  
  4590                                                          cmp     eax,-1                                          ;memory freed?
  4591                                                          je      .10                                             ;no, branch
  4592                                  ;
  4593                                  ;       Indicate memory freed
  4594                                  ;
  4595                                                          putConsoleString czOK                                   ;indicate success
  4596                                  ;
  4597                                  ;       Restore and return
  4598                                  ;
  4599                                  .10                     pop     edi                                             ;restore non-volatile regs
  4600                                                          pop     esi                                             ;
  4601                                                          pop     ecx                                             ;
  4602                                                          pop     ebx                                             ;
  4603                                                          ret                                                     ;return
  4604                                  ;-----------------------------------------------------------------------------------------------------------------------
  4605                                  ;
  4606                                  ;       Routine:        ConInt6
  4607                                  ;
  4608                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4609                                  ;
  4610                                  ;-----------------------------------------------------------------------------------------------------------------------
  4611                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  4612                                                          ret                                                     ;return (not executed)
  4613                                  ;-----------------------------------------------------------------------------------------------------------------------
  4614                                  ;
  4615                                  ;       Routine:        ConMalloc
  4616                                  ;
  4617                                  ;       Description:    This routine handles the MALLOC command.
  4618                                  ;
  4619                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4620                                  ;
  4621                                  ;-----------------------------------------------------------------------------------------------------------------------
  4622                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  4623                                                          push    ecx                                             ;
  4624                                                          push    esi                                             ;
  4625                                                          push    edi                                             ;
  4626                                  ;
  4627                                  ;       Get size parameter
  4628                                  ;
  4629                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4630                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4631                                                          call    ConTakeToken                                    ;take first param as token
  4632                                  ;
  4633                                  ;       Convert input parameter from decimal string to binary
  4634                                  ;
  4635                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4636                                                          je      .10                                             ;no, branch
  4637                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4638                                  
  4639                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4640                                  
  4641                                                          test    eax,eax                                         ;valid parameter?
  4642                                                          jz      .10                                             ;no, branch
  4643                                  ;
  4644                                  ;       Allocate memory block
  4645                                  ;
  4646                                                          allocateMemory eax                                      ;allocate memory
  4647                                  
  4648                                                          test    eax,eax                                         ;memory allocated?
  4649                                                          jz      .10                                             ;no, branch
  4650                                  ;
  4651                                  ;       Report allocated memory block address
  4652                                  ;
  4653                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4654                                                          mov     ecx,eax                                         ;memory address
  4655                                  
  4656                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4657                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4658                                                          putConsoleString czNewLine                              ;display new line
  4659                                  
  4660                                  .10                     pop     edi                                             ;restore non-volatile regs
  4661                                                          pop     esi                                             ;
  4662                                                          pop     ecx                                             ;
  4663                                                          pop     ebx                                             ;
  4664                                                          ret                                                     ;return
  4665                                  ;-----------------------------------------------------------------------------------------------------------------------
  4666                                  ;
  4667                                  ;       Routine:        ConMem
  4668                                  ;
  4669                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4670                                  ;
  4671                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4672                                  ;
  4673                                  ;-----------------------------------------------------------------------------------------------------------------------
  4674                                  ConMem                  push    ebx                                             ;save non-volatile regs
  4675                                                          push    esi                                             ;
  4676                                                          push    edi                                             ;
  4677                                  ;
  4678                                  ;                       update the source address if a parameter is given
  4679                                  ;
  4680                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4681                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4682                                                          call    ConTakeToken                                    ;take first param as token
  4683                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4684                                                          je      .10                                             ;no, branch
  4685                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4686                                  
  4687                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4688                                  
  4689                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4690                                  ;
  4691                                  ;                       setup source address and row count
  4692                                  ;
  4693                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4694                                                          xor     ecx,ecx                                         ;zero register
  4695                                                          mov     cl,16                                           ;row count
  4696                                  ;
  4697                                  ;                       start the row with the source address in hexadecimal
  4698                                  ;
  4699                                  .20                     push    ecx                                             ;save remaining rows
  4700                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4701                                                          mov     edx,edi                                         ;output buffer address
  4702                                                          mov     ecx,esi                                         ;console memory address
  4703                                  
  4704                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4705                                  
  4706                                                          add     edi,8                                           ;end of memory addr hexnum
  4707                                                          mov     al,' '                                          ;ascii space
  4708                                                          stosb                                                   ;store delimiter
  4709                                  ;
  4710                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4711                                  ;
  4712                                                          xor     ecx,ecx                                         ;zero register
  4713                                                          mov     cl,16                                           ;loop count
  4714                                  .30                     push    ecx                                             ;save loop count
  4715                                                          lodsb                                                   ;memory byte
  4716                                                          mov     ah,al                                           ;memory byte
  4717                                                          shr     al,4                                            ;high-order in bits 3-0
  4718                                                          or      al,30h                                          ;apply ascii numeric zone
  4719                                                          cmp     al,3ah                                          ;numeric range?
  4720                                                          jb      .40                                             ;yes, skip ahead
  4721                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4722                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4723                                                          mov     al,ah                                           ;low-order in bits 3-0
  4724                                                          and     al,0fh                                          ;mask out high-order bits
  4725                                                          or      al,30h                                          ;apply ascii numeric zone
  4726                                                          cmp     al,3ah                                          ;numeric range?
  4727                                                          jb      .50                                             ;yes, skip ahead
  4728                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4729                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4730                                                          mov     al,' '                                          ;ascii space
  4731                                                          stosb                                                   ;store ascii space delimiter
  4732                                                          pop     ecx                                             ;loop count
  4733                                                          loop    .30                                             ;next
  4734                                  ;
  4735                                  ;                       output printable ASCII character section for the row
  4736                                  ;
  4737                                                          sub     esi,16                                          ;reset source pointer
  4738                                                          mov     cl,16                                           ;loop count
  4739                                  .60                     lodsb                                                   ;source byte
  4740                                                          cmp     al,32                                           ;printable? (low-range test)
  4741                                                          jb      .70                                             ;no, skip ahead
  4742                                                          cmp     al,128                                          ;printable? (high-range test)
  4743                                                          jb      .80                                             ;yes, skip ahead
  4744                                  .70                     mov     al,' '                                          ;display space instead of printable
  4745                                  .80                     stosb                                                   ;store printable ascii byte
  4746                                                          loop    .60                                             ;next source byte
  4747                                                          xor     al,al                                           ;nul-terminator
  4748                                                          stosb                                                   ;terminate output line
  4749                                  ;
  4750                                  ;                       display constructed output buffer and newline
  4751                                  ;
  4752                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4753                                                          putConsoleString czNewLine                              ;display new line
  4754                                  ;
  4755                                  ;                       repeat until all lines displayed and preserve source address
  4756                                  ;
  4757                                                          pop     ecx                                             ;remaining rows
  4758                                                          loop    .20                                             ;next row
  4759                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4760                                                          pop     edi                                             ;restore regs
  4761                                                          pop     esi                                             ;
  4762                                                          pop     ebx                                             ;
  4763                                                          ret                                                     ;return
  4764                                  ;-----------------------------------------------------------------------------------------------------------------------
  4765                                  ;
  4766                                  ;       Routine:        ConVersion
  4767                                  ;
  4768                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4769                                  ;
  4770                                  ;-----------------------------------------------------------------------------------------------------------------------
  4771                                  ConVersion              putConsoleString czTitle                                ;display version message
  4772                                                          ret                                                     ;return
  4773                                  ;-----------------------------------------------------------------------------------------------------------------------
  4774                                  ;
  4775                                  ;       Tables
  4776                                  ;
  4777                                  ;-----------------------------------------------------------------------------------------------------------------------
  4778                                                                                                                  ;---------------------------------------
  4779                                                                                                                  ;  Command Jump Table
  4780                                                                                                                  ;---------------------------------------
  4781                                  tConJmpTbl              equ     $                                               ;command jump table
  4782                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4783                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4784                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4785                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4786                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4787                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4788                                                          dd      ConFree         - ConCode                       ;free command routine offset
  4789                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4790                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4791                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4792                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4793                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4794                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4795                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4796                                                                                                                  ;---------------------------------------
  4797                                                                                                                  ;  Command Name Table
  4798                                                                                                                  ;---------------------------------------
  4799                                  tConCmdTbl              equ     $                                               ;command name table
  4800                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4801                                                          db      8,"VERSION",0                                   ;version command
  4802                                                          db      7,"MALLOC",0                                    ;malloc command
  4803                                                          db      7,"MEMORY",0                                    ;memory command
  4804                                                          db      6,"CLEAR",0                                     ;clear command
  4805                                                          db      5,"EXIT",0                                      ;exit command
  4806                                                          db      5,"FREE",0                                      ;free command
  4807                                                          db      5,"INT6",0                                      ;int6 command
  4808                                                          db      5,"QUIT",0                                      ;quit command
  4809                                                          db      4,"CLS",0                                       ;cls command
  4810                                                          db      4,"MEM",0                                       ;mem command
  4811                                                          db      4,"VER",0                                       ;ver command
  4812                                                          db      0                                               ;end of table
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814                                  ;
  4815                                  ;       Constants
  4816                                  ;
  4817                                  ;-----------------------------------------------------------------------------------------------------------------------
  4818                                  czNewLine               db      13,10,0                                         ;new line string
  4819                                  czOK                    db      "ok",13,10,0                                    ;ok string
  4820                                  czPrompt                db      ":",0                                           ;prompt string
  4821                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4822                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4823                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4824                                  %endif
  4825                                  %ifdef BUILDDISK
  4826                                  ;-----------------------------------------------------------------------------------------------------------------------
  4827                                  ;
  4828                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4829                                  ;
  4830                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4831                                  ;
  4832                                  ;-----------------------------------------------------------------------------------------------------------------------
  4833                                  section                 unused                                                  ;unused disk space
  4834                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4835                                  %endif
  4836                                  ;=======================================================================================================================
  4837                                  ;
  4838                                  ;       End of Program Code
  4839                                  ;
  4840                                  ;=======================================================================================================================
