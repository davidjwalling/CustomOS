     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.010
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;	Revised:	July 1, 2017
    10                                  ;
    11                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    17                                  ;
    18                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;	Assembly Directives
    24                                  ;
    25                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK
    34                                  %define BUILDBOOT
    35                                  %define BUILDCOM
    36                                  %endif
    37                                  %ifdef BUILDPREP
    38                                  %define BUILDBOOT
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;	Conventions
    43                                  ;
    44                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    45                                  ;			Labels within a routine begin at ".10" and increment by 10.
    46                                  ;
    47                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    48                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    49                                  ;			Register names in comments are in upper case.
    50                                  ;			Hexadecimal values in comments are in lower case.
    51                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    52                                  ;			register contents on entry and exit.
    53                                  ;
    54                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    55                                  ;			Assembly operands begin in column 33.
    56                                  ;			Lines should not extend beyond column 120.
    57                                  ;
    58                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    59                                  ;			Routine names begin with a verb (Get, Read, etc.).
    60                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    61                                  ;
    62                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    63                                  ;			Constant stored values are named in camel case, starting with 'c'.
    64                                  ;			The 2nd letter of the constant label indicates the storage type.
    65                                  ;
    66                                  ;			cq......	constant quad-word (dq)
    67                                  ;			cd......	constant double-word (dd)
    68                                  ;			cw......	constant word (dw)
    69                                  ;			cb......	constant byte (db)
    70                                  ;			cz......	constant ASCIIZ (null-terminated) string
    71                                  ;
    72                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    73                                  ;			The 2nd letter of the variable label indicates the storage type.
    74                                  ;
    75                                  ;			wq......	variable quad-word (resq)
    76                                  ;			wd......	variable double-word (resd)
    77                                  ;			ww......	variable word (resw)
    78                                  ;			wb......	variable byte (resb)
    79                                  ;
    80                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    81                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    82                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    83                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    84                                  ;			Octal literal values are avoided.
    85                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    86                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    87                                  ;
    88                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    89                                  ;			Structure names do not begin with a verb.
    90                                  ;
    91                                  ;	Macros:		Macro names are in camel case (getDateString).
    92                                  ;			Macro names do begin with a verb.
    93                                  ;
    94                                  ;	Registers:	Register names in comments are in upper case.
    95                                  ;			Register names in source code are in lower case.
    96                                  ;
    97                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    98                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    99                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   100                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   101                                  ;
   102                                  ;-----------------------------------------------------------------------------------------------------------------------
   103                                  ;=======================================================================================================================
   104                                  ;
   105                                  ;	Equates
   106                                  ;
   107                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   108                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   109                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   110                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   111                                  ;
   112                                  ;=======================================================================================================================
   113                                  ;-----------------------------------------------------------------------------------------------------------------------
   114                                  ;
   115                                  ;	8042 Keyboard Controller						EKEYB...
   116                                  ;
   117                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   118                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   119                                  ;
   120                                  ;-----------------------------------------------------------------------------------------------------------------------
   121                                  EKEYBPORTDATA		equ	060h						;data port
   122                                  EKEYBPORTSTAT		equ	064h						;status port
   123                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   124                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   125                                  EKEYBBITIN		equ	002h						;input buffer status bit
   126                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   127                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   128                                  										;---------------------------------------
   129                                  										;	Keyboard Scan Codes
   130                                  										;---------------------------------------
   131                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   132                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   133                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   134                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   135                                  EKEYBSLASH		equ	035h						;slash
   136                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   137                                  EKEYBALTDOWN		equ	038h						;alt key down
   138                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   139                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   140                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   141                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   142                                  EKEYBUP			equ	080h						;up
   143                                  EKEYBCTRLUP		equ	09Dh						;control key up
   144                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   145                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   146                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   147                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   148                                  EKEYBALTUP		equ	0B8h						;alt key up
   149                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   150                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   151                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   152                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   153                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   154                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   155                                  ;-----------------------------------------------------------------------------------------------------------------------
   156                                  ;
   157                                  ;	8253 Programmable Interrupt Timer					EPIT...
   158                                  ;
   159                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   160                                  ;	approximately 18.2 times per second.
   161                                  ;
   162                                  ;-----------------------------------------------------------------------------------------------------------------------
   163                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   164                                  ;-----------------------------------------------------------------------------------------------------------------------
   165                                  ;
   166                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   167                                  ;
   168                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   169                                  ;	external devices and signals a hardware interrupt to the CPU.
   170                                  ;
   171                                  ;-----------------------------------------------------------------------------------------------------------------------
   172                                  EPICPORTPRI		equ	020h						;primary control port 0
   173                                  EPICPORTPRI1		equ	021h						;primary control port 1
   174                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   175                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   176                                  EPICEOI			equ	020h						;non-specific EOI code
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   180                                  ;
   181                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;	for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI		equ	003h						;controller port hi
   186                                  ECRTPORTLO		equ	0D4h						;controller port lo
   187                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   188                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   192                                  ;
   193                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI		equ	003h						;controller port hi
   197                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   198                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   199                                  EFDCSTATBUSY		equ	010h						;main status is busy
   200                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   204                                  ;
   205                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   206                                  ;
   207                                  ;-----------------------------------------------------------------------------------------------------------------------
   208                                  ERTCREGPORT		equ	70h						;register select port
   209                                  ERTCDATAPORT		equ	71h						;data port
   210                                  ERTCSECONDREG		equ	00h						;second
   211                                  ERTCMINUTEREG		equ	02h						;minute
   212                                  ERTCHOURREG		equ	04h						;hour
   213                                  ERTCWEEKDAYREG		equ	06h						;weekday
   214                                  ERTCDAYREG		equ	07h						;day
   215                                  ERTCMONTHREG		equ	08h						;month
   216                                  ERTCYEARREG		equ	09h						;year of the century
   217                                  ERTCSTATUSREG		equ	0bh						;status
   218                                  ERTCCENTURYREG		equ	32h						;century
   219                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   220                                  ;-----------------------------------------------------------------------------------------------------------------------
   221                                  ;
   222                                  ;	x86 Descriptor Access Codes						EACC...
   223                                  ;
   224                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   225                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   226                                  ;
   227                                  ;	0.......	Segment is not present in memory (triggers int 11)
   228                                  ;	1.......	Segment is present in memory
   229                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   230                                  ;	...0....	Segment is a system segment
   231                                  ;	...00010		Local Descriptor Table
   232                                  ;	...00101		Task Gate
   233                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   234                                  ;	...01100		Call Gate (386)
   235                                  ;	...01110		Interrupt Gate (386)
   236                                  ;	...01111		Trap Gate (386)
   237                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   238                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   239                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   240                                  ;
   241                                  ;-----------------------------------------------------------------------------------------------------------------------
   242                                  EACCLDT			equ	10000010b					;local descriptor table
   243                                  EACCTASK		equ	10000101b					;task gate
   244                                  EACCTSS			equ	10001001b					;task-state segment
   245                                  EACCGATE		equ	10001100b					;call gate
   246                                  EACCINT			equ	10001110b					;interrupt gate
   247                                  EACCTRAP		equ	10001111b					;trap gate
   248                                  EACCDATA		equ	10010011b					;upward writable data
   249                                  EACCCODE		equ	10011011b					;non-conforming readable code
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  ;
   252                                  ;	BIOS Interrupts and Functions						EBIOS...
   253                                  ;
   254                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   255                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   256                                  ;
   257                                  ;-----------------------------------------------------------------------------------------------------------------------
   258                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   259                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   260                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   261                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   262                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   263                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   264                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   265                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   266                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;	ASCII									EASCII...
   270                                  ;
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  EASCIIBACKSPACE		equ	008h						;backspace
   273                                  EASCIILINEFEED		equ	00Ah						;line feed
   274                                  EASCIIRETURN		equ	00Dh						;carriage return
   275                                  EASCIIESCAPE		equ	01Bh						;escape
   276                                  EASCIISPACE		equ	020h						;space
   277                                  EASCIIUPPERA		equ	041h						;'A'
   278                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   279                                  EASCIILOWERA		equ	061h						;'a'
   280                                  EASCIILOWERZ		equ	07Ah						;'z'
   281                                  EASCIITILDE		equ	07Eh						;'~'
   282                                  EASCIIBORDSGLVERT	equ	0B3h						;vertical single border
   283                                  EASCIIBORDSGLUPRRGT	equ	0BFh						;upper-right single border
   284                                  EASCIIBORDSGLLWRLFT	equ	0C0h						;lower-left single border
   285                                  EASCIIBORDSGLHORZ	equ	0C4h						;horizontal single border
   286                                  EASCIIBORDSGLLWRRGT	equ	0D9h						;lower-right single border
   287                                  EASCIIBORDSGLUPRLFT	equ	0DAh						;upper-left single border
   288                                  EASCIICASE		equ	00100000b					;case bit
   289                                  EASCIICASEMASK		equ	11011111b					;case mask
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;
   292                                  ;	Boot Sector and Loader Constants					EBOOT...
   293                                  ;
   294                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   295                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   296                                  ;
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   299                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   300                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   301                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   302                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   303                                  EBOOTMAXTRIES		equ	5						;max read retries
   304                                  ;-----------------------------------------------------------------------------------------------------------------------
   305                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ESELDAT			equ	018h						;kernel data selector
   308                                  ESELCGA			equ	020h						;cga video selector
   309                                  ESELOSCODE		equ	048h						;os kernel code selector
   310                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   311                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   312                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   313                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  ;	LDT Selectors								ESEL...
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ESELMQ			equ	02Ch						;console task message queue
   318                                  ;-----------------------------------------------------------------------------------------------------------------------
   319                                  ;	Kernel Constants							EKRN...
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  EKRNDESLEN		equ	8						;size of descriptor
   322                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   323                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;	Keyboard Flags								EKEYF...
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   328                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   329                                  EKEYFALTLEFT		equ	00000100b					;left alt
   330                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   331                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   332                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   333                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   334                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   335                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   336                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   337                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  ;	Console Constants							ECON...
   340                                  ;-----------------------------------------------------------------------------------------------------------------------
   341                                  ECONCOLS		equ	80						;columns per row
   342                                  ECONROWS		equ	24						;console rows
   343                                  ECONOIAROW		equ	24						;operator information area row
   344                                  ECONCOLBYTES		equ	2						;bytes per column
   345                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   346                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   347                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   348                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   349                                  ;-----------------------------------------------------------------------------------------------------------------------
   350                                  ;	Kernel Message Identifiers						EMSG...
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  EMSGKEYDOWN		equ	041000000h					;key-down
   353                                  EMSGKEYUP		equ	041010000h					;key-up
   354                                  EMSGKEYCHAR		equ	041020000h					;character
   355                                  ;=======================================================================================================================
   356                                  ;
   357                                  ;	Structures
   358                                  ;
   359                                  ;=======================================================================================================================
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  ;
   362                                  ;	DATETIME
   363                                  ;
   364                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   365                                  ;
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  struc			DATETIME
   368 00000000 <res 00000001>          .second			resb	1						;seconds
   369 00000001 <res 00000001>          .minute			resb	1						;minutes
   370 00000002 <res 00000001>          .hour			resb	1						;hours
   371 00000003 <res 00000001>          .weekday		resb	1						;day of week
   372 00000004 <res 00000001>          .day			resb	1						;day of month
   373 00000005 <res 00000001>          .month			resb	1						;month of year
   374 00000006 <res 00000001>          .year			resb	1						;year of century
   375 00000007 <res 00000001>          .century		resb	1						;century
   376                                  EDATETIMELEN		equ	($-.second)
   377                                  endstruc
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;
   380                                  ;	MQUEUE
   381                                  ;
   382                                  ;	The MQUEUE structure maps memory used for a message queue.
   383                                  ;
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  struc			MQUEUE
   386 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   387 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   388 00000008 <res 000003F8>          MQData			resd	254						;message queue
   389                                  endstruc
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;
   392                                  ;	OSDATA
   393                                  ;
   394                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   395                                  ;	used by the BIOS.
   396                                  ;
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  struc			OSDATA
   399 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   400 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   401 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   402 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   403 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   404 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   405 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   406 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   407 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   408 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   409 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   410 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   411 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   412 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   413 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   414 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   415 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   416 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   417 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   418 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   419 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   420 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   421 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   422 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   423 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   424 00000449 <res 00000001>          			resb	1						;449 current video mode
   425 0000044A <res 00000002>          			resw	1						;44a screen columns
   426 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   427 0000044E <res 00000002>          			resw	1						;44e current video page offset
   428 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   429 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   430 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   431 00000462 <res 00000001>          			resb	1						;462 active display page number
   432 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   433 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   434 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   435 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   436 00000469 <res 00000003>          			resb	3						;469 vague
   437 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   438 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   439 00000471 <res 00000001>          			resb	1						;471 bios break flag
   440 00000472 <res 00000002>          			resw	1						;472 soft reset
   441 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   442 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   443 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   444 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   445 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   446 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   447 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   448 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   449 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   450 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   451 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   452 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   453 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   454 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   455 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   456 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   457 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   458 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   459 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   460 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   461 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   462 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   463 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   464 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   465 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   466 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   467 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   468 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   469 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   470 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   471 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   472 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   473 000004AC <res 00000008>          			resb	8						;4ac reserved
   474 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   475 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   476 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   477 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   478 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   479 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   480 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   481 000004CD <res 00000001>          			resb	1						;4cd unknown
   482 000004CE <res 00000002>          			resw	1						;4de day counter
   483 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   484 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   485 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   486 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   487 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   488 00000505 <res 0000000A>          			resb	10						;505 POST work area
   489 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   490 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   491 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   492 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   493 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   494 0000051E <res 00000002>          			resw	1						;51e unknown
   495 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   496 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   497 00000530 <res 00000004>          			resb	4						;530 MODE command
   498 00000534 <res 000001CC>          			resb	460						;534 unused
   499 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  ;
   502                                  ;	OS Variables								@disk: N/A	@mem: 000800
   503                                  ;
   504                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   505                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   506                                  ;	are organized based on the task that usually accesses them.
   507                                  ;
   508                                  ;-----------------------------------------------------------------------------------------------------------------------
   509                                  ;-----------------------------------------------------------------------------------------------------------------------
   510                                  ;
   511                                  ;	Console Task Variables
   512                                  ;
   513                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   514                                  ;	the console task starts.
   515                                  ;
   516                                  ;-----------------------------------------------------------------------------------------------------------------------
   517                                  			align	4
   518                                  ECONDATA		equ	($)
   519 00000800 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   520 00000804 <res 00000001>          wbConsoleColumn		resb	1						;console column
   521 00000805 <res 00000001>          wbConsoleRow		resb	1						;console row
   522 00000806 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   523 00000807 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   524 00000808 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   525 00000809 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   526 0000080A <res 00000001>          wbConsoleScan1		resb	1						;scan code
   527 0000080B <res 00000001>          wbConsoleScan2		resb	1						;scan code
   528 0000080C <res 00000001>          wbConsoleScan3		resb	1						;scan code
   529 0000080D <res 00000001>          wbConsoleScan4		resb	1						;scan code
   530 0000080E <res 00000001>          wbConsoleScan5		resb	1						;scan code
   531 0000080F <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   532 00000810 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   533 00000860 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   534 000008B0 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   535 00000900 <res 00000008>          wsConsoleDateTime	resb	EDATETIMELEN					;date-time buffer
   536                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  ;
   539                                  ;	End of OS Variables
   540                                  ;
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  endstruc
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  ;
   545                                  ;	Macros
   546                                  ;
   547                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   548                                  ;
   549                                  ;-----------------------------------------------------------------------------------------------------------------------
   550                                  %macro			mint	1
   551                                  _%1			equ	($-$$) / EKRNDESLEN
   552                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   553                                  %endmacro
   554                                  %macro			mtrap	1
   555                                  _%1			equ	($-$$) / EKRNDESLEN
   556                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   557                                  %endmacro
   558                                  %macro			menter	1
   559                                  ?%1			equ	($-$$)
   560                                  %endmacro
   561                                  %macro			tsvce	1
   562                                  e%1			equ	($-tsvc)/4
   563                                  			dd	%1
   564                                  %endmacro
   565                                  %ifdef BUILDBOOT
   566                                  ;=======================================================================================================================
   567                                  ;
   568                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   569                                  ;
   570                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   571                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   572                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   573                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   574                                  ;
   575                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   576                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   577                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   578                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   579                                  ;	immediately followed by a disk parameter table.
   580                                  ;
   581                                  ;=======================================================================================================================
   582                                  			cpu	8086						;assume minimal CPU
   583                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   584                                  			bits	16						;16-bit code at power-up
   585                                  %ifdef BUILDPREP
   586                                  Boot			jmp	word Prep					;jump to preparation code
   587                                  %else
   588                                  Boot			jmp	word Boot.10					;jump over parameter table
   589                                  %endif
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ;
   592                                  ;	Disk Parameter Table
   593                                  ;
   594                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   595                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   596                                  ;
   597                                  ;-----------------------------------------------------------------------------------------------------------------------
   598                                  			db	"CustomOS"					;eight-byte label
   599                                  cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   600                                  cbClusterSectors	db	1						;sectors per cluster
   601                                  cwReservedSectors	dw	1						;reserved sectors
   602                                  cbFatCount		db	2						;file allocation table copies
   603                                  cwDirEntries		dw	224						;max directory entries
   604                                  cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   605                                  cbDiskType		db	0F0h						;1.44MB
   606                                  cwFatSectors		dw	9						;sectors per FAT copy
   607                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   608                                  cwTrackSectors		dw	18						;sectors per track (as word)
   609                                  cwDiskSides		dw	2						;sides per disk
   610                                  cwSpecialSectors	dw	0						;special sectors
   611                                  ;
   612                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   613                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   614                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   615                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   616                                  ;	given several possible starting values for CS:IP.
   617                                  ;
   618                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   619                                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   620                                  .@20			equ	$-$$						;.@20 = 021h
   621                                  .20			pop	ax						;AX =	   7c21     c21    21
   622                                  			sub	ax,.@20						;BX =	   7c00     c00     0
   623                                  			mov	cl,4						;shift count
   624                                  			shr	ax,cl						;AX =	    7c0      c0     0
   625                                  			mov	bx,cs						;BX =	      0     700   7c0
   626                                  			add	bx,ax						;BX =	    7c0     7c0   7c0
   627                                  ;
   628                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   629                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   630                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   631                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   632                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   633                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   634                                  ;
   635                                  			sub	bx,16						;BX = 07b0
   636                                  			mov	ds,bx						;DS = 07b0 = psp
   637                                  			mov	es,bx						;ES = 07b0 = psp
   638                                  			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   639                                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   640                                  ;
   641                                  ;	Our boot addressability is now set up according to the following diagram.
   642                                  ;
   643                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   644                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   645                                  ;				|  256 = 100h bytes				|
   646                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   647                                  ;				|  Boot Sector (vstart=0100h)			|
   648                                  ;				|  1 sector = 512 = 200h bytes			|
   649                                  ;			007e00	+-----------------------------------------------+ DS:0300
   650                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   651                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   652                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   653                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   654                                  ;			009200	+-----------------------------------------------+ DS:1700
   655                                  ;
   656                                  ;	On entry, DL indicates the drive being booted from.
   657                                  ;
   658                                  			mov	[wbDrive],dl					;[drive] = drive being booted from
   659                                  ;
   660                                  ;	Compute directory i/o buffer address.
   661                                  ;
   662                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   663                                  			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   664                                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   665                                  			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   666                                  ;
   667                                  ;	Compute segment where os.com will be loaded.
   668                                  ;
   669                                  			shr	ax,cl						;AX = 0150
   670                                  			add	ax,bx						;AX = 0150 + 07b0 = 0900
   671                                  			sub	ax,16						;AX = 08f0
   672                                  			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   673                                  ;
   674                                  ;	Set the video mode to 80 column, 25 row, text.
   675                                  ;
   676                                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   677                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   678                                  ;
   679                                  ;	Write a message to the console so we know we have our addressability established.
   680                                  ;
   681                                  			mov	si,czLoadMsg					;loading message
   682                                  			call	BootPrint					;display loader message
   683                                  ;
   684                                  ;	Initialize the number of directory sectors to search.
   685                                  ;
   686                                  			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   687                                  			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   688                                  ;
   689                                  ;	Compute number of directory sectors and initialize overhead count.
   690                                  ;
   691                                  			mov	cx,ax						;CX = 00e0 = 224 entries
   692                                  			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   693                                  			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   694                                  			mov	[wwOverhead],ax					;[overhead] = 000e
   695                                  ;
   696                                  ;	Compute directory entries per sector.
   697                                  ;
   698                                  			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   699                                  			div	cx						;AX = 0010 = entries per dir sector
   700                                  			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   701                                  ;
   702                                  ;	Compute first logical directory sector and update overhead count.
   703                                  ;
   704                                  			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   705                                  			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   706                                  			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   707                                  			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   708                                  			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   709                                  			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   710                                  ;
   711                                  ;	Read directory sector.
   712                                  ;
   713                                  .30			mov	al,1						;sector count
   714                                  			mov	[wbReadCount],al				;[readcount] = 01
   715                                  			mov	bx,[wwDirBuffer]				;BX = 1500
   716                                  			call	ReadSector					;read sector into es:bx
   717                                  ;
   718                                  ;	Setup variables to search this directory sector.
   719                                  ;
   720                                  			mov	ax,[wwEntriesLeft]				;directory entries to search
   721                                  			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   722                                  			jna	.40						;no, continue
   723                                  			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   724                                  .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   725                                  			mov	si,cbKernelProgram				;program name
   726                                  			mov	di,[wwDirBuffer]				;DI = 1500
   727                                  ;
   728                                  ;	Loop through directory sectors searching for kernel program.
   729                                  ;
   730                                  .50			push	si						;save kernel name address
   731                                  			push	di						;save dir i/o buffer address
   732                                  			mov	cx,11						;length of 8+3 name
   733                                  			cld							;forward strings
   734                                  			repe	cmpsb						;compare entry name
   735                                  			pop	di						;restore dir i/o buffer address
   736                                  			pop	si						;restore kernel name address
   737                                  			je	.60						;exit loop if found
   738                                  			add	di,[cwEntryLen]					;point to next dir entry
   739                                  			dec	ax						;decrement remaining entries
   740                                  			jnz	.50						;next entry
   741                                  ;
   742                                  ;	Repeat search if we are not at the end of the directory.
   743                                  ;
   744                                  			inc	word [wwLogicalSector]				;increment logical sector
   745                                  			cmp	word [wwEntriesLeft],0				;done with directory?
   746                                  			jne	.30						;no, get next sector
   747                                  			mov	si,czNoKernel					;missing kernel message
   748                                  			jmp	BootExit					;display message and exit
   749                                  ;
   750                                  ;	If we find the kernel program in the directory, read the FAT.
   751                                  ;
   752                                  .60			mov	ax,[cwReservedSectors]				;AX = 0001
   753                                  			mov	[wwLogicalSector],ax				;start past boot sector
   754                                  			mov	ax,[cwFatSectors]				;AX = 0009
   755                                  			mov	[wbReadCount],al				;[readcount] = 09
   756                                  			mov	bx,EBOOTFATBASE					;BX = 0300
   757                                  			call	ReadSector					;read FAT into buffer
   758                                  ;
   759                                  ;	Get the starting cluster of the kernel program and target address.
   760                                  ;
   761                                  			mov	ax,[di+26]					;AX = starting cluster of file
   762                                  			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   763                                  ;
   764                                  ;	Read each program cluster into RAM.
   765                                  ;
   766                                  .70			push	ax						;save cluster nbr
   767                                  			sub	ax,2						;AX = cluster nbr base 0
   768                                  			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   769                                  			mov	[wbReadCount],cl				;save sectors to read
   770                                  			xor	ch,ch						;CX = sectors per cluster
   771                                  			mul	cx						;DX:AX = logical cluster sector
   772                                  			add	ax,[wwOverhead]					;AX = kernel sector nbr
   773                                  			mov	[wwLogicalSector],ax				;save logical sector nbr
   774                                  			call	ReadSector					;read sectors into ES:BX
   775                                  ;
   776                                  ;	Update buffer pointer for next cluster.
   777                                  ;
   778                                  			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   779                                  			xor	ah,ah						;AX = sectors per cluster
   780                                  			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   781                                  			add	bx,ax						;BX = next cluster target address
   782                                  			pop	ax						;AX = restore cluster nbr
   783                                  ;
   784                                  ;	Compute next cluster number.
   785                                  ;
   786                                  			mov	cx,ax						;CX = cluster nbr
   787                                  			mov	di,ax						;DI = cluster nbr
   788                                  			shr	ax,1						;AX = cluster/2
   789                                  			mov	dx,ax						;DX = cluster/2
   790                                  			add	ax,dx						;AX = 2*(cluster/2)
   791                                  			add	ax,dx						;AX = 3*(cluster/2)
   792                                  			and	di,1						;get low bit
   793                                  			add	di,ax						;add one if cluster is odd
   794                                  			add	di,EBOOTFATBASE					;add FAT buffer address
   795                                  			mov	ax,[di]						;get cluster bytes
   796                                  ;
   797                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   798                                  ;
   799                                  			test	cl,1						;is cluster odd?
   800                                  			jz	.80						;no, skip ahead
   801                                  			mov	cl,4						;shift count
   802                                  			shr	ax,cl						;shift nybble low
   803                                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   804                                  			cmp	ax,0FFFh					;end of chain?
   805                                  			jne	.70						;no, continue
   806                                  ;
   807                                  ;	Transfer control to the operating system program.
   808                                  ;
   809                                  			db	0EAh						;jmp seg:offset
   810                                  wwLoadOffset		dw	0100h						;kernel entry offset
   811                                  wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   812                                  ;
   813                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   814                                  ;
   815                                  ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   816                                  			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   817                                  			mov	cx,ax						;CX = sectors per cylinder
   818                                  			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   819                                  			div	cx						;AX = cylinder; DX = cyl sector
   820                                  			mov	[wbTrack],al					;[track] = cylinder
   821                                  			mov	ax,dx						;AX = cyl sector
   822                                  			div	byte [cbTrackSectors]				;AH = sector, AL = head
   823                                  			inc	ah						;AH = sector (1,2,3,...)
   824                                  			mov	[wbHead],ax					;[head]= head, [sector]= sector
   825                                  ;
   826                                  ;	Try maxtries times to read sector.
   827                                  ;
   828                                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   829                                  .10			push	bx						;save buffer address
   830                                  			push	cx						;save retry count
   831                                  			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   832                                  			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   833                                  			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   834                                  			int	EBIOSINTDISKETTE				;read sector
   835                                  			pop	cx						;restore retry count
   836                                  			pop	bx						;restore buffer address
   837                                  			jnc	BootReturn					;skip ahead if done
   838                                  			loop	.10						;retry
   839                                  ;
   840                                  ;	Handle disk error: convert to ASCII and store in error string.
   841                                  ;
   842                                  			mov	al,ah						;AL = bios error code
   843                                  			xor	ah,ah						;AX = bios error code
   844                                  			mov	dl,16						;divisor for base 16
   845                                  			div	dl						;AL = hi order, AH = lo order
   846                                  			or	ax,03030h					;apply ASCII zone bits
   847                                  			cmp	ah,03Ah						;range test ASCII numeral
   848                                  			jb	.20						;continue if numeral
   849                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   850                                  .20			cmp	al,03Ah						;range test ASCII numeral
   851                                  			jb	.30						;continue if numeral
   852                                  			add	ah,7						;adjust for ASCII 'A'-'F'
   853                                  .30			mov	[wzErrorCode],ax				;store ASCII error code
   854                                  			mov	si,czErrorMsg					;error message address
   855                                  BootExit		call	BootPrint					;display messge to console
   856                                  .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   857                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   858                                  			jnz	.20						;continue if key pressed
   859                                  			sti							;enable maskable interrupts
   860                                  			hlt							;wait for interrupt
   861                                  			jmp	.10						;repeat
   862                                  .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   863                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   864                                  .30			sti							;enable maskable interrupts
   865                                  			hlt							;stop until reset, int, nmi
   866                                  			jmp	.30						;loop until restart kicks in
   867                                  ;
   868                                  ;	Display text message.
   869                                  ;
   870                                  BootPrint		cld							;forward strings
   871                                  			lodsb							;load next byte at DS:SI in AL
   872                                  			test	al,al						;end of string?
   873                                  			jz	BootReturn					;... yes, exit our loop
   874                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   875                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
   876                                  			jmp	BootPrint					;repeat until done
   877                                  BootReturn		ret							;return
   878                                  ;-----------------------------------------------------------------------------------------------------------------------
   879                                  ;
   880                                  ;	Constants
   881                                  ;
   882                                  ;-----------------------------------------------------------------------------------------------------------------------
   883                                  			align	2
   884                                  cwEntryLen		dw	32						;length of directory entry
   885                                  cbKernelProgram		db	"OS      COM"					;kernel program name
   886                                  czLoadMsg		db	"Loading OS",13,10,0				;loading message
   887                                  czErrorMsg		db	"Disk error "					;error message
   888                                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   889                                  czNoKernel		db	"OS missing",0					;missing kernel message
   890                                  ;-----------------------------------------------------------------------------------------------------------------------
   891                                  ;
   892                                  ;	Work Areas
   893                                  ;
   894                                  ;-----------------------------------------------------------------------------------------------------------------------
   895                                  			align	2
   896                                  wwDirBuffer		dw	0						;directory i/o buffer address
   897                                  wwEntriesLeft		dw	0						;directory entries to search
   898                                  wwOverhead		dw	0						;overhead sectors
   899                                  wwSectorEntries		dw	0						;directory entries per sector
   900                                  wwLogicalSector		dw	0						;current logical sector
   901                                  wwReadCountCommand	equ	$						;read count and command
   902                                  wbReadCount		db	0						;sectors to read
   903                                  cbReadCommand		db	2						;BIOS read disk fn code
   904                                  wwDriveHead		equ	$						;drive, head (word)
   905                                  wbDrive			db	0						;drive
   906                                  wbHead			db	0						;head
   907                                  wwSectorTrack		equ	$						;sector, track (word)
   908                                  			db	0						;sector
   909                                  wbTrack			db	0						;track
   910                                  			times	510-($-$$) db 0h				;zero fill to end of sector
   911                                  			db	055h,0AAh					;end of sector signature
   912                                  %endif
   913                                  %ifdef BUILDPREP
   914                                  ;=======================================================================================================================
   915                                  ;
   916                                  ;	Diskette Preparation Code
   917                                  ;
   918                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   919                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   920                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   921                                  ;
   922                                  ;=======================================================================================================================
   923                                  ;
   924                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   925                                  ;
   926                                  Prep			mov	si,czPrepMsg10					;starting message address
   927                                  			call	BootPrint					;display message
   928                                  ;
   929                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   930                                  ;
   931                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   932                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   933                                  			jnz	.12						;continue if key pressed
   934                                  			sti							;enable interrupts
   935                                  			hlt							;wait for interrupt
   936                                  			jmp	.10						;repeat
   937                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   938                                  			je	.15						;yes, branch
   939                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   940                                  			jne	.10						;no, repeat
   941                                  			jmp	.90						;yes, exit program
   942                                  ;
   943                                  ;	Display writing-sector message and patch the JMP instruction.
   944                                  ;
   945                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   946                                  			call	BootPrint					;display message
   947                                  			mov	bx,Boot+1					;address of JMP instruction operand
   948                                  			mov	ax,01Bh						;address past disk parameter table
   949                                  			mov	[bx],ax						;update the JMP instruction
   950                                  ;
   951                                  ;	Try to read the boot sector.
   952                                  ;
   953                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   954                                  .20			push	cx						;save remaining tries
   955                                  			mov	bx,wcPrepInBuf					;input buffer address
   956                                  			mov	dx,0						;head zero, drive zero
   957                                  			mov	cx,1						;track zero, sector one
   958                                  			mov	ax,0201h					;read one sector
   959                                  			int	EBIOSINTDISKETTE				;attempt the read
   960                                  			pop	cx						;restore remaining retries
   961                                  			jnc	.30						;skip ahead if successful
   962                                  			loop	.20						;try again
   963                                  			mov	si,czPrepMsg20					;read-error message address
   964                                  			jmp	.50						;branch to error routine
   965                                  ;
   966                                  ;	Copy diskette parms from input buffer to output buffer.
   967                                  ;
   968                                  .30			mov	si,wcPrepInBuf					;input buffer address
   969                                  			add	si,11						;skip over JMP and system ID
   970                                  			mov	di,Boot						;output buffer address
   971                                  			add	di,11						;skip over JMP and system ID
   972                                  			mov	cx,19						;length of diskette parameters
   973                                  			cld							;forward string copies
   974                                  			rep	movsb						;copy diskette parameters
   975                                  ;
   976                                  ;	Try to write boot sector to diskette.
   977                                  ;
   978                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   979                                  .40			push	cx						;save remaining tries
   980                                  			mov	bx,Boot						;output buffer address
   981                                  			mov	dx,0						;head zero, drive zero
   982                                  			mov	cx,1						;track zero, sector one
   983                                  			mov	ax,0301h					;write one sector
   984                                  			int	EBIOSINTDISKETTE				;attempt the write
   985                                  			pop	cx						;restore remaining retries
   986                                  			jnc	.80						;skip ahead if successful
   987                                  			loop	.40						;try again
   988                                  			mov	si,czPrepMsg30					;write-error message address
   989                                  ;
   990                                  ;	Convert the error code to ASCII and display the error message.
   991                                  ;
   992                                  .50			push	ax						;save error code
   993                                  			mov	al,ah						;copy error code
   994                                  			mov	ah,0						;AX = error code
   995                                  			mov	dl,10h						;hexadecimal divisor
   996                                  			idiv	dl						;AL = hi-order, AH = lo-order
   997                                  			or	ax,03030h					;add ASCII zone digits
   998                                  			cmp	ah,03Ah						;AH ASCII numeral?
   999                                  			jb	.60						;yes, continue
  1000                                  			add	ah,7						;no, make ASCII 'A'-'F'
  1001                                  .60			cmp	al,03Ah						;al ASCII numeral?
  1002                                  			jb	.70						;yes, continue
  1003                                  			add	al,7						;no, make ASCII
  1004                                  .70			mov	[si+17],ax					;put ASCII error code in message
  1005                                  			call	BootPrint					;write error message
  1006                                  			pop	ax						;restore error code
  1007                                  ;
  1008                                  ;	Display the completion message.
  1009                                  ;
  1010                                  .80			mov	si,czPrepMsgOK					;assume successful completion
  1011                                  			mov	al,ah						;BIOS return code
  1012                                  			cmp	al,0						;success?
  1013                                  			je	.85						;yes, continue
  1014                                  			mov	si,czPrepMsgErr1				;disk parameter error message
  1015                                  			cmp	al,1						;disk parameter error?
  1016                                  			je	.85						;yes, continue
  1017                                  			mov	si,czPrepMsgErr2				;address mark not found message
  1018                                  			cmp	al,2						;address mark not found?
  1019                                  			je	.85						;yes, continue
  1020                                  			mov	si,czPrepMsgErr3				;protected disk message
  1021                                  			cmp	al,3						;protected disk?
  1022                                  			je	.85						;yes, continue
  1023                                  			mov	si,czPrepMsgErr6				;diskette removed message
  1024                                  			cmp	al,6						;diskette removed?
  1025                                  			je	.85						;yes, continue
  1026                                  			mov	si,czPrepMsgErr80				;drive timed out message
  1027                                  			cmp	al,80H						;drive timed out?
  1028                                  			je	.85						;yes, continue
  1029                                  			mov	si,czPrepMsgErrXX				;unknown error message
  1030                                  .85			call	BootPrint					;display result message
  1031                                  .90			mov	ax,04C00H					;terminate with zero result code
  1032                                  			int	021h						;terminate DOS program
  1033                                  			ret							;return (should not execute)
  1034                                  ;-----------------------------------------------------------------------------------------------------------------------
  1035                                  ;
  1036                                  ;	Diskette Preparation Messages
  1037                                  ;
  1038                                  ;-----------------------------------------------------------------------------------------------------------------------
  1039                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1040                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1041                                  			db	13,10
  1042                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1043                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
  1044                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1045                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1046                                  			db	13,10,0
  1047                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1048                                  			db	13,10,0
  1049                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1050                                  			db	13,10,0
  1051                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1052                                  			db	13,10,0
  1053                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1054                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1055                                  			db	13,10,0
  1056                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1057                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1058                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1059                                  			db	13,10,"and retry."
  1060                                  			db	13,10,0
  1061                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1062                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1063                                  			db	13,10,"using another diskette."
  1064                                  			db	13,10,0
  1065                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1066                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1067                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1068                                  			db	13,10,0
  1069                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1070                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1071                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1072                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1073                                  			db	13,10,"is properly inserted in the diskette drive."
  1074                                  			db	13,10,0
  1075                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1076                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1077                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1078                                  			db	13,10,0
  1079                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1080                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1081                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1082                                  			db	13,10,0
  1083                                  wcPrepInBuf		equ	$
  1084                                  %endif
  1085                                  %ifdef BUILDDISK
  1086                                  ;=======================================================================================================================
  1087                                  ;
  1088                                  ;	File Allocation Tables
  1089                                  ;
  1090                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1091                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1092                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1093                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1094                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1095                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1096                                  ;	the last cluster in the chain.
  1097                                  ;
  1098                                  ;	Every three bytes encode two FAT entries as follows:
  1099                                  ;
  1100                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1101                                  ;
  1102                                  ;=======================================================================================================================
  1103                                  ;-----------------------------------------------------------------------------------------------------------------------
  1104                                  ;
  1105                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1106                                  ;
  1107                                  ;-----------------------------------------------------------------------------------------------------------------------
  1108                                  section			fat1							;first copy of FAT
  1109                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1110                                  			db	005h,060h,000h,	007h,080h,000h
  1111                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1112                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1113                                  			db	011h,020h,001h,	013h,040h,001h
  1114                                  			db	015h,060h,001h,	017h,080h,001h
  1115                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1116                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1117                                  			db	021h,020h,002h,	023h,040h,002h
  1118                                  			db	025h,060h,002h,	027h,080h,002h
  1119                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1120                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1121                                  ;-----------------------------------------------------------------------------------------------------------------------
  1122                                  ;
  1123                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1124                                  ;
  1125                                  ;-----------------------------------------------------------------------------------------------------------------------
  1126                                  section			fat2							;second copy of FAT
  1127                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1128                                  			db	005h,060h,000h,	007h,080h,000h
  1129                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1130                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1131                                  			db	011h,020h,001h,	013h,040h,001h
  1132                                  			db	015h,060h,001h,	017h,080h,001h
  1133                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1134                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1135                                  			db	021h,020h,002h,	023h,040h,002h
  1136                                  			db	025h,060h,002h,	027h,080h,002h
  1137                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1138                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1139                                  ;-----------------------------------------------------------------------------------------------------------------------
  1140                                  ;
  1141                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1142                                  ;
  1143                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1144                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1145                                  ;	copy.
  1146                                  ;
  1147                                  ;-----------------------------------------------------------------------------------------------------------------------
  1148                                  section			dir							;diskette directory
  1149                                  			db	"OS      COM"					;file name (must contain spaces)
  1150                                  			db	020h						;attribute (archive bit set)
  1151                                  			times	10 db 0						;unused
  1152                                  			dw	0h						;time
  1153                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1154                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1155                                  			dw	2						;first cluster
  1156                                  			dd	05200h						;file size
  1157                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1158                                  %endif
  1159                                  %ifdef BUILDCOM
  1160                                  ;=======================================================================================================================
  1161                                  ;
  1162                                  ;	OS.COM
  1163                                  ;
  1164                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1165                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1166                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1167                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1168                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1169                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1170                                  ;
  1171                                  ;	Our loader addressability is set up according to the following diagram.
  1172                                  ;
  1173                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1174                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1175                                  ;				|  256 = 100h bytes				|
  1176                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1177                                  ;				|  Boot Sector (vstart=0100h)			|
  1178                                  ;				|  1 sector = 512 = 200h bytes			|
  1179                                  ;			007e00	+-----------------------------------------------+
  1180                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1181                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1182                                  ;				|						|
  1183                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1184                                  ;				|						|
  1185                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1186                                  ;				|  Loader Code					|
  1187                                  ;				|  1 sector = 512 = 200h bytes			|
  1188                                  ;			009200	+-----------------------------------------------+ DS:0300
  1189                                  ;
  1190                                  ;=======================================================================================================================
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  ;
  1193                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1194                                  ;
  1195                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1196                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1197                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1198                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1199                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1200                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1201                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1202                                  ;	registers.
  1203                                  ;
  1204                                  ;-----------------------------------------------------------------------------------------------------------------------
  1205                                  			cpu	8086						;assume minimal CPU
  1206                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1207                                  			bits	16						;this is 16-bit code
  1208 00000000 0E                      Loader			push	cs						;use the code segment
  1209 00000001 1F                      			pop	ds						;...as our data segment
  1210 00000002 0E                      			push	cs						;use the code segment
  1211 00000003 07                      			pop	es						;...as our extra segment
  1212                                  ;
  1213                                  ;	Write a message to the console so we know we have our addressability established.
  1214                                  ;
  1215 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1216 00000007 E8A600                  			call	PutTTYString					;display loader message
  1217                                  ;
  1218                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1219                                  ;
  1220 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1221 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1222 00000010 3C03                    			cmp	al,3						;80386+?
  1223 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1224                                  			cpu	386						;allow 80386 instructions
  1225 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1226 00000017 E89600                  			call	PutTTYString					;display message
  1227                                  ;
  1228                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1229                                  ;
  1230 0000001A BE0003                  			mov	si,0300h					;GDT offset
  1231 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1232 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1233 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1234 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1235 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1236 00000029 894432                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1237 0000002C 884C34                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1238 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1239 00000032 E87B00                  			call	PutTTYString					;display message
  1240                                  ;
  1241                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1242                                  ;
  1243 00000035 680001                  			push	EKRNCODESEG					;use kernel code segment ...
  1244 00000038 07                      			pop	es						;... as target segment
  1245 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1246 0000003B BE0003                  			mov	si,0300h					;DS:SI = source address
  1247 0000003E B90050                  			mov	cx,05000h					;CX = kernel size
  1248 00000041 FC                      			cld							;forward strings
  1249 00000042 F3A4                    			rep	movsb						;copy kernel image
  1250 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1251 00000047 E86600                  			call	PutTTYString					;display message
  1252                                  ;
  1253                                  ;	Switch to protected mode.
  1254                                  ;
  1255 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1256 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1257 0000004E BC0010                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1258 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1259 00000053 BB2820                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1260 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1261 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1262 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1263 0000005E 4A                      			dec	dx						;restore outer loop count
  1264 0000005F 75F8                    			jnz	.10						;continue outer loop
  1265 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1266                                  ;
  1267                                  ;	Enable hardware and maskable interrupts
  1268                                  ;
  1269 00000063 30C0                    			xor	al,al						;enable all registers code
  1270 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1271 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1272 00000069 FB                      			sti							;enable maskable interrupts
  1273                                  ;
  1274                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1275                                  ;
  1276 0000006A 2E0F001E[C000]          			ltr	[cs:cwLoaderTSS]				;load task register
  1277 00000070 2E0F0016[BE00]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1278 00000076 EA00006800              			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1279                                  ;-----------------------------------------------------------------------------------------------------------------------
  1280                                  ;
  1281                                  ;	Routine:	LoaderExit
  1282                                  ;
  1283                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1284                                  ;
  1285                                  ;	In:		DS:SI	string address
  1286                                  ;
  1287                                  ;-----------------------------------------------------------------------------------------------------------------------
  1288 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1289                                  ;
  1290                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1291                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1292                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1293                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1294                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1295                                  ;
  1296 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1297 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1298 00000082 7504                    			jnz	.40						;exit if key pressed
  1299 00000084 FB                      			sti							;enable maskable interrupts
  1300 00000085 F4                      			hlt							;wait for interrupt
  1301 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1302                                  ;
  1303                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1304                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1305                                  ;	HLT until the system resets.
  1306                                  ;
  1307 00000088 B0FE                    .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1308 0000008A E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1309 0000008C FB                      .50			sti							;enable maskable interrupts
  1310 0000008D F4                      			hlt							;stop until reset, int, nmi
  1311 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;
  1314                                  ;	Routine:	GetCPUType
  1315                                  ;
  1316                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1317                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1318                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1319                                  ;
  1320                                  ;	Out:		AX	0 = 808x, v20, etc.
  1321                                  ;				1 = 80186
  1322                                  ;				2 = 80286
  1323                                  ;				3 = 80386
  1324                                  ;
  1325                                  ;-----------------------------------------------------------------------------------------------------------------------
  1326 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1327 00000092 B120                    			mov	cl,32						;shift count
  1328 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1329 00000096 08C0                    			or	al,al						;did the shift happen?
  1330 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1331                                  			cpu	186
  1332 0000009A 54                      			push	sp						;save stack pointer
  1333 0000009B 59                      			pop	cx						;...into cx
  1334 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1335 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1336                                  			cpu	286
  1337 000000A0 40                      			inc	ax						;AX = 2
  1338 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1339 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1340 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1341 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1342 000000AE 40                      			inc	ax						;AX = 3
  1343 000000AF C3                      .10			ret							;return
  1344                                  ;-----------------------------------------------------------------------------------------------------------------------
  1345                                  ;
  1346                                  ;	Routine:	PutTTYString
  1347                                  ;
  1348                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1349                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1350                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1351                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1352                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1353                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1354                                  ;			registers and flags unless used to indicate return status.
  1355                                  ;
  1356                                  ;	In:		DS:SI	address of string
  1357                                  ;
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359 000000B0 FC                      PutTTYString		cld							;forward strings
  1360 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1361 000000B2 84C0                    			test	al,al						;end of string?
  1362 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1363 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1364 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1365 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1366 000000BC C3                      .10			ret							;return
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  ;
  1369                                  ;	Loader Data
  1370                                  ;
  1371                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1372                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1373                                  ;
  1374                                  ;-----------------------------------------------------------------------------------------------------------------------
  1375 000000BD 90                      			align	2
  1376 000000BE 5000                    cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1377 000000C0 5800                    cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1378 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1379 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1380 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1380 000000D1 74696E672073797374-
  1380 000000DA 656D20726571756972-
  1380 000000E3 657320616E20693338-
  1380 000000EC 36206F72206C617465-
  1380 000000F5 722070726F63657373-
  1380 000000FE 6F722E0D0A         
  1381 00000103 506C65617365207072-     			db	"Please press any key to restart the computer.",13,10,0
  1381 0000010C 65737320616E79206B-
  1381 00000115 657920746F20726573-
  1381 0000011E 746172742074686520-
  1381 00000127 636F6D70757465722E-
  1381 00000130 0D0A00             
  1382 00000133 435055204F4B0D0A00      czCPUOKMsg		db	"CPU OK",13,10,0
  1383 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1383 00000145 7265640D0A00       
  1384 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1384 00000154 616465640D0A00     
  1385 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1385 00000164 4F530D0A00         
  1386 00000169 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1387 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1388                                  ;=======================================================================================================================
  1389                                  ;
  1390                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1391                                  ;
  1392                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1393                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1394                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1395                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1396                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1397                                  ;
  1398                                  ;=======================================================================================================================
  1399                                  ;=======================================================================================================================
  1400                                  ;
  1401                                  ;	Kernel Tables
  1402                                  ;
  1403                                  ;=======================================================================================================================
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  ;
  1406                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1407                                  ;
  1408                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1409                                  ;	first descriptor must be all nulls.
  1410                                  ;
  1411                                  ;	6   5         4         3         2         1         0
  1412                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1413                                  ;	----------------------------------------------------------------
  1414                                  ;	h......hffffmmmma......ab......................bn..............n
  1415                                  ;	00000000			all areas have base addresses below 2^24
  1416                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1417                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1418                                  ;	            1001		present, ring-0, selector
  1419                                  ;
  1420                                  ;	h...h	hi-order base address (bits 24-31)
  1421                                  ;	ffff	flags
  1422                                  ;	mmmm	hi-order limit (bits 16-19)
  1423                                  ;	a...a	access
  1424                                  ;	b...b	lo-order base address (bits 0-23)
  1425                                  ;	n...n	lo-order limit (bits 0-15)
  1426                                  ;
  1427                                  ;-----------------------------------------------------------------------------------------------------------------------
  1428                                  section			gdt							;global descriptor table
  1429 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1430 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1431 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1432 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1433 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1434 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1435 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1436 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1437 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1438 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1439 00000050 7F00000F00824000        			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1440 00000058 7F00800F00894000        			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1441 00000060 7F00004700824000        			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1442 00000068 7F00804700894000        			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1443 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  ;
  1446                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1447                                  ;
  1448                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1449                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1450                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1451                                  ;
  1452                                  ;	6   5         4         3         2         1         0
  1453                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1454                                  ;	----------------------------------------------------------------
  1455                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1456                                  ;
  1457                                  ;	h...h	high-order offset (bits 16-31)
  1458                                  ;	P	present (0=unused interrupt)
  1459                                  ;	zz	descriptor privilege level
  1460                                  ;	S	storage segment (must be zero for IDT)
  1461                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1462                                  ;	S...S	handling code selector in GDT
  1463                                  ;	l...l	lo-order offset (bits 0-15)
  1464                                  ;
  1465                                  ;-----------------------------------------------------------------------------------------------------------------------
  1466                                  section			idt							;interrupt descriptor table
  1467                                  			mint	dividebyzero					;00 divide by zero
  1467                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1467 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                  			mint	singlestep					;01 single step
  1468                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1468 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469                                  			mint	nmi						;02 non-maskable
  1469                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1469 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1470                                  			mint	break						;03 break
  1470                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1470 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1471                                  			mint	into						;04 into
  1471                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1471 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1472                                  			mint	bounds						;05 bounds
  1472                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1472 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1473                                  			mint	badopcode					;06 bad op code
  1473                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1473 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1474                                  			mint	nocoproc					;07 no coprocessor
  1474                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1474 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1475                                  			mint	doublefault					;08 double-fault
  1475                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1475 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1476                                  			mint	operand						;09 operand
  1476                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1476 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1477                                  			mint	badtss						;0a bad TSS
  1477                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1477 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1478                                  			mint	notpresent					;0b not-present
  1478                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1478 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1479                                  			mint	stacklimit					;0c stack limit
  1479                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1479 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1480                                  			mint	protection					;0d general protection fault
  1480                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1480 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1481                                  			mint	int14						;0e (reserved)
  1481                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1481 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1482                                  			mint	int15						;0f (reserved)
  1482                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1482 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1483                                  			mint	coproccalc					;10 (reserved)
  1483                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1483 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1484                                  			mint	int17						;11 (reserved)
  1484                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1484 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1485                                  			mint	int18						;12 (reserved)
  1485                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1485 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1486                                  			mint	int19						;13 (reserved)
  1486                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1486 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1487                                  			mint	int20						;14 (reserved)
  1487                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1487 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1488                                  			mint	int21						;15 (reserved)
  1488                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1488 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1489                                  			mint	int22						;16 (reserved)
  1489                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1489 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1490                                  			mint	int23						;17 (reserved)
  1490                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1490 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1491                                  			mint	int24						;18 (reserved)
  1491                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1491 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1492                                  			mint	int25						;19 (reserved)
  1492                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1492 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1493                                  			mint	int26						;1a (reserved)
  1493                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1493 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1494                                  			mint	int27						;1b (reserved)
  1494                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1494 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1495                                  			mint	int28						;1c (reserved)
  1495                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1495 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1496                                  			mint	int29						;1d (reserved)
  1496                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1496 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1497                                  			mint	int30						;1e (reserved)
  1497                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1497 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1498                                  			mint	int31						;1f (reserved)
  1498                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1498 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1499                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1499                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1499 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1500                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1500                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1500 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1501                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1501                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1501 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1502                                  			mtrap	com2						;23 IRQ3 com2
  1502                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1502 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1503                                  			mtrap	com1						;24 IRQ4 com1
  1503                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1503 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1504                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1504                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1504 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1505                                  			mtrap	diskette					;26 IRQ6 diskette
  1505                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1505 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1506                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1506                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1506 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1507                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1507 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1508                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1508                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1508 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1509                                  			mtrap	irq10						;2a IRQA (reserved)
  1509                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1509 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1510                                  			mtrap	irq11						;2b IRQB (reserved)
  1510                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1510 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1511                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1511                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1511 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1512                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1512                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1512 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1513                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1513                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1513 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1514                                  			mtrap	irq15						;2f IRQF (reserved)
  1514                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1514 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1515                                  			mtrap	svc						;30 OS services
  1515                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1515 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1516 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1517                                  ;=======================================================================================================================
  1518                                  ;
  1519                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1520                                  ;
  1521                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1522                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1523                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1524                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1525                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1526                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1527                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1528                                  ;
  1529                                  ;=======================================================================================================================
  1530                                  section			kernel	vstart=0h					;data offsets relative to 0
  1531                                  			cpu	386						;allow 80386 instructions
  1532                                  			bits	32						;this is 32-bit code
  1533                                  ;=======================================================================================================================
  1534                                  ;
  1535                                  ;	CPU Interrupt Handlers
  1536                                  ;
  1537                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1538                                  ;	of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1539                                  ;
  1540                                  ;=======================================================================================================================
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                  ;
  1543                                  ;	INT0	Divide By Zero
  1544                                  ;
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                  			menter	dividebyzero					;divide by zero
  1546                              <1> ?%1 equ ($-$$)
  1547 00000000 6A00                    			push	0						;store interrupt nbr
  1548 00000002 68[29030000]            			push	czIntDivideByZero				;store message offset
  1549 00000007 E947010000              			jmp	ReportInterrupt					;report interrupt
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;	INT1	Single Step
  1553                                  ;
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                  			menter	singlestep					;single step
  1555                              <1> ?%1 equ ($-$$)
  1556 0000000C 6A01                    			push	1						;store interrupt nbr
  1557 0000000E 68[3A030000]            			push	czIntSingleStep					;store message offset
  1558 00000013 E93B010000              			jmp	ReportInterrupt					;report interrupt
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;	INT2	Non-Maskable Interrupt
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  			menter	nmi						;non-maskable
  1564                              <1> ?%1 equ ($-$$)
  1565 00000018 6A02                    			push	2						;store interrupt nbr
  1566 0000001A 68[46030000]            			push	czIntNonMaskable				;store message offset
  1567 0000001F E92F010000              			jmp	ReportInterrupt					;report interrupt
  1568                                  ;-----------------------------------------------------------------------------------------------------------------------
  1569                                  ;
  1570                                  ;	INT3	Break
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  			menter	break						;break
  1573                              <1> ?%1 equ ($-$$)
  1574 00000024 6A03                    			push	3						;store interrupt nbr
  1575 00000026 68[5D030000]            			push	czIntBreak					;store message offset
  1576 0000002B E923010000              			jmp	ReportInterrupt					;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;	INT4	Into
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  			menter	into						;into
  1582                              <1> ?%1 equ ($-$$)
  1583 00000030 6A04                    			push	4						;store interrupt nbr
  1584 00000032 68[63030000]            			push	czIntInto					;store message offset
  1585 00000037 E917010000              			jmp	ReportInterrupt					;report interrupt
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                  ;
  1588                                  ;	INT5	Bounds
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  			menter	bounds						;bounds
  1591                              <1> ?%1 equ ($-$$)
  1592 0000003C 6A05                    			push	5						;store interrupt nbr
  1593 0000003E 68[68030000]            			push	czIntBounds					;store message offset
  1594 00000043 E90B010000              			jmp	ReportInterrupt					;report interrupt
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                  ;
  1597                                  ;	INT6	Bad Operation Code
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  			menter	badopcode					;bad opcode interrupt
  1600                              <1> ?%1 equ ($-$$)
  1601 00000048 6A06                    			push	6						;store interrupt nbr
  1602 0000004A 68[6F030000]            			push	czIntBadOpCode					;store message offset
  1603 0000004F E9FF000000              			jmp	ReportInterrupt					;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;	INT7	No Coprocessor
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  			menter	nocoproc					;no coprocessor interrupt
  1609                              <1> ?%1 equ ($-$$)
  1610 00000054 6A07                    			push	7						;store interrupt nbr
  1611 00000056 68[82030000]            			push	czIntNoCoprocessor				;store message offset
  1612 0000005B E9F3000000              			jmp	ReportInterrupt					;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;	INT8	Double Fault
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                  			menter	doublefault					;doublefault interrupt
  1618                              <1> ?%1 equ ($-$$)
  1619 00000060 6A08                    			push	8						;store interrupt nbr
  1620 00000062 68[91030000]            			push	czIntDoubleFault				;store message offset
  1621 00000067 E9E7000000              			jmp	ReportInterrupt					;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;	INT9	Operand
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  			menter	operand						;operand interrupt
  1627                              <1> ?%1 equ ($-$$)
  1628 0000006C 6A09                    			push	9						;store interrupt nbr
  1629 0000006E 68[9E030000]            			push	czIntOperand					;store message offset
  1630 00000073 E9DB000000              			jmp	ReportInterrupt					;report interrupt
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;	INT10	Bad Task State Segment
  1634                                  ;
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                  			menter	badtss						;bad tss interrupt
  1636                              <1> ?%1 equ ($-$$)
  1637 00000078 6A0A                    			push	10						;store interrupt nbr
  1638 0000007A 68[A6030000]            			push	czIntBadTSS					;store message offset
  1639 0000007F E9CF000000              			jmp	ReportInterrupt					;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;	INT11	Not Present
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  			menter	notpresent					;not present interrupt
  1645                              <1> ?%1 equ ($-$$)
  1646 00000084 6A0B                    			push	11						;store interrupt nbr
  1647 00000086 68[BD030000]            			push	czIntNotPresent					;store message offset
  1648 0000008B E9C3000000              			jmp	ReportInterrupt					;report interrupt
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;	INT12	Stack Limit
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  			menter	stacklimit					;stack limit interrupt
  1654                              <1> ?%1 equ ($-$$)
  1655 00000090 6A0C                    			push	12						;store interrupt nbr
  1656 00000092 68[C9030000]            			push	czIntStackLimit					;store message offset
  1657 00000097 E9B7000000              			jmp	ReportInterrupt					;report interrupt
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  ;
  1660                                  ;	INT13	General Protection Fault
  1661                                  ;
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  			menter	protection					;protection fault interrupt
  1663                              <1> ?%1 equ ($-$$)
  1664 0000009C 6A0D                    			push	13						;store interrupt nbr
  1665 0000009E 68[D5030000]            			push	czIntProtection					;store message offset
  1666 000000A3 E9AB000000              			jmp	ReportInterrupt					;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;	INT14	Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  			menter	int14						;(reserved)
  1672                              <1> ?%1 equ ($-$$)
  1673 000000A8 6A0E                    			push	14						;store interrupt nbr
  1674 000000AA 68[06040000]            			push	czIntReserved					;store message offset
  1675 000000AF E99F000000              			jmp	ReportInterrupt					;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;	INT15	Reserved
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  			menter	int15						;(reserved)
  1681                              <1> ?%1 equ ($-$$)
  1682 000000B4 6A0F                    			push	15						;store interrupt nbr
  1683 000000B6 68[06040000]            			push	czIntReserved					;store message offset
  1684 000000BB E993000000              			jmp	ReportInterrupt					;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;	INT16	Coprocessor Calculation
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  			menter	coproccalc					;coprocessor calculation
  1690                              <1> ?%1 equ ($-$$)
  1691 000000C0 6A10                    			push	16						;store interrupt nbr
  1692 000000C2 68[EE030000]            			push	czIntCoprocessorCalc				;store message offset
  1693 000000C7 E987000000              			jmp	ReportInterrupt					;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;	INT17	Reserved
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  			menter	int17						;(reserved)
  1699                              <1> ?%1 equ ($-$$)
  1700 000000CC 6A11                    			push	17						;store interrupt nbr
  1701 000000CE 68[06040000]            			push	czIntReserved					;store message offset
  1702 000000D3 EB7E                    			jmp	ReportInterrupt					;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;	INT18	Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  			menter	int18						;(reserved)
  1708                              <1> ?%1 equ ($-$$)
  1709 000000D5 6A12                    			push	18						;store interrupt nbr
  1710 000000D7 68[06040000]            			push	czIntReserved					;store message offset
  1711 000000DC EB75                    			jmp	ReportInterrupt					;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;	INT19	Reserved
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  			menter	int19						;(reserved)
  1717                              <1> ?%1 equ ($-$$)
  1718 000000DE 6A13                    			push	19						;store interrupt nbr
  1719 000000E0 68[06040000]            			push	czIntReserved					;store message offset
  1720 000000E5 EB6C                    			jmp	ReportInterrupt					;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;	INT20	Reserved
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  			menter	int20						;(reserved)
  1726                              <1> ?%1 equ ($-$$)
  1727 000000E7 6A14                    			push	20						;store interrupt nbr
  1728 000000E9 68[06040000]            			push	czIntReserved					;store message offset
  1729 000000EE EB63                    			jmp	ReportInterrupt					;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;	INT21	Reserved
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  			menter	int21						;(reserved)
  1735                              <1> ?%1 equ ($-$$)
  1736 000000F0 6A15                    			push	21						;store interrupt nbr
  1737 000000F2 68[06040000]            			push	czIntReserved					;store message offset
  1738 000000F7 EB5A                    			jmp	ReportInterrupt					;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;	INT22	Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                  			menter	int22						;(reserved)
  1744                              <1> ?%1 equ ($-$$)
  1745 000000F9 6A16                    			push	22						;store interrupt nbr
  1746 000000FB 68[06040000]            			push	czIntReserved					;store message offset
  1747 00000100 EB51                    			jmp	ReportInterrupt					;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;	INT23	Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  			menter	int23						;(reserved)
  1753                              <1> ?%1 equ ($-$$)
  1754 00000102 6A17                    			push	23						;store interrupt nbr
  1755 00000104 68[06040000]            			push	czIntReserved					;store message offset
  1756 00000109 EB48                    			jmp	ReportInterrupt					;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;	INT24	Reserved
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                  			menter	int24						;(reserved)
  1762                              <1> ?%1 equ ($-$$)
  1763 0000010B 6A18                    			push	24						;store interrupt nbr
  1764 0000010D 68[06040000]            			push	czIntReserved					;store message offset
  1765 00000112 EB3F                    			jmp	ReportInterrupt					;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;	INT25	Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  			menter	int25						;(reserved)
  1771                              <1> ?%1 equ ($-$$)
  1772 00000114 6A19                    			push	25						;store interrupt nbr
  1773 00000116 68[06040000]            			push	czIntReserved					;store message offset
  1774 0000011B EB36                    			jmp	ReportInterrupt					;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;	INT26	Reserved
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  			menter	int26						;(reserved)
  1780                              <1> ?%1 equ ($-$$)
  1781 0000011D 6A1A                    			push	26						;store interrupt nbr
  1782 0000011F 68[06040000]            			push	czIntReserved					;store message offset
  1783 00000124 EB2D                    			jmp	ReportInterrupt					;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;	INT27	Reserved
  1787                                  ;
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                  			menter	int27						;(reserved)
  1789                              <1> ?%1 equ ($-$$)
  1790 00000126 6A1B                    			push	27						;store interrupt nbr
  1791 00000128 68[06040000]            			push	czIntReserved					;store message offset
  1792 0000012D EB24                    			jmp	ReportInterrupt					;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;	INT28	Reserved
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  			menter	int28						;(reserved)
  1798                              <1> ?%1 equ ($-$$)
  1799 0000012F 6A1C                    			push	28						;store interrupt nbr
  1800 00000131 68[06040000]            			push	czIntReserved					;store message offset
  1801 00000136 EB1B                    			jmp	ReportInterrupt					;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;	INT29	Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                  			menter	int29						;(reserved)
  1807                              <1> ?%1 equ ($-$$)
  1808 00000138 6A1D                    			push	29						;store interrupt nbr
  1809 0000013A 68[06040000]            			push	czIntReserved					;store message offset
  1810 0000013F EB12                    			jmp	ReportInterrupt					;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;	INT30	Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  			menter	int30						;(reserved)
  1816                              <1> ?%1 equ ($-$$)
  1817 00000141 6A1E                    			push	30						;store interrupt nbr
  1818 00000143 68[06040000]            			push	czIntReserved					;store message offset
  1819 00000148 EB09                    			jmp	ReportInterrupt					;report interrupt
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;	INT31	Reserved
  1823                                  ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                  			menter	int31						;(reserved)
  1825                              <1> ?%1 equ ($-$$)
  1826 0000014A 6A1F                    			push	31						;store interrupt nbr
  1827 0000014C 68[06040000]            			push	czIntReserved					;store message offset
  1828 00000151 EB00                    			jmp	ReportInterrupt					;report interrupt
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                  ;
  1831                                  ;	Routine:	ReportInterrupt
  1832                                  ;
  1833                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1834                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1835                                  ;
  1836                                  ;	In:		[esp+16]	eflags					stored by interrupt call
  1837                                  ;			[esp+12]	cs					stored by interrupt call
  1838                                  ;			[esp+8]		eip					stored by interrupt call
  1839                                  ;			[esp+4]		interrupt number (0-31)			stored by push instruction
  1840                                  ;			[esp+0]		error message address			stored by push instructions
  1841                                  ;
  1842                                  ;	Out:		N/A		This routine does not exit.
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845 00000153 1E                      ReportInterrupt		push	ds						;save DS at time of interrupt
  1846 00000154 06                      			push	es						;save ES at time of interrupt
  1847 00000155 60                      			pushad							;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1848 00000156 89E5                    			mov	ebp,esp						;ebp --> [EDI]
  1849                                  ;
  1850                                  ;	Addressability to registers at the time of the interrupt is now established as:
  1851                                  ;
  1852                                  ;			[ebp+56]	eflags
  1853                                  ;			[ebp+52]	cs
  1854                                  ;			[ebp+48]	eip
  1855                                  ;			[ebp+44]	interrupt number (0-31)
  1856                                  ;			[ebp+40]	error message address
  1857                                  ;			[ebp+36]	ds
  1858                                  ;			[ebp+32]	es
  1859                                  ;			[ebp+28]	eax
  1860                                  ;			[ebp+24]	ecx
  1861                                  ;			[ebp+20]	edx
  1862                                  ;			[ebp+16]	ebx
  1863                                  ;			[ebp+12]	esp
  1864                                  ;			[ebp+8]		ebp
  1865                                  ;			[ebp+4]		esi
  1866                                  ;			[ebp+0]		edi
  1867                                  ;
  1868 00000158 0E                      			push	cs						;load code selector ...
  1869 00000159 1F                      			pop	ds						;... into DS
  1870 0000015A 6A20                    			push	ESELCGA						;load CGA memory selector ...
  1871 0000015C 07                      			pop	es						;... into ES
  1872                                  ;
  1873                                  ;	Display the interrupt report boundary box
  1874                                  ;
  1875 0000015D B10D                    			mov	cl,13						;column
  1876 0000015F B506                    			mov	ch,6						;row
  1877 00000161 B232                    			mov	dl,50						;width
  1878 00000163 B608                    			mov	dh,8						;height
  1879 00000165 B707                    			mov	bh,07h						;attribute
  1880 00000167 E84C030000              			call	DrawTextDialogBox				;draw text dialog box
  1881                                  ;
  1882                                  ;	Display the report header
  1883                                  ;
  1884 0000016C B10F                    			mov	cl,15						;column
  1885 0000016E B507                    			mov	ch,7						;row
  1886 00000170 BE[0F040000]            			mov	esi,czIntHeader					;interrupt message header
  1887 00000175 E8930E0000              			call	SetConsoleString				;draw text string
  1888                                  ;
  1889                                  ;	Display the interrupt description label
  1890                                  ;
  1891 0000017A B10F                    			mov	cl,15						;column
  1892 0000017C B508                    			mov	ch,8						;row
  1893 0000017E BE[3E040000]            			mov	esi,czIntLabel					;interrupt message description lead
  1894 00000183 E8850E0000              			call	SetConsoleString				;draw text string
  1895                                  ;
  1896                                  ;	Display the interrupt number
  1897                                  ;
  1898 00000188 8B452C                  			mov	eax,[ebp+44]					;interrupt number
  1899 0000018B B11A                    			mov	cl,26						;column
  1900 0000018D B508                    			mov	ch,8						;row
  1901 0000018F E8AD0C0000              			call	PutConsoleHexByte				;draw ASCII hex byte
  1902                                  ;
  1903                                  ;	Display the interrupt name
  1904                                  ;
  1905 00000194 B11D                    			mov	cl,29						;column
  1906 00000196 B508                    			mov	ch,8						;row
  1907 00000198 8B7528                  			mov	esi,[ebp+40]					;interrupt-specific message
  1908 0000019B E86D0E0000              			call	SetConsoleString				;display interrupt description
  1909                                  ;
  1910                                  ;	Display the register values header
  1911                                  ;
  1912 000001A0 B10F                    			mov	cl,15						;column
  1913 000001A2 B50A                    			mov	ch,10						;row
  1914 000001A4 BE[4A040000]            			mov	esi,czIntRegsHeader				;interrupt registers header
  1915 000001A9 E85F0E0000              			call	SetConsoleString				;draw text string
  1916                                  ;
  1917                                  ;	Display the EAX register label and value
  1918                                  ;
  1919 000001AE B10F                    			mov	cl,15						;column
  1920 000001B0 B50B                    			mov	ch,11						;row
  1921 000001B2 BE[72040000]            			mov	esi,czIntEAX					;register EAX label
  1922 000001B7 E8510E0000              			call	SetConsoleString				;draw label
  1923 000001BC 8B451C                  			mov	eax,[ebp+28]					;EAX value at interrupt
  1924 000001BF B113                    			mov	cl,19						;column
  1925 000001C1 B50B                    			mov	ch,11						;row
  1926 000001C3 E8590C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1927                                  ;
  1928                                  ;	Display the ECX register label and value
  1929                                  ;
  1930 000001C8 B10F                    			mov	cl,15						;column
  1931 000001CA B50C                    			mov	ch,12						;row
  1932 000001CC BE[77040000]            			mov	esi,czIntECX					;label
  1933 000001D1 E8370E0000              			call	SetConsoleString				;draw label
  1934 000001D6 8B4518                  			mov	eax,[ebp+24]					;ECX value at interrupt
  1935 000001D9 B113                    			mov	cl,19						;column
  1936 000001DB B50C                    			mov	ch,12						;row
  1937 000001DD E83F0C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1938                                  ;
  1939                                  ;	Display the EDX register label and value
  1940                                  ;
  1941 000001E2 B10F                    			mov	cl,15						;column
  1942 000001E4 B50D                    			mov	ch,13						;row
  1943 000001E6 BE[7C040000]            			mov	esi,czIntEDX					;label
  1944 000001EB E81D0E0000              			call	SetConsoleString				;draw label
  1945 000001F0 8B4514                  			mov	eax,[ebp+20]					;EDX value at interrupt
  1946 000001F3 B113                    			mov	cl,19						;column
  1947 000001F5 B50D                    			mov	ch,13						;row
  1948 000001F7 E8250C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1949                                  ;
  1950                                  ;	Display the EBX register label and value
  1951                                  ;
  1952 000001FC B10F                    			mov	cl,15						;column
  1953 000001FE B50E                    			mov	ch,14						;row
  1954 00000200 BE[81040000]            			mov	esi,czIntEBX					;label
  1955 00000205 E8030E0000              			call	SetConsoleString				;draw label
  1956 0000020A 8B4510                  			mov	eax,[ebp+16]					;EBX value at interrupt
  1957 0000020D B113                    			mov	cl,19						;column
  1958 0000020F B50E                    			mov	ch,14						;row
  1959 00000211 E80B0C0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1960                                  ;
  1961                                  ;	Display the ESI register label and value
  1962                                  ;
  1963 00000216 B11D                    			mov	cl,29						;column
  1964 00000218 B50B                    			mov	ch,11						;row
  1965 0000021A BE[86040000]            			mov	esi,czIntESI					;label
  1966 0000021F E8E90D0000              			call	SetConsoleString				;draw label
  1967 00000224 8B4504                  			mov	eax,[ebp+4]					;ESI
  1968 00000227 B121                    			mov	cl,33						;column
  1969 00000229 B50B                    			mov	ch,11						;row
  1970 0000022B E8F10B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1971                                  ;
  1972                                  ;	Display the EDI register label and value
  1973                                  ;
  1974 00000230 B11D                    			mov	cl,29						;column
  1975 00000232 B50C                    			mov	ch,12						;row
  1976 00000234 BE[8B040000]            			mov	esi,czIntEDI					;label
  1977 00000239 E8CF0D0000              			call	SetConsoleString				;draw label
  1978 0000023E 8B4500                  			mov	eax,[ebp+0]					;EDI
  1979 00000241 B121                    			mov	cl,33						;column
  1980 00000243 B50C                    			mov	ch,12						;row
  1981 00000245 E8D70B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1982                                  ;
  1983                                  ;	Display the EBP register label and value
  1984                                  ;
  1985 0000024A B11D                    			mov	cl,29						;column
  1986 0000024C B50D                    			mov	ch,13						;row
  1987 0000024E BE[90040000]            			mov	esi,czIntEBP					;label
  1988 00000253 E8B50D0000              			call	SetConsoleString				;draw label
  1989 00000258 8B4508                  			mov	eax,[ebp+8]					;EBP
  1990 0000025B B121                    			mov	cl,33						;column
  1991 0000025D B50D                    			mov	ch,13						;row
  1992 0000025F E8BD0B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1993                                  ;
  1994                                  ;	Display the DS register label and value
  1995                                  ;
  1996 00000264 B12A                    			mov	cl,42						;column
  1997 00000266 B50B                    			mov	ch,11						;row
  1998 00000268 BE[9A040000]            			mov	esi,czIntDS					;label
  1999 0000026D E89B0D0000              			call	SetConsoleString				;draw label
  2000 00000272 31C0                    			xor	eax,eax						;zero register
  2001 00000274 668B4524                			mov	ax,[ebp+36]					;DS
  2002 00000278 B12E                    			mov	cl,46						;column
  2003 0000027A B50B                    			mov	ch,11						;row
  2004 0000027C E8B00B0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2005                                  ;
  2006                                  ;	Display the ES register label and value
  2007                                  ;
  2008 00000281 B12A                    			mov	cl,42						;column
  2009 00000283 B50C                    			mov	ch,12						;row
  2010 00000285 BE[9F040000]            			mov	esi,czIntES					;label
  2011 0000028A E87E0D0000              			call	SetConsoleString				;draw label
  2012 0000028F 31C0                    			xor	eax,eax						;zero register
  2013 00000291 668B4520                			mov	ax,[ebp+32]					;ES
  2014 00000295 B12E                    			mov	cl,46						;column
  2015 00000297 B50C                    			mov	ch,12						;row
  2016 00000299 E8930B0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2017                                  ;
  2018                                  ;	Display the SS register label and value
  2019                                  ;
  2020 0000029E B12A                    			mov	cl,42						;column
  2021 000002A0 B50D                    			mov	ch,13						;row
  2022 000002A2 BE[A4040000]            			mov	esi,czIntSS					;label
  2023 000002A7 E8610D0000              			call	SetConsoleString				;draw label
  2024 000002AC 31C0                    			xor	eax,eax						;zero register
  2025 000002AE 668CD0                  			mov	ax,ss						;SS
  2026 000002B1 B12E                    			mov	cl,46						;column
  2027 000002B3 B50D                    			mov	ch,13						;row
  2028 000002B5 E8770B0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2029                                  ;
  2030                                  ;	Display the CS register lable and value
  2031                                  ;
  2032 000002BA B12A                    			mov	cl,42						;column
  2033 000002BC B50E                    			mov	ch,14						;row
  2034 000002BE BE[A9040000]            			mov	esi,czIntCS					;label
  2035 000002C3 E8450D0000              			call	SetConsoleString				;draw label
  2036 000002C8 31C0                    			xor	eax,eax						;zero register
  2037 000002CA 668B4534                			mov	ax,[ebp+52]					;CS
  2038 000002CE B12E                    			mov	cl,46						;column
  2039 000002D0 B50E                    			mov	ch,14						;row
  2040 000002D2 E85A0B0000              			call	PutConsoleHexWord				;draw ASCII hex word
  2041                                  ;
  2042                                  ;	Display the EFLAGS register label and value
  2043                                  ;
  2044 000002D7 B133                    			mov	cl,51						;column
  2045 000002D9 B50B                    			mov	ch,11						;row
  2046 000002DB BE[AE040000]            			mov	esi,czIntEFLAGS					;label
  2047 000002E0 E8280D0000              			call	SetConsoleString				;draw label
  2048 000002E5 8B4538                  			mov	eax,[ebp+56]					;EFLAGS
  2049 000002E8 B137                    			mov	cl,55						;column
  2050 000002EA B50B                    			mov	ch,11						;row
  2051 000002EC E8300B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2052                                  ;
  2053                                  ;	Display the ESP register label and value
  2054                                  ;
  2055 000002F1 B133                    			mov	cl,51						;column
  2056 000002F3 B50D                    			mov	ch,13						;row
  2057 000002F5 BE[95040000]            			mov	esi,czIntESP					;label
  2058 000002FA E80E0D0000              			call	SetConsoleString				;draw label
  2059 000002FF 8B450C                  			mov	eax,[ebp+12]					;ESP
  2060 00000302 B137                    			mov	cl,55						;column
  2061 00000304 B50D                    			mov	ch,13						;row
  2062 00000306 E8160B0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;	Display the EIP register label and value
  2065                                  ;
  2066 0000030B B133                    			mov	cl,51						;column
  2067 0000030D B50E                    			mov	ch,14						;row
  2068 0000030F BE[B3040000]            			mov	esi,czIntEIP					;label
  2069 00000314 E8F40C0000              			call	SetConsoleString				;draw label
  2070 00000319 8B4530                  			mov	eax,[ebp+48]					;EIP
  2071 0000031C B137                    			mov	cl,55						;column
  2072 0000031E B50E                    			mov	ch,14						;row
  2073 00000320 E8FC0A0000              			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2074                                  ;
  2075                                  ;	Halt and loop until reset
  2076                                  ;
  2077 00000325 FB                      .10			sti							;enable maskable interrupts
  2078 00000326 F4                      			hlt							;halt processor
  2079 00000327 EBFC                    			jmp	.10						;resume on interrupt
  2080                                  ;-----------------------------------------------------------------------------------------------------------------------
  2081                                  ;
  2082                                  ;	Processor Interrupt Name Strings
  2083                                  ;
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085 00000329 4469766973696F6E20-     czIntDivideByZero	db	"Division by zero",0
  2085 00000332 6279207A65726F00   
  2086 0000033A 53696E676C65207374-     czIntSingleStep		db	"Single step",0
  2086 00000343 657000             
  2087 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable	db	"Non-maskable interrupt",0
  2087 0000034F 626C6520696E746572-
  2087 00000358 7275707400         
  2088 0000035D 427265616B00            czIntBreak		db	"Break",0
  2089 00000363 496E746F00              czIntInto		db	"Into",0
  2090 00000368 426F756E647300          czIntBounds		db	"Bounds",0
  2091 0000036F 426164204F70657261-     czIntBadOpCode		db	"Bad Operation Code",0
  2091 00000378 74696F6E20436F6465-
  2091 00000381 00                 
  2092 00000382 4E6F20436F70726F63-     czIntNoCoprocessor	db	"No Coprocessor",0
  2092 0000038B 6573736F7200       
  2093 00000391 446F75626C65204661-     czIntDoubleFault	db	"Double Fault",0
  2093 0000039A 756C7400           
  2094 0000039E 4F706572616E6400        czIntOperand		db	"Operand",0
  2095 000003A6 426164205461736B20-     czIntBadTSS		db	"Bad Task State Segment",0
  2095 000003AF 537461746520536567-
  2095 000003B8 6D656E7400         
  2096 000003BD 4E6F74205072657365-     czIntNotPresent		db	"Not Present",0
  2096 000003C6 6E7400             
  2097 000003C9 537461636B204C696D-     czIntStackLimit		db	"Stack Limit",0
  2097 000003D2 697400             
  2098 000003D5 47656E6572616C2050-     czIntProtection		db	"General Protection Fault",0
  2098 000003DE 726F74656374696F6E-
  2098 000003E7 204661756C7400     
  2099 000003EE 436F70726F63657373-     czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  2099 000003F7 6F722043616C63756C-
  2099 00000400 6174696F6E00       
  2100 00000406 526573657276656400      czIntReserved		db	"Reserved",0
  2101                                  ;-----------------------------------------------------------------------------------------------------------------------
  2102                                  ;
  2103                                  ;	Processor Interrupt Handling Strings
  2104                                  ;
  2105                                  ;-----------------------------------------------------------------------------------------------------------------------
  2106 0000040F 416E20756E68616E64-     czIntHeader		db	"An unhandled processor interrupt has occurred:",0
  2106 00000418 6C65642070726F6365-
  2106 00000421 73736F7220696E7465-
  2106 0000042A 727275707420686173-
  2106 00000433 206F63637572726564-
  2106 0000043C 3A00               
  2107 0000043E 496E74657272757074-     czIntLabel		db	"Interrupt #",0
  2107 00000447 202300             
  2108 0000044A 526567697374657273-     czIntRegsHeader		db	"Registers at the time of the interrupt:",0
  2108 00000453 206174207468652074-
  2108 0000045C 696D65206F66207468-
  2108 00000465 6520696E7465727275-
  2108 0000046E 70743A00           
  2109 00000472 4541583A00              czIntEAX		db	"EAX:",0
  2110 00000477 4543583A00              czIntECX		db	"ECX:",0
  2111 0000047C 4544583A00              czIntEDX		db	"EDX:",0
  2112 00000481 4542583A00              czIntEBX		db	"EBX:",0
  2113 00000486 4553493A00              czIntESI		db	"ESI:",0
  2114 0000048B 4544493A00              czIntEDI		db	"EDI:",0
  2115 00000490 4542503A00              czIntEBP		db	"EBP:",0
  2116 00000495 4553503A00              czIntESP		db	"ESP:",0
  2117 0000049A 2044533A00              czIntDS			db	" DS:",0
  2118 0000049F 2045533A00              czIntES			db	" ES:",0
  2119 000004A4 2053533A00              czIntSS			db	" SS:",0
  2120 000004A9 2043533A00              czIntCS			db	" CS:",0
  2121 000004AE 464C473A00              czIntEFLAGS		db	"FLG:",0
  2122 000004B3 4549503A00              czIntEIP		db	"EIP:",0
  2123                                  ;-----------------------------------------------------------------------------------------------------------------------
  2124                                  ;
  2125                                  ;	Routine:	DrawTextDialogBox
  2126                                  ;
  2127                                  ;	Description:	This routine opens a text-mode dialog box with an ASCII border.
  2128                                  ;
  2129                                  ;	In:		CL	upper left column (0-79)
  2130                                  ;			CH	upper left row (0-24)
  2131                                  ;			DL	column width, excluding border
  2132                                  ;			DH	row height, excluding border
  2133                                  ;			BH	color attribute
  2134                                  ;
  2135                                  ;-----------------------------------------------------------------------------------------------------------------------
  2136 000004B8 51                      DrawTextDialogBox	push	ecx						;save non-volatile regs
  2137 000004B9 56                      			push	esi						;
  2138 000004BA 57                      			push	edi						;
  2139 000004BB 06                      			push	es						;
  2140 000004BC 6A20                    			push	ESELCGA						;load CGA selector ...
  2141 000004BE 07                      			pop	es						;... into ES
  2142                                  ;
  2143                                  ;	Compute target display offset
  2144                                  ;
  2145 000004BF 31C0                    			xor	eax,eax						;zero register
  2146 000004C1 88E8                    			mov	al,ch						;row
  2147 000004C3 B4A0                    			mov	ah,ECONROWBYTES					;mulitplicand
  2148 000004C5 F6E4                    			mul	ah						;row offset
  2149 000004C7 00C8                    			add	al,cl						;add column
  2150 000004C9 80D400                  			adc	ah,0						;add overflow
  2151 000004CC 00C8                    			add	al,cl						;add column
  2152 000004CE 80D400                  			adc	ah,0						;add overflow
  2153 000004D1 89C7                    			mov	edi,eax						;target row offset
  2154                                  ;
  2155                                  ;	Display top border row
  2156                                  ;
  2157 000004D3 57                      			push	edi						;save target row offset
  2158 000004D4 88FC                    			mov	ah,bh						;attribute
  2159 000004D6 B0DA                    			mov	al,EASCIIBORDSGLUPRLFT				;upper-left single border
  2160 000004D8 66AB                    			stosw							;display character and attribute
  2161 000004DA B0C4                    			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2162 000004DC 31C9                    			xor	ecx,ecx						;zero register
  2163 000004DE 88D1                    			mov	cl,dl						;width, excluding border
  2164 000004E0 F366AB                  			rep	stosw						;display horizontal border
  2165 000004E3 B0BF                    			mov	al,EASCIIBORDSGLUPRRGT				;upper-right single border
  2166 000004E5 66AB                    			stosw							;display character and attribute
  2167 000004E7 5F                      			pop	edi						;restore target row offset
  2168 000004E8 81C7A0000000            			add	edi,ECONROWBYTES				;next row
  2169                                  ;
  2170                                  ;	Display dialog box body rows
  2171                                  ;
  2172 000004EE 31C9                    			xor	ecx,ecx						;zero register
  2173 000004F0 88F1                    			mov	cl,dh						;height, excluding border
  2174 000004F2 51                      .10			push	ecx						;save remaining rows
  2175 000004F3 57                      			push	edi						;save target row offset
  2176 000004F4 88FC                    			mov	ah,bh						;attribute
  2177 000004F6 B0B3                    			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2178 000004F8 66AB                    			stosw							;display character and attribute
  2179 000004FA B020                    			mov	al,EASCIISPACE					;space
  2180 000004FC 31C9                    			xor	ecx,ecx						;zero register
  2181 000004FE 88D1                    			mov	cl,dl						;width, excluding border
  2182 00000500 F366AB                  			rep	stosw						;display row
  2183 00000503 B0B3                    			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2184 00000505 66AB                    			stosw							;display character and attribute
  2185 00000507 5F                      			pop	edi						;restore target row offset
  2186 00000508 81C7A0000000            			add	edi,ECONROWBYTES				;next row
  2187 0000050E 59                      			pop	ecx						;remaining rows
  2188 0000050F E2E1                    			loop	.10						;next row
  2189                                  ;
  2190                                  ;	Display bottom border row
  2191                                  ;
  2192 00000511 57                      			push	edi						;save target row offset
  2193 00000512 88FC                    			mov	ah,bh						;attribute
  2194 00000514 B0C0                    			mov	al,EASCIIBORDSGLLWRLFT				;lower-left single border
  2195 00000516 66AB                    			stosw							;display character and attribute
  2196 00000518 B0C4                    			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2197 0000051A 31C9                    			xor	ecx,ecx						;zero register
  2198 0000051C 88D1                    			mov	cl,dl						;width, excluding border
  2199 0000051E F366AB                  			rep	stosw						;display horizontal border
  2200 00000521 B0D9                    			mov	al,EASCIIBORDSGLLWRRGT				;lower-right single border
  2201 00000523 66AB                    			stosw							;display character and attribute
  2202 00000525 5F                      			pop	edi						;restore target row offset
  2203 00000526 81C7A0000000            			add	edi,ECONROWBYTES				;next row
  2204                                  ;
  2205                                  ;	Restore and return
  2206                                  ;
  2207 0000052C 07                      			pop	es						;restore non-volatile regs
  2208 0000052D 5F                      			pop	edi						;
  2209 0000052E 5E                      			pop	esi						;
  2210 0000052F 59                      			pop	ecx						;
  2211 00000530 C3                      			ret							;return
  2212                                  ;=======================================================================================================================
  2213                                  ;
  2214                                  ;	Hardware Device Interupts
  2215                                  ;
  2216                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2217                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2218                                  ;	(BX=2028h).
  2219                                  ;
  2220                                  ;=======================================================================================================================
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                  ;
  2223                                  ;	IRQ0	Clock Tick Interrupt
  2224                                  ;
  2225                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2226                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2227                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2228                                  ;
  2229                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2230                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2231                                  ;
  2232                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2233                                  ;	zero, the floppy disk motors are turned off.
  2234                                  ;
  2235                                  ;-----------------------------------------------------------------------------------------------------------------------
  2236                                  			menter	clocktick					;clock tick interrupt
  2236                              <1> ?%1 equ ($-$$)
  2237 00000531 50                      			push	eax						;save modified regs
  2238 00000532 52                      			push	edx						;
  2239 00000533 1E                      			push	ds						;
  2240                                  ;
  2241                                  ;	Update the clock tick count and the elapsed days as needed
  2242                                  ;
  2243 00000534 6A18                    			push	ESELDAT						;load OS data selector ...
  2244 00000536 1F                      			pop	ds						;... into data segment register
  2245 00000537 A16C040000              			mov	eax,[wdClockTicks]				;eax = clock ticks
  2246 0000053C 40                      			inc	eax						;increment clock ticks
  2247 0000053D 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  2248 00000542 7208                    			jb	irq0.10						;no, skip ahead
  2249 00000544 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  2250 0000054A 31C0                    			xor	eax,eax						;reset clock ticks
  2251 0000054C A36C040000              irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  2252                                  ;
  2253                                  ;	Decrement floppy disk motor timeout
  2254                                  ;
  2255 00000551 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  2256 00000558 741E                    			je	irq0.20						;yes, skip ahead
  2257 0000055A FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  2258 00000560 7516                    			jnz	irq0.20						;skip ahead if non-zero
  2259                                  ;
  2260                                  ;	Turn off the floppy disk motor if appropriate
  2261                                  ;
  2262 00000562 FB                      			sti							;enable maskable interrupts
  2263 00000563 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  2264 00000565 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  2265 00000567 EC                      			in	al,dx						;FDC main status byte
  2266 00000568 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  2267 0000056A 75F7                    			jnz	irq0.15						;wait while busy
  2268 0000056C B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  2269 0000056E A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  2270 00000573 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  2271 00000575 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  2272 00000577 EE                      			out	dx,al						;turn motor off
  2273                                  ;
  2274                                  ;	Signal the end of the hardware interrupt
  2275                                  ;
  2276 00000578 E8E00A0000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2277                                  ;
  2278                                  ;	Restore and return
  2279                                  ;
  2280 0000057D 1F                      			pop	ds						;restore modified regs
  2281 0000057E 5A                      			pop	edx						;
  2282 0000057F 58                      			pop	eax						;
  2283 00000580 CF                      			iretd							;return
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                  ;
  2286                                  ;	IRQ1	Keyboard Interrupt
  2287                                  ;
  2288                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2289                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2290                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2291                                  ;	ALL modified registers upon return.
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                  			menter	keyboard					;keyboard interrrupt
  2294                              <1> ?%1 equ ($-$$)
  2295 00000581 50                      			push	eax						;save non-volatile regs
  2296 00000582 53                      			push	ebx						;
  2297 00000583 51                      			push	ecx						;
  2298 00000584 56                      			push	esi						;
  2299 00000585 1E                      			push	ds						;
  2300 00000586 6A18                    			push	ESELDAT						;load OS data selector ...
  2301 00000588 1F                      			pop	ds						;... into data segment register
  2302 00000589 30C0                    			xor	al,al						;zero
  2303 0000058B A209080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  2304 00000590 A20A080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  2305 00000595 A20B080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  2306 0000059A A20C080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  2307 0000059F A20D080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  2308 000005A4 A20E080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  2309 000005A9 B020                    			mov	al,' '						;space
  2310 000005AB A20F080000              			mov	[wbConsoleChar],al				;set character to space
  2311 000005B0 B080                    			mov	al,EKEYFTIMEOUT					;controller timeout flag
  2312 000005B2 F6D0                    			not	al						;controller timeout mask
  2313 000005B4 200508080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  2314 000005BA 8A1D06080000            			mov	bl,[wbConsoleShift]				;shift flags
  2315 000005C0 8A3D07080000            			mov	bh,[wbConsoleLock]				;lock flags
  2316 000005C6 E8470B0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2317 000005CB 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  2318 000005D1 E460                    			in	al,EKEYBPORTDATA				;read scan code 0
  2319 000005D3 A209080000              			mov	[wbConsoleScan0],al				;save scan code 0
  2320 000005D8 88C4                    			mov	ah,al						;copy scan code 0
  2321 000005DA B002                    			mov	al,EKEYFSHIFTLEFT				;left shift flag
  2322 000005DC 80FC2A                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  2323 000005DF 0F84E0000000            			je	irq1.30						;yes, set flag
  2324 000005E5 80FCAA                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  2325 000005E8 0F84DB000000            			je	irq1.40						;yes, reset flag
  2326 000005EE B010                    			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  2327 000005F0 80FC36                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  2328 000005F3 0F84CC000000            			je	irq1.30						;yes, set flag
  2329 000005F9 80FCB6                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  2330 000005FC 0F84C7000000            			je	irq1.40						;yes, reset flag
  2331 00000602 B001                    			mov	al,EKEYFCTRLLEFT				;left control flag
  2332 00000604 80FC1D                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2333 00000607 0F84B8000000            			je	irq1.30						;yes, set flag
  2334 0000060D 80FC9D                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2335 00000610 0F84B3000000            			je	irq1.40						;yes, reset flag
  2336 00000616 B004                    			mov	al,EKEYFALTLEFT					;left alt flag
  2337 00000618 80FC38                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2338 0000061B 0F84A4000000            			je	irq1.30						;yes, set flag
  2339 00000621 80FCB8                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2340 00000624 0F849F000000            			je	irq1.40						;yes, reset flag
  2341 0000062A B004                    			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  2342 0000062C 80FC3A                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  2343 0000062F 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  2344 00000635 B002                    			mov	al,EKEYFLOCKNUM					;num-lock flag
  2345 00000637 80FC45                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  2346 0000063A 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  2347 00000640 B001                    			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  2348 00000642 80FC46                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  2349 00000645 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  2350 0000064B 80FCE0                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  2351 0000064E 0F8598000000            			jne	irq1.70 					;no, skip ahead
  2352 00000654 E8B90A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2353 00000659 0F8465010000            			jz	irq1.140					;yes, skip ahead
  2354 0000065F E460                    			in	al,EKEYBPORTDATA				;read scan code 1
  2355 00000661 A20A080000              			mov	[wbConsoleScan1],al				;save scan code 1
  2356 00000666 88C4                    			mov	ah,al						;copy scan code 1
  2357 00000668 B008                    			mov	al,EKEYFCTRLRIGHT				;right control flag
  2358 0000066A 80FC1D                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2359 0000066D 7456                    			je	irq1.30						;yes, set flag
  2360 0000066F 80FC9D                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2361 00000672 7455                    			je	irq1.40						;yes, reset flag
  2362 00000674 B020                    			mov	al,EKEYFALTRIGHT				;right alt flag
  2363 00000676 80FC38                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2364 00000679 744A                    			je	irq1.30						;yes, set flag
  2365 0000067B 80FCB8                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2366 0000067E 7449                    			je	irq1.40						;yes, reset flag
  2367 00000680 80FC35                  			cmp	ah,EKEYBSLASH					;slash down code?
  2368 00000683 0F84CB000000            			je	irq1.80						;yes, skip ahead
  2369 00000689 80FCB5                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  2370 0000068C 0F84C2000000            			je	irq1.80						;yes, skip ahead
  2371 00000692 80FC2A                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  2372 00000695 7405                    			je	irq1.10						;yes, continue
  2373 00000697 80FCB7                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  2374 0000069A 7524                    			jne	irq1.20						;no, skip ahead
  2375 0000069C E8710A0000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  2376 000006A1 0F841D010000            			jz	irq1.140					;yes, skip ahead
  2377 000006A7 E460                    			in	al,EKEYBPORTDATA				;read scan code 2
  2378 000006A9 A20B080000              			mov	[wbConsoleScan2],al				;save scan code 2
  2379 000006AE E85F0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2380 000006B3 0F840B010000            			jz	irq1.140					;yes, skip ahead
  2381 000006B9 E460                    			in	al,EKEYBPORTDATA				;read scan code 3
  2382 000006BB A20C080000              			mov	[wbConsoleScan3],al				;read scan code 3
  2383 000006C0 E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  2384 000006C5 08C3                    irq1.30			or	bl,al						;set shift flag
  2385 000006C7 EB0D                    			jmp	irq1.60						;skip ahead
  2386 000006C9 F6D0                    irq1.40			not	al						;convert flag to mask
  2387 000006CB 20C3                    			and	bl,al						;reset shift flag
  2388 000006CD EB07                    			jmp	irq1.60						;skip ahead
  2389 000006CF 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  2390 000006D1 E80D0A0000              			call	SetKeyboardLamps				;update keyboard lamps
  2391 000006D6 881D06080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  2392 000006DC 883D07080000            			mov	[wbConsoleLock],bh				;save lock flags
  2393 000006E2 E848060000              			call	PutConsoleOIAShift				;update OIA indicators
  2394 000006E7 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  2395 000006EC 80FCE1                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2396 000006EF 7563                    			jne	irq1.80						;no continue
  2397 000006F1 E81C0A0000              			call	WaitForKeyOutBuffer				;controller timeout?
  2398 000006F6 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  2399 000006FC E460                    			in	al,EKEYBPORTDATA				;read scan code 1
  2400 000006FE A20A080000              			mov	[wbConsoleScan1],al				;save scan code 1
  2401 00000703 88C4                    			mov	ah,al						;copy scan code 1
  2402 00000705 80FC1D                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2403 00000708 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  2404 0000070E E8FF090000              			call	WaitForKeyOutBuffer				;controller timeout?
  2405 00000713 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  2406 00000719 E460                    			in	al,EKEYBPORTDATA				;read scan code 2
  2407 0000071B A20B080000              			mov	[wbConsoleScan2],al				;save scan code 2
  2408 00000720 E8ED090000              			call	WaitForKeyOutBuffer				;controller timeout?
  2409 00000725 0F8499000000            			jz	irq1.140					;yes, skip ahead
  2410 0000072B E460                    			in	al,EKEYBPORTDATA				;read scan code 3
  2411 0000072D A20C080000              			mov	[wbConsoleScan3],al				;save scan code 3
  2412 00000732 E8DB090000              			call	WaitForKeyOutBuffer				;controller timeout?
  2413 00000737 0F8487000000            			jz	irq1.140					;yes, skip ahead
  2414 0000073D E460                    			in	al,EKEYBPORTDATA				;read scan code 4
  2415 0000073F A20D080000              			mov	[wbConsoleScan4],al				;save scan code 4
  2416 00000744 E8C9090000              			call	WaitForKeyOutBuffer				;controller timeout?
  2417 00000749 7479                    			jz	irq1.140					;yes, skip ahead
  2418 0000074B E460                    			in	al,EKEYBPORTDATA				;read scan code 5
  2419 0000074D A20E080000              			mov	[wbConsoleScan5],al				;save scan code 5
  2420 00000752 EB78                    			jmp	irq1.150					;continue
  2421 00000754 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  2422 00000756 F6C480                  			test	ah,EKEYBUP					;release code?
  2423 00000759 7567                    			jnz	irq1.130					;yes, skip ahead
  2424 0000075B BE[DC070000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  2425 00000760 F6C312                  			test	bl,EKEYFSHIFT					;either shift key down?
  2426 00000763 7405                    			jz	irq1.90						;no, skip ahead
  2427 00000765 BE[5C080000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  2428 0000076A 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  2429 0000076D 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  2430 00000771 F6C704                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2431 00000774 7411                    			jz	irq1.100					;no skip ahead
  2432 00000776 88C1                    			mov	cl,al						;copy ASCII code
  2433 00000778 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2434 0000077B 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2435 0000077E 7207                    			jb	irq1.100					;yes, skip ahead
  2436 00000780 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2437 00000783 7702                    			ja	irq1.100					;yes, skip ahead
  2438 00000785 3420                    			xor	al,EASCIICASE					;switch case
  2439 00000787 A20F080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2440 0000078C BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2441 00000791 F6C480                  			test	ah,EKEYBUP					;release scan-code?
  2442 00000794 7405                    			jz	irq1.120					;no, skip ahead
  2443 00000796 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  2444 0000079B 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  2445 000007A0 09C2                    			or	edx,eax						;msg id and codes
  2446 000007A2 31C9                    			xor	ecx,ecx						;null param
  2447 000007A4 50                      			push	eax						;save codes
  2448 000007A5 E89F070000              			call	PutMessage					;put message to console
  2449 000007AA 58                      			pop	eax						;restore codes
  2450 000007AB 84C0                    			test	al,al						;ASCII translation?
  2451 000007AD 7413                    			jz	irq1.130					;no, skip ahead
  2452 000007AF BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  2453 000007B4 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  2454 000007B9 09C2                    			or	edx,eax						;msg id and codes
  2455 000007BB 31C9                    			xor	ecx,ecx						;null param
  2456 000007BD E887070000              			call	PutMessage					;put message to console
  2457 000007C2 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  2458 000007C4 B080                    irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2459 000007C6 080508080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  2460 000007CC E8F8050000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  2461 000007D1 E887080000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2462 000007D6 1F                      			pop	ds						;restore non-volatile regs
  2463 000007D7 5E                      			pop	esi						;
  2464 000007D8 59                      			pop	ecx						;
  2465 000007D9 5B                      			pop	ebx						;
  2466 000007DA 58                      			pop	eax						;
  2467 000007DB CF                      			iretd							;return
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                  ;	Scan-Code to ASCII Translation Tables
  2470                                  ;-----------------------------------------------------------------------------------------------------------------------
  2471 000007DC 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2472 000007E4 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2473 000007EC 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2474 000007F4 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2475 000007FC 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2476 00000804 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2477 0000080C 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2478 00000814 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2479 0000081C 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2480 00000824 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2481 0000082C 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2482 00000834 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2483 0000083C 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2484 00000844 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2485 0000084C 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2486 00000854 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2487 0000085C 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2488 00000864 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2489 0000086C 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2490 00000874 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2491 0000087C 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2492 00000884 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2493 0000088C 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2494 00000894 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2495 0000089C 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2496 000008A4 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2497 000008AC 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2498 000008B4 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2499 000008BC 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2500 000008C4 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2501 000008CC 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2502 000008D4 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2503                                  ;-----------------------------------------------------------------------------------------------------------------------
  2504                                  ;
  2505                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  			menter	iochannel					;secondary 8259A cascade
  2508                              <1> ?%1 equ ($-$$)
  2509 000008DC 50                      			push	eax						;save modified regs
  2510 000008DD EB3F                    			jmp	hwint						;end interrupt and return
  2511                                  ;-----------------------------------------------------------------------------------------------------------------------
  2512                                  ;
  2513                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2514                                  ;
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516                                  			menter	com2						;serial port 2 interrupt
  2516                              <1> ?%1 equ ($-$$)
  2517 000008DF 50                      			push	eax						;save modified regs
  2518 000008E0 EB3C                    			jmp	hwint						;end interrupt and return
  2519                                  ;-----------------------------------------------------------------------------------------------------------------------
  2520                                  ;
  2521                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2522                                  ;
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  			menter	com1						;serial port 1 interrupt
  2524                              <1> ?%1 equ ($-$$)
  2525 000008E2 50                      			push	eax						;save modified regs
  2526 000008E3 EB39                    			jmp	hwint						;end interrupt and return
  2527                                  ;-----------------------------------------------------------------------------------------------------------------------
  2528                                  ;
  2529                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2530                                  ;
  2531                                  ;-----------------------------------------------------------------------------------------------------------------------
  2532                                  			menter	lpt2						;parallel port 2 interrupt
  2532                              <1> ?%1 equ ($-$$)
  2533 000008E5 50                      			push	eax						;save modified regs
  2534 000008E6 EB36                    			jmp	hwint						;end interrupt and return
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                  ;
  2537                                  ;	IRQ6	Diskette Hardware Interrupt
  2538                                  ;
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  			menter	diskette					;floppy disk interrupt
  2540                              <1> ?%1 equ ($-$$)
  2541 000008E8 50                      			push	eax						;save non-volatile regs
  2542 000008E9 1E                      			push	ds						;
  2543 000008EA 6A18                    			push	ESELDAT						;load OS data selector ...
  2544 000008EC 1F                      			pop	ds						;... into DS register
  2545 000008ED A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2546 000008F2 0C80                    			or	al,10000000b					;set IRQ flag
  2547 000008F4 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  2548 000008F9 1F                      			pop	ds						;restore non-volatile regs
  2549 000008FA EB22                    			jmp	hwint						;end primary PIC interrupt
  2550                                  ;-----------------------------------------------------------------------------------------------------------------------
  2551                                  ;
  2552                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2553                                  ;
  2554                                  ;-----------------------------------------------------------------------------------------------------------------------
  2555                                  			menter	lpt1						;parallel port 1 interrupt
  2555                              <1> ?%1 equ ($-$$)
  2556 000008FC 50                      			push	eax						;save modified regs
  2557 000008FD EB1F                    			jmp	hwint						;end interrupt and return
  2558                                  ;-----------------------------------------------------------------------------------------------------------------------
  2559                                  ;
  2560                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2561                                  ;
  2562                                  ;-----------------------------------------------------------------------------------------------------------------------
  2563                                  			menter	rtclock						;real-time clock interrupt
  2563                              <1> ?%1 equ ($-$$)
  2564 000008FF 50                      			push	eax						;save modified regs
  2565 00000900 EB15                    			jmp	hwwint						;end interrupt and return
  2566                                  ;-----------------------------------------------------------------------------------------------------------------------
  2567                                  ;
  2568                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2569                                  ;
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  			menter	retrace						;CGA vertical retrace interrupt
  2571                              <1> ?%1 equ ($-$$)
  2572 00000902 50                      			push	eax						;save modified regs
  2573 00000903 EB12                    			jmp	hwwint						;end interrupt and return
  2574                                  ;-----------------------------------------------------------------------------------------------------------------------
  2575                                  ;
  2576                                  ;	IRQ10	Reserved Hardware Interrupt
  2577                                  ;
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  			menter	irq10						;reserved
  2579                              <1> ?%1 equ ($-$$)
  2580 00000905 50                      			push	eax						;save modified regs
  2581 00000906 EB0F                    			jmp	hwwint						;end interrupt and return
  2582                                  ;-----------------------------------------------------------------------------------------------------------------------
  2583                                  ;
  2584                                  ;	IRQ11	Reserved Hardware Interrupt
  2585                                  ;
  2586                                  ;-----------------------------------------------------------------------------------------------------------------------
  2587                                  			menter	irq11						;reserved
  2587                              <1> ?%1 equ ($-$$)
  2588 00000908 50                      			push	eax						;save modified regs
  2589 00000909 EB0C                    			jmp	hwwint						;end interrupt and return
  2590                                  ;-----------------------------------------------------------------------------------------------------------------------
  2591                                  ;
  2592                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2593                                  ;
  2594                                  ;-----------------------------------------------------------------------------------------------------------------------
  2595                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2595                              <1> ?%1 equ ($-$$)
  2596 0000090B 50                      			push	eax						;save modified regs
  2597 0000090C EB09                    			jmp	hwwint						;end interrupt and return
  2598                                  ;-----------------------------------------------------------------------------------------------------------------------
  2599                                  ;
  2600                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2601                                  ;
  2602                                  ;-----------------------------------------------------------------------------------------------------------------------
  2603                                  			menter	coprocessor					;coprocessor interrupt
  2603                              <1> ?%1 equ ($-$$)
  2604 0000090E 50                      			push	eax						;save modified regs
  2605 0000090F EB06                    			jmp	hwwint						;end interrupt and return
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                  ;
  2608                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2609                                  ;
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  			menter	fixeddisk					;fixed disk interrupt
  2611                              <1> ?%1 equ ($-$$)
  2612 00000911 50                      			push	eax						;save modified regs
  2613 00000912 EB03                    			jmp	hwwint						;end interrupt and return
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615                                  ;
  2616                                  ;	IRQ15	Reserved Hardware Interrupt
  2617                                  ;
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                  			menter	irq15						;reserved
  2619                              <1> ?%1 equ ($-$$)
  2620 00000914 50                      			push	eax						;save modified regs
  2621 00000915 EB00                    			jmp	hwwint						;end interrupt and return
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                  ;
  2624                                  ;	Exit from hardware interrupt
  2625                                  ;
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627 00000917 E847070000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2628 0000091C EB05                    			jmp	hwint90						;skip ahead
  2629 0000091E E83A070000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2630 00000923 58                      hwint90			pop	eax						;restore modified regs
  2631 00000924 CF                      			iretd							;return from interrupt
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                  ;
  2634                                  ;	INT 30h Operating System Software Service Interrupt
  2635                                  ;
  2636                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2637                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2638                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2639                                  ;	the entry address of the specific function from a table.
  2640                                  ;
  2641                                  ;-----------------------------------------------------------------------------------------------------------------------
  2642                                  			menter	svc
  2642                              <1> ?%1 equ ($-$$)
  2643 00000925 3C17                    			cmp	al,maxtsvc					;is our function out of range?
  2644 00000927 730D                    			jae	svc90						;yes, skip ahead
  2645 00000929 0FB6C0                  			movzx	eax,al						;function
  2646 0000092C C1E002                  			shl	eax,2						;offset into table
  2647 0000092F 2EFF90[37090000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  2648 00000936 CF                      svc90			iretd							;return from interrupt
  2649                                  ;-----------------------------------------------------------------------------------------------------------------------
  2650                                  ;
  2651                                  ;	Service Request Table
  2652                                  ;
  2653                                  ;
  2654                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2655                                  ;
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2657                              <1> tsvc :
  2657                              <1> e%1 equ ($-tsvc)/4
  2657 00000937 [A60F0000]          <1>  dd %1
  2658                                  			tsvce	CompareMemory					;compare memory
  2658                              <1> e%1 equ ($-tsvc)/4
  2658 0000093B [D20B0000]          <1>  dd %1
  2659                                  			tsvce	GetConsoleString				;get string input
  2659                              <1> e%1 equ ($-tsvc)/4
  2659 0000093F [1C0C0000]          <1>  dd %1
  2660                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2660                              <1> e%1 equ ($-tsvc)/4
  2660 00000943 [2B0F0000]          <1>  dd %1
  2661                                  			tsvce	IsLeapYear					;return ecx=1 if leap year
  2661                              <1> e%1 equ ($-tsvc)/4
  2661 00000947 [A1090000]          <1>  dd %1
  2662                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2662                              <1> e%1 equ ($-tsvc)/4
  2662 0000094B [33100000]          <1>  dd %1
  2663                                  			tsvce	PutConsoleString				;tty output asciiz string
  2663                              <1> e%1 equ ($-tsvc)/4
  2663 0000094F [EF0B0000]          <1>  dd %1
  2664                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2664                              <1> e%1 equ ($-tsvc)/4
  2664 00000953 [BC090000]          <1>  dd %1
  2665                                  			tsvce	PutDayString					;put DD string
  2665                              <1> e%1 equ ($-tsvc)/4
  2665 00000957 [FD090000]          <1>  dd %1
  2666                                  			tsvce	PutHourString					;put hh string
  2666                              <1> e%1 equ ($-tsvc)/4
  2666 0000095B [0B0A0000]          <1>  dd %1
  2667                                  			tsvce	PutMinuteString					;put mm string
  2667                              <1> e%1 equ ($-tsvc)/4
  2667 0000095F [190A0000]          <1>  dd %1
  2668                                  			tsvce	PutMonthString					;put MM string
  2668                              <1> e%1 equ ($-tsvc)/4
  2668 00000963 [270A0000]          <1>  dd %1
  2669                                  			tsvce	PutMonthNameString				;put name(MM) string
  2669                              <1> e%1 equ ($-tsvc)/4
  2669 00000967 [350A0000]          <1>  dd %1
  2670                                  			tsvce	PutSecondString					;put ss string
  2670                              <1> e%1 equ ($-tsvc)/4
  2670 0000096B [590A0000]          <1>  dd %1
  2671                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2671                              <1> e%1 equ ($-tsvc)/4
  2671 0000096F [660A0000]          <1>  dd %1
  2672                                  			tsvce	PutWeekdayString				;put weekday string
  2672                              <1> e%1 equ ($-tsvc)/4
  2672 00000973 [9B0A0000]          <1>  dd %1
  2673                                  			tsvce	PutWeekdayNameString				;put name(weekday) string
  2673                              <1> e%1 equ ($-tsvc)/4
  2673 00000977 [A90A0000]          <1>  dd %1
  2674                                  			tsvce	PutYearString					;put YYYY string
  2674                              <1> e%1 equ ($-tsvc)/4
  2674 0000097B [CC0A0000]          <1>  dd %1
  2675                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2675                              <1> e%1 equ ($-tsvc)/4
  2675 0000097F [69100000]          <1>  dd %1
  2676                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2676                              <1> e%1 equ ($-tsvc)/4
  2676 00000983 [D4100000]          <1>  dd %1
  2677                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2677                              <1> e%1 equ ($-tsvc)/4
  2677 00000987 [670E0000]          <1>  dd %1
  2678                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2678                              <1> e%1 equ ($-tsvc)/4
  2678 0000098B [0B0F0000]          <1>  dd %1
  2679                                  			tsvce	UpperCaseString					;upper-case string
  2679                              <1> e%1 equ ($-tsvc)/4
  2679 0000098F [B80B0000]          <1>  dd %1
  2680                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;
  2683                                  ;	Service Request Macros
  2684                                  ;
  2685                                  ;	These macros provide positional parameterization of service request calls.
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                  %macro			clearConsoleScreen 0
  2689                                  			mov	al,eClearConsoleScreen				;function code
  2690                                  			int	_svc						;invoke OS service
  2691                                  %endmacro
  2692                                  %macro			compareMemory 0
  2693                                  			mov	al,eCompareMemory				;function code
  2694                                  			int	_svc						;invoke OS service
  2695                                  %endmacro
  2696                                  %macro			getConsoleString 4
  2697                                  			mov	edx,%1						;buffer address
  2698                                  			mov	ecx,%2						;max characters
  2699                                  			mov	bh,%3						;echo indicator
  2700                                  			mov	bl,%4						;terminator
  2701                                  			mov	al,eGetConsoleString				;function code
  2702                                  			int	_svc						;invoke OS service
  2703                                  %endmacro
  2704                                  %macro			hexadecimalToUnsigned 0
  2705                                  			mov	al,eHexadecimalToUnsigned			;function code
  2706                                  			int	_svc						;invoke OS service
  2707                                  %endmacro
  2708                                  %macro			isLeapYear 1
  2709                                  			mov	ebx,%1						;DATETIME addr
  2710                                  			mov	al,eIsLeapYear					;function code
  2711                                  			int	_svc						;invoke OS service
  2712                                  %endmacro
  2713                                  %macro			placeCursor 0
  2714                                  			mov	al,ePlaceCursor					;function code
  2715                                  			int	_svc						;invoke OS service
  2716                                  %endmacro
  2717                                  %macro			putConsoleString 1
  2718                                  			mov	edx,%1						;string address
  2719                                  			mov	al,ePutConsoleString				;function code
  2720                                  			int	_svc						;invoke OS service
  2721                                  %endmacro
  2722                                  %macro			putDateString 0
  2723                                  			mov	al,ePutDateString				;function code
  2724                                  			int	_svc						;invoke OS service
  2725                                  %endmacro
  2726                                  %macro			putDateString 2
  2727                                  			mov	ebx,%1						;DATETIME addr
  2728                                  			mov	edx,%2						;output buffer addr
  2729                                  			mov	al,ePutDateString				;function code
  2730                                  			int	_svc						;invoke OS service
  2731                                  %endmacro
  2732                                  %macro			putDayString 2
  2733                                  			mov	ebx,%1						;DATETIME addr
  2734                                  			mov	edx,%2						;output buffer addr
  2735                                  			mov	al,ePutDayString				;function code
  2736                                  			int	_svc						;invoke OS service
  2737                                  %endmacro
  2738                                  %macro			putHourString 2
  2739                                  			mov	ebx,%1						;DATETIME addr
  2740                                  			mov	edx,%2						;output buffer addr
  2741                                  			mov	al,ePutHourString				;function code
  2742                                  			int	_svc						;invoke OS service
  2743                                  %endmacro
  2744                                  %macro			putMinuteString 2
  2745                                  			mov	ebx,%1						;DATETIME addr
  2746                                  			mov	edx,%2						;output buffer addr
  2747                                  			mov	al,ePutMinuteString				;function code
  2748                                  			int	_svc						;invoke OS service
  2749                                  %endmacro
  2750                                  %macro			putMonthString 2
  2751                                  			mov	ebx,%1						;DATETIME addr
  2752                                  			mov	edx,%2						;output buffer addr
  2753                                  			mov	al,ePutMonthString				;function code
  2754                                  			int	_svc						;invoke OS service
  2755                                  %endmacro
  2756                                  %macro			putMonthNameString 2
  2757                                  			mov	ebx,%1						;DATETIME addr
  2758                                  			mov	edx,%2						;output buffer addr
  2759                                  			mov	al,ePutMonthNameString				;function code
  2760                                  			int	_svc						;invoke OS service
  2761                                  %endmacro
  2762                                  %macro			putSecondString 2
  2763                                  			mov	ebx,%1						;DATETIME addr
  2764                                  			mov	edx,%2						;output buffer addr
  2765                                  			mov	al,ePutSecondString				;function code
  2766                                  			int	_svc						;invoke OS service
  2767                                  %endmacro
  2768                                  %macro			putTimeString 0
  2769                                  			mov	al,ePutTimeString				;function code
  2770                                  			int	_svc						;invoke OS service
  2771                                  %endmacro
  2772                                  %macro			putTimeString 2
  2773                                  			mov	ebx,%1						;DATETIME addr
  2774                                  			mov	edx,%2						;output buffer addr
  2775                                  			mov	al,ePutTimeString				;function code
  2776                                  			int	_svc						;invoke OS service
  2777                                  %endmacro
  2778                                  %macro			putWeekdayString 2
  2779                                  			mov	ebx,%1						;DATETIME addr
  2780                                  			mov	edx,%2						;output buffer addr
  2781                                  			mov	al,ePutWeekdayString				;function code
  2782                                  			int	_svc						;invoke OS service
  2783                                  %endmacro
  2784                                  %macro			putWeekdayNameString 2
  2785                                  			mov	ebx,%1						;DATETIME addr
  2786                                  			mov	edx,%2						;output buffer addr
  2787                                  			mov	al,ePutWeekdayNameString			;function code
  2788                                  			int	_svc						;invoke OS service
  2789                                  %endmacro
  2790                                  %macro			putYearString 2
  2791                                  			mov	ebx,%1						;DATETIME addr
  2792                                  			mov	edx,%2						;output buffer addr
  2793                                  			mov	al,ePutYearString				;function code
  2794                                  			int	_svc						;invoke OS service
  2795                                  %endmacro
  2796                                  %macro			readRealTimeClock 0
  2797                                  			mov	al,eReadRealTimeClock				;function code
  2798                                  			int	_svc						;invoke OS service
  2799                                  %endmacro
  2800                                  %macro			readRealTimeClock 1
  2801                                  			mov	ebx,%1						;DATETIME addr
  2802                                  			mov	al,eReadRealTimeClock				;function code
  2803                                  			int	_svc						;invoke OS service
  2804                                  %endmacro
  2805                                  %macro			resetSystem 0
  2806                                  			mov	al,eResetSystem					;AL = system reset fn.
  2807                                  			int	_svc						;invoke OS service
  2808                                  %endmacro
  2809                                  %macro			unsignedToDecimalString 0
  2810                                  			mov	al,eUnsignedToDecimalString			;function code
  2811                                  			int	_svc						;invoke OS service
  2812                                  %endmacro
  2813                                  %macro			unsignedToHexadecimal 0
  2814                                  			mov	al,eUnsignedToHexadecimal			;function code
  2815                                  			int	_svc						;invoke OS service
  2816                                  %endmacro
  2817                                  %macro			upperCaseString 0
  2818                                  			mov	al,eUpperCaseString				;function code
  2819                                  			int	_svc						;invoke OS service
  2820                                  %endmacro
  2821                                  ;=======================================================================================================================
  2822                                  ;
  2823                                  ;	Kernel Function Library
  2824                                  ;
  2825                                  ;=======================================================================================================================
  2826                                  ;=======================================================================================================================
  2827                                  ;
  2828                                  ;	Date and Time Helper Routines
  2829                                  ;
  2830                                  ;	GetYear
  2831                                  ;	IsLeapYear
  2832                                  ;	PutDateString
  2833                                  ;	PutDayString
  2834                                  ;	PutHourString
  2835                                  ;	PutMinuteString
  2836                                  ;	PutMonthString
  2837                                  ;	PutMonthNameString
  2838                                  ;	PutSecondString
  2839                                  ;	PutTimeString
  2840                                  ;	PutWeekdayString
  2841                                  ;	PutWeekdayNameString
  2842                                  ;	PutYearString
  2843                                  ;
  2844                                  ;=======================================================================================================================
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;
  2847                                  ;	Routine:	GetYear
  2848                                  ;
  2849                                  ;	Description:	Return the four-digit year (century * 100 + year of century)
  2850                                  ;
  2851                                  ;	In:		DS:EBX	DATETIME address
  2852                                  ;
  2853                                  ;	Out:		ECX	year
  2854                                  ;
  2855                                  ;-----------------------------------------------------------------------------------------------------------------------
  2856 00000993 0FB64B07                GetYear			movzx	ecx,byte [ebx+DATETIME.century]			;century
  2857 00000997 6BC964                  			imul	ecx,100						;century * 100
  2858 0000099A 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year of century
  2859 0000099E 01C1                    			add	ecx,eax						;year (YYYY)
  2860 000009A0 C3                      			ret							;return
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                  ;
  2863                                  ;	Routine:	IsLeapYear
  2864                                  ;
  2865                                  ;	Description:	This routine returns an indicator if the current year is a leap year.
  2866                                  ;
  2867                                  ;	In:		DS:EBX	DATETIME ADDRESS
  2868                                  ;
  2869                                  ;	Out:		ECX	0 = not a leap year
  2870                                  ;				1 = leap year
  2871                                  ;
  2872                                  ;-----------------------------------------------------------------------------------------------------------------------
  2873 000009A1 E8EDFFFFFF              IsLeapYear		call	GetYear						;ECX = YYYY
  2874 000009A6 89C8                    			mov	eax,ecx						;EAX = YYYY
  2875 000009A8 31C9                    			xor	ecx,ecx						;assume not leap year
  2876 000009AA A803                    			test	al,00000011b					;multiple of four?
  2877 000009AC 750D                    			jnz	.no						;no, branch
  2878 000009AE B264                    			mov	dl,100						;divisor
  2879 000009B0 F6F2                    			div	dl						;divide by 100
  2880 000009B2 84E4                    			test	ah,ah						;multiple of 100?
  2881 000009B4 7504                    			jnz	.yes						;yes, branch
  2882 000009B6 A803                    			test	al,00000011b					;multiple of 400?
  2883 000009B8 7501                    			jnz	.no						;no, branch
  2884 000009BA 41                      .yes			inc	ecx						;indicate leap
  2885 000009BB C3                      .no			ret							;
  2886                                  ;-----------------------------------------------------------------------------------------------------------------------
  2887                                  ;
  2888                                  ;	Routine:	PutDateString
  2889                                  ;
  2890                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2891                                  ;			structure at ds:ebx.
  2892                                  ;
  2893                                  ;	In:		DS:EBX	DATETIME address
  2894                                  ;			DS:EDX	output buffer address
  2895                                  ;
  2896                                  ;-----------------------------------------------------------------------------------------------------------------------
  2897 000009BC 51                      PutDateString		push	ecx						;save non-volatile regs
  2898 000009BD 57                      			push	edi						;
  2899 000009BE 06                      			push	es						;
  2900 000009BF 1E                      			push	ds						;store data selector ...
  2901 000009C0 07                      			pop	es						;... in extra segment reg
  2902 000009C1 89D7                    			mov	edi,edx						;output buffer address
  2903 000009C3 B10A                    			mov	cl,10						;divisor
  2904 000009C5 BA30302F00              			mov	edx,0002F3030h					;ASCIIZ "00/" (reversed)
  2905 000009CA 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month
  2906 000009CE F6F1                    			div	cl						;AH = rem; AL = quotient
  2907 000009D0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2908 000009D2 FC                      			cld							;forward strings
  2909 000009D3 AB                      			stosd							;store "mm/"nul
  2910 000009D4 4F                      			dec	edi						;address of terminator
  2911 000009D5 0FB64304                			movzx	eax,byte [ebx+DATETIME.day]			;day
  2912 000009D9 F6F1                    			div	cl						;AH = rem; AL = quotient
  2913 000009DB 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2914 000009DD AB                      			stosd							;store "dd/"nul
  2915 000009DE 4F                      			dec	edi						;address of terminator
  2916 000009DF 0FB64307                			movzx	eax,byte [ebx+DATETIME.century]			;century
  2917 000009E3 F6F1                    			div	cl						;AH = rem; AL = quotient
  2918 000009E5 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2919 000009E7 AB                      			stosd							;store "cc/"null
  2920 000009E8 4F                      			dec	edi						;address of terminator
  2921 000009E9 4F                      			dec	edi						;address of delimiter
  2922 000009EA 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2923 000009EE F6F1                    			div	cl						;AH = rem; AL = quotient
  2924 000009F0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2925 000009F2 AA                      			stosb							;store quotient
  2926 000009F3 88E0                    			mov	al,ah						;remainder
  2927 000009F5 AA                      			stosb							;store remainder
  2928 000009F6 30C0                    			xor	al,al						;null terminator
  2929 000009F8 AA                      			stosb							;store terminator
  2930 000009F9 07                      			pop	es						;restore non-volatile regs
  2931 000009FA 5F                      			pop	edi						;
  2932 000009FB 59                      			pop	ecx						;
  2933 000009FC C3                      			ret							;return
  2934                                  ;-----------------------------------------------------------------------------------------------------------------------
  2935                                  ;
  2936                                  ;	Routine:	PutDayString
  2937                                  ;
  2938                                  ;	Description:	This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  2939                                  ;			structure at ds:ebx.
  2940                                  ;
  2941                                  ;	In:		DS:EBX	DATETIME address
  2942                                  ;			DS:EDX	output buffer address
  2943                                  ;
  2944                                  ;-----------------------------------------------------------------------------------------------------------------------
  2945 000009FD 51                      PutDayString		push	ecx						;save non-volatile regs
  2946 000009FE 0FB64B04                			movzx	ecx,byte [ebx+DATETIME.day]			;day
  2947 00000A02 B701                    			mov	bh,1						;trim leading zeros; no commas
  2948 00000A04 E85E040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  2949 00000A09 59                      			pop	ecx						;
  2950 00000A0A C3                      			ret							;return
  2951                                  ;-----------------------------------------------------------------------------------------------------------------------
  2952                                  ;
  2953                                  ;	Routine:	PutHourString
  2954                                  ;
  2955                                  ;	Description:	This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  2956                                  ;			structure at ds:ebx.
  2957                                  ;
  2958                                  ;	In:		DS:EBX	DATETIME address
  2959                                  ;			DS:EDX	output buffer address
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962 00000A0B 51                      PutHourString		push	ecx						;save non-volatile regs
  2963 00000A0C 0FB64B02                			movzx	ecx,byte [ebx+DATETIME.hour]			;hour
  2964 00000A10 B701                    			mov	bh,1						;trim leading zeros; no commas
  2965 00000A12 E850040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  2966 00000A17 59                      			pop	ecx						;
  2967 00000A18 C3                      			ret							;return
  2968                                  ;-----------------------------------------------------------------------------------------------------------------------
  2969                                  ;
  2970                                  ;	Routine:	PutMinuteString
  2971                                  ;
  2972                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  2973                                  ;			structure at ds:ebx.
  2974                                  ;
  2975                                  ;	In:		DS:EBX	DATETIME address
  2976                                  ;			DS:EDX	output buffer address
  2977                                  ;
  2978                                  ;-----------------------------------------------------------------------------------------------------------------------
  2979 00000A19 51                      PutMinuteString		push	ecx						;save non-volatile regs
  2980 00000A1A 0FB64B01                			movzx	ecx,byte [ebx+DATETIME.minute]			;minute
  2981 00000A1E B701                    			mov	bh,1						;trim leading zeros; no commas
  2982 00000A20 E842040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  2983 00000A25 59                      			pop	ecx						;
  2984 00000A26 C3                      			ret							;return
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;	Routine:	PutMonthString
  2988                                  ;
  2989                                  ;	Description:	This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  2990                                  ;			structure at ds:ebx.
  2991                                  ;
  2992                                  ;	In:		DS:EBX	DATETIME address
  2993                                  ;			DS:EDX	output buffer address
  2994                                  ;
  2995                                  ;-----------------------------------------------------------------------------------------------------------------------
  2996 00000A27 51                      PutMonthString		push	ecx						;save non-volatile regs
  2997 00000A28 0FB64B05                			movzx	ecx,byte [ebx+DATETIME.month]			;month
  2998 00000A2C B701                    			mov	bh,1						;trim leading zeros; no commas
  2999 00000A2E E834040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3000 00000A33 59                      			pop	ecx						;
  3001 00000A34 C3                      			ret							;return
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  ;
  3004                                  ;	Routine:	PutMonthNameString
  3005                                  ;
  3006                                  ;	Description:	This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3007                                  ;			structure at ds:ebx.
  3008                                  ;
  3009                                  ;	In:		DS:EBX	DATETIME address
  3010                                  ;			DS:EDX	output buffer address
  3011                                  ;
  3012                                  ;-----------------------------------------------------------------------------------------------------------------------
  3013 00000A35 56                      PutMonthNameString	push	esi						;save non-volatile regs
  3014 00000A36 57                      			push	edi						;
  3015 00000A37 1E                      			push	ds						;
  3016 00000A38 06                      			push	es						;
  3017 00000A39 1E                      			push	ds						;load data selector ...
  3018 00000A3A 07                      			pop	es						;... into extra segment
  3019 00000A3B 89D7                    			mov	edi,edx						;output buffer address
  3020 00000A3D 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month (1-12)
  3021 00000A41 48                      			dec	eax						;month (0-11)
  3022 00000A42 C1E002                  			shl	eax,2						;offset into month name lookup table
  3023 00000A45 0E                      			push	cs						;load code selector ...
  3024 00000A46 1F                      			pop	ds						;... into data segment
  3025 00000A47 8BB0[880B0000]          			mov	esi,[tMonthNames+eax]				;month name address
  3026 00000A4D FC                      			cld							;forward strings
  3027 00000A4E AC                      .10			lodsb							;name character
  3028 00000A4F AA                      			stosb							;store in output buffer
  3029 00000A50 84C0                    			test	al,al						;end of string?
  3030 00000A52 75FA                    			jnz	.10						;no, continue
  3031 00000A54 07                      			pop	es						;restore non-volatile regs
  3032 00000A55 1F                      			pop	ds						;
  3033 00000A56 5F                      			pop	edi						;
  3034 00000A57 5E                      			pop	esi						;
  3035 00000A58 C3                      			ret							;return
  3036                                  ;-----------------------------------------------------------------------------------------------------------------------
  3037                                  ;
  3038                                  ;	Routine:	PutSecondString
  3039                                  ;
  3040                                  ;	Description:	This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3041                                  ;			structure at ds:ebx.
  3042                                  ;
  3043                                  ;	In:		DS:EBX	DATETIME address
  3044                                  ;			DS:EDX	output buffer address
  3045                                  ;
  3046                                  ;-----------------------------------------------------------------------------------------------------------------------
  3047 00000A59 51                      PutSecondString		push	ecx						;save non-volatile regs
  3048 00000A5A 0FB60B                  			movzx	ecx,byte [ebx+DATETIME.second]			;second
  3049 00000A5D B701                    			mov	bh,1						;trim leading zeros; no commas
  3050 00000A5F E803040000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3051 00000A64 59                      			pop	ecx						;
  3052 00000A65 C3                      			ret							;return
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054                                  ;
  3055                                  ;	Routine:	PutTimeString
  3056                                  ;
  3057                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3058                                  ;			structure at ds:ebx.
  3059                                  ;
  3060                                  ;	In:		DS:EBX	DATETIME address
  3061                                  ;			DS:EDX	output buffer address
  3062                                  ;
  3063                                  ;-----------------------------------------------------------------------------------------------------------------------
  3064 00000A66 51                      PutTimeString		push	ecx						;save non-volatile regs
  3065 00000A67 57                      			push	edi						;
  3066 00000A68 06                      			push	es						;
  3067 00000A69 1E                      			push	ds						;store data selector ...
  3068 00000A6A 07                      			pop	es						;... in extra segment reg
  3069 00000A6B 89D7                    			mov	edi,edx						;output buffer address
  3070 00000A6D B10A                    			mov	cl,10						;divisor
  3071 00000A6F BA30303A00              			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  3072 00000A74 0FB64302                			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  3073 00000A78 F6F1                    			div	cl						;ah = rem; al = quotient
  3074 00000A7A 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3075 00000A7C FC                      			cld							;forward strings
  3076 00000A7D AB                      			stosd							;store "mm/"nul
  3077 00000A7E 4F                      			dec	edi						;address of terminator
  3078 00000A7F 0FB64301                			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  3079 00000A83 F6F1                    			div	cl						;ah = rem; al = quotient
  3080 00000A85 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3081 00000A87 AB                      			stosd							;store "dd/"nul
  3082 00000A88 4F                      			dec	edi						;address of terminator
  3083 00000A89 0FB603                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  3084 00000A8C F6F1                    			div	cl						;ah = rem; al = quotient
  3085 00000A8E 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  3086 00000A90 AA                      			stosb							;store quotient
  3087 00000A91 88E0                    			mov	al,ah						;remainder
  3088 00000A93 AA                      			stosb							;store remainder
  3089 00000A94 30C0                    			xor	al,al						;null terminator
  3090 00000A96 AA                      			stosb							;store terminator
  3091 00000A97 07                      			pop	es						;restore non-volatile regs
  3092 00000A98 5F                      			pop	edi						;
  3093 00000A99 59                      			pop	ecx						;
  3094 00000A9A C3                      			ret							;return
  3095                                  ;-----------------------------------------------------------------------------------------------------------------------
  3096                                  ;
  3097                                  ;	Routine:	PutWeekdayString
  3098                                  ;
  3099                                  ;	Description:	This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3100                                  ;			structure at ds:ebx.
  3101                                  ;
  3102                                  ;	In:		DS:EBX	DATETIME address
  3103                                  ;			DS:EDX	output buffer address
  3104                                  ;
  3105                                  ;-----------------------------------------------------------------------------------------------------------------------
  3106 00000A9B 51                      PutWeekdayString	push	ecx						;save non-volatile regs
  3107 00000A9C 0FB64B03                			movzx	ecx,byte [ebx+DATETIME.weekday]			;weekday
  3108 00000AA0 B701                    			mov	bh,1						;trim leading zeros; no commas
  3109 00000AA2 E8C0030000              			call	UnsignedToDecimalString				;store ASCII decimal string
  3110 00000AA7 59                      			pop	ecx						;
  3111 00000AA8 C3                      			ret							;return
  3112                                  ;-----------------------------------------------------------------------------------------------------------------------
  3113                                  ;
  3114                                  ;	Routine:	PutWeekdayNameString
  3115                                  ;
  3116                                  ;	Description:	This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3117                                  ;			structure at ds:ebx.
  3118                                  ;
  3119                                  ;	In:		DS:EBX	DATETIME address
  3120                                  ;			DS:EDX	output buffer address
  3121                                  ;
  3122                                  ;-----------------------------------------------------------------------------------------------------------------------
  3123 00000AA9 56                      PutWeekdayNameString	push	esi						;save non-volatile regs
  3124 00000AAA 57                      			push	edi						;
  3125 00000AAB 1E                      			push	ds						;
  3126 00000AAC 06                      			push	es						;
  3127 00000AAD 1E                      			push	ds						;load data selector ...
  3128 00000AAE 07                      			pop	es						;... into extra segment
  3129 00000AAF 89D7                    			mov	edi,edx						;output buffer address
  3130 00000AB1 0FB64303                			movzx	eax,byte [ebx+DATETIME.weekday]			;weekday (0-6)
  3131 00000AB5 C1E002                  			shl	eax,2						;offset into day name lookup table
  3132 00000AB8 0E                      			push	cs						;load code selector ...
  3133 00000AB9 1F                      			pop	ds						;... into data segment
  3134 00000ABA 8BB0[6C0B0000]          			mov	esi,[tDayNames+eax]				;day name address
  3135 00000AC0 FC                      			cld							;forward strings
  3136 00000AC1 AC                      .10			lodsb							;name character
  3137 00000AC2 AA                      			stosb							;store in output buffer
  3138 00000AC3 84C0                    			test	al,al						;end of string?
  3139 00000AC5 75FA                    			jnz	.10						;no, continue
  3140 00000AC7 07                      			pop	es						;restore non-volatile regs
  3141 00000AC8 1F                      			pop	ds						;
  3142 00000AC9 5F                      			pop	edi						;
  3143 00000ACA 5E                      			pop	esi						;
  3144 00000ACB C3                      			ret							;return
  3145                                  ;-----------------------------------------------------------------------------------------------------------------------
  3146                                  ;
  3147                                  ;	Routine:	PutYearString
  3148                                  ;
  3149                                  ;	Description:	This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3150                                  ;			structure at ds:ebx.
  3151                                  ;
  3152                                  ;	In:		DS:EBX	DATETIME address
  3153                                  ;			DS:EDX	output buffer address
  3154                                  ;
  3155                                  ;-----------------------------------------------------------------------------------------------------------------------
  3156 00000ACC 51                      PutYearString		push	ecx						;save non-volatile regs
  3157 00000ACD E8C1FEFFFF              			call	GetYear						;ECX = YYYY
  3158 00000AD2 B701                    			mov	bh,1						;trim leading zeros; no commas
  3159 00000AD4 E88E030000              			call	UnsignedToDecimalString				;store decimal string at DS:EDX
  3160 00000AD9 59                      			pop	ecx						;restore non-volatile regs
  3161 00000ADA C3                      			ret							;return
  3162                                  ;-----------------------------------------------------------------------------------------------------------------------
  3163                                  ;
  3164                                  ;	Day Names
  3165                                  ;
  3166                                  ;-----------------------------------------------------------------------------------------------------------------------
  3167 00000ADB 53756E64617900          czSunday		db	"Sunday",0
  3168 00000AE2 4D6F6E64617900          czMonday		db	"Monday",0
  3169 00000AE9 5475657364617900        czTuesday		db	"Tuesday",0
  3170 00000AF1 5765646E6573646179-     czWednesday		db	"Wednesday",0
  3170 00000AFA 00                 
  3171 00000AFB 546875727364617900      czThursday		db	"Thursday",0
  3172 00000B04 46726964617900          czFriday		db	"Friday",0
  3173 00000B0B 536174757264617900      czSaturday		db	"Saturday",0
  3174                                  ;-----------------------------------------------------------------------------------------------------------------------
  3175                                  ;
  3176                                  ;	Month Names
  3177                                  ;
  3178                                  ;-----------------------------------------------------------------------------------------------------------------------
  3179 00000B14 4A616E7561727900        czJanuary		db	"January",0
  3180 00000B1C 466562727561727900      czFebruary		db	"February",0
  3181 00000B25 4D6172636800            czMarch			db	"March",0
  3182 00000B2B 417072696C00            czApril			db	"April",0
  3183 00000B31 4D617900                czMay			db	"May",0
  3184 00000B35 4A756E6500              czJune			db	"June",0
  3185 00000B3A 4A756C7900              czJuly			db	"July",0
  3186 00000B3F 41756775737400          czAugust		db	"August",0
  3187 00000B46 53657074656D626572-     czSeptember		db	"September",0
  3187 00000B4F 00                 
  3188 00000B50 4F63746F62657200        czOctober		db	"October",0
  3189 00000B58 4E6F76656D62657200      czNovember		db	"November",0
  3190 00000B61 446563656D62657200      czDecember		db	"December",0
  3191                                  ;-----------------------------------------------------------------------------------------------------------------------
  3192                                  ;
  3193                                  ;	Day Names Lookup Table
  3194                                  ;
  3195                                  ;-----------------------------------------------------------------------------------------------------------------------
  3196 00000B6A 90<rept>                			align	4
  3197                                  tDayNames		equ	$
  3198 00000B6C [DB0A0000]              			dd	czSunday
  3199 00000B70 [E20A0000]              			dd	czMonday
  3200 00000B74 [E90A0000]              			dd	czTuesday
  3201 00000B78 [F10A0000]              			dd	czWednesday
  3202 00000B7C [FB0A0000]              			dd	czThursday
  3203 00000B80 [040B0000]              			dd	czFriday
  3204 00000B84 [0B0B0000]              			dd	czSaturday
  3205                                  EDAYNAMESTBLL		equ	($-tDayNames)
  3206                                  EDAYNAMESTBLCNT		equ	EDAYNAMESTBLL/4
  3207                                  ;-----------------------------------------------------------------------------------------------------------------------
  3208                                  ;
  3209                                  ;	Month Names Lookup Table
  3210                                  ;
  3211                                  ;-----------------------------------------------------------------------------------------------------------------------
  3212                                  			align	4
  3213                                  tMonthNames		equ	$
  3214 00000B88 [140B0000]              			dd	czJanuary
  3215 00000B8C [1C0B0000]              			dd	czFebruary
  3216 00000B90 [250B0000]              			dd	czMarch
  3217 00000B94 [2B0B0000]              			dd	czApril
  3218 00000B98 [310B0000]              			dd	czMay
  3219 00000B9C [350B0000]              			dd	czJune
  3220 00000BA0 [3A0B0000]              			dd	czJuly
  3221 00000BA4 [3F0B0000]              			dd	czAugust
  3222 00000BA8 [460B0000]              			dd	czSeptember
  3223 00000BAC [500B0000]              			dd	czOctober
  3224 00000BB0 [580B0000]              			dd	czNovember
  3225 00000BB4 [610B0000]              			dd	czDecember
  3226                                  EMONTHNAMESTBLL		equ	($-tMonthNames)
  3227                                  EMONTHNAMESTBLCNT	equ	EMONTHNAMESTBLL/4
  3228                                  ;=======================================================================================================================
  3229                                  ;
  3230                                  ;	String Helper Routines
  3231                                  ;
  3232                                  ;	UpperCaseString
  3233                                  ;	CompareMemory
  3234                                  ;
  3235                                  ;=======================================================================================================================
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  ;
  3238                                  ;	Routine:	UpperCaseString
  3239                                  ;
  3240                                  ;	Description:	This routine places all characters in the given string to upper case.
  3241                                  ;
  3242                                  ;	In:		DS:EDX	string address
  3243                                  ;
  3244                                  ;	Out:		EDX	string address
  3245                                  ;
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247 00000BB8 56                      UpperCaseString		push	esi						;save non-volatile regs
  3248 00000BB9 89D6                    			mov	esi,edx						;string address
  3249 00000BBB FC                      			cld							;forward strings
  3250 00000BBC AC                      .10			lodsb							;string character
  3251 00000BBD 84C0                    			test	al,al						;null?
  3252 00000BBF 740F                    			jz	.20						;yes, skip ahead
  3253 00000BC1 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  3254 00000BC3 72F7                    			jb	.10						;no, continue
  3255 00000BC5 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  3256 00000BC7 77F3                    			ja	.10						;no, continue
  3257 00000BC9 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  3258 00000BCB 8846FF                  			mov	[esi-1],al					;upper character
  3259 00000BCE EBEC                    			jmp	.10						;continue
  3260 00000BD0 5E                      .20			pop	esi						;restore non-volatile regs
  3261 00000BD1 C3                      			ret							;return
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  ;
  3264                                  ;	Routine:	CompareMemory
  3265                                  ;
  3266                                  ;	Description:	This routine compares two byte arrays.
  3267                                  ;
  3268                                  ;	In:		DS:EDX	first source address
  3269                                  ;			DS:EBX	second source address
  3270                                  ;			ECX	comparison length
  3271                                  ;
  3272                                  ;	Out:		EDX	first source address
  3273                                  ;			EBX	second source address
  3274                                  ;			ECX	0	array 1 = array 2
  3275                                  ;				<0	array 1 < array 2
  3276                                  ;				>0	array 1 > array 2
  3277                                  ;
  3278                                  ;-----------------------------------------------------------------------------------------------------------------------
  3279 00000BD2 56                      CompareMemory		push	esi						;save non-volatile regs
  3280 00000BD3 57                      			push	edi						;
  3281 00000BD4 06                      			push	es						;
  3282 00000BD5 1E                      			push	ds						;copy DS
  3283 00000BD6 07                      			pop	es						;... to ES
  3284 00000BD7 89D6                    			mov	esi,edx						;first source address
  3285 00000BD9 89DF                    			mov	edi,ebx						;second source address
  3286 00000BDB FC                      			cld							;forward strings
  3287 00000BDC F3A6                    			rep	cmpsb						;compare bytes
  3288 00000BDE B000                    			mov	al,0						;default result
  3289 00000BE0 7406                    			jz	.10						;branch if arrays equal
  3290 00000BE2 B001                    			mov	al,1						;positive result
  3291 00000BE4 7302                    			jnc	.10						;branch if target > source
  3292 00000BE6 B0FF                    			mov	al,-1						;negative result
  3293 00000BE8 0FBEC8                  .10			movsx	ecx,al						;extend sign
  3294 00000BEB 07                      			pop	es						;restore non-volatile regs
  3295 00000BEC 5F                      			pop	edi						;
  3296 00000BED 5E                      			pop	esi						;
  3297 00000BEE C3                      			ret							;return
  3298                                  ;=======================================================================================================================
  3299                                  ;
  3300                                  ;	Console Helper Routines
  3301                                  ;
  3302                                  ;	PutConsoleString
  3303                                  ;	GetConsoleString
  3304                                  ;	GetConsoleChar
  3305                                  ;	Yield
  3306                                  ;	PreviousConsoleColumn
  3307                                  ;	NextConsoleColumn
  3308                                  ;	FirstConsoleColumn
  3309                                  ;	NextConsoleRow
  3310                                  ;	PutConsoleChar
  3311                                  ;	PutConsoleOIAShift
  3312                                  ;	PutConsoleOIAChar
  3313                                  ;	PutConsoleHexByte
  3314                                  ;
  3315                                  ;=======================================================================================================================
  3316                                  ;-----------------------------------------------------------------------------------------------------------------------
  3317                                  ;
  3318                                  ;	Routine:	PutConsoleString
  3319                                  ;
  3320                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  3321                                  ;			console position as needed.
  3322                                  ;
  3323                                  ;	In:		EDX	source address
  3324                                  ;			DS	OS data selector
  3325                                  ;
  3326                                  ;-----------------------------------------------------------------------------------------------------------------------
  3327 00000BEF 56                      PutConsoleString	push	esi						;save non-volatile regs
  3328 00000BF0 89D6                    			mov	esi,edx						;source address
  3329 00000BF2 FC                      			cld							;forward strings
  3330 00000BF3 AC                      .10			lodsb							;ASCII character
  3331 00000BF4 08C0                    			or	al,al						;end of string?
  3332 00000BF6 7422                    			jz	.40						;yes, skip ahead
  3333 00000BF8 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  3334 00000BFA 7507                    			jne	.20						;no, skip ahead
  3335 00000BFC E8EB000000              			call	FirstConsoleColumn				;move to start of row
  3336 00000C01 EBF0                    			jmp	.10						;next character
  3337 00000C03 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  3338 00000C05 7507                    			jne	.30						;no, skip ahead
  3339 00000C07 E8E8000000              			call	NextConsoleRow					;move to next row
  3340 00000C0C EBE5                    			jmp	.10						;next character
  3341 00000C0E E803010000              .30			call	PutConsoleChar					;output character to console
  3342 00000C13 E8B9000000              			call	NextConsoleColumn				;advance to next column
  3343 00000C18 EBD9                    			jmp	.10						;next character
  3344 00000C1A 5E                      .40			pop	esi						;restore non-volatile regs
  3345 00000C1B C3                      			ret							;return
  3346                                  ;-----------------------------------------------------------------------------------------------------------------------
  3347                                  ;
  3348                                  ;	Routine:	GetConsoleString
  3349                                  ;
  3350                                  ;	Description:	This routine accepts keyboard input into a buffer.
  3351                                  ;
  3352                                  ;	In:		DS:EDX	target buffer address
  3353                                  ;			ECX	maximum number of characters to accept
  3354                                  ;			BH	echo to terminal
  3355                                  ;			BL	terminating character
  3356                                  ;
  3357                                  ;-----------------------------------------------------------------------------------------------------------------------
  3358 00000C1C 51                      GetConsoleString	push	ecx						;save non-volatile regs
  3359 00000C1D 56                      			push	esi						;
  3360 00000C1E 57                      			push	edi						;
  3361 00000C1F 06                      			push	es						;
  3362 00000C20 1E                      			push	ds						;load data segment selector ...
  3363 00000C21 07                      			pop	es						;... into extra segment register
  3364 00000C22 89D7                    			mov	edi,edx						;edi = target buffer
  3365 00000C24 51                      			push	ecx						;save maximum characters
  3366 00000C25 30C0                    			xor	al,al						;zero register
  3367 00000C27 FC                      			cld							;forward strings
  3368 00000C28 F3AA                    			rep	stosb						;zero fill buffer
  3369 00000C2A 59                      			pop	ecx						;maximum characters
  3370 00000C2B 89D7                    			mov	edi,edx						;edi = target buffer
  3371 00000C2D 89D6                    			mov	esi,edx						;esi = target buffer
  3372 00000C2F E34E                    .10			jecxz	.50						;exit if max-length is zero
  3373 00000C31 E856000000              .20			call	GetConsoleChar					;al = next input char
  3374 00000C36 38D8                    			cmp	al,bl						;is this the terminator?
  3375 00000C38 7445                    			je	.50						;yes, exit
  3376 00000C3A 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  3377 00000C3C 7521                    			jne	.30						;no, skip ahead
  3378 00000C3E 39FE                    			cmp	esi,edi						;at start of buffer?
  3379 00000C40 74EF                    			je	.20						;yes, get next character
  3380 00000C42 4F                      			dec	edi						;backup target pointer
  3381 00000C43 C60700                  			mov	byte [edi],0					;zero previous character
  3382 00000C46 41                      			inc	ecx						;increment remaining chars
  3383 00000C47 F6C701                  			test	bh,1						;echo to console?
  3384 00000C4A 74E5                    			jz	.20						;no, get next character
  3385 00000C4C E85B000000              			call	PreviousConsoleColumn				;backup console position
  3386 00000C51 B020                    			mov	al,EASCIISPACE					;ASCII space
  3387 00000C53 E8BE000000              			call	PutConsoleChar					;write space to console
  3388 00000C58 E8D6030000              			call	PlaceCursor					;position the cursor
  3389 00000C5D EBD2                    			jmp	.20						;get next character
  3390 00000C5F 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  3391 00000C61 72CE                    			jb	.20						;no, get another character
  3392 00000C63 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  3393 00000C65 77CA                    			ja	.20						;no, get another character
  3394 00000C67 AA                      			stosb							;store character in buffer
  3395 00000C68 F6C701                  			test	bh,1						;echo to console?
  3396 00000C6B 740F                    			jz	.40						;no, skip ahead
  3397 00000C6D E8A4000000              			call	PutConsoleChar					;write character to console
  3398 00000C72 E85A000000              			call	NextConsoleColumn				;advance console position
  3399 00000C77 E8B7030000              			call	PlaceCursor					;position the cursor
  3400 00000C7C 49                      .40			dec	ecx						;decrement remaining chars
  3401 00000C7D EBB0                    			jmp	.10						;next
  3402 00000C7F 30C0                    .50			xor	al,al						;null
  3403 00000C81 AA                      			stosb							;terminate buffer
  3404 00000C82 07                      			pop	es						;restore non-volatile regs
  3405 00000C83 5F                      			pop	edi						;
  3406 00000C84 5E                      			pop	esi						;
  3407 00000C85 59                      			pop	ecx						;
  3408 00000C86 C3                      			ret							;return
  3409                                  ;-----------------------------------------------------------------------------------------------------------------------
  3410                                  ;
  3411                                  ;	Routine:	GetConsoleChar
  3412                                  ;
  3413                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  3414                                  ;
  3415                                  ;	Out:		AL	ASCII character code
  3416                                  ;			AH	keyboard scan code
  3417                                  ;
  3418                                  ;-----------------------------------------------------------------------------------------------------------------------
  3419 00000C87 E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  3420 00000C8C E8E0020000              GetConsoleChar		call	GetMessage					;get the next message
  3421 00000C91 09C0                    			or	eax,eax						;do we have a message?
  3422 00000C93 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  3423 00000C95 50                      			push	eax						;save key codes
  3424 00000C96 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  3425 00000C9B 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  3426 00000CA0 58                      			pop	eax						;restore key codes
  3427 00000CA1 75E9                    			jne	GetConsoleChar					;no, try again
  3428 00000CA3 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  3429 00000CA8 C3                      			ret							;return
  3430                                  ;-----------------------------------------------------------------------------------------------------------------------
  3431                                  ;
  3432                                  ;	Routine:	Yield
  3433                                  ;
  3434                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  3435                                  ;
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437 00000CA9 FB                      Yield			sti							;enable maskagle interrupts
  3438 00000CAA F4                      			hlt							;halt until external interrupt
  3439 00000CAB C3                      			ret							;return
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441                                  ;
  3442                                  ;	Routine:	PreviousConsoleColumn
  3443                                  ;
  3444                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3445                                  ;			the column is set to the last position in the row and the row is decremented.
  3446                                  ;
  3447                                  ;	In:		DS	OS data selector
  3448                                  ;
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450 00000CAC A004080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  3451 00000CB1 08C0                    			or	al,al						;start of row?
  3452 00000CB3 7514                    			jnz	.10						;no, skip ahead
  3453 00000CB5 8A2505080000            			mov	ah,[wbConsoleRow]				;current row
  3454 00000CBB 08E4                    			or	ah,ah						;top of screen?
  3455 00000CBD 7411                    			jz	.20						;yes, exit with no change
  3456 00000CBF FECC                    			dec	ah						;decrement row
  3457 00000CC1 882505080000            			mov	[wbConsoleRow],ah				;save row
  3458 00000CC7 B050                    			mov	al,ECONCOLS					;set maximum column
  3459 00000CC9 FEC8                    .10			dec	al						;decrement column
  3460 00000CCB A204080000              			mov	[wbConsoleColumn],al				;save column
  3461 00000CD0 C3                      .20			ret							;return
  3462                                  ;-----------------------------------------------------------------------------------------------------------------------
  3463                                  ;
  3464                                  ;	Routine:	NextConsoleColumn
  3465                                  ;
  3466                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  3467                                  ;			incremented if the end of the current row is reached.
  3468                                  ;
  3469                                  ;	In:		DS	OS data selector
  3470                                  ;
  3471                                  ;-----------------------------------------------------------------------------------------------------------------------
  3472 00000CD1 A004080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  3473 00000CD6 FEC0                    			inc	al						;increment column
  3474 00000CD8 A204080000              			mov	[wbConsoleColumn],al				;save column
  3475 00000CDD 3C50                    			cmp	al,ECONCOLS					;end of row?
  3476 00000CDF 720A                    			jb	.10						;no, skip ahead
  3477 00000CE1 E806000000              			call	FirstConsoleColumn				;reset column to start of row
  3478 00000CE6 E809000000              			call	NextConsoleRow					;line feed to next row
  3479 00000CEB C3                      .10			ret							;return
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481                                  ;
  3482                                  ;	Routine:	FirstConsoleColumn
  3483                                  ;
  3484                                  ;	Description:	This routine resets the console column to start of the row.
  3485                                  ;
  3486                                  ;	In:		DS	OS data selector
  3487                                  ;
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489 00000CEC 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  3490 00000CEE A204080000              			mov	[wbConsoleColumn],al				;save column
  3491 00000CF3 C3                      			ret							;return
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  ;
  3494                                  ;	Routine:	NextConsoleRow
  3495                                  ;
  3496                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  3497                                  ;
  3498                                  ;	In:		DS	OS data selector
  3499                                  ;
  3500                                  ;-----------------------------------------------------------------------------------------------------------------------
  3501 00000CF4 A005080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  3502 00000CF9 FEC0                    			inc	al						;increment row
  3503 00000CFB A205080000              			mov	[wbConsoleRow],al				;save row
  3504 00000D00 3C18                    			cmp	al,ECONROWS					;end of screen?
  3505 00000D02 7211                    			jb	.10						;no, skip ahead
  3506 00000D04 E8D8020000              			call	ScrollConsoleRow				;scroll up one row
  3507 00000D09 A005080000              			mov	al,[wbConsoleRow]				;row
  3508 00000D0E FEC8                    			dec	al						;decrement row
  3509 00000D10 A205080000              			mov	[wbConsoleRow],al				;save row
  3510 00000D15 C3                      .10			ret							;return
  3511                                  ;-----------------------------------------------------------------------------------------------------------------------
  3512                                  ;
  3513                                  ;	Routine:	PutConsoleChar
  3514                                  ;
  3515                                  ;	Description:	This routine writes one ASCII character to the console screen.
  3516                                  ;
  3517                                  ;	In:		AL	ASCII character
  3518                                  ;			DS	OS data selector
  3519                                  ;
  3520                                  ;-----------------------------------------------------------------------------------------------------------------------
  3521 00000D16 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  3522 00000D17 06                      			push	es						;
  3523 00000D18 6A20                    			push	ESELCGA						;load CGA selector ...
  3524 00000D1A 07                      			pop	es						;... into extra segment reg
  3525 00000D1B 8A0D04080000            			mov	cl,[wbConsoleColumn]				;column
  3526 00000D21 8A2D05080000            			mov	ch,[wbConsoleRow]				;row
  3527 00000D27 E8F1020000              			call	SetConsoleChar					;put character at row, column
  3528 00000D2C 07                      			pop	es						;restore non-volatile regs
  3529 00000D2D 59                      			pop	ecx						;
  3530 00000D2E C3                      			ret							;return
  3531                                  ;-----------------------------------------------------------------------------------------------------------------------
  3532                                  ;
  3533                                  ;	Routine:	PutConsoleOIAShift
  3534                                  ;
  3535                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3536                                  ;
  3537                                  ;	In:		BL	shift flags
  3538                                  ;			BH	lock flags
  3539                                  ;			DS	OS data selector
  3540                                  ;
  3541                                  ;-----------------------------------------------------------------------------------------------------------------------
  3542 00000D2F 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  3543 00000D30 06                      			push	es						;
  3544 00000D31 6A20                    			push	ESELCGA						;load CGA selector ...
  3545 00000D33 07                      			pop	es						;... into ES register
  3546 00000D34 B518                    			mov	ch,ECONOIAROW					;OIA row
  3547 00000D36 B020                    			mov	al,EASCIISPACE					;space is default character
  3548 00000D38 F6C302                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  3549 00000D3B 7402                    			jz	.10						;no, skip ahead
  3550 00000D3D B053                    			mov	al,'S'						;yes, indicate with 'S'
  3551 00000D3F B10E                    .10			mov	cl,14						;indicator column
  3552 00000D41 E8D7020000              			call	SetConsoleChar					;display ASCII character
  3553 00000D46 B020                    			mov	al,EASCIISPACE					;ASCII space
  3554 00000D48 F6C310                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  3555 00000D4B 7402                    			jz	.20						;no, skip ahead
  3556 00000D4D B053                    			mov	al,'S'						;yes, indicate with 'S'
  3557 00000D4F B140                    .20			mov	cl,64						;indicator column
  3558 00000D51 E8C7020000              			call	SetConsoleChar					;display ASCII character
  3559 00000D56 B020                    			mov	al,EASCIISPACE					;ASCII space
  3560 00000D58 F6C301                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  3561 00000D5B 7402                    			jz	.30						;no, skip ahead
  3562 00000D5D B043                    			mov	al,'C'						;yes, indicate with 'C'
  3563 00000D5F B10F                    .30			mov	cl,15						;indicator column
  3564 00000D61 E8B7020000              			call	SetConsoleChar					;display ASCII character
  3565 00000D66 B020                    			mov	al,EASCIISPACE					;ASCII space
  3566 00000D68 F6C308                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  3567 00000D6B 7402                    			jz	.40						;no, skip ahead
  3568 00000D6D B043                    			mov	al,'C'						;yes, indicate with 'C'
  3569 00000D6F B13F                    .40			mov	cl,63						;indicator column
  3570 00000D71 E8A7020000              			call	SetConsoleChar					;display ASCII character
  3571 00000D76 B020                    			mov	al,EASCIISPACE					;ASCII space
  3572 00000D78 F6C304                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  3573 00000D7B 7402                    			jz	.50						;no, skip ahead
  3574 00000D7D B041                    			mov	al,'A'						;yes, indicate with 'A'
  3575 00000D7F B110                    .50			mov	cl,16						;indicator column
  3576 00000D81 E897020000              			call	SetConsoleChar					;display ASCII character
  3577 00000D86 B020                    			mov	al,EASCIISPACE					;ASCII space
  3578 00000D88 F6C320                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  3579 00000D8B 7402                    			jz	.60						;no, skip ahead
  3580 00000D8D B041                    			mov	al,'A'						;yes, indicate with 'A'
  3581 00000D8F B13E                    .60			mov	cl,62						;indicator column
  3582 00000D91 E887020000              			call	SetConsoleChar					;display ASCII character
  3583 00000D96 B020                    			mov	al,EASCIISPACE					;ASCII space
  3584 00000D98 F6C704                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  3585 00000D9B 7402                    			jz	.70						;no, skip ahead
  3586 00000D9D B043                    			mov	al,'C'						;yes, indicate with 'C'
  3587 00000D9F B14E                    .70			mov	cl,78						;indicator column
  3588 00000DA1 E877020000              			call	SetConsoleChar					;display ASCII character
  3589 00000DA6 B020                    			mov	al,EASCIISPACE					;ASCII space
  3590 00000DA8 F6C702                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  3591 00000DAB 7402                    			jz	.80						;no, skip ahead
  3592 00000DAD B04E                    			mov	al,'N'						;yes, indicate with 'N'
  3593 00000DAF B14D                    .80			mov	cl,77						;indicator column
  3594 00000DB1 E867020000              			call	SetConsoleChar					;display ASCII character
  3595 00000DB6 B020                    			mov	al,EASCIISPACE					;ASCII space
  3596 00000DB8 F6C701                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  3597 00000DBB 7402                    			jz	.90						;no, skip ahead
  3598 00000DBD B053                    			mov	al,'S'						;yes, indicate with 'S'
  3599 00000DBF B14C                    .90			mov	cl,76						;indicator column
  3600 00000DC1 E857020000              			call	SetConsoleChar					;display ASCII character
  3601 00000DC6 07                      			pop	es						;restore non-volatile regs
  3602 00000DC7 59                      			pop	ecx						;
  3603 00000DC8 C3                      			ret							;return
  3604                                  ;-----------------------------------------------------------------------------------------------------------------------
  3605                                  ;
  3606                                  ;	Routine:	PutConsoleOIAChar
  3607                                  ;
  3608                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  3609                                  ;
  3610                                  ;	In:		DS	OS data selector
  3611                                  ;
  3612                                  ;-----------------------------------------------------------------------------------------------------------------------
  3613 00000DC9 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  3614 00000DCA 51                      			push	ecx						;
  3615 00000DCB 56                      			push	esi						;
  3616 00000DCC 1E                      			push	ds						;
  3617 00000DCD 06                      			push	es						;
  3618 00000DCE 6A18                    			push	ESELDAT						;load OS data selector ...
  3619 00000DD0 1F                      			pop	ds						;... into data segment register
  3620 00000DD1 6A20                    			push	ESELCGA						;load CGA selector ...
  3621 00000DD3 07                      			pop	es						;... into extra segment register
  3622 00000DD4 BE09080000              			mov	esi,wbConsoleScan0				;scan codes address
  3623 00000DD9 B718                    			mov	bh,ECONOIAROW					;OIA row
  3624 00000DDB B300                    			mov	bl,0						;starting column
  3625 00000DDD B906000000              			mov	ecx,6						;maximum scan codes
  3626 00000DE2 51                      .10			push	ecx						;save remaining count
  3627 00000DE3 89D9                    			mov	ecx,ebx						;row, column
  3628 00000DE5 AC                      			lodsb							;read scan code
  3629 00000DE6 08C0                    			or	al,al						;scan code present?
  3630 00000DE8 7407                    			jz	.20						;no, skip ahead
  3631 00000DEA E852000000              			call	PutConsoleHexByte				;display scan code
  3632 00000DEF EB0E                    			jmp	.30						;continue
  3633 00000DF1 B020                    .20			mov	al,' '						;ASCII space
  3634 00000DF3 E825020000              			call	SetConsoleChar					;display space
  3635 00000DF8 B020                    			mov	al,' '						;ASCII space
  3636 00000DFA E81E020000              			call	SetConsoleChar					;display space
  3637 00000DFF 80C302                  .30			add	bl,2						;next column (+2)
  3638 00000E02 59                      			pop	ecx						;restore remaining
  3639 00000E03 E2DD                    			loop	.10						;next code
  3640 00000E05 A00F080000              			mov	al,[wbConsoleChar]				;console ASCII character
  3641 00000E0A 3C20                    			cmp	al,32						;printable? (lower-bounds)
  3642 00000E0C 720D                    			jb	.40						;no, skip ahead
  3643 00000E0E 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  3644 00000E10 7709                    			ja	.40						;no, skip ahead
  3645 00000E12 88FD                    			mov	ch,bh						;OIA row
  3646 00000E14 B128                    			mov	cl,40						;character display column
  3647 00000E16 E802020000              			call	SetConsoleChar					;display ASCII character
  3648 00000E1B 07                      .40			pop	es						;restore non-volatile regs
  3649 00000E1C 1F                      			pop	ds						;
  3650 00000E1D 5E                      			pop	esi						;
  3651 00000E1E 59                      			pop	ecx						;
  3652 00000E1F 5B                      			pop	ebx						;
  3653 00000E20 C3                      			ret							;return
  3654                                  ;-----------------------------------------------------------------------------------------------------------------------
  3655                                  ;
  3656                                  ;	Routine:	PutConsoleHexDword
  3657                                  ;
  3658                                  ;	Description:	This routine writes eight ASCII characters to the console representing a doubleword value.
  3659                                  ;
  3660                                  ;	In:		EAX	value
  3661                                  ;			CL	column
  3662                                  ;			CH	row
  3663                                  ;			DS	OS data selector
  3664                                  ;			ES	CGA selector
  3665                                  ;
  3666                                  ;-----------------------------------------------------------------------------------------------------------------------
  3667 00000E21 50                      PutConsoleHexDword	push	eax
  3668 00000E22 C1E810                  			shr	eax,16
  3669 00000E25 E807000000              			call	PutConsoleHexWord
  3670 00000E2A 58                      			pop	eax
  3671 00000E2B E801000000              			call	PutConsoleHexWord
  3672 00000E30 C3                      			ret
  3673                                  ;-----------------------------------------------------------------------------------------------------------------------
  3674                                  ;
  3675                                  ;	Routine:	PutConsoleHexWord
  3676                                  ;
  3677                                  ;	Description:	This routine writes four ASCII characters to the console representing a word value.
  3678                                  ;
  3679                                  ;	In:		EAX	value
  3680                                  ;			CL	column
  3681                                  ;			CH	row
  3682                                  ;			DS	OS data selector
  3683                                  ;			ES	CGA selector
  3684                                  ;
  3685                                  ;-----------------------------------------------------------------------------------------------------------------------
  3686 00000E31 50                      PutConsoleHexWord	push	eax
  3687 00000E32 C1E808                  			shr	eax,8
  3688 00000E35 E807000000              			call	PutConsoleHexByte
  3689 00000E3A 58                      			pop	eax
  3690 00000E3B E801000000              			call	PutConsoleHexByte
  3691 00000E40 C3                      			ret
  3692                                  ;-----------------------------------------------------------------------------------------------------------------------
  3693                                  ;
  3694                                  ;	Routine:	PutConsoleHexByte
  3695                                  ;
  3696                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  3697                                  ;
  3698                                  ;	In:		AL	byte value
  3699                                  ;			CL	column
  3700                                  ;			CH	row
  3701                                  ;			DS	OS data selector
  3702                                  ;			ES	CGA selector
  3703                                  ;
  3704                                  ;-----------------------------------------------------------------------------------------------------------------------
  3705 00000E41 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  3706 00000E42 88C3                    			mov	bl,al						;save byte value
  3707 00000E44 C0E804                  			shr	al,4						;hi-order nybble
  3708 00000E47 0C30                    			or	al,030h						;apply ASCII zone
  3709 00000E49 3C3A                    			cmp	al,03ah						;numeric?
  3710 00000E4B 7202                    			jb	.10						;yes, skip ahead
  3711 00000E4D 0407                    			add	al,7						;add ASCII offset for alpha
  3712 00000E4F E8C9010000              .10			call	SetConsoleChar					;display ASCII character
  3713 00000E54 88D8                    			mov	al,bl						;byte value
  3714 00000E56 240F                    			and	al,0fh						;lo-order nybble
  3715 00000E58 0C30                    			or	al,30h						;apply ASCII zone
  3716 00000E5A 3C3A                    			cmp	al,03ah						;numeric?
  3717 00000E5C 7202                    			jb	.20						;yes, skip ahead
  3718 00000E5E 0407                    			add	al,7						;add ASCII offset for alpha
  3719 00000E60 E8B8010000              .20			call	SetConsoleChar					;display ASCII character
  3720 00000E65 5B                      			pop	ebx						;restore non-volatile regs
  3721 00000E66 C3                      			ret							;return
  3722                                  ;=======================================================================================================================
  3723                                  ;
  3724                                  ;	Data-Type Conversion Helper Routines
  3725                                  ;
  3726                                  ;	UnsignedToDecimalString
  3727                                  ;	UnsignedToHexadecimal
  3728                                  ;	HexadecimalToUnsigned
  3729                                  ;
  3730                                  ;=======================================================================================================================
  3731                                  ;-----------------------------------------------------------------------------------------------------------------------
  3732                                  ;
  3733                                  ;	Routine:	UnsignedToDecimalString
  3734                                  ;
  3735                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3736                                  ;
  3737                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  3738                                  ;						bit 1: 1 = include comma grouping delimiters
  3739                                  ;						bit 4: 1 = non-zero digit found (internal)
  3740                                  ;			ECX	32-bit binary
  3741                                  ;			DS:EDX	output buffer address
  3742                                  ;
  3743                                  ;-----------------------------------------------------------------------------------------------------------------------
  3744 00000E67 53                      UnsignedToDecimalString push	ebx						;save non-volatile regs
  3745 00000E68 51                      			push	ecx						;
  3746 00000E69 57                      			push	edi						;
  3747 00000E6A 06                      			push	es						;
  3748 00000E6B 1E                      			push	ds						;load data selector
  3749 00000E6C 07                      			pop	es						;... into extra segment reg
  3750 00000E6D 89D7                    			mov	edi,edx 					;output buffer address
  3751 00000E6F 80E70F                  			and	bh,00001111b					;zero internal flags
  3752 00000E72 89CA                    			mov	edx,ecx 					;binary
  3753 00000E74 B900CA9A3B              			mov	ecx,1000000000					;10^9 divisor
  3754 00000E79 E871000000              			call	.30						;divide and store
  3755 00000E7E B900E1F505              			mov	ecx,100000000					;10^8 divisor
  3756 00000E83 E855000000              			call	.10						;divide and store
  3757 00000E88 B980969800              			mov	ecx,10000000					;10^7 divisor
  3758 00000E8D E85D000000              			call	.30						;divide and store
  3759 00000E92 B940420F00              			mov	ecx,1000000					;10^6 divisor
  3760 00000E97 E853000000              			call	.30						;divide and store
  3761 00000E9C B9A0860100              			mov	ecx,100000					;10^5 divisor
  3762 00000EA1 E837000000              			call	.10						;divide and store
  3763 00000EA6 B910270000              			mov	ecx,10000					;10^4 divisor
  3764 00000EAB E83F000000              			call	.30						;divide and store
  3765 00000EB0 B9E8030000              			mov	ecx,1000					;10^3 divisor
  3766 00000EB5 E835000000              			call	.30						;divide and store
  3767 00000EBA B964000000              			mov	ecx,100 					;10^2 divisor
  3768 00000EBF E819000000              			call	.10						;divide and store
  3769 00000EC4 B90A000000              			mov	ecx,10						;10^2 divisor
  3770 00000EC9 E821000000              			call	.30						;divide and store
  3771 00000ECE 89D0                    			mov	eax,edx 					;10^1 remainder
  3772 00000ED0 E827000000              			call	.40						;store
  3773 00000ED5 30C0                    			xor	al,al						;null terminator
  3774 00000ED7 AA                      			stosb
  3775 00000ED8 07                      			pop	es						;restore non-volatile regs
  3776 00000ED9 5F                      			pop	edi						;
  3777 00000EDA 59                      			pop	ecx						;
  3778 00000EDB 5B                      			pop	ebx						;
  3779 00000EDC C3                      			ret							;return
  3780 00000EDD F6C702                  .10			test	bh,00000010b					;comma group delims?
  3781 00000EE0 740D                    			jz	.30						;no, branch
  3782 00000EE2 F6C701                  			test	bh,00000001b					;trim leading zeros?
  3783 00000EE5 7405                    			jz	.20						;no, store delim
  3784 00000EE7 F6C710                  			test	bh,00010000b					;non-zero found?
  3785 00000EEA 7403                    			jz	.30						;no, branch
  3786 00000EEC B02C                    .20			mov	al,','						;delimiter
  3787 00000EEE AA                      			stosb							;store delimiter
  3788 00000EEF 89D0                    .30			mov	eax,edx 					;lo-orer dividend
  3789 00000EF1 31D2                    			xor	edx,edx 					;zero hi-order
  3790 00000EF3 F7F1                    			div	ecx						;divide by power of 10
  3791 00000EF5 84C0                    			test	al,al						;zero?
  3792 00000EF7 7407                    			jz	.50						;yes, branch
  3793 00000EF9 80CF10                  			or	bh,00010000b					;non-zero found
  3794 00000EFC 0C30                    .40			or	al,30h						;ASCII zone
  3795 00000EFE AA                      			stosb							;store digit
  3796 00000EFF C3                      			ret							;return
  3797 00000F00 F6C701                  .50			test	bh,00000001b					;trim leading zeros?
  3798 00000F03 74F7                    			jz	.40						;no, store and continue
  3799 00000F05 F6C710                  			test	bh,00010000b					;non-zero found?
  3800 00000F08 75F2                    			jnz	.40						;yes, store and continue
  3801 00000F0A C3                      			ret							;return
  3802                                  ;-----------------------------------------------------------------------------------------------------------------------
  3803                                  ;
  3804                                  ;	Routine:	UnsignedToHexadecimal
  3805                                  ;
  3806                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3807                                  ;
  3808                                  ;	Input:		DS:EDX	output buffer address
  3809                                  ;			ECX	32-bit binary
  3810                                  ;
  3811                                  ;-----------------------------------------------------------------------------------------------------------------------
  3812 00000F0B 57                      UnsignedToHexadecimal	push	edi						;store non-volatile regs
  3813 00000F0C 89D7                    			mov	edi,edx						;output buffer address
  3814 00000F0E 89CA                    			mov	edx,ecx						;32-bit unsigned
  3815 00000F10 31C9                    			xor	ecx,ecx						;zero register
  3816 00000F12 B108                    			mov	cl,8						;nybble count
  3817 00000F14 C1C204                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  3818 00000F17 88D0                    			mov	al,dl						;????bbbb
  3819 00000F19 240F                    			and	al,0fh						;mask out bits 4-7
  3820 00000F1B 0C30                    			or	al,30h						;mask in ascii zone
  3821 00000F1D 3C3A                    			cmp	al,3ah						;A through F?
  3822 00000F1F 7202                    			jb	.20						;no, skip ahead
  3823 00000F21 0407                    			add	al,7						;41h through 46h
  3824 00000F23 AA                      .20			stosb							;store hexnum
  3825 00000F24 E2EE                    			loop	.10						;next nybble
  3826 00000F26 30C0                    			xor	al,al						;zero reg
  3827 00000F28 AA                      			stosb							;null terminate
  3828 00000F29 5F                      			pop	edi						;restore non-volatile regs
  3829 00000F2A C3                      			ret							;return
  3830                                  ;-----------------------------------------------------------------------------------------------------------------------
  3831                                  ;
  3832                                  ;	Routine:	HexadecimalToUnsigned
  3833                                  ;
  3834                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3835                                  ;
  3836                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  3837                                  ;
  3838                                  ;	Output: 	EAX	unsigned integer value
  3839                                  ;
  3840                                  ;-----------------------------------------------------------------------------------------------------------------------
  3841 00000F2B 56                      HexadecimalToUnsigned	push	esi						;save non-volatile regs
  3842 00000F2C 89D6                    			mov	esi,edx						;source address
  3843 00000F2E 31D2                    			xor	edx,edx						;zero register
  3844 00000F30 AC                      .10			lodsb							;source byte
  3845 00000F31 84C0                    			test	al,al						;end of string?
  3846 00000F33 7410                    			jz	.30						;yes, branch
  3847 00000F35 3C39                    			cmp	al,'9'						;hexadecimal?
  3848 00000F37 7602                    			jna	.20						;no, skip ahead
  3849 00000F39 2C37                    			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  3850 00000F3B 83E00F                  .20			and	eax,0fh						;remove ascii zone
  3851 00000F3E C1E204                  			shl	edx,4						;previous total x 16
  3852 00000F41 01C2                    			add	edx,eax						;add prior value x 16
  3853 00000F43 EBEB                    			jmp	.10						;next
  3854 00000F45 89D0                    .30			mov	eax,edx						;result
  3855 00000F47 5E                      			pop	esi						;restore non-volatile regs
  3856 00000F48 C3                      			ret							;return
  3857                                  ;=======================================================================================================================
  3858                                  ;
  3859                                  ;	Message Queue Helper Routines
  3860                                  ;
  3861                                  ;	PutMessage
  3862                                  ;	GetMessage
  3863                                  ;
  3864                                  ;=======================================================================================================================
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ;
  3867                                  ;	Routine:	PutMessage
  3868                                  ;
  3869                                  ;	Description:	This routine adda a message to the message queue.
  3870                                  ;
  3871                                  ;	In:		ECX	hi-order data word
  3872                                  ;			EDX	lo-order data word
  3873                                  ;
  3874                                  ;	Out:		CY	0 = success
  3875                                  ;				1 = fail: queue is full
  3876                                  ;
  3877                                  ;-----------------------------------------------------------------------------------------------------------------------
  3878 00000F49 1E                      PutMessage		push	ds						;save non-volatile regs
  3879 00000F4A 6A2C                    			push	ESELMQ						;load task message queue selector ...
  3880 00000F4C 1F                      			pop	ds						;... into data segment register
  3881 00000F4D A104000000              			mov	eax,[MQTail]					;tail ptr
  3882 00000F52 833800                  			cmp	dword [eax],0					;is queue full?
  3883 00000F55 F9                      			stc							;assume failure
  3884 00000F56 7517                    			jne	.20						;yes, cannot store
  3885 00000F58 8910                    			mov	[eax],edx					;store lo-order data
  3886 00000F5A 894804                  			mov	[eax+4],ecx					;store hi-order data
  3887 00000F5D 83C008                  			add	eax,8						;next queue element adr
  3888 00000F60 25FC030000              			and	eax,03fch					;at end of queue?
  3889 00000F65 7502                    			jnz	.10						;no, skip ahead
  3890 00000F67 B008                    			mov	al,8						;reset to top of queue
  3891 00000F69 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  3892 00000F6E F8                      			clc							;indicate success
  3893 00000F6F 1F                      .20			pop	ds						;restore non-volatile regs
  3894 00000F70 C3                      			ret							;return
  3895                                  ;-----------------------------------------------------------------------------------------------------------------------
  3896                                  ;
  3897                                  ;	Routine:	GetMessage
  3898                                  ;
  3899                                  ;	Description:	This routine reads and removes a message from the message queue.
  3900                                  ;
  3901                                  ;	Out:		EAX	lo-order message data
  3902                                  ;			EDX	hi-order message data
  3903                                  ;
  3904                                  ;			CY	0 = message read
  3905                                  ;				1 = no message to read
  3906                                  ;
  3907                                  ;-----------------------------------------------------------------------------------------------------------------------
  3908 00000F71 53                      GetMessage		push	ebx						;save non-volatile regs
  3909 00000F72 51                      			push	ecx						;
  3910 00000F73 1E                      			push	ds						;
  3911 00000F74 6A2C                    			push	ESELMQ						;load message queue selector ...
  3912 00000F76 1F                      			pop	ds						;... into data segment register
  3913 00000F77 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  3914 00000F7D 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  3915 00000F7F 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  3916 00000F82 09D0                    			or	eax,edx						;is queue empty?
  3917 00000F84 F9                      			stc							;assume queue is emtpy
  3918 00000F85 741B                    			jz	.20						;yes, skip ahead
  3919 00000F87 31C9                    			xor	ecx,ecx						;store zero
  3920 00000F89 890B                    			mov	[ebx],ecx					;... in lo-order dword
  3921 00000F8B 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  3922 00000F8E 83C308                  			add	ebx,8						;next queue element
  3923 00000F91 81E3FC030000            			and	ebx,03fch					;at end of queue?
  3924 00000F97 7502                    			jnz	.10						;no, skip ahead
  3925 00000F99 B308                    			mov	bl,8						;reset to 1st entry
  3926 00000F9B 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  3927 00000FA1 F8                      			clc							;indicate message read
  3928 00000FA2 1F                      .20			pop	ds						;restore non-volatile regs
  3929 00000FA3 59                      			pop	ecx						;
  3930 00000FA4 5B                      			pop	ebx						;
  3931 00000FA5 C3                      			ret							;return
  3932                                  ;=======================================================================================================================
  3933                                  ;
  3934                                  ;	Memory-Mapped Video Routines
  3935                                  ;
  3936                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  3937                                  ;
  3938                                  ;	ClearConsoleScreen
  3939                                  ;	ScrollConsoleRow
  3940                                  ;	SetConsoleChar
  3941                                  ;
  3942                                  ;=======================================================================================================================
  3943                                  ;-----------------------------------------------------------------------------------------------------------------------
  3944                                  ;
  3945                                  ;	Routine:	ClearConsoleScreen
  3946                                  ;
  3947                                  ;	Description:	This routine clears the console (CGA) screen.
  3948                                  ;
  3949                                  ;-----------------------------------------------------------------------------------------------------------------------
  3950 00000FA6 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  3951 00000FA7 57                      			push	edi						;
  3952 00000FA8 1E                      			push	ds						;
  3953 00000FA9 06                      			push	es						;
  3954 00000FAA 6A18                    			push	ESELDAT						;load OS Data selector ...
  3955 00000FAC 1F                      			pop	ds						;... into DS register
  3956 00000FAD 6A20                    			push	ESELCGA						;load CGA selector ...
  3957 00000FAF 07                      			pop	es						;... into ES register
  3958 00000FB0 B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  3959 00000FB5 B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  3960 00000FBA 31FF                    			xor	edi,edi						;target offset
  3961 00000FBC FC                      			cld							;forward strings
  3962 00000FBD F3AB                    			rep	stosd						;reset screen body
  3963 00000FBF B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  3964 00000FC4 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  3965 00000FC9 F3AB                    			rep	stosd						;reset OIA line
  3966 00000FCB 30C0                    			xor	al,al						;zero register
  3967 00000FCD A205080000              			mov	[wbConsoleRow],al				;reset console row
  3968 00000FD2 A204080000              			mov	[wbConsoleColumn],al				;reset console column
  3969 00000FD7 E857000000              			call	PlaceCursor					;place cursor at current position
  3970 00000FDC 07                      			pop	es						;restore non-volatile regs
  3971 00000FDD 1F                      			pop	ds						;
  3972 00000FDE 5F                      			pop	edi						;
  3973 00000FDF 59                      			pop	ecx						;
  3974 00000FE0 C3                      			ret							;return
  3975                                  ;-----------------------------------------------------------------------------------------------------------------------
  3976                                  ;
  3977                                  ;	Routine:	ScrollConsoleRow
  3978                                  ;
  3979                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  3980                                  ;
  3981                                  ;-----------------------------------------------------------------------------------------------------------------------
  3982 00000FE1 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  3983 00000FE2 56                      			push	esi						;
  3984 00000FE3 57                      			push	edi						;
  3985 00000FE4 1E                      			push	ds						;
  3986 00000FE5 06                      			push	es						;
  3987 00000FE6 6A20                    			push	ESELCGA						;load CGA video selector ...
  3988 00000FE8 1F                      			pop	ds						;... into DS
  3989 00000FE9 6A20                    			push	ESELCGA						;load CGA video selector ...
  3990 00000FEB 07                      			pop	es						;... into ES
  3991 00000FEC B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  3992 00000FF1 BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  3993 00000FF6 31FF                    			xor	edi,edi						;edi = target (line 1)
  3994 00000FF8 FC                      			cld							;forward strings
  3995 00000FF9 F3A5                    			rep	movsd						;move 24 lines up
  3996 00000FFB B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  3997 00001000 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  3998 00001005 F3AB                    			rep	stosd						;clear bottom row
  3999 00001007 07                      			pop	es						;restore non-volatile regs
  4000 00001008 1F                      			pop	ds						;
  4001 00001009 5F                      			pop	edi						;
  4002 0000100A 5E                      			pop	esi						;
  4003 0000100B 59                      			pop	ecx						;
  4004 0000100C C3                      			ret							;return
  4005                                  ;-----------------------------------------------------------------------------------------------------------------------
  4006                                  ;
  4007                                  ;	Routine:	SetConsoleString
  4008                                  ;
  4009                                  ;	Description:	This routine outputs a sequence of ASCII character at the given row and column.
  4010                                  ;
  4011                                  ;	In:		ESI	source offset (DS:)
  4012                                  ;			CL	column
  4013                                  ;			CH	row
  4014                                  ;			ES	CGA selector
  4015                                  ;
  4016                                  ;-----------------------------------------------------------------------------------------------------------------------
  4017 0000100D 56                      SetConsoleString	push	esi						;save non-volatile regs
  4018 0000100E FC                      			cld							;forward strings
  4019 0000100F AC                      .10			lodsb							;next ASCII character
  4020 00001010 84C0                    			test	al,al						;end of string?
  4021 00001012 7407                    			jz	.20						;yes, branch
  4022 00001014 E804000000              			call	SetConsoleChar					;store character
  4023 00001019 EBF4                    			jmp	.10						;continue
  4024 0000101B 5E                      .20			pop	esi						;restore non-volatile regs
  4025 0000101C C3                      			ret							;return
  4026                                  ;-----------------------------------------------------------------------------------------------------------------------
  4027                                  ;
  4028                                  ;	Routine:	SetConsoleChar
  4029                                  ;
  4030                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  4031                                  ;
  4032                                  ;	In:		AL	ASCII character
  4033                                  ;			CL	column
  4034                                  ;			CH	row
  4035                                  ;			ES	CGA selector
  4036                                  ;
  4037                                  ;	Out:		EAX	last target address written (ES:)
  4038                                  ;			CL	column + 1
  4039                                  ;
  4040                                  ;-----------------------------------------------------------------------------------------------------------------------
  4041 0000101D 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  4042 0000101F 0FB6C5                  			movzx	eax,ch						;row
  4043 00001022 B450                    			mov	ah,ECONCOLS					;cols/row
  4044 00001024 F6E4                    			mul	ah						;row * cols/row
  4045 00001026 00C8                    			add	al,cl						;add column
  4046 00001028 80D400                  			adc	ah,0						;handle carry
  4047 0000102B D1E0                    			shl	eax,1						;screen offset
  4048 0000102D 268810                  			mov	[es:eax],dl					;store character
  4049 00001030 FEC1                    			inc	cl						;next column
  4050 00001032 C3                      			ret							;return
  4051                                  ;=======================================================================================================================
  4052                                  ;
  4053                                  ;	Input/Output Routines
  4054                                  ;
  4055                                  ;	These routines read and/or write directly to ports.
  4056                                  ;
  4057                                  ;	PlaceCursor
  4058                                  ;	PutPrimaryEndOfInt
  4059                                  ;	PutSecondaryEndOfInt
  4060                                  ;	ReadRealTimeClock
  4061                                  ;	ResetSystem
  4062                                  ;	SetKeyboardLamps
  4063                                  ;	WaitForKeyInBuffer
  4064                                  ;	WaitForKeyOutBuffer
  4065                                  ;
  4066                                  ;=======================================================================================================================
  4067                                  ;-----------------------------------------------------------------------------------------------------------------------
  4068                                  ;
  4069                                  ;	Routine:	PlaceCursor
  4070                                  ;
  4071                                  ;	Description:	This routine positions the cursor on the console.
  4072                                  ;
  4073                                  ;	In:		DS	OS data selector
  4074                                  ;
  4075                                  ;-----------------------------------------------------------------------------------------------------------------------
  4076 00001033 51                      PlaceCursor		push	ecx						;save non-volatile regs
  4077 00001034 A005080000              			mov	al,[wbConsoleRow]				;al = row
  4078 00001039 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  4079 0000103B F6E4                    			mul	ah						;row offset
  4080 0000103D 020504080000            			add	al,[wbConsoleColumn]				;add column
  4081 00001043 80D400                  			adc	ah,0						;add overflow
  4082 00001046 89C1                    			mov	ecx,eax						;screen offset
  4083 00001048 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  4084 0000104A B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  4085 0000104C B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  4086 0000104E EE                      			out	dx,al						;select register
  4087 0000104F 42                      			inc	edx						;data port
  4088 00001050 88E8                    			mov	al,ch						;hi-order cursor loc
  4089 00001052 EE                      			out	dx,al						;store hi-order loc
  4090 00001053 4A                      			dec	edx						;register select port
  4091 00001054 B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  4092 00001056 EE                      			out	dx,al						;select register
  4093 00001057 42                      			inc	edx						;data port
  4094 00001058 88C8                    			mov	al,cl						;lo-order cursor loc
  4095 0000105A EE                      			out	dx,al						;store lo-order loc
  4096 0000105B 59                      			pop	ecx						;restore non-volatile regs
  4097 0000105C C3                      			ret							;return
  4098                                  ;-----------------------------------------------------------------------------------------------------------------------
  4099                                  ;
  4100                                  ;	Routine:	PutPrimaryEndOfInt
  4101                                  ;
  4102                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4103                                  ;
  4104                                  ;-----------------------------------------------------------------------------------------------------------------------
  4105 0000105D FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  4106 0000105E B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  4107 00001060 E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  4108 00001062 C3                      			ret							;return
  4109                                  ;-----------------------------------------------------------------------------------------------------------------------
  4110                                  ;
  4111                                  ;	Routine:	PutSecondaryEndOfInt
  4112                                  ;
  4113                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4114                                  ;
  4115                                  ;-----------------------------------------------------------------------------------------------------------------------
  4116 00001063 FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  4117 00001064 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  4118 00001066 E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  4119 00001068 C3                      			ret							;return
  4120                                  ;-----------------------------------------------------------------------------------------------------------------------
  4121                                  ;
  4122                                  ;	Routine:	ReadRealTimeClock
  4123                                  ;
  4124                                  ;	Description:	This routine gets current date time from the real-time clock.
  4125                                  ;
  4126                                  ;	In:		DS:EBX	DATETIME structure
  4127                                  ;
  4128                                  ;-----------------------------------------------------------------------------------------------------------------------
  4129 00001069 56                      ReadRealTimeClock	push	esi						;save non-volatile regs
  4130 0000106A 57                      			push	edi						;
  4131 0000106B 06                      			push	es						;
  4132 0000106C 1E                      			push	ds						;store data selector ...
  4133 0000106D 07                      			pop	es						;... in es register
  4134 0000106E 89DF                    			mov	edi,ebx						;date-time structure
  4135 00001070 B000                    			mov	al,ERTCSECONDREG				;second register
  4136 00001072 E670                    			out	ERTCREGPORT,al					;select second register
  4137 00001074 E471                    			in	al,ERTCDATAPORT					;read second register
  4138 00001076 FC                      			cld							;forward strings
  4139 00001077 AA                      			stosb							;store second value
  4140 00001078 B002                    			mov	al,ERTCMINUTEREG				;minute register
  4141 0000107A E670                    			out	ERTCREGPORT,al					;select minute register
  4142 0000107C E471                    			in	al,ERTCDATAPORT					;read minute register
  4143 0000107E AA                      			stosb							;store minute value
  4144 0000107F B004                    			mov	al,ERTCHOURREG					;hour register
  4145 00001081 E670                    			out	ERTCREGPORT,al					;select hour register
  4146 00001083 E471                    			in	al,ERTCDATAPORT					;read hour register
  4147 00001085 AA                      			stosb							;store hour value
  4148 00001086 B006                    			mov	al,ERTCWEEKDAYREG				;weekday register
  4149 00001088 E670                    			out	ERTCREGPORT,al					;select weekday register
  4150 0000108A E471                    			in	al,ERTCDATAPORT					;read weekday register
  4151 0000108C AA                      			stosb							;store weekday value
  4152 0000108D B007                    			mov	al,ERTCDAYREG					;day register
  4153 0000108F E670                    			out	ERTCREGPORT,al					;select day register
  4154 00001091 E471                    			in	al,ERTCDATAPORT					;read day register
  4155 00001093 AA                      			stosb							;store day value
  4156 00001094 B008                    			mov	al,ERTCMONTHREG					;month register
  4157 00001096 E670                    			out	ERTCREGPORT,al					;select month register
  4158 00001098 E471                    			in	al,ERTCDATAPORT					;read month register
  4159 0000109A AA                      			stosb							;store month value
  4160 0000109B B009                    			mov	al,ERTCYEARREG					;year register
  4161 0000109D E670                    			out	ERTCREGPORT,al					;select year register
  4162 0000109F E471                    			in	al,ERTCDATAPORT					;read year register
  4163 000010A1 AA                      			stosb							;store year value
  4164 000010A2 B032                    			mov	al,ERTCCENTURYREG				;century register
  4165 000010A4 E670                    			out	ERTCREGPORT,al					;select century register
  4166 000010A6 E471                    			in	al,ERTCDATAPORT					;read century register
  4167 000010A8 AA                      			stosb							;store century value
  4168 000010A9 B00B                    			mov	al,ERTCSTATUSREG				;status register
  4169 000010AB E670                    			out	ERTCREGPORT,al					;select status register
  4170 000010AD E471                    			in	al,ERTCDATAPORT					;read status register
  4171 000010AF A804                    			test	al,ERTCBINARYVALS				;test if values are binary
  4172 000010B1 751D                    			jnz	.20						;skip ahead if binary values
  4173 000010B3 89DE                    			mov	esi,ebx						;date-time structure address
  4174 000010B5 89DF                    			mov	edi,ebx						;date-time structure address
  4175 000010B7 B908000000              			mov	ecx,8						;loop counter
  4176 000010BC AC                      .10			lodsb							;BCD value
  4177 000010BD 88C4                    			mov	ah,al						;BCD value
  4178 000010BF 240F                    			and	al,00001111b					;low-order decimal zone
  4179 000010C1 80E4F0                  			and	ah,11110000b					;hi-order decimal zone
  4180 000010C4 D0EC                    			shr	ah,1						;hi-order decimal * 8
  4181 000010C6 00E0                    			add	al,ah						;low-order + hi-order * 8
  4182 000010C8 C0EC02                  			shr	ah,2						;hi-order decimal * 2
  4183 000010CB 00E0                    			add	al,ah						;low-order + hi-order * 10
  4184 000010CD AA                      			stosb							;replace BCD with binary
  4185 000010CE E2EC                    			loop	.10						;next value
  4186 000010D0 07                      .20			pop	es						;restore non-volatile regs
  4187 000010D1 5F                      			pop	edi						;
  4188 000010D2 5E                      			pop	esi						;
  4189 000010D3 C3                      			ret							;return
  4190                                  ;-----------------------------------------------------------------------------------------------------------------------
  4191                                  ;
  4192                                  ;	Routine:	ResetSystem
  4193                                  ;
  4194                                  ;	Description:	This routine restarts the system using the 8042 controller.
  4195                                  ;
  4196                                  ;	Out:		N/A	This routine does not return.
  4197                                  ;
  4198                                  ;-----------------------------------------------------------------------------------------------------------------------
  4199 000010D4 B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  4200 000010D9 E2FE                    			loop	$						;clear interrupts
  4201 000010DB B0FE                    			mov	al,EKEYBCMDRESET				;mask out bit zero
  4202 000010DD E664                    			out	EKEYBPORTSTAT,al				;drive bit zero low
  4203 000010DF FB                      .10			sti							;enable maskable interrupts
  4204 000010E0 F4                      			hlt							;halt until interrupt
  4205 000010E1 EBFC                    			jmp	.10						;repeat until reset kicks in
  4206                                  ;-----------------------------------------------------------------------------------------------------------------------
  4207                                  ;
  4208                                  ;	Routine:	SetKeyboardLamps
  4209                                  ;
  4210                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  4211                                  ;
  4212                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4213                                  ;
  4214                                  ;-----------------------------------------------------------------------------------------------------------------------
  4215 000010E3 E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  4216 000010E8 B0ED                    			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  4217 000010EA E660                    			out	EKEYBPORTDATA,al				;send command to 8042
  4218 000010EC E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  4219 000010F1 E460                    			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4220 000010F3 E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  4221 000010F8 88F8                    			mov	al,bh						;set/reset lamps value
  4222 000010FA E660                    			out	EKEYBPORTDATA,al				;send lamps value
  4223 000010FC E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  4224 00001101 E460                    			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  4225 00001103 C3                      			ret							;return
  4226                                  ;-----------------------------------------------------------------------------------------------------------------------
  4227                                  ;
  4228                                  ;	Routine:	WaitForKeyInBuffer
  4229                                  ;
  4230                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  4231                                  ;
  4232                                  ;	Out:		ZF	1 = Input buffer ready
  4233                                  ;				0 = Input buffer not ready after timeout
  4234                                  ;
  4235                                  ;-----------------------------------------------------------------------------------------------------------------------
  4236 00001104 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  4237 00001105 B900000100              			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4238 0000110A E464                    .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4239 0000110C A802                    			test	al,EKEYBBITIN					;is input buffer still full?
  4240 0000110E E0FA                    			loopnz	.10						;yes, repeat till timeout
  4241 00001110 59                      			pop	ecx						;restore non-volatile regs
  4242 00001111 C3                      			ret							;return
  4243                                  ;-----------------------------------------------------------------------------------------------------------------------
  4244                                  ;
  4245                                  ;	Routine:	WaitForKeyOutBuffer
  4246                                  ;
  4247                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  4248                                  ;
  4249                                  ;	Out:		ZF	1 = Output buffer has data from controller
  4250                                  ;				0 = Output buffer empty after timeout
  4251                                  ;
  4252                                  ;-----------------------------------------------------------------------------------------------------------------------
  4253 00001112 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  4254 00001113 B900000100              			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  4255 00001118 E464                    .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  4256 0000111A A801                    			test	al,EKEYBBITOUT					;output buffer status bit
  4257 0000111C E1FA                    			loopz	.10						;loop until output buffer bit
  4258 0000111E 59                      			pop	ecx						;restore non-volatile regs
  4259 0000111F C3                      			ret							;return
  4260                                  ;-----------------------------------------------------------------------------------------------------------------------
  4261                                  ;
  4262                                  ;	End of the Kernel Function Library
  4263                                  ;
  4264                                  ;-----------------------------------------------------------------------------------------------------------------------
  4265 00001120 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  4266 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  4267                                  ;=======================================================================================================================
  4268                                  ;
  4269                                  ;	Console Task
  4270                                  ;
  4271                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4272                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4273                                  ;	screen and responds to user commands.
  4274                                  ;
  4275                                  ;=======================================================================================================================
  4276                                  ;-----------------------------------------------------------------------------------------------------------------------
  4277                                  ;
  4278                                  ;	Console Stack								@disk: 007400	@mem:  004000
  4279                                  ;
  4280                                  ;	This is the stack for the console task. It supports 448 nested calls.
  4281                                  ;
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283                                  section			constack						;console task stack
  4284 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  4285                                  ;-----------------------------------------------------------------------------------------------------------------------
  4286                                  ;
  4287                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  4288                                  ;
  4289                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4290                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4291                                  ;	16 descriptors. Six are initially defined.
  4292                                  ;
  4293                                  ;-----------------------------------------------------------------------------------------------------------------------
  4294                                  section			conldt							;console local descriptors
  4295 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  4296 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  4297 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  4298 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  4299 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  4300 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  4301 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  4302                                  ;-----------------------------------------------------------------------------------------------------------------------
  4303                                  ;
  4304                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  4305                                  ;
  4306                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4307                                  ;	segment. CS to console code.
  4308                                  ;
  4309                                  ;-----------------------------------------------------------------------------------------------------------------------
  4310                                  section			contss							;console task state segment
  4311 00000000 00000000                			dd	0						;00 back-link tss
  4312 00000004 00070000                			dd	0700h						;04 esp ring 0
  4313 00000008 14000000                			dd	0014h						;08 ss ring 0
  4314 0000000C 00070000                			dd	0700h						;0C esp ring 1
  4315 00000010 14000000                			dd	0014h						;10 es ring 1
  4316 00000014 00070000                			dd	0700h						;14 esp ring 2
  4317 00000018 14000000                			dd	0014h						;18 ss ring 2
  4318 0000001C 00000000                			dd	0						;1C cr ring 3
  4319 00000020 00000000                			dd	0						;20 eip
  4320 00000024 00020000                			dd	0200h						;24 eflags
  4321 00000028 00000000                			dd	0						;28 eax
  4322 0000002C 00000000                			dd	0						;2C ecx
  4323 00000030 00000000                			dd	0						;30 edx
  4324 00000034 00000000                			dd	0						;34 ebx
  4325 00000038 00070000                			dd	0700h						;38 esp ring 3
  4326 0000003C 00000000                			dd	0						;3C ebp
  4327 00000040 00000000                			dd	0						;40 esi
  4328 00000044 00000000                			dd	0						;44 edi
  4329 00000048 1C000000                			dd	001Ch						;48 es
  4330 0000004C 24000000                			dd	0024h						;4C cs
  4331 00000050 14000000                			dd	0014h						;50 ss ring 3
  4332 00000054 1C000000                			dd	001Ch						;54 ds
  4333 00000058 00000000                			dd	0						;58 fs
  4334 0000005C 00000000                			dd	0						;5c gs
  4335 00000060 60000000                			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  4336 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  4337                                  ;-----------------------------------------------------------------------------------------------------------------------
  4338                                  ;
  4339                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  4340                                  ;
  4341                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4342                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4343                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4344                                  ;	event.
  4345                                  ;
  4346                                  ;-----------------------------------------------------------------------------------------------------------------------
  4347                                  section			conmque							;console message queue
  4348 00000000 08000000                			dd	8						;head pointer
  4349 00000004 08000000                			dd	8						;tail pointer
  4350 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  4351                                  ;-----------------------------------------------------------------------------------------------------------------------
  4352                                  ;
  4353                                  ;	Console Code								@disk: 008400	@mem: 005000
  4354                                  ;
  4355                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4356                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4357                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4358                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4359                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4360                                  ;	board input, echoing to the console screen and responding to user commands.
  4361                                  ;
  4362                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  4363                                  ;
  4364                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  4365                                  ;				|  Real Mode Interrupt Vectors			|
  4366                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  4367                                  ;				|  Reserved BIOS Memory Area			|
  4368                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  4369                                  ;				|  Shared Kernel Memory Area			|
  4370                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  4371                                  ;				|  Global Descriptor Table (GDT)		|
  4372                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  4373                                  ;				|  Interrupt Descriptor Table (IDT)		|
  4374                                  ;			002000	+-----------------------------------------------+
  4375                                  ;				|  Interrupt Handlers				|
  4376                                  ;				|  Kernel Function Library			|
  4377                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  4378                                  ;				|  Console Task Stack Area			|
  4379                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  4380                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  4381                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  4382                                  ;				|  Console Task Task State Segment (TSS)	|
  4383                                  ;			004800	+-----------------------------------------------+
  4384                                  ;				|  Console Task Message Queue			|
  4385                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  4386                                  ;				|  Console Task Code				|
  4387                                  ;				|  Console Task Constants			|
  4388                                  ;			006000	+===============================================+
  4389                                  ;
  4390                                  ;-----------------------------------------------------------------------------------------------------------------------
  4391                                  section			concode	vstart=05000h					;labels relative to 5000h
  4392 00000000 E874000000              ConCode			call	ConInitializeData				;initialize console variables
  4393                                  
  4394                                  			clearConsoleScreen					;clear the console screen
  4394 00000005 B000                <1>  mov al,eClearConsoleScreen
  4394 00000007 CD30                <1>  int _svc
  4395                                  			putConsoleString czTitle				;display startup message
  4395 00000009 BA[A0040000]        <1>  mov edx,%1
  4395 0000000E B006                <1>  mov al,ePutConsoleString
  4395 00000010 CD30                <1>  int _svc
  4396                                  .10			putConsoleString czPrompt				;display input prompt
  4396                              <1> .10 :
  4396 00000012 BA[9E040000]        <1>  mov edx,%1
  4396 00000017 B006                <1>  mov al,ePutConsoleString
  4396 00000019 CD30                <1>  int _svc
  4397                                  			placeCursor						;set CRT cursor location
  4397 0000001B B005                <1>  mov al,ePlaceCursor
  4397 0000001D CD30                <1>  int _svc
  4398                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  4398 0000001F BA10080000          <1>  mov edx,%1
  4398 00000024 B94F000000          <1>  mov ecx,%2
  4398 00000029 B701                <1>  mov bh,%3
  4398 0000002B B30D                <1>  mov bl,%4
  4398 0000002D B002                <1>  mov al,eGetConsoleString
  4398 0000002F CD30                <1>  int _svc
  4399                                  			putConsoleString czNewLine				;newline
  4399 00000031 BA[9B040000]        <1>  mov edx,%1
  4399 00000036 B006                <1>  mov al,ePutConsoleString
  4399 00000038 CD30                <1>  int _svc
  4400                                  
  4401 0000003A C6056008000000          			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  4402 00000041 BA10080000              			mov	edx,wzConsoleInBuffer				;console input buffer
  4403 00000046 BB60080000              			mov	ebx,wzConsoleToken				;token buffer
  4404 0000004B E842000000              			call	ConTakeToken					;handle console input
  4405 00000050 BA60080000              			mov	edx,wzConsoleToken				;token buffer
  4406 00000055 E866000000              			call	ConDetermineCommand				;determine command number
  4407 0000005A 83F816                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  4408 0000005D 720B                    			jb	.20						;yes, branch
  4409                                  
  4410                                  			putConsoleString czUnknownCommand			;display error message
  4410 0000005F BA[BE040000]        <1>  mov edx,%1
  4410 00000064 B006                <1>  mov al,ePutConsoleString
  4410 00000066 CD30                <1>  int _svc
  4411                                  
  4412 00000068 EBA8                    			jmp	.10						;next command
  4413 0000006A C1E002                  .20			shl	eax,2						;index into jump table
  4414 0000006D BA[9B030000]            			mov	edx,tConJmpTbl					;jump table base address
  4415 00000072 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  4416 00000075 FFD0                    			call	eax						;call command handler
  4417 00000077 EB99                    			jmp	.10						;next command
  4418                                  ;-----------------------------------------------------------------------------------------------------------------------
  4419                                  ;
  4420                                  ;	Routine:	ConInitializeData
  4421                                  ;
  4422                                  ;	Description:	This routine initializes console task variables.
  4423                                  ;
  4424                                  ;-----------------------------------------------------------------------------------------------------------------------
  4425 00000079 51                      ConInitializeData	push	ecx						;save non-volatile regs
  4426 0000007A 57                      			push	edi						;
  4427 0000007B 06                      			push	es						;
  4428                                  ;
  4429                                  ;	Initialize console work areas
  4430                                  ;
  4431 0000007C 6A18                    			push	ESELDAT						;load OS data selector ...
  4432 0000007E 07                      			pop	es						;... into extra segment register
  4433 0000007F BF00080000              			mov	edi,ECONDATA					;OS console data address
  4434 00000084 30C0                    			xor	al,al						;initialization value
  4435 00000086 B908010000              			mov	ecx,ECONDATALEN					;size of OS console data
  4436 0000008B FC                      			cld							;forward strings
  4437 0000008C F3AA                    			rep	stosb						;initialize data
  4438                                  ;
  4439                                  ;	Restore and return
  4440                                  ;
  4441 0000008E 07                      			pop	es						;restore non-volatile regs
  4442 0000008F 5F                      			pop	edi						;
  4443 00000090 59                      			pop	ecx						;
  4444 00000091 C3                      			ret							;return
  4445                                  ;-----------------------------------------------------------------------------------------------------------------------
  4446                                  ;
  4447                                  ;	Routine:	ConTakeToken
  4448                                  ;
  4449                                  ;	Description:	This routine extracts the next token from the given source buffer.
  4450                                  ;
  4451                                  ;	In:		DS:EDX	source buffer address
  4452                                  ;			DS:EBX	target buffer address
  4453                                  ;
  4454                                  ;	Out:		DS:EDX	source buffer address
  4455                                  ;			DS:EBX	target buffer address
  4456                                  ;
  4457                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  4458                                  ;
  4459                                  ;-----------------------------------------------------------------------------------------------------------------------
  4460 00000092 56                      ConTakeToken		push	esi						;save non-volatile regs
  4461 00000093 57                      			push	edi						;
  4462 00000094 89D6                    			mov	esi,edx						;source buffer address
  4463 00000096 89DF                    			mov	edi,ebx						;target buffer address
  4464 00000098 FC                      			cld							;forward strings
  4465 00000099 AC                      .10			lodsb							;load byte
  4466 0000009A 3C20                    			cmp	al,EASCIISPACE					;space?
  4467 0000009C 74FB                    			je	.10						;yes, continue
  4468 0000009E 84C0                    			test	al,al						;end of line?
  4469 000000A0 7410                    			jz	.40						;yes, branch
  4470 000000A2 AA                      .20			stosb							;store byte
  4471 000000A3 AC                      			lodsb							;load byte
  4472 000000A4 84C0                    			test	al,al						;end of line?
  4473 000000A6 740A                    			jz	.40						;no, continue
  4474 000000A8 3C20                    			cmp	al,EASCIISPACE					;space?
  4475 000000AA 75F6                    			jne	.20						;no, continue
  4476 000000AC AC                      .30			lodsb							;load byte
  4477 000000AD 3C20                    			cmp	al,EASCIISPACE					;space?
  4478 000000AF 74FB                    			je	.30						;yes, continue
  4479 000000B1 4E                      			dec	esi						;pre-position
  4480 000000B2 C60700                  .40			mov	byte [edi],0					;terminate buffer
  4481 000000B5 89D7                    			mov	edi,edx						;source buffer address
  4482 000000B7 AC                      .50			lodsb							;remaining byte
  4483 000000B8 AA                      			stosb							;move to front of buffer
  4484 000000B9 84C0                    			test	al,al						;end of line?
  4485 000000BB 75FA                    			jnz	.50						;no, continue
  4486 000000BD 5F                      			pop	edi						;restore non-volatile regs
  4487 000000BE 5E                      			pop	esi						;
  4488 000000BF C3                      			ret							;return
  4489                                  ;-----------------------------------------------------------------------------------------------------------------------
  4490                                  ;
  4491                                  ;	Routine:	ConDetermineCommand
  4492                                  ;
  4493                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  4494                                  ;
  4495                                  ;	input:		DS:EDX	command address
  4496                                  ;
  4497                                  ;	output:		EAX	>=0	= command nbr
  4498                                  ;				0	= unknown command
  4499                                  ;
  4500                                  ;-----------------------------------------------------------------------------------------------------------------------
  4501 000000C0 53                      ConDetermineCommand	push	ebx						;save non-volatile regs
  4502 000000C1 51                      			push	ecx						;
  4503 000000C2 56                      			push	esi						;
  4504 000000C3 57                      			push	edi						;
  4505                                  
  4506                                  			upperCaseString						;upper-case string at EDX
  4506 000000C4 B016                <1>  mov al,eUpperCaseString
  4506 000000C6 CD30                <1>  int _svc
  4507                                  
  4508 000000C8 BE[F3030000]            			mov	esi,tConCmdTbl					;commands table
  4509 000000CD 31FF                    			xor	edi,edi						;intialize command number
  4510 000000CF FC                      			cld							;forward strings
  4511 000000D0 AC                      .10			lodsb							;command length
  4512 000000D1 0FB6C8                  			movzx	ecx,al						;command length
  4513 000000D4 E30D                    			jecxz	.20						;branch if end of table
  4514 000000D6 89F3                    			mov	ebx,esi						;table entry address
  4515 000000D8 01CE                    			add	esi,ecx						;next table entry address
  4516                                  
  4517                                  			compareMemory						;compare byte arrays at EDX, EBX
  4517 000000DA B001                <1>  mov al,eCompareMemory
  4517 000000DC CD30                <1>  int _svc
  4518                                  
  4519 000000DE E303                    			jecxz	.20						;branch if equal
  4520 000000E0 47                      			inc	edi						;increment command nbr
  4521 000000E1 EBED                    			jmp	.10						;repeat
  4522 000000E3 89F8                    .20			mov	eax,edi						;command number
  4523 000000E5 5F                      			pop	edi						;restore non-volatile regs
  4524 000000E6 5E                      			pop	esi						;
  4525 000000E7 59                      			pop	ecx						;
  4526 000000E8 5B                      			pop	ebx						;
  4527 000000E9 C3                      			ret							;return
  4528                                  ;-----------------------------------------------------------------------------------------------------------------------
  4529                                  ;
  4530                                  ;	Routine:	ConClear
  4531                                  ;
  4532                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  4533                                  ;
  4534                                  ;-----------------------------------------------------------------------------------------------------------------------
  4535                                  ConClear		clearConsoleScreen					;clear console screen
  4535                              <1> ConClear :
  4535 000000EA B000                <1>  mov al,eClearConsoleScreen
  4535 000000EC CD30                <1>  int _svc
  4536 000000EE C3                      			ret							;return
  4537                                  ;-----------------------------------------------------------------------------------------------------------------------
  4538                                  ;
  4539                                  ;	Routine:	ConDate
  4540                                  ;
  4541                                  ;	Description:	This routine handles the DATE command.
  4542                                  ;
  4543                                  ;-----------------------------------------------------------------------------------------------------------------------
  4544                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4544                              <1> ConDate :
  4544 000000EF BB00090000          <1>  mov ebx,%1
  4544 000000F4 B012                <1>  mov al,eReadRealTimeClock
  4544 000000F6 CD30                <1>  int _svc
  4545                                  			putDateString	  wsConsoleDateTime,wzConsoleOutBuffer	;format date string
  4545 000000F8 BB00090000          <1>  mov ebx,%1
  4545 000000FD BAB0080000          <1>  mov edx,%2
  4545 00000102 B007                <1>  mov al,ePutDateString
  4545 00000104 CD30                <1>  int _svc
  4546                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4546 00000106 BAB0080000          <1>  mov edx,%1
  4546 0000010B B006                <1>  mov al,ePutConsoleString
  4546 0000010D CD30                <1>  int _svc
  4547                                  			putConsoleString  czNewLine				;write newline to console
  4547 0000010F BA[9B040000]        <1>  mov edx,%1
  4547 00000114 B006                <1>  mov al,ePutConsoleString
  4547 00000116 CD30                <1>  int _svc
  4548 00000118 C3                      			ret							;return
  4549                                  ;-----------------------------------------------------------------------------------------------------------------------
  4550                                  ;
  4551                                  ;	Routine:	ConDay
  4552                                  ;
  4553                                  ;	Description:	This routine handles the DAY command.
  4554                                  ;
  4555                                  ;-----------------------------------------------------------------------------------------------------------------------
  4556                                  ConDay			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4556                              <1> ConDay :
  4556 00000119 BB00090000          <1>  mov ebx,%1
  4556 0000011E B012                <1>  mov al,eReadRealTimeClock
  4556 00000120 CD30                <1>  int _svc
  4557                                  			putDayString      wsConsoleDateTime,wzConsoleOutBuffer	;format day string
  4557 00000122 BB00090000          <1>  mov ebx,%1
  4557 00000127 BAB0080000          <1>  mov edx,%2
  4557 0000012C B008                <1>  mov al,ePutDayString
  4557 0000012E CD30                <1>  int _svc
  4558                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4558 00000130 BAB0080000          <1>  mov edx,%1
  4558 00000135 B006                <1>  mov al,ePutConsoleString
  4558 00000137 CD30                <1>  int _svc
  4559                                  			putConsoleString  czNewLine				;write newline to console
  4559 00000139 BA[9B040000]        <1>  mov edx,%1
  4559 0000013E B006                <1>  mov al,ePutConsoleString
  4559 00000140 CD30                <1>  int _svc
  4560 00000142 C3                      			ret							;return
  4561                                  ;-----------------------------------------------------------------------------------------------------------------------
  4562                                  ;
  4563                                  ;	Routine:	ConExit
  4564                                  ;
  4565                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4566                                  ;
  4567                                  ;-----------------------------------------------------------------------------------------------------------------------
  4568                                  ConExit			resetSystem						;issue system reset
  4568                              <1> ConExit :
  4568 00000143 B013                <1>  mov al,eResetSystem
  4568 00000145 CD30                <1>  int _svc
  4569 00000147 C3                      			ret							;return
  4570                                  ;-----------------------------------------------------------------------------------------------------------------------
  4571                                  ;
  4572                                  ;	Routine:	ConHour
  4573                                  ;
  4574                                  ;	Description:	This routine Handles the HOUR command.
  4575                                  ;
  4576                                  ;-----------------------------------------------------------------------------------------------------------------------
  4577                                  ConHour			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4577                              <1> ConHour :
  4577 00000148 BB00090000          <1>  mov ebx,%1
  4577 0000014D B012                <1>  mov al,eReadRealTimeClock
  4577 0000014F CD30                <1>  int _svc
  4578                                  			putHourString     wsConsoleDateTime,wzConsoleOutBuffer	;format hour string
  4578 00000151 BB00090000          <1>  mov ebx,%1
  4578 00000156 BAB0080000          <1>  mov edx,%2
  4578 0000015B B009                <1>  mov al,ePutHourString
  4578 0000015D CD30                <1>  int _svc
  4579                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4579 0000015F BAB0080000          <1>  mov edx,%1
  4579 00000164 B006                <1>  mov al,ePutConsoleString
  4579 00000166 CD30                <1>  int _svc
  4580                                  			putConsoleString  czNewLine				;write newline to console
  4580 00000168 BA[9B040000]        <1>  mov edx,%1
  4580 0000016D B006                <1>  mov al,ePutConsoleString
  4580 0000016F CD30                <1>  int _svc
  4581 00000171 C3                      			ret							;return
  4582                                  ;-----------------------------------------------------------------------------------------------------------------------
  4583                                  ;
  4584                                  ;	Routine:	ConInt6
  4585                                  ;
  4586                                  ;	Description:	This routine issues an interrupt 6 to exercise the interrupt handler.
  4587                                  ;
  4588                                  ;-----------------------------------------------------------------------------------------------------------------------
  4589 00000172 0F0B                    ConInt6			ud2							;raise bad opcode exception
  4590 00000174 C3                      			ret							;return (not executed)
  4591                                  ;-----------------------------------------------------------------------------------------------------------------------
  4592                                  ;
  4593                                  ;	Routine:	ConMem
  4594                                  ;
  4595                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  4596                                  ;
  4597                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  4598                                  ;
  4599                                  ;-----------------------------------------------------------------------------------------------------------------------
  4600 00000175 53                      ConMem			push	ebx						;save non-volatile regs
  4601 00000176 56                      			push	esi						;
  4602 00000177 57                      			push	edi						;
  4603                                  ;
  4604                                  ;			update the source address if a parameter is given
  4605                                  ;
  4606 00000178 BA10080000              			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  4607 0000017D BB60080000              			mov	ebx,wzConsoleToken				;console command token address
  4608 00000182 E80BFFFFFF              			call	ConTakeToken					;take first param as token
  4609 00000187 803D6008000000          			cmp	byte [wzConsoleToken],0				;token found?
  4610 0000018E 740E                    			je	.10						;no, branch
  4611 00000190 BA60080000              			mov	edx,wzConsoleToken				;first param as token address
  4612                                  
  4613                                  			hexadecimalToUnsigned					;convert string token to unsigned
  4613 00000195 B003                <1>  mov al,eHexadecimalToUnsigned
  4613 00000197 CD30                <1>  int _svc
  4614                                  
  4615 00000199 A300080000              			mov	[wfConsoleMemAddr],eax				;save console memory address
  4616                                  ;
  4617                                  ;			setup source address and row count
  4618                                  ;
  4619 0000019E 8B3500080000            .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  4620 000001A4 31C9                    			xor	ecx,ecx						;zero register
  4621 000001A6 B110                    			mov	cl,16						;row count
  4622                                  ;
  4623                                  ;			start the row with the source address in hexadecimal
  4624                                  ;
  4625 000001A8 51                      .20			push	ecx						;save remaining rows
  4626 000001A9 BFB0080000              			mov	edi,wzConsoleOutBuffer				;output buffer address
  4627 000001AE 89FA                    			mov	edx,edi						;output buffer address
  4628 000001B0 89F1                    			mov	ecx,esi						;console memory address
  4629                                  
  4630                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  4630 000001B2 B015                <1>  mov al,eUnsignedToHexadecimal
  4630 000001B4 CD30                <1>  int _svc
  4631                                  
  4632 000001B6 83C708                  			add	edi,8						;end of memory addr hexnum
  4633 000001B9 B020                    			mov	al,' '						;ascii space
  4634 000001BB AA                      			stosb							;store delimiter
  4635                                  ;
  4636                                  ;			output 16 ASCII hexadecimal byte values for the row
  4637                                  ;
  4638 000001BC 31C9                    			xor	ecx,ecx						;zero register
  4639 000001BE B110                    			mov	cl,16						;loop count
  4640 000001C0 51                      .30			push	ecx						;save loop count
  4641 000001C1 AC                      			lodsb							;memory byte
  4642 000001C2 88C4                    			mov	ah,al						;memory byte
  4643 000001C4 C0E804                  			shr	al,4						;high-order in bits 3-0
  4644 000001C7 0C30                    			or	al,30h						;apply ascii numeric zone
  4645 000001C9 3C3A                    			cmp	al,3ah						;numeric range?
  4646 000001CB 7202                    			jb	.40						;yes, skip ahead
  4647 000001CD 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  4648 000001CF AA                      .40			stosb							;store ascii hexadecimal of high-order
  4649 000001D0 88E0                    			mov	al,ah						;low-order in bits 3-0
  4650 000001D2 240F                    			and	al,0fh						;mask out high-order bits
  4651 000001D4 0C30                    			or	al,30h						;apply ascii numeric zone
  4652 000001D6 3C3A                    			cmp	al,3ah						;numeric range?
  4653 000001D8 7202                    			jb	.50						;yes, skip ahead
  4654 000001DA 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  4655 000001DC AA                      .50			stosb							;store ascii hexadecimal of low-order
  4656 000001DD B020                    			mov	al,' '						;ascii space
  4657 000001DF AA                      			stosb							;store ascii space delimiter
  4658 000001E0 59                      			pop	ecx						;loop count
  4659 000001E1 E2DD                    			loop	.30						;next
  4660                                  ;
  4661                                  ;			output printable ASCII character section for the row
  4662                                  ;
  4663 000001E3 83EE10                  			sub	esi,16						;reset source pointer
  4664 000001E6 B110                    			mov	cl,16						;loop count
  4665 000001E8 AC                      .60			lodsb							;source byte
  4666 000001E9 3C20                    			cmp	al,32						;printable? (low-range test)
  4667 000001EB 7204                    			jb	.70						;no, skip ahead
  4668 000001ED 3C80                    			cmp	al,128						;printable? (high-range test)
  4669 000001EF 7202                    			jb	.80						;yes, skip ahead
  4670 000001F1 B020                    .70			mov	al,' '						;display space instead of printable
  4671 000001F3 AA                      .80			stosb							;store printable ascii byte
  4672 000001F4 E2F2                    			loop	.60						;next source byte
  4673 000001F6 30C0                    			xor	al,al						;nul-terminator
  4674 000001F8 AA                      			stosb							;terminate output line
  4675                                  ;
  4676                                  ;			display constructed output buffer and newline
  4677                                  ;
  4678                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  4678 000001F9 BAB0080000          <1>  mov edx,%1
  4678 000001FE B006                <1>  mov al,ePutConsoleString
  4678 00000200 CD30                <1>  int _svc
  4679                                  			putConsoleString czNewLine				;display new line
  4679 00000202 BA[9B040000]        <1>  mov edx,%1
  4679 00000207 B006                <1>  mov al,ePutConsoleString
  4679 00000209 CD30                <1>  int _svc
  4680                                  ;
  4681                                  ;			repeat until all lines displayed and preserve source address
  4682                                  ;
  4683 0000020B 59                      			pop	ecx						;remaining rows
  4684 0000020C E29A                    			loop	.20						;next row
  4685 0000020E 893500080000            			mov	[wfConsoleMemAddr],esi				;update console memory address
  4686 00000214 5F                      			pop	edi						;restore regs
  4687 00000215 5E                      			pop	esi						;
  4688 00000216 5B                      			pop	ebx						;
  4689 00000217 C3                      			ret							;return
  4690                                  ;-----------------------------------------------------------------------------------------------------------------------
  4691                                  ;
  4692                                  ;	Routine:	ConMinute
  4693                                  ;
  4694                                  ;	Description:	This routine Handles the MINUTE command.
  4695                                  ;
  4696                                  ;-----------------------------------------------------------------------------------------------------------------------
  4697                                  ConMinute		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4697                              <1> ConMinute :
  4697 00000218 BB00090000          <1>  mov ebx,%1
  4697 0000021D B012                <1>  mov al,eReadRealTimeClock
  4697 0000021F CD30                <1>  int _svc
  4698                                  			putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer	;format minute string
  4698 00000221 BB00090000          <1>  mov ebx,%1
  4698 00000226 BAB0080000          <1>  mov edx,%2
  4698 0000022B B00A                <1>  mov al,ePutMinuteString
  4698 0000022D CD30                <1>  int _svc
  4699                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4699 0000022F BAB0080000          <1>  mov edx,%1
  4699 00000234 B006                <1>  mov al,ePutConsoleString
  4699 00000236 CD30                <1>  int _svc
  4700                                  			putConsoleString  czNewLine				;write newline to console
  4700 00000238 BA[9B040000]        <1>  mov edx,%1
  4700 0000023D B006                <1>  mov al,ePutConsoleString
  4700 0000023F CD30                <1>  int _svc
  4701 00000241 C3                      			ret							;return
  4702                                  ;-----------------------------------------------------------------------------------------------------------------------
  4703                                  ;
  4704                                  ;	Routine:	ConMonth
  4705                                  ;
  4706                                  ;	Description:	This routine Handles the MONTH command.
  4707                                  ;
  4708                                  ;-----------------------------------------------------------------------------------------------------------------------
  4709                                  ConMonth		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4709                              <1> ConMonth :
  4709 00000242 BB00090000          <1>  mov ebx,%1
  4709 00000247 B012                <1>  mov al,eReadRealTimeClock
  4709 00000249 CD30                <1>  int _svc
  4710                                  			putMonthString    wsConsoleDateTime,wzConsoleOutBuffer	;format month string
  4710 0000024B BB00090000          <1>  mov ebx,%1
  4710 00000250 BAB0080000          <1>  mov edx,%2
  4710 00000255 B00B                <1>  mov al,ePutMonthString
  4710 00000257 CD30                <1>  int _svc
  4711                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4711 00000259 BAB0080000          <1>  mov edx,%1
  4711 0000025E B006                <1>  mov al,ePutConsoleString
  4711 00000260 CD30                <1>  int _svc
  4712                                  			putConsoleString  czNewLine				;write newline to console
  4712 00000262 BA[9B040000]        <1>  mov edx,%1
  4712 00000267 B006                <1>  mov al,ePutConsoleString
  4712 00000269 CD30                <1>  int _svc
  4713 0000026B C3                      			ret							;return
  4714                                  ;-----------------------------------------------------------------------------------------------------------------------
  4715                                  ;
  4716                                  ;	Routine:	ConMonthName
  4717                                  ;
  4718                                  ;	Description:	This routine Handles the MONTH.NAME command.
  4719                                  ;
  4720                                  ;-----------------------------------------------------------------------------------------------------------------------
  4721                                  ConMonthName		readRealTimeClock  wsConsoleDateTime			;read RTC data into structure
  4721                              <1> ConMonthName :
  4721 0000026C BB00090000          <1>  mov ebx,%1
  4721 00000271 B012                <1>  mov al,eReadRealTimeClock
  4721 00000273 CD30                <1>  int _svc
  4722                                  			putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer	;format month name string
  4722 00000275 BB00090000          <1>  mov ebx,%1
  4722 0000027A BAB0080000          <1>  mov edx,%2
  4722 0000027F B00C                <1>  mov al,ePutMonthNameString
  4722 00000281 CD30                <1>  int _svc
  4723                                  			putConsoleString   wzConsoleOutBuffer			;write string to console
  4723 00000283 BAB0080000          <1>  mov edx,%1
  4723 00000288 B006                <1>  mov al,ePutConsoleString
  4723 0000028A CD30                <1>  int _svc
  4724                                  			putConsoleString   czNewLine				;write newline to console
  4724 0000028C BA[9B040000]        <1>  mov edx,%1
  4724 00000291 B006                <1>  mov al,ePutConsoleString
  4724 00000293 CD30                <1>  int _svc
  4725 00000295 C3                      			ret							;return
  4726                                  ;-----------------------------------------------------------------------------------------------------------------------
  4727                                  ;
  4728                                  ;	Routine:	ConSecond
  4729                                  ;
  4730                                  ;	Description:	This routine Handles the SECOND command.
  4731                                  ;
  4732                                  ;-----------------------------------------------------------------------------------------------------------------------
  4733                                  ConSecond		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4733                              <1> ConSecond :
  4733 00000296 BB00090000          <1>  mov ebx,%1
  4733 0000029B B012                <1>  mov al,eReadRealTimeClock
  4733 0000029D CD30                <1>  int _svc
  4734                                  			putSecondString   wsConsoleDateTime,wzConsoleOutBuffer	;format second string
  4734 0000029F BB00090000          <1>  mov ebx,%1
  4734 000002A4 BAB0080000          <1>  mov edx,%2
  4734 000002A9 B00D                <1>  mov al,ePutSecondString
  4734 000002AB CD30                <1>  int _svc
  4735                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4735 000002AD BAB0080000          <1>  mov edx,%1
  4735 000002B2 B006                <1>  mov al,ePutConsoleString
  4735 000002B4 CD30                <1>  int _svc
  4736                                  			putConsoleString  czNewLine				;write newline to console
  4736 000002B6 BA[9B040000]        <1>  mov edx,%1
  4736 000002BB B006                <1>  mov al,ePutConsoleString
  4736 000002BD CD30                <1>  int _svc
  4737 000002BF C3                      			ret							;return
  4738                                  ;-----------------------------------------------------------------------------------------------------------------------
  4739                                  ;
  4740                                  ;	Routine:	ConTime
  4741                                  ;
  4742                                  ;	Description:	This routine Handles the TIME command.
  4743                                  ;
  4744                                  ;-----------------------------------------------------------------------------------------------------------------------
  4745                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4745                              <1> ConTime :
  4745 000002C0 BB00090000          <1>  mov ebx,%1
  4745 000002C5 B012                <1>  mov al,eReadRealTimeClock
  4745 000002C7 CD30                <1>  int _svc
  4746                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  4746 000002C9 BB00090000          <1>  mov ebx,%1
  4746 000002CE BAB0080000          <1>  mov edx,%2
  4746 000002D3 B00E                <1>  mov al,ePutTimeString
  4746 000002D5 CD30                <1>  int _svc
  4747                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4747 000002D7 BAB0080000          <1>  mov edx,%1
  4747 000002DC B006                <1>  mov al,ePutConsoleString
  4747 000002DE CD30                <1>  int _svc
  4748                                  			putConsoleString  czNewLine				;write newline to console
  4748 000002E0 BA[9B040000]        <1>  mov edx,%1
  4748 000002E5 B006                <1>  mov al,ePutConsoleString
  4748 000002E7 CD30                <1>  int _svc
  4749 000002E9 C3                      			ret							;return
  4750                                  ;-----------------------------------------------------------------------------------------------------------------------
  4751                                  ;
  4752                                  ;	Routine:	ConWeekday
  4753                                  ;
  4754                                  ;	Description:	This routine handles the WEEKDAY command.
  4755                                  ;
  4756                                  ;-----------------------------------------------------------------------------------------------------------------------
  4757                                  ConWeekday		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4757                              <1> ConWeekday :
  4757 000002EA BB00090000          <1>  mov ebx,%1
  4757 000002EF B012                <1>  mov al,eReadRealTimeClock
  4757 000002F1 CD30                <1>  int _svc
  4758                                  			putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer	;format weekday string
  4758 000002F3 BB00090000          <1>  mov ebx,%1
  4758 000002F8 BAB0080000          <1>  mov edx,%2
  4758 000002FD B00F                <1>  mov al,ePutWeekdayString
  4758 000002FF CD30                <1>  int _svc
  4759                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4759 00000301 BAB0080000          <1>  mov edx,%1
  4759 00000306 B006                <1>  mov al,ePutConsoleString
  4759 00000308 CD30                <1>  int _svc
  4760                                  			putConsoleString  czNewLine				;write newline to console
  4760 0000030A BA[9B040000]        <1>  mov edx,%1
  4760 0000030F B006                <1>  mov al,ePutConsoleString
  4760 00000311 CD30                <1>  int _svc
  4761 00000313 C3                      			ret							;return
  4762                                  ;-----------------------------------------------------------------------------------------------------------------------
  4763                                  ;
  4764                                  ;	Routine:	ConWeekdayName
  4765                                  ;
  4766                                  ;	Description:	This routine Handles the WEEKDAY.NAME command.
  4767                                  ;
  4768                                  ;-----------------------------------------------------------------------------------------------------------------------
  4769                                  ConWeekdayName		readRealTimeClock    wsConsoleDateTime				;read RTC data into structure
  4769                              <1> ConWeekdayName :
  4769 00000314 BB00090000          <1>  mov ebx,%1
  4769 00000319 B012                <1>  mov al,eReadRealTimeClock
  4769 0000031B CD30                <1>  int _svc
  4770                                  			putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer	;format day name string
  4770 0000031D BB00090000          <1>  mov ebx,%1
  4770 00000322 BAB0080000          <1>  mov edx,%2
  4770 00000327 B010                <1>  mov al,ePutWeekdayNameString
  4770 00000329 CD30                <1>  int _svc
  4771                                  			putConsoleString     wzConsoleOutBuffer				;write string to console
  4771 0000032B BAB0080000          <1>  mov edx,%1
  4771 00000330 B006                <1>  mov al,ePutConsoleString
  4771 00000332 CD30                <1>  int _svc
  4772                                  			putConsoleString     czNewLine					;write newline to console
  4772 00000334 BA[9B040000]        <1>  mov edx,%1
  4772 00000339 B006                <1>  mov al,ePutConsoleString
  4772 0000033B CD30                <1>  int _svc
  4773 0000033D C3                      			ret								;return
  4774                                  ;-----------------------------------------------------------------------------------------------------------------------
  4775                                  ;
  4776                                  ;	Routine:	ConYear
  4777                                  ;
  4778                                  ;	Description:	This routine Handles the YEAR command.
  4779                                  ;
  4780                                  ;-----------------------------------------------------------------------------------------------------------------------
  4781                                  ConYear			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4781                              <1> ConYear :
  4781 0000033E BB00090000          <1>  mov ebx,%1
  4781 00000343 B012                <1>  mov al,eReadRealTimeClock
  4781 00000345 CD30                <1>  int _svc
  4782                                  			putYearString	  wsConsoleDateTime,wzConsoleOutBuffer	;format year string
  4782 00000347 BB00090000          <1>  mov ebx,%1
  4782 0000034C BAB0080000          <1>  mov edx,%2
  4782 00000351 B011                <1>  mov al,ePutYearString
  4782 00000353 CD30                <1>  int _svc
  4783                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  4783 00000355 BAB0080000          <1>  mov edx,%1
  4783 0000035A B006                <1>  mov al,ePutConsoleString
  4783 0000035C CD30                <1>  int _svc
  4784                                  			putConsoleString  czNewLine				;write newline to console
  4784 0000035E BA[9B040000]        <1>  mov edx,%1
  4784 00000363 B006                <1>  mov al,ePutConsoleString
  4784 00000365 CD30                <1>  int _svc
  4785 00000367 C3                      			ret							;return
  4786                                  ;-----------------------------------------------------------------------------------------------------------------------
  4787                                  ;
  4788                                  ;	Routine:	ConYearIsLeap
  4789                                  ;
  4790                                  ;	Description:	This routine handles the YEAR.ISLEAP command
  4791                                  ;
  4792                                  ;-----------------------------------------------------------------------------------------------------------------------
  4793                                  ConYearIsLeap		readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  4793                              <1> ConYearIsLeap :
  4793 00000368 BB00090000          <1>  mov ebx,%1
  4793 0000036D B012                <1>  mov al,eReadRealTimeClock
  4793 0000036F CD30                <1>  int _svc
  4794                                  			isLeapYear        wsConsoleDateTime			;indicate if year is leap year
  4794 00000371 BB00090000          <1>  mov ebx,%1
  4794 00000376 B004                <1>  mov al,eIsLeapYear
  4794 00000378 CD30                <1>  int _svc
  4795                                  
  4796 0000037A E30B                    			jecxz	.10						;branch if not leap
  4797                                  
  4798                                  			putConsoleString  czYearIsLeap				;display year is leap message
  4798 0000037C BA[D0040000]        <1>  mov edx,%1
  4798 00000381 B006                <1>  mov al,ePutConsoleString
  4798 00000383 CD30                <1>  int _svc
  4799                                  
  4800 00000385 EB09                    			jmp	.20						;continue
  4801                                  
  4802                                  .10			putConsoleString  czYearIsNotLeap			;display year is not leap mesage
  4802                              <1> .10 :
  4802 00000387 BA[EB040000]        <1>  mov edx,%1
  4802 0000038C B006                <1>  mov al,ePutConsoleString
  4802 0000038E CD30                <1>  int _svc
  4803 00000390 C3                      .20			ret							;return
  4804                                  ;-----------------------------------------------------------------------------------------------------------------------
  4805                                  ;
  4806                                  ;	Routine:	ConVersion
  4807                                  ;
  4808                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  4809                                  ;
  4810                                  ;-----------------------------------------------------------------------------------------------------------------------
  4811                                  ConVersion		putConsoleString czTitle				;display version message
  4811                              <1> ConVersion :
  4811 00000391 BA[A0040000]        <1>  mov edx,%1
  4811 00000396 B006                <1>  mov al,ePutConsoleString
  4811 00000398 CD30                <1>  int _svc
  4812 0000039A C3                      			ret							;return
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814                                  ;
  4815                                  ;	Tables
  4816                                  ;
  4817                                  ;-----------------------------------------------------------------------------------------------------------------------
  4818                                  										;---------------------------------------
  4819                                  										;  Command Jump Table
  4820                                  										;---------------------------------------
  4821                                  tConJmpTbl		equ	$						;command jump table
  4822 0000039B 14030000                			dd	ConWeekdayName	- ConCode			;weekday.name command routine offset
  4823 0000039F 68030000                			dd	ConYearIsLeap	- ConCode			;year.isleap command routine offset
  4824 000003A3 6C020000                			dd	ConMonthName	- ConCode			;month.name command routine offset
  4825 000003A7 43010000                			dd	ConExit		- ConCode			;shutdown command routine offset
  4826 000003AB 91030000                			dd	ConVersion	- ConCode			;version command routine offset
  4827 000003AF EA020000                			dd	ConWeekday	- ConCode			;weekday command routine offset
  4828 000003B3 75010000                			dd	ConMem		- ConCode			;memory command routine offset
  4829 000003B7 18020000                			dd	ConMinute	- ConCode			;minute command routine offset
  4830 000003BB 96020000                			dd	ConSecond	- ConCode			;second command routine offset
  4831 000003BF EA000000                			dd	ConClear	- ConCode			;clear command routine offset
  4832 000003C3 42020000                			dd	ConMonth	- ConCode			;month command routine offset
  4833 000003C7 EF000000                			dd	ConDate		- ConCode			;date command routine offset
  4834 000003CB 43010000                			dd	ConExit		- ConCode			;exit command routine offset
  4835 000003CF 48010000                			dd	ConHour		- ConCode			;hour command routine offset
  4836 000003D3 72010000                			dd	ConInt6		- ConCode			;int6 command routine offset
  4837 000003D7 43010000                			dd	ConExit		- ConCode			;quit command routine offset
  4838 000003DB C0020000                			dd	ConTime		- ConCode			;time command routine offset
  4839 000003DF 3E030000                			dd	ConYear		- ConCode			;year command routine offset
  4840 000003E3 EA000000                			dd	ConClear	- ConCode			;cls command routine offset
  4841 000003E7 19010000                			dd	ConDay		- ConCode			;day command routine offset
  4842 000003EB 75010000                			dd	ConMem		- ConCode			;mem command routine offset
  4843 000003EF 91030000                			dd	ConVersion	- ConCode			;ver command routine offset
  4844                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  4845                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  4846                                  										;---------------------------------------
  4847                                  										;  Command Name Table
  4848                                  										;---------------------------------------
  4849                                  tConCmdTbl		equ	$						;command name table
  4850 000003F3 0D5745454B4441592E-     			db	13,"WEEKDAY.NAME",0				;weekday.name command
  4850 000003FC 4E414D4500         
  4851 00000401 0C594541522E49534C-     			db	12,"YEAR.ISLEAP",0				;year.isleap command
  4851 0000040A 45415000           
  4852 0000040E 0B4D4F4E54482E4E41-     			db	11,"MONTH.NAME",0				;month.name command
  4852 00000417 4D4500             
  4853 0000041A 0953485554444F574E-     			db	9,"SHUTDOWN",0					;shutdown command
  4853 00000423 00                 
  4854 00000424 0856455253494F4E00      			db	8,"VERSION",0					;version command
  4855 0000042D 085745454B44415900      			db	8,"WEEKDAY",0					;weekday command
  4856 00000436 074D454D4F525900        			db	7,"MEMORY",0					;memory command
  4857 0000043E 074D494E55544500        			db	7,"MINUTE",0					;minute command
  4858 00000446 075345434F4E4400        			db	7,"SECOND",0					;second command
  4859 0000044E 06434C45415200          			db	6,"CLEAR",0					;clear command
  4860 00000455 064D4F4E544800          			db	6,"MONTH",0					;month command
  4861 0000045C 054441544500            			db	5,"DATE",0					;date command
  4862 00000462 054558495400            			db	5,"EXIT",0					;exit command
  4863 00000468 05484F555200            			db	5,"HOUR",0					;hour command
  4864 0000046E 05494E543600            			db	5,"INT6",0					;int6 command
  4865 00000474 055155495400            			db	5,"QUIT",0					;quit command
  4866 0000047A 0554494D4500            			db	5,"TIME",0					;time command
  4867 00000480 055945415200            			db	5,"YEAR",0					;year command
  4868 00000486 04434C5300              			db	4,"CLS",0					;cls command
  4869 0000048B 0444415900              			db	4,"DAY",0					;day command
  4870 00000490 044D454D00              			db	4,"MEM",0					;mem command
  4871 00000495 0456455200              			db	4,"VER",0					;ver command
  4872 0000049A 00                      			db	0						;end of table
  4873                                  ;-----------------------------------------------------------------------------------------------------------------------
  4874                                  ;
  4875                                  ;	Constants
  4876                                  ;
  4877                                  ;-----------------------------------------------------------------------------------------------------------------------
  4878 0000049B 0D0A00                  czNewLine		db	13,10,0						;new line string
  4879 0000049E 3A00                    czPrompt		db	":",0						;prompt string
  4880 000004A0 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  4880 000004A9 65726174696E672053-
  4880 000004B2 797374656D20312E30-
  4880 000004BB 0D0A00             
  4881 000004BE 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  4881 000004C7 6F6D6D616E640D0A00 
  4882 000004D0 546865207965617220-     czYearIsLeap		db	"The year is a leap year.",13,10,0		;leap year message
  4882 000004D9 69732061206C656170-
  4882 000004E2 20796561722E0D0A00 
  4883 000004EB 546865207965617220-     czYearIsNotLeap		db	"The year is not a leap year.",13,10,0		;not leap year message
  4883 000004F4 6973206E6F74206120-
  4883 000004FD 6C6561702079656172-
  4883 00000506 2E0D0A00           
  4884 0000050A 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  4885 00000FFE 55AA                    			db	055h,0AAh					;end of section
  4886                                  %endif
  4887                                  %ifdef BUILDDISK
  4888                                  ;-----------------------------------------------------------------------------------------------------------------------
  4889                                  ;
  4890                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  4891                                  ;
  4892                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4893                                  ;
  4894                                  ;-----------------------------------------------------------------------------------------------------------------------
  4895                                  section			unused							;unused disk space
  4896                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  4897                                  %endif
  4898                                  ;=======================================================================================================================
  4899                                  ;
  4900                                  ;	End of Program Code
  4901                                  ;
  4902                                  ;=======================================================================================================================
