     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.010
     6                                  ;
     7                                  ;       Description:    In this sample program, logic is added to allocate and free memory blocks at the kernel level.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMEM...         Memory Management values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   331                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   332                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   333                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   334                                  EASCIISPACE             equ     020h                                            ;space
   335                                  EASCIIUPPERA            equ     041h                                            ;'A'
   336                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   337                                  EASCIILOWERA            equ     061h                                            ;'a'
   338                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   339                                  EASCIITILDE             equ     07Eh                                            ;'~'
   340                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   341                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   342                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   343                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   344                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   345                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   346                                  EASCIICASE              equ     00100000b                                       ;case bit
   347                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  ;
   350                                  ;       Operating System Values
   351                                  ;
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   356                                  ;
   357                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   358                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   362                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   363                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   364                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   365                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   366                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   367                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;       Console Constants                                                       ECON...
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ECONCOLS                equ     80                                              ;columns per row
   372                                  ECONROWS                equ     24                                              ;console rows
   373                                  ECONOIAROW              equ     24                                              ;operator information area row
   374                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   375                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   376                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   377                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   378                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   383                                  EGDTCGA                 equ     020h                                            ;cga video selector
   384                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   385                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   386                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   387                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   388                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   389                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;       Keyboard Flags                                                          EKEYF...
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   394                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   395                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   396                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   397                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   398                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   399                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   400                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   401                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   402                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   403                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;       Kernel Constants                                                        EKRN...
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   408                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   409                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   410                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   411                                  EKRNHEAPSIZE            equ     80000000h                                       ;kernel heap size
   412                                  EKRNHEAPBASE            equ     10000h                                          ;kernel heap base
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ;       Memory Management Constants                                             EMEM...
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   421                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   422                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   423                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;       Message Identifiers                                                     EMSG...
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   428                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   429                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   430                                  ;=======================================================================================================================
   431                                  ;
   432                                  ;       Structures
   433                                  ;
   434                                  ;=======================================================================================================================
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  ;
   437                                  ;       MEMBLOCK
   438                                  ;
   439                                  ;       The MEMBLOCK structure defines a memory block.
   440                                  ;
   441                                  ;-----------------------------------------------------------------------------------------------------------------------
   442                                  struc                   MEMBLOCK
   443 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   444 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   445 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   446 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   447 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   448 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   449 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   450 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   451                                  EMEMBLOCKLEN            equ     ($-.signature)
   452                                  endstruc
   453                                  ;-----------------------------------------------------------------------------------------------------------------------
   454                                  ;
   455                                  ;       MEMROOT
   456                                  ;
   457                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   458                                  ;
   459                                  ;-----------------------------------------------------------------------------------------------------------------------
   460                                  struc                   MEMROOT
   461 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   462 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   463 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   464 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   465 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   466 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   467                                  EMEMROOTLEN             equ     ($-.firstcontig)
   468                                  endstruc
   469                                  ;-----------------------------------------------------------------------------------------------------------------------
   470                                  ;
   471                                  ;       MQUEUE
   472                                  ;
   473                                  ;       The MQUEUE structure maps memory used for a message queue.
   474                                  ;
   475                                  ;-----------------------------------------------------------------------------------------------------------------------
   476                                  struc                   MQUEUE
   477 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   478 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   479 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   480                                  endstruc
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  ;
   483                                  ;       OSDATA
   484                                  ;
   485                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   486                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   487                                  ;
   488                                  ;-----------------------------------------------------------------------------------------------------------------------
   489                                  struc                   OSDATA
   490 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   491 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   492 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   493 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   494 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   495 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   496 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   497 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   498 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   499 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   500 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   501 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   502 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   503 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   504 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   505 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   506 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   507 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   508 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   509 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   510 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   511 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   512 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   513 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   514 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   515 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   516 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   517 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   518 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   519 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   520 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   521 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   522 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   523 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   524 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   525 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   526 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   527 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   528 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   529 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   530 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   531 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   532 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   533 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   534 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   535 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   536 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   537 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   538 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   539 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   540 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   541 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   542 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   543 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   544 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   545 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   546 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   547 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   548 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   549 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   550 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   551 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   552 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   553 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   554 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   555 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   556 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   557 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   558 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   559 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   560 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   561 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   562 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   563 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   564 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   565 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   566 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   567 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   568 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   569 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   570 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   571 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   572 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   573 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   574 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   575 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   576 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   577 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   578 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   579 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   580 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   581 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   582 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   583 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   584 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   585 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   586 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   587 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   588 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   589 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   590 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   591                                  ;-----------------------------------------------------------------------------------------------------------------------
   592                                  ;
   593                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   594                                  ;
   595                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   596                                  ;
   597                                  ;-----------------------------------------------------------------------------------------------------------------------
   598                                  ECONDATA                equ     ($)
   599 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   600 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   601 00000808 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   602 00000820 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   603 00000821 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   604 00000822 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   605 00000823 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   606 00000824 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   607 00000825 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   608 00000826 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   609 00000827 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   610 00000828 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   611 00000829 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   612 0000082A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   613 0000082B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   614 0000082C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   615 0000087C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   616 000008CC <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   617                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   618                                  ;-----------------------------------------------------------------------------------------------------------------------
   619                                  ;
   620                                  ;       End of OS Variables
   621                                  ;
   622                                  ;-----------------------------------------------------------------------------------------------------------------------
   623                                  endstruc
   624                                  ;-----------------------------------------------------------------------------------------------------------------------
   625                                  ;
   626                                  ;       Macros
   627                                  ;
   628                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   629                                  ;
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631                                  %macro                  mint    1
   632                                  _%1                     equ     ($-$$) / EX86DESCLEN
   633                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   634                                  %endmacro
   635                                  %macro                  mtrap   1
   636                                  _%1                     equ     ($-$$) / EX86DESCLEN
   637                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   638                                  %endmacro
   639                                  %macro                  menter  1
   640                                  ?%1                     equ     ($-$$)
   641                                  %endmacro
   642                                  %macro                  tsvce   1
   643                                  e%1                     equ     ($-tsvc)/4
   644                                                          dd      %1
   645                                  %endmacro
   646                                  %ifdef BUILDBOOT
   647                                  ;=======================================================================================================================
   648                                  ;
   649                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   650                                  ;
   651                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   652                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   653                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   654                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   655                                  ;
   656                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   657                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   658                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   659                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   660                                  ;       immediately followed by a disk parameter table.
   661                                  ;
   662                                  ;=======================================================================================================================
   663                                                          cpu     8086                                            ;assume minimal CPU
   664                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   665                                                          bits    16                                              ;16-bit code at power-up
   666                                  %ifdef BUILDPREP
   667                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   668                                  %else
   669                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   670                                  %endif
   671                                  ;-----------------------------------------------------------------------------------------------------------------------
   672                                  ;
   673                                  ;       Disk Parameter Table
   674                                  ;
   675                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   676                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   677                                  ;
   678                                  ;-----------------------------------------------------------------------------------------------------------------------
   679                                                          db      "CustomOS"                                      ;eight-byte label
   680                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   681                                  cbClusterSectors        db      1                                               ;sectors per cluster
   682                                  cwReservedSectors       dw      1                                               ;reserved sectors
   683                                  cbFatCount              db      2                                               ;file allocation table copies
   684                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   685                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   686                                  cbDiskType              db      0F0h                                            ;1.44MB
   687                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   688                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   689                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   690                                  cwDiskSides             dw      2                                               ;sides per disk
   691                                  cwSpecialSectors        dw      0                                               ;special sectors
   692                                  ;
   693                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   694                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   695                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   696                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   697                                  ;       given several possible starting values for CS:IP.
   698                                  ;
   699                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   700                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   701                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   702                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   703                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   704                                                          mov     cl,4                                            ;shift count
   705                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   706                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   707                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   708                                  ;
   709                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   710                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   711                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   712                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   713                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   714                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   715                                  ;
   716                                                          sub     bx,16                                           ;BX = 07b0
   717                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   718                                                          mov     es,bx                                           ;ES = 07b0 = psp
   719                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   720                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   721                                  ;
   722                                  ;       Our boot addressability is now set up according to the following diagram.
   723                                  ;
   724                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   725                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   726                                  ;                               |  256 = 100h bytes                             |
   727                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   728                                  ;                               |  Boot Sector (vstart=0100h)                   |
   729                                  ;                               |  1 sector = 512 = 200h bytes                  |
   730                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   731                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   732                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   733                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   734                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   735                                  ;                               |  2 sectors = 1024 = 400h bytes
   736                                  ;                       009400  +-----------------------------------------------+ DS:1900
   737                                  ;
   738                                  ;       On entry, DL indicates the drive being booted from.
   739                                  ;
   740                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   741                                  ;
   742                                  ;       Compute directory i/o buffer address.
   743                                  ;
   744                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   745                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   746                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   747                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   748                                  ;
   749                                  ;       Compute segment where os.com will be loaded.
   750                                  ;
   751                                                          shr     ax,cl                                           ;AX = 0150
   752                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   753                                                          sub     ax,16                                           ;AX = 08f0
   754                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   755                                  ;
   756                                  ;       Set the video mode to 80 column, 25 row, text.
   757                                  ;
   758                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   759                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   760                                  ;
   761                                  ;       Write a message to the console so we know we have our addressability established.
   762                                  ;
   763                                                          mov     si,czLoadMsg                                    ;loading message
   764                                                          call    BootPrint                                       ;display loader message
   765                                  ;
   766                                  ;       Initialize the number of directory sectors to search.
   767                                  ;
   768                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   769                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   770                                  ;
   771                                  ;       Compute number of directory sectors and initialize overhead count.
   772                                  ;
   773                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   774                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   775                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   776                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   777                                  ;
   778                                  ;       Compute directory entries per sector.
   779                                  ;
   780                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   781                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   782                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   783                                  ;
   784                                  ;       Compute first logical directory sector and update overhead count.
   785                                  ;
   786                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   787                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   788                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   789                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   790                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   791                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   792                                  ;
   793                                  ;       Read directory sector.
   794                                  ;
   795                                  .30                     mov     al,1                                            ;sector count
   796                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   797                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   798                                                          call    ReadSector                                      ;read sector into es:bx
   799                                  ;
   800                                  ;       Setup variables to search this directory sector.
   801                                  ;
   802                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   803                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   804                                                          jna     .40                                             ;no, continue
   805                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   806                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   807                                                          mov     si,cbKernelProgram                              ;program name
   808                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   809                                  ;
   810                                  ;       Loop through directory sectors searching for kernel program.
   811                                  ;
   812                                  .50                     push    si                                              ;save kernel name address
   813                                                          push    di                                              ;save dir i/o buffer address
   814                                                          mov     cx,11                                           ;length of 8+3 name
   815                                                          cld                                                     ;forward strings
   816                                                          repe    cmpsb                                           ;compare entry name
   817                                                          pop     di                                              ;restore dir i/o buffer address
   818                                                          pop     si                                              ;restore kernel name address
   819                                                          je      .60                                             ;exit loop if found
   820                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   821                                                          dec     ax                                              ;decrement remaining entries
   822                                                          jnz     .50                                             ;next entry
   823                                  ;
   824                                  ;       Repeat search if we are not at the end of the directory.
   825                                  ;
   826                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   827                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   828                                                          jne     .30                                             ;no, get next sector
   829                                                          mov     si,czNoKernel                                   ;missing kernel message
   830                                                          jmp     BootExit                                        ;display message and exit
   831                                  ;
   832                                  ;       If we find the kernel program in the directory, read the FAT.
   833                                  ;
   834                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   835                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   836                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   837                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   838                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   839                                                          call    ReadSector                                      ;read FAT into buffer
   840                                  ;
   841                                  ;       Get the starting cluster of the kernel program and target address.
   842                                  ;
   843                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   844                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   845                                  ;
   846                                  ;       Read each program cluster into RAM.
   847                                  ;
   848                                  .70                     push    ax                                              ;save cluster nbr
   849                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   850                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   851                                                          mov     [wbReadCount],cl                                ;save sectors to read
   852                                                          xor     ch,ch                                           ;CX = sectors per cluster
   853                                                          mul     cx                                              ;DX:AX = logical cluster sector
   854                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   855                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   856                                                          call    ReadSector                                      ;read sectors into ES:BX
   857                                  ;
   858                                  ;       Update buffer pointer for next cluster.
   859                                  ;
   860                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   861                                                          xor     ah,ah                                           ;AX = sectors per cluster
   862                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   863                                                          add     bx,ax                                           ;BX = next cluster target address
   864                                                          pop     ax                                              ;AX = restore cluster nbr
   865                                  ;
   866                                  ;       Compute next cluster number.
   867                                  ;
   868                                                          mov     cx,ax                                           ;CX = cluster nbr
   869                                                          mov     di,ax                                           ;DI = cluster nbr
   870                                                          shr     ax,1                                            ;AX = cluster/2
   871                                                          mov     dx,ax                                           ;DX = cluster/2
   872                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   873                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   874                                                          and     di,1                                            ;get low bit
   875                                                          add     di,ax                                           ;add one if cluster is odd
   876                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   877                                                          mov     ax,[di]                                         ;get cluster bytes
   878                                  ;
   879                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   880                                  ;
   881                                                          test    cl,1                                            ;is cluster odd?
   882                                                          jz      .80                                             ;no, skip ahead
   883                                                          mov     cl,4                                            ;shift count
   884                                                          shr     ax,cl                                           ;shift nybble low
   885                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   886                                                          cmp     ax,0FFFh                                        ;end of chain?
   887                                                          jne     .70                                             ;no, continue
   888                                  ;
   889                                  ;       Transfer control to the operating system program.
   890                                  ;
   891                                                          db      0EAh                                            ;jmp seg:offset
   892                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   893                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   894                                  ;
   895                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   896                                  ;
   897                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   898                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   899                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   900                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   901                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   902                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   903                                                          mov     ax,dx                                           ;AX = cyl sector
   904                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   905                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   906                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   907                                  ;
   908                                  ;       Try maxtries times to read sector.
   909                                  ;
   910                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   911                                  .10                     push    bx                                              ;save buffer address
   912                                                          push    cx                                              ;save retry count
   913                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   914                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   915                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   916                                                          int     EBIOSINTDISKETTE                                ;read sector
   917                                                          pop     cx                                              ;restore retry count
   918                                                          pop     bx                                              ;restore buffer address
   919                                                          jnc     BootReturn                                      ;skip ahead if done
   920                                                          loop    .10                                             ;retry
   921                                  ;
   922                                  ;       Handle disk error: convert to ASCII and store in error string.
   923                                  ;
   924                                                          mov     al,ah                                           ;AL = bios error code
   925                                                          xor     ah,ah                                           ;AX = bios error code
   926                                                          mov     dl,16                                           ;divisor for base 16
   927                                                          div     dl                                              ;AL = hi order, AH = lo order
   928                                                          or      ax,03030h                                       ;apply ASCII zone bits
   929                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   930                                                          jb      .20                                             ;continue if numeral
   931                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   932                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   933                                                          jb      .30                                             ;continue if numeral
   934                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   935                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   936                                                          mov     si,czErrorMsg                                   ;error message address
   937                                  BootExit                call    BootPrint                                       ;display messge to console
   938                                  ;
   939                                  ;       Wait for a key press.
   940                                  ;
   941                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   942                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   943                                                          jnz     .20                                             ;continue if key pressed
   944                                                          sti                                                     ;enable maskable interrupts
   945                                                          hlt                                                     ;wait for interrupt
   946                                                          jmp     .10                                             ;repeat
   947                                  ;
   948                                  ;       Reset the system.
   949                                  ;
   950                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   951                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   952                                  .30                     sti                                                     ;enable maskable interrupts
   953                                                          hlt                                                     ;stop until reset, int, nmi
   954                                                          jmp     .30                                             ;loop until restart kicks in
   955                                  ;
   956                                  ;       Display text message.
   957                                  ;
   958                                  BootPrint               cld                                                     ;forward strings
   959                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
   960                                                          test    al,al                                           ;end of string?
   961                                                          jz      BootReturn                                      ;... yes, exit our loop
   962                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   963                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   964                                                          jmp     .10                                             ;repeat until done
   965                                  BootReturn              ret                                                     ;return
   966                                  ;-----------------------------------------------------------------------------------------------------------------------
   967                                  ;
   968                                  ;       Constants
   969                                  ;
   970                                  ;-----------------------------------------------------------------------------------------------------------------------
   971                                                          align   2
   972                                  cwEntryLen              dw      32                                              ;length of directory entry
   973                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   974                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   975                                  czErrorMsg              db      "Disk error "                                   ;error message
   976                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   977                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
   978                                  ;-----------------------------------------------------------------------------------------------------------------------
   979                                  ;
   980                                  ;       Work Areas
   981                                  ;
   982                                  ;-----------------------------------------------------------------------------------------------------------------------
   983                                                          align   2
   984                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
   985                                  wwEntriesLeft           dw      0                                               ;directory entries to search
   986                                  wwOverhead              dw      0                                               ;overhead sectors
   987                                  wwSectorEntries         dw      0                                               ;directory entries per sector
   988                                  wwLogicalSector         dw      0                                               ;current logical sector
   989                                  wwReadCountCommand      equ     $                                               ;read count and command
   990                                  wbReadCount             db      0                                               ;sectors to read
   991                                  cbReadCommand           db      2                                               ;BIOS read disk fn code
   992                                  wwDriveHead             equ     $                                               ;drive, head (word)
   993                                  wbDrive                 db      0                                               ;drive
   994                                  wbHead                  db      0                                               ;head
   995                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   996                                                          db      0                                               ;sector
   997                                  wbTrack                 db      0                                               ;track
   998                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
   999                                                          db      055h,0AAh                                       ;end of sector signature
  1000                                  %endif
  1001                                  %ifdef BUILDPREP
  1002                                  ;=======================================================================================================================
  1003                                  ;
  1004                                  ;       Diskette Preparation Code
  1005                                  ;
  1006                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1007                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1008                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1009                                  ;
  1010                                  ;=======================================================================================================================
  1011                                  ;
  1012                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1013                                  ;
  1014                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1015                                                          call    BootPrint                                       ;display message
  1016                                  ;
  1017                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1018                                  ;
  1019                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1020                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1021                                                          jnz     .20                                             ;continue if key pressed
  1022                                                          sti                                                     ;enable interrupts
  1023                                                          hlt                                                     ;wait for interrupt
  1024                                                          jmp     .10                                             ;repeat
  1025                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1026                                                          je      .30                                             ;yes, branch
  1027                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1028                                                          jne     .10                                             ;no, repeat
  1029                                                          jmp     .120                                            ;yes, exit program
  1030                                  ;
  1031                                  ;       Display writing-sector message and patch the JMP instruction.
  1032                                  ;
  1033                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1034                                                          call    BootPrint                                       ;display message
  1035                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1036                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1037                                                          mov     [bx],ax                                         ;update the JMP instruction
  1038                                  ;
  1039                                  ;       Try to read the boot sector.
  1040                                  ;
  1041                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1042                                  .40                     push    cx                                              ;save remaining tries
  1043                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1044                                                          mov     dx,0                                            ;head zero, drive zero
  1045                                                          mov     cx,1                                            ;track zero, sector one
  1046                                                          mov     ax,0201h                                        ;read one sector
  1047                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1048                                                          pop     cx                                              ;restore remaining retries
  1049                                                          jnc     .50                                             ;skip ahead if successful
  1050                                                          loop    .40                                             ;try again
  1051                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1052                                                          jmp     .70                                             ;branch to error routine
  1053                                  ;
  1054                                  ;       Copy diskette parms from input buffer to output buffer.
  1055                                  ;
  1056                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1057                                                          add     si,11                                           ;skip over JMP and system ID
  1058                                                          mov     di,Boot                                         ;output buffer address
  1059                                                          add     di,11                                           ;skip over JMP and system ID
  1060                                                          mov     cx,19                                           ;length of diskette parameters
  1061                                                          cld                                                     ;forward string copies
  1062                                                          rep     movsb                                           ;copy diskette parameters
  1063                                  ;
  1064                                  ;       Try to write boot sector to diskette.
  1065                                  ;
  1066                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1067                                  .60                     push    cx                                              ;save remaining tries
  1068                                                          mov     bx,Boot                                         ;output buffer address
  1069                                                          mov     dx,0                                            ;head zero, drive zero
  1070                                                          mov     cx,1                                            ;track zero, sector one
  1071                                                          mov     ax,0301h                                        ;write one sector
  1072                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1073                                                          pop     cx                                              ;restore remaining retries
  1074                                                          jnc     .100                                            ;skip ahead if successful
  1075                                                          loop    .60                                             ;try again
  1076                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1077                                  ;
  1078                                  ;       Convert the error code to ASCII and display the error message.
  1079                                  ;
  1080                                  .70                     push    ax                                              ;save error code
  1081                                                          mov     al,ah                                           ;copy error code
  1082                                                          mov     ah,0                                            ;AX = error code
  1083                                                          mov     dl,10h                                          ;hexadecimal divisor
  1084                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1085                                                          or      ax,03030h                                       ;add ASCII zone digits
  1086                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1087                                                          jb      .80                                             ;yes, continue
  1088                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1089                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1090                                                          jb      .90                                             ;yes, continue
  1091                                                          add     al,7                                            ;no, make ASCII
  1092                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1093                                                          call    BootPrint                                       ;write error message
  1094                                                          pop     ax                                              ;restore error code
  1095                                  ;
  1096                                  ;       Display the completion message.
  1097                                  ;
  1098                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1099                                                          mov     al,ah                                           ;BIOS return code
  1100                                                          cmp     al,0                                            ;success?
  1101                                                          je      .110                                            ;yes, continue
  1102                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1103                                                          cmp     al,1                                            ;disk parameter error?
  1104                                                          je      .110                                            ;yes, continue
  1105                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1106                                                          cmp     al,2                                            ;address mark not found?
  1107                                                          je      .110                                            ;yes, continue
  1108                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1109                                                          cmp     al,3                                            ;protected disk?
  1110                                                          je      .110                                            ;yes, continue
  1111                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1112                                                          cmp     al,6                                            ;diskette removed?
  1113                                                          je      .110                                            ;yes, continue
  1114                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1115                                                          cmp     al,80H                                          ;drive timed out?
  1116                                                          je      .110                                            ;yes, continue
  1117                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1118                                  .110                    call    BootPrint                                       ;display result message
  1119                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1120                                                          int     021h                                            ;terminate DOS program
  1121                                                          ret                                                     ;return (should not execute)
  1122                                  ;-----------------------------------------------------------------------------------------------------------------------
  1123                                  ;
  1124                                  ;       Diskette Preparation Messages
  1125                                  ;
  1126                                  ;-----------------------------------------------------------------------------------------------------------------------
  1127                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1128                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1129                                                          db      13,10
  1130                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1131                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1132                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1133                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1134                                                          db      13,10,0
  1135                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1136                                                          db      13,10,0
  1137                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1138                                                          db      13,10,0
  1139                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1140                                                          db      13,10,0
  1141                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1142                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1143                                                          db      13,10,0
  1144                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1145                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1146                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1147                                                          db      13,10,"and retry."
  1148                                                          db      13,10,0
  1149                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1150                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1151                                                          db      13,10,"using another diskette."
  1152                                                          db      13,10,0
  1153                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1154                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1155                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1156                                                          db      13,10,0
  1157                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1158                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1159                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1160                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1161                                                          db      13,10,"is properly inserted in the diskette drive."
  1162                                                          db      13,10,0
  1163                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1164                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1165                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1166                                                          db      13,10,0
  1167                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1168                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1169                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1170                                                          db      13,10,0
  1171                                  wcPrepInBuf             equ     $
  1172                                  %endif
  1173                                  %ifdef BUILDDISK
  1174                                  ;=======================================================================================================================
  1175                                  ;
  1176                                  ;       File Allocation Tables
  1177                                  ;
  1178                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1179                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1180                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1181                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1182                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1183                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1184                                  ;       the last cluster in the chain.
  1185                                  ;
  1186                                  ;       Every three bytes encode two FAT entries as follows:
  1187                                  ;
  1188                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1189                                  ;
  1190                                  ;=======================================================================================================================
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  ;
  1193                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1194                                  ;
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  section                 fat1                                                    ;first copy of FAT
  1197                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1198                                                          db      005h,060h,000h, 007h,080h,000h
  1199                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1200                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1201                                                          db      011h,020h,001h, 013h,040h,001h
  1202                                                          db      015h,060h,001h, 017h,080h,001h
  1203                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1204                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1205                                                          db      021h,020h,002h, 023h,040h,002h
  1206                                                          db      025h,060h,002h, 027h,080h,002h
  1207                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1208                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1209                                  ;-----------------------------------------------------------------------------------------------------------------------
  1210                                  ;
  1211                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1212                                  ;
  1213                                  ;-----------------------------------------------------------------------------------------------------------------------
  1214                                  section                 fat2                                                    ;second copy of FAT
  1215                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1216                                                          db      005h,060h,000h, 007h,080h,000h
  1217                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1218                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1219                                                          db      011h,020h,001h, 013h,040h,001h
  1220                                                          db      015h,060h,001h, 017h,080h,001h
  1221                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1222                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1223                                                          db      021h,020h,002h, 023h,040h,002h
  1224                                                          db      025h,060h,002h, 027h,080h,002h
  1225                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1226                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  ;
  1229                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1230                                  ;
  1231                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1232                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1233                                  ;       copy.
  1234                                  ;
  1235                                  ;-----------------------------------------------------------------------------------------------------------------------
  1236                                  section                 dir                                                     ;diskette directory
  1237                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1238                                                          db      020h                                            ;attribute (archive bit set)
  1239                                                          times   10 db 0                                         ;unused
  1240                                                          dw      0h                                              ;time
  1241                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1242                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1243                                                          dw      2                                               ;first cluster
  1244                                                          dd      05400h                                          ;file size
  1245                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1246                                  %endif
  1247                                  %ifdef BUILDCOM
  1248                                  ;=======================================================================================================================
  1249                                  ;
  1250                                  ;       OS.COM
  1251                                  ;
  1252                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1253                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1254                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1255                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1256                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1257                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1258                                  ;
  1259                                  ;       Our loader addressability is set up according to the following diagram.
  1260                                  ;
  1261                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1262                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1263                                  ;                               |  256 = 100h bytes                             |
  1264                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1265                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1266                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1267                                  ;                       007e00  +-----------------------------------------------+
  1268                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1269                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1270                                  ;                               |                                               |
  1271                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1272                                  ;                               |                                               |
  1273                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1274                                  ;                               |  Loader Code                                  |
  1275                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1276                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1277                                  ;
  1278                                  ;=======================================================================================================================
  1279                                  ;-----------------------------------------------------------------------------------------------------------------------
  1280                                  ;
  1281                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1282                                  ;
  1283                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1284                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1285                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1286                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1287                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1288                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1289                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1290                                  ;       registers.
  1291                                  ;
  1292                                  ;-----------------------------------------------------------------------------------------------------------------------
  1293                                                          cpu     8086                                            ;assume minimal CPU
  1294                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1295                                                          bits    16                                              ;this is 16-bit code
  1296 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1297 00000001 1F                                              pop     ds                                              ;...as our data segment
  1298 00000002 0E                                              push    cs                                              ;use the code segment
  1299 00000003 07                                              pop     es                                              ;...as our extra segment
  1300                                  ;
  1301                                  ;       Write a message to the console so we know we have our addressability established.
  1302                                  ;
  1303 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1304 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1305                                  ;
  1306                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1307                                  ;
  1308 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1309 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1310 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1311 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1312                                                          cpu     386                                             ;allow 80386 instructions
  1313 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1314 00000017 E89600                                          call    PutTTYString                                    ;display message
  1315                                  ;
  1316                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1317                                  ;
  1318 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1319 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1320 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1321 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1322 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1323 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1324 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1325 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1326 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1327 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1328                                  ;
  1329                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1330                                  ;
  1331 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1332 00000038 07                                              pop     es                                              ;... as target segment
  1333 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1334 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1335 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1336 00000041 FC                                              cld                                                     ;forward strings
  1337 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1338 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1339 00000047 E86600                                          call    PutTTYString                                    ;display message
  1340                                  ;
  1341                                  ;       Switch to protected mode.
  1342                                  ;
  1343 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1344 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1345 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1346 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1347 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1348 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1349 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1350 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1351 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1352 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1353 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1354                                  ;
  1355                                  ;       Enable hardware and maskable interrupts.
  1356                                  ;
  1357 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1358 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1359 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1360 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1361                                  ;
  1362                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1363                                  ;
  1364 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1365 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1366 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  ;
  1369                                  ;       Routine:        LoaderExit
  1370                                  ;
  1371                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1372                                  ;
  1373                                  ;       In:             DS:SI   string address
  1374                                  ;
  1375                                  ;-----------------------------------------------------------------------------------------------------------------------
  1376 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1377                                  ;
  1378                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1379                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1380                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1381                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1382                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1383                                  ;
  1384 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1385 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1386 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1387 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1388 00000085 F4                                              hlt                                                     ;wait for interrupt
  1389 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1390                                  ;
  1391                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1392                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1393                                  ;       HLT until the system resets.
  1394                                  ;
  1395 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1396 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1397 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1398 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1399 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1400                                  ;-----------------------------------------------------------------------------------------------------------------------
  1401                                  ;
  1402                                  ;       Routine:        GetCPUType
  1403                                  ;
  1404                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1405                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1406                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1407                                  ;
  1408                                  ;       Out:            AX      0 = 808x, v20, etc.
  1409                                  ;                               1 = 80186
  1410                                  ;                               2 = 80286
  1411                                  ;                               3 = 80386
  1412                                  ;
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1415 00000092 B120                                            mov     cl,32                                           ;shift count
  1416 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1417 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1418 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1419                                                          cpu     186
  1420 0000009A 54                                              push    sp                                              ;save stack pointer
  1421 0000009B 59                                              pop     cx                                              ;...into cx
  1422 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1423 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1424                                                          cpu     286
  1425 000000A0 40                                              inc     ax                                              ;AX = 2
  1426 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1427 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1428 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1429 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1430 000000AE 40                                              inc     ax                                              ;AX = 3
  1431 000000AF C3                      .10                     ret                                                     ;return
  1432                                  ;-----------------------------------------------------------------------------------------------------------------------
  1433                                  ;
  1434                                  ;       Routine:        PutTTYString
  1435                                  ;
  1436                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1437                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1438                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1439                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1440                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1441                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1442                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1443                                  ;                       to LODSB is not needed.
  1444                                  ;
  1445                                  ;       In:             DS:SI   address of string
  1446                                  ;
  1447                                  ;       Out:            DF      0
  1448                                  ;                       ZF      1
  1449                                  ;                       AL      0
  1450                                  ;
  1451                                  ;-----------------------------------------------------------------------------------------------------------------------
  1452 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1453 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1454 000000B2 84C0                                            test    al,al                                           ;end of string?
  1455 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1456 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1457 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1458 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1459 000000BC C3                      .20                     ret                                                     ;return
  1460                                  ;-----------------------------------------------------------------------------------------------------------------------
  1461                                  ;
  1462                                  ;       Loader Data
  1463                                  ;
  1464                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1465                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1466                                  ;
  1467                                  ;-----------------------------------------------------------------------------------------------------------------------
  1468 000000BD 90                                              align   2
  1469 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1470 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1471 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1472 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1473 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1473 000000D1 74696E672073797374-
  1473 000000DA 656D20726571756972-
  1473 000000E3 657320616E20693338-
  1473 000000EC 36206F72206C617465-
  1473 000000F5 722070726F63657373-
  1473 000000FE 6F722E0D0A         
  1474 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1474 0000010C 65737320616E79206B-
  1474 00000115 657920746F20726573-
  1474 0000011E 746172742074686520-
  1474 00000127 636F6D70757465722E-
  1474 00000130 0D0A00             
  1475 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1476 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1476 00000145 7265640D0A00       
  1477 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1477 00000154 616465640D0A00     
  1478 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1478 00000164 4F530D0A00         
  1479 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1480                                  ;=======================================================================================================================
  1481                                  ;
  1482                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1483                                  ;
  1484                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1485                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1486                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1487                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1488                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1489                                  ;
  1490                                  ;=======================================================================================================================
  1491                                  ;=======================================================================================================================
  1492                                  ;
  1493                                  ;       Kernel Tables
  1494                                  ;
  1495                                  ;=======================================================================================================================
  1496                                  ;-----------------------------------------------------------------------------------------------------------------------
  1497                                  ;
  1498                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1499                                  ;
  1500                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1501                                  ;       first descriptor must be all nulls.
  1502                                  ;
  1503                                  ;       6   5         4         3         2         1         0
  1504                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1505                                  ;       ----------------------------------------------------------------
  1506                                  ;       h......hffffmmmma......ab......................bn..............n
  1507                                  ;       00000000                        all areas have base addresses below 2^24
  1508                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1509                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1510                                  ;                   1001                present, ring-0, selector
  1511                                  ;
  1512                                  ;       h...h   hi-order base address (bits 24-31)
  1513                                  ;       ffff    flags
  1514                                  ;       mmmm    hi-order limit (bits 16-19)
  1515                                  ;       a...a   access
  1516                                  ;       b...b   lo-order base address (bits 0-23)
  1517                                  ;       n...n   lo-order limit (bits 0-15)
  1518                                  ;
  1519                                  ;-----------------------------------------------------------------------------------------------------------------------
  1520                                  section                 gdt                                                     ;global descriptor table
  1521 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1522 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1523 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1524 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1525 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1526 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1527 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1528 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1529 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1530 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1531 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1532 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1533 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1534 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1535 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1536                                  ;-----------------------------------------------------------------------------------------------------------------------
  1537                                  ;
  1538                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1539                                  ;
  1540                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1541                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1542                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1543                                  ;
  1544                                  ;       6   5         4         3         2         1         0
  1545                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1546                                  ;       ----------------------------------------------------------------
  1547                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1548                                  ;
  1549                                  ;       h...h   high-order offset (bits 16-31)
  1550                                  ;       P       present (0=unused interrupt)
  1551                                  ;       zz      descriptor privilege level
  1552                                  ;       S       storage segment (must be zero for IDT)
  1553                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1554                                  ;       S...S   handling code selector in GDT
  1555                                  ;       l...l   lo-order offset (bits 0-15)
  1556                                  ;
  1557                                  ;-----------------------------------------------------------------------------------------------------------------------
  1558                                  section                 idt                                                     ;interrupt descriptor table
  1559                                                          mint    dividebyzero                                    ;00 divide by zero
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    singlestep                                      ;01 single step
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    nmi                                             ;02 non-maskable
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    break                                           ;03 break
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    into                                            ;04 into
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    bounds                                          ;05 bounds
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    badopcode                                       ;06 bad op code
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    nocoproc                                        ;07 no coprocessor
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mint    doublefault                                     ;08 double-fault
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mint    operand                                         ;09 operand
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mint    badtss                                          ;0a bad TSS
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mint    notpresent                                      ;0b not-present
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mint    stacklimit                                      ;0c stack limit
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mint    protection                                      ;0d general protection fault
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mint    int14                                           ;0e (reserved)
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mint    int15                                           ;0f (reserved)
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mint    coproccalc                                      ;10 (reserved)
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mint    int17                                           ;11 (reserved)
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mint    int18                                           ;12 (reserved)
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                                          mint    int19                                           ;13 (reserved)
  1578                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1578 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                                          mint    int20                                           ;14 (reserved)
  1579                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1579 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                                          mint    int21                                           ;15 (reserved)
  1580                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1580 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                                          mint    int22                                           ;16 (reserved)
  1581                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1581 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                                          mint    int23                                           ;17 (reserved)
  1582                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1582 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                                          mint    int24                                           ;18 (reserved)
  1583                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1583 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584                                                          mint    int25                                           ;19 (reserved)
  1584                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1584 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1585                                                          mint    int26                                           ;1a (reserved)
  1585                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1585 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1586                                                          mint    int27                                           ;1b (reserved)
  1586                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1586 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1587                                                          mint    int28                                           ;1c (reserved)
  1587                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1587 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1588                                                          mint    int29                                           ;1d (reserved)
  1588                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1588 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1589                                                          mint    int30                                           ;1e (reserved)
  1589                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1589 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1590                                                          mint    int31                                           ;1f (reserved)
  1590                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1590 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1591                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1591                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1591 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1592                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1592                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1592 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1593                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1593                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1593 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1594                                                          mtrap   com2                                            ;23 IRQ3 com2
  1594                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1594 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1595                                                          mtrap   com1                                            ;24 IRQ4 com1
  1595                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1595 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1596                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1596                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1596 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1597                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1597                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1597 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1598                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1598                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1598 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1599                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1599                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1599 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1600                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1600                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1600 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1601                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1601                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1601 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1602                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1602                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1602 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1603                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1603                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1603 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1604                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1604                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1604 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1605                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1605                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1605 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1606                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1606                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1606 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1607                                                          mtrap   svc                                             ;30 OS services
  1607                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1607 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1608 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1609                                  ;=======================================================================================================================
  1610                                  ;
  1611                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1612                                  ;
  1613                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1614                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1615                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1616                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1617                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1618                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1619                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1620                                  ;
  1621                                  ;=======================================================================================================================
  1622                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1623                                                          cpu     386                                             ;allow 80386 instructions
  1624                                                          bits    32                                              ;this is 32-bit code
  1625                                  ;=======================================================================================================================
  1626                                  ;
  1627                                  ;       CPU Interrupt Handlers
  1628                                  ;
  1629                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1630                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1631                                  ;
  1632                                  ;=======================================================================================================================
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                  ;
  1635                                  ;       INT0    Divide By Zero
  1636                                  ;
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                                          menter  dividebyzero                                    ;divide by zero
  1638                              <1> ?%1 equ ($-$$)
  1639 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1640 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1641 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1642                                  ;-----------------------------------------------------------------------------------------------------------------------
  1643                                  ;
  1644                                  ;       INT1    Single Step
  1645                                  ;
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                                          menter  singlestep                                      ;single step
  1647                              <1> ?%1 equ ($-$$)
  1648 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1649 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1650 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  ;
  1653                                  ;       INT2    Non-Maskable Interrupt
  1654                                  ;
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                                          menter  nmi                                             ;non-maskable
  1656                              <1> ?%1 equ ($-$$)
  1657 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1658 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1659 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                  ;
  1662                                  ;       INT3    Break
  1663                                  ;
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                                          menter  break                                           ;break
  1665                              <1> ?%1 equ ($-$$)
  1666 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1667 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1668 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                  ;
  1671                                  ;       INT4    Into
  1672                                  ;
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                                          menter  into                                            ;into
  1674                              <1> ?%1 equ ($-$$)
  1675 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1676 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1677 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;       INT5    Bounds
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                                          menter  bounds                                          ;bounds
  1683                              <1> ?%1 equ ($-$$)
  1684 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1685 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1686 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                  ;
  1689                                  ;       INT6    Bad Operation Code
  1690                                  ;
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                                          menter  badopcode                                       ;bad opcode interrupt
  1692                              <1> ?%1 equ ($-$$)
  1693 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1694 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1695 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                  ;
  1698                                  ;       INT7    No Coprocessor
  1699                                  ;
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1701                              <1> ?%1 equ ($-$$)
  1702 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1703 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1704 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                  ;
  1707                                  ;       INT8    Double Fault
  1708                                  ;
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                                          menter  doublefault                                     ;doublefault interrupt
  1710                              <1> ?%1 equ ($-$$)
  1711 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1712 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1713 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                  ;
  1716                                  ;       INT9    Operand
  1717                                  ;
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                                          menter  operand                                         ;operand interrupt
  1719                              <1> ?%1 equ ($-$$)
  1720 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1721 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1722 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                  ;
  1725                                  ;       INT10   Bad Task State Segment
  1726                                  ;
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                                          menter  badtss                                          ;bad TSS interrupt
  1728                              <1> ?%1 equ ($-$$)
  1729 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1730 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1731 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                  ;
  1734                                  ;       INT11   Not Present
  1735                                  ;
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                                          menter  notpresent                                      ;not present interrupt
  1737                              <1> ?%1 equ ($-$$)
  1738 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1739 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1740 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;       INT12   Stack Limit
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                                          menter  stacklimit                                      ;stack limit interrupt
  1746                              <1> ?%1 equ ($-$$)
  1747 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1748 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1749 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                  ;
  1752                                  ;       INT13   General Protection Fault
  1753                                  ;
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                                          menter  protection                                      ;protection fault interrupt
  1755                              <1> ?%1 equ ($-$$)
  1756 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1757 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1758 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                  ;
  1761                                  ;       INT14   Reserved
  1762                                  ;
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                                          menter  int14                                           ;(reserved)
  1764                              <1> ?%1 equ ($-$$)
  1765 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1766 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1767 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                  ;
  1770                                  ;       INT15   Reserved
  1771                                  ;
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                                          menter  int15                                           ;(reserved)
  1773                              <1> ?%1 equ ($-$$)
  1774 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1775 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1776 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                  ;
  1779                                  ;       INT16   Coprocessor Calculation
  1780                                  ;
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                                          menter  coproccalc                                      ;coprocessor calculation
  1782                              <1> ?%1 equ ($-$$)
  1783 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1784 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1785 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                  ;
  1788                                  ;       INT17   Reserved
  1789                                  ;
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                                          menter  int17                                           ;(reserved)
  1791                              <1> ?%1 equ ($-$$)
  1792 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1793 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1794 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  ;
  1797                                  ;       INT18   Reserved
  1798                                  ;
  1799                                  ;-----------------------------------------------------------------------------------------------------------------------
  1800                                                          menter  int18                                           ;(reserved)
  1800                              <1> ?%1 equ ($-$$)
  1801 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1802 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1803 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;       INT19   Reserved
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                                          menter  int19                                           ;(reserved)
  1809                              <1> ?%1 equ ($-$$)
  1810 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1811 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1812 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                  ;
  1815                                  ;       INT20   Reserved
  1816                                  ;
  1817                                  ;-----------------------------------------------------------------------------------------------------------------------
  1818                                                          menter  int20                                           ;(reserved)
  1818                              <1> ?%1 equ ($-$$)
  1819 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1820 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1821 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                  ;
  1824                                  ;       INT21   Reserved
  1825                                  ;
  1826                                  ;-----------------------------------------------------------------------------------------------------------------------
  1827                                                          menter  int21                                           ;(reserved)
  1827                              <1> ?%1 equ ($-$$)
  1828 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1829 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1830 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                  ;
  1833                                  ;       INT22   Reserved
  1834                                  ;
  1835                                  ;-----------------------------------------------------------------------------------------------------------------------
  1836                                                          menter  int22                                           ;(reserved)
  1836                              <1> ?%1 equ ($-$$)
  1837 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1838 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1839 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  ;
  1842                                  ;       INT23   Reserved
  1843                                  ;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                                          menter  int23                                           ;(reserved)
  1845                              <1> ?%1 equ ($-$$)
  1846 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1847 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1848 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                  ;
  1851                                  ;       INT24   Reserved
  1852                                  ;
  1853                                  ;-----------------------------------------------------------------------------------------------------------------------
  1854                                                          menter  int24                                           ;(reserved)
  1854                              <1> ?%1 equ ($-$$)
  1855 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1856 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1857 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                  ;
  1860                                  ;       INT25   Reserved
  1861                                  ;
  1862                                  ;-----------------------------------------------------------------------------------------------------------------------
  1863                                                          menter  int25                                           ;(reserved)
  1863                              <1> ?%1 equ ($-$$)
  1864 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1865 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1866 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                  ;
  1869                                  ;       INT26   Reserved
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                                          menter  int26                                           ;(reserved)
  1872                              <1> ?%1 equ ($-$$)
  1873 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1874 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1875 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                  ;
  1878                                  ;       INT27   Reserved
  1879                                  ;
  1880                                  ;-----------------------------------------------------------------------------------------------------------------------
  1881                                                          menter  int27                                           ;(reserved)
  1881                              <1> ?%1 equ ($-$$)
  1882 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1883 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1884 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                  ;
  1887                                  ;       INT28   Reserved
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                                          menter  int28                                           ;(reserved)
  1890                              <1> ?%1 equ ($-$$)
  1891 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1892 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1893 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                  ;
  1896                                  ;       INT29   Reserved
  1897                                  ;
  1898                                  ;-----------------------------------------------------------------------------------------------------------------------
  1899                                                          menter  int29                                           ;(reserved)
  1899                              <1> ?%1 equ ($-$$)
  1900 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1901 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1902 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  ;
  1905                                  ;       INT30   Reserved
  1906                                  ;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                                          menter  int30                                           ;(reserved)
  1908                              <1> ?%1 equ ($-$$)
  1909 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1910 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1911 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;       INT31   Reserved
  1915                                  ;
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                                          menter  int31                                           ;(reserved)
  1917                              <1> ?%1 equ ($-$$)
  1918 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1919 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1920 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                  ;
  1923                                  ;       Routine:        ReportInterrupt
  1924                                  ;
  1925                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1926                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1927                                  ;
  1928                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1929                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1930                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1931                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1932                                  ;                       [esp+0]         error message address                   stored by push instructions
  1933                                  ;
  1934                                  ;       Out:            N/A             This routine does not exit.
  1935                                  ;
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1938 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1939 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1940 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  1941                                  ;
  1942                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1943                                  ;
  1944                                  ;                       [ebp+56]        eflags
  1945                                  ;                       [ebp+52]        cs
  1946                                  ;                       [ebp+48]        eip
  1947                                  ;                       [ebp+44]        interrupt number (0-31)
  1948                                  ;                       [ebp+40]        error message address
  1949                                  ;                       [ebp+36]        ds
  1950                                  ;                       [ebp+32]        es
  1951                                  ;                       [ebp+28]        eax
  1952                                  ;                       [ebp+24]        ecx
  1953                                  ;                       [ebp+20]        edx
  1954                                  ;                       [ebp+16]        ebx
  1955                                  ;                       [ebp+12]        esp
  1956                                  ;                       [ebp+8]         ebp
  1957                                  ;                       [ebp+4]         esi
  1958                                  ;                       [ebp+0]         edi
  1959                                  ;
  1960 00000158 0E                                              push    cs                                              ;load code selector ...
  1961 00000159 1F                                              pop     ds                                              ;... into DS
  1962 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1963 0000015C 07                                              pop     es                                              ;... into ES
  1964                                  ;
  1965                                  ;       Display the interrupt report boundary box
  1966                                  ;
  1967 0000015D B10D                                            mov     cl,13                                           ;column
  1968 0000015F B506                                            mov     ch,6                                            ;row
  1969 00000161 B232                                            mov     dl,50                                           ;width
  1970 00000163 B608                                            mov     dh,8                                            ;height
  1971 00000165 B707                                            mov     bh,07h                                          ;attribute
  1972 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1973                                  ;
  1974                                  ;       Display the report header
  1975                                  ;
  1976 0000016C B10F                                            mov     cl,15                                           ;column
  1977 0000016E B507                                            mov     ch,7                                            ;row
  1978 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1979 00000175 E8420E0000                                      call    SetConsoleString                                ;draw text string
  1980                                  ;
  1981                                  ;       Display the interrupt description label
  1982                                  ;
  1983 0000017A B10F                                            mov     cl,15                                           ;column
  1984 0000017C B508                                            mov     ch,8                                            ;row
  1985 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1986 00000183 E8340E0000                                      call    SetConsoleString                                ;draw text string
  1987                                  ;
  1988                                  ;       Display the interrupt number
  1989                                  ;
  1990 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1991 0000018B B11A                                            mov     cl,26                                           ;column
  1992 0000018D B508                                            mov     ch,8                                            ;row
  1993 0000018F E8750B0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1994                                  ;
  1995                                  ;       Display the interrupt name
  1996                                  ;
  1997 00000194 B11D                                            mov     cl,29                                           ;column
  1998 00000196 B508                                            mov     ch,8                                            ;row
  1999 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2000 0000019B E81C0E0000                                      call    SetConsoleString                                ;display interrupt description
  2001                                  ;
  2002                                  ;       Display the register values header
  2003                                  ;
  2004 000001A0 B10F                                            mov     cl,15                                           ;column
  2005 000001A2 B50A                                            mov     ch,10                                           ;row
  2006 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  2007 000001A9 E80E0E0000                                      call    SetConsoleString                                ;draw text string
  2008                                  ;
  2009                                  ;       Display the EAX register label and value
  2010                                  ;
  2011 000001AE B10F                                            mov     cl,15                                           ;column
  2012 000001B0 B50B                                            mov     ch,11                                           ;row
  2013 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2014 000001B7 E8000E0000                                      call    SetConsoleString                                ;draw label
  2015 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2016 000001BF B113                                            mov     cl,19                                           ;column
  2017 000001C1 B50B                                            mov     ch,11                                           ;row
  2018 000001C3 E8670B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2019                                  ;
  2020                                  ;       Display the ECX register label and value
  2021                                  ;
  2022 000001C8 B10F                                            mov     cl,15                                           ;column
  2023 000001CA B50C                                            mov     ch,12                                           ;row
  2024 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2025 000001D1 E8E60D0000                                      call    SetConsoleString                                ;draw label
  2026 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2027 000001D9 B113                                            mov     cl,19                                           ;column
  2028 000001DB B50C                                            mov     ch,12                                           ;row
  2029 000001DD E84D0B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2030                                  ;
  2031                                  ;       Display the EDX register label and value
  2032                                  ;
  2033 000001E2 B10F                                            mov     cl,15                                           ;column
  2034 000001E4 B50D                                            mov     ch,13                                           ;row
  2035 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2036 000001EB E8CC0D0000                                      call    SetConsoleString                                ;draw label
  2037 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2038 000001F3 B113                                            mov     cl,19                                           ;column
  2039 000001F5 B50D                                            mov     ch,13                                           ;row
  2040 000001F7 E8330B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2041                                  ;
  2042                                  ;       Display the EBX register label and value
  2043                                  ;
  2044 000001FC B10F                                            mov     cl,15                                           ;column
  2045 000001FE B50E                                            mov     ch,14                                           ;row
  2046 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2047 00000205 E8B20D0000                                      call    SetConsoleString                                ;draw label
  2048 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2049 0000020D B113                                            mov     cl,19                                           ;column
  2050 0000020F B50E                                            mov     ch,14                                           ;row
  2051 00000211 E8190B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2052                                  ;
  2053                                  ;       Display the ESI register label and value
  2054                                  ;
  2055 00000216 B11D                                            mov     cl,29                                           ;column
  2056 00000218 B50B                                            mov     ch,11                                           ;row
  2057 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2058 0000021F E8980D0000                                      call    SetConsoleString                                ;draw label
  2059 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2060 00000227 B121                                            mov     cl,33                                           ;column
  2061 00000229 B50B                                            mov     ch,11                                           ;row
  2062 0000022B E8FF0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2063                                  ;
  2064                                  ;       Display the EDI register label and value
  2065                                  ;
  2066 00000230 B11D                                            mov     cl,29                                           ;column
  2067 00000232 B50C                                            mov     ch,12                                           ;row
  2068 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2069 00000239 E87E0D0000                                      call    SetConsoleString                                ;draw label
  2070 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2071 00000241 B121                                            mov     cl,33                                           ;column
  2072 00000243 B50C                                            mov     ch,12                                           ;row
  2073 00000245 E8E50A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2074                                  ;
  2075                                  ;       Display the EBP register label and value
  2076                                  ;
  2077 0000024A B11D                                            mov     cl,29                                           ;column
  2078 0000024C B50D                                            mov     ch,13                                           ;row
  2079 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2080 00000253 E8640D0000                                      call    SetConsoleString                                ;draw label
  2081 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2082 0000025B B121                                            mov     cl,33                                           ;column
  2083 0000025D B50D                                            mov     ch,13                                           ;row
  2084 0000025F E8CB0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2085                                  ;
  2086                                  ;       Display the DS register label and value
  2087                                  ;
  2088 00000264 B12A                                            mov     cl,42                                           ;column
  2089 00000266 B50B                                            mov     ch,11                                           ;row
  2090 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2091 0000026D E84A0D0000                                      call    SetConsoleString                                ;draw label
  2092 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2093 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2094 00000278 B12E                                            mov     cl,46                                           ;column
  2095 0000027A B50B                                            mov     ch,11                                           ;row
  2096 0000027C E8BE0A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2097                                  ;
  2098                                  ;       Display the ES register label and value
  2099                                  ;
  2100 00000281 B12A                                            mov     cl,42                                           ;column
  2101 00000283 B50C                                            mov     ch,12                                           ;row
  2102 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2103 0000028A E82D0D0000                                      call    SetConsoleString                                ;draw label
  2104 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2105 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2106 00000295 B12E                                            mov     cl,46                                           ;column
  2107 00000297 B50C                                            mov     ch,12                                           ;row
  2108 00000299 E8A10A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2109                                  ;
  2110                                  ;       Display the SS register label and value
  2111                                  ;
  2112 0000029E B12A                                            mov     cl,42                                           ;column
  2113 000002A0 B50D                                            mov     ch,13                                           ;row
  2114 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2115 000002A7 E8100D0000                                      call    SetConsoleString                                ;draw label
  2116 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2117 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2118 000002B1 B12E                                            mov     cl,46                                           ;column
  2119 000002B3 B50D                                            mov     ch,13                                           ;row
  2120 000002B5 E8850A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2121                                  ;
  2122                                  ;       Display the CS register lable and value
  2123                                  ;
  2124 000002BA B12A                                            mov     cl,42                                           ;column
  2125 000002BC B50E                                            mov     ch,14                                           ;row
  2126 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2127 000002C3 E8F40C0000                                      call    SetConsoleString                                ;draw label
  2128 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2129 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2130 000002CE B12E                                            mov     cl,46                                           ;column
  2131 000002D0 B50E                                            mov     ch,14                                           ;row
  2132 000002D2 E8680A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2133                                  ;
  2134                                  ;       Display the EFLAGS register label and value
  2135                                  ;
  2136 000002D7 B133                                            mov     cl,51                                           ;column
  2137 000002D9 B50B                                            mov     ch,11                                           ;row
  2138 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2139 000002E0 E8D70C0000                                      call    SetConsoleString                                ;draw label
  2140 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2141 000002E8 B137                                            mov     cl,55                                           ;column
  2142 000002EA B50B                                            mov     ch,11                                           ;row
  2143 000002EC E83E0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2144                                  ;
  2145                                  ;       Display the ESP register label and value
  2146                                  ;
  2147 000002F1 B133                                            mov     cl,51                                           ;column
  2148 000002F3 B50D                                            mov     ch,13                                           ;row
  2149 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2150 000002FA E8BD0C0000                                      call    SetConsoleString                                ;draw label
  2151 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2152 00000302 B137                                            mov     cl,55                                           ;column
  2153 00000304 B50D                                            mov     ch,13                                           ;row
  2154 00000306 E8240A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2155                                  ;
  2156                                  ;       Display the EIP register label and value
  2157                                  ;
  2158 0000030B B133                                            mov     cl,51                                           ;column
  2159 0000030D B50E                                            mov     ch,14                                           ;row
  2160 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2161 00000314 E8A30C0000                                      call    SetConsoleString                                ;draw label
  2162 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2163 0000031C B137                                            mov     cl,55                                           ;column
  2164 0000031E B50E                                            mov     ch,14                                           ;row
  2165 00000320 E80A0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2166                                  ;
  2167                                  ;       Halt and loop until reset
  2168                                  ;
  2169 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2170 00000326 F4                                              hlt                                                     ;halt processor
  2171 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                  ;
  2174                                  ;       Processor Interrupt Name Strings
  2175                                  ;
  2176                                  ;-----------------------------------------------------------------------------------------------------------------------
  2177 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2177 00000332 6279207A65726F00   
  2178 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2178 00000343 657000             
  2179 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2179 0000034F 626C6520696E746572-
  2179 00000358 7275707400         
  2180 0000035D 427265616B00            czIntBreak              db      "Break",0
  2181 00000363 496E746F00              czIntInto               db      "Into",0
  2182 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2183 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2183 00000378 74696F6E20436F6465-
  2183 00000381 00                 
  2184 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2184 0000038B 6573736F7200       
  2185 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2185 0000039A 756C7400           
  2186 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2187 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2187 000003AF 537461746520536567-
  2187 000003B8 6D656E7400         
  2188 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2188 000003C6 6E7400             
  2189 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2189 000003D2 697400             
  2190 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2190 000003DE 726F74656374696F6E-
  2190 000003E7 204661756C7400     
  2191 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2191 000003F7 6F722043616C63756C-
  2191 00000400 6174696F6E00       
  2192 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2193                                  ;-----------------------------------------------------------------------------------------------------------------------
  2194                                  ;
  2195                                  ;       Processor Interrupt Handling Strings
  2196                                  ;
  2197                                  ;-----------------------------------------------------------------------------------------------------------------------
  2198 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2198 00000418 6C65642070726F6365-
  2198 00000421 73736F7220696E7465-
  2198 0000042A 727275707420686173-
  2198 00000433 206F63637572726564-
  2198 0000043C 3A00               
  2199 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2199 00000447 202300             
  2200 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2200 00000453 206174207468652074-
  2200 0000045C 696D65206F66207468-
  2200 00000465 6520696E7465727275-
  2200 0000046E 70743A00           
  2201 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2202 00000477 4543583A00              czIntECX                db      "ECX:",0
  2203 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2204 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2205 00000486 4553493A00              czIntESI                db      "ESI:",0
  2206 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2207 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2208 00000495 4553503A00              czIntESP                db      "ESP:",0
  2209 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2210 0000049F 2045533A00              czIntES                 db      " ES:",0
  2211 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2212 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2213 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2214 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;       Routine:        DrawTextDialogBox
  2218                                  ;
  2219                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2220                                  ;
  2221                                  ;       In:             CL      upper left column (0-79)
  2222                                  ;                       CH      upper left row (0-24)
  2223                                  ;                       DL      column width, excluding border
  2224                                  ;                       DH      row height, excluding border
  2225                                  ;                       BH      color attribute
  2226                                  ;
  2227                                  ;-----------------------------------------------------------------------------------------------------------------------
  2228 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2229 000004B9 56                                              push    esi                                             ;
  2230 000004BA 57                                              push    edi                                             ;
  2231 000004BB 06                                              push    es                                              ;
  2232 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2233 000004BE 07                                              pop     es                                              ;... into ES
  2234                                  ;
  2235                                  ;       Compute target display offset
  2236                                  ;
  2237 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2238 000004C1 88E8                                            mov     al,ch                                           ;row
  2239 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2240 000004C5 F6E4                                            mul     ah                                              ;row offset
  2241 000004C7 00C8                                            add     al,cl                                           ;add column
  2242 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2243 000004CC 00C8                                            add     al,cl                                           ;add column
  2244 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2245 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2246                                  ;
  2247                                  ;       Display top border row
  2248                                  ;
  2249 000004D3 57                                              push    edi                                             ;save target row offset
  2250 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2251 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2252 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2253 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2254 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2255 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2256 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2257 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2258 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2259 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2260 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2261                                  ;
  2262                                  ;       Display dialog box body rows
  2263                                  ;
  2264 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2265 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2266 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2267 000004F3 57                                              push    edi                                             ;save target row offset
  2268 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2269 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2270 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2271 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2272 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2273 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2274 00000500 F366AB                                          rep     stosw                                           ;display row
  2275 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2276 00000505 66AB                                            stosw                                                   ;display character and attribute
  2277 00000507 5F                                              pop     edi                                             ;restore target row offset
  2278 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2279 0000050E 59                                              pop     ecx                                             ;remaining rows
  2280 0000050F E2E1                                            loop    .10                                             ;next row
  2281                                  ;
  2282                                  ;       Display bottom border row
  2283                                  ;
  2284 00000511 57                                              push    edi                                             ;save target row offset
  2285 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2286 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2287 00000516 66AB                                            stosw                                                   ;display character and attribute
  2288 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2289 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2290 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2291 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2292 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2293 00000523 66AB                                            stosw                                                   ;display character and attribute
  2294 00000525 5F                                              pop     edi                                             ;restore target row offset
  2295 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2296                                  ;
  2297                                  ;       Restore and return
  2298                                  ;
  2299 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2300 0000052D 5F                                              pop     edi                                             ;
  2301 0000052E 5E                                              pop     esi                                             ;
  2302 0000052F 59                                              pop     ecx                                             ;
  2303 00000530 C3                                              ret                                                     ;return
  2304                                  ;=======================================================================================================================
  2305                                  ;
  2306                                  ;       Hardware Device Interupts
  2307                                  ;
  2308                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2309                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2310                                  ;       (BX=2028h).
  2311                                  ;
  2312                                  ;=======================================================================================================================
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                  ;
  2315                                  ;       IRQ0    Clock Tick Interrupt
  2316                                  ;
  2317                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2318                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2319                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2320                                  ;
  2321                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2322                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2323                                  ;
  2324                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2325                                  ;       zero, the floppy disk motors are turned off.
  2326                                  ;
  2327                                  ;-----------------------------------------------------------------------------------------------------------------------
  2328                                                          menter  clocktick                                       ;clock tick interrupt
  2328                              <1> ?%1 equ ($-$$)
  2329 00000531 50                                              push    eax                                             ;save modified regs
  2330 00000532 52                                              push    edx                                             ;
  2331 00000533 1E                                              push    ds                                              ;
  2332                                  ;
  2333                                  ;       Update the clock tick count and the elapsed days as needed.
  2334                                  ;
  2335 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2336 00000536 1F                                              pop     ds                                              ;... into data segment register
  2337 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2338 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2339 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2340 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2341 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2342 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2343 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2344                                  ;
  2345                                  ;       Decrement floppy disk motor timeout.
  2346                                  ;
  2347 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2348 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2349 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2350 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2351                                  ;
  2352                                  ;       Turn off the floppy disk motor if appropriate.
  2353                                  ;
  2354 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2355 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2356 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2357 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2358 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2359 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2360 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2361 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2362 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2363 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2364 00000577 EE                                              out     dx,al                                           ;turn motor off
  2365                                  ;
  2366                                  ;       Signal the end of the hardware interrupt.
  2367                                  ;
  2368 00000578 E8790A0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2369                                  ;
  2370                                  ;       Restore and return.
  2371                                  ;
  2372 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2373 0000057E 5A                                              pop     edx                                             ;
  2374 0000057F 58                                              pop     eax                                             ;
  2375 00000580 CF                                              iretd                                                   ;return
  2376                                  ;-----------------------------------------------------------------------------------------------------------------------
  2377                                  ;
  2378                                  ;       IRQ1    Keyboard Interrupt
  2379                                  ;
  2380                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2381                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2382                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2383                                  ;       ALL modified registers upon return.
  2384                                  ;
  2385                                  ;-----------------------------------------------------------------------------------------------------------------------
  2386                                                          menter  keyboard                                        ;keyboard interrrupt
  2386                              <1> ?%1 equ ($-$$)
  2387 00000581 50                                              push    eax                                             ;save non-volatile regs
  2388 00000582 53                                              push    ebx                                             ;
  2389 00000583 51                                              push    ecx                                             ;
  2390 00000584 56                                              push    esi                                             ;
  2391 00000585 1E                                              push    ds                                              ;
  2392 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2393 00000588 1F                                              pop     ds                                              ;... into data segment register
  2394 00000589 30C0                                            xor     al,al                                           ;zero
  2395 0000058B A225080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2396 00000590 A226080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2397 00000595 A227080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2398 0000059A A228080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2399 0000059F A229080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2400 000005A4 A22A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2401 000005A9 B020                                            mov     al,' '                                          ;space
  2402 000005AB A22B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2403 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2404 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2405 000005B4 200524080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2406 000005BA 8A1D22080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2407 000005C0 8A3D23080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2408 000005C6 E8750A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2409 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2410 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2411 000005D3 A225080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2412 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2413 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2414 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2415 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2416 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2417 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2418 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2419 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2420 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2421 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2422 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2423 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2424 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2425 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2426 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2427 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2428 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2429 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2430 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2431 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2432 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2433 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2434 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2435 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2436 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2437 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2438 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2439 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2440 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2441 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2442 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2443 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2444 00000654 E8E7090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2445 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2446 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2447 00000661 A226080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2448 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2449 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2450 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2451 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2452 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2453 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2454 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2455 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2456 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2457 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2458 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2459 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2460 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2461 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2462 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2463 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2464 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2465 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2466 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2467 0000069C E89F090000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2468 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2469 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2470 000006A9 A227080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2471 000006AE E88D090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2472 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2473 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2474 000006BB A228080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2475 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2476 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2477 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2478 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2479 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2480 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2481 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2482 000006D1 E83B090000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2483 000006D6 881D22080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2484 000006DC 883D23080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2485 000006E2 E8C0060000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2486 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2487 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2488 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2489 000006F1 E84A090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2490 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2491 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2492 000006FE A226080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2493 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2494 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2495 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2496 0000070E E82D090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2497 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2498 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2499 0000071B A227080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2500 00000720 E81B090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2501 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2502 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2503 0000072D A228080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2504 00000732 E809090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2505 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2506 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2507 0000073F A229080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2508 00000744 E8F7080000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2509 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2510 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2511 0000074D A22A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2512 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2513 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2514 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2515 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2516 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2517 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2518 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2519 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2520 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2521 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2522 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2523 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2524 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2525 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2526 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2527 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2528 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2529 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2530 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2531 00000787 A22B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2532 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2533 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2534 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2535 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2536 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2537 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2538 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2539 000007A4 50                                              push    eax                                             ;save codes
  2540 000007A5 E86D070000                                      call    PutMessage                                      ;put message to console
  2541 000007AA 58                                              pop     eax                                             ;restore codes
  2542 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2543 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2544 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2545 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2546 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2547 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2548 000007BD E855070000                                      call    PutMessage                                      ;put message to console
  2549 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2550 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2551 000007C6 080524080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2552 000007CC E87E050000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2553 000007D1 E820080000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2554 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2555 000007D7 5E                                              pop     esi                                             ;
  2556 000007D8 59                                              pop     ecx                                             ;
  2557 000007D9 5B                                              pop     ebx                                             ;
  2558 000007DA 58                                              pop     eax                                             ;
  2559 000007DB CF                                              iretd                                                   ;return
  2560                                  ;-----------------------------------------------------------------------------------------------------------------------
  2561                                  ;       Scan-Code to ASCII Translation Tables
  2562                                  ;-----------------------------------------------------------------------------------------------------------------------
  2563 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2564 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2565 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2566 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2567 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2568 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2569 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2570 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2571 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2572 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2573 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2574 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2575 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2576 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2577 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2578 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2579 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2580 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2581 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2582 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2583 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2584 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2585 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2586 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2587 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2588 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2589 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2590 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2591 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2592 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2593 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2594 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  iochannel                                       ;secondary 8259A cascade
  2600                              <1> ?%1 equ ($-$$)
  2601 000008DC 50                                              push    eax                                             ;save modified regs
  2602 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  com2                                            ;serial port 2 interrupt
  2608                              <1> ?%1 equ ($-$$)
  2609 000008DF 50                                              push    eax                                             ;save modified regs
  2610 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  com1                                            ;serial port 1 interrupt
  2616                              <1> ?%1 equ ($-$$)
  2617 000008E2 50                                              push    eax                                             ;save modified regs
  2618 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2624                              <1> ?%1 equ ($-$$)
  2625 000008E5 50                                              push    eax                                             ;save modified regs
  2626 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ6    Diskette Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  diskette                                        ;floppy disk interrupt
  2632                              <1> ?%1 equ ($-$$)
  2633 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2634 000008E9 1E                                              push    ds                                              ;
  2635 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2636 000008EC 1F                                              pop     ds                                              ;... into DS register
  2637 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2638 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2639 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2640 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2641 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                  ;
  2644                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2647                              <1> ?%1 equ ($-$$)
  2648 000008FC 50                                              push    eax                                             ;save modified regs
  2649 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                                          menter  rtclock                                         ;real-time clock interrupt
  2655                              <1> ?%1 equ ($-$$)
  2656 000008FF 50                                              push    eax                                             ;save modified regs
  2657 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                  ;
  2660                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2663                              <1> ?%1 equ ($-$$)
  2664 00000902 50                                              push    eax                                             ;save modified regs
  2665 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ10   Reserved Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  irq10                                           ;reserved
  2671                              <1> ?%1 equ ($-$$)
  2672 00000905 50                                              push    eax                                             ;save modified regs
  2673 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ11   Reserved Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  irq11                                           ;reserved
  2679                              <1> ?%1 equ ($-$$)
  2680 00000908 50                                              push    eax                                             ;save modified regs
  2681 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2687                              <1> ?%1 equ ($-$$)
  2688 0000090B 50                                              push    eax                                             ;save modified regs
  2689 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  coprocessor                                     ;coprocessor interrupt
  2695                              <1> ?%1 equ ($-$$)
  2696 0000090E 50                                              push    eax                                             ;save modified regs
  2697 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2703                              <1> ?%1 equ ($-$$)
  2704 00000911 50                                              push    eax                                             ;save modified regs
  2705 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       IRQ15   Reserved Hardware Interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                                          menter  irq15                                           ;reserved
  2711                              <1> ?%1 equ ($-$$)
  2712 00000914 50                                              push    eax                                             ;save modified regs
  2713 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                  ;
  2716                                  ;       Exit from hardware interrupt
  2717                                  ;
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719 00000917 E8E0060000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2720 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2721 0000091E E8D3060000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2722 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2723 00000924 CF                                              iretd                                                   ;return from interrupt
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;       INT 30h Operating System Software Service Interrupt
  2727                                  ;
  2728                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2729                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2730                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2731                                  ;       the entry address of the specific function from a table.
  2732                                  ;
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                                          menter  svc
  2734                              <1> ?%1 equ ($-$$)
  2735 00000925 3C0C                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2736 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2737 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2738 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2739 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2740 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2741                                  ;-----------------------------------------------------------------------------------------------------------------------
  2742                                  ;
  2743                                  ;       Service Request Table
  2744                                  ;
  2745                                  ;
  2746                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2747                                  ;
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2749                              <1> tsvc :
  2749                              <1> e%1 equ ($-tsvc)/4
  2749 00000937 [67090000]          <1>  dd %1
  2750                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2750                              <1> e%1 equ ($-tsvc)/4
  2750 0000093B [3F0F0000]          <1>  dd %1
  2751                                                          tsvce   CompareMemory                                   ;compare memory
  2751                              <1> e%1 equ ($-tsvc)/4
  2751 0000093F [C20B0000]          <1>  dd %1
  2752                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2752                              <1> e%1 equ ($-tsvc)/4
  2752 00000943 [710E0000]          <1>  dd %1
  2753                                                          tsvce   FreeMemory                                      ;free memory block
  2753                              <1> e%1 equ ($-tsvc)/4
  2753 00000947 [850A0000]          <1>  dd %1
  2754                                                          tsvce   GetConsoleString                                ;get string input
  2754                              <1> e%1 equ ($-tsvc)/4
  2754 0000094B [230C0000]          <1>  dd %1
  2755                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2755                              <1> e%1 equ ($-tsvc)/4
  2755 0000094F [A40E0000]          <1>  dd %1
  2756                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2756                              <1> e%1 equ ($-tsvc)/4
  2756 00000953 [CC0F0000]          <1>  dd %1
  2757                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2757                              <1> e%1 equ ($-tsvc)/4
  2757 00000957 [410E0000]          <1>  dd %1
  2758                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2758                              <1> e%1 equ ($-tsvc)/4
  2758 0000095B [02100000]          <1>  dd %1
  2759                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2759                              <1> e%1 equ ($-tsvc)/4
  2759 0000095F [C20E0000]          <1>  dd %1
  2760                                                          tsvce   UpperCaseString                                 ;upper-case string
  2760                              <1> e%1 equ ($-tsvc)/4
  2760 00000963 [DF0B0000]          <1>  dd %1
  2761                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  ;
  2764                                  ;       Service Request Macros
  2765                                  ;
  2766                                  ;       These macros provide positional parameterization of service request calls.
  2767                                  ;
  2768                                  ;-----------------------------------------------------------------------------------------------------------------------
  2769                                  %macro                  allocateMemory 1
  2770                                                          mov     ecx,%1                                          ;bytes to allocate
  2771                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2772                                                          int     _svc                                            ;invoke OS service
  2773                                  %endmacro
  2774                                  %macro                  clearConsoleScreen 0
  2775                                                          mov     al,eClearConsoleScreen                          ;function code
  2776                                                          int     _svc                                            ;invoke OS service
  2777                                  %endmacro
  2778                                  %macro                  compareMemory 0
  2779                                                          mov     al,eCompareMemory                               ;function code
  2780                                                          int     _svc                                            ;invoke OS service
  2781                                  %endmacro
  2782                                  %macro                  decimalToUnsigned 0
  2783                                                          mov     al,eDecimalToUnsigned                           ;function code
  2784                                                          int     _svc                                            ;invoke OS servie
  2785                                  %endmacro
  2786                                  %macro                  freeMemory 1
  2787                                                          mov     edx,%1                                          ;address of memory block
  2788                                                          mov     al,eFreeMemory                                  ;function code
  2789                                                          int     _svc                                            ;invoke OS service
  2790                                  %endmacro
  2791                                  %macro                  getConsoleString 4
  2792                                                          mov     edx,%1                                          ;buffer address
  2793                                                          mov     ecx,%2                                          ;max characters
  2794                                                          mov     bh,%3                                           ;echo indicator
  2795                                                          mov     bl,%4                                           ;terminator
  2796                                                          mov     al,eGetConsoleString                            ;function code
  2797                                                          int     _svc                                            ;invoke OS service
  2798                                  %endmacro
  2799                                  %macro                  hexadecimalToUnsigned 0
  2800                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2801                                                          int     _svc                                            ;invoke OS service
  2802                                  %endmacro
  2803                                  %macro                  placeCursor 0
  2804                                                          mov     al,ePlaceCursor                                 ;function code
  2805                                                          int     _svc                                            ;invoke OS service
  2806                                  %endmacro
  2807                                  %macro                  putConsoleString 1
  2808                                                          mov     edx,%1                                          ;string address
  2809                                                          mov     al,ePutConsoleString                            ;function code
  2810                                                          int     _svc                                            ;invoke OS service
  2811                                  %endmacro
  2812                                  %macro                  resetSystem 0
  2813                                                          mov     al,eResetSystem                                 ;function code
  2814                                                          int     _svc                                            ;invoke OS service
  2815                                  %endmacro
  2816                                  %macro                  unsignedToHexadecimal 0
  2817                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2818                                                          int     _svc                                            ;invoke OS service
  2819                                  %endmacro
  2820                                  %macro                  upperCaseString 0
  2821                                                          mov     al,eUpperCaseString                             ;function code
  2822                                                          int     _svc                                            ;invoke OS service
  2823                                  %endmacro
  2824                                  ;=======================================================================================================================
  2825                                  ;
  2826                                  ;       Kernel Function Library
  2827                                  ;
  2828                                  ;=======================================================================================================================
  2829                                  ;=======================================================================================================================
  2830                                  ;
  2831                                  ;       Memory Helper Routines
  2832                                  ;
  2833                                  ;       AllocateMemory
  2834                                  ;       FreeMemory
  2835                                  ;
  2836                                  ;=======================================================================================================================
  2837                                  ;-----------------------------------------------------------------------------------------------------------------------
  2838                                  ;
  2839                                  ;       Routine:        AllocateMemory
  2840                                  ;
  2841                                  ;       Description:    This routine allocates a memory block for the given task.
  2842                                  ;
  2843                                  ;       In:             ECX     bytes of memory to allocate
  2844                                  ;
  2845                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2846                                  ;                               0       unable to allocate memory
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849 00000967 53                      AllocateMemory          push    ebx                                             ;save non-volatile regs
  2850 00000968 51                                              push    ecx                                             ;
  2851 00000969 56                                              push    esi                                             ;
  2852 0000096A 1E                                              push    ds                                              ;
  2853                                  ;
  2854                                  ;       Address kernel memory structures
  2855                                  ;
  2856 0000096B 6A18                                            push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2857 0000096D 1F                                              pop     ds                                              ;... into data segment reg
  2858 0000096E BE08080000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2859                                  ;
  2860                                  ;       Set requested size to minimum block size if requested size is too small.
  2861                                  ;
  2862 00000973 81F900010000                                    cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2863 00000979 7305                                            jae     .10                                             ;no, branch
  2864 0000097B B900010000                                      mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2865 00000980 83C120                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2866                                  ;
  2867                                  ;       Find the first free memory block large enough to satisfy the request.
  2868                                  ;
  2869 00000983 8B4608                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2870 00000986 85C0                    .20                     test    eax,eax                                         ;end of free block chain?
  2871 00000988 0F84F2000000                                    jz      .220                                            ;yes, branch
  2872 0000098E 3B4804                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2873 00000991 7605                                            jbe     .30                                             ;yes, branch
  2874 00000993 8B4018                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2875 00000996 EBEE                                            jmp     .20                                             ;continue
  2876                                  ;-----------------------------------------------------------------------------------------------------------------------
  2877                                  ;
  2878                                  ;       Address the previous and next free memory blocks.
  2879                                  ;
  2880 00000998 8B581C                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2881 0000099B 8B5018                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2882                                  ;
  2883                                  ;       Remove the free memory block from the forward free memory block chain.
  2884                                  ;
  2885 0000099E 85DB                                            test    ebx,ebx                                         ;any previous free memory block?
  2886 000009A0 7405                                            jz      .40                                             ;no, branch
  2887 000009A2 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2888 000009A5 EB03                                            jmp     .50                                             ;continue
  2889 000009A7 895608                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2890                                  ;
  2891                                  ;       Remove the free memory block from the reverse free memory block chain.
  2892                                  ;
  2893 000009AA 85D2                    .50                     test    edx,edx                                         ;any next free memory block?
  2894 000009AC 7405                                            jz      .60                                             ;no, branch
  2895 000009AE 895A1C                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2896 000009B1 EB03                                            jmp     .70                                             ;continue
  2897 000009B3 895E0C                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2898                                  ;-----------------------------------------------------------------------------------------------------------------------
  2899                                  ;
  2900                                  ;       Determine if the free memory block can be split.
  2901                                  ;
  2902 000009B6 8B5804                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2903 000009B9 29CB                                            sub     ebx,ecx                                         ;subtract requested memory size
  2904 000009BB 81FB00010000                                    cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2905 000009C1 7263                                            jb      .150                                            ;no, branch
  2906                                  ;
  2907                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2908                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2909                                  ;       of the requested memory size.
  2910                                  ;
  2911 000009C3 894804                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2912 000009C6 89C2                                            mov     edx,eax                                         ;memory block address
  2913 000009C8 01CA                                            add     edx,ecx                                         ;address new new next contig block
  2914 000009CA 8B4810                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2915 000009CD 895010                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2916                                  ;
  2917                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2918                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2919                                  ;
  2920 000009D0 E305                                            jecxz   .80                                             ;no next contig, branch
  2921 000009D2 895114                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2922 000009D5 EB03                                            jmp     .90                                             ;continue
  2923 000009D7 895604                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2924                                  ;
  2925                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2926                                  ;
  2927 000009DA 895A04                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2928 000009DD 894A10                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2929 000009E0 894214                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2930 000009E3 BB46524545                                      mov     ebx,EMEMFREECODE                                ;free memory signature
  2931 000009E8 891A                                            mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2932 000009EA 31DB                                            xor     ebx,ebx                                         ;zero register
  2933 000009EC 895A0C                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2934 000009EF 895A08                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2935                                  ;
  2936                                  ;       Find the proper location in the free block chain for the new free block
  2937                                  ;
  2938 000009F2 8B5A04                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  2939 000009F5 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  2940 000009F8 E30A                    .100                    jecxz   .110                                            ;branch if at end of chain
  2941 000009FA 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  2942 000009FD 7605                                            jbe     .110                                            ;yes, branch
  2943 000009FF 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  2944 00000A02 EBF4                                            jmp     .100                                            ;continue
  2945                                  ;
  2946                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  2947                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  2948                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  2949                                  ;       block of hte next block, if there is one.
  2950                                  ;
  2951 00000A04 894A18                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  2952 00000A07 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  2953 00000A0A E308                                            jecxz   .120                                            ;branch if no next block
  2954 00000A0C 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  2955 00000A0F 89511C                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  2956 00000A12 EB03                                            jmp     .130                                            ;continue
  2957 00000A14 89560C                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  2958                                  ;
  2959                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  2960                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  2961                                  ;       last user block pointers if necessary.
  2962                                  ;
  2963 00000A17 895A1C                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  2964 00000A1A 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  2965 00000A1C 7405                                            jz      .140                                            ;no, branch
  2966 00000A1E 895318                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  2967 00000A21 EB03                                            jmp     .150                                            ;continue
  2968 00000A23 895608                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  2969                                  ;
  2970                                  ;       Update the newly allocated block's owner and signature.
  2971                                  ;
  2972 00000A26 BA55534552              .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  2973 00000A2B 8910                                            mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  2974 00000A2D 31D2                                            xor     edx,edx                                         ;zero register
  2975 00000A2F 660F00CA                                        str     dx                                              ;load the task state register
  2976 00000A33 895008                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  2977                                  ;
  2978                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  2979                                  ;
  2980 00000A36 8B4E10                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  2981 00000A39 E323                    .160                    jecxz   .180                                            ;branch if at end of chain
  2982 00000A3B 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  2983 00000A3E 721E                                            jb      .180                                            ;branch if block belongs to next task
  2984 00000A40 7405                                            je      .170                                            ;branch if block belongs to this task
  2985 00000A42 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  2986 00000A45 EBF2                                            jmp     .160                                            ;continue
  2987                                  ;
  2988                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  2989                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  2990                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  2991                                  ;       place to insert the block.
  2992                                  ;
  2993 00000A47 8B5004                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  2994 00000A4A 3B5104                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  2995 00000A4D 760F                                            jbe     .180                                            ;yes, branch
  2996 00000A4F 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  2997 00000A52 85C9                                            test    ecx,ecx                                         ;end of chain?
  2998 00000A54 7408                                            jz      .180                                            ;yes, branch
  2999 00000A56 8B5008                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3000 00000A59 3B5108                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3001 00000A5C 74E9                                            je      .170                                            ;yes, continue search
  3002                                  ;
  3003                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3004                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3005                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3006                                  ;       do have a previous-block, we update that block's next-block pointer.
  3007                                  ;
  3008 00000A5E 894818                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3009 00000A61 8B5E14                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3010 00000A64 E308                                            jecxz   .190                                            ;branch if no next-task block
  3011 00000A66 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3012 00000A69 89411C                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3013 00000A6C EB03                                            jmp     .200                                            ;continue
  3014 00000A6E 894614                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3015                                  ;
  3016                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3017                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3018                                  ;       global first and/or last user-block pointers if necessary.
  3019                                  ;
  3020 00000A71 89581C                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3021 00000A74 85DB                                            test    ebx,ebx                                         ;do we have a previous task block?
  3022 00000A76 7405                                            jz      .210                                            ;no, branch
  3023 00000A78 894318                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3024 00000A7B EB03                                            jmp     .220                                            ;continue
  3025 00000A7D 894610                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3026                                  ;
  3027                                  ;       Restore registers and return to caller.
  3028                                  ;
  3029 00000A80 1F                      .220                    pop     ds                                              ;restore non-volatie regs
  3030 00000A81 5E                                              pop     esi                                             ;
  3031 00000A82 59                                              pop     ecx                                             ;
  3032 00000A83 5B                                              pop     ebx                                             ;
  3033 00000A84 C3                                              ret                                                     ;return
  3034                                  ;-----------------------------------------------------------------------------------------------------------------------
  3035                                  ;
  3036                                  ;       Routine:        FreeMemory
  3037                                  ;
  3038                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3039                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3040                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3041                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3042                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3043                                  ;
  3044                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3045                                  ;
  3046                                  ;       Out:            EAX     -1      invalid memory block
  3047                                  ;                               0       memory block freed
  3048                                  ;
  3049                                  ;-----------------------------------------------------------------------------------------------------------------------
  3050 00000A85 53                      FreeMemory              push    ebx                                             ;save non-volatile regs
  3051 00000A86 51                                              push    ecx                                             ;
  3052 00000A87 56                                              push    esi                                             ;
  3053 00000A88 57                                              push    edi                                             ;
  3054 00000A89 1E                                              push    ds                                              ;
  3055 00000A8A 06                                              push    es                                              ;
  3056                                  ;
  3057                                  ;       Address the root memory structure
  3058                                  ;
  3059 00000A8B 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3060 00000A8D 07                                              pop     es                                              ;... into extra segment reg
  3061 00000A8E 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3062 00000A90 1F                                              pop     ds                                              ;... into data segment reg
  3063 00000A91 BE08080000                                      mov     esi,wsConsoleMemRoot                            ;memory root structure
  3064 00000A96 89D7                                            mov     edi,edx                                         ;memory block address
  3065                                  ;
  3066                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3067                                  ;
  3068 00000A98 31C0                                            xor     eax,eax                                         ;indicate success
  3069 00000A9A 813F46524545                                    cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3070 00000AA0 0F8415010000                                    je      .240                                            ;yes, branch
  3071 00000AA6 48                                              dec     eax                                             ;indicate failure
  3072 00000AA7 813F55534552                                    cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3073 00000AAD 0F8508010000                                    jne     .240                                            ;no, branch
  3074                                  ;-----------------------------------------------------------------------------------------------------------------------
  3075                                  ;
  3076                                  ;       Unlink the USER memory block.
  3077                                  ;
  3078                                  ;-----------------------------------------------------------------------------------------------------------------------
  3079                                  ;
  3080                                  ;       Set the block signature. Reset owner.
  3081                                  ;
  3082 00000AB3 C70746524545                                    mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3083 00000AB9 31C0                                            xor     eax,eax                                         ;zero register
  3084 00000ABB 894708                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3085                                  ;
  3086                                  ;       Wipe user area.
  3087                                  ;
  3088 00000ABE 57                                              push    edi                                             ;save block address
  3089 00000ABF 8B4F04                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3090 00000AC2 83E920                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3091 00000AC5 83C720                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3092 00000AC8 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3093 00000ACA F3AA                                            rep     stosb                                           ;clear memory
  3094 00000ACC 5F                                              pop     edi                                             ;restore block address
  3095                                  ;
  3096                                  ;       Address the preceding and following USER memory blocks
  3097                                  ;
  3098 00000ACD 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3099 00000AD0 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3100                                  ;
  3101                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3102                                  ;       pointer to point to the USER block following this block.
  3103                                  ;
  3104 00000AD3 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3105 00000AD5 7405                                            jz      .10                                             ;no, branch
  3106 00000AD7 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3107 00000ADA EB03                                            jmp     .20                                             ;continue
  3108 00000ADC 894E10                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3109                                  ;
  3110                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3111                                  ;       pointer to point to the USER block preceding this block.
  3112                                  ;
  3113 00000ADF E305                    .20                     jecxz   .30                                             ;branch if no next block
  3114 00000AE1 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3115 00000AE4 EB03                                            jmp     .40                                             ;continue
  3116 00000AE6 895E14                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118                                  ;
  3119                                  ;       Merge with a previous contiguous FREE memory block.
  3120                                  ;
  3121                                  ;-----------------------------------------------------------------------------------------------------------------------
  3122                                  ;
  3123                                  ;       Address the preceding and following contiguous memory blocks.
  3124                                  ;
  3125 00000AE9 8B5F14                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3126 00000AEC 8B4F10                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3127                                  ;
  3128                                  ;       Verify we have a previous contiguous FREE block.
  3129                                  ;
  3130 00000AEF 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3131 00000AF1 7442                                            jz      .100                                            ;no, branch
  3132 00000AF3 813B46524545                                    cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3133 00000AF9 753A                                            jne     .100                                            ;no, branch
  3134                                  ;
  3135                                  ;       Update adjacent block's contiguous pointers.
  3136                                  ;
  3137 00000AFB 894B10                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3138 00000AFE E305                                            jecxz   .50                                             ;branch if no next contiguous block
  3139 00000B00 895914                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3140 00000B03 EB03                                            jmp     .60                                             ;continue
  3141 00000B05 895E04                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3142                                  ;
  3143                                  ;       Update the size of the merged FREE block.
  3144                                  ;
  3145 00000B08 8B4704                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3146 00000B0B 014304                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3147                                  ;
  3148                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3149                                  ;
  3150 00000B0E B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;block header length
  3151 00000B13 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3152 00000B15 F3AA                                            rep     stosb                                           ;clear memory header
  3153 00000B17 89DF                                            mov     edi,ebx                                         ;current block is now previous block
  3154                                  ;-----------------------------------------------------------------------------------------------------------------------
  3155                                  ;
  3156                                  ;       Unlink the previous contiguous FREE memory block
  3157                                  ;
  3158                                  ;-----------------------------------------------------------------------------------------------------------------------
  3159                                  ;
  3160                                  ;       Address the preceding and following USER memory blocks
  3161                                  ;
  3162 00000B19 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3163 00000B1C 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3164                                  ;
  3165                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3166                                  ;       block pointer.
  3167                                  ;
  3168 00000B1F 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3169 00000B21 7405                                            jz      .70                                             ;no, branch
  3170 00000B23 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3171 00000B26 EB03                                            jmp     .80                                             ;branch
  3172 00000B28 894E08                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3173                                  ;
  3174                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3175                                  ;       pointer.
  3176                                  ;
  3177 00000B2B E305                    .80                     jecxz   .90                                             ;branch if no next block
  3178 00000B2D 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3179 00000B30 EB03                                            jmp     .100                                            ;continue
  3180 00000B32 895E0C                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3181                                  ;-----------------------------------------------------------------------------------------------------------------------
  3182                                  ;
  3183                                  ;       Merge with a following contiguous FREE memory block.
  3184                                  ;
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       Verify we have a following contiguous FREE block.
  3188                                  ;
  3189 00000B35 8B4F10                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3190 00000B38 E34B                                            jecxz   .170                                            ;branch if no next contiguous block
  3191 00000B3A 813946524545                                    cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3192 00000B40 7543                                            jne     .170                                            ;no, branch
  3193                                  ;
  3194                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3195                                  ;
  3196 00000B42 8B4104                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3197 00000B45 014704                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3198                                  ;
  3199                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3200                                  ;
  3201 00000B48 8B4110                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3202 00000B4B 894710                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3203 00000B4E 85C0                                            test    eax,eax                                         ;does a block follow the next contig blk
  3204 00000B50 7405                                            jz      .110                                            ;no, branch
  3205 00000B52 897814                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3206 00000B55 EB03                                            jmp     .120                                            ;continue
  3207 00000B57 897E04                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;       Unlink the following contiguous FREE memory block
  3211                                  ;
  3212                                  ;-----------------------------------------------------------------------------------------------------------------------
  3213                                  ;
  3214                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3215                                  ;
  3216 00000B5A 57                      .120                    push    edi                                             ;save this block
  3217 00000B5B 89CF                                            mov     edi,ecx                                         ;next contiguous block
  3218 00000B5D 51                                              push    ecx                                             ;save next contiguous block
  3219                                  ;
  3220                                  ;       Address the preceding and following USER memory blocks
  3221                                  ;
  3222 00000B5E 8B5F1C                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3223 00000B61 8B4F18                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3224                                  ;
  3225                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3226                                  ;       block pointer.
  3227                                  ;
  3228 00000B64 85DB                                            test    ebx,ebx                                         ;is there a previous block?
  3229 00000B66 7405                                            jz      .130                                            ;no, branch
  3230 00000B68 894B18                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3231 00000B6B EB03                                            jmp     .140                                            ;branch
  3232 00000B6D 894E08                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3233                                  ;
  3234                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3235                                  ;       pointer.
  3236                                  ;
  3237 00000B70 E305                    .140                    jecxz   .150                                            ;branch if no next block
  3238 00000B72 89591C                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3239 00000B75 EB03                                            jmp     .160                                            ;continue
  3240 00000B77 895E0C                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3241                                  ;
  3242                                  ;       Clear next contiguous block's header
  3243                                  ;
  3244 00000B7A 5F                      .160                    pop     edi                                             ;next congiguous block pointer
  3245 00000B7B B920000000                                      mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3246 00000B80 B000                                            mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3247 00000B82 F3AA                                            rep     stosb                                           ;clear memory header
  3248 00000B84 5F                                              pop     edi                                             ;this block's pointer
  3249                                  ;-----------------------------------------------------------------------------------------------------------------------
  3250                                  ;
  3251                                  ;       Insert the final FREE block back into the block chain.
  3252                                  ;
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3256                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3257                                  ;       all are smaller in size.
  3258                                  ;
  3259 00000B85 8B5F04                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3260 00000B88 8B4E08                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3261 00000B8B E30A                    .180                    jecxz   .190                                            ;exit if no ptr
  3262 00000B8D 3B5904                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3263 00000B90 7205                                            jb      .190                                            ;yes, branch
  3264 00000B92 8B4918                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3265 00000B95 EBF4                                            jmp     .180                                            ;continue
  3266                                  ;
  3267                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3268                                  ;       larger free block. Update the next block's previous block pointer.
  3269                                  ;
  3270 00000B97 894F18                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3271 00000B9A 8B5E0C                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3272 00000B9D E308                                            jecxz   .200                                            ;branch if no block found
  3273 00000B9F 8B591C                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3274 00000BA2 89791C                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3275 00000BA5 EB03                                            jmp     .210                                            ;continue
  3276 00000BA7 897E0C                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3277                                  ;
  3278                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3279                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3280                                  ;       next pointer.
  3281                                  ;
  3282 00000BAA 895F1C                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3283 00000BAD 85DB                                            test    ebx,ebx                                         ;do we have a previous block?
  3284 00000BAF 7405                                            jz      .220                                            ;no, branch
  3285 00000BB1 897B18                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3286 00000BB4 EB03                                            jmp     .230                                            ;continue
  3287 00000BB6 897E08                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3288                                  ;
  3289                                  ;       The memory free has completed.
  3290                                  ;
  3291 00000BB9 31C0                    .230                    xor     eax,eax                                         ;indicate success
  3292                                  ;
  3293                                  ;       Restore and return.
  3294                                  ;
  3295 00000BBB 07                      .240                    pop     es                                              ;restore non-volatile regs
  3296 00000BBC 1F                                              pop     ds                                              ;
  3297 00000BBD 5F                                              pop     edi                                             ;
  3298 00000BBE 5E                                              pop     esi                                             ;
  3299 00000BBF 59                                              pop     ecx                                             ;
  3300 00000BC0 5B                                              pop     ebx                                             ;
  3301 00000BC1 C3                                              ret                                                     ;return
  3302                                  ;=======================================================================================================================
  3303                                  ;
  3304                                  ;       String Helper Routines
  3305                                  ;
  3306                                  ;       CompareMemory
  3307                                  ;       UpperCaseString
  3308                                  ;
  3309                                  ;=======================================================================================================================
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  ;
  3312                                  ;       Routine:        CompareMemory
  3313                                  ;
  3314                                  ;       Description:    This routine compares two byte arrays.
  3315                                  ;
  3316                                  ;       In:             DS:EDX  first source address
  3317                                  ;                       DS:EBX  second source address
  3318                                  ;                       ECX     comparison length
  3319                                  ;
  3320                                  ;       Out:            EDX     first source address
  3321                                  ;                       EBX     second source address
  3322                                  ;                       ECX     0       array 1 = array 2
  3323                                  ;                               <0      array 1 < array 2
  3324                                  ;                               >0      array 1 > array 2
  3325                                  ;
  3326                                  ;-----------------------------------------------------------------------------------------------------------------------
  3327 00000BC2 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3328 00000BC3 57                                              push    edi                                             ;
  3329 00000BC4 06                                              push    es                                              ;
  3330 00000BC5 1E                                              push    ds                                              ;copy DS
  3331 00000BC6 07                                              pop     es                                              ;... to ES
  3332 00000BC7 89D6                                            mov     esi,edx                                         ;first source address
  3333 00000BC9 89DF                                            mov     edi,ebx                                         ;second source address
  3334 00000BCB FC                                              cld                                                     ;forward strings
  3335 00000BCC F3A6                                            rep     cmpsb                                           ;compare bytes
  3336 00000BCE B000                                            mov     al,0                                            ;default result
  3337 00000BD0 7406                                            jz      .10                                             ;branch if arrays equal
  3338 00000BD2 B001                                            mov     al,1                                            ;positive result
  3339 00000BD4 7302                                            jnc     .10                                             ;branch if target > source
  3340 00000BD6 B0FF                                            mov     al,-1                                           ;negative result
  3341 00000BD8 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3342 00000BDB 07                                              pop     es                                              ;restore non-volatile regs
  3343 00000BDC 5F                                              pop     edi                                             ;
  3344 00000BDD 5E                                              pop     esi                                             ;
  3345 00000BDE C3                                              ret                                                     ;return
  3346                                  ;-----------------------------------------------------------------------------------------------------------------------
  3347                                  ;
  3348                                  ;       Routine:        UpperCaseString
  3349                                  ;
  3350                                  ;       Description:    This routine places all characters in the given string to upper case.
  3351                                  ;
  3352                                  ;       In:             DS:EDX  string address
  3353                                  ;
  3354                                  ;       Out:            EDX     string address
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357 00000BDF 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3358 00000BE0 89D6                                            mov     esi,edx                                         ;string address
  3359 00000BE2 FC                                              cld                                                     ;forward strings
  3360 00000BE3 AC                      .10                     lodsb                                                   ;string character
  3361 00000BE4 84C0                                            test    al,al                                           ;null?
  3362 00000BE6 740F                                            jz      .20                                             ;yes, skip ahead
  3363 00000BE8 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3364 00000BEA 72F7                                            jb      .10                                             ;no, continue
  3365 00000BEC 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3366 00000BEE 77F3                                            ja      .10                                             ;no, continue
  3367 00000BF0 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3368 00000BF2 8846FF                                          mov     [esi-1],al                                      ;upper character
  3369 00000BF5 EBEC                                            jmp     .10                                             ;continue
  3370 00000BF7 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3371 00000BF8 C3                                              ret                                                     ;return
  3372                                  ;=======================================================================================================================
  3373                                  ;
  3374                                  ;       Console Helper Routines
  3375                                  ;
  3376                                  ;       FirstConsoleColumn
  3377                                  ;       GetConsoleChar
  3378                                  ;       GetConsoleString
  3379                                  ;       NextConsoleColumn
  3380                                  ;       NextConsoleRow
  3381                                  ;       PreviousConsoleColumn
  3382                                  ;       PutConsoleChar
  3383                                  ;       PutConsoleHexByte
  3384                                  ;       PutConsoleHexDword
  3385                                  ;       PutConsoleHexWord
  3386                                  ;       PutConsoleOIAChar
  3387                                  ;       PutConsoleOIAShift
  3388                                  ;       PutConsoleString
  3389                                  ;       Yield
  3390                                  ;
  3391                                  ;=======================================================================================================================
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  ;
  3394                                  ;       Routine:        FirstConsoleColumn
  3395                                  ;
  3396                                  ;       Description:    This routine resets the console column to start of the row.
  3397                                  ;
  3398                                  ;       In:             DS      OS data selector
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401 00000BF9 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3402 00000BFB A220080000                                      mov     [wbConsoleColumn],al                            ;save column
  3403 00000C00 C3                                              ret                                                     ;return
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Routine:        GetConsoleChar
  3407                                  ;
  3408                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3409                                  ;
  3410                                  ;       Out:            AL      ASCII character code
  3411                                  ;                       AH      keyboard scan code
  3412                                  ;
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414 00000C01 E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3415 00000C06 E8D7020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  3416 00000C0B 09C0                                            or      eax,eax                                         ;do we have a message?
  3417 00000C0D 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  3418 00000C0F 50                                              push    eax                                             ;save key codes
  3419 00000C10 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  3420 00000C15 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3421 00000C1A 58                                              pop     eax                                             ;restore key codes
  3422 00000C1B 75E9                                            jne     GetConsoleChar                                  ;no, try again
  3423 00000C1D 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  3424 00000C22 C3                                              ret                                                     ;return
  3425                                  ;-----------------------------------------------------------------------------------------------------------------------
  3426                                  ;
  3427                                  ;       Routine:        GetConsoleString
  3428                                  ;
  3429                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3430                                  ;
  3431                                  ;       In:             DS:EDX  target buffer address
  3432                                  ;                       ECX     maximum number of characters to accept
  3433                                  ;                       BH      echo to terminal
  3434                                  ;                       BL      terminating character
  3435                                  ;
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437 00000C23 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  3438 00000C24 56                                              push    esi                                             ;
  3439 00000C25 57                                              push    edi                                             ;
  3440 00000C26 06                                              push    es                                              ;
  3441 00000C27 1E                                              push    ds                                              ;load data segment selector ...
  3442 00000C28 07                                              pop     es                                              ;... into extra segment register
  3443 00000C29 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3444 00000C2B 51                                              push    ecx                                             ;save maximum characters
  3445 00000C2C 30C0                                            xor     al,al                                           ;zero register
  3446 00000C2E FC                                              cld                                                     ;forward strings
  3447 00000C2F F3AA                                            rep     stosb                                           ;zero fill buffer
  3448 00000C31 59                                              pop     ecx                                             ;maximum characters
  3449 00000C32 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3450 00000C34 89D6                                            mov     esi,edx                                         ;esi = target buffer
  3451 00000C36 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  3452 00000C38 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  3453 00000C3D 38D8                                            cmp     al,bl                                           ;is this the terminator?
  3454 00000C3F 7445                                            je      .50                                             ;yes, exit
  3455 00000C41 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3456 00000C43 7521                                            jne     .30                                             ;no, skip ahead
  3457 00000C45 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  3458 00000C47 74EF                                            je      .20                                             ;yes, get next character
  3459 00000C49 4F                                              dec     edi                                             ;backup target pointer
  3460 00000C4A C60700                                          mov     byte [edi],0                                    ;zero previous character
  3461 00000C4D 41                                              inc     ecx                                             ;increment remaining chars
  3462 00000C4E F6C701                                          test    bh,1                                            ;echo to console?
  3463 00000C51 74E5                                            jz      .20                                             ;no, get next character
  3464 00000C53 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  3465 00000C58 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3466 00000C5A E891000000                                      call    PutConsoleChar                                  ;write space to console
  3467 00000C5F E868030000                                      call    PlaceCursor                                     ;position the cursor
  3468 00000C64 EBD2                                            jmp     .20                                             ;get next character
  3469 00000C66 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3470 00000C68 72CE                                            jb      .20                                             ;no, get another character
  3471 00000C6A 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3472 00000C6C 77CA                                            ja      .20                                             ;no, get another character
  3473 00000C6E AA                                              stosb                                                   ;store character in buffer
  3474 00000C6F F6C701                                          test    bh,1                                            ;echo to console?
  3475 00000C72 740F                                            jz      .40                                             ;no, skip ahead
  3476 00000C74 E877000000                                      call    PutConsoleChar                                  ;write character to console
  3477 00000C79 E810000000                                      call    NextConsoleColumn                               ;advance console position
  3478 00000C7E E849030000                                      call    PlaceCursor                                     ;position the cursor
  3479 00000C83 49                      .40                     dec     ecx                                             ;decrement remaining chars
  3480 00000C84 EBB0                                            jmp     .10                                             ;next
  3481 00000C86 30C0                    .50                     xor     al,al                                           ;null
  3482 00000C88 AA                                              stosb                                                   ;terminate buffer
  3483 00000C89 07                                              pop     es                                              ;restore non-volatile regs
  3484 00000C8A 5F                                              pop     edi                                             ;
  3485 00000C8B 5E                                              pop     esi                                             ;
  3486 00000C8C 59                                              pop     ecx                                             ;
  3487 00000C8D C3                                              ret                                                     ;return
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  ;
  3490                                  ;       Routine:        NextConsoleColumn
  3491                                  ;
  3492                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3493                                  ;                       incremented if the end of the current row is reached.
  3494                                  ;
  3495                                  ;       In:             DS      OS data selector
  3496                                  ;
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498 00000C8E A020080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3499 00000C93 FEC0                                            inc     al                                              ;increment column
  3500 00000C95 A220080000                                      mov     [wbConsoleColumn],al                            ;save column
  3501 00000C9A 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  3502 00000C9C 720A                                            jb      .10                                             ;no, skip ahead
  3503 00000C9E E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  3504 00000CA3 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  3505 00000CA8 C3                      .10                     ret                                                     ;return
  3506                                  ;-----------------------------------------------------------------------------------------------------------------------
  3507                                  ;
  3508                                  ;       Routine:        NextConsoleRow
  3509                                  ;
  3510                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3511                                  ;
  3512                                  ;       In:             DS      OS data selector
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515 00000CA9 A021080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3516 00000CAE FEC0                                            inc     al                                              ;increment row
  3517 00000CB0 A221080000                                      mov     [wbConsoleRow],al                               ;save row
  3518 00000CB5 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  3519 00000CB7 7211                                            jb      .10                                             ;no, skip ahead
  3520 00000CB9 E8BC020000                                      call    ScrollConsoleRow                                ;scroll up one row
  3521 00000CBE A021080000                                      mov     al,[wbConsoleRow]                               ;row
  3522 00000CC3 FEC8                                            dec     al                                              ;decrement row
  3523 00000CC5 A221080000                                      mov     [wbConsoleRow],al                               ;save row
  3524 00000CCA C3                      .10                     ret                                                     ;return
  3525                                  ;-----------------------------------------------------------------------------------------------------------------------
  3526                                  ;
  3527                                  ;       Routine:        PreviousConsoleColumn
  3528                                  ;
  3529                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3530                                  ;                       the column is set to the last position in the row and the row is decremented.
  3531                                  ;
  3532                                  ;       In:             DS      OS data selector
  3533                                  ;
  3534                                  ;-----------------------------------------------------------------------------------------------------------------------
  3535 00000CCB A020080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3536 00000CD0 08C0                                            or      al,al                                           ;start of row?
  3537 00000CD2 7514                                            jnz     .10                                             ;no, skip ahead
  3538 00000CD4 8A2521080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3539 00000CDA 08E4                                            or      ah,ah                                           ;top of screen?
  3540 00000CDC 7411                                            jz      .20                                             ;yes, exit with no change
  3541 00000CDE FECC                                            dec     ah                                              ;decrement row
  3542 00000CE0 882521080000                                    mov     [wbConsoleRow],ah                               ;save row
  3543 00000CE6 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3544 00000CE8 FEC8                    .10                     dec     al                                              ;decrement column
  3545 00000CEA A220080000                                      mov     [wbConsoleColumn],al                            ;save column
  3546 00000CEF C3                      .20                     ret                                                     ;return
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  ;
  3549                                  ;       Routine:        PutConsoleChar
  3550                                  ;
  3551                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3552                                  ;
  3553                                  ;       In:             AL      ASCII character
  3554                                  ;                       DS      OS data selector
  3555                                  ;
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557 00000CF0 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3558 00000CF1 06                                              push    es                                              ;
  3559 00000CF2 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3560 00000CF4 07                                              pop     es                                              ;... into extra segment reg
  3561 00000CF5 8A0D20080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3562 00000CFB 8A2D21080000                                    mov     ch,[wbConsoleRow]                               ;row
  3563 00000D01 E8A0020000                                      call    SetConsoleChar                                  ;put character at row, column
  3564 00000D06 07                                              pop     es                                              ;restore non-volatile regs
  3565 00000D07 59                                              pop     ecx                                             ;
  3566 00000D08 C3                                              ret                                                     ;return
  3567                                  ;-----------------------------------------------------------------------------------------------------------------------
  3568                                  ;
  3569                                  ;       Routine:        PutConsoleHexByte
  3570                                  ;
  3571                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3572                                  ;
  3573                                  ;       In:             AL      byte value
  3574                                  ;                       CL      column
  3575                                  ;                       CH      row
  3576                                  ;                       DS      OS data selector
  3577                                  ;                       ES      CGA selector
  3578                                  ;
  3579                                  ;-----------------------------------------------------------------------------------------------------------------------
  3580 00000D09 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3581 00000D0A 88C3                                            mov     bl,al                                           ;save byte value
  3582 00000D0C C0E804                                          shr     al,4                                            ;hi-order nybble
  3583 00000D0F 0C30                                            or      al,030h                                         ;apply ASCII zone
  3584 00000D11 3C3A                                            cmp     al,03ah                                         ;numeric?
  3585 00000D13 7202                                            jb      .10                                             ;yes, skip ahead
  3586 00000D15 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3587 00000D17 E88A020000              .10                     call    SetConsoleChar                                  ;display ASCII character
  3588 00000D1C 88D8                                            mov     al,bl                                           ;byte value
  3589 00000D1E 240F                                            and     al,0fh                                          ;lo-order nybble
  3590 00000D20 0C30                                            or      al,30h                                          ;apply ASCII zone
  3591 00000D22 3C3A                                            cmp     al,03ah                                         ;numeric?
  3592 00000D24 7202                                            jb      .20                                             ;yes, skip ahead
  3593 00000D26 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3594 00000D28 E879020000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3595 00000D2D 5B                                              pop     ebx                                             ;restore non-volatile regs
  3596 00000D2E C3                                              ret                                                     ;return
  3597                                  ;-----------------------------------------------------------------------------------------------------------------------
  3598                                  ;
  3599                                  ;       Routine:        PutConsoleHexDword
  3600                                  ;
  3601                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3602                                  ;
  3603                                  ;       In:             EAX     value
  3604                                  ;                       CL      column
  3605                                  ;                       CH      row
  3606                                  ;                       DS      OS data selector
  3607                                  ;                       ES      CGA selector
  3608                                  ;
  3609                                  ;-----------------------------------------------------------------------------------------------------------------------
  3610 00000D2F 50                      PutConsoleHexDword      push    eax
  3611 00000D30 C1E810                                          shr     eax,16
  3612 00000D33 E807000000                                      call    PutConsoleHexWord
  3613 00000D38 58                                              pop     eax
  3614 00000D39 E801000000                                      call    PutConsoleHexWord
  3615 00000D3E C3                                              ret
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617                                  ;
  3618                                  ;       Routine:        PutConsoleHexWord
  3619                                  ;
  3620                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3621                                  ;
  3622                                  ;       In:             EAX     value
  3623                                  ;                       CL      column
  3624                                  ;                       CH      row
  3625                                  ;                       DS      OS data selector
  3626                                  ;                       ES      CGA selector
  3627                                  ;
  3628                                  ;-----------------------------------------------------------------------------------------------------------------------
  3629 00000D3F 50                      PutConsoleHexWord       push    eax
  3630 00000D40 C1E808                                          shr     eax,8
  3631 00000D43 E8C1FFFFFF                                      call    PutConsoleHexByte
  3632 00000D48 58                                              pop     eax
  3633 00000D49 E8BBFFFFFF                                      call    PutConsoleHexByte
  3634 00000D4E C3                                              ret
  3635                                  ;-----------------------------------------------------------------------------------------------------------------------
  3636                                  ;
  3637                                  ;       Routine:        PutConsoleOIAChar
  3638                                  ;
  3639                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3640                                  ;
  3641                                  ;       In:             DS      OS data selector
  3642                                  ;
  3643                                  ;-----------------------------------------------------------------------------------------------------------------------
  3644 00000D4F 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3645 00000D50 51                                              push    ecx                                             ;
  3646 00000D51 56                                              push    esi                                             ;
  3647 00000D52 1E                                              push    ds                                              ;
  3648 00000D53 06                                              push    es                                              ;
  3649 00000D54 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3650 00000D56 1F                                              pop     ds                                              ;... into data segment register
  3651 00000D57 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3652 00000D59 07                                              pop     es                                              ;... into extra segment register
  3653 00000D5A BE25080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3654 00000D5F B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3655 00000D61 B300                                            mov     bl,0                                            ;starting column
  3656 00000D63 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3657 00000D68 51                      .10                     push    ecx                                             ;save remaining count
  3658 00000D69 89D9                                            mov     ecx,ebx                                         ;row, column
  3659 00000D6B AC                                              lodsb                                                   ;read scan code
  3660 00000D6C 08C0                                            or      al,al                                           ;scan code present?
  3661 00000D6E 7407                                            jz      .20                                             ;no, skip ahead
  3662 00000D70 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3663 00000D75 EB0E                                            jmp     .30                                             ;continue
  3664 00000D77 B020                    .20                     mov     al,' '                                          ;ASCII space
  3665 00000D79 E828020000                                      call    SetConsoleChar                                  ;display space
  3666 00000D7E B020                                            mov     al,' '                                          ;ASCII space
  3667 00000D80 E821020000                                      call    SetConsoleChar                                  ;display space
  3668 00000D85 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3669 00000D88 59                                              pop     ecx                                             ;restore remaining
  3670 00000D89 E2DD                                            loop    .10                                             ;next code
  3671 00000D8B A02B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3672 00000D90 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3673 00000D92 720D                                            jb      .40                                             ;no, skip ahead
  3674 00000D94 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3675 00000D96 7709                                            ja      .40                                             ;no, skip ahead
  3676 00000D98 88FD                                            mov     ch,bh                                           ;OIA row
  3677 00000D9A B128                                            mov     cl,40                                           ;character display column
  3678 00000D9C E805020000                                      call    SetConsoleChar                                  ;display ASCII character
  3679 00000DA1 07                      .40                     pop     es                                              ;restore non-volatile regs
  3680 00000DA2 1F                                              pop     ds                                              ;
  3681 00000DA3 5E                                              pop     esi                                             ;
  3682 00000DA4 59                                              pop     ecx                                             ;
  3683 00000DA5 5B                                              pop     ebx                                             ;
  3684 00000DA6 C3                                              ret                                                     ;return
  3685                                  ;-----------------------------------------------------------------------------------------------------------------------
  3686                                  ;
  3687                                  ;       Routine:        PutConsoleOIAShift
  3688                                  ;
  3689                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3690                                  ;
  3691                                  ;       In:             BL      shift flags
  3692                                  ;                       BH      lock flags
  3693                                  ;                       DS      OS data selector
  3694                                  ;
  3695                                  ;-----------------------------------------------------------------------------------------------------------------------
  3696 00000DA7 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3697 00000DA8 06                                              push    es                                              ;
  3698 00000DA9 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3699 00000DAB 07                                              pop     es                                              ;... into ES register
  3700 00000DAC B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3701 00000DAE B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3702 00000DB0 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3703 00000DB3 7402                                            jz      .10                                             ;no, skip ahead
  3704 00000DB5 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3705 00000DB7 B10E                    .10                     mov     cl,14                                           ;indicator column
  3706 00000DB9 E8E8010000                                      call    SetConsoleChar                                  ;display ASCII character
  3707 00000DBE B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3708 00000DC0 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3709 00000DC3 7402                                            jz      .20                                             ;no, skip ahead
  3710 00000DC5 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3711 00000DC7 B140                    .20                     mov     cl,64                                           ;indicator column
  3712 00000DC9 E8D8010000                                      call    SetConsoleChar                                  ;display ASCII character
  3713 00000DCE B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3714 00000DD0 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3715 00000DD3 7402                                            jz      .30                                             ;no, skip ahead
  3716 00000DD5 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3717 00000DD7 B10F                    .30                     mov     cl,15                                           ;indicator column
  3718 00000DD9 E8C8010000                                      call    SetConsoleChar                                  ;display ASCII character
  3719 00000DDE B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3720 00000DE0 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3721 00000DE3 7402                                            jz      .40                                             ;no, skip ahead
  3722 00000DE5 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3723 00000DE7 B13F                    .40                     mov     cl,63                                           ;indicator column
  3724 00000DE9 E8B8010000                                      call    SetConsoleChar                                  ;display ASCII character
  3725 00000DEE B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3726 00000DF0 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3727 00000DF3 7402                                            jz      .50                                             ;no, skip ahead
  3728 00000DF5 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3729 00000DF7 B110                    .50                     mov     cl,16                                           ;indicator column
  3730 00000DF9 E8A8010000                                      call    SetConsoleChar                                  ;display ASCII character
  3731 00000DFE B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3732 00000E00 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3733 00000E03 7402                                            jz      .60                                             ;no, skip ahead
  3734 00000E05 B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3735 00000E07 B13E                    .60                     mov     cl,62                                           ;indicator column
  3736 00000E09 E898010000                                      call    SetConsoleChar                                  ;display ASCII character
  3737 00000E0E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3738 00000E10 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3739 00000E13 7402                                            jz      .70                                             ;no, skip ahead
  3740 00000E15 B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3741 00000E17 B14E                    .70                     mov     cl,78                                           ;indicator column
  3742 00000E19 E888010000                                      call    SetConsoleChar                                  ;display ASCII character
  3743 00000E1E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3744 00000E20 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3745 00000E23 7402                                            jz      .80                                             ;no, skip ahead
  3746 00000E25 B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3747 00000E27 B14D                    .80                     mov     cl,77                                           ;indicator column
  3748 00000E29 E878010000                                      call    SetConsoleChar                                  ;display ASCII character
  3749 00000E2E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3750 00000E30 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3751 00000E33 7402                                            jz      .90                                             ;no, skip ahead
  3752 00000E35 B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3753 00000E37 B14C                    .90                     mov     cl,76                                           ;indicator column
  3754 00000E39 E868010000                                      call    SetConsoleChar                                  ;display ASCII character
  3755 00000E3E 07                                              pop     es                                              ;restore non-volatile regs
  3756 00000E3F 59                                              pop     ecx                                             ;
  3757 00000E40 C3                                              ret                                                     ;return
  3758                                  ;-----------------------------------------------------------------------------------------------------------------------
  3759                                  ;
  3760                                  ;       Routine:        PutConsoleString
  3761                                  ;
  3762                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3763                                  ;                       console position as needed.
  3764                                  ;
  3765                                  ;       In:             EDX     source address
  3766                                  ;                       DS      OS data selector
  3767                                  ;
  3768                                  ;-----------------------------------------------------------------------------------------------------------------------
  3769 00000E41 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3770 00000E42 89D6                                            mov     esi,edx                                         ;source address
  3771 00000E44 FC                                              cld                                                     ;forward strings
  3772 00000E45 AC                      .10                     lodsb                                                   ;ASCII character
  3773 00000E46 08C0                                            or      al,al                                           ;end of string?
  3774 00000E48 7422                                            jz      .40                                             ;yes, skip ahead
  3775 00000E4A 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3776 00000E4C 7507                                            jne     .20                                             ;no, skip ahead
  3777 00000E4E E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3778 00000E53 EBF0                                            jmp     .10                                             ;next character
  3779 00000E55 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3780 00000E57 7507                                            jne     .30                                             ;no, skip ahead
  3781 00000E59 E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3782 00000E5E EBE5                                            jmp     .10                                             ;next character
  3783 00000E60 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3784 00000E65 E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3785 00000E6A EBD9                                            jmp     .10                                             ;next character
  3786 00000E6C 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3787 00000E6D C3                                              ret                                                     ;return
  3788                                  ;-----------------------------------------------------------------------------------------------------------------------
  3789                                  ;
  3790                                  ;       Routine:        Yield
  3791                                  ;
  3792                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3793                                  ;
  3794                                  ;-----------------------------------------------------------------------------------------------------------------------
  3795 00000E6E FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3796 00000E6F F4                                              hlt                                                     ;halt until external interrupt
  3797 00000E70 C3                                              ret                                                     ;return
  3798                                  ;=======================================================================================================================
  3799                                  ;
  3800                                  ;       Data-Type Conversion Helper Routines
  3801                                  ;
  3802                                  ;       DecimalToUnsigned
  3803                                  ;       HexadecimalToUnsigned
  3804                                  ;       UnsignedToHexadecimal
  3805                                  ;
  3806                                  ;=======================================================================================================================
  3807                                  ;-----------------------------------------------------------------------------------------------------------------------
  3808                                  ;
  3809                                  ;       Routine:        DecimalToUnsigned
  3810                                  ;
  3811                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3812                                  ;
  3813                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3814                                  ;
  3815                                  ;       Output:         EAX     unsigned integer value
  3816                                  ;
  3817                                  ;-----------------------------------------------------------------------------------------------------------------------
  3818 00000E71 56                      DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3819 00000E72 89D6                                            mov     esi,edx                                         ;source address
  3820 00000E74 31D2                                            xor     edx,edx                                         ;zero total
  3821 00000E76 AC                      .10                     lodsb                                                   ;source byte
  3822 00000E77 3C2C                                            cmp     al,','                                          ;comma?
  3823 00000E79 74FB                                            je      .10                                             ;yes, ignore
  3824 00000E7B 84C0                                            test    al,al                                           ;end of string?
  3825 00000E7D 7421                                            jz      .30                                             ;yes, done
  3826 00000E7F 3C2E                                            cmp     al,'.'                                          ;decimal point?
  3827 00000E81 741D                                            je      .30                                             ;yes, done
  3828 00000E83 3C30                                            cmp     al,'0'                                          ;numeral?
  3829 00000E85 7217                                            jb      .20                                             ;no, invalid string
  3830 00000E87 3C39                                            cmp     al,'9'                                          ;numeral?
  3831 00000E89 7713                                            ja      .20                                             ;no, invalid string
  3832 00000E8B 240F                                            and     al,00Fh                                         ;mask ASCII zone
  3833 00000E8D 50                                              push    eax                                             ;save numeral
  3834 00000E8E D1E2                                            shl     edx,1                                           ;total * 2
  3835 00000E90 89D0                                            mov     eax,edx                                         ;total * 2
  3836 00000E92 C1E202                                          shl     edx,2                                           ;total * 8
  3837 00000E95 01C2                                            add     edx,eax                                         ;total * 10
  3838 00000E97 58                                              pop     eax                                             ;restore numeral
  3839 00000E98 01C2                                            add     edx,eax                                         ;accumulate decimal digit
  3840 00000E9A 31C0                                            xor     eax,eax                                         ;zero register
  3841 00000E9C EBD8                                            jmp     .10                                             ;next
  3842 00000E9E 31D2                    .20                     xor     edx,edx                                         ;zero result on error
  3843 00000EA0 89D0                    .30                     mov     eax,edx                                         ;result
  3844 00000EA2 5E                                              pop     esi                                             ;restore non-volatile regs
  3845 00000EA3 C3                                              ret                                                     ;return
  3846                                  ;-----------------------------------------------------------------------------------------------------------------------
  3847                                  ;
  3848                                  ;       Routine:        HexadecimalToUnsigned
  3849                                  ;
  3850                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3851                                  ;
  3852                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3853                                  ;
  3854                                  ;       Output:         EAX     unsigned integer value
  3855                                  ;
  3856                                  ;-----------------------------------------------------------------------------------------------------------------------
  3857 00000EA4 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3858 00000EA5 89D6                                            mov     esi,edx                                         ;source address
  3859 00000EA7 31D2                                            xor     edx,edx                                         ;zero register
  3860 00000EA9 AC                      .10                     lodsb                                                   ;source byte
  3861 00000EAA 84C0                                            test    al,al                                           ;end of string?
  3862 00000EAC 7410                                            jz      .30                                             ;yes, branch
  3863 00000EAE 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  3864 00000EB0 7602                                            jna     .20                                             ;no, skip ahead
  3865 00000EB2 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3866 00000EB4 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  3867 00000EB7 C1E204                                          shl     edx,4                                           ;previous total x 16
  3868 00000EBA 01C2                                            add     edx,eax                                         ;add prior value x 16
  3869 00000EBC EBEB                                            jmp     .10                                             ;next
  3870 00000EBE 89D0                    .30                     mov     eax,edx                                         ;result
  3871 00000EC0 5E                                              pop     esi                                             ;restore non-volatile regs
  3872 00000EC1 C3                                              ret                                                     ;return
  3873                                  ;-----------------------------------------------------------------------------------------------------------------------
  3874                                  ;
  3875                                  ;       Routine:        UnsignedToHexadecimal
  3876                                  ;
  3877                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3878                                  ;
  3879                                  ;       Input:          DS:EDX  output buffer address
  3880                                  ;                       ECX     32-bit binary
  3881                                  ;
  3882                                  ;-----------------------------------------------------------------------------------------------------------------------
  3883 00000EC2 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3884 00000EC3 89D7                                            mov     edi,edx                                         ;output buffer address
  3885 00000EC5 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  3886 00000EC7 31C9                                            xor     ecx,ecx                                         ;zero register
  3887 00000EC9 B108                                            mov     cl,8                                            ;nybble count
  3888 00000ECB C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3889 00000ECE 88D0                                            mov     al,dl                                           ;????bbbb
  3890 00000ED0 240F                                            and     al,0fh                                          ;mask out bits 4-7
  3891 00000ED2 0C30                                            or      al,30h                                          ;mask in ascii zone
  3892 00000ED4 3C3A                                            cmp     al,3ah                                          ;A through F?
  3893 00000ED6 7202                                            jb      .20                                             ;no, skip ahead
  3894 00000ED8 0407                                            add     al,7                                            ;41h through 46h
  3895 00000EDA AA                      .20                     stosb                                                   ;store hexnum
  3896 00000EDB E2EE                                            loop    .10                                             ;next nybble
  3897 00000EDD 30C0                                            xor     al,al                                           ;zero reg
  3898 00000EDF AA                                              stosb                                                   ;null terminate
  3899 00000EE0 5F                                              pop     edi                                             ;restore non-volatile regs
  3900 00000EE1 C3                                              ret                                                     ;return
  3901                                  ;=======================================================================================================================
  3902                                  ;
  3903                                  ;       Message Queue Helper Routines
  3904                                  ;
  3905                                  ;       GetMessage
  3906                                  ;       PutMessage
  3907                                  ;
  3908                                  ;=======================================================================================================================
  3909                                  ;-----------------------------------------------------------------------------------------------------------------------
  3910                                  ;
  3911                                  ;       Routine:        GetMessage
  3912                                  ;
  3913                                  ;       Description:    This routine reads and removes a message from the message queue.
  3914                                  ;
  3915                                  ;       Out:            EAX     lo-order message data
  3916                                  ;                       EDX     hi-order message data
  3917                                  ;
  3918                                  ;                       CY      0 = message read
  3919                                  ;                               1 = no message to read
  3920                                  ;
  3921                                  ;-----------------------------------------------------------------------------------------------------------------------
  3922 00000EE2 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3923 00000EE3 51                                              push    ecx                                             ;
  3924 00000EE4 1E                                              push    ds                                              ;
  3925 00000EE5 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3926 00000EE7 1F                                              pop     ds                                              ;... into data segment register
  3927 00000EE8 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3928 00000EEE 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3929 00000EF0 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3930 00000EF3 09D0                                            or      eax,edx                                         ;is queue empty?
  3931 00000EF5 F9                                              stc                                                     ;assume queue is emtpy
  3932 00000EF6 741B                                            jz      .20                                             ;yes, skip ahead
  3933 00000EF8 31C9                                            xor     ecx,ecx                                         ;store zero
  3934 00000EFA 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3935 00000EFC 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3936 00000EFF 83C308                                          add     ebx,8                                           ;next queue element
  3937 00000F02 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  3938 00000F08 7502                                            jnz     .10                                             ;no, skip ahead
  3939 00000F0A B308                                            mov     bl,8                                            ;reset to 1st entry
  3940 00000F0C 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3941 00000F12 F8                                              clc                                                     ;indicate message read
  3942 00000F13 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3943 00000F14 59                                              pop     ecx                                             ;
  3944 00000F15 5B                                              pop     ebx                                             ;
  3945 00000F16 C3                                              ret                                                     ;return
  3946                                  ;-----------------------------------------------------------------------------------------------------------------------
  3947                                  ;
  3948                                  ;       Routine:        PutMessage
  3949                                  ;
  3950                                  ;       Description:    This routine adda a message to the message queue.
  3951                                  ;
  3952                                  ;       In:             ECX     hi-order data word
  3953                                  ;                       EDX     lo-order data word
  3954                                  ;
  3955                                  ;       Out:            CY      0 = success
  3956                                  ;                               1 = fail: queue is full
  3957                                  ;
  3958                                  ;-----------------------------------------------------------------------------------------------------------------------
  3959 00000F17 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  3960 00000F18 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  3961 00000F1A 1F                                              pop     ds                                              ;... into data segment register
  3962 00000F1B A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  3963 00000F20 833800                                          cmp     dword [eax],0                                   ;is queue full?
  3964 00000F23 F9                                              stc                                                     ;assume failure
  3965 00000F24 7517                                            jne     .20                                             ;yes, cannot store
  3966 00000F26 8910                                            mov     [eax],edx                                       ;store lo-order data
  3967 00000F28 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  3968 00000F2B 83C008                                          add     eax,8                                           ;next queue element adr
  3969 00000F2E 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  3970 00000F33 7502                                            jnz     .10                                             ;no, skip ahead
  3971 00000F35 B008                                            mov     al,8                                            ;reset to top of queue
  3972 00000F37 A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3973 00000F3C F8                                              clc                                                     ;indicate success
  3974 00000F3D 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3975 00000F3E C3                                              ret                                                     ;return
  3976                                  ;=======================================================================================================================
  3977                                  ;
  3978                                  ;       Memory-Mapped Video Routines
  3979                                  ;
  3980                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3981                                  ;
  3982                                  ;       ClearConsoleScreen
  3983                                  ;       ScrollConsoleRow
  3984                                  ;       SetConsoleChar
  3985                                  ;       SetConsoleString
  3986                                  ;
  3987                                  ;=======================================================================================================================
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ;
  3990                                  ;       Routine:        ClearConsoleScreen
  3991                                  ;
  3992                                  ;       Description:    This routine clears the console (CGA) screen.
  3993                                  ;
  3994                                  ;-----------------------------------------------------------------------------------------------------------------------
  3995 00000F3F 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3996 00000F40 57                                              push    edi                                             ;
  3997 00000F41 1E                                              push    ds                                              ;
  3998 00000F42 06                                              push    es                                              ;
  3999 00000F43 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4000 00000F45 1F                                              pop     ds                                              ;... into DS register
  4001 00000F46 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4002 00000F48 07                                              pop     es                                              ;... into ES register
  4003 00000F49 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4004 00000F4E B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4005 00000F53 31FF                                            xor     edi,edi                                         ;target offset
  4006 00000F55 FC                                              cld                                                     ;forward strings
  4007 00000F56 F3AB                                            rep     stosd                                           ;reset screen body
  4008 00000F58 B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4009 00000F5D B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4010 00000F62 F3AB                                            rep     stosd                                           ;reset OIA line
  4011 00000F64 30C0                                            xor     al,al                                           ;zero register
  4012 00000F66 A221080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4013 00000F6B A220080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4014 00000F70 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  4015 00000F75 07                                              pop     es                                              ;restore non-volatile regs
  4016 00000F76 1F                                              pop     ds                                              ;
  4017 00000F77 5F                                              pop     edi                                             ;
  4018 00000F78 59                                              pop     ecx                                             ;
  4019 00000F79 C3                                              ret                                                     ;return
  4020                                  ;-----------------------------------------------------------------------------------------------------------------------
  4021                                  ;
  4022                                  ;       Routine:        ScrollConsoleRow
  4023                                  ;
  4024                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4025                                  ;
  4026                                  ;-----------------------------------------------------------------------------------------------------------------------
  4027 00000F7A 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4028 00000F7B 56                                              push    esi                                             ;
  4029 00000F7C 57                                              push    edi                                             ;
  4030 00000F7D 1E                                              push    ds                                              ;
  4031 00000F7E 06                                              push    es                                              ;
  4032 00000F7F 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4033 00000F81 1F                                              pop     ds                                              ;... into DS
  4034 00000F82 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4035 00000F84 07                                              pop     es                                              ;... into ES
  4036 00000F85 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4037 00000F8A BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4038 00000F8F 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4039 00000F91 FC                                              cld                                                     ;forward strings
  4040 00000F92 F3A5                                            rep     movsd                                           ;move 24 lines up
  4041 00000F94 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4042 00000F99 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4043 00000F9E F3AB                                            rep     stosd                                           ;clear bottom row
  4044 00000FA0 07                                              pop     es                                              ;restore non-volatile regs
  4045 00000FA1 1F                                              pop     ds                                              ;
  4046 00000FA2 5F                                              pop     edi                                             ;
  4047 00000FA3 5E                                              pop     esi                                             ;
  4048 00000FA4 59                                              pop     ecx                                             ;
  4049 00000FA5 C3                                              ret                                                     ;return
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ;
  4052                                  ;       Routine:        SetConsoleChar
  4053                                  ;
  4054                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4055                                  ;
  4056                                  ;       In:             AL      ASCII character
  4057                                  ;                       CL      column
  4058                                  ;                       CH      row
  4059                                  ;                       ES      CGA selector
  4060                                  ;
  4061                                  ;       Out:            EAX     last target address written (ES:)
  4062                                  ;                       CL      column + 1
  4063                                  ;
  4064                                  ;-----------------------------------------------------------------------------------------------------------------------
  4065 00000FA6 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4066 00000FA8 0FB6C5                                          movzx   eax,ch                                          ;row
  4067 00000FAB B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4068 00000FAD F6E4                                            mul     ah                                              ;row * cols/row
  4069 00000FAF 00C8                                            add     al,cl                                           ;add column
  4070 00000FB1 80D400                                          adc     ah,0                                            ;handle carry
  4071 00000FB4 D1E0                                            shl     eax,1                                           ;screen offset
  4072 00000FB6 268810                                          mov     [es:eax],dl                                     ;store character
  4073 00000FB9 FEC1                                            inc     cl                                              ;next column
  4074 00000FBB C3                                              ret                                                     ;return
  4075                                  ;-----------------------------------------------------------------------------------------------------------------------
  4076                                  ;
  4077                                  ;       Routine:        SetConsoleString
  4078                                  ;
  4079                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4080                                  ;
  4081                                  ;       In:             ESI     source offset (DS:)
  4082                                  ;                       CL      column
  4083                                  ;                       CH      row
  4084                                  ;                       ES      CGA selector
  4085                                  ;
  4086                                  ;-----------------------------------------------------------------------------------------------------------------------
  4087 00000FBC 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4088 00000FBD FC                                              cld                                                     ;forward strings
  4089 00000FBE AC                      .10                     lodsb                                                   ;next ASCII character
  4090 00000FBF 84C0                                            test    al,al                                           ;end of string?
  4091 00000FC1 7407                                            jz      .20                                             ;yes, branch
  4092 00000FC3 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4093 00000FC8 EBF4                                            jmp     .10                                             ;continue
  4094 00000FCA 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4095 00000FCB C3                                              ret                                                     ;return
  4096                                  ;=======================================================================================================================
  4097                                  ;
  4098                                  ;       Input/Output Routines
  4099                                  ;
  4100                                  ;       These routines read and/or write directly to ports.
  4101                                  ;
  4102                                  ;       PlaceCursor
  4103                                  ;       PutPrimaryEndOfInt
  4104                                  ;       PutSecondaryEndOfInt
  4105                                  ;       ResetSystem
  4106                                  ;       SetKeyboardLamps
  4107                                  ;       WaitForKeyInBuffer
  4108                                  ;       WaitForKeyOutBuffer
  4109                                  ;
  4110                                  ;=======================================================================================================================
  4111                                  ;-----------------------------------------------------------------------------------------------------------------------
  4112                                  ;
  4113                                  ;       Routine:        PlaceCursor
  4114                                  ;
  4115                                  ;       Description:    This routine positions the cursor on the console.
  4116                                  ;
  4117                                  ;       In:             DS      OS data selector
  4118                                  ;
  4119                                  ;-----------------------------------------------------------------------------------------------------------------------
  4120 00000FCC 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4121 00000FCD A021080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4122 00000FD2 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4123 00000FD4 F6E4                                            mul     ah                                              ;row offset
  4124 00000FD6 020520080000                                    add     al,[wbConsoleColumn]                            ;add column
  4125 00000FDC 80D400                                          adc     ah,0                                            ;add overflow
  4126 00000FDF 89C1                                            mov     ecx,eax                                         ;screen offset
  4127 00000FE1 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4128 00000FE3 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4129 00000FE5 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4130 00000FE7 EE                                              out     dx,al                                           ;select register
  4131 00000FE8 42                                              inc     edx                                             ;data port
  4132 00000FE9 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4133 00000FEB EE                                              out     dx,al                                           ;store hi-order loc
  4134 00000FEC 4A                                              dec     edx                                             ;register select port
  4135 00000FED B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4136 00000FEF EE                                              out     dx,al                                           ;select register
  4137 00000FF0 42                                              inc     edx                                             ;data port
  4138 00000FF1 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4139 00000FF3 EE                                              out     dx,al                                           ;store lo-order loc
  4140 00000FF4 59                                              pop     ecx                                             ;restore non-volatile regs
  4141 00000FF5 C3                                              ret                                                     ;return
  4142                                  ;-----------------------------------------------------------------------------------------------------------------------
  4143                                  ;
  4144                                  ;       Routine:        PutPrimaryEndOfInt
  4145                                  ;
  4146                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4147                                  ;
  4148                                  ;-----------------------------------------------------------------------------------------------------------------------
  4149 00000FF6 FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4150 00000FF7 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4151 00000FF9 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4152 00000FFB C3                                              ret                                                     ;return
  4153                                  ;-----------------------------------------------------------------------------------------------------------------------
  4154                                  ;
  4155                                  ;       Routine:        PutSecondaryEndOfInt
  4156                                  ;
  4157                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4158                                  ;
  4159                                  ;-----------------------------------------------------------------------------------------------------------------------
  4160 00000FFC FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4161 00000FFD B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4162 00000FFF E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4163 00001001 C3                                              ret                                                     ;return
  4164                                  ;-----------------------------------------------------------------------------------------------------------------------
  4165                                  ;
  4166                                  ;       Routine:        ResetSystem
  4167                                  ;
  4168                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4169                                  ;
  4170                                  ;       Out:            N/A     This routine does not return.
  4171                                  ;
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173 00001002 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4174 00001007 E2FE                                            loop    $                                               ;clear interrupts
  4175 00001009 B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4176 0000100B E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4177 0000100D FB                      .10                     sti                                                     ;enable maskable interrupts
  4178 0000100E F4                                              hlt                                                     ;halt until interrupt
  4179 0000100F EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4180                                  ;-----------------------------------------------------------------------------------------------------------------------
  4181                                  ;
  4182                                  ;       Routine:        SetKeyboardLamps
  4183                                  ;
  4184                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4185                                  ;
  4186                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4187                                  ;
  4188                                  ;-----------------------------------------------------------------------------------------------------------------------
  4189 00001011 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4190 00001016 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4191 00001018 E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4192 0000101A E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4193 0000101F E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4194 00001021 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4195 00001026 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4196 00001028 E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4197 0000102A E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4198 0000102F E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4199 00001031 C3                                              ret                                                     ;return
  4200                                  ;-----------------------------------------------------------------------------------------------------------------------
  4201                                  ;
  4202                                  ;       Routine:        WaitForKeyInBuffer
  4203                                  ;
  4204                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4205                                  ;
  4206                                  ;       Out:            ZF      1 = Input buffer ready
  4207                                  ;                               0 = Input buffer not ready after timeout
  4208                                  ;
  4209                                  ;-----------------------------------------------------------------------------------------------------------------------
  4210 00001032 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4211 00001033 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4212 00001038 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4213 0000103A A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4214 0000103C E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4215 0000103E 59                                              pop     ecx                                             ;restore non-volatile regs
  4216 0000103F C3                                              ret                                                     ;return
  4217                                  ;-----------------------------------------------------------------------------------------------------------------------
  4218                                  ;
  4219                                  ;       Routine:        WaitForKeyOutBuffer
  4220                                  ;
  4221                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4222                                  ;
  4223                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4224                                  ;                               0 = Output buffer empty after timeout
  4225                                  ;
  4226                                  ;-----------------------------------------------------------------------------------------------------------------------
  4227 00001040 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4228 00001041 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4229 00001046 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4230 00001048 A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  4231 0000104A E1FA                                            loopz   .10                                             ;loop until output buffer bit
  4232 0000104C 59                                              pop     ecx                                             ;restore non-volatile regs
  4233 0000104D C3                                              ret                                                     ;return
  4234                                  ;-----------------------------------------------------------------------------------------------------------------------
  4235                                  ;
  4236                                  ;       End of the Kernel Function Library
  4237                                  ;
  4238                                  ;-----------------------------------------------------------------------------------------------------------------------
  4239 0000104E 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  4240                                  ;=======================================================================================================================
  4241                                  ;
  4242                                  ;       Console Task
  4243                                  ;
  4244                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4245                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4246                                  ;       screen and responds to user commands.
  4247                                  ;
  4248                                  ;=======================================================================================================================
  4249                                  ;-----------------------------------------------------------------------------------------------------------------------
  4250                                  ;
  4251                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4252                                  ;
  4253                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4254                                  ;
  4255                                  ;-----------------------------------------------------------------------------------------------------------------------
  4256                                  section                 constack                                                ;console task stack
  4257 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  4258                                  ;-----------------------------------------------------------------------------------------------------------------------
  4259                                  ;
  4260                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4261                                  ;
  4262                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4263                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4264                                  ;       16 descriptors. Six are initially defined.
  4265                                  ;
  4266                                  ;-----------------------------------------------------------------------------------------------------------------------
  4267                                  section                 conldt                                                  ;console local descriptors
  4268 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  4269 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  4270 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  4271 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  4272 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  4273 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  4274 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4275                                  ;-----------------------------------------------------------------------------------------------------------------------
  4276                                  ;
  4277                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4278                                  ;
  4279                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4280                                  ;       segment. CS to console code.
  4281                                  ;
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283                                  section                 contss                                                  ;console task state segment
  4284 00000000 00000000                                        dd      0                                               ;00 back-link tss
  4285 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  4286 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  4287 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  4288 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  4289 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  4290 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  4291 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  4292 00000020 00000000                                        dd      0                                               ;20 eip
  4293 00000024 00020000                                        dd      0200h                                           ;24 eflags
  4294 00000028 00000000                                        dd      0                                               ;28 eax
  4295 0000002C 00000000                                        dd      0                                               ;2c ecx
  4296 00000030 00000000                                        dd      0                                               ;30 edx
  4297 00000034 00000000                                        dd      0                                               ;34 ebx
  4298 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  4299 0000003C 00000000                                        dd      0                                               ;3c ebp
  4300 00000040 00000000                                        dd      0                                               ;40 esi
  4301 00000044 00000000                                        dd      0                                               ;44 edi
  4302 00000048 1C000000                                        dd      001Ch                                           ;48 es
  4303 0000004C 24000000                                        dd      0024h                                           ;4c cs
  4304 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  4305 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  4306 00000058 00000000                                        dd      0                                               ;58 fs
  4307 0000005C 00000000                                        dd      0                                               ;5c gs
  4308 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4309 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4310                                  ;-----------------------------------------------------------------------------------------------------------------------
  4311                                  ;
  4312                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4313                                  ;
  4314                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4315                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4316                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4317                                  ;       event.
  4318                                  ;
  4319                                  ;-----------------------------------------------------------------------------------------------------------------------
  4320                                  section                 conmque                                                 ;console message queue
  4321 00000000 08000000                                        dd      8                                               ;head pointer
  4322 00000004 08000000                                        dd      8                                               ;tail pointer
  4323 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  4324                                  ;-----------------------------------------------------------------------------------------------------------------------
  4325                                  ;
  4326                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4327                                  ;
  4328                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4329                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4330                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4331                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4332                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4333                                  ;       board input, echoing to the console screen and responding to user commands.
  4334                                  ;
  4335                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4336                                  ;
  4337                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4338                                  ;                               |  Real Mode Interrupt Vectors                  |
  4339                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4340                                  ;                               |  Reserved BIOS Memory Area                    |
  4341                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4342                                  ;                               |  Shared Kernel Memory Area                    |
  4343                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4344                                  ;                               |  Global Descriptor Table (GDT)                |
  4345                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4346                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4347                                  ;                       002000  +-----------------------------------------------+
  4348                                  ;                               |  Interrupt Handlers                           |
  4349                                  ;                               |  Kernel Function Library                      |
  4350                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4351                                  ;                               |  Console Task Stack Area                      |
  4352                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4353                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4354                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4355                                  ;                               |  Console Task Task State Segment (TSS)        |
  4356                                  ;                       004800  +-----------------------------------------------+
  4357                                  ;                               |  Console Task Message Queue                   |
  4358                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4359                                  ;                               |  Console Task Code                            |
  4360                                  ;                               |  Console Task Constants                       |
  4361                                  ;                       006000  +===============================================+
  4362                                  ;
  4363                                  ;-----------------------------------------------------------------------------------------------------------------------
  4364                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4365 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  4366                                  
  4367                                                          clearConsoleScreen                                      ;clear the console screen
  4367 00000005 B001                <1>  mov al,eClearConsoleScreen
  4367 00000007 CD30                <1>  int _svc
  4368                                                          putConsoleString czTitle                                ;display startup message
  4368 00000009 BA[FE020000]        <1>  mov edx,%1
  4368 0000000E B008                <1>  mov al,ePutConsoleString
  4368 00000010 CD30                <1>  int _svc
  4369                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4369                              <1> .10 :
  4369 00000012 BA[FC020000]        <1>  mov edx,%1
  4369 00000017 B008                <1>  mov al,ePutConsoleString
  4369 00000019 CD30                <1>  int _svc
  4370                                                          placeCursor                                             ;set CRT cursor location
  4370 0000001B B007                <1>  mov al,ePlaceCursor
  4370 0000001D CD30                <1>  int _svc
  4371                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4371 0000001F BA2C080000          <1>  mov edx,%1
  4371 00000024 B94F000000          <1>  mov ecx,%2
  4371 00000029 B701                <1>  mov bh,%3
  4371 0000002B B30D                <1>  mov bl,%4
  4371 0000002D B005                <1>  mov al,eGetConsoleString
  4371 0000002F CD30                <1>  int _svc
  4372                                                          putConsoleString czNewLine                              ;newline
  4372 00000031 BA[F4020000]        <1>  mov edx,%1
  4372 00000036 B008                <1>  mov al,ePutConsoleString
  4372 00000038 CD30                <1>  int _svc
  4373                                  
  4374 0000003A BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  4375 0000003F BB7C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  4376 00000044 E879000000                                      call    ConTakeToken                                    ;handle console input
  4377 00000049 BA7C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  4378 0000004E E8A4000000                                      call    ConDetermineCommand                             ;determine command number
  4379 00000053 83F80C                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4380 00000056 720B                                            jb      .20                                             ;yes, branch
  4381                                  
  4382                                                          putConsoleString czUnknownCommand                       ;display error message
  4382 00000058 BA[1C030000]        <1>  mov edx,%1
  4382 0000005D B008                <1>  mov al,ePutConsoleString
  4382 0000005F CD30                <1>  int _svc
  4383                                  
  4384 00000061 EBAF                                            jmp     .10                                             ;next command
  4385 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  4386 00000066 BA[72020000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  4387 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4388 0000006E FFD0                                            call    eax                                             ;call command handler
  4389 00000070 EBA0                                            jmp     .10                                             ;next command
  4390                                  ;-----------------------------------------------------------------------------------------------------------------------
  4391                                  ;
  4392                                  ;       Routine:        ConInitializeData
  4393                                  ;
  4394                                  ;       Description:    This routine initializes console task variables.
  4395                                  ;
  4396                                  ;-----------------------------------------------------------------------------------------------------------------------
  4397 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  4398 00000073 57                                              push    edi                                             ;
  4399 00000074 06                                              push    es                                              ;
  4400                                  ;
  4401                                  ;       Initialize console work areas.
  4402                                  ;
  4403 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4404 00000077 07                                              pop     es                                              ;... into extra segment register
  4405 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  4406 0000007D 30C0                                            xor     al,al                                           ;initialization value
  4407 0000007F B91C010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  4408 00000084 FC                                              cld                                                     ;forward strings
  4409 00000085 F3AA                                            rep     stosb                                           ;initialize data
  4410                                  ;
  4411                                  ;       Initialize heap size
  4412                                  ;
  4413 00000087 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  4414 0000008C A304080000                                      mov     [wdConsoleHeapSize],eax                         ;set heap size
  4415                                  ;
  4416                                  ;       Initialize MEMROOT structure
  4417                                  ;
  4418 00000091 BF08080000                                      mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4419 00000096 B800000100                                      mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4420 0000009B 31C9                                            xor     ecx,ecx                                         ;zero register
  4421 0000009D B104                                            mov     cl,4                                            ;count
  4422 0000009F F3AB                                            rep     stosd                                           ;store first/last contig and free addrs
  4423 000000A1 31C0                                            xor     eax,eax                                         ;zero register
  4424 000000A3 AB                                              stosd                                                   ;zero first task block
  4425 000000A4 AB                                              stosd                                                   ;zero last task block
  4426                                  ;
  4427                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4428                                  ;
  4429 000000A5 BF00000100                                      mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4430 000000AA B846524545                                      mov     eax,EMEMFREECODE                                ;free memory signature
  4431 000000AF AB                                              stosd                                                   ;store signature
  4432 000000B0 B800000080                                      mov     eax,EKRNHEAPSIZE                                ;heap size
  4433 000000B5 AB                                              stosd                                                   ;store block size
  4434 000000B6 31C9                                            xor     ecx,ecx                                         ;zero register
  4435 000000B8 B106                                            mov     cl,6                                            ;count
  4436 000000BA 31C0                                            xor     eax,eax                                         ;zero register
  4437 000000BC F3AB                                            rep     stosd                                           ;zero owner, reserved, pointers
  4438                                  ;
  4439                                  ;       Restore and return.
  4440                                  ;
  4441 000000BE 07                                              pop     es                                              ;restore non-volatile regs
  4442 000000BF 5F                                              pop     edi                                             ;
  4443 000000C0 59                                              pop     ecx                                             ;
  4444 000000C1 C3                                              ret                                                     ;return
  4445                                  ;-----------------------------------------------------------------------------------------------------------------------
  4446                                  ;
  4447                                  ;       Routine:        ConTakeToken
  4448                                  ;
  4449                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4450                                  ;
  4451                                  ;       In:             DS:EDX  source buffer address
  4452                                  ;                       DS:EBX  target buffer address
  4453                                  ;
  4454                                  ;       Out:            DS:EDX  source buffer address
  4455                                  ;                       DS:EBX  target buffer address
  4456                                  ;
  4457                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4458                                  ;
  4459                                  ;-----------------------------------------------------------------------------------------------------------------------
  4460 000000C2 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  4461 000000C3 57                                              push    edi                                             ;
  4462 000000C4 06                                              push    es                                              ;
  4463 000000C5 1E                                              push    ds                                              ;load data segment selector ...
  4464 000000C6 07                                              pop     es                                              ;... into extra segment reg
  4465 000000C7 89D6                                            mov     esi,edx                                         ;source buffer address
  4466 000000C9 89DF                                            mov     edi,ebx                                         ;target buffer address
  4467 000000CB C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4468 000000CE FC                                              cld                                                     ;forward strings
  4469 000000CF AC                      .10                     lodsb                                                   ;load byte
  4470 000000D0 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4471 000000D2 74FB                                            je      .10                                             ;yes, continue
  4472 000000D4 84C0                                            test    al,al                                           ;end of line?
  4473 000000D6 7410                                            jz      .40                                             ;yes, branch
  4474 000000D8 AA                      .20                     stosb                                                   ;store byte
  4475 000000D9 AC                                              lodsb                                                   ;load byte
  4476 000000DA 84C0                                            test    al,al                                           ;end of line?
  4477 000000DC 740A                                            jz      .40                                             ;no, continue
  4478 000000DE 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4479 000000E0 75F6                                            jne     .20                                             ;no, continue
  4480 000000E2 AC                      .30                     lodsb                                                   ;load byte
  4481 000000E3 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4482 000000E5 74FB                                            je      .30                                             ;yes, continue
  4483 000000E7 4E                                              dec     esi                                             ;pre-position
  4484 000000E8 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4485 000000EB 89D7                                            mov     edi,edx                                         ;source buffer address
  4486 000000ED AC                      .50                     lodsb                                                   ;remaining byte
  4487 000000EE AA                                              stosb                                                   ;move to front of buffer
  4488 000000EF 84C0                                            test    al,al                                           ;end of line?
  4489 000000F1 75FA                                            jnz     .50                                             ;no, continue
  4490 000000F3 07                                              pop     es                                              ;restore non-volatile regs
  4491 000000F4 5F                                              pop     edi                                             ;
  4492 000000F5 5E                                              pop     esi                                             ;
  4493 000000F6 C3                                              ret                                                     ;return
  4494                                  ;-----------------------------------------------------------------------------------------------------------------------
  4495                                  ;
  4496                                  ;       Routine:        ConDetermineCommand
  4497                                  ;
  4498                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4499                                  ;
  4500                                  ;       input:          DS:EDX  command address
  4501                                  ;
  4502                                  ;       output:         EAX     >=0     = command nbr
  4503                                  ;                               0       = unknown command
  4504                                  ;
  4505                                  ;-----------------------------------------------------------------------------------------------------------------------
  4506 000000F7 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4507 000000F8 51                                              push    ecx                                             ;
  4508 000000F9 56                                              push    esi                                             ;
  4509 000000FA 57                                              push    edi                                             ;
  4510                                  
  4511                                                          upperCaseString                                         ;upper-case string at EDX
  4511 000000FB B00B                <1>  mov al,eUpperCaseString
  4511 000000FD CD30                <1>  int _svc
  4512                                  
  4513 000000FF BE[A2020000]                                    mov     esi,tConCmdTbl                                  ;commands table
  4514 00000104 31FF                                            xor     edi,edi                                         ;intialize command number
  4515 00000106 FC                                              cld                                                     ;forward strings
  4516 00000107 AC                      .10                     lodsb                                                   ;command length
  4517 00000108 0FB6C8                                          movzx   ecx,al                                          ;command length
  4518 0000010B E30D                                            jecxz   .20                                             ;branch if end of table
  4519 0000010D 89F3                                            mov     ebx,esi                                         ;table entry address
  4520 0000010F 01CE                                            add     esi,ecx                                         ;next table entry address
  4521                                  
  4522                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4522 00000111 B002                <1>  mov al,eCompareMemory
  4522 00000113 CD30                <1>  int _svc
  4523                                  
  4524 00000115 E303                                            jecxz   .20                                             ;branch if equal
  4525 00000117 47                                              inc     edi                                             ;increment command nbr
  4526 00000118 EBED                                            jmp     .10                                             ;repeat
  4527 0000011A 89F8                    .20                     mov     eax,edi                                         ;command number
  4528 0000011C 5F                                              pop     edi                                             ;restore non-volatile regs
  4529 0000011D 5E                                              pop     esi                                             ;
  4530 0000011E 59                                              pop     ecx                                             ;
  4531 0000011F 5B                                              pop     ebx                                             ;
  4532 00000120 C3                                              ret                                                     ;return
  4533                                  ;-----------------------------------------------------------------------------------------------------------------------
  4534                                  ;
  4535                                  ;       Routine:        ConClear
  4536                                  ;
  4537                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4538                                  ;
  4539                                  ;-----------------------------------------------------------------------------------------------------------------------
  4540                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4540                              <1> ConClear :
  4540 00000121 B001                <1>  mov al,eClearConsoleScreen
  4540 00000123 CD30                <1>  int _svc
  4541 00000125 C3                                              ret                                                     ;return
  4542                                  ;-----------------------------------------------------------------------------------------------------------------------
  4543                                  ;
  4544                                  ;       Routine:        ConExit
  4545                                  ;
  4546                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4547                                  ;
  4548                                  ;-----------------------------------------------------------------------------------------------------------------------
  4549                                  ConExit                 resetSystem                                             ;issue system reset
  4549                              <1> ConExit :
  4549 00000126 B009                <1>  mov al,eResetSystem
  4549 00000128 CD30                <1>  int _svc
  4550 0000012A C3                                              ret                                                     ;return
  4551                                  ;-----------------------------------------------------------------------------------------------------------------------
  4552                                  ;
  4553                                  ;       Routine:        ConFree
  4554                                  ;
  4555                                  ;       Description:    This routine handles the FREE command.
  4556                                  ;
  4557                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4558                                  ;
  4559                                  ;-----------------------------------------------------------------------------------------------------------------------
  4560 0000012B 53                      ConFree                 push    ebx                                             ;save non-volatile regs
  4561 0000012C 51                                              push    ecx                                             ;
  4562 0000012D 56                                              push    esi                                             ;
  4563 0000012E 57                                              push    edi                                             ;
  4564                                  ;
  4565                                  ;       Get address parameter
  4566                                  ;
  4567 0000012F BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4568 00000134 BB7C080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4569 00000139 E884FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  4570                                  ;
  4571                                  ;       Convert input parameter from hexadecimal string to binary
  4572                                  ;
  4573 0000013E 803D7C08000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4574 00000145 7421                                            je      .10                                             ;no, branch
  4575 00000147 BA7C080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4576                                  
  4577                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4577 0000014C B006                <1>  mov al,eHexadecimalToUnsigned
  4577 0000014E CD30                <1>  int _svc
  4578                                  
  4579 00000150 85C0                                            test    eax,eax                                         ;valid parameter?
  4580 00000152 7414                                            jz      .10                                             ;no, branch
  4581                                  ;
  4582                                  ;       Free memory block
  4583                                  ;
  4584                                                          freeMemory eax                                          ;free memory
  4584 00000154 89C2                <1>  mov edx,%1
  4584 00000156 B004                <1>  mov al,eFreeMemory
  4584 00000158 CD30                <1>  int _svc
  4585                                  
  4586 0000015A 83F8FF                                          cmp     eax,-1                                          ;memory freed?
  4587 0000015D 7409                                            je      .10                                             ;no, branch
  4588                                  ;
  4589                                  ;       Indicate memory freed
  4590                                  ;
  4591                                                          putConsoleString czOK                                   ;indicate success
  4591 0000015F BA[F7020000]        <1>  mov edx,%1
  4591 00000164 B008                <1>  mov al,ePutConsoleString
  4591 00000166 CD30                <1>  int _svc
  4592                                  ;
  4593                                  ;       Restore and return
  4594                                  ;
  4595 00000168 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  4596 00000169 5E                                              pop     esi                                             ;
  4597 0000016A 59                                              pop     ecx                                             ;
  4598 0000016B 5B                                              pop     ebx                                             ;
  4599 0000016C C3                                              ret                                                     ;return
  4600                                  ;-----------------------------------------------------------------------------------------------------------------------
  4601                                  ;
  4602                                  ;       Routine:        ConInt6
  4603                                  ;
  4604                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4605                                  ;
  4606                                  ;-----------------------------------------------------------------------------------------------------------------------
  4607 0000016D 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  4608 0000016F C3                                              ret                                                     ;return (not executed)
  4609                                  ;-----------------------------------------------------------------------------------------------------------------------
  4610                                  ;
  4611                                  ;       Routine:        ConMalloc
  4612                                  ;
  4613                                  ;       Description:    This routine handles the MALLOC command.
  4614                                  ;
  4615                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4616                                  ;
  4617                                  ;-----------------------------------------------------------------------------------------------------------------------
  4618 00000170 53                      ConMalloc               push    ebx                                             ;save non-volatile regs
  4619 00000171 51                                              push    ecx                                             ;
  4620 00000172 56                                              push    esi                                             ;
  4621 00000173 57                                              push    edi                                             ;
  4622                                  ;
  4623                                  ;       Get size parameter
  4624                                  ;
  4625 00000174 BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4626 00000179 BB7C080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4627 0000017E E83FFFFFFF                                      call    ConTakeToken                                    ;take first param as token
  4628                                  ;
  4629                                  ;       Convert input parameter from decimal string to binary
  4630                                  ;
  4631 00000183 803D7C08000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4632 0000018A 7434                                            je      .10                                             ;no, branch
  4633 0000018C BA7C080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4634                                  
  4635                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4635 00000191 B003                <1>  mov al,eDecimalToUnsigned
  4635 00000193 CD30                <1>  int _svc
  4636                                  
  4637 00000195 85C0                                            test    eax,eax                                         ;valid parameter?
  4638 00000197 7427                                            jz      .10                                             ;no, branch
  4639                                  ;
  4640                                  ;       Allocate memory block
  4641                                  ;
  4642                                                          allocateMemory eax                                      ;allocate memory
  4642 00000199 89C1                <1>  mov ecx,%1
  4642 0000019B B000                <1>  mov al,eAllocateMemory
  4642 0000019D CD30                <1>  int _svc
  4643                                  
  4644 0000019F 85C0                                            test    eax,eax                                         ;memory allocated?
  4645 000001A1 741D                                            jz      .10                                             ;no, branch
  4646                                  ;
  4647                                  ;       Report allocated memory block address
  4648                                  ;
  4649 000001A3 BACC080000                                      mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4650 000001A8 89C1                                            mov     ecx,eax                                         ;memory address
  4651                                  
  4652                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4652 000001AA B00A                <1>  mov al,eUnsignedToHexadecimal
  4652 000001AC CD30                <1>  int _svc
  4653                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4653 000001AE BACC080000          <1>  mov edx,%1
  4653 000001B3 B008                <1>  mov al,ePutConsoleString
  4653 000001B5 CD30                <1>  int _svc
  4654                                                          putConsoleString czNewLine                              ;display new line
  4654 000001B7 BA[F4020000]        <1>  mov edx,%1
  4654 000001BC B008                <1>  mov al,ePutConsoleString
  4654 000001BE CD30                <1>  int _svc
  4655                                  
  4656 000001C0 5F                      .10                     pop     edi                                             ;restore non-volatile regs
  4657 000001C1 5E                                              pop     esi                                             ;
  4658 000001C2 59                                              pop     ecx                                             ;
  4659 000001C3 5B                                              pop     ebx                                             ;
  4660 000001C4 C3                                              ret                                                     ;return
  4661                                  ;-----------------------------------------------------------------------------------------------------------------------
  4662                                  ;
  4663                                  ;       Routine:        ConMem
  4664                                  ;
  4665                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4666                                  ;
  4667                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4668                                  ;
  4669                                  ;-----------------------------------------------------------------------------------------------------------------------
  4670 000001C5 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  4671 000001C6 56                                              push    esi                                             ;
  4672 000001C7 57                                              push    edi                                             ;
  4673                                  ;
  4674                                  ;                       update the source address if a parameter is given
  4675                                  ;
  4676 000001C8 BA2C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4677 000001CD BB7C080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4678 000001D2 E8EBFEFFFF                                      call    ConTakeToken                                    ;take first param as token
  4679 000001D7 803D7C08000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4680 000001DE 740E                                            je      .10                                             ;no, branch
  4681 000001E0 BA7C080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4682                                  
  4683                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4683 000001E5 B006                <1>  mov al,eHexadecimalToUnsigned
  4683 000001E7 CD30                <1>  int _svc
  4684                                  
  4685 000001E9 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  4686                                  ;
  4687                                  ;                       setup source address and row count
  4688                                  ;
  4689 000001EE 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4690 000001F4 31C9                                            xor     ecx,ecx                                         ;zero register
  4691 000001F6 B110                                            mov     cl,16                                           ;row count
  4692                                  ;
  4693                                  ;                       start the row with the source address in hexadecimal
  4694                                  ;
  4695 000001F8 51                      .20                     push    ecx                                             ;save remaining rows
  4696 000001F9 BFCC080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4697 000001FE 89FA                                            mov     edx,edi                                         ;output buffer address
  4698 00000200 89F1                                            mov     ecx,esi                                         ;console memory address
  4699                                  
  4700                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4700 00000202 B00A                <1>  mov al,eUnsignedToHexadecimal
  4700 00000204 CD30                <1>  int _svc
  4701                                  
  4702 00000206 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  4703 00000209 B020                                            mov     al,' '                                          ;ascii space
  4704 0000020B AA                                              stosb                                                   ;store delimiter
  4705                                  ;
  4706                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4707                                  ;
  4708 0000020C 31C9                                            xor     ecx,ecx                                         ;zero register
  4709 0000020E B110                                            mov     cl,16                                           ;loop count
  4710 00000210 51                      .30                     push    ecx                                             ;save loop count
  4711 00000211 AC                                              lodsb                                                   ;memory byte
  4712 00000212 88C4                                            mov     ah,al                                           ;memory byte
  4713 00000214 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  4714 00000217 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4715 00000219 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4716 0000021B 7202                                            jb      .40                                             ;yes, skip ahead
  4717 0000021D 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4718 0000021F AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4719 00000220 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  4720 00000222 240F                                            and     al,0fh                                          ;mask out high-order bits
  4721 00000224 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4722 00000226 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4723 00000228 7202                                            jb      .50                                             ;yes, skip ahead
  4724 0000022A 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4725 0000022C AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4726 0000022D B020                                            mov     al,' '                                          ;ascii space
  4727 0000022F AA                                              stosb                                                   ;store ascii space delimiter
  4728 00000230 59                                              pop     ecx                                             ;loop count
  4729 00000231 E2DD                                            loop    .30                                             ;next
  4730                                  ;
  4731                                  ;                       output printable ASCII character section for the row
  4732                                  ;
  4733 00000233 83EE10                                          sub     esi,16                                          ;reset source pointer
  4734 00000236 B110                                            mov     cl,16                                           ;loop count
  4735 00000238 AC                      .60                     lodsb                                                   ;source byte
  4736 00000239 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  4737 0000023B 7204                                            jb      .70                                             ;no, skip ahead
  4738 0000023D 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  4739 0000023F 7202                                            jb      .80                                             ;yes, skip ahead
  4740 00000241 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  4741 00000243 AA                      .80                     stosb                                                   ;store printable ascii byte
  4742 00000244 E2F2                                            loop    .60                                             ;next source byte
  4743 00000246 30C0                                            xor     al,al                                           ;nul-terminator
  4744 00000248 AA                                              stosb                                                   ;terminate output line
  4745                                  ;
  4746                                  ;                       display constructed output buffer and newline
  4747                                  ;
  4748                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4748 00000249 BACC080000          <1>  mov edx,%1
  4748 0000024E B008                <1>  mov al,ePutConsoleString
  4748 00000250 CD30                <1>  int _svc
  4749                                                          putConsoleString czNewLine                              ;display new line
  4749 00000252 BA[F4020000]        <1>  mov edx,%1
  4749 00000257 B008                <1>  mov al,ePutConsoleString
  4749 00000259 CD30                <1>  int _svc
  4750                                  ;
  4751                                  ;                       repeat until all lines displayed and preserve source address
  4752                                  ;
  4753 0000025B 59                                              pop     ecx                                             ;remaining rows
  4754 0000025C E29A                                            loop    .20                                             ;next row
  4755 0000025E 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  4756 00000264 5F                                              pop     edi                                             ;restore regs
  4757 00000265 5E                                              pop     esi                                             ;
  4758 00000266 5B                                              pop     ebx                                             ;
  4759 00000267 C3                                              ret                                                     ;return
  4760                                  ;-----------------------------------------------------------------------------------------------------------------------
  4761                                  ;
  4762                                  ;       Routine:        ConVersion
  4763                                  ;
  4764                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4765                                  ;
  4766                                  ;-----------------------------------------------------------------------------------------------------------------------
  4767                                  ConVersion              putConsoleString czTitle                                ;display version message
  4767                              <1> ConVersion :
  4767 00000268 BA[FE020000]        <1>  mov edx,%1
  4767 0000026D B008                <1>  mov al,ePutConsoleString
  4767 0000026F CD30                <1>  int _svc
  4768 00000271 C3                                              ret                                                     ;return
  4769                                  ;-----------------------------------------------------------------------------------------------------------------------
  4770                                  ;
  4771                                  ;       Tables
  4772                                  ;
  4773                                  ;-----------------------------------------------------------------------------------------------------------------------
  4774                                                                                                                  ;---------------------------------------
  4775                                                                                                                  ;  Command Jump Table
  4776                                                                                                                  ;---------------------------------------
  4777                                  tConJmpTbl              equ     $                                               ;command jump table
  4778 00000272 26010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4779 00000276 68020000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  4780 0000027A 70010000                                        dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4781 0000027E C5010000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  4782 00000282 21010000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  4783 00000286 26010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4784 0000028A 2B010000                                        dd      ConFree         - ConCode                       ;free command routine offset
  4785 0000028E 6D010000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4786 00000292 26010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4787 00000296 21010000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  4788 0000029A C5010000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  4789 0000029E 68020000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  4790                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4791                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4792                                                                                                                  ;---------------------------------------
  4793                                                                                                                  ;  Command Name Table
  4794                                                                                                                  ;---------------------------------------
  4795                                  tConCmdTbl              equ     $                                               ;command name table
  4796 000002A2 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4796 000002AB 00                 
  4797 000002AC 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  4798 000002B5 074D414C4C4F4300                                db      7,"MALLOC",0                                    ;malloc command
  4799 000002BD 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  4800 000002C5 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  4801 000002CC 054558495400                                    db      5,"EXIT",0                                      ;exit command
  4802 000002D2 054652454500                                    db      5,"FREE",0                                      ;free command
  4803 000002D8 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  4804 000002DE 055155495400                                    db      5,"QUIT",0                                      ;quit command
  4805 000002E4 04434C5300                                      db      4,"CLS",0                                       ;cls command
  4806 000002E9 044D454D00                                      db      4,"MEM",0                                       ;mem command
  4807 000002EE 0456455200                                      db      4,"VER",0                                       ;ver command
  4808 000002F3 00                                              db      0                                               ;end of table
  4809                                  ;-----------------------------------------------------------------------------------------------------------------------
  4810                                  ;
  4811                                  ;       Constants
  4812                                  ;
  4813                                  ;-----------------------------------------------------------------------------------------------------------------------
  4814 000002F4 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  4815 000002F7 6F6B0D0A00              czOK                    db      "ok",13,10,0                                    ;ok string
  4816 000002FC 3A00                    czPrompt                db      ":",0                                           ;prompt string
  4817 000002FE 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4817 00000307 65726174696E672053-
  4817 00000310 797374656D20312E30-
  4817 00000319 0D0A00             
  4818 0000031C 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4818 00000325 6F6D6D616E640D0A00 
  4819 0000032E 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  4820                                  %endif
  4821                                  %ifdef BUILDDISK
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ;
  4824                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4825                                  ;
  4826                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4827                                  ;
  4828                                  ;-----------------------------------------------------------------------------------------------------------------------
  4829                                  section                 unused                                                  ;unused disk space
  4830                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4831                                  %endif
  4832                                  ;=======================================================================================================================
  4833                                  ;
  4834                                  ;       End of Program Code
  4835                                  ;
  4836                                  ;=======================================================================================================================
