     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.010
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;			system for PCI expansion BIOS.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   190                                  ;
   191                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ERTCREGPORT		equ	70h						;register select port
   195                                  ERTCDATAPORT		equ	71h						;data port
   196                                  ERTCSECONDREG		equ	00h						;second
   197                                  ERTCMINUTEREG		equ	02h						;minute
   198                                  ERTCHOURREG		equ	04h						;hour
   199                                  ERTCWEEKDAYREG		equ	06h						;weekday
   200                                  ERTCDAYREG		equ	07h						;day
   201                                  ERTCMONTHREG		equ	08h						;month
   202                                  ERTCYEARREG		equ	09h						;year of the century
   203                                  ERTCSTATUSREG		equ	0bh						;status
   204                                  ERTCCENTURYREG		equ	32h						;century
   205                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  ;
   208                                  ;	x86 Descriptor Access Codes						EACC...
   209                                  ;
   210                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   211                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   212                                  ;
   213                                  ;	0.......	Segment is not present in memory (triggers int 11)
   214                                  ;	1.......	Segment is present in memory
   215                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   216                                  ;	...0....	Segment is a system segment
   217                                  ;	...00010		Local Descriptor Table
   218                                  ;	...00101		Task Gate
   219                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   220                                  ;	...01100		Call Gate (386)
   221                                  ;	...01110		Interrupt Gate (386)
   222                                  ;	...01111		Trap Gate (386)
   223                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   224                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   225                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   226                                  ;
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  EACCLDT			equ	10000010b					;local descriptor table
   229                                  EACCTASK		equ	10000101b					;task gate
   230                                  EACCTSS			equ	10001001b					;task-state segment
   231                                  EACCGATE		equ	10001100b					;call gate
   232                                  EACCINT			equ	10001110b					;interrupt gate
   233                                  EACCTRAP		equ	10001111b					;trap gate
   234                                  EACCDATA		equ	10010011b					;upward writable data
   235                                  EACCCODE		equ	10011011b					;non-conforming readable code
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;	BIOS Interrupts and Functions						EBIOS...
   239                                  ;
   240                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   241                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   242                                  ;
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   245                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   246                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   247                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   248                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   249                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   250                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;	ASCII									EASCII...
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   257                                  EASCIILINEFEED		equ	10						;ASCII line feed
   258                                  EASCIIRETURN		equ	13						;ASCII carriage return
   259                                  EASCIIESCAPE		equ	27						;ASCII escape
   260                                  EASCIISPACE		equ	32						;ASCII space
   261                                  EASCIIPERIOD		equ	46						;ASCII period
   262                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   263                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   264                                  EASCIILOWERA		equ	97						;ASCII 'a'
   265                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   266                                  EASCIITILDE		equ	126						;ASCII '~'
   267                                  EASCIICASE		equ	00100000b					;ASCII case bit
   268                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;	PCI									EPCI...
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  EPCIVENDORAPPLE		equ	106Bh						;Apple
   275                                  EPCIVENDORINTEL		equ	8086h						;Intel
   276                                  EPCIVENDORORACLE	equ	80EEh						;Oracle
   277                                  EPCIAPPLEUSB		equ	003Fh						;USB Controller
   278                                  EPCIINTELPRO1000MT	equ	100Fh						;Pro/1000 MT Ethernet Adapter
   279                                  EPCIINTELPCIMEM		equ	1237h						;PCI & Memory
   280                                  EPCIINTELAD1881		equ	2415h						;Aureal AD1881 SOUNDMAX
   281                                  EPCIINTELPIIX3		equ	7000h						;PIIX3 PCI-to-ISA Bridge (Triton II)
   282                                  EPCIINTEL82371AB	equ	7111h						;82371AB/EB PCI Bus Master IDE Cntrlr
   283                                  EPCIINTELPIIX4		equ	7113h						;PIIX4/4E/4M Power Mgmt Cntrlr
   284                                  EPCIORACLEVBOXGA	equ	0BEEFh						;VirtualBox Graphics Adapter
   285                                  EPCIORACLEVBOXDEVICE	equ	0CAFEh						;VirtualBox Device
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;	Boot Sector and Loader Constants
   289                                  ;
   290                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   291                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   295                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   296                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   297                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   298                                  EMAXTRIES		equ	5						;max read retries
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ESELDAT			equ	18h						;kernel data selector
   303                                  ESELCGA			equ	20h						;cga video selector
   304                                  ESELOSCODE		equ	48h						;os kernel selector
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;	LDT Selectors								ESEL...
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  ESELMQ			equ	2Ch						;console task message queue
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;	Kernel Constants							EKRN...
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EKRNDESLEN		equ	8						;size of descriptor
   313                                  EKRNADR			equ	1000h						;kernel base address
   314                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   315                                  ;-----------------------------------------------------------------------------------------------------------------------
   316                                  ;	Keyboard Flags								EKEY...
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  EKEYCTRLLEFT		equ	00000001b					;left control
   319                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   320                                  EKEYALTLEFT		equ	00000100b					;left alt
   321                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   322                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   323                                  EKEYSHIFT		equ	00010010b					;left or right shift
   324                                  EKEYALTRIGHT		equ	00100000b					;right alt
   325                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   326                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   327                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   328                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;	Hardware Flags
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EHWETHERNET		equ	80h						;ethernet adapter found
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;	Console Constants							ECON...
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ECONCOLS		equ	80						;columns per row
   337                                  ECONROWS		equ	24						;console rows
   338                                  ECONOIAROW		equ	24						;operator information area row
   339                                  ECONCOLBYTES		equ	2						;bytes per column
   340                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   341                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   342                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   343                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;	Kernel Message Identifiers						EMSG...
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   348                                  EMSGKEYUP		equ	41010000h					;message: key-up
   349                                  EMSGKEYCHAR		equ	41020000h					;message: character
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;	Structures
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;
   357                                  ;	DATETIME
   358                                  ;
   359                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  struc			DATETIME
   363 00000000 <res 00000001>          .second			resb	1						;seconds
   364 00000001 <res 00000001>          .minute			resb	1						;minutes
   365 00000002 <res 00000001>          .hour			resb	1						;hours
   366 00000003 <res 00000001>          .weekday		resb	1						;day of week
   367 00000004 <res 00000001>          .day			resb	1						;day of month
   368 00000005 <res 00000001>          .month			resb	1						;month of year
   369 00000006 <res 00000001>          .year			resb	1						;year of century
   370 00000007 <res 00000001>          .century		resb	1						;century
   371                                  EDATETIMEL		equ	($-.second)
   372                                  endstruc
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;
   375                                  ;	MQUEUE
   376                                  ;
   377                                  ;	The MQUEUE structure maps memory used for a message queue.
   378                                  ;
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  struc			MQUEUE
   381 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   382 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   383 00000008 <res 000003F8>          MQData			resd	254						;message queue
   384                                  endstruc
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  ;
   387                                  ;	OSDATA
   388                                  ;
   389                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   390                                  ;	used by the BIOS.
   391                                  ;
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  struc			OSDATA
   394 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   395 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   396 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   397 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   398 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   399 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   400 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   401 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   402 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   403 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   404 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   405 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   406 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   407 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   408 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   409 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   410 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   411 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   412 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   413 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   414 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   415 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   416 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   417 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   418 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   419 00000449 <res 00000001>          			resb	1						;449 current video mode
   420 0000044A <res 00000002>          			resw	1						;44A screen columns
   421 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   422 0000044E <res 00000002>          			resw	1						;44E current video page offset
   423 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   424 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   425 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   426 00000462 <res 00000001>          			resb	1						;462 active display page number
   427 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   428 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   429 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   430 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   431 00000469 <res 00000003>          			resb	3						;469 vague
   432 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   433 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   434 00000471 <res 00000001>          			resb	1						;471 bios break flag
   435 00000472 <res 00000002>          			resw	1						;472 soft reset
   436 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   437 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   438 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   439 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   440 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   441 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   442 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   443 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   444 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   445 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   446 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   447 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   448 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   449 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   450 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   451 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   452 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   453 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   454 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   455 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   456 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   457 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   458 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   459 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   460 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   461 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   462 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   463 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   464 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   465 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   466 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   467 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   468 000004AC <res 00000008>          			resb	8						;4AC reserved
   469 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   470 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   471 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   472 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   473 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   474 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   475 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   476 000004CD <res 00000001>          			resb	1						;4CD unknown
   477 000004CE <res 00000002>          			resw	1						;4CE day counter
   478 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   479 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   480 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   481 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   482 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   483 00000505 <res 0000000A>          			resb	10						;505 POST work area
   484 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   485 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   486 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   487 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   488 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   489 0000051E <res 00000002>          			resw	1						;51E unknown
   490 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   491 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   492 00000530 <res 00000004>          			resb	4						;530 MODE command
   493 00000534 <res 000001CC>          			resb	460						;534 unused
   494 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   495                                  ;-----------------------------------------------------------------------------------------------------------------------
   496                                  ;
   497                                  ;	OS Variables								@disk: N/A	@mem: 000800
   498                                  ;
   499                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   500                                  ;	accessible by any kernel task or interrupt.
   501                                  ;
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  ECONDATA		equ	($)
   504 00000800 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   505 00000804 <res 00000004>          wfConsolePCISelector	resd	1						;PCI selector (bbbbbbbb dddddfff)
   506                                  wfConsolePCIData	equ	$						;PCI register data value
   507 00000808 <res 00000002>          wwConsolePCIVendor	resw	1						;PCI data vendor
   508 0000080A <res 00000002>          wwConsolePCIChip	resw	1						;PCI data chip
   509 0000080C <res 00000004>          wfConsolePCIVendorStr	resd	1						;PCI vendor name string addr
   510 00000810 <res 00000004>          wfConsolePCIChipStr	resd	1						;PCI device name string addr
   511 00000814 <res 00000004>          wfConsoleEthernetDevice	resd	1						;PCI ethernet adapter selector
   512 00000818 <res 00000004>          wfConsoleEthernetMem	resd	1						;PCI ethernet memory mapped i/o address
   513 0000081C <res 00000004>          wfConsoleEthernetPort	resd	1						;PCI ethernet i/o port
   514 00000820 <res 00000004>          wfConsoleEthernetCtrl	resd	1						;PCI ethernet control register value
   515 00000824 <res 00000001>          wbConsoleColumn		resb	1						;console column
   516 00000825 <res 00000001>          wbConsoleRow		resb	1						;console row
   517 00000826 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   518 00000827 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   519 00000828 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   520 00000829 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   521 0000082A <res 00000001>          wbConsoleScan1		resb	1						;scan code
   522 0000082B <res 00000001>          wbConsoleScan2		resb	1						;scan code
   523 0000082C <res 00000001>          wbConsoleScan3		resb	1						;scan code
   524 0000082D <res 00000001>          wbConsoleScan4		resb	1						;scan code
   525 0000082E <res 00000001>          wbConsoleScan5		resb	1						;scan code
   526 0000082F <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   527 00000830 <res 00000001>          wbConsolePCIBus		resb	1						;PCI bus
   528 00000831 <res 00000001>          wbConsolePCIDevice	resb	1						;PCI device
   529 00000832 <res 00000001>          wbConsolePCIFunction	resb	1						;PCI function
   530 00000833 <res 00000001>          wbConsoleHWFlags	resb	1						;Hardware Flags
   531 00000834 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   532 00000884 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   533 000008D4 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   534 00000924 <res 00000008>          wsConsoleDateTime	resb	EDATETIMEL					;date-time buffer
   535                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   536                                  endstruc
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  ;
   539                                  ;	Macros
   540                                  ;
   541                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   542                                  ;
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  %macro			mint	1
   545                                  _%1			equ	($-$$) / EKRNDESLEN
   546                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   547                                  %endmacro
   548                                  %macro			mtrap	1
   549                                  _%1			equ	($-$$) / EKRNDESLEN
   550                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   551                                  %endmacro
   552                                  %macro			menter	1
   553                                  ?%1			equ	($-$$)
   554                                  %endmacro
   555                                  %macro			tsvce	1
   556                                  e%1			equ	($-tsvc)/4
   557                                  			dd	%1
   558                                  %endmacro
   559                                  %ifdef BUILDBOOT
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  ;
   562                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   563                                  ;
   564                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   565                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   566                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   567                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   568                                  ;
   569                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   570                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   571                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   572                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   573                                  ;	immediately followed by a disk parameter table.
   574                                  ;
   575                                  ;-----------------------------------------------------------------------------------------------------------------------
   576                                  			cpu	8086						;assume minimal CPU
   577                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   578                                  			bits	16						;16-bit code at power-up
   579                                  %ifdef BUILDPREP
   580                                  Boot			jmp	word Prep					;jump to preparation code
   581                                  %else
   582 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   583                                  %endif
   584                                  ;-----------------------------------------------------------------------------------------------------------------------
   585                                  ;
   586                                  ;	Disk Parameter Table
   587                                  ;
   588                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   589                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   590                                  ;
   591                                  ;-----------------------------------------------------------------------------------------------------------------------
   592 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   593 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   594 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   595 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   596 00000010 02                      cbFatCount		db	2						;file allocation table copies
   597 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   598 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   599 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   600 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   601                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   602 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   603 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   604 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   605                                  ;
   606                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   607                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   608                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   609                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   610                                  ;	given several possible starting values for CS:IP.
   611                                  ;
   612                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   613 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   614                                  .@20			equ	$-$$						;.@20 = 021h
   615 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   616 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   617 00000025 B104                    			mov	cl,4						;shift count
   618 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   619 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   620 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   621                                  ;
   622                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   623                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   624                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   625                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   626                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   627                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   628                                  ;
   629 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   630 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   631 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   632 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   633 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   634                                  ;
   635                                  ;	Our boot addressability is now set up according to the following diagram.
   636                                  ;
   637                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   638                                  ;				|  Unused (DOS Program Segment Prefix)		|
   639                                  ;			007c00	+-----------------------------------------------+ DS:0100
   640                                  ;				|  Boot Sector Code (vstart=100h)		|
   641                                  ;				|						|
   642                                  ;			007e00	+-----------------------------------------------+ DS:0300
   643                                  ;				|  Boot Stack					|
   644                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   645                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   646                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   647                                  ;				|						|
   648                                  ;			009100	+-----------------------------------------------+ DS:1600
   649                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   650                                  ;				|						|
   651                                  ;			009300	+-----------------------------------------------+ DS:1800
   652                                  ;
   653                                  ;	On entry, DL indicates the drive being booted from.
   654                                  ;
   655 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   656                                  ;
   657                                  ;	Compute directory i/o buffer address.
   658                                  ;
   659 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   660 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   661 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   662 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   663                                  ;
   664                                  ;	Compute segment where os.com will be loaded.
   665                                  ;
   666 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   667 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   668 0000004E 83E810                  			sub	ax,16						;AX = 0900
   669 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   670                                  ;
   671                                  ;	Write a message to the console so we know we have our addressability established.
   672                                  ;
   673 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   674 00000057 E84B01                  			call	BootPrint					;display loader message
   675                                  ;
   676                                  ;	Initialize the number of directory sectors to search.
   677                                  ;
   678 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   679 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   680                                  ;
   681                                  ;	Compute number of directory sectors and initialize overhead count.
   682                                  ;
   683 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   684 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   685 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   686 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   687                                  ;
   688                                  ;	Compute directory entries per sector.
   689                                  ;
   690 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   691 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   692 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   693                                  ;
   694                                  ;	Compute first logical directory sector and update overhead count.
   695                                  ;
   696 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   697 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   698 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   699 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   700 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   701 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   702                                  ;
   703                                  ;	Read directory sector.
   704                                  ;
   705 00000089 B001                    .30			mov	al,1						;sector count
   706 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   707 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   708 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   709                                  ;
   710                                  ;	Setup variables to search this directory sector.
   711                                  ;
   712 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   713 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   714 0000009C 7603                    			jna	.40						;no, continue
   715 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   716 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   717 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   718 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   719                                  ;
   720                                  ;	Loop through directory sectors searching for kernel program.
   721                                  ;
   722 000000AC 56                      .50			push	si						;save kernel name address
   723 000000AD 57                      			push	di						;save dir i/o buffer address
   724 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   725 000000B1 FC                      			cld							;forward strings
   726 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   727 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   728 000000B5 5E                      			pop	si						;restore kernel name address
   729 000000B6 7418                    			je	.60						;exit loop if found
   730 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   731 000000BC 48                      			dec	ax						;decrement remaining entries
   732 000000BD 75ED                    			jnz	.50						;next entry
   733                                  ;
   734                                  ;	Repeat search if we are not at the end of the directory.
   735                                  ;
   736 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   737 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   738 000000C8 75BF                    			jne	.30						;no, get next sector
   739 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   740 000000CD E9C000                  			jmp	BootExit					;display message and exit
   741                                  ;
   742                                  ;	If we find the kernel program in the directory, read the FAT.
   743                                  ;
   744 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   745 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   746 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   747 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   748 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   749 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   750                                  ;
   751                                  ;	Get the starting cluster of the kernel program and target address.
   752                                  ;
   753 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   754 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   755                                  ;
   756                                  ;	Read each program cluster into RAM.
   757                                  ;
   758 000000E9 50                      .70			push	ax						;save cluster nbr
   759 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   760 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   761 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   762 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   763 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   764 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   765 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   766 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   767                                  ;
   768                                  ;	Update buffer pointer for next cluster.
   769                                  ;
   770 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   771 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   772 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   773 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   774 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   775                                  ;
   776                                  ;	Compute next cluster number.
   777                                  ;
   778 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   779 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   780 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   781 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   782 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   783 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   784 0000011B 83E701                  			and	di,1						;get low bit
   785 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   786 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   787 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   788                                  ;
   789                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   790                                  ;
   791 00000126 F6C101                  			test	cl,1						;is cluster odd?
   792 00000129 7404                    			jz	.80						;no, skip ahead
   793 0000012B B104                    			mov	cl,4						;shift count
   794 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   795 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   796 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   797 00000135 75B2                    			jne	.70						;no, continue
   798                                  ;
   799                                  ;	Transfer control to the operating system program.
   800                                  ;
   801 00000137 EA                      			db	0EAh						;jmp seg:offset
   802 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   803 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   804                                  ;
   805                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   806                                  ;
   807 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   808 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   809 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   810 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   811 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   812 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   813 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   814 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   815 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   816 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   817                                  ;
   818                                  ;	Try maxtries times to read sector.
   819                                  ;
   820 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   821 0000015B 53                      .10			push	bx						;save buffer address
   822 0000015C 51                      			push	cx						;save retry count
   823 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   824 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   825 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   826 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   827 0000016A 59                      			pop	cx						;restore retry count
   828 0000016B 5B                      			pop	bx						;restore buffer address
   829 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   830 0000016E E2EB                    			loop	.10						;retry
   831                                  ;
   832                                  ;	Handle disk error: convert to ASCII and store in error string.
   833                                  ;
   834 00000170 88E0                    			mov	al,ah						;AL = bios error code
   835 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   836 00000174 B210                    			mov	dl,16						;divisor for base 16
   837 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   838 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   839 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   840 0000017E 7203                    			jb	.20						;continue if numeral
   841 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   842 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   843 00000185 7203                    			jb	.30						;continue if numeral
   844 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   845 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   846 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   847 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   848 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   849 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   850 00000197 7504                    			jnz	.20						;continue if key pressed
   851 00000199 FB                      			sti							;enable maskable interrupts
   852 0000019A F4                      			hlt							;wait for interrupt
   853 0000019B EBF6                    			jmp	.10						;repeat
   854 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   855 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   856 000001A1 FB                      .30			sti							;enable maskable interrupts
   857 000001A2 F4                      			hlt							;stop until reset, int, nmi
   858 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   859                                  ;
   860                                  ;	Display text message.
   861                                  ;
   862 000001A5 FC                      BootPrint		cld							;forward strings
   863 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   864 000001A7 84C0                    			test	al,al						;end of string?
   865 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   866 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   867 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   868 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   869 000001B1 C3                      BootReturn		ret							;return
   870                                  ;-----------------------------------------------------------------------------------------------------------------------
   871                                  ;
   872                                  ;	Constants
   873                                  ;
   874                                  ;-----------------------------------------------------------------------------------------------------------------------
   875                                  			align	2
   876 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   877 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   877 000001BD 4F4D               
   878 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   878 000001C8 2E2E0D0A00         
   879 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   879 000001D6 7220               
   880 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   881 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   881 000001E4 7373696E6700       
   882                                  ;-----------------------------------------------------------------------------------------------------------------------
   883                                  ;
   884                                  ;	Work Areas
   885                                  ;
   886                                  ;-----------------------------------------------------------------------------------------------------------------------
   887                                  			align	2
   888 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   889 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   890 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   891 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   892 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   893                                  wwReadCountCommand	equ	$						;read count and command
   894 000001F4 00                      wbReadCount		db	0						;sectors to read
   895 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   896                                  wwDriveHead		equ	$						;drive, head (word)
   897 000001F6 00                      wbDrive			db	0						;drive
   898 000001F7 00                      wbHead			db	0						;head
   899                                  wwSectorTrack		equ	$						;sector, track (word)
   900 000001F8 00                      			db	0						;sector
   901 000001F9 00                      wbTrack			db	0						;track
   902 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   903 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   904                                  %endif
   905                                  %ifdef BUILDPREP
   906                                  ;-----------------------------------------------------------------------------------------------------------------------
   907                                  ;
   908                                  ;	Diskette Preparation Code
   909                                  ;
   910                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   911                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   912                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   913                                  ;
   914                                  ;-----------------------------------------------------------------------------------------------------------------------
   915                                  ;
   916                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   917                                  ;
   918                                  Prep			mov	si,czPrepMsg10					;starting message address
   919                                  			call	BootPrint					;display message
   920                                  ;
   921                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   922                                  ;
   923                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   924                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   925                                  			jnz	.12						;continue if key pressed
   926                                  			sti							;enable interrupts
   927                                  			hlt							;wait for interrupt
   928                                  			jmp	.10						;repeat
   929                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   930                                  			je	.15						;yes, branch
   931                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   932                                  			jne	.10						;no, repeat
   933                                  			jmp	.90						;yes, exit program
   934                                  ;
   935                                  ;	Display writing-sector message and patch the JMP instruction.
   936                                  ;
   937                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   938                                  			call	BootPrint					;display message
   939                                  			mov	bx,Boot+1					;address of JMP instruction operand
   940                                  			mov	ax,01Bh						;address past disk parameter table
   941                                  			mov	[bx],ax						;update the JMP instruction
   942                                  ;
   943                                  ;	Try to read the boot sector.
   944                                  ;
   945                                  			mov	cx,EMAXTRIES					;try up to five times
   946                                  .20			push	cx						;save remaining tries
   947                                  			mov	bx,wcPrepInBuf					;input buffer address
   948                                  			mov	dx,0						;head zero, drive zero
   949                                  			mov	cx,1						;track zero, sector one
   950                                  			mov	ax,0201h					;read one sector
   951                                  			int	EBIOSINTDISKETTE				;attempt the read
   952                                  			pop	cx						;restore remaining retries
   953                                  			jnc	.30						;skip ahead if successful
   954                                  			loop	.20						;try again
   955                                  			mov	si,czPrepMsg20					;read-error message address
   956                                  			jmp	.50						;branch to error routine
   957                                  ;
   958                                  ;	Copy diskette parms from input buffer to output buffer.
   959                                  ;
   960                                  .30			mov	si,wcPrepInBuf					;input buffer address
   961                                  			add	si,11						;skip over JMP and system ID
   962                                  			mov	di,Boot						;output buffer address
   963                                  			add	di,11						;skip over JMP and system ID
   964                                  			mov	cx,19						;length of diskette parameters
   965                                  			cld							;forward string copies
   966                                  			rep	movsb						;copy diskette parameters
   967                                  ;
   968                                  ;	Try to write boot sector to diskette.
   969                                  ;
   970                                  			mov	cx,EMAXTRIES					;try up to five times
   971                                  .40			push	cx						;save remaining tries
   972                                  			mov	bx,Boot						;output buffer address
   973                                  			mov	dx,0						;head zero, drive zero
   974                                  			mov	cx,1						;track zero, sector one
   975                                  			mov	ax,0301h					;write one sector
   976                                  			int	EBIOSINTDISKETTE				;attempt the write
   977                                  			pop	cx						;restore remaining retries
   978                                  			jnc	.80						;skip ahead if successful
   979                                  			loop	.40						;try again
   980                                  			mov	si,czPrepMsg30					;write-error message address
   981                                  ;
   982                                  ;	Convert the error code to ASCII and display the error message.
   983                                  ;
   984                                  .50			push	ax						;save error code
   985                                  			mov	al,ah						;copy error code
   986                                  			mov	ah,0						;AX = error code
   987                                  			mov	dl,10h						;hexadecimal divisor
   988                                  			idiv	dl						;AL = hi-order, AH = lo-order
   989                                  			or	ax,3030h					;add ASCII zone digits
   990                                  			cmp	ah,3Ah						;AH ASCII numeral?
   991                                  			jb	.60						;yes, continue
   992                                  			add	ah,7						;no, make ASCII 'A'-'F'
   993                                  .60			cmp	al,3Ah						;al ASCII numeral?
   994                                  			jb	.70						;yes, continue
   995                                  			add	al,7						;no, make ASCII
   996                                  .70			mov	[si+17],ax					;put ASCII error code in message
   997                                  			call	BootPrint					;write error message
   998                                  			pop	ax						;restore error code
   999                                  ;
  1000                                  ;	Display the completion message.
  1001                                  ;
  1002                                  .80			mov	si,czPrepMsgOK					;assume successful completion
  1003                                  			mov	al,ah						;BIOS return code
  1004                                  			cmp	al,0						;success?
  1005                                  			je	.85						;yes, continue
  1006                                  			mov	si,czPrepMsgErr1				;disk parameter error message
  1007                                  			cmp	al,1						;disk parameter error?
  1008                                  			je	.85						;yes, continue
  1009                                  			mov	si,czPrepMsgErr2				;address mark not found message
  1010                                  			cmp	al,2						;address mark not found?
  1011                                  			je	.85						;yes, continue
  1012                                  			mov	si,czPrepMsgErr3				;protected disk message
  1013                                  			cmp	al,3						;protected disk?
  1014                                  			je	.85						;yes, continue
  1015                                  			mov	si,czPrepMsgErr6				;diskette removed message
  1016                                  			cmp	al,6						;diskette removed?
  1017                                  			je	.85						;yes, continue
  1018                                  			mov	si,czPrepMsgErr80				;drive timed out message
  1019                                  			cmp	al,80H						;drive timed out?
  1020                                  			je	.85						;yes, continue
  1021                                  			mov	si,czPrepMsgErrXX				;unknown error message
  1022                                  .85			call	BootPrint					;display result message
  1023                                  .90			mov	ax,4C00H					;terminate with zero result code
  1024                                  			int	21h						;terminate DOS program
  1025                                  			ret							;return (should not execute)
  1026                                  ;-----------------------------------------------------------------------------------------------------------------------
  1027                                  ;
  1028                                  ;	Diskette Preparation Messages
  1029                                  ;
  1030                                  ;-----------------------------------------------------------------------------------------------------------------------
  1031                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1032                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1033                                  			db	13,10
  1034                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1035                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
  1036                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1037                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1038                                  			db	13,10,0
  1039                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1040                                  			db	13,10,0
  1041                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1042                                  			db	13,10,0
  1043                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1044                                  			db	13,10,0
  1045                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1046                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1047                                  			db	13,10,0
  1048                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1049                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1050                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1051                                  			db	13,10,"and retry."
  1052                                  			db	13,10,0
  1053                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1054                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1055                                  			db	13,10,"using another diskette."
  1056                                  			db	13,10,0
  1057                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1058                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1059                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1060                                  			db	13,10,0
  1061                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1062                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1063                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1064                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1065                                  			db	13,10,"is properly inserted in the diskette drive."
  1066                                  			db	13,10,0
  1067                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1068                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1069                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1070                                  			db	13,10,0
  1071                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1072                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1073                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1074                                  			db	13,10,0
  1075                                  wcPrepInBuf		equ	$
  1076                                  %endif
  1077                                  %ifdef BUILDDISK
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  ;
  1080                                  ;	File Allocation Tables
  1081                                  ;
  1082                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1083                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1084                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1085                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1086                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1087                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1088                                  ;	the last cluster in the chain.
  1089                                  ;
  1090                                  ;	Every three bytes encode two FAT entries as follows:
  1091                                  ;
  1092                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1093                                  ;
  1094                                  ;-----------------------------------------------------------------------------------------------------------------------
  1095                                  ;-----------------------------------------------------------------------------------------------------------------------
  1096                                  ;
  1097                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1098                                  ;
  1099                                  ;-----------------------------------------------------------------------------------------------------------------------
  1100                                  section			fat1							;first copy of FAT
  1101                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1102                                  			db	005h,060h,000h,	007h,080h,000h
  1103                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1104                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1105                                  			db	011h,020h,001h,	013h,040h,001h
  1106                                  			db	015h,060h,001h,	017h,080h,001h
  1107                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1108                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1109                                  			db	021h,020h,002h,	023h,040h,002h
  1110                                  			db	025h,060h,002h,	027h,080h,002h
  1111                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1112                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1113                                  ;-----------------------------------------------------------------------------------------------------------------------
  1114                                  ;
  1115                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1116                                  ;
  1117                                  ;-----------------------------------------------------------------------------------------------------------------------
  1118                                  section			fat2							;second copy of FAT
  1119                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1120                                  			db	005h,060h,000h,	007h,080h,000h
  1121                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1122                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1123                                  			db	011h,020h,001h,	013h,040h,001h
  1124                                  			db	015h,060h,001h,	017h,080h,001h
  1125                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1126                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1127                                  			db	021h,020h,002h,	023h,040h,002h
  1128                                  			db	025h,060h,002h,	027h,080h,002h
  1129                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1130                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1131                                  ;-----------------------------------------------------------------------------------------------------------------------
  1132                                  ;
  1133                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1134                                  ;
  1135                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1136                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1137                                  ;	copy.
  1138                                  ;
  1139                                  ;-----------------------------------------------------------------------------------------------------------------------
  1140                                  section			dir							;diskette directory
  1141                                  			db	"OS      COM"					;file name (must contain spaces)
  1142                                  			db	20h						;attribute (archive bit set)
  1143                                  			times	10 db 0;					;unused
  1144                                  			dw	0h						;time
  1145                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1146                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1147                                  			dw	2						;first cluster
  1148                                  			dd	5200h						;file size
  1149                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1150                                  %endif
  1151                                  %ifdef BUILDCOM
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  ;
  1154                                  ;	OS.COM
  1155                                  ;
  1156                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1157                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1158                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1159                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1160                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1161                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1162                                  ;
  1163                                  ;	Our loader addressability is set up according to the following diagram.
  1164                                  ;
  1165                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1166                                  ;				|  Boot Sector & Loader Stack Area		|
  1167                                  ;				|						|
  1168                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1169                                  ;
  1170                                  ;
  1171                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1172                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1173                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1174                                  ;				|  Loader Code					|
  1175                                  ;				|						|
  1176                                  ;			009300	+-----------------------------------------------+ CS:0200
  1177                                  ;
  1178                                  ;-----------------------------------------------------------------------------------------------------------------------
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  ;
  1181                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1182                                  ;
  1183                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1184                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1185                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1186                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1187                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1188                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1189                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1190                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1191                                  ;	registers.
  1192                                  ;
  1193                                  ;-----------------------------------------------------------------------------------------------------------------------
  1194                                  			cpu	8086						;assume minimal CPU
  1195                                  section			loader	vstart=100h					;use .COM compatible addressing
  1196                                  			bits	16						;this is 16-bit code
  1197                                  Loader			push	cs						;use the code segment
  1198                                  			pop	ds						;...as our data segment
  1199                                  			push	cs						;use the code segment
  1200                                  			pop	es						;...as our extra segment
  1201                                  ;
  1202                                  ;	Write a message to the console so we know we have our addressability established.
  1203                                  ;
  1204                                  			mov	si,czStartingMsg				;starting message
  1205                                  			call	PutTTYString					;display loader message
  1206                                  ;
  1207                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1208                                  ;
  1209                                  			call	GetCPUType					;AL = cpu type
  1210                                  			mov	si,czCPUErrorMsg				;loader error message
  1211                                  			cmp	al,3						;80386+?
  1212                                  			jb	LoaderExit					;no, exit with error message
  1213                                  			cpu	386						;allow 80386 instructions
  1214                                  			mov	si,czCPUOKMsg					;cpu ok message
  1215                                  			call	PutTTYString					;display message
  1216                                  ;
  1217                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1218                                  ;
  1219                                  			mov	si,300h						;GDT offset
  1220                                  			mov	ax,cs						;AX:SI = gdt source
  1221                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1222                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1223                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1224                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1225                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1226                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1227                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1228                                  			call	PutTTYString					;display message
  1229                                  ;
  1230                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1231                                  ;
  1232                                  			push	EKRNSEG						;use kernel segment ...
  1233                                  			pop	es						;... as target segment
  1234                                  			xor	di,di						;ES:DI = target address
  1235                                  			mov	si,300h						;DS:SI = source address
  1236                                  			mov	cx,5000h					;CX = kernel size
  1237                                  			cld							;forward strings
  1238                                  			rep	movsb						;copy kernel image
  1239                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1240                                  			call	PutTTYString					;display message
  1241                                  ;
  1242                                  ;	Switch to protected mode.
  1243                                  ;
  1244                                  			xor	si,si						;ES:SI = gdt addr
  1245                                  			mov	ss,si						;protected mode ss
  1246                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1247                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1248                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1249                                  			mov	dx,001Fh					;outer delay loop count
  1250                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1251                                  			loop	$						;wait out pending interrupts
  1252                                  			dec	dx						;restore outer loop count
  1253                                  			jnz	.10						;continue outer loop
  1254                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1255                                  ;
  1256                                  ;	Enable hardware and maskable interrupts
  1257                                  ;
  1258                                  			xor	al,al						;enable all registers code
  1259                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1260                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1261                                  			sti							;enable maskable interrupts
  1262                                  ;
  1263                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1264                                  ;
  1265                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1266                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1267                                  			jmp	0058h:0						;jump to task state segment selector
  1268                                  ;-----------------------------------------------------------------------------------------------------------------------
  1269                                  ;
  1270                                  ;	Routine:	LoaderExit
  1271                                  ;
  1272                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1273                                  ;
  1274                                  ;	In:		DS:SI	string address
  1275                                  ;
  1276                                  ;-----------------------------------------------------------------------------------------------------------------------
  1277                                  LoaderExit		call	PutTTYString					;display error message
  1278                                  ;
  1279                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1280                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1281                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1282                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1283                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1284                                  ;
  1285                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1286                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1287                                  			jnz	.40						;exit if key pressed
  1288                                  			sti							;enable maskable interrupts
  1289                                  			hlt							;wait for interrupt
  1290                                  			jmp	.30						;repeat until keypress
  1291                                  ;
  1292                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1293                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1294                                  ;	HLT until the system resets.
  1295                                  ;
  1296                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1297                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1298                                  .50			sti							;enable maskable interrupts
  1299                                  			hlt							;stop until reset, int, nmi
  1300                                  			jmp	.50						;loop until restart kicks in
  1301                                  ;-----------------------------------------------------------------------------------------------------------------------
  1302                                  ;
  1303                                  ;	Routine:	GetCPUType
  1304                                  ;
  1305                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1306                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1307                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1308                                  ;
  1309                                  ;	Output:		AX	0 = 808x, v20, etc.
  1310                                  ;				1 = 80186
  1311                                  ;				2 = 80286
  1312                                  ;				3 = 80386
  1313                                  ;
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  GetCPUType		mov	al,1						;AL = 1
  1316                                  			mov	cl,32						;shift count
  1317                                  			shr	al,cl						;try a 32-bit shift
  1318                                  			or	al,al						;did the shift happen?
  1319                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1320                                  			cpu	186
  1321                                  			push	sp						;save stack pointer
  1322                                  			pop	cx						;...into cx
  1323                                  			cmp	cx,sp						;did sp decrement before push?
  1324                                  			jne	.10						;yes, cpu is 80186
  1325                                  			cpu	286
  1326                                  			inc	ax						;AX = 2
  1327                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1328                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1329                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1330                                  			jz	.10						;yes, cpu is 80286
  1331                                  			inc	ax						;AX = 3
  1332                                  .10			ret							;return
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334                                  ;
  1335                                  ;	Routine:	PutTTYString
  1336                                  ;
  1337                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1338                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1339                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1340                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1341                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1342                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1343                                  ;			registers and flags unless used to indicate return status.
  1344                                  ;
  1345                                  ;	In:		DS:SI	address of string
  1346                                  ;
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348                                  PutTTYString		cld							;forward strings
  1349                                  			lodsb							;load next byte at DS:SI in AL
  1350                                  			test	al,al						;end of string?
  1351                                  			jz	.10						;... yes, exit our loop
  1352                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1353                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1354                                  			jmp	PutTTYString					;repeat until done
  1355                                  .10			ret							;return
  1356                                  ;-----------------------------------------------------------------------------------------------------------------------
  1357                                  ;
  1358                                  ;	Loader Data
  1359                                  ;
  1360                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1361                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1362                                  ;
  1363                                  ;-----------------------------------------------------------------------------------------------------------------------
  1364                                  			align	2
  1365                                  cwLoaderTSS		dw	0068h						;TSS selector
  1366                                  cwLoaderLDT		dw	0060h						;LDT selector
  1367                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1368                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1369                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1370                                  			db	"or later processor.",13,10,
  1371                                  			db	"Please press any key to restart the "
  1372                                  			db	"computer.",13,10,0
  1373                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1374                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1375                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1376                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1377                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1378                                  			db	055h,0AAh					;end of sector signature
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  ;
  1381                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1382                                  ;
  1383                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1384                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1385                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1386                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1387                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1388                                  ;
  1389                                  ;-----------------------------------------------------------------------------------------------------------------------
  1390                                  ;-----------------------------------------------------------------------------------------------------------------------
  1391                                  ;
  1392                                  ;	Tables
  1393                                  ;
  1394                                  ;-----------------------------------------------------------------------------------------------------------------------
  1395                                  ;-----------------------------------------------------------------------------------------------------------------------
  1396                                  ;
  1397                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1398                                  ;
  1399                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1400                                  ;	first descriptor must be all nulls.
  1401                                  ;
  1402                                  ;	6   5         4         3         2         1         0
  1403                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1404                                  ;	----------------------------------------------------------------
  1405                                  ;	h......hffffmmmma......ab......................bn..............n
  1406                                  ;	00000000			all areas have base addresses below 2^24
  1407                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1408                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1409                                  ;	            1001		present, ring-0, selector
  1410                                  ;
  1411                                  ;	h...h	hi-order base address (bits 24-31)
  1412                                  ;	ffff	flags
  1413                                  ;	mmmm	hi-order limit (bits 16-19)
  1414                                  ;	a...a	access
  1415                                  ;	b...b	lo-order base address (bits 0-23)
  1416                                  ;	n...n	lo-order limit (bits 0-15)
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  section			gdt							;global descriptor table
  1420                                  			dq	0000000000000000h				;00 required null selector
  1421                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1422                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1423                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1424                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1425                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1426                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1427                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1428                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1429                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1430                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1431                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1432                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1433                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1434                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1435                                  ;-----------------------------------------------------------------------------------------------------------------------
  1436                                  ;
  1437                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1438                                  ;
  1439                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1440                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1441                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1442                                  ;
  1443                                  ;	6   5         4         3         2         1         0
  1444                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1445                                  ;	----------------------------------------------------------------
  1446                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1447                                  ;
  1448                                  ;	h...h	high-order offset (bits 16-31)
  1449                                  ;	P	present (0=unused interrupt)
  1450                                  ;	zz	descriptor privilege level
  1451                                  ;	S	storage segment (must be zero for IDT)
  1452                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1453                                  ;	S...S	handling code selector in GDT
  1454                                  ;	l...l	lo-order offset (bits 0-15)
  1455                                  ;
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  section			idt							;interrupt descriptor table
  1458                                  			mint	dividebyzero					;00 divide by zero
  1459                                  			mint	singlestep					;01 single step
  1460                                  			mint	nmi						;02 non-maskable
  1461                                  			mint	break						;03 break
  1462                                  			mint	into						;04 into
  1463                                  			mint	bounds						;05 bounds
  1464                                  			mint	badopcode					;06 bad op code
  1465                                  			mint	nocoproc					;07 no coprocessor
  1466                                  			mint	doublefault					;08 double-fault
  1467                                  			mint	operand						;09 operand
  1468                                  			mint	badtss						;0A bad TSS
  1469                                  			mint	notpresent					;0B not-present
  1470                                  			mint	stacklimit					;0C stack limit
  1471                                  			mint	protection					;0D general protection fault
  1472                                  			mint	int14						;0E (reserved)
  1473                                  			mint	int15						;0F (reserved)
  1474                                  			mint	coproccalc					;10 (reserved)
  1475                                  			mint	int17						;11 (reserved)
  1476                                  			mint	int18						;12 (reserved)
  1477                                  			mint	int19						;13 (reserved)
  1478                                  			mint	int20						;14 (reserved)
  1479                                  			mint	int21						;15 (reserved)
  1480                                  			mint	int22						;16 (reserved)
  1481                                  			mint	int23						;17 (reserved)
  1482                                  			mint	int24						;18 (reserved)
  1483                                  			mint	int25						;19 (reserved)
  1484                                  			mint	int26						;1A (reserved)
  1485                                  			mint	int27						;1B (reserved)
  1486                                  			mint	int28						;1C (reserved)
  1487                                  			mint	int29						;1D (reserved)
  1488                                  			mint	int30						;1E (reserved)
  1489                                  			mint	int31						;1F (reserved)
  1490                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1491                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1492                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1493                                  			mtrap	com2						;23 IRQ3 com2
  1494                                  			mtrap	com1						;24 IRQ4 com1
  1495                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1496                                  			mtrap	diskette					;26 IRQ6 diskette
  1497                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1498                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1499                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1500                                  			mtrap	irq10						;2A IRQA (reserved)
  1501                                  			mtrap	irq11						;2B IRQB (reserved)
  1502                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1503                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1504                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1505                                  			mtrap	irq15						;2F IRQF (reserved)
  1506                                  			mtrap	svc						;30 OS services
  1507                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  ;
  1510                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1511                                  ;
  1512                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1513                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1514                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1515                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1516                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1517                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1518                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1519                                  ;
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  section			kernel	vstart=0h					;data offsets relative to 0
  1522                                  			cpu	386						;allow 80386 instructions
  1523                                  			bits	32						;this is 32-bit code
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;	CPU Interrupt Handlers
  1527                                  ;
  1528                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1529                                  ;
  1530                                  ;-----------------------------------------------------------------------------------------------------------------------
  1531                                  			menter	dividebyzero					;divide by zero
  1532                                  			push	0						;
  1533                                  			jmp	intcpu						;
  1534                                  			menter	singlestep					;single step
  1535                                  			push	1						;
  1536                                  			jmp	intcpu						;
  1537                                  			menter	nmi						;non-maskable
  1538                                  			push	2						;
  1539                                  			jmp	intcpu						;
  1540                                  			menter	break						;break
  1541                                  			push	3						;
  1542                                  			jmp	intcpu						;
  1543                                  			menter	into						;into
  1544                                  			push	4						;
  1545                                  			jmp	intcpu						;
  1546                                  			menter	bounds						;bounds
  1547                                  			push	5						;
  1548                                  			jmp	intcpu						;
  1549                                  			menter	badopcode					;bad opcode interrupt
  1550                                  			push	6						;
  1551                                  			jmp	intcpu						;
  1552                                  			menter	nocoproc					;no coprocessor interrupt
  1553                                  			push	7						;
  1554                                  			jmp	intcpu						;
  1555                                  			menter	doublefault					;doublefault interrupt
  1556                                  			push	8						;
  1557                                  			jmp	intcpu						;
  1558                                  			menter	operand						;operand interrupt
  1559                                  			push	9						;
  1560                                  			jmp	intcpu						;
  1561                                  			menter	badtss						;bad tss interrupt
  1562                                  			push	10						;
  1563                                  			jmp	intcpu						;
  1564                                  			menter	notpresent					;not present interrupt
  1565                                  			push	11						;
  1566                                  			jmp	intcpu						;
  1567                                  			menter	stacklimit					;stack limit interrupt
  1568                                  			push	12						;
  1569                                  			jmp	intcpu						;
  1570                                  			menter	protection					;protection fault interrupt
  1571                                  			push	13						;
  1572                                  			jmp	intcpu						;
  1573                                  			menter	int14						;(reserved)
  1574                                  			push	14						;
  1575                                  			jmp	intcpu						;
  1576                                  			menter	int15						;(reserved)
  1577                                  			push	15						;
  1578                                  			jmp	intcpu						;
  1579                                  			menter	coproccalc					;coprocessor calculation
  1580                                  			push	16						;
  1581                                  			jmp	intcpu						;
  1582                                  			menter	int17						;(reserved)
  1583                                  			push	17						;
  1584                                  			jmp	intcpu						;
  1585                                  			menter	int18						;(reserved)
  1586                                  			push	18						;
  1587                                  			jmp	intcpu						;
  1588                                  			menter	int19						;(reserved)
  1589                                  			push	19						;
  1590                                  			jmp	intcpu						;
  1591                                  			menter	int20						;(reserved)
  1592                                  			push	20						;
  1593                                  			jmp	intcpu						;
  1594                                  			menter	int21						;(reserved)
  1595                                  			push	21						;
  1596                                  			jmp	intcpu						;
  1597                                  			menter	int22						;(reserved)
  1598                                  			push	22						;
  1599                                  			jmp	intcpu						;
  1600                                  			menter	int23						;(reserved)
  1601                                  			push	23						;
  1602                                  			jmp	intcpu						;
  1603                                  			menter	int24						;(reserved)
  1604                                  			push	24						;
  1605                                  			jmp	intcpu						;
  1606                                  			menter	int25						;(reserved)
  1607                                  			push	25						;
  1608                                  			jmp	intcpu						;
  1609                                  			menter	int26						;(reserved)
  1610                                  			push	26						;
  1611                                  			jmp	intcpu						;
  1612                                  			menter	int27						;(reserved)
  1613                                  			push	27						;
  1614                                  			jmp	intcpu						;
  1615                                  			menter	int28						;(reserved)
  1616                                  			push	28						;
  1617                                  			jmp	intcpu						;
  1618                                  			menter	int29						;(reserved)
  1619                                  			push	29						;
  1620                                  			jmp	intcpu						;
  1621                                  			menter	int30						;(reserved)
  1622                                  			push	30						;
  1623                                  			jmp	intcpu						;
  1624                                  			menter	int31						;(reserved)
  1625                                  			push	31						;
  1626                                  intcpu			pop	eax						;
  1627                                  			iretd							;return
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                  ;
  1630                                  ;	Hardware Device Interupts
  1631                                  ;
  1632                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1633                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1634                                  ;	(BX=2028h).
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;	IRQ0	Clock Tick Interrupt
  1640                                  ;
  1641                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1642                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1643                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1644                                  ;
  1645                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1646                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1647                                  ;
  1648                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1649                                  ;	zero, the floppy disk motors are turned off.
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  			menter	clocktick					;clock tick interrupt
  1653                                  			push	eax						;save modified regs
  1654                                  			push	edx						;
  1655                                  			push	ds						;
  1656                                  			push	ESELDAT						;load OS data selector ...
  1657                                  			pop	ds						;... into data segment register
  1658                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1659                                  			inc	eax						;increment clock ticks
  1660                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1661                                  			jb	irq0.10						;no, skip ahead
  1662                                  			inc	byte [wbClockDays]				;increment clock days
  1663                                  			xor	eax,eax						;reset clock ticks
  1664                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1665                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1666                                  			je	irq0.20						;yes, skip ahead
  1667                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1668                                  			jnz	irq0.20						;skip ahead if non-zero
  1669                                  			sti							;enable maskable interrupts
  1670                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1671                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1672                                  			in	al,dx						;FDC main status byte
  1673                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1674                                  			jnz	irq0.15						;wait while busy
  1675                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1676                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1677                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1678                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1679                                  			out	dx,al						;turn motor off
  1680                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1681                                  			pop	ds						;restore modified regs
  1682                                  			pop	edx						;
  1683                                  			pop	eax						;
  1684                                  			iretd							;return
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;	IRQ1	Keyboard Interrupt
  1688                                  ;
  1689                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1690                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1691                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1692                                  ;	ALL modified registers upon return.
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  			menter	keyboard					;keyboard interrrupt
  1696                                  			push	eax						;save non-volatile regs
  1697                                  			push	ebx						;
  1698                                  			push	ecx						;
  1699                                  			push	esi						;
  1700                                  			push	ds						;
  1701                                  			push	ESELDAT						;load OS data selector ...
  1702                                  			pop	ds						;... into data segment register
  1703                                  			xor	al,al						;zero
  1704                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1705                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1706                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1707                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1708                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1709                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1710                                  			mov	al,' '						;space
  1711                                  			mov	[wbConsoleChar],al				;set character to space
  1712                                  			mov	al,EKEYTIMEOUT					;controller timeout flag
  1713                                  			not	al						;controller timeout mask
  1714                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1715                                  			mov	bl,[wbConsoleShift]				;shift flags
  1716                                  			mov	bh,[wbConsoleLock]				;lock flags
  1717                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1718                                  			jz	irq1.140					;yes, skip ahead
  1719                                  			in	al,EKEYPORTDATA					;read scan code 0
  1720                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1721                                  			mov	ah,al						;copy scan code 0
  1722                                  			mov	al,EKEYSHIFTLEFT				;left shift flag
  1723                                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1724                                  			je	irq1.30						;yes, set flag
  1725                                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1726                                  			je	irq1.40						;yes, reset flag
  1727                                  			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1728                                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1729                                  			je	irq1.30						;yes, set flag
  1730                                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1731                                  			je	irq1.40						;yes, reset flag
  1732                                  			mov	al,EKEYCTRLLEFT					;left control flag
  1733                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1734                                  			je	irq1.30						;yes, set flag
  1735                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1736                                  			je	irq1.40						;yes, reset flag
  1737                                  			mov	al,EKEYALTLEFT					;left alt flag
  1738                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1739                                  			je	irq1.30						;yes, set flag
  1740                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1741                                  			je	irq1.40						;yes, reset flag
  1742                                  			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1743                                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1744                                  			je	irq1.50						;yes, toggle lamps and flags
  1745                                  			mov	al,EKEYLOCKNUM					;num-lock flag
  1746                                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1747                                  			je	irq1.50						;yes, toggle lamps and flags
  1748                                  			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1749                                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1750                                  			je	irq1.50						;yes, toggle lamps and flags
  1751                                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1752                                  			jne	irq1.70 					;no, skip ahead
  1753                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1754                                  			jz	irq1.140					;yes, skip ahead
  1755                                  			in	al,EKEYPORTDATA					;read scan code 1
  1756                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1757                                  			mov	ah,al						;copy scan code 1
  1758                                  			mov	al,EKEYCTRLRIGHT				;right control flag
  1759                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1760                                  			je	irq1.30						;yes, set flag
  1761                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1762                                  			je	irq1.40						;yes, reset flag
  1763                                  			mov	al,EKEYALTRIGHT					;right alt flag
  1764                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1765                                  			je	irq1.30						;yes, set flag
  1766                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1767                                  			je	irq1.40						;yes, reset flag
  1768                                  			cmp	ah,EKEYSLASH					;slash down code?
  1769                                  			je	irq1.80						;yes, skip ahead
  1770                                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1771                                  			je	irq1.80						;yes, skip ahead
  1772                                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1773                                  			je	irq1.10						;yes, continue
  1774                                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1775                                  			jne	irq1.20						;no, skip ahead
  1776                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1777                                  			jz	irq1.140					;yes, skip ahead
  1778                                  			in	al,EKEYPORTDATA					;read scan code 2
  1779                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1780                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1781                                  			jz	irq1.140					;yes, skip ahead
  1782                                  			in	al,EKEYPORTDATA					;read scan code 3
  1783                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1784                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1785                                  irq1.30			or	bl,al						;set shift flag
  1786                                  			jmp	irq1.60						;skip ahead
  1787                                  irq1.40			not	al						;convert flag to mask
  1788                                  			and	bl,al						;reset shift flag
  1789                                  			jmp	irq1.60						;skip ahead
  1790                                  irq1.50			xor	bh,al						;toggle lock flag
  1791                                  			call	SetKeyboardLamps				;update keyboard lamps
  1792                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1793                                  			mov	[wbConsoleLock],bh				;save lock flags
  1794                                  			call	PutConsoleOIAShift				;update OIA indicators
  1795                                  			jmp	irq1.150					;finish keyboard handling
  1796                                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1797                                  			jne	irq1.80						;no continue
  1798                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1799                                  			jz	irq1.140					;yes, skip ahead
  1800                                  			in	al,EKEYPORTDATA					;read scan code 1
  1801                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1802                                  			mov	ah,al						;copy scan code 1
  1803                                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1804                                  			jne	irq1.150					;no, finish keyboard handling
  1805                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1806                                  			jz	irq1.140					;yes, skip ahead
  1807                                  			in	al,EKEYPORTDATA					;read scan code 2
  1808                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1809                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1810                                  			jz	irq1.140					;yes, skip ahead
  1811                                  			in	al,EKEYPORTDATA					;read scan code 3
  1812                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1813                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1814                                  			jz	irq1.140					;yes, skip ahead
  1815                                  			in	al,EKEYPORTDATA					;read scan code 4
  1816                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1817                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1818                                  			jz	irq1.140					;yes, skip ahead
  1819                                  			in	al,EKEYPORTDATA					;read scan code 5
  1820                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1821                                  			jmp	irq1.150					;continue
  1822                                  irq1.80			xor	al,al						;assume no ASCII translation
  1823                                  			test	ah,EKEYUP					;release code?
  1824                                  			jnz	irq1.110					;yes, skip ahead
  1825                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  1826                                  			test	bl,EKEYSHIFT					;either shift key down?
  1827                                  			jz	irq1.90						;no, skip ahead
  1828                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  1829                                  irq1.90			movzx	ecx,ah						;scan code offset
  1830                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  1831                                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1832                                  			jz	irq1.100					;no skip ahead
  1833                                  			mov	cl,al						;copy ASCII code
  1834                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1835                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1836                                  			jb	irq1.100					;yes, skip ahead
  1837                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1838                                  			ja	irq1.100					;yes, skip ahead
  1839                                  			xor	al,EASCIICASE					;switch case
  1840                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1841                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1842                                  			test	ah,EKEYUP					;release scan-code?
  1843                                  			jz	irq1.120					;no, skip ahead
  1844                                  			mov	edx,EMSGKEYUP					;key-up event
  1845                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  1846                                  			or	edx,eax						;msg id and codes
  1847                                  			xor	ecx,ecx						;null param
  1848                                  			push	eax						;save codes
  1849                                  			call	PutMessage					;put message to console
  1850                                  			pop	eax						;restore codes
  1851                                  			test	al,al						;ASCII translation?
  1852                                  			jz	irq1.130					;no, skip ahead
  1853                                  			mov	edx,EMSGKEYCHAR					;key-character event
  1854                                  			and	eax,0FFFFh					;clear high-order word
  1855                                  			or	edx,eax						;msg id and codes
  1856                                  			xor	ecx,ecx						;null param
  1857                                  			call	PutMessage					;put message to console
  1858                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  1859                                  irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1860                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  1861                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  1862                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1863                                  			pop	ds						;restore non-volatile regs
  1864                                  			pop	esi						;
  1865                                  			pop	ecx						;
  1866                                  			pop	ebx						;
  1867                                  			pop	eax						;
  1868                                  			iretd							;return
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                  ;	Scan-Code to ASCII Translation Tables
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1873                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1874                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1875                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1876                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1877                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1878                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1879                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1880                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1881                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1882                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1883                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1884                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1885                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1886                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1887                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1888                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1889                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1890                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1891                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1892                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1893                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1894                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1895                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1896                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1897                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1898                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1899                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1900                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1901                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1902                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1903                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  			menter	iochannel					;secondary 8259A cascade
  1910                                  			push	eax						;
  1911                                  			jmp	hwint						;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1915                                  ;
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  			menter	com2						;serial port 2 interrupt
  1918                                  			push	eax						;
  1919                                  			jmp	hwint						;
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                  			menter	com1						;serial port 1 interrupt
  1926                                  			push	eax						;
  1927                                  			jmp	hwint						;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                  ;
  1930                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1931                                  ;
  1932                                  ;-----------------------------------------------------------------------------------------------------------------------
  1933                                  			menter	lpt2						;parallel port 2 interrupt
  1934                                  			push	eax						;
  1935                                  			jmp	hwint						;
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;	IRQ6	Diskette Hardware Interrupt
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  			menter	diskette					;floppy disk interrupt
  1942                                  			push	eax						;save non-volatile regs
  1943                                  			push	ds						;
  1944                                  			push	ESELDAT						;load OS data selector ...
  1945                                  			pop	ds						;... into DS register
  1946                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1947                                  			or	al,10000000b					;set IRQ flag
  1948                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1949                                  			pop	ds						;restore non-volatile regs
  1950                                  			jmp	hwint						;end primary PIC interrupt
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  ;
  1953                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1954                                  ;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                  			menter	lpt1						;parallel port 1 interrupt
  1957                                  			push	eax						;
  1958                                  			jmp	hwint						;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                  ;
  1961                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  			menter	rtclock						;real-time clock interrupt
  1965                                  			push	eax						;
  1966                                  			jmp	hwwint						;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  ;
  1969                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1970                                  ;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  			menter	retrace						;CGA vertical retrace interrupt
  1973                                  			push	eax						;
  1974                                  			jmp	hwwint						;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                  ;
  1977                                  ;	IRQ10	Reserved Hardware Interrupt
  1978                                  ;
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  			menter	irq10						;reserved
  1981                                  			push	eax						;
  1982                                  			jmp	hwwint						;
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  ;
  1985                                  ;	IRQ11	Reserved Hardware Interrupt
  1986                                  ;
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                  			menter	irq11						;reserved
  1989                                  			push	eax						;
  1990                                  			jmp	hwwint						;
  1991                                  ;-----------------------------------------------------------------------------------------------------------------------
  1992                                  ;
  1993                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1994                                  ;
  1995                                  ;-----------------------------------------------------------------------------------------------------------------------
  1996                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1997                                  			push	eax						;
  1998                                  			jmp	hwwint						;
  1999                                  ;-----------------------------------------------------------------------------------------------------------------------
  2000                                  ;
  2001                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2002                                  ;
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                  			menter	coprocessor					;coprocessor interrupt
  2005                                  			push	eax						;
  2006                                  			jmp	hwwint						;
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                  			menter	fixeddisk					;fixed disk interrupt
  2013                                  			push	eax						;
  2014                                  			jmp	hwwint						;
  2015                                  ;-----------------------------------------------------------------------------------------------------------------------
  2016                                  ;
  2017                                  ;	IRQ15	Reserved Hardware Interrupt
  2018                                  ;
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020                                  			menter	irq15						;reserved
  2021                                  			push	eax						;save modified regs
  2022                                  ;-----------------------------------------------------------------------------------------------------------------------
  2023                                  ;
  2024                                  ;	Exit from hardware interrupt
  2025                                  ;
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2028                                  			jmp	hwint90						;skip ahead
  2029                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2030                                  hwint90			pop	eax						;restore modified regs
  2031                                  			iretd							;return from interrupt
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  ;
  2034                                  ;	INT 30h Operating System Software Service Interrupt
  2035                                  ;
  2036                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2037                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2038                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2039                                  ;	the entry address of the specific function from a table.
  2040                                  ;
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  			menter	svc
  2043                                  			cmp	al,maxtsvc					;is our function out of range?
  2044                                  			jae	svc90						;yes, skip ahead
  2045                                  			movzx	eax,al						;function
  2046                                  			shl	eax,2						;offset into table
  2047                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2048                                  svc90			iretd							;return from interrupt
  2049                                  ;-----------------------------------------------------------------------------------------------------------------------
  2050                                  ;
  2051                                  ;	Service Request Table
  2052                                  ;
  2053                                  ;
  2054                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2055                                  ;
  2056                                  ;-----------------------------------------------------------------------------------------------------------------------
  2057                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  2058                                  			tsvce	GetConsoleString				;get string input
  2059                                  			tsvce	ClearConsoleScreen				;clear console screen
  2060                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2061                                  			tsvce	UpperCaseString					;upper-case string
  2062                                  			tsvce	CompareMemory					;compare memory
  2063                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2064                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2065                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2066                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2067                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2068                                  			tsvce	ByteToDecimalString				;convert byte to decimal string
  2069                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2070                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2071                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2072                                  ;-----------------------------------------------------------------------------------------------------------------------
  2073                                  ;
  2074                                  ;	Service Request Macros
  2075                                  ;
  2076                                  ;	These macros provide positional parameterization of service request calls.
  2077                                  ;
  2078                                  ;-----------------------------------------------------------------------------------------------------------------------
  2079                                  %macro			putConsoleString 0
  2080                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2081                                  			int	_svc						;invoke OS service
  2082                                  %endmacro
  2083                                  %macro			putConsoleString 1
  2084                                  			mov	edx,%1						;EDX = string address
  2085                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2086                                  			int	_svc						;invoke OS service
  2087                                  %endmacro
  2088                                  %macro			getConsoleString 4
  2089                                  			mov	edx,%1						;EDX = buffer address
  2090                                  			mov	ecx,%2						;ECX = max characters
  2091                                  			mov	bh,%3						;BH = echo indicator
  2092                                  			mov	bl,%4						;BL = terminator
  2093                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2094                                  			int	_svc						;invoke OS service
  2095                                  %endmacro
  2096                                  %macro			clearConsoleScreen 0
  2097                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2098                                  			int	_svc						;invoke OS service
  2099                                  %endmacro
  2100                                  %macro			placeCursor 0
  2101                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2102                                  			int	_svc						;invoke OS service
  2103                                  %endmacro
  2104                                  %macro			upperCaseString 0
  2105                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2106                                  			int	_svc						;invoke OS service
  2107                                  %endmacro
  2108                                  %macro			compareMemory 0
  2109                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2110                                  			int	_svc						;invoke OS service
  2111                                  %endmacro
  2112                                  %macro			resetSystem 0
  2113                                  			mov	al,eResetSystem					;AL = system reset fn.
  2114                                  			int	_svc						;invoke OS service
  2115                                  %endmacro
  2116                                  %macro			putDateString 0
  2117                                  			mov	al,ePutDateString				;function code
  2118                                  			int	_svc						;invoke OS service
  2119                                  %endmacro
  2120                                  %macro			putDateString 2
  2121                                  			mov	ebx,%1						;DATETIME addr
  2122                                  			mov	edx,%2						;output buffer addr
  2123                                  			mov	al,ePutDateString				;function code
  2124                                  			int	_svc						;invoke OS service
  2125                                  %endmacro
  2126                                  %macro			putTimeString 0
  2127                                  			mov	al,ePutTimeString				;function code
  2128                                  			int	_svc						;invoke OS service
  2129                                  %endmacro
  2130                                  %macro			putTimeString 2
  2131                                  			mov	ebx,%1						;DATETIME addr
  2132                                  			mov	edx,%2						;output buffer addr
  2133                                  			mov	al,ePutTimeString				;function code
  2134                                  			int	_svc						;invoke OS service
  2135                                  %endmacro
  2136                                  %macro			readRealTimeClock 0
  2137                                  			mov	al,eReadRealTimeClock				;function code
  2138                                  			int	_svc						;invoke OS service
  2139                                  %endmacro
  2140                                  %macro			readRealTimeClock 1
  2141                                  			mov	ebx,%1						;DATETIME addr
  2142                                  			mov	al,eReadRealTimeClock				;function code
  2143                                  			int	_svc						;invoke OS service
  2144                                  %endmacro
  2145                                  %macro			unsignedToDecimalString 0
  2146                                  			mov	al,eUnsignedToDecimalString			;AL = function code
  2147                                  			int	_svc						;invoke OS service
  2148                                  %endmacro
  2149                                  %macro			byteToDecimalString 0
  2150                                  			mov	al,eByteToDecimalString				;AL = function code
  2151                                  			int	_svc						;invoke OS service
  2152                                  %endmacro
  2153                                  %macro			unsignedToHexadecimal 0
  2154                                  			mov	al,eUnsignedToHexadecimal			;AL = unsigned to hexademcial fn.
  2155                                  			int	_svc						;invoke OS service
  2156                                  %endmacro
  2157                                  %macro			hexadecimalToUnsigned 0
  2158                                  			mov	al,eHexadecimalToUnsigned			;AL = hex to unsigned fn.
  2159                                  			int	_svc						;invoke OS service
  2160                                  %endmacro
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  ;
  2163                                  ;	Kernel Function Library
  2164                                  ;
  2165                                  ;-----------------------------------------------------------------------------------------------------------------------
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167                                  ;
  2168                                  ;	Date and Time Helper Routines
  2169                                  ;
  2170                                  ;	PutDateString
  2171                                  ;	PutTimeString
  2172                                  ;
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                  ;
  2176                                  ;	Routine:	PutDateString
  2177                                  ;
  2178                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2179                                  ;			structure at ds:ebx.
  2180                                  ;
  2181                                  ;	In:		DS:EBX	DATETIME address
  2182                                  ;			DS:EDX	output buffer address
  2183                                  ;
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  PutDateString		push	ecx						;save non-volatile regs
  2186                                  			push	edi						;
  2187                                  			push	es						;
  2188                                  			push	ds						;store data selector ...
  2189                                  			pop	es						;... in extra segment reg
  2190                                  			mov	edi,edx						;output buffer address
  2191                                  			mov	cl,10						;divisor
  2192                                  			mov	edx,002f3030h					;ASCIIZ "00/" (reversed)
  2193                                  			movzx	eax,byte [ebx+DATETIME.month]			;month
  2194                                  			div	cl						;ah = rem; al = quotient
  2195                                  			or	eax,edx						;apply ASCII zones and delimiter
  2196                                  			cld							;forward strings
  2197                                  			stosd							;store "mm/"nul
  2198                                  			dec	edi						;address of terminator
  2199                                  			movzx	eax,byte [ebx+DATETIME.day]			;day
  2200                                  			div	cl						;ah = rem; al = quotient
  2201                                  			or	eax,edx						;apply ASCII zones and delimiter
  2202                                  			stosd							;store "dd/"nul
  2203                                  			dec	edi						;address of terminator
  2204                                  			movzx	eax,byte [ebx+DATETIME.century]			;century
  2205                                  			div	cl						;ah = rem; al = quotient
  2206                                  			or	eax,edx						;apply ASCII zones and delimiter
  2207                                  			stosd							;store "cc/"null
  2208                                  			dec	edi						;address of terminator
  2209                                  			dec	edi						;address of delimiter
  2210                                  			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2211                                  			div	cl						;ah = rem; al = quotient
  2212                                  			or	eax,edx						;apply ASCII zones and delimiter
  2213                                  			stosb							;store quotient
  2214                                  			mov	al,ah						;remainder
  2215                                  			stosb							;store remainder
  2216                                  			xor	al,al						;null terminator
  2217                                  			stosb							;store terminator
  2218                                  			pop	es						;restore non-volatile regs
  2219                                  			pop	edi						;
  2220                                  			pop	ecx						;
  2221                                  			ret							;return
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                  ;
  2224                                  ;	Routine:	PutTimeString
  2225                                  ;
  2226                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  2227                                  ;			structure at ds:ebx.
  2228                                  ;
  2229                                  ;	In:		DS:EBX	DATETIME address
  2230                                  ;			DS:EDX	output buffer address
  2231                                  ;
  2232                                  ;-----------------------------------------------------------------------------------------------------------------------
  2233                                  PutTimeString		push	ecx						;save non-volatile regs
  2234                                  			push	edi						;
  2235                                  			push	es						;
  2236                                  			push	ds						;store data selector ...
  2237                                  			pop	es						;... in extra segment reg
  2238                                  			mov	edi,edx						;output buffer address
  2239                                  			mov	cl,10						;divisor
  2240                                  			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  2241                                  			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  2242                                  			div	cl						;ah = rem; al = quotient
  2243                                  			or	eax,edx						;apply ASCII zones and delimiter
  2244                                  			cld							;forward strings
  2245                                  			stosd							;store "mm/"nul
  2246                                  			dec	edi						;address of terminator
  2247                                  			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  2248                                  			div	cl						;ah = rem; al = quotient
  2249                                  			or	eax,edx						;apply ASCII zones and delimiter
  2250                                  			stosd							;store "dd/"nul
  2251                                  			dec	edi						;address of terminator
  2252                                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  2253                                  			div	cl						;ah = rem; al = quotient
  2254                                  			or	eax,edx						;apply ASCII zones and delimiter
  2255                                  			stosb							;store quotient
  2256                                  			mov	al,ah						;remainder
  2257                                  			stosb							;store remainder
  2258                                  			xor	al,al						;null terminator
  2259                                  			stosb							;store terminator
  2260                                  			pop	es						;restore non-volatile regs
  2261                                  			pop	edi						;
  2262                                  			pop	ecx						;
  2263                                  			ret							;return
  2264                                  ;-----------------------------------------------------------------------------------------------------------------------
  2265                                  ;
  2266                                  ;	String Helper Routines
  2267                                  ;
  2268                                  ;	UpperCaseString
  2269                                  ;	CompareMemory
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  ;-----------------------------------------------------------------------------------------------------------------------
  2273                                  ;
  2274                                  ;	Routine:	UpperCaseString
  2275                                  ;
  2276                                  ;	Description:	This routine places all characters in the given string to upper case.
  2277                                  ;
  2278                                  ;	In:		DS:EDX	string address
  2279                                  ;
  2280                                  ;	Out:		EDX	string address
  2281                                  ;
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283                                  UpperCaseString		push	esi						;save non-volatile regs
  2284                                  			mov	esi,edx						;string address
  2285                                  			cld							;forward strings
  2286                                  .10			lodsb							;string character
  2287                                  			test	al,al						;null?
  2288                                  			jz	.20						;yes, skip ahead
  2289                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2290                                  			jb	.10						;no, continue
  2291                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2292                                  			ja	.10						;no, continue
  2293                                  			and	al,EASCIICASEMASK				;mask for upper case
  2294                                  			mov	[esi-1],al					;upper character
  2295                                  			jmp	.10						;continue
  2296                                  .20			pop	esi						;restore non-volatile regs
  2297                                  			ret							;return
  2298                                  ;-----------------------------------------------------------------------------------------------------------------------
  2299                                  ;
  2300                                  ;	Routine:	CompareMemory
  2301                                  ;
  2302                                  ;	Description:	This routine compares two byte arrays.
  2303                                  ;
  2304                                  ;	In:		DS:EDX	first source address
  2305                                  ;			DS:EBX	second source address
  2306                                  ;			ECX	comparison length
  2307                                  ;
  2308                                  ;	Out:		EDX	first source address
  2309                                  ;			EBX	second source address
  2310                                  ;			ECX	0	array 1 = array 2
  2311                                  ;				<0	array 1 < array 2
  2312                                  ;				>0	array 1 > array 2
  2313                                  ;
  2314                                  ;-----------------------------------------------------------------------------------------------------------------------
  2315                                  CompareMemory		push	esi						;save non-volatile regs
  2316                                  			push	edi						;
  2317                                  			push	es						;
  2318                                  			push	ds						;copy DS
  2319                                  			pop	es						;... to ES
  2320                                  			mov	esi,edx						;first source address
  2321                                  			mov	edi,ebx						;second source address
  2322                                  			cld							;forward strings
  2323                                  			rep	cmpsb						;compare bytes
  2324                                  			mov	al,0						;default result
  2325                                  			jz	.10						;branch if arrays equal
  2326                                  			mov	al,1						;positive result
  2327                                  			jnc	.10						;branch if target > source
  2328                                  			mov	al,-1						;negative result
  2329                                  .10			movsx	ecx,al						;extend sign
  2330                                  			pop	es						;restore regs
  2331                                  			pop	edi						;
  2332                                  			pop	esi						;
  2333                                  			ret							;return
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;	Console Helper Routines
  2337                                  ;
  2338                                  ;	PutConsoleString
  2339                                  ;	GetConsoleString
  2340                                  ;	GetConsoleChar
  2341                                  ;	Yield
  2342                                  ;	PreviousConsoleColumn
  2343                                  ;	NextConsoleColumn
  2344                                  ;	FirstConsoleColumn
  2345                                  ;	NextConsoleRow
  2346                                  ;	PutConsoleChar
  2347                                  ;	PutConsoleOIAShift
  2348                                  ;	PutConsoleOIAChar
  2349                                  ;	PutConsoleHexByte
  2350                                  ;
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  ;
  2354                                  ;	Routine:	PutConsoleString
  2355                                  ;
  2356                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2357                                  ;			console position as needed.
  2358                                  ;
  2359                                  ;	In:		EDX	source address
  2360                                  ;			DS	OS data selector
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                  PutConsoleString	push	esi						;save non-volatile regs
  2364                                  			mov	esi,edx						;source address
  2365                                  			cld							;forward strings
  2366                                  .10			lodsb							;ASCII character
  2367                                  			or	al,al						;end of string?
  2368                                  			jz	.40						;yes, skip ahead
  2369                                  			cmp	al,EASCIIRETURN					;carriage return?
  2370                                  			jne	.20						;no, skip ahead
  2371                                  			call	FirstConsoleColumn				;move to start of row
  2372                                  			jmp	.10						;next character
  2373                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2374                                  			jne	.30						;no, skip ahead
  2375                                  			call	NextConsoleRow					;move to next row
  2376                                  			jmp	.10						;next character
  2377                                  .30			call	PutConsoleChar					;output character to console
  2378                                  			call	NextConsoleColumn				;advance to next column
  2379                                  			jmp	.10						;next character
  2380                                  .40			pop	esi						;restore non-volatile regs
  2381                                  			ret							;return
  2382                                  ;-----------------------------------------------------------------------------------------------------------------------
  2383                                  ;
  2384                                  ;	Routine:	GetConsoleString
  2385                                  ;
  2386                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2387                                  ;
  2388                                  ;	Input:		DS:EDX	target buffer address
  2389                                  ;			ECX	maximum number of characters to accept
  2390                                  ;			BH	echo to terminal
  2391                                  ;			BL	terminating character
  2392                                  ;
  2393                                  ;-----------------------------------------------------------------------------------------------------------------------
  2394                                  GetConsoleString	push	ecx						;save non-volatile regs
  2395                                  			push	esi						;
  2396                                  			push	edi						;
  2397                                  			push	es						;
  2398                                  			push	ds						;load data segment selector ...
  2399                                  			pop	es						;... into extra segment register
  2400                                  			mov	edi,edx						;edi = target buffer
  2401                                  			push	ecx						;save maximum characters
  2402                                  			xor	al,al						;zero register
  2403                                  			cld							;forward strings
  2404                                  			rep	stosb						;zero fill buffer
  2405                                  			pop	ecx						;maximum characters
  2406                                  			mov	edi,edx						;edi = target buffer
  2407                                  			mov	esi,edx						;esi = target buffer
  2408                                  .10			jecxz	.50						;exit if max-length is zero
  2409                                  .20			call	GetConsoleChar					;al = next input char
  2410                                  			cmp	al,bl						;is this the terminator?
  2411                                  			je	.50						;yes, exit
  2412                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2413                                  			jne	.30						;no, skip ahead
  2414                                  			cmp	esi,edi						;at start of buffer?
  2415                                  			je	.20						;yes, get next character
  2416                                  			dec	edi						;backup target pointer
  2417                                  			mov	byte [edi],0					;zero previous character
  2418                                  			inc	ecx						;increment remaining chars
  2419                                  			test	bh,1						;echo to console?
  2420                                  			jz	.20						;no, get next character
  2421                                  			call	PreviousConsoleColumn				;backup console position
  2422                                  			mov	al,EASCIISPACE					;ASCII space
  2423                                  			call	PutConsoleChar					;write space to console
  2424                                  			call	PlaceCursor					;position the cursor
  2425                                  			jmp	.20						;get next character
  2426                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2427                                  			jb	.20						;no, get another character
  2428                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2429                                  			ja	.20						;no, get another character
  2430                                  			stosb							;store character in buffer
  2431                                  			test	bh,1						;echo to console?
  2432                                  			jz	.40						;no, skip ahead
  2433                                  			call	PutConsoleChar					;write character to console
  2434                                  			call	NextConsoleColumn				;advance console position
  2435                                  			call	PlaceCursor					;position the cursor
  2436                                  .40			dec	ecx						;decrement remaining chars
  2437                                  			jmp	.10						;next
  2438                                  .50			xor	al,al						;null
  2439                                  			stosb							;terminate buffer
  2440                                  			pop	es						;restore non-volatile regs
  2441                                  			pop	edi						;
  2442                                  			pop	esi						;
  2443                                  			pop	ecx						;
  2444                                  			ret							;return
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446                                  ;
  2447                                  ;	Routine:	GetConsoleChar
  2448                                  ;
  2449                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2450                                  ;
  2451                                  ;	Output:		AL	ASCII character code
  2452                                  ;			AH	keyboard scan code
  2453                                  ;
  2454                                  ;-----------------------------------------------------------------------------------------------------------------------
  2455                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2456                                  GetConsoleChar		call	GetMessage					;get the next message
  2457                                  			or	eax,eax						;do we have a message?
  2458                                  			jz	GetConsoleChar.10				;no, skip ahead
  2459                                  			push	eax						;save key codes
  2460                                  			and	eax,0FFFF0000h					;mask for message type
  2461                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2462                                  			pop	eax						;restore key codes
  2463                                  			jne	GetConsoleChar					;no, try again
  2464                                  			and	eax,0000ffffh					;mask for key codes
  2465                                  			ret							;return
  2466                                  ;-----------------------------------------------------------------------------------------------------------------------
  2467                                  ;
  2468                                  ;	Routine:	Yield
  2469                                  ;
  2470                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2471                                  ;
  2472                                  ;-----------------------------------------------------------------------------------------------------------------------
  2473                                  Yield			sti							;enable maskagle interrupts
  2474                                  			hlt							;halt until external interrupt
  2475                                  			ret							;return
  2476                                  ;-----------------------------------------------------------------------------------------------------------------------
  2477                                  ;
  2478                                  ;	Routine:	PreviousConsoleColumn
  2479                                  ;
  2480                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2481                                  ;			the column is set to the last position in the row and the row is decremented.
  2482                                  ;
  2483                                  ;	Input:		DS	OS data selector
  2484                                  ;
  2485                                  ;-----------------------------------------------------------------------------------------------------------------------
  2486                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2487                                  			or	al,al						;start of row?
  2488                                  			jnz	.10						;no, skip ahead
  2489                                  			mov	ah,[wbConsoleRow]				;current row
  2490                                  			or	ah,ah						;top of screen?
  2491                                  			jz	.20						;yes, exit with no change
  2492                                  			dec	ah						;decrement row
  2493                                  			mov	[wbConsoleRow],ah				;save row
  2494                                  			mov	al,ECONCOLS					;set maximum column
  2495                                  .10			dec	al						;decrement column
  2496                                  			mov	[wbConsoleColumn],al				;save column
  2497                                  .20			ret							;return
  2498                                  ;-----------------------------------------------------------------------------------------------------------------------
  2499                                  ;
  2500                                  ;	Routine:	NextConsoleColumn
  2501                                  ;
  2502                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2503                                  ;			incremented if the end of the current row is reached.
  2504                                  ;
  2505                                  ;	In:		DS	OS data selector
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2509                                  			inc	al						;increment column
  2510                                  			mov	[wbConsoleColumn],al				;save column
  2511                                  			cmp	al,ECONCOLS					;end of row?
  2512                                  			jb	.10						;no, skip ahead
  2513                                  			call	FirstConsoleColumn				;reset column to start of row
  2514                                  			call	NextConsoleRow					;line feed to next row
  2515                                  .10			ret							;return
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  ;
  2518                                  ;	Routine:	FirstConsoleColumn
  2519                                  ;
  2520                                  ;	Description:	This routine resets the console column to start of the row.
  2521                                  ;
  2522                                  ;	In:		DS	OS data selector
  2523                                  ;
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525                                  FirstConsoleColumn	xor	al,al						;zero column
  2526                                  			mov	[wbConsoleColumn],al				;save column
  2527                                  			ret							;return
  2528                                  ;-----------------------------------------------------------------------------------------------------------------------
  2529                                  ;
  2530                                  ;	Routine:	NextConsoleRow
  2531                                  ;
  2532                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2533                                  ;
  2534                                  ;	In:		DS	OS data selector
  2535                                  ;
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2538                                  			inc	al						;increment row
  2539                                  			mov	[wbConsoleRow],al				;save row
  2540                                  			cmp	al,ECONROWS					;end of screen?
  2541                                  			jb	.10						;no, skip ahead
  2542                                  			call	ScrollConsoleRow				;scroll up one row
  2543                                  			mov	al,[wbConsoleRow]				;row
  2544                                  			dec	al						;decrement row
  2545                                  			mov	[wbConsoleRow],al				;save row
  2546                                  .10			ret							;return
  2547                                  ;-----------------------------------------------------------------------------------------------------------------------
  2548                                  ;
  2549                                  ;	Routine:	PutConsoleChar
  2550                                  ;
  2551                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2552                                  ;
  2553                                  ;	In:		AL	ASCII character
  2554                                  ;			DS	OS data selector
  2555                                  ;
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2558                                  			push	es						;
  2559                                  			push	ESELCGA						;load CGA selector ...
  2560                                  			pop	es						;... into extra segment reg
  2561                                  			mov	cl,[wbConsoleColumn]				;column
  2562                                  			mov	ch,[wbConsoleRow]				;row
  2563                                  			call	SetConsoleChar					;put character at row, column
  2564                                  			pop	es						;restore non-volatile regs
  2565                                  			pop	ecx						;
  2566                                  			ret							;return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;
  2569                                  ;	Routine:	PutConsoleOIAShift
  2570                                  ;
  2571                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2572                                  ;
  2573                                  ;	In:		BL	shift flags
  2574                                  ;			BH	lock flags
  2575                                  ;			DS	OS data selector
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2579                                  			push	es						;
  2580                                  			push	ESELCGA						;load CGA selector ...
  2581                                  			pop	es						;... into ES register
  2582                                  			mov	ch,ECONOIAROW					;OIA row
  2583                                  			mov	al,EASCIISPACE					;space is default character
  2584                                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2585                                  			jz	.10						;no, skip ahead
  2586                                  			mov	al,'S'						;yes, indicate with 'S'
  2587                                  .10			mov	cl,14						;indicator column
  2588                                  			call	SetConsoleChar					;display ASCII character
  2589                                  			mov	al,EASCIISPACE					;ASCII space
  2590                                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2591                                  			jz	.20						;no, skip ahead
  2592                                  			mov	al,'S'						;yes, indicate with 'S'
  2593                                  .20			mov	cl,64						;indicator column
  2594                                  			call	SetConsoleChar					;display ASCII character
  2595                                  			mov	al,EASCIISPACE					;ASCII space
  2596                                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2597                                  			jz	.30						;no, skip ahead
  2598                                  			mov	al,'C'						;yes, indicate with 'C'
  2599                                  .30			mov	cl,15						;indicator column
  2600                                  			call	SetConsoleChar					;display ASCII character
  2601                                  			mov	al,EASCIISPACE					;ASCII space
  2602                                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2603                                  			jz	.40						;no, skip ahead
  2604                                  			mov	al,'C'						;yes, indicate with 'C'
  2605                                  .40			mov	cl,63						;indicator column
  2606                                  			call	SetConsoleChar					;display ASCII character
  2607                                  			mov	al,EASCIISPACE					;ASCII space
  2608                                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2609                                  			jz	.50						;no, skip ahead
  2610                                  			mov	al,'A'						;yes, indicate with 'A'
  2611                                  .50			mov	cl,16						;indicator column
  2612                                  			call	SetConsoleChar					;display ASCII character
  2613                                  			mov	al,EASCIISPACE					;ASCII space
  2614                                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2615                                  			jz	.60						;no, skip ahead
  2616                                  			mov	al,'A'						;yes, indicate with 'A'
  2617                                  .60			mov	cl,62						;indicator column
  2618                                  			call	SetConsoleChar					;display ASCII character
  2619                                  			mov	al,EASCIISPACE					;ASCII space
  2620                                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2621                                  			jz	.70						;no, skip ahead
  2622                                  			mov	al,'C'						;yes, indicate with 'C'
  2623                                  .70			mov	cl,78						;indicator column
  2624                                  			call	SetConsoleChar					;display ASCII character
  2625                                  			mov	al,EASCIISPACE					;ASCII space
  2626                                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2627                                  			jz	.80						;no, skip ahead
  2628                                  			mov	al,'N'						;yes, indicate with 'N'
  2629                                  .80			mov	cl,77						;indicator column
  2630                                  			call	SetConsoleChar					;display ASCII character
  2631                                  			mov	al,EASCIISPACE					;ASCII space
  2632                                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2633                                  			jz	.90						;no, skip ahead
  2634                                  			mov	al,'S'						;yes, indicate with 'S'
  2635                                  .90			mov	cl,76						;indicator column
  2636                                  			call	SetConsoleChar					;display ASCII character
  2637                                  			pop	es						;restore non-volatile regs
  2638                                  			pop	ecx						;
  2639                                  			ret							;return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;	Routine:	PutConsoleOIAChar
  2643                                  ;
  2644                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2645                                  ;
  2646                                  ;	In:		DS	OS data selector
  2647                                  ;
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2650                                  			push	ecx						;
  2651                                  			push	esi						;
  2652                                  			push	ds						;
  2653                                  			push	es						;
  2654                                  			push	ESELDAT						;load OS data selector ...
  2655                                  			pop	ds						;... into data segment register
  2656                                  			push	ESELCGA						;load CGA selector ...
  2657                                  			pop	es						;... into extra segment register
  2658                                  			mov	esi,wbConsoleScan0				;scan codes address
  2659                                  			mov	bh,ECONOIAROW					;OIA row
  2660                                  			mov	bl,0						;starting column
  2661                                  			mov	ecx,6						;maximum scan codes
  2662                                  .10			push	ecx						;save remaining count
  2663                                  			mov	ecx,ebx						;row, column
  2664                                  			lodsb							;read scan code
  2665                                  			or	al,al						;scan code present?
  2666                                  			jz	.20						;no, skip ahead
  2667                                  			call	PutConsoleHexByte				;display scan code
  2668                                  			jmp	.30						;continue
  2669                                  .20			mov	al,' '						;ASCII space
  2670                                  			call	SetConsoleChar					;display space
  2671                                  			inc	cl
  2672                                  			mov	al,' '						;ASCII space
  2673                                  			call	SetConsoleChar					;display space
  2674                                  .30			add	bl,2						;next column (+2)
  2675                                  			pop	ecx						;restore remaining
  2676                                  			loop	.10						;next code
  2677                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2678                                  			cmp	al,32						;printable? (lower-bounds)
  2679                                  			jb	.40						;no, skip ahead
  2680                                  			cmp	al,126						;printable? (upper-bounds)
  2681                                  			ja	.40						;no, skip ahead
  2682                                  			mov	ch,bh						;OIA row
  2683                                  			mov	cl,40						;character display column
  2684                                  			call	SetConsoleChar					;display ASCII character
  2685                                  .40			pop	es						;restore non-volatile regs
  2686                                  			pop	ds						;
  2687                                  			pop	esi						;
  2688                                  			pop	ecx						;
  2689                                  			pop	ebx						;
  2690                                  			ret							;return
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                  ;
  2693                                  ;	Routine:	PutConsoleHexByte
  2694                                  ;
  2695                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2696                                  ;
  2697                                  ;	In:		AL	byte value
  2698                                  ;			CH	row
  2699                                  ;			CL	column
  2700                                  ;			DS	OS data selector
  2701                                  ;			ES	CGA selector
  2702                                  ;
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2705                                  			mov	bl,al						;save byte value
  2706                                  			shr	al,4						;hi-order nybble
  2707                                  			or	al,030h						;apply ASCII zone
  2708                                  			cmp	al,03ah						;numeric?
  2709                                  			jb	.10						;yes, skip ahead
  2710                                  			add	al,7						;add ASCII offset for alpha
  2711                                  .10			call	SetConsoleChar					;display ASCII character
  2712                                  			inc	cl						;increment column
  2713                                  			mov	al,bl						;byte value
  2714                                  			and	al,0fh						;lo-order nybble
  2715                                  			or	al,30h						;apply ASCII zone
  2716                                  			cmp	al,03ah						;numeric?
  2717                                  			jb	.20						;yes, skip ahead
  2718                                  			add	al,7						;add ASCII offset for alpha
  2719                                  .20			call	SetConsoleChar					;display ASCII character
  2720                                  			pop	ebx						;restore non-volatile regs
  2721                                  			ret							;return
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                  ;
  2724                                  ;	Data-Type Conversion Helper Routines
  2725                                  ;
  2726                                  ;	UnsignedToDecimalString
  2727                                  ;	ByteToDecimalString
  2728                                  ;	UnsignedToHexadecimal
  2729                                  ;	HexadecimalToUnsigned
  2730                                  ;
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;-----------------------------------------------------------------------------------------------------------------------
  2733                                  ;
  2734                                  ;	Routine:	UnsignedToDecimalString
  2735                                  ;
  2736                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  2737                                  ;
  2738                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  2739                                  ;						bit 1: 1 = include comma grouping delimiters
  2740                                  ;						bit 4: 1 = non-zero digit found (internal)
  2741                                  ;			ECX	32-bit binary
  2742                                  ;			DS:EDX	output buffer address
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  UnsignedToDecimalString push	ebx						;save non-volatile regs
  2746                                  			push	ecx						;
  2747                                  			push	edi						;
  2748                                  			push	es						;
  2749                                  			push	ds						;load data selector
  2750                                  			pop	es						;... into extra segment reg
  2751                                  			mov	edi,edx 					;output buffer address
  2752                                  			and	bh,00001111b					;zero internal flags
  2753                                  			mov	edx,ecx 					;binary
  2754                                  			mov	ecx,1000000000					;10^9 divisor
  2755                                  			call	.30						;divide and store
  2756                                  			mov	ecx,100000000					;10^8 divisor
  2757                                  			call	.10						;divide and store
  2758                                  			mov	ecx,10000000					;10^7 divisor
  2759                                  			call	.30						;divide and store
  2760                                  			mov	ecx,1000000					;10^6 divisor
  2761                                  			call	.30						;divide and store
  2762                                  			mov	ecx,100000					;10^5 divisor
  2763                                  			call	.10						;divide and store
  2764                                  			mov	ecx,10000					;10^4 divisor
  2765                                  			call	.30						;divide and store
  2766                                  			mov	ecx,1000					;10^3 divisor
  2767                                  			call	.30						;divide and store
  2768                                  			mov	ecx,100 					;10^2 divisor
  2769                                  			call	.10						;divide and store
  2770                                  			mov	ecx,10						;10^2 divisor
  2771                                  			call	.30						;divide and store
  2772                                  			mov	eax,edx 					;10^1 remainder
  2773                                  			call	.40						;store
  2774                                  			xor	al,al						;null terminator
  2775                                  			stosb
  2776                                  			pop	es						;restore non-volatile regs
  2777                                  			pop	edi						;
  2778                                  			pop	ecx						;
  2779                                  			pop	ebx						;
  2780                                  			ret							;return
  2781                                  .10			test	bh,00000010b					;comma group delims?
  2782                                  			jz	.30						;no, branch
  2783                                  			test	bh,00000001b					;trim leading zeros?
  2784                                  			jz	.20						;no, store delim
  2785                                  			test	bh,00010000b					;non-zero found?
  2786                                  			jz	.30						;no, branch
  2787                                  .20			mov	al,','						;delimiter
  2788                                  			stosb							;store delimiter
  2789                                  .30			mov	eax,edx 					;lo-orer dividend
  2790                                  			xor	edx,edx 					;zero hi-order
  2791                                  			div	ecx						;divide by power of 10
  2792                                  			test	al,al						;zero?
  2793                                  			jz	.50						;yes, branch
  2794                                  			or	bh,00010000b					;non-zero found
  2795                                  .40			or	al,30h						;ASCII zone
  2796                                  			stosb							;store digit
  2797                                  			ret							;return
  2798                                  .50			test	bh,00000001b					;trim leading zeros?
  2799                                  			jz	.40						;no, store and continue
  2800                                  			test	bh,00010000b					;non-zero found?
  2801                                  			jnz	.40						;yes, store and continue
  2802                                  			ret							;return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;	Routine:	ByteToDecimalString
  2806                                  ;
  2807                                  ;	Description:	This routine outputs an ASCIIZ string representing the decimal value of 8-bit binary input
  2808                                  ;
  2809                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  2810                                  ;						bit 1: 1 = left pad with spaces
  2811                                  ;						bit 4: 1 = non-zero digit found (internal)
  2812                                  ;			CL	8-bit binary
  2813                                  ;			DS:EDX	output buffer address
  2814                                  ;
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816                                  ByteToDecimalString	push	ebx						;save non-volatile regs
  2817                                  			push	ecx						;
  2818                                  			push	edi						;
  2819                                  			push	es						;
  2820                                  			push	ds						;copy data segment selector
  2821                                  			pop	es						;... into extra segment selector
  2822                                  			mov	edi,edx						;output buffer address
  2823                                  			and	bh,00001111b					;zero internal flags
  2824                                  			mov	ah,cl						;8-bit binary value
  2825                                  			mov	cl,100						;divisor
  2826                                  			cld							;forward strings
  2827                                  			call	.10						;divide and store
  2828                                  			mov	cl,10						;divisor
  2829                                  			call	.10						;divide and store
  2830                                  			mov	al,ah						;remainder
  2831                                  			call	.20						;store
  2832                                  			xor	al,al						;null
  2833                                  			stosb							;terminate string
  2834                                  			pop	es						;restore non-volatile regs
  2835                                  			pop	edi						;
  2836                                  			pop	ecx						;
  2837                                  			pop	ebx						;
  2838                                  			ret							;return
  2839                                  .10			mov	al,ah						;last remainder (or starting value)
  2840                                  			xor	ah,ah						;zero hi-order dividend
  2841                                  			div	cl						;divide by power or 10
  2842                                  			test	al,al						;zero?
  2843                                  			jz	.40						;yes, branch
  2844                                  			or	bh,00010000b					;non-zero found
  2845                                  .20			or	al,30h						;ASCII zone
  2846                                  .30			stosb							;store digit
  2847                                  			ret							;return
  2848                                  .40			test	bh,00000001b					;trim leading zeros?
  2849                                  			jz	.20						;no, store and continue
  2850                                  			test	bh,00010000b					;non-zero found?
  2851                                  			jnz	.20						;yes, store and continue
  2852                                  			mov	al,' '						;space
  2853                                  			test	bh,00000010b					;left pad with spaces?
  2854                                  			jnz	.30						;yes, store space and continue
  2855                                  			ret							;return
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;	Routine:	UnsignedToHexadecimal
  2859                                  ;
  2860                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  2861                                  ;
  2862                                  ;	Input:		DS:EDX	output buffer address
  2863                                  ;			ECX	32-bit binary
  2864                                  ;
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  UnsignedToHexadecimal	push	edi						;store non-volatile regs
  2867                                  			mov	edi,edx						;output buffer address
  2868                                  			mov	edx,ecx						;32-bit unsigned
  2869                                  			xor	ecx,ecx						;zero register
  2870                                  			mov	cl,8						;nybble count
  2871                                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  2872                                  			mov	al,dl						;????bbbb
  2873                                  			and	al,0fh						;mask out bits 4-7
  2874                                  			or	al,30h						;mask in ascii zone
  2875                                  			cmp	al,3ah						;A through F?
  2876                                  			jb	.20						;no, skip ahead
  2877                                  			add	al,7						;41h through 46h
  2878                                  .20			stosb							;store hexnum
  2879                                  			loop	.10						;next nybble
  2880                                  			xor	al,al						;zero reg
  2881                                  			stosb							;null terminate
  2882                                  			pop	edi						;restore non-volatile regs
  2883                                  			ret							;return
  2884                                  ;-----------------------------------------------------------------------------------------------------------------------
  2885                                  ;
  2886                                  ;	Routine:	HexadecimalToUnsigned
  2887                                  ;
  2888                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  2889                                  ;
  2890                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  2891                                  ;
  2892                                  ;	Output: 	EAX	unsigned integer value
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895                                  HexadecimalToUnsigned	push	esi						;save non-volatile regs
  2896                                  			mov	esi,edx						;source address
  2897                                  			xor	edx,edx						;zero register
  2898                                  .10			lodsb							;source byte
  2899                                  			test	al,al						;end of string?
  2900                                  			jz	.30						;yes, skip ahead
  2901                                  			cmp	al,'9'						;hexadecimal?
  2902                                  			jna	.20						;no, skip ahead
  2903                                  			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  2904                                  .20			and	eax,0fh						;remove ascii zone
  2905                                  			shl	edx,4						;previous total x 16
  2906                                  			add	edx,eax						;add prior value x 16
  2907                                  			jmp	.10						;next
  2908                                  .30			mov	eax,edx						;result
  2909                                  			pop	esi						;restore non-volatile regs
  2910                                  			ret							;return
  2911                                  ;-----------------------------------------------------------------------------------------------------------------------
  2912                                  ;
  2913                                  ;	Message Queue Helper Routines
  2914                                  ;
  2915                                  ;	PutMessage
  2916                                  ;	GetMessage
  2917                                  ;
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  ;-----------------------------------------------------------------------------------------------------------------------
  2920                                  ;
  2921                                  ;	Routine:	PutMessage
  2922                                  ;
  2923                                  ;	Description:	This routine adda a message to the message queue.
  2924                                  ;
  2925                                  ;	Input:		ECX	hi-order data word
  2926                                  ;			EDX	lo-order data word
  2927                                  ;
  2928                                  ;	Output:		CY	0 = success
  2929                                  ;				1 = fail: queue is full
  2930                                  ;
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932                                  PutMessage		push	ds						;save non-volatile regs
  2933                                  			push	ESELMQ						;load task message queue selector ...
  2934                                  			pop	ds						;... into data segment register
  2935                                  			mov	eax,[MQTail]					;tail ptr
  2936                                  			cmp	dword [eax],0					;is queue full?
  2937                                  			stc							;assume failure
  2938                                  			jne	.20						;yes, cannot store
  2939                                  			mov	[eax],edx					;store lo-order data
  2940                                  			mov	[eax+4],ecx					;store hi-order data
  2941                                  			add	eax,8						;next queue element adr
  2942                                  			and	eax,03fch					;at end of queue?
  2943                                  			jnz	.10						;no, skip ahead
  2944                                  			mov	al,8						;reset to top of queue
  2945                                  .10			mov	[MQTail],eax					;save new tail ptr
  2946                                  			clc							;indicate success
  2947                                  .20			pop	ds						;restore non-volatile regs
  2948                                  			ret							;return
  2949                                  ;-----------------------------------------------------------------------------------------------------------------------
  2950                                  ;
  2951                                  ;	Routine:	GetMessage
  2952                                  ;
  2953                                  ;	Description:	This routine reads and removes a message from the message queue.
  2954                                  ;
  2955                                  ;	Output:		EAX	lo-order message data
  2956                                  ;			EDX	hi-order message data
  2957                                  ;
  2958                                  ;			CY	0 = message read
  2959                                  ;				1 = no message to read
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  GetMessage		push	ebx						;save non-volatile regs
  2963                                  			push	ecx						;
  2964                                  			push	ds						;
  2965                                  			push	ESELMQ						;load message queue selector ...
  2966                                  			pop	ds						;... into data segment register
  2967                                  			mov	ebx,[MQHead]					;head ptr
  2968                                  			mov	eax,[ebx]					;lo-order 32 bits
  2969                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2970                                  			or	eax,edx						;is queue empty?
  2971                                  			stc							;assume queue is emtpy
  2972                                  			jz	.20						;yes, skip ahead
  2973                                  			xor	ecx,ecx						;store zero
  2974                                  			mov	[ebx],ecx					;... in lo-order dword
  2975                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2976                                  			add	ebx,8						;next queue element
  2977                                  			and	ebx,03fch					;at end of queue?
  2978                                  			jnz	.10						;no, skip ahead
  2979                                  			mov	bl,8						;reset to 1st entry
  2980                                  .10			mov	[MQHead],ebx					;save new head ptr
  2981                                  			clc							;indicate message read
  2982                                  .20			pop	ds						;restore non-volatile regs
  2983                                  			pop	ecx						;
  2984                                  			pop	ebx						;
  2985                                  			ret							;return
  2986                                  ;-----------------------------------------------------------------------------------------------------------------------
  2987                                  ;
  2988                                  ;	Memory-Mapped Video Routines
  2989                                  ;
  2990                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2991                                  ;
  2992                                  ;	ClearConsoleScreen
  2993                                  ;	ScrollConsoleRow
  2994                                  ;	SetConsoleChar
  2995                                  ;
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997                                  ;-----------------------------------------------------------------------------------------------------------------------
  2998                                  ;
  2999                                  ;	Routine:	ClearConsoleScreen
  3000                                  ;
  3001                                  ;	Description:	This routine clears the console (CGA) screen.
  3002                                  ;
  3003                                  ;-----------------------------------------------------------------------------------------------------------------------
  3004                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  3005                                  			push	edi						;
  3006                                  			push	ds						;
  3007                                  			push	es						;
  3008                                  			push	ESELDAT						;load OS Data selector ...
  3009                                  			pop	ds						;... into DS register
  3010                                  			push	ESELCGA						;load CGA selector ...
  3011                                  			pop	es						;... into ES register
  3012                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  3013                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  3014                                  			xor	edi,edi						;target offset
  3015                                  			cld							;forward strings
  3016                                  			rep	stosd						;reset screen body
  3017                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  3018                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  3019                                  			rep	stosd						;reset OIA line
  3020                                  			xor	al,al						;zero register
  3021                                  			mov	[wbConsoleRow],al				;reset console row
  3022                                  			mov	[wbConsoleColumn],al				;reset console column
  3023                                  			call	PlaceCursor					;place cursor at current position
  3024                                  			pop	es						;restore non-volatile regs
  3025                                  			pop	ds						;
  3026                                  			pop	edi						;
  3027                                  			pop	ecx						;
  3028                                  			ret							;return
  3029                                  ;-----------------------------------------------------------------------------------------------------------------------
  3030                                  ;
  3031                                  ;	Routine:	ScrollConsoleRow
  3032                                  ;
  3033                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  3034                                  ;
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  3037                                  			push	esi						;
  3038                                  			push	edi						;
  3039                                  			push	ds						;
  3040                                  			push	es						;
  3041                                  			push	ESELCGA						;load CGA video selector ...
  3042                                  			pop	ds						;... into DS
  3043                                  			push	ESELCGA						;load CGA video selector ...
  3044                                  			pop	es						;... into ES
  3045                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  3046                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  3047                                  			xor	edi,edi						;edi = target (line 1)
  3048                                  			cld							;forward strings
  3049                                  			rep	movsd						;move 24 lines up
  3050                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  3051                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  3052                                  			rep	stosd						;clear bottom row
  3053                                  			pop	es						;restore non-volatile regs
  3054                                  			pop	ds						;
  3055                                  			pop	edi						;
  3056                                  			pop	esi						;
  3057                                  			pop	ecx						;
  3058                                  			ret							;return
  3059                                  ;-----------------------------------------------------------------------------------------------------------------------
  3060                                  ;
  3061                                  ;	Routine:	SetConsoleChar
  3062                                  ;
  3063                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  3064                                  ;
  3065                                  ;	In:		AL	ASCII character
  3066                                  ;			CL	column
  3067                                  ;			CH	row
  3068                                  ;			ES	CGA selector
  3069                                  ;
  3070                                  ;-----------------------------------------------------------------------------------------------------------------------
  3071                                  SetConsoleChar		mov	dl,al						;ASCII character
  3072                                  			movzx	eax,ch						;row
  3073                                  			mov	ah,ECONCOLS					;cols/row
  3074                                  			mul	ah						;row * cols/row
  3075                                  			add	al,cl						;add column
  3076                                  			adc	ah,0						;handle carry
  3077                                  			shl	eax,1						;screen offset
  3078                                  			mov	[es:eax],dl					;store character
  3079                                  			ret							;return
  3080                                  ;-----------------------------------------------------------------------------------------------------------------------
  3081                                  ;
  3082                                  ;	Input/Output Routines
  3083                                  ;
  3084                                  ;	These routines read and/or write directly to ports.
  3085                                  ;
  3086                                  ;	PlaceCursor
  3087                                  ;	PutPrimaryEndOfInt
  3088                                  ;	PutSecondaryEndOfInt
  3089                                  ;	ReadRealTimeClock
  3090                                  ;	ResetSystem
  3091                                  ;	SetKeyboardLamps
  3092                                  ;	WaitForKeyInBuffer
  3093                                  ;	WaitForKeyOutBuffer
  3094                                  ;
  3095                                  ;-----------------------------------------------------------------------------------------------------------------------
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  ;
  3098                                  ;	Routine:	PlaceCursor
  3099                                  ;
  3100                                  ;	Description:	This routine positions the cursor on the console.
  3101                                  ;
  3102                                  ;	In:		DS	OS data selector
  3103                                  ;
  3104                                  ;-----------------------------------------------------------------------------------------------------------------------
  3105                                  PlaceCursor		push	ecx						;save non-volatile regs
  3106                                  			mov	al,[wbConsoleRow]				;al = row
  3107                                  			mov	ah,ECONCOLS					;ah = cols/row
  3108                                  			mul	ah						;row offset
  3109                                  			add	al,[wbConsoleColumn]				;add column
  3110                                  			adc	ah,0						;add overflow
  3111                                  			mov	ecx,eax						;screen offset
  3112                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  3113                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  3114                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  3115                                  			out	dx,al						;select register
  3116                                  			inc	edx						;data port
  3117                                  			mov	al,ch						;hi-order cursor loc
  3118                                  			out	dx,al						;store hi-order loc
  3119                                  			dec	edx						;register select port
  3120                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  3121                                  			out	dx,al						;select register
  3122                                  			inc	edx						;data port
  3123                                  			mov	al,cl						;lo-order cursor loc
  3124                                  			out	dx,al						;store lo-order loc
  3125                                  			pop	ecx						;restore non-volatile regs
  3126                                  			ret							;return
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  ;
  3129                                  ;	Routine:	PutPrimaryEndOfInt
  3130                                  ;
  3131                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3132                                  ;
  3133                                  ;-----------------------------------------------------------------------------------------------------------------------
  3134                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  3135                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3136                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  3137                                  			ret							;return
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;	Routine:	PutSecondaryEndOfInt
  3141                                  ;
  3142                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3143                                  ;
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  3146                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3147                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  3148                                  			ret							;return
  3149                                  ;-----------------------------------------------------------------------------------------------------------------------
  3150                                  ;
  3151                                  ;	Routine:	ReadRealTimeClock
  3152                                  ;
  3153                                  ;	Description:	This routine gets current date time from the real-time clock.
  3154                                  ;
  3155                                  ;	In:		DS:EBX	DATETIME structure
  3156                                  ;
  3157                                  ;-----------------------------------------------------------------------------------------------------------------------
  3158                                  ReadRealTimeClock	push	esi						;save non-volatile regs
  3159                                  			push	edi						;
  3160                                  			push	es						;
  3161                                  			push	ds						;store data selector ...
  3162                                  			pop	es						;... in es register
  3163                                  			mov	edi,ebx						;date-time structure
  3164                                  			mov	al,ERTCSECONDREG				;second register
  3165                                  			out	ERTCREGPORT,al					;select second register
  3166                                  			in	al,ERTCDATAPORT					;read second register
  3167                                  			cld							;forward strings
  3168                                  			stosb							;store second value
  3169                                  			mov	al,ERTCMINUTEREG				;minute register
  3170                                  			out	ERTCREGPORT,al					;select minute register
  3171                                  			in	al,ERTCDATAPORT					;read minute register
  3172                                  			stosb							;store minute value
  3173                                  			mov	al,ERTCHOURREG					;hour register
  3174                                  			out	ERTCREGPORT,al					;select hour register
  3175                                  			in	al,ERTCDATAPORT					;read hour register
  3176                                  			stosb							;store hour value
  3177                                  			mov	al,ERTCWEEKDAYREG				;weekday register
  3178                                  			out	ERTCREGPORT,al					;select weekday register
  3179                                  			in	al,ERTCDATAPORT					;read weekday register
  3180                                  			stosb							;store weekday value
  3181                                  			mov	al,ERTCDAYREG					;day register
  3182                                  			out	ERTCREGPORT,al					;select day register
  3183                                  			in	al,ERTCDATAPORT					;read day register
  3184                                  			stosb							;store day value
  3185                                  			mov	al,ERTCMONTHREG					;month register
  3186                                  			out	ERTCREGPORT,al					;select month register
  3187                                  			in	al,ERTCDATAPORT					;read month register
  3188                                  			stosb							;store month value
  3189                                  			mov	al,ERTCYEARREG					;year register
  3190                                  			out	ERTCREGPORT,al					;select year register
  3191                                  			in	al,ERTCDATAPORT					;read year register
  3192                                  			stosb							;store year value
  3193                                  			mov	al,ERTCCENTURYREG				;century register
  3194                                  			out	ERTCREGPORT,al					;select century register
  3195                                  			in	al,ERTCDATAPORT					;read century register
  3196                                  			stosb							;store century value
  3197                                  			mov	al,ERTCSTATUSREG				;status register
  3198                                  			out	ERTCREGPORT,al					;select status register
  3199                                  			in	al,ERTCDATAPORT					;read status register
  3200                                  			test	al,ERTCBINARYVALS				;test if values are binary
  3201                                  			jnz	.20						;skip ahead if binary values
  3202                                  			mov	esi,ebx						;date-time structure address
  3203                                  			mov	edi,ebx						;date-time structure address
  3204                                  			mov	ecx,8						;loop counter
  3205                                  .10			lodsb							;BCD value
  3206                                  			mov	ah,al						;BCD value
  3207                                  			and	al,00001111b					;low-order decimal zone
  3208                                  			and	ah,11110000b					;hi-order decimal zone
  3209                                  			shr	ah,1						;hi-order decimal * 8
  3210                                  			add	al,ah						;low-order + hi-order * 8
  3211                                  			shr	ah,2						;hi-order decimal * 2
  3212                                  			add	al,ah						;low-order + hi-order * 10
  3213                                  			stosb							;replace BCD with binary
  3214                                  			loop	.10						;next value
  3215                                  .20			pop	es						;restore non-volatile regs
  3216                                  			pop	edi						;
  3217                                  			pop	esi						;
  3218                                  			ret							;return
  3219                                  ;-----------------------------------------------------------------------------------------------------------------------
  3220                                  ;
  3221                                  ;	Routine:	ResetSystem
  3222                                  ;
  3223                                  ;	Description:	This routine restarts the system using the 8042 controller.
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  3227                                  			loop	$						;clear interrupts
  3228                                  			mov	al,EKEYCMDRESET					;mask out bit zero
  3229                                  			out	EKEYPORTSTAT,al					;drive bit zero low
  3230                                  .10			sti							;enable maskable interrupts
  3231                                  			hlt							;halt until interrupt
  3232                                  			jmp	.10						;repeat until reset kicks in
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  ;
  3235                                  ;	Routine:	SetKeyboardLamps
  3236                                  ;
  3237                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  3238                                  ;
  3239                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3240                                  ;
  3241                                  ;-----------------------------------------------------------------------------------------------------------------------
  3242                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  3243                                  			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  3244                                  			out	EKEYPORTDATA,al					;send command to 8042
  3245                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3246                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3247                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  3248                                  			mov	al,bh						;set/reset lamps value
  3249                                  			out	EKEYPORTDATA,al					;send lamps value
  3250                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3251                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3252                                  			ret							;return
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;	Routine:	WaitForKeyInBuffer
  3256                                  ;
  3257                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3258                                  ;
  3259                                  ;	Out:		ZF	1 = Input buffer ready
  3260                                  ;				0 = Input buffer not ready after timeout
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3264                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3265                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3266                                  			test	al,EKEYBITIN					;is input buffer still full?
  3267                                  			loopnz	.10						;yes, repeat till timeout
  3268                                  			pop	ecx						;restore non-volatile regs
  3269                                  			ret							;return
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  ;
  3272                                  ;	Routine:	WaitForKeyOutBuffer
  3273                                  ;
  3274                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3275                                  ;
  3276                                  ;	Out:		ZF	0 = Output buffer has data from controller
  3277                                  ;				1 = Output buffer empty after timeout
  3278                                  ;
  3279                                  ;-----------------------------------------------------------------------------------------------------------------------
  3280                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3281                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3282                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3283                                  			test	al,EKEYBITOUT					;output buffer status bit
  3284                                  			loopz	.10						;loop until output buffer bit
  3285                                  			pop	ecx						;restore non-volatile regs
  3286                                  			ret							;return
  3287                                  ;-----------------------------------------------------------------------------------------------------------------------
  3288                                  ;
  3289                                  ;	End of the Kernel Function Library
  3290                                  ;
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  3293                                  			db	055h,0AAh					;end of segment
  3294                                  ;-----------------------------------------------------------------------------------------------------------------------
  3295                                  ;
  3296                                  ;	Console Task
  3297                                  ;
  3298                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3299                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3300                                  ;	screen and responds to user commands.
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303                                  ;-----------------------------------------------------------------------------------------------------------------------
  3304                                  ;
  3305                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3306                                  ;
  3307                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3308                                  ;
  3309                                  ;-----------------------------------------------------------------------------------------------------------------------
  3310                                  section			constack						;console task stack
  3311                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  3312                                  ;-----------------------------------------------------------------------------------------------------------------------
  3313                                  ;
  3314                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3315                                  ;
  3316                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3317                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3318                                  ;	16 descriptors. Six are initially defined.
  3319                                  ;
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  section			conldt							;console local descriptors
  3322                                  			dq	004093004780007Fh				;04 TSS alias
  3323                                  			dq	004093004700007Fh				;0C LDT alias
  3324                                  			dq	00409300400006FFh				;14 stack
  3325                                  			dq	00CF93000000FFFFh				;1C data
  3326                                  			dq	00409B0050000FFFh				;24 code
  3327                                  			dq	00409300480007FFh				;2C message queue
  3328                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3329                                  ;-----------------------------------------------------------------------------------------------------------------------
  3330                                  ;
  3331                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3332                                  ;
  3333                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3334                                  ;	segment. CS to console code.
  3335                                  ;
  3336                                  ;-----------------------------------------------------------------------------------------------------------------------
  3337                                  section			contss							;console task state segment
  3338                                  			dd	0						;00 back-link tss
  3339                                  			dd	0700h						;04 esp ring 0
  3340                                  			dd	0014h						;08 ss ring 0
  3341                                  			dd	0700h						;0C esp ring 1
  3342                                  			dd	0014h						;10 es ring 1
  3343                                  			dd	0700h						;14 esp ring 2
  3344                                  			dd	0014h						;18 ss ring 2
  3345                                  			dd	0						;1C cr ring 3
  3346                                  			dd	0						;20 eip
  3347                                  			dd	0200h						;24 eflags
  3348                                  			dd	0						;28 eax
  3349                                  			dd	0						;2C ecx
  3350                                  			dd	0						;30 edx
  3351                                  			dd	0						;34 ebx
  3352                                  			dd	0700h						;38 esp ring 3
  3353                                  			dd	0						;3C ebp
  3354                                  			dd	0						;40 esi
  3355                                  			dd	0						;44 edi
  3356                                  			dd	001Ch						;48 es
  3357                                  			dd	0024h						;4C cs
  3358                                  			dd	0014h						;50 ss ring 3
  3359                                  			dd	001Ch						;54 ds
  3360                                  			dd	0						;58 fs
  3361                                  			dd	0						;5c gs
  3362                                  			dd	0050h						;60 ldt selector in gdt
  3363                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3364                                  ;-----------------------------------------------------------------------------------------------------------------------
  3365                                  ;
  3366                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3367                                  ;
  3368                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3369                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3370                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3371                                  ;	event.
  3372                                  ;
  3373                                  ;-----------------------------------------------------------------------------------------------------------------------
  3374                                  section			conmque							;console message queue
  3375                                  			dd	8						;head pointer
  3376                                  			dd	8						;tail pointer
  3377                                  			times	510 dd 0					;queue elements
  3378                                  ;-----------------------------------------------------------------------------------------------------------------------
  3379                                  ;
  3380                                  ;	Console Code								@disk: 008400	@mem: 005000
  3381                                  ;
  3382                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3383                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3384                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3385                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3386                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3387                                  ;	board input, echoing to the console screen and responding to user commands.
  3388                                  ;
  3389                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3390                                  ;
  3391                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3392                                  ;				|  Real Mode Interrupt Vectors			|
  3393                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3394                                  ;				|  Reserved BIOS Memory Area			|
  3395                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3396                                  ;				|  Shared Kernel Memory Area			|
  3397                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3398                                  ;				|  Global Descriptor Table (GDT)		|
  3399                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3400                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3401                                  ;			002000	+-----------------------------------------------+
  3402                                  ;				|  Interrupt Handlers				|
  3403                                  ;				|  Kernel Function Library			|
  3404                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3405                                  ;				|  Console Task Stack Area			|
  3406                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3407                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3408                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3409                                  ;				|  Console Task Task State Segment (TSS)	|
  3410                                  ;			004800	+-----------------------------------------------+
  3411                                  ;				|  Console Task Message Queue			|
  3412                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3413                                  ;				|  Console Task Code				|
  3414                                  ;				|  Console Task Constants			|
  3415                                  ;			006000	+===============================================+
  3416                                  ;
  3417                                  ;-----------------------------------------------------------------------------------------------------------------------
  3418                                  section			concode	vstart=5000h					;labels relative to 5000h
  3419                                  ConCode			call	ConInitializeData				;initialize console variables
  3420                                  
  3421                                  			clearConsoleScreen					;clear the console screen
  3422                                  			putConsoleString czTitle				;display startup message
  3423                                  .10			putConsoleString czPrompt				;display input prompt
  3424                                  			placeCursor						;set CRT cursor location
  3425                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3426                                  			putConsoleString czNewLine				;newline
  3427                                  
  3428                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3429                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  3430                                  			mov	ebx,wzConsoleToken				;token buffer
  3431                                  			call	ConTakeToken					;handle console input
  3432                                  			mov	edx,wzConsoleToken				;token buffer
  3433                                  			call	ConDetermineCommand				;determine command number
  3434                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3435                                  			jb	.20						;yes, branch
  3436                                  
  3437                                  			putConsoleString czUnknownCommand			;display error message
  3438                                  
  3439                                  			jmp	.10						;next command
  3440                                  .20			shl	eax,2						;index into jump table
  3441                                  			mov	edx,tConJmpTbl					;jump table base address
  3442                                  			mov	eax,[edx+eax]					;command handler routine address
  3443                                  			call	eax						;call command handler
  3444                                  			jmp	.10						;next command
  3445                                  ;-----------------------------------------------------------------------------------------------------------------------
  3446                                  ;
  3447                                  ;	Routine:	ConInitializeData
  3448                                  ;
  3449                                  ;	Description:	This routine initializes console task variables.
  3450                                  ;
  3451                                  ;-----------------------------------------------------------------------------------------------------------------------
  3452                                  ConInitializeData	push	ecx						;save non-volatile regs
  3453                                  			push	edi						;
  3454                                  			push	es						;
  3455                                  			push	ESELDAT						;load OS data selector ...
  3456                                  			pop	es						;... into extra segment register
  3457                                  			mov	edi,ECONDATA					;OS console data address
  3458                                  			xor	al,al						;initialization value
  3459                                  			mov	ecx,ECONDATALEN					;size of OS console data
  3460                                  			cld							;forward strings
  3461                                  			rep	stosb						;initialize data
  3462                                  			pop	es						;restore non-volatile regs
  3463                                  			pop	edi						;
  3464                                  			pop	ecx						;
  3465                                  			ret							;return
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                  ;
  3468                                  ;	Routine:	ConTakeToken
  3469                                  ;
  3470                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3471                                  ;
  3472                                  ;	In:		DS:EDX	source buffer address
  3473                                  ;			DS:EBX	target buffer address
  3474                                  ;
  3475                                  ;	Out:		DS:EDX	source buffer address
  3476                                  ;			DS:EBX	target buffer address
  3477                                  ;
  3478                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3479                                  ;
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481                                  ConTakeToken		push	esi						;save non-volatile regs
  3482                                  			push	edi						;
  3483                                  			mov	esi,edx						;source buffer address
  3484                                  			mov	edi,ebx						;target buffer address
  3485                                  			cld							;forward strings
  3486                                  .10			lodsb							;load byte
  3487                                  			cmp	al,EASCIISPACE					;space?
  3488                                  			je	.10						;yes, continue
  3489                                  			test	al,al						;end of line?
  3490                                  			jz	.40						;yes, branch
  3491                                  .20			stosb							;store byte
  3492                                  			lodsb							;load byte
  3493                                  			test	al,al						;end of line?
  3494                                  			jz	.40						;no, continue
  3495                                  			cmp	al,EASCIISPACE					;space?
  3496                                  			jne	.20						;no, continue
  3497                                  .30			lodsb							;load byte
  3498                                  			cmp	al,EASCIISPACE					;space?
  3499                                  			je	.30						;yes, continue
  3500                                  			dec	esi						;pre-position
  3501                                  .40			mov	byte [edi],0					;terminate buffer
  3502                                  			mov	edi,edx						;source buffer address
  3503                                  .50			lodsb							;remaining byte
  3504                                  			stosb							;move to front of buffer
  3505                                  			test	al,al						;end of line?
  3506                                  			jnz	.50						;no, continue
  3507                                  			pop	edi						;restore non-volatile regs
  3508                                  			pop	esi						;
  3509                                  			ret							;return
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;	Routine:	ConDetermineCommand
  3513                                  ;
  3514                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3515                                  ;
  3516                                  ;	input:		DS:EDX	command address
  3517                                  ;
  3518                                  ;	output:		EAX	>=0	= command nbr
  3519                                  ;				0	= unknown command
  3520                                  ;
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  3523                                  			push	esi						;
  3524                                  			push	edi						;
  3525                                  
  3526                                  			upperCaseString						;upper-case string at EDX
  3527                                  
  3528                                  			mov	esi,tConCmdTbl					;commands table
  3529                                  			xor	edi,edi						;intialize command number
  3530                                  			cld							;forward strings
  3531                                  .10			lodsb							;command length
  3532                                  			movzx	ecx,al						;command length
  3533                                  			jecxz	.20						;branch if end of table
  3534                                  			mov	ebx,esi						;table entry address
  3535                                  			add	esi,ecx						;next table entry address
  3536                                  
  3537                                  			compareMemory						;compare byte arrays at EDX, EBX
  3538                                  
  3539                                  			jecxz	.20						;branch if equal
  3540                                  			inc	edi						;increment command nbr
  3541                                  			jmp	.10						;repeat
  3542                                  .20			mov	eax,edi						;command number
  3543                                  			pop	edi						;restore non-volatile regs
  3544                                  			pop	esi						;
  3545                                  			pop	ebx						;
  3546                                  			ret							;return
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  ;
  3549                                  ;	Routine:	ConClear
  3550                                  ;
  3551                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3552                                  ;
  3553                                  ;-----------------------------------------------------------------------------------------------------------------------
  3554                                  ConClear		clearConsoleScreen					;clear console screen
  3555                                  			ret							;return
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557                                  ;
  3558                                  ;	Routine:	ConDate
  3559                                  ;
  3560                                  ;	Description:	This routine handles the DATE command.
  3561                                  ;
  3562                                  ;-----------------------------------------------------------------------------------------------------------------------
  3563                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3564                                  			putDateString	  wsConsoleDateTime, wzConsoleOutBuffer	;format date string
  3565                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3566                                  			putConsoleString  czNewLine				;write newline to console
  3567                                  			ret							;return
  3568                                  ;-----------------------------------------------------------------------------------------------------------------------
  3569                                  ;
  3570                                  ;	Routine:	ConExit
  3571                                  ;
  3572                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3573                                  ;
  3574                                  ;-----------------------------------------------------------------------------------------------------------------------
  3575                                  ConExit			resetSystem						;issue system reset
  3576                                  			ret							;return
  3577                                  ;-----------------------------------------------------------------------------------------------------------------------
  3578                                  ;
  3579                                  ;	Routine:	ConMem
  3580                                  ;
  3581                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  3582                                  ;
  3583                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  3584                                  ;
  3585                                  ;-----------------------------------------------------------------------------------------------------------------------
  3586                                  ConMem			push	ebx						;save non-volatile regs
  3587                                  			push	esi						;
  3588                                  			push	edi						;
  3589                                  ;
  3590                                  ;			update the source address if a parameter is given
  3591                                  ;
  3592                                  			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  3593                                  			mov	ebx,wzConsoleToken				;console command token address
  3594                                  			call	ConTakeToken					;take first param as token
  3595                                  			cmp	byte [wzConsoleToken],0				;token found?
  3596                                  			je	.10						;no, branch
  3597                                  			mov	edx,wzConsoleToken				;first param as token address
  3598                                  
  3599                                  			hexadecimalToUnsigned					;convert string token to unsigned
  3600                                  
  3601                                  			mov	[wfConsoleMemAddr],eax				;save console memory address
  3602                                  ;
  3603                                  ;			setup source address and row count
  3604                                  ;
  3605                                  .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  3606                                  			xor	ecx,ecx						;zero register
  3607                                  			mov	cl,16						;row count
  3608                                  ;
  3609                                  ;			start the row with the source address in hexadecimal
  3610                                  ;
  3611                                  .20			push	ecx						;save remaining rows
  3612                                  			mov	edi,wzConsoleOutBuffer				;output buffer address
  3613                                  			mov	edx,edi						;output buffer address
  3614                                  			mov	ecx,esi						;console memory address
  3615                                  
  3616                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  3617                                  
  3618                                  			add	edi,8						;end of memory addr hexnum
  3619                                  			mov	al,' '						;ascii space
  3620                                  			stosb							;store delimiter
  3621                                  ;
  3622                                  ;			output 16 ASCII hexadecimal byte values for the row
  3623                                  ;
  3624                                  			xor	ecx,ecx						;zero register
  3625                                  			mov	cl,16						;loop count
  3626                                  .30			push	ecx						;save loop count
  3627                                  			lodsb							;memory byte
  3628                                  			mov	ah,al						;memory byte
  3629                                  			shr	al,4						;high-order in bits 3-0
  3630                                  			or	al,30h						;apply ascii numeric zone
  3631                                  			cmp	al,3ah						;numeric range?
  3632                                  			jb	.40						;yes, skip ahead
  3633                                  			add	al,7						;adjust ascii for 'A'-'F'
  3634                                  .40			stosb							;store ascii hexadecimal of high-order
  3635                                  			mov	al,ah						;low-order in bits 3-0
  3636                                  			and	al,0fh						;mask out high-order bits
  3637                                  			or	al,30h						;apply ascii numeric zone
  3638                                  			cmp	al,3ah						;numeric range?
  3639                                  			jb	.50						;yes, skip ahead
  3640                                  			add	al,7						;adjust ascii for 'A'-'F'
  3641                                  .50			stosb							;store ascii hexadecimal of low-order
  3642                                  			mov	al,' '						;ascii space
  3643                                  			stosb							;store ascii space delimiter
  3644                                  			pop	ecx						;loop count
  3645                                  			loop	.30						;next
  3646                                  ;
  3647                                  ;			output printable ASCII character section for the row
  3648                                  ;
  3649                                  			sub	esi,16						;reset source pointer
  3650                                  			mov	cl,16						;loop count
  3651                                  .60			lodsb							;source byte
  3652                                  			cmp	al,32						;printable? (low-range test)
  3653                                  			jb	.70						;no, skip ahead
  3654                                  			cmp	al,128						;printable? (high-range test)
  3655                                  			jb	.80						;yes, skip ahead
  3656                                  .70			mov	al,' '						;display space instead of printable
  3657                                  .80			stosb							;store printable ascii byte
  3658                                  			loop	.60						;next source byte
  3659                                  			xor	al,al						;nul-terminator
  3660                                  			stosb							;terminate output line
  3661                                  ;
  3662                                  ;			display constructed output buffer and newline
  3663                                  ;
  3664                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  3665                                  			putConsoleString czNewLine				;display new line
  3666                                  ;
  3667                                  ;			repeat until all lines displayed and preserve source address
  3668                                  ;
  3669                                  			pop	ecx						;remaining rows
  3670                                  			loop	.20						;next row
  3671                                  			mov	[wfConsoleMemAddr],esi				;update console memory address
  3672                                  			pop	edi						;restore regs
  3673                                  			pop	esi						;
  3674                                  			pop	ebx						;
  3675                                  			ret							;return
  3676                                  ;-----------------------------------------------------------------------------------------------------------------------
  3677                                  ;
  3678                                  ;	Routine:	ConPCIProbe
  3679                                  ;
  3680                                  ;	Description:	This routine handles the PCIProbe command.
  3681                                  ;
  3682                                  ;-----------------------------------------------------------------------------------------------------------------------
  3683                                  ConPCIProbe		push	ebx						;save non-volatile regs
  3684                                  ;
  3685                                  ;			initialize variables
  3686                                  ;
  3687                                  			xor	al,al						;zero register
  3688                                  			mov	[wbConsolePCIBus],al				;initialize bus
  3689                                  			mov	[wbConsolePCIDevice],al				;initialize device
  3690                                  			mov	[wbConsolePCIFunction],al			;initialize function
  3691                                  ;
  3692                                  ;			output starting message to console
  3693                                  ;
  3694                                  			;putConsoleString czProbingPCI				;probing PCI message
  3695                                  ;
  3696                                  ;			construct PCI selector
  3697                                  ;
  3698                                  .10			mov	ah,[wbConsolePCIBus]				;AH = bbbb bbbb
  3699                                  			mov	dl,[wbConsolePCIDevice]				;DL = ???d dddd
  3700                                  			shl	dl,3						;DL = dddd d000
  3701                                  			mov	al,[wbConsolePCIFunction]			;AL = ???? ?fff
  3702                                  			and	al,007h						;AL = 0000 0fff
  3703                                  			or	al,dl						;AL = dddd dfff
  3704                                  			movzx	eax,ax						;0000 0000 0000 0000 bbbb bbbb dddd dfff
  3705                                  			shl	eax,8						;0000 0000 bbbb bbbb dddd dfff 0000 0000
  3706                                  			or	eax,80000000h					;1000 0000 bbbb bbbb dddd dfff 0000 0000
  3707                                  			mov	[wfConsolePCISelector],eax			;save selector
  3708                                  ;
  3709                                  ;			read PCI data register
  3710                                  ;
  3711                                  			mov	dx,0cf8h					;register port
  3712                                  			out	dx,eax						;select device
  3713                                  			mov	dx,0cfch					;data port
  3714                                  			in	eax,dx						;read register data
  3715                                  			mov	[wfConsolePCIData],eax				;save data
  3716                                  ;
  3717                                  ;			interpret PCI data value and display finding
  3718                                  ;
  3719                                  			cmp	eax,0ffffffffh					;not defined?
  3720                                  			je	.20						;yes, branch
  3721                                  			mov	edx,wzConsoleToken				;output buffer
  3722                                  			call	ConBuildPCIIdent				;build PCI bus, device, function ident
  3723                                  
  3724                                  			putConsoleString wzConsoleToken				;display bus as decimal
  3725                                  
  3726                                  			call	ConInterpretPCIData				;update flags based on data
  3727                                  
  3728                                  			putConsoleString czSpace
  3729                                  			putConsoleString [wfConsolePCIVendorStr]
  3730                                  			putConsoleString czSpace
  3731                                  			putConsoleString [wfConsolePCIChipStr]
  3732                                  			putConsoleString czNewLine				;display new line
  3733                                  ;
  3734                                  ;			step to next function, device, bus
  3735                                  ;
  3736                                  .20			inc	byte [wbConsolePCIFunction]			;next function
  3737                                  			cmp	byte [wbConsolePCIFunction],8			;at limit?
  3738                                  			jb	.10						;no, continue
  3739                                  			mov	byte [wbConsolePCIFunction],0			;zero function
  3740                                  			inc	byte [wbConsolePCIDevice]			;next device
  3741                                  			cmp	byte [wbConsolePCIDevice],32			;at limit?
  3742                                  			jb	.10						;no, continue
  3743                                  			mov	byte [wbConsolePCIDevice],0			;zero device
  3744                                  			inc	byte [wbConsolePCIBus]				;next bus
  3745                                  			cmp	byte [wbConsolePCIBus],0			;at limit?
  3746                                  			jb	.10						;no, continue
  3747                                  
  3748                                  			jmp	.30
  3749                                  
  3750                                  ;
  3751                                  ;			report if ethernet adapter found
  3752                                  ;
  3753                                  			test	byte [wbConsoleHWFlags],EHWETHERNET		;ethernet h/w switch set?
  3754                                  			jz	.30						;branch if no
  3755                                  
  3756                                  			putConsoleString czEthernetAdapterFound			;report adapter found
  3757                                  ;
  3758                                  ;			read base address register 0 at offset 10h
  3759                                  ;
  3760                                  			mov	eax,[wfConsoleEthernetDevice]			;adapter PCI selector
  3761                                  			or	eax,10h						;set function bits
  3762                                  			mov	dx,0cf8h					;register port
  3763                                  			out	dx,eax						;select register
  3764                                  			mov	dx,0cfch					;data port
  3765                                  			in	eax,dx						;register data
  3766                                  			mov	[wfConsoleEthernetMem],eax			;save ethernet memory mapped i/o addr
  3767                                  ;
  3768                                  ;			report base address register 0 value
  3769                                  ;
  3770                                  			mov	ecx,eax						;unsigned integer param
  3771                                  			mov	edx,wzConsoleToken				;target buffer address
  3772                                  
  3773                                  			unsignedToHexadecimal					;convert unsigned to ASCII hex string
  3774                                  			putConsoleString wzConsoleToken				;output string to console
  3775                                  			putConsoleString czNewLine				;output newline to console
  3776                                  ;
  3777                                  ;			read base address register 2 at offset 18h
  3778                                  ;
  3779                                  			mov	eax,[wfConsoleEthernetDevice]			;adapter PCI selector
  3780                                  			or	eax,18h						;set function bits
  3781                                  			mov	dx,0cf8h					;register port
  3782                                  			out	dx,eax						;select register
  3783                                  			mov	dx,0cfch					;data port
  3784                                  			in	eax,dx						;register data
  3785                                  			and	al,0feh						;clear bit zero
  3786                                  			mov	[wfConsoleEthernetPort],eax			;save ethernet i/o port
  3787                                  ;
  3788                                  ;			report base address register 2 value
  3789                                  ;
  3790                                  			mov	ecx,eax						;unsigned integer param
  3791                                  			mov	edx,wzConsoleToken				;target buffer address
  3792                                  
  3793                                  			unsignedToHexadecimal					;convert unsigned to ASCII hex string
  3794                                  			putConsoleString wzConsoleToken				;output string to console
  3795                                  			putConsoleString czNewLine				;output newline to console
  3796                                  ;
  3797                                  ;			read ethernet control register using port i/o
  3798                                  ;
  3799                                  			mov	eax,[wfConsoleEthernetPort]			;ethernet i/o port
  3800                                  			mov	dx,ax						;ethernet i/o port
  3801                                  			xor	eax,eax						;control register (zero)
  3802                                  			out	dx,eax						;select register
  3803                                  			add	dx,4						;data register
  3804                                  			in	eax,dx						;read register data
  3805                                  			mov	[wfConsoleEthernetCtrl],eax			;save ethernet control register value
  3806                                  ;
  3807                                  ;			report adapter control register value
  3808                                  ;
  3809                                  			mov	ecx,eax						;unsigned integer param
  3810                                  			mov	edx,wzConsoleToken				;target buffer address
  3811                                  
  3812                                  			unsignedToHexadecimal					;convert unsigned to ASCII hex string
  3813                                  			putConsoleString wzConsoleToken				;output string to console
  3814                                  			putConsoleString czNewLine				;output newline to console
  3815                                  
  3816                                  .30			pop	ebx						;restore non-volatile regs
  3817                                  			ret							;return
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  ConBuildPCIIdent	push	edi
  3820                                  			mov	edi,edx
  3821                                  			mov	al,[wbConsolePCIBus]
  3822                                  			xor	ah,ah
  3823                                  			mov	cl,100
  3824                                  			div	cl
  3825                                  			or	al,30h
  3826                                  			cld
  3827                                  			stosb
  3828                                  			mov	al,ah
  3829                                  			xor	ah,ah
  3830                                  			mov	cl,10
  3831                                  			div	cl
  3832                                  			or	ax,3030h
  3833                                  			stosw
  3834                                  			mov	al,EASCIIPERIOD
  3835                                  			stosb
  3836                                  			mov	al,[wbConsolePCIDevice]
  3837                                  			xor	ah,ah
  3838                                  			mov	cl,10
  3839                                  			div	cl
  3840                                  			or	ax,3030h
  3841                                  			stosw
  3842                                  			mov	al,EASCIIPERIOD
  3843                                  			stosb
  3844                                  			mov	al,[wbConsolePCIFunction]
  3845                                  			or	al,30h
  3846                                  			stosb
  3847                                  			xor	al,al
  3848                                  			stosb
  3849                                  			pop	edi
  3850                                  			ret							;return
  3851                                  ;-----------------------------------------------------------------------------------------------------------------------
  3852                                  ;
  3853                                  ;	Routine:	ConInterpretPCIData
  3854                                  ;
  3855                                  ;	Description:	This routine interprets the PCI vendor and device IDs.
  3856                                  ;
  3857                                  ;-----------------------------------------------------------------------------------------------------------------------
  3858                                  ConInterpretPCIData	mov	eax,czApple
  3859                                  			cmp	word [wwConsolePCIVendor],EPCIVENDORAPPLE	;Apple?
  3860                                  			jne	.10						;no, branch
  3861                                  			mov	edx,czUSBController
  3862                                  			cmp	word [wwConsolePCIChip],EPCIAPPLEUSB		;USB?
  3863                                  			je	.80						;yes, branch
  3864                                  			mov	edx,czOther					;other
  3865                                  			jmp	.80						;continue
  3866                                  .10			mov	eax,czIntel					;Intel
  3867                                  			cmp	word [wwConsolePCIVendor],EPCIVENDORINTEL	;Intel?
  3868                                  			jne	.20						;no, branch
  3869                                  			mov	edx,czPro1000MT					;Pro/1000 MT
  3870                                  			cmp	word [wwConsolePCIChip],EPCIINTELPRO1000MT	;Pro/1000 MT?
  3871                                  			je	.80						;yes, branch
  3872                                  			mov	edx,czPCIAndMem					;PCI and Memory
  3873                                  			cmp	word [wwConsolePCIChip],EPCIINTELPCIMEM		;PCI and Memory?
  3874                                  			je	.80						;yes, branch
  3875                                  			mov	edx,czAurealAD1881				;Aureal 1881 SOUNDMAX
  3876                                  			cmp	word [wwConsolePCIChip],EPCIINTELAD1881		;Aureal 1881 SOUNDMAX?
  3877                                  			je	.80						;yes, branch
  3878                                  			mov	edx,czPIIX3PCItoIDEBridge			;PIIX3 PCI-to-IDE Bridge
  3879                                  			cmp	word [wwConsolePCIChip],EPCIINTELPIIX3		;PIIX3 PCI-to-IDE Bridge?
  3880                                  			je	.80						;yes, branch
  3881                                  			mov	edx,cz82371ABBusMaster				;82371AB Bus Master
  3882                                  			cmp	word [wwConsolePCIChip],EPCIINTEL82371AB	;82371AB Bus Master?
  3883                                  			je	.80						;yes, branch
  3884                                  			mov	edx,czPIIX4PowerMgmt				;PIIX4/4E/4M Power Mgmt Controller
  3885                                  			cmp	word [wwConsolePCIChip],EPCIINTELPIIX4		;PIIX4/4E/4M Power Mgmt Controller?
  3886                                  			je	.80						;yes, branch
  3887                                  			mov	edx,czOther					;other
  3888                                  			jmp	.80						;continue
  3889                                  .20			mov	eax,czOracle					;Oracle
  3890                                  			cmp	word [wwConsolePCIVendor],EPCIVENDORORACLE	;Oracle?
  3891                                  			jne	.30						;no, branch
  3892                                  			mov	edx,czVirtualBoxGA				;VirtulaBox Graphics Adapter
  3893                                  			cmp	word [wwConsolePCIChip],EPCIORACLEVBOXGA	;VirtualBox Graphics Adapter?
  3894                                  			je	.80						;yes, branch
  3895                                  			mov	edx,czVirtualBoxDevice				;VirtualBox Device
  3896                                  			cmp	word [wwConsolePCIChip],EPCIORACLEVBOXDEVICE	;VirtualBox Device?
  3897                                  			je	.80						;yes, branch
  3898                                  			mov	edx,czOther					;other
  3899                                  			jmp	.80						;continue
  3900                                  .30			mov	eax,czOther					;other
  3901                                  			mov	edx,czOther					;other
  3902                                  .80			mov	[wfConsolePCIVendorStr],eax			;save vendor string
  3903                                  			mov	[wfConsolePCIChipStr],edx			;save chip string
  3904                                  			cmp	word [wwConsolePCIChip],EPCIINTELPRO1000MT	;Pro/1000 MT Ethernet Adapter
  3905                                  			jne	.90						;no, branch
  3906                                  			or	byte [wbConsoleHWFlags],EHWETHERNET		;ethernet adapter found
  3907                                  			mov	eax,[wfConsolePCISelector]			;PCI selector
  3908                                  			mov	[wfConsoleEthernetDevice],eax			;save as ethernet device selector
  3909                                  .90			ret							;return
  3910                                  ;-----------------------------------------------------------------------------------------------------------------------
  3911                                  ;
  3912                                  ;	Routine:	ConTime
  3913                                  ;
  3914                                  ;	Description:	This routine Handles the TIME command.
  3915                                  ;
  3916                                  ;-----------------------------------------------------------------------------------------------------------------------
  3917                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3918                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  3919                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3920                                  			putConsoleString  czNewLine				;write newline to console
  3921                                  			ret							;return
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;	Routine:	ConVersion
  3925                                  ;
  3926                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3927                                  ;
  3928                                  ;-----------------------------------------------------------------------------------------------------------------------
  3929                                  ConVersion		putConsoleString czTitle				;display version message
  3930                                  			ret							;return
  3931                                  ;-----------------------------------------------------------------------------------------------------------------------
  3932                                  ;
  3933                                  ;	Tables
  3934                                  ;
  3935                                  ;-----------------------------------------------------------------------------------------------------------------------
  3936                                  										;---------------------------------------
  3937                                  										;  Command Jump Table
  3938                                  										;---------------------------------------
  3939                                  tConJmpTbl		equ	$						;command jump table
  3940                                  			dd	ConPCIProbe	- ConCode			;pciprobe command routine offset
  3941                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  3942                                  			dd	ConVersion	- ConCode			;version command routine offset
  3943                                  			dd	ConMem		- ConCode			;memory command routine offset
  3944                                  			dd	ConClear	- ConCode			;clear command routine offset
  3945                                  			dd	ConPCIProbe	- ConCode			;lspci command routine offset
  3946                                  			dd	ConDate		- ConCode			;date command routine offset
  3947                                  			dd	ConExit		- ConCode			;exit command routine offset
  3948                                  			dd	ConExit		- ConCode			;quit command routine offset
  3949                                  			dd	ConTime		- ConCode			;time command routine offset
  3950                                  			dd	ConClear	- ConCode			;cls command routine offset
  3951                                  			dd	ConMem		- ConCode			;mem command routine offset
  3952                                  			dd	ConVersion	- ConCode			;ver command routine offset
  3953                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3954                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3955                                  										;---------------------------------------
  3956                                  										;  Command Name Table
  3957                                  										;---------------------------------------
  3958                                  tConCmdTbl		equ	$						;command name table
  3959                                  			db	9,"PCIPROBE",0					;pciprobe command
  3960                                  			db	9,"SHUTDOWN",0					;shutdown command
  3961                                  			db	8,"VERSION",0					;version command
  3962                                  			db	7,"MEMORY",0					;memory command
  3963                                  			db	6,"CLEAR",0					;clear command
  3964                                  			db	6,"LSPCI",0					;lspci command (pciprobe alias)
  3965                                  			db	5,"DATE",0					;date command
  3966                                  			db	5,"EXIT",0					;exit command
  3967                                  			db	5,"QUIT",0					;quit command
  3968                                  			db	5,"TIME",0					;time command
  3969                                  			db	4,"CLS",0					;cls command
  3970                                  			db	4,"MEM",0					;mem command
  3971                                  			db	4,"VER",0					;ver command
  3972                                  			db	0						;end of table
  3973                                  ;-----------------------------------------------------------------------------------------------------------------------
  3974                                  ;
  3975                                  ;	Constants
  3976                                  ;
  3977                                  ;-----------------------------------------------------------------------------------------------------------------------
  3978                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3979                                  czPrompt		db	":",0						;prompt string
  3980                                  czPeriod		db	".",0						;period delimiter
  3981                                  czSpace			db	" ",0
  3982                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3983                                  czNewLine		db	13,10,0						;new line string
  3984                                  czProbingPCI		db	"Probing PCI devices ...",13,10,0		;probing PCI devices string
  3985                                  
  3986                                  czApple			db	"Apple",0
  3987                                  czIntel			db	"Intel",0					;Intel
  3988                                  czOracle		db	"Oracle",0
  3989                                  czOther			db	"Other",0
  3990                                  
  3991                                  czUSBController		db	"USB Controller",0
  3992                                  czPro1000MT		db	"Pro/1000 MT Ethernet Adapter",0
  3993                                  czPCIAndMem		db	"PCI & Memory",0
  3994                                  czAurealAD1881		db	"Aureal AD1881 SOUNDMAX",0
  3995                                  czPIIX3PCItoIDEBridge	db	"PIIX3 PCI-to-ISA Bridge",0
  3996                                  cz82371ABBusMaster	db	"82371AB/EB PCI Bus Master IDE Controller",0
  3997                                  czPIIX4PowerMgmt	db	"PIIX4/4E/4M Power Management Controller",0
  3998                                  czVirtualBoxGA		db	"VirtualBox Graphics Adapter",0
  3999                                  czVirtualBoxDevice	db	"VirtualBox Device",0
  4000                                  
  4001                                  czEthernetAdapterFound	db	"Ethernet adapter found",13,10,0		;adapter found message
  4002                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  4003                                  			db	055h,0AAh					;end of section
  4004                                  %endif
  4005                                  %ifdef BUILDDISK
  4006                                  ;-----------------------------------------------------------------------------------------------------------------------
  4007                                  ;
  4008                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  4009                                  ;
  4010                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013                                  section			unused							;unused disk space
  4014                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  4015                                  %endif
