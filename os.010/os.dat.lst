     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.010
     6                                  ;
     7                                  ;       Description:    In this sample program, logic is added to allocate and free memory blocks at the kernel level.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Logical tabs are set after each eight columns.
    46                                  ;                       Tabs are simulated using SPACE characters.
    47                                  ;                       For comments that span an entire line, comment text begins in column 9.
    48                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    49                                  ;                       Assembly operands begin in column 33.
    50                                  ;                       Inline comments begin in column 81.
    51                                  ;                       Lines should not extend beyond column 120.
    52                                  ;
    53                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    54                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    55                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    56                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    57                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    58                                  ;                       ouput buffers, respectively.
    59                                  ;
    60                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    61                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    62                                  ;
    63                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    64                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    65                                  ;                       Register names in comments are in upper case (EAX, EDI).
    66                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    67                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    68                                  ;                       register contents on entry and exit.
    69                                  ;
    70                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    71                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    72                                  ;                       The 2nd letter of the constant label indicates the storage type.
    73                                  ;
    74                                  ;                       cq......        constant quad-word (dq)
    75                                  ;                       cd......        constant double-word (dd)
    76                                  ;                       cw......        constant word (dw)
    77                                  ;                       cb......        constant byte (db)
    78                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    79                                  ;
    80                                  ;       Instructions:   32-bit instructions are generally favored.
    81                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    82                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    83                                  ;
    84                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    85                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    86                                  ;
    87                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    88                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    89                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    90                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    91                                  ;                       Octal literal values are avoided.
    92                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    93                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    94                                  ;
    95                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    96                                  ;                       Macro names describe an action and so DO begin with a verb.
    97                                  ;
    98                                  ;       Memory Use:     Operating system memory allocation is minimized.
    99                                  ;                       Buffers are kept to as small a size as practicable.
   100                                  ;                       Data and code intermingling is avoided wherever possible.
   101                                  ;
   102                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   103                                  ;                       Register names in source code are in lower case (eax, edx).
   104                                  ;
   105                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   106                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   107                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   108                                  ;
   109                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   110                                  ;                       Routine names begin with a verb (Get, Read, Load).
   111                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   112                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   113                                  ;                       function but begin with a leading underscore (_) character.
   114                                  ;
   115                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   116                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   117                                  ;
   118                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   119                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   120                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   121                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   122                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   123                                  ;
   124                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   125                                  ;                       The 2nd letter of the variable label indicates the storage type.
   126                                  ;
   127                                  ;                       wq......        variable quad-word (resq)
   128                                  ;                       wd......        variable double-word (resd)
   129                                  ;                       ww......        variable word (resw)
   130                                  ;                       wb......        variable byte (resb)
   131                                  ;                       ws......        writable structure
   132                                  ;
   133                                  ;-----------------------------------------------------------------------------------------------------------------------
   134                                  ;=======================================================================================================================
   135                                  ;
   136                                  ;       Equates
   137                                  ;
   138                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   139                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   140                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   141                                  ;       sets. Equates here are defined in the following groupings:
   142                                  ;
   143                                  ;       Hardware-Defined Values
   144                                  ;
   145                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   146                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   147                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   148                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   149                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   150                                  ;       EX86...         Intel x86 CPU architecture values
   151                                  ;
   152                                  ;       Firmware-Defined Values
   153                                  ;
   154                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   155                                  ;
   156                                  ;       Standards-Based Values
   157                                  ;
   158                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   159                                  ;
   160                                  ;       Operating System Values
   161                                  ;
   162                                  ;       EBOOT...        Boot sector and loader values
   163                                  ;       ECON...         Console values (dimensions and attributes)
   164                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   165                                  ;       EKEYF...        Keyboard status flags
   166                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   167                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   168                                  ;       EMEM...         Memory Management values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   294                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   295                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   296                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   297                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   298                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   299                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   300                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Firmware-Defined Values
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   309                                  ;
   310                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   311                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   315                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   316                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   317                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   318                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   319                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   320                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   321                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   322                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   323                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   324                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       Standards-Based Values
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;
   332                                  ;       ASCII                                                                   EASCII...
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   336                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   337                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   338                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   339                                  EASCIISPACE             equ     020h                                            ;space
   340                                  EASCIIUPPERA            equ     041h                                            ;'A'
   341                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   342                                  EASCIILOWERA            equ     061h                                            ;'a'
   343                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   344                                  EASCIITILDE             equ     07Eh                                            ;'~'
   345                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   346                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   347                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   348                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   349                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   350                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   351                                  EASCIICASE              equ     00100000b                                       ;case bit
   352                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Operating System Values
   356                                  ;
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  ;
   360                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   361                                  ;
   362                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   363                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   364                                  ;
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   367                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   368                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   369                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   370                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   371                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   372                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;       Console Constants                                                       ECON...
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ECONCOLS                equ     80                                              ;columns per row
   377                                  ECONROWS                equ     24                                              ;console rows
   378                                  ECONOIAROW              equ     24                                              ;operator information area row
   379                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   380                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   381                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   382                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   383                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   388                                  EGDTCGA                 equ     020h                                            ;cga video selector
   389                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   390                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   391                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   392                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   393                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   394                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   395                                  ;-----------------------------------------------------------------------------------------------------------------------
   396                                  ;       Keyboard Flags                                                          EKEYF...
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   399                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   400                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   401                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   402                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   403                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   404                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   405                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   406                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   407                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   408                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Kernel Constants                                                        EKRN...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   413                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   414                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   415                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   416                                  EKRNHEAPSIZE            equ     080000000h                                      ;kernel heap size
   417                                  EKRNHEAPBASE            equ     010000h                                         ;kernel heap base
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Memory Management Constants                                             EMEM...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  EMEMMINSIZE             equ     256                                             ;minimum heap block size (incl. hdr)
   426                                  EMEMFREECODE            equ     "FREE"                                          ;free memory signature
   427                                  EMEMUSERCODE            equ     "USER"                                          ;user memory signature
   428                                  EMEMWIPEBYTE            equ     000h                                            ;byte value to wipe storage
   429                                  ;-----------------------------------------------------------------------------------------------------------------------
   430                                  ;       Message Identifiers                                                     EMSG...
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   433                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   434                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   435                                  ;=======================================================================================================================
   436                                  ;
   437                                  ;       Structures
   438                                  ;
   439                                  ;=======================================================================================================================
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  ;
   442                                  ;       MEMBLOCK
   443                                  ;
   444                                  ;       The MEMBLOCK structure defines a memory block.
   445                                  ;
   446                                  ;-----------------------------------------------------------------------------------------------------------------------
   447                                  struc                   MEMBLOCK
   448 00000000 <res 00000004>          .signature              resd    1                                               ;starting signature
   449 00000004 <res 00000004>          .bytes                  resd    1                                               ;block size in bytes
   450 00000008 <res 00000004>          .owner                  resd    1                                               ;owning task
   451 0000000C <res 00000004>          .reserved               resd    1                                               ;reserved
   452 00000010 <res 00000004>          .nextcontig             resd    1                                               ;next contiguous block
   453 00000014 <res 00000004>          .previouscontig         resd    1                                               ;previous contiguous block
   454 00000018 <res 00000004>          .nextblock              resd    1                                               ;next free/task block
   455 0000001C <res 00000004>          .previousblock          resd    1                                               ;previous free/task block
   456                                  EMEMBLOCKLEN            equ     ($-.signature)
   457                                  endstruc
   458                                  ;-----------------------------------------------------------------------------------------------------------------------
   459                                  ;
   460                                  ;       MEMROOT
   461                                  ;
   462                                  ;       The MEMROOT structure defines starting and ending addresses of memory block chains.
   463                                  ;
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  struc                   MEMROOT
   466 00000000 <res 00000004>          .firstcontig            resd    1                                               ;first contiguous block
   467 00000004 <res 00000004>          .lastcontig             resd    1                                               ;last contiguous block
   468 00000008 <res 00000004>          .firstfree              resd    1                                               ;first free block
   469 0000000C <res 00000004>          .lastfree               resd    1                                               ;last free block
   470 00000010 <res 00000004>          .firsttask              resd    1                                               ;first task block
   471 00000014 <res 00000004>          .lasttask               resd    1                                               ;last task block
   472                                  EMEMROOTLEN             equ     ($-.firstcontig)
   473                                  endstruc
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ;
   476                                  ;       MQUEUE
   477                                  ;
   478                                  ;       The MQUEUE structure maps memory used for a message queue.
   479                                  ;
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  struc                   MQUEUE
   482 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   483 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   484 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   485                                  endstruc
   486                                  ;-----------------------------------------------------------------------------------------------------------------------
   487                                  ;
   488                                  ;       OSDATA
   489                                  ;
   490                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   491                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   492                                  ;
   493                                  ;-----------------------------------------------------------------------------------------------------------------------
   494                                  struc                   OSDATA
   495 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   496 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   497 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   498 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   499 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   500 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   501 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   502 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   503 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   504 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   505 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   506 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   507 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   508 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   509 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   510 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   511 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   512 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   513 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   514 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   515 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   516 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   517 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   518 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   519 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   520 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   521 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   522 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   523 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   524 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   525 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   526 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   527 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   528 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   529 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   530 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   531 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   532 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   533 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   534 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   535 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   536 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   537 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   538 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   539 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   540 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   541 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   542 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   543 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   544 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   545 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   546 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   547 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   548 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   549 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   550 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   551 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   552 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   553 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   554 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   555 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   556 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   557 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   558 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   559 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   560 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   561 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   562 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   563 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   564 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   565 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   566 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   567 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   568 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   569 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   570 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   571 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   572 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   573 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   574 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   575 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   576 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   577 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   578 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   579 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   580 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   581 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   582 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   583 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   584 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   585 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   586 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   587 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   588 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   589 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   590 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   591 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   592 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   593 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   594 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   595 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   596                                  ;-----------------------------------------------------------------------------------------------------------------------
   597                                  ;
   598                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   599                                  ;
   600                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   601                                  ;
   602                                  ;-----------------------------------------------------------------------------------------------------------------------
   603                                  ECONDATA                equ     ($)
   604 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   605 00000804 <res 00000004>          wdConsoleHeapSize       resd    1                                               ;kernel heap size
   606 00000808 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   607 00000809 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   608 0000080A <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   609 0000080B <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   610 0000080C <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   611 0000080D <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   612 0000080E <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   613 0000080F <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   614 00000810 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   615 00000811 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   616 00000812 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   617 00000813 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   618 00000814 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   619 00000864 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   620 000008B4 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   621 00000904 <res 00000018>          wsConsoleMemRoot        resb    EMEMROOTLEN                                     ;kernel base memory map
   622                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   623                                  ;-----------------------------------------------------------------------------------------------------------------------
   624                                  ;
   625                                  ;       End of OS Variables
   626                                  ;
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628                                  endstruc
   629                                  ;-----------------------------------------------------------------------------------------------------------------------
   630                                  ;
   631                                  ;       Macros
   632                                  ;
   633                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   634                                  ;
   635                                  ;-----------------------------------------------------------------------------------------------------------------------
   636                                  %macro                  mint    1
   637                                  _%1                     equ     ($-$$) / EX86DESCLEN
   638                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   639                                  %endmacro
   640                                  %macro                  mtrap   1
   641                                  _%1                     equ     ($-$$) / EX86DESCLEN
   642                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   643                                  %endmacro
   644                                  %macro                  menter  1
   645                                  ?%1                     equ     ($-$$)
   646                                  %endmacro
   647                                  %macro                  tsvce   1
   648                                  e%1                     equ     ($-tsvc)/4
   649                                                          dd      %1
   650                                  %endmacro
   651                                  %ifdef BUILDBOOT
   652                                  ;=======================================================================================================================
   653                                  ;
   654                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   655                                  ;
   656                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   657                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   658                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   659                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   660                                  ;
   661                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   662                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   663                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   664                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   665                                  ;       immediately followed by a disk parameter table.
   666                                  ;
   667                                  ;=======================================================================================================================
   668                                                          cpu     8086                                            ;assume minimal CPU
   669                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   670                                                          bits    16                                              ;16-bit code at power-up
   671                                  %ifdef BUILDPREP
   672                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   673                                  %else
   674 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   675                                  %endif
   676                                  ;-----------------------------------------------------------------------------------------------------------------------
   677                                  ;
   678                                  ;       Disk Parameter Table
   679                                  ;
   680                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   681                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   682                                  ;
   683                                  ;-----------------------------------------------------------------------------------------------------------------------
   684 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   685 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   686 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   687 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   688 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   689 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   690 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   691 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   692 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   693                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   694 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   695 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   696 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   697                                  ;
   698                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   699                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   700                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   701                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   702                                  ;       given several possible starting values for CS:IP.
   703                                  ;
   704                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   705 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   706                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   707 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   708 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   709 00000025 B104                                            mov     cl,4                                            ;shift count
   710 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   711 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   712 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   713                                  ;
   714                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   715                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   716                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   717                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   718                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   719                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   720                                  ;
   721 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   722 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   723 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   724 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   725 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   726                                  ;
   727                                  ;       Our boot addressability is now set up according to the following diagram.
   728                                  ;
   729                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   730                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   731                                  ;                               |  256 = 100h bytes                             |
   732                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   733                                  ;                               |  Boot Sector (vstart=0100h)                   |
   734                                  ;                               |  1 sector = 512 = 200h bytes                  |
   735                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   736                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   737                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   738                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   739                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   740                                  ;                               |  2 sectors = 1024 = 400h bytes
   741                                  ;                       009400  +-----------------------------------------------+ DS:1900
   742                                  ;
   743                                  ;       On entry, DL indicates the drive being booted from.
   744                                  ;
   745 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   746                                  ;
   747                                  ;       Compute directory i/o buffer address.
   748                                  ;
   749 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   750 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   751 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   752 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   753                                  ;
   754                                  ;       Compute segment where os.com will be loaded.
   755                                  ;
   756 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   757 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   758 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   759 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   760                                  ;
   761                                  ;       Set the video mode to 80 column, 25 row, text.
   762                                  ;
   763 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   764 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   765                                  ;
   766                                  ;       Write a message to the console so we know we have our addressability established.
   767                                  ;
   768 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   769 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   770                                  ;
   771                                  ;       Initialize the number of directory sectors to search.
   772                                  ;
   773 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   774 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   775                                  ;
   776                                  ;       Compute number of directory sectors and initialize overhead count.
   777                                  ;
   778 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   779 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   780 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   781 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   782                                  ;
   783                                  ;       Compute directory entries per sector.
   784                                  ;
   785 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   786 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   787 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   788                                  ;
   789                                  ;       Compute first logical directory sector and update overhead count.
   790                                  ;
   791 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   792 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   793 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   794 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   795 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   796 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   797                                  ;
   798                                  ;       Read directory sector.
   799                                  ;
   800 0000008E B001                    .30                     mov     al,1                                            ;sector count
   801 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   802 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   803 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   804                                  ;
   805                                  ;       Setup variables to search this directory sector.
   806                                  ;
   807 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   808 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   809 000000A1 7603                                            jna     .40                                             ;no, continue
   810 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   811 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   812 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   813 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   814                                  ;
   815                                  ;       Loop through directory sectors searching for kernel program.
   816                                  ;
   817 000000B1 56                      .50                     push    si                                              ;save kernel name address
   818 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   819 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   820 000000B6 FC                                              cld                                                     ;forward strings
   821 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   822 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   823 000000BA 5E                                              pop     si                                              ;restore kernel name address
   824 000000BB 7418                                            je      .60                                             ;exit loop if found
   825 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   826 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   827 000000C2 75ED                                            jnz     .50                                             ;next entry
   828                                  ;
   829                                  ;       Repeat search if we are not at the end of the directory.
   830                                  ;
   831 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   832 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   833 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   834 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   835 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   836                                  ;
   837                                  ;       If we find the kernel program in the directory, read the FAT.
   838                                  ;
   839 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   840 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   841 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   842 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   843 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   844 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   845                                  ;
   846                                  ;       Get the starting cluster of the kernel program and target address.
   847                                  ;
   848 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   849 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   850                                  ;
   851                                  ;       Read each program cluster into RAM.
   852                                  ;
   853 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   854 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   855 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   856 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   857 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   858 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   859 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   860 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   861 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   862                                  ;
   863                                  ;       Update buffer pointer for next cluster.
   864                                  ;
   865 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   866 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   867 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   868 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   869 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   870                                  ;
   871                                  ;       Compute next cluster number.
   872                                  ;
   873 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   874 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   875 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   876 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   877 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   878 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   879 00000120 83E701                                          and     di,1                                            ;get low bit
   880 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   881 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   882 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   883                                  ;
   884                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   885                                  ;
   886 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   887 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   888 00000130 B104                                            mov     cl,4                                            ;shift count
   889 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   890 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   891 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   892 0000013A 75B2                                            jne     .70                                             ;no, continue
   893                                  ;
   894                                  ;       Transfer control to the operating system program.
   895                                  ;
   896 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   897 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   898 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   899                                  ;
   900                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   901                                  ;
   902 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   903 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   904 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   905 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   906 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   907 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   908 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   909 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   910 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   911 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   912                                  ;
   913                                  ;       Try maxtries times to read sector.
   914                                  ;
   915 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   916 00000160 53                      .10                     push    bx                                              ;save buffer address
   917 00000161 51                                              push    cx                                              ;save retry count
   918 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   919 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   920 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   921 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   922 0000016F 59                                              pop     cx                                              ;restore retry count
   923 00000170 5B                                              pop     bx                                              ;restore buffer address
   924 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   925 00000173 E2EB                                            loop    .10                                             ;retry
   926                                  ;
   927                                  ;       Handle disk error: convert to ASCII and store in error string.
   928                                  ;
   929 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   930 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   931 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   932 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   933 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   934 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   935 00000183 7203                                            jb      .20                                             ;continue if numeral
   936 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   937 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   938 0000018A 7203                                            jb      .30                                             ;continue if numeral
   939 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   940 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   941 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   942 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   943                                  ;
   944                                  ;       Wait for a key press.
   945                                  ;
   946 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   947 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   948 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   949 0000019E FB                                              sti                                                     ;enable maskable interrupts
   950 0000019F F4                                              hlt                                                     ;wait for interrupt
   951 000001A0 EBF6                                            jmp     .10                                             ;repeat
   952                                  ;
   953                                  ;       Reset the system.
   954                                  ;
   955 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   956 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   957 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   958 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   959 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   960                                  ;
   961                                  ;       Display text message.
   962                                  ;
   963 000001AA FC                      BootPrint               cld                                                     ;forward strings
   964 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   965 000001AC 84C0                                            test    al,al                                           ;end of string?
   966 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   967 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   968 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   969 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   970 000001B6 C3                      BootReturn              ret                                                     ;return
   971                                  ;-----------------------------------------------------------------------------------------------------------------------
   972                                  ;
   973                                  ;       Constants
   974                                  ;
   975                                  ;-----------------------------------------------------------------------------------------------------------------------
   976 000001B7 90                                              align   2
   977 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   978 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   978 000001C3 4F4D               
   979 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   979 000001CE 530D0A00           
   980 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   980 000001DB 7220               
   981 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   982 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   982 000001E9 6700               
   983                                  ;-----------------------------------------------------------------------------------------------------------------------
   984                                  ;
   985                                  ;       Work Areas
   986                                  ;
   987                                  ;-----------------------------------------------------------------------------------------------------------------------
   988 000001EB 90                                              align   2
   989 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   990 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   991 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   992 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   993 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   994                                  wwReadCountCommand      equ     $                                               ;read count and command
   995 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   996 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   997                                  wwDriveHead             equ     $                                               ;drive, head (word)
   998 000001F8 00                      wbDrive                 db      0                                               ;drive
   999 000001F9 00                      wbHead                  db      0                                               ;head
  1000                                  wwSectorTrack           equ     $                                               ;sector, track (word)
  1001 000001FA 00                                              db      0                                               ;sector
  1002 000001FB 00                      wbTrack                 db      0                                               ;track
  1003 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
  1004 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
  1005                                  %endif
  1006                                  %ifdef BUILDPREP
  1007                                  ;=======================================================================================================================
  1008                                  ;
  1009                                  ;       Diskette Preparation Code
  1010                                  ;
  1011                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
  1012                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1013                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1014                                  ;
  1015                                  ;=======================================================================================================================
  1016                                  ;
  1017                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1018                                  ;
  1019                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1020                                                          call    BootPrint                                       ;display message
  1021                                  ;
  1022                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1023                                  ;
  1024                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1025                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1026                                                          jnz     .20                                             ;continue if key pressed
  1027                                                          sti                                                     ;enable interrupts
  1028                                                          hlt                                                     ;wait for interrupt
  1029                                                          jmp     .10                                             ;repeat
  1030                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1031                                                          je      .30                                             ;yes, branch
  1032                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1033                                                          jne     .10                                             ;no, repeat
  1034                                                          jmp     .120                                            ;yes, exit program
  1035                                  ;
  1036                                  ;       Display writing-sector message and patch the JMP instruction.
  1037                                  ;
  1038                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1039                                                          call    BootPrint                                       ;display message
  1040                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1041                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1042                                                          mov     [bx],ax                                         ;update the JMP instruction
  1043                                  ;
  1044                                  ;       Try to read the boot sector.
  1045                                  ;
  1046                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1047                                  .40                     push    cx                                              ;save remaining tries
  1048                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1049                                                          mov     dx,0                                            ;head zero, drive zero
  1050                                                          mov     cx,1                                            ;track zero, sector one
  1051                                                          mov     al,1                                            ;one sector
  1052                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1053                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1054                                                          pop     cx                                              ;restore remaining retries
  1055                                                          jnc     .50                                             ;skip ahead if successful
  1056                                                          loop    .40                                             ;try again
  1057                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1058                                                          jmp     .70                                             ;branch to error routine
  1059                                  ;
  1060                                  ;       Copy diskette parms from input buffer to output buffer.
  1061                                  ;
  1062                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1063                                                          add     si,11                                           ;skip over JMP and system ID
  1064                                                          mov     di,Boot                                         ;output buffer address
  1065                                                          add     di,11                                           ;skip over JMP and system ID
  1066                                                          mov     cx,19                                           ;length of diskette parameters
  1067                                                          cld                                                     ;forward string copies
  1068                                                          rep     movsb                                           ;copy diskette parameters
  1069                                  ;
  1070                                  ;       Try to write boot sector to diskette.
  1071                                  ;
  1072                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1073                                  .60                     push    cx                                              ;save remaining tries
  1074                                                          mov     bx,Boot                                         ;output buffer address
  1075                                                          mov     dx,0                                            ;head zero, drive zero
  1076                                                          mov     cx,1                                            ;track zero, sector one
  1077                                                          mov     al,1                                            ;one sector
  1078                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1079                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1080                                                          pop     cx                                              ;restore remaining retries
  1081                                                          jnc     .100                                            ;skip ahead if successful
  1082                                                          loop    .60                                             ;try again
  1083                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1084                                  ;
  1085                                  ;       Convert the error code to ASCII and display the error message.
  1086                                  ;
  1087                                  .70                     push    ax                                              ;save error code
  1088                                                          mov     al,ah                                           ;copy error code
  1089                                                          mov     ah,0                                            ;AX = error code
  1090                                                          mov     dl,10h                                          ;hexadecimal divisor
  1091                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1092                                                          or      ax,03030h                                       ;add ASCII zone digits
  1093                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1094                                                          jb      .80                                             ;yes, continue
  1095                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1096                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1097                                                          jb      .90                                             ;yes, continue
  1098                                                          add     al,7                                            ;no, make ASCII
  1099                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1100                                                          call    BootPrint                                       ;write error message
  1101                                                          pop     ax                                              ;restore error code
  1102                                  ;
  1103                                  ;       Display the completion message.
  1104                                  ;
  1105                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1106                                                          mov     al,ah                                           ;BIOS return code
  1107                                                          cmp     al,0                                            ;success?
  1108                                                          je      .110                                            ;yes, continue
  1109                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1110                                                          cmp     al,1                                            ;disk parameter error?
  1111                                                          je      .110                                            ;yes, continue
  1112                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1113                                                          cmp     al,2                                            ;address mark not found?
  1114                                                          je      .110                                            ;yes, continue
  1115                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1116                                                          cmp     al,3                                            ;protected disk?
  1117                                                          je      .110                                            ;yes, continue
  1118                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1119                                                          cmp     al,6                                            ;diskette removed?
  1120                                                          je      .110                                            ;yes, continue
  1121                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1122                                                          cmp     al,80H                                          ;drive timed out?
  1123                                                          je      .110                                            ;yes, continue
  1124                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1125                                  .110                    call    BootPrint                                       ;display result message
  1126                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1127                                                          int     021h                                            ;terminate DOS program
  1128                                                          ret                                                     ;return (should not execute)
  1129                                  ;-----------------------------------------------------------------------------------------------------------------------
  1130                                  ;
  1131                                  ;       Diskette Preparation Messages
  1132                                  ;
  1133                                  ;-----------------------------------------------------------------------------------------------------------------------
  1134                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1135                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1136                                                          db      13,10
  1137                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1138                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1139                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1140                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1141                                                          db      13,10,0
  1142                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1143                                                          db      13,10,0
  1144                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1145                                                          db      13,10,0
  1146                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1147                                                          db      13,10,0
  1148                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1149                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1150                                                          db      13,10,0
  1151                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1152                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1153                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1154                                                          db      13,10,"and retry."
  1155                                                          db      13,10,0
  1156                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1157                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1158                                                          db      13,10,"using another diskette."
  1159                                                          db      13,10,0
  1160                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1161                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1162                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1163                                                          db      13,10,0
  1164                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1165                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1166                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1167                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1168                                                          db      13,10,"is properly inserted in the diskette drive."
  1169                                                          db      13,10,0
  1170                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1171                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1172                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1173                                                          db      13,10,0
  1174                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1175                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1176                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1177                                                          db      13,10,0
  1178                                  wcPrepInBuf             equ     $
  1179                                  %endif
  1180                                  %ifdef BUILDDISK
  1181                                  ;=======================================================================================================================
  1182                                  ;
  1183                                  ;       File Allocation Tables
  1184                                  ;
  1185                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1186                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1187                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1188                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1189                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1190                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1191                                  ;       the last cluster in the chain.
  1192                                  ;
  1193                                  ;       Every three bytes encode two FAT entries as follows:
  1194                                  ;
  1195                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1196                                  ;
  1197                                  ;=======================================================================================================================
  1198                                  ;-----------------------------------------------------------------------------------------------------------------------
  1199                                  ;
  1200                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1201                                  ;
  1202                                  ;-----------------------------------------------------------------------------------------------------------------------
  1203                                  section                 fat1                                                    ;first copy of FAT
  1204                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1205                                                          db      005h,060h,000h, 007h,080h,000h
  1206                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1207                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1208                                                          db      011h,020h,001h, 013h,040h,001h
  1209                                                          db      015h,060h,001h, 017h,080h,001h
  1210                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1211                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1212                                                          db      021h,020h,002h, 023h,040h,002h
  1213                                                          db      025h,060h,002h, 027h,080h,002h
  1214                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1215                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1216                                  ;-----------------------------------------------------------------------------------------------------------------------
  1217                                  ;
  1218                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1219                                  ;
  1220                                  ;-----------------------------------------------------------------------------------------------------------------------
  1221                                  section                 fat2                                                    ;second copy of FAT
  1222                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1223                                                          db      005h,060h,000h, 007h,080h,000h
  1224                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1225                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1226                                                          db      011h,020h,001h, 013h,040h,001h
  1227                                                          db      015h,060h,001h, 017h,080h,001h
  1228                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1229                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1230                                                          db      021h,020h,002h, 023h,040h,002h
  1231                                                          db      025h,060h,002h, 027h,080h,002h
  1232                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1233                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1234                                  ;-----------------------------------------------------------------------------------------------------------------------
  1235                                  ;
  1236                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1237                                  ;
  1238                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1239                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1240                                  ;       copy.
  1241                                  ;
  1242                                  ;-----------------------------------------------------------------------------------------------------------------------
  1243                                  section                 dir                                                     ;diskette directory
  1244                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1245                                                          db      020h                                            ;attribute (archive bit set)
  1246                                                          times   10 db 0                                         ;unused
  1247                                                          dw      0h                                              ;time
  1248                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1249                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1250                                                          dw      2                                               ;first cluster
  1251                                                          dd      05400h                                          ;file size
  1252                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1253                                  %endif
  1254                                  %ifdef BUILDCOM
  1255                                  ;=======================================================================================================================
  1256                                  ;
  1257                                  ;       OS.COM
  1258                                  ;
  1259                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1260                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1261                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1262                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1263                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1264                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1265                                  ;
  1266                                  ;       Our loader addressability is set up according to the following diagram.
  1267                                  ;
  1268                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1269                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1270                                  ;                               |  256 = 100h bytes                             |
  1271                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1272                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1273                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1274                                  ;                       007e00  +-----------------------------------------------+
  1275                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1276                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1277                                  ;                               |                                               |
  1278                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1279                                  ;                               |                                               |
  1280                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1281                                  ;                               |  Loader Code                                  |
  1282                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1283                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1284                                  ;
  1285                                  ;=======================================================================================================================
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  ;
  1288                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1289                                  ;
  1290                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1291                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1292                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1293                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1294                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1295                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1296                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1297                                  ;       registers.
  1298                                  ;
  1299                                  ;-----------------------------------------------------------------------------------------------------------------------
  1300                                                          cpu     8086                                            ;assume minimal CPU
  1301                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1302                                                          bits    16                                              ;this is 16-bit code
  1303                                  Loader                  push    cs                                              ;use the code segment
  1304                                                          pop     ds                                              ;...as our data segment
  1305                                                          push    cs                                              ;use the code segment
  1306                                                          pop     es                                              ;...as our extra segment
  1307                                  ;
  1308                                  ;       Write a message to the console so we know we have our addressability established.
  1309                                  ;
  1310                                                          mov     si,czStartingMsg                                ;starting message
  1311                                                          call    PutTTYString                                    ;display loader message
  1312                                  ;
  1313                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1314                                  ;
  1315                                                          call    GetCPUType                                      ;AL = cpu type
  1316                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1317                                                          cmp     al,3                                            ;80386+?
  1318                                                          jb      LoaderExit                                      ;no, exit with error message
  1319                                                          cpu     386                                             ;allow 80386 instructions
  1320                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1321                                                          call    PutTTYString                                    ;display message
  1322                                  ;
  1323                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1324                                  ;
  1325                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1326                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1327                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1328                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1329                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1330                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1331                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1332                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1333                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1334                                                          call    PutTTYString                                    ;display message
  1335                                  ;
  1336                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1337                                  ;
  1338                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1339                                                          pop     es                                              ;... as target segment
  1340                                                          xor     di,di                                           ;ES:DI = target address
  1341                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1342                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1343                                                          cld                                                     ;forward strings
  1344                                                          rep     movsb                                           ;copy kernel image
  1345                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1346                                                          call    PutTTYString                                    ;display message
  1347                                  ;
  1348                                  ;       Switch to protected mode.
  1349                                  ;
  1350                                                          xor     si,si                                           ;ES:SI = gdt addr
  1351                                                          mov     ss,si                                           ;protected mode ss
  1352                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1353                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1354                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1355                                                          mov     dx,001Fh                                        ;outer delay loop count
  1356                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1357                                                          loop    $                                               ;wait out pending interrupts
  1358                                                          dec     dx                                              ;restore outer loop count
  1359                                                          jnz     .10                                             ;continue outer loop
  1360                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1361                                  ;
  1362                                  ;       Enable hardware and maskable interrupts.
  1363                                  ;
  1364                                                          xor     al,al                                           ;enable all registers code
  1365                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1366                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1367                                                          sti                                                     ;enable maskable interrupts
  1368                                  ;
  1369                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1370                                  ;
  1371                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1372                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1373                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1374                                  ;-----------------------------------------------------------------------------------------------------------------------
  1375                                  ;
  1376                                  ;       Routine:        LoaderExit
  1377                                  ;
  1378                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1379                                  ;
  1380                                  ;       In:             DS:SI   string address
  1381                                  ;
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  LoaderExit              call    PutTTYString                                    ;display error message
  1384                                  ;
  1385                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1386                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1387                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1388                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1389                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1390                                  ;
  1391                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1392                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1393                                                          jnz     .40                                             ;exit if key pressed
  1394                                                          sti                                                     ;enable maskable interrupts
  1395                                                          hlt                                                     ;wait for interrupt
  1396                                                          jmp     .30                                             ;repeat until keypress
  1397                                  ;
  1398                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1399                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1400                                  ;       HLT until the system resets.
  1401                                  ;
  1402                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1403                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1404                                  .50                     sti                                                     ;enable maskable interrupts
  1405                                                          hlt                                                     ;stop until reset, int, nmi
  1406                                                          jmp     .50                                             ;loop until restart kicks in
  1407                                  ;-----------------------------------------------------------------------------------------------------------------------
  1408                                  ;
  1409                                  ;       Routine:        GetCPUType
  1410                                  ;
  1411                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1412                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1413                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1414                                  ;
  1415                                  ;       Out:            AX      0 = 808x, v20, etc.
  1416                                  ;                               1 = 80186
  1417                                  ;                               2 = 80286
  1418                                  ;                               3 = 80386
  1419                                  ;
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  GetCPUType              mov     al,1                                            ;AL = 1
  1422                                                          mov     cl,32                                           ;shift count
  1423                                                          shr     al,cl                                           ;try a 32-bit shift
  1424                                                          or      al,al                                           ;did the shift happen?
  1425                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1426                                                          cpu     186
  1427                                                          push    sp                                              ;save stack pointer
  1428                                                          pop     cx                                              ;...into cx
  1429                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1430                                                          jne     .10                                             ;yes, cpu is 80186
  1431                                                          cpu     286
  1432                                                          inc     ax                                              ;AX = 2
  1433                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1434                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1435                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1436                                                          jz      .10                                             ;yes, cpu is 80286
  1437                                                          inc     ax                                              ;AX = 3
  1438                                  .10                     ret                                                     ;return
  1439                                  ;-----------------------------------------------------------------------------------------------------------------------
  1440                                  ;
  1441                                  ;       Routine:        PutTTYString
  1442                                  ;
  1443                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1444                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1445                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1446                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1447                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1448                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1449                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1450                                  ;                       to LODSB is not needed.
  1451                                  ;
  1452                                  ;       In:             DS:SI   address of string
  1453                                  ;
  1454                                  ;       Out:            DF      0
  1455                                  ;                       ZF      1
  1456                                  ;                       AL      0
  1457                                  ;
  1458                                  ;-----------------------------------------------------------------------------------------------------------------------
  1459                                  PutTTYString            cld                                                     ;forward strings
  1460                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1461                                                          test    al,al                                           ;end of string?
  1462                                                          jz      .20                                             ;... yes, exit our loop
  1463                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1464                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1465                                                          jmp     .10                                             ;repeat until done
  1466                                  .20                     ret                                                     ;return
  1467                                  ;-----------------------------------------------------------------------------------------------------------------------
  1468                                  ;
  1469                                  ;       Loader Data
  1470                                  ;
  1471                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1472                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1473                                  ;
  1474                                  ;-----------------------------------------------------------------------------------------------------------------------
  1475                                                          align   2
  1476                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1477                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1478                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1479                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1480                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1481                                                          db      "Please press any key to restart the computer.",13,10,0
  1482                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1483                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1484                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1485                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1486                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1487                                  ;=======================================================================================================================
  1488                                  ;
  1489                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1490                                  ;
  1491                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1492                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1493                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1494                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1495                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1496                                  ;
  1497                                  ;=======================================================================================================================
  1498                                  ;=======================================================================================================================
  1499                                  ;
  1500                                  ;       Kernel Tables
  1501                                  ;
  1502                                  ;=======================================================================================================================
  1503                                  ;-----------------------------------------------------------------------------------------------------------------------
  1504                                  ;
  1505                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1506                                  ;
  1507                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1508                                  ;       first descriptor must be all nulls.
  1509                                  ;
  1510                                  ;       6   5         4         3         2         1         0
  1511                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1512                                  ;       ----------------------------------------------------------------
  1513                                  ;       h......hffffmmmma......ab......................bn..............n
  1514                                  ;
  1515                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1516                                  ;               ffff                                                            flags
  1517                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1518                                  ;                       a......a                                                access
  1519                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1520                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1521                                  ;
  1522                                  ;       00000000                                                                all areas have base addresses below 2^24
  1523                                  ;               0...                                                            single-byte size granularity
  1524                                  ;               1...                                                            4-kilobyte size granularity
  1525                                  ;               .0..                                                            16-bit default for code segments
  1526                                  ;               .1..                                                            32-bit default for code segments
  1527                                  ;               ..0.                                                            intel-reserved; should be zero
  1528                                  ;               ...0                                                            available for operating system use
  1529                                  ;                   0000                                                        segment is less than 2^16 in size
  1530                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1531                                  ;                       1.......                                                segment is present in memory
  1532                                  ;                       .00.....                                                segment is of privilege level 0
  1533                                  ;                       ...0....                                                segment is of system or gate type
  1534                                  ;                       ...00010                                                local decriptor table (LDT)
  1535                                  ;                       ...01001                                                task state segment (TSS) available
  1536                                  ;                       ...01011                                                task state segment (TSS) busy
  1537                                  ;                       ...10...                                                data segment
  1538                                  ;                       ...10011                                                writable data (accessed)
  1539                                  ;                       ...11...                                                code segment
  1540                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1541                                  ;
  1542                                  ;-----------------------------------------------------------------------------------------------------------------------
  1543                                  section                 gdt                                                     ;global descriptor table
  1544                                                          dq      0000000000000000h                               ;00 required null selector
  1545                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1546                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1547                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1548                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1549                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1550                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1551                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1552                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1553                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1554                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1555                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1556                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1557                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1558                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1562                                  ;
  1563                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1564                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1565                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1566                                  ;
  1567                                  ;       6   5         4         3         2         1         0
  1568                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1569                                  ;       ----------------------------------------------------------------
  1570                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1571                                  ;
  1572                                  ;       h...h   high-order offset (bits 16-31)
  1573                                  ;       P       present (0=unused interrupt)
  1574                                  ;       zz      descriptor privilege level
  1575                                  ;       S       storage segment (must be zero for IDT)
  1576                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1577                                  ;       S...S   handling code selector in GDT
  1578                                  ;       l...l   lo-order offset (bits 0-15)
  1579                                  ;
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  section                 idt                                                     ;interrupt descriptor table
  1582                                                          mint    dividebyzero                                    ;00 divide by zero
  1583                                                          mint    singlestep                                      ;01 single step
  1584                                                          mint    nmi                                             ;02 non-maskable
  1585                                                          mint    break                                           ;03 break
  1586                                                          mint    into                                            ;04 into
  1587                                                          mint    bounds                                          ;05 bounds
  1588                                                          mint    badopcode                                       ;06 bad op code
  1589                                                          mint    nocoproc                                        ;07 no coprocessor
  1590                                                          mint    doublefault                                     ;08 double-fault
  1591                                                          mint    operand                                         ;09 operand
  1592                                                          mint    badtss                                          ;0a bad TSS
  1593                                                          mint    notpresent                                      ;0b not-present
  1594                                                          mint    stacklimit                                      ;0c stack limit
  1595                                                          mint    protection                                      ;0d general protection fault
  1596                                                          mint    int14                                           ;0e (reserved)
  1597                                                          mint    int15                                           ;0f (reserved)
  1598                                                          mint    coproccalc                                      ;10 (reserved)
  1599                                                          mint    int17                                           ;11 (reserved)
  1600                                                          mint    int18                                           ;12 (reserved)
  1601                                                          mint    int19                                           ;13 (reserved)
  1602                                                          mint    int20                                           ;14 (reserved)
  1603                                                          mint    int21                                           ;15 (reserved)
  1604                                                          mint    int22                                           ;16 (reserved)
  1605                                                          mint    int23                                           ;17 (reserved)
  1606                                                          mint    int24                                           ;18 (reserved)
  1607                                                          mint    int25                                           ;19 (reserved)
  1608                                                          mint    int26                                           ;1a (reserved)
  1609                                                          mint    int27                                           ;1b (reserved)
  1610                                                          mint    int28                                           ;1c (reserved)
  1611                                                          mint    int29                                           ;1d (reserved)
  1612                                                          mint    int30                                           ;1e (reserved)
  1613                                                          mint    int31                                           ;1f (reserved)
  1614                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1615                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1616                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1617                                                          mtrap   com2                                            ;23 IRQ3 com2
  1618                                                          mtrap   com1                                            ;24 IRQ4 com1
  1619                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1620                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1621                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1622                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1623                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1624                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1625                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1626                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1627                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1628                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1629                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1630                                                          mtrap   svc                                             ;30 OS services
  1631                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1632                                  ;=======================================================================================================================
  1633                                  ;
  1634                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1635                                  ;
  1636                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1637                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1638                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1639                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1640                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1641                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1642                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1643                                  ;
  1644                                  ;=======================================================================================================================
  1645                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1646                                                          cpu     386                                             ;allow 80386 instructions
  1647                                                          bits    32                                              ;this is 32-bit code
  1648                                  ;=======================================================================================================================
  1649                                  ;
  1650                                  ;       CPU Interrupt Handlers
  1651                                  ;
  1652                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1653                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1654                                  ;
  1655                                  ;=======================================================================================================================
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                  ;
  1658                                  ;       INT0    Divide By Zero
  1659                                  ;
  1660                                  ;-----------------------------------------------------------------------------------------------------------------------
  1661                                                          menter  dividebyzero                                    ;divide by zero
  1662                                                          push    0                                               ;store interrupt nbr
  1663                                                          push    czIntDivideByZero                               ;store message offset
  1664                                                          jmp     ReportInterrupt                                 ;report interrupt
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                  ;
  1667                                  ;       INT1    Single Step
  1668                                  ;
  1669                                  ;-----------------------------------------------------------------------------------------------------------------------
  1670                                                          menter  singlestep                                      ;single step
  1671                                                          push    1                                               ;store interrupt nbr
  1672                                                          push    czIntSingleStep                                 ;store message offset
  1673                                                          jmp     ReportInterrupt                                 ;report interrupt
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                  ;
  1676                                  ;       INT2    Non-Maskable Interrupt
  1677                                  ;
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                                          menter  nmi                                             ;non-maskable
  1680                                                          push    2                                               ;store interrupt nbr
  1681                                                          push    czIntNonMaskable                                ;store message offset
  1682                                                          jmp     ReportInterrupt                                 ;report interrupt
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                  ;
  1685                                  ;       INT3    Break
  1686                                  ;
  1687                                  ;-----------------------------------------------------------------------------------------------------------------------
  1688                                                          menter  break                                           ;break
  1689                                                          push    3                                               ;store interrupt nbr
  1690                                                          push    czIntBreak                                      ;store message offset
  1691                                                          jmp     ReportInterrupt                                 ;report interrupt
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                  ;
  1694                                  ;       INT4    Into
  1695                                  ;
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                                          menter  into                                            ;into
  1698                                                          push    4                                               ;store interrupt nbr
  1699                                                          push    czIntInto                                       ;store message offset
  1700                                                          jmp     ReportInterrupt                                 ;report interrupt
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                  ;
  1703                                  ;       INT5    Bounds
  1704                                  ;
  1705                                  ;-----------------------------------------------------------------------------------------------------------------------
  1706                                                          menter  bounds                                          ;bounds
  1707                                                          push    5                                               ;store interrupt nbr
  1708                                                          push    czIntBounds                                     ;store message offset
  1709                                                          jmp     ReportInterrupt                                 ;report interrupt
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                  ;
  1712                                  ;       INT6    Bad Operation Code
  1713                                  ;
  1714                                  ;-----------------------------------------------------------------------------------------------------------------------
  1715                                                          menter  badopcode                                       ;bad opcode interrupt
  1716                                                          push    6                                               ;store interrupt nbr
  1717                                                          push    czIntBadOpCode                                  ;store message offset
  1718                                                          jmp     ReportInterrupt                                 ;report interrupt
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                  ;
  1721                                  ;       INT7    No Coprocessor
  1722                                  ;
  1723                                  ;-----------------------------------------------------------------------------------------------------------------------
  1724                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1725                                                          push    7                                               ;store interrupt nbr
  1726                                                          push    czIntNoCoprocessor                              ;store message offset
  1727                                                          jmp     ReportInterrupt                                 ;report interrupt
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                  ;
  1730                                  ;       INT8    Double Fault
  1731                                  ;
  1732                                  ;-----------------------------------------------------------------------------------------------------------------------
  1733                                                          menter  doublefault                                     ;doublefault interrupt
  1734                                                          push    8                                               ;store interrupt nbr
  1735                                                          push    czIntDoubleFault                                ;store message offset
  1736                                                          jmp     ReportInterrupt                                 ;report interrupt
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                  ;
  1739                                  ;       INT9    Operand
  1740                                  ;
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                                          menter  operand                                         ;operand interrupt
  1743                                                          push    9                                               ;store interrupt nbr
  1744                                                          push    czIntOperand                                    ;store message offset
  1745                                                          jmp     ReportInterrupt                                 ;report interrupt
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                  ;
  1748                                  ;       INT10   Bad Task State Segment
  1749                                  ;
  1750                                  ;-----------------------------------------------------------------------------------------------------------------------
  1751                                                          menter  badtss                                          ;bad TSS interrupt
  1752                                                          push    10                                              ;store interrupt nbr
  1753                                                          push    czIntBadTSS                                     ;store message offset
  1754                                                          jmp     ReportInterrupt                                 ;report interrupt
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                  ;
  1757                                  ;       INT11   Not Present
  1758                                  ;
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                                          menter  notpresent                                      ;not present interrupt
  1761                                                          push    11                                              ;store interrupt nbr
  1762                                                          push    czIntNotPresent                                 ;store message offset
  1763                                                          jmp     ReportInterrupt                                 ;report interrupt
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                  ;
  1766                                  ;       INT12   Stack Limit
  1767                                  ;
  1768                                  ;-----------------------------------------------------------------------------------------------------------------------
  1769                                                          menter  stacklimit                                      ;stack limit interrupt
  1770                                                          push    12                                              ;store interrupt nbr
  1771                                                          push    czIntStackLimit                                 ;store message offset
  1772                                                          jmp     ReportInterrupt                                 ;report interrupt
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                  ;
  1775                                  ;       INT13   General Protection Fault
  1776                                  ;
  1777                                  ;-----------------------------------------------------------------------------------------------------------------------
  1778                                                          menter  protection                                      ;protection fault interrupt
  1779                                                          push    13                                              ;store interrupt nbr
  1780                                                          push    czIntProtection                                 ;store message offset
  1781                                                          jmp     ReportInterrupt                                 ;report interrupt
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                  ;
  1784                                  ;       INT14   Reserved
  1785                                  ;
  1786                                  ;-----------------------------------------------------------------------------------------------------------------------
  1787                                                          menter  int14                                           ;(reserved)
  1788                                                          push    14                                              ;store interrupt nbr
  1789                                                          push    czIntReserved                                   ;store message offset
  1790                                                          jmp     ReportInterrupt                                 ;report interrupt
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                  ;
  1793                                  ;       INT15   Reserved
  1794                                  ;
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                                          menter  int15                                           ;(reserved)
  1797                                                          push    15                                              ;store interrupt nbr
  1798                                                          push    czIntReserved                                   ;store message offset
  1799                                                          jmp     ReportInterrupt                                 ;report interrupt
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                  ;
  1802                                  ;       INT16   Coprocessor Calculation
  1803                                  ;
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                                          menter  coproccalc                                      ;coprocessor calculation
  1806                                                          push    16                                              ;store interrupt nbr
  1807                                                          push    czIntCoprocessorCalc                            ;store message offset
  1808                                                          jmp     ReportInterrupt                                 ;report interrupt
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                  ;
  1811                                  ;       INT17   Reserved
  1812                                  ;
  1813                                  ;-----------------------------------------------------------------------------------------------------------------------
  1814                                                          menter  int17                                           ;(reserved)
  1815                                                          push    17                                              ;store interrupt nbr
  1816                                                          push    czIntReserved                                   ;store message offset
  1817                                                          jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT18   Reserved
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  int18                                           ;(reserved)
  1824                                                          push    18                                              ;store interrupt nbr
  1825                                                          push    czIntReserved                                   ;store message offset
  1826                                                          jmp     ReportInterrupt                                 ;report interrupt
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                  ;
  1829                                  ;       INT19   Reserved
  1830                                  ;
  1831                                  ;-----------------------------------------------------------------------------------------------------------------------
  1832                                                          menter  int19                                           ;(reserved)
  1833                                                          push    19                                              ;store interrupt nbr
  1834                                                          push    czIntReserved                                   ;store message offset
  1835                                                          jmp     ReportInterrupt                                 ;report interrupt
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;       INT20   Reserved
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                                          menter  int20                                           ;(reserved)
  1842                                                          push    20                                              ;store interrupt nbr
  1843                                                          push    czIntReserved                                   ;store message offset
  1844                                                          jmp     ReportInterrupt                                 ;report interrupt
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                  ;
  1847                                  ;       INT21   Reserved
  1848                                  ;
  1849                                  ;-----------------------------------------------------------------------------------------------------------------------
  1850                                                          menter  int21                                           ;(reserved)
  1851                                                          push    21                                              ;store interrupt nbr
  1852                                                          push    czIntReserved                                   ;store message offset
  1853                                                          jmp     ReportInterrupt                                 ;report interrupt
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                  ;
  1856                                  ;       INT22   Reserved
  1857                                  ;
  1858                                  ;-----------------------------------------------------------------------------------------------------------------------
  1859                                                          menter  int22                                           ;(reserved)
  1860                                                          push    22                                              ;store interrupt nbr
  1861                                                          push    czIntReserved                                   ;store message offset
  1862                                                          jmp     ReportInterrupt                                 ;report interrupt
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                  ;
  1865                                  ;       INT23   Reserved
  1866                                  ;
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                                          menter  int23                                           ;(reserved)
  1869                                                          push    23                                              ;store interrupt nbr
  1870                                                          push    czIntReserved                                   ;store message offset
  1871                                                          jmp     ReportInterrupt                                 ;report interrupt
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                  ;
  1874                                  ;       INT24   Reserved
  1875                                  ;
  1876                                  ;-----------------------------------------------------------------------------------------------------------------------
  1877                                                          menter  int24                                           ;(reserved)
  1878                                                          push    24                                              ;store interrupt nbr
  1879                                                          push    czIntReserved                                   ;store message offset
  1880                                                          jmp     ReportInterrupt                                 ;report interrupt
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                  ;
  1883                                  ;       INT25   Reserved
  1884                                  ;
  1885                                  ;-----------------------------------------------------------------------------------------------------------------------
  1886                                                          menter  int25                                           ;(reserved)
  1887                                                          push    25                                              ;store interrupt nbr
  1888                                                          push    czIntReserved                                   ;store message offset
  1889                                                          jmp     ReportInterrupt                                 ;report interrupt
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                  ;
  1892                                  ;       INT26   Reserved
  1893                                  ;
  1894                                  ;-----------------------------------------------------------------------------------------------------------------------
  1895                                                          menter  int26                                           ;(reserved)
  1896                                                          push    26                                              ;store interrupt nbr
  1897                                                          push    czIntReserved                                   ;store message offset
  1898                                                          jmp     ReportInterrupt                                 ;report interrupt
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;       INT27   Reserved
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                                          menter  int27                                           ;(reserved)
  1905                                                          push    27                                              ;store interrupt nbr
  1906                                                          push    czIntReserved                                   ;store message offset
  1907                                                          jmp     ReportInterrupt                                 ;report interrupt
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  ;
  1910                                  ;       INT28   Reserved
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                                          menter  int28                                           ;(reserved)
  1914                                                          push    28                                              ;store interrupt nbr
  1915                                                          push    czIntReserved                                   ;store message offset
  1916                                                          jmp     ReportInterrupt                                 ;report interrupt
  1917                                  ;-----------------------------------------------------------------------------------------------------------------------
  1918                                  ;
  1919                                  ;       INT29   Reserved
  1920                                  ;
  1921                                  ;-----------------------------------------------------------------------------------------------------------------------
  1922                                                          menter  int29                                           ;(reserved)
  1923                                                          push    29                                              ;store interrupt nbr
  1924                                                          push    czIntReserved                                   ;store message offset
  1925                                                          jmp     ReportInterrupt                                 ;report interrupt
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  ;
  1928                                  ;       INT30   Reserved
  1929                                  ;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                                          menter  int30                                           ;(reserved)
  1932                                                          push    30                                              ;store interrupt nbr
  1933                                                          push    czIntReserved                                   ;store message offset
  1934                                                          jmp     ReportInterrupt                                 ;report interrupt
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       INT31   Reserved
  1938                                  ;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                                          menter  int31                                           ;(reserved)
  1941                                                          push    31                                              ;store interrupt nbr
  1942                                                          push    czIntReserved                                   ;store message offset
  1943                                                          jmp     ReportInterrupt                                 ;report interrupt
  1944                                  ;-----------------------------------------------------------------------------------------------------------------------
  1945                                  ;
  1946                                  ;       Routine:        ReportInterrupt
  1947                                  ;
  1948                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1949                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1950                                  ;
  1951                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1952                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1953                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1954                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1955                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1956                                  ;
  1957                                  ;       Out:            N/A             This routine does not exit.
  1958                                  ;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1961                                                          push    es                                              ;save ES at time of interrupt
  1962                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1963                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  1964                                  ;
  1965                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1966                                  ;
  1967                                  ;                       [EBP+60]        EFLAGS
  1968                                  ;                       [EBP+56]        CS
  1969                                  ;                       [EBP+52]        EIP
  1970                                  ;                       [EBP+48]        EIP hi-order
  1971                                  ;                       [EBP+44]        interrupt number (0-31)
  1972                                  ;                       [EBP+40]        error message address
  1973                                  ;                       [EBP+36]        DS
  1974                                  ;                       [EBP+32]        ES
  1975                                  ;                       [EBP+28]        EAX
  1976                                  ;                       [EBP+24]        ECX
  1977                                  ;                       [EBP+20]        EDX
  1978                                  ;                       [EBP+16]        EBX
  1979                                  ;                       [EBP+12]        ESP
  1980                                  ;                       [EBP+8]         EBP
  1981                                  ;                       [EBP+4]         ESI
  1982                                  ;                       [EBP+0]         EDI
  1983                                  ;
  1984                                                          push    cs                                              ;load code selector ...
  1985                                                          pop     ds                                              ;... into DS
  1986                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1987                                                          pop     es                                              ;... into ES
  1988                                  ;
  1989                                  ;       Display the interrupt report boundary box
  1990                                  ;
  1991                                                          mov     cl,13                                           ;column
  1992                                                          mov     ch,6                                            ;row
  1993                                                          mov     dl,50                                           ;width
  1994                                                          mov     dh,8                                            ;height
  1995                                                          mov     bh,07h                                          ;attribute
  1996                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1997                                  ;
  1998                                  ;       Display the report header
  1999                                  ;
  2000                                                          mov     cl,15                                           ;column
  2001                                                          mov     ch,7                                            ;row
  2002                                                          mov     esi,czIntHeader                                 ;interrupt message header
  2003                                                          call    SetConsoleString                                ;draw text string
  2004                                  ;
  2005                                  ;       Display the interrupt description label
  2006                                  ;
  2007                                                          mov     cl,15                                           ;column
  2008                                                          mov     ch,8                                            ;row
  2009                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  2010                                                          call    SetConsoleString                                ;draw text string
  2011                                  ;
  2012                                  ;       Display the interrupt number
  2013                                  ;
  2014                                                          mov     eax,[ebp+44]                                    ;interrupt number
  2015                                                          mov     cl,26                                           ;column
  2016                                                          mov     ch,8                                            ;row
  2017                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  2018                                  ;
  2019                                  ;       Display the interrupt name
  2020                                  ;
  2021                                                          mov     cl,29                                           ;column
  2022                                                          mov     ch,8                                            ;row
  2023                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  2024                                                          call    SetConsoleString                                ;display interrupt description
  2025                                  ;
  2026                                  ;       Display the register values header
  2027                                  ;
  2028                                                          mov     cl,15                                           ;column
  2029                                                          mov     ch,10                                           ;row
  2030                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  2031                                                          call    SetConsoleString                                ;draw text string
  2032                                  ;
  2033                                  ;       Display the EAX register label and value
  2034                                  ;
  2035                                                          mov     cl,15                                           ;column
  2036                                                          mov     ch,11                                           ;row
  2037                                                          mov     esi,czIntEAX                                    ;register EAX label
  2038                                                          call    SetConsoleString                                ;draw label
  2039                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2040                                                          mov     cl,19                                           ;column
  2041                                                          mov     ch,11                                           ;row
  2042                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2043                                  ;
  2044                                  ;       Display the ECX register label and value
  2045                                  ;
  2046                                                          mov     cl,15                                           ;column
  2047                                                          mov     ch,12                                           ;row
  2048                                                          mov     esi,czIntECX                                    ;label
  2049                                                          call    SetConsoleString                                ;draw label
  2050                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2051                                                          mov     cl,19                                           ;column
  2052                                                          mov     ch,12                                           ;row
  2053                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2054                                  ;
  2055                                  ;       Display the EDX register label and value
  2056                                  ;
  2057                                                          mov     cl,15                                           ;column
  2058                                                          mov     ch,13                                           ;row
  2059                                                          mov     esi,czIntEDX                                    ;label
  2060                                                          call    SetConsoleString                                ;draw label
  2061                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2062                                                          mov     cl,19                                           ;column
  2063                                                          mov     ch,13                                           ;row
  2064                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2065                                  ;
  2066                                  ;       Display the EBX register label and value
  2067                                  ;
  2068                                                          mov     cl,15                                           ;column
  2069                                                          mov     ch,14                                           ;row
  2070                                                          mov     esi,czIntEBX                                    ;label
  2071                                                          call    SetConsoleString                                ;draw label
  2072                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2073                                                          mov     cl,19                                           ;column
  2074                                                          mov     ch,14                                           ;row
  2075                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2076                                  ;
  2077                                  ;       Display the ESI register label and value
  2078                                  ;
  2079                                                          mov     cl,29                                           ;column
  2080                                                          mov     ch,11                                           ;row
  2081                                                          mov     esi,czIntESI                                    ;label
  2082                                                          call    SetConsoleString                                ;draw label
  2083                                                          mov     eax,[ebp+4]                                     ;ESI
  2084                                                          mov     cl,33                                           ;column
  2085                                                          mov     ch,11                                           ;row
  2086                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2087                                  ;
  2088                                  ;       Display the EDI register label and value
  2089                                  ;
  2090                                                          mov     cl,29                                           ;column
  2091                                                          mov     ch,12                                           ;row
  2092                                                          mov     esi,czIntEDI                                    ;label
  2093                                                          call    SetConsoleString                                ;draw label
  2094                                                          mov     eax,[ebp+0]                                     ;EDI
  2095                                                          mov     cl,33                                           ;column
  2096                                                          mov     ch,12                                           ;row
  2097                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2098                                  ;
  2099                                  ;       Display the EBP register label and value
  2100                                  ;
  2101                                                          mov     cl,29                                           ;column
  2102                                                          mov     ch,13                                           ;row
  2103                                                          mov     esi,czIntEBP                                    ;label
  2104                                                          call    SetConsoleString                                ;draw label
  2105                                                          mov     eax,[ebp+8]                                     ;EBP
  2106                                                          mov     cl,33                                           ;column
  2107                                                          mov     ch,13                                           ;row
  2108                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2109                                  ;
  2110                                  ;       Display the DS register label and value
  2111                                  ;
  2112                                                          mov     cl,42                                           ;column
  2113                                                          mov     ch,11                                           ;row
  2114                                                          mov     esi,czIntDS                                     ;label
  2115                                                          call    SetConsoleString                                ;draw label
  2116                                                          xor     eax,eax                                         ;zero register
  2117                                                          mov     ax,[ebp+36]                                     ;DS
  2118                                                          mov     cl,46                                           ;column
  2119                                                          mov     ch,11                                           ;row
  2120                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2121                                  ;
  2122                                  ;       Display the ES register label and value
  2123                                  ;
  2124                                                          mov     cl,42                                           ;column
  2125                                                          mov     ch,12                                           ;row
  2126                                                          mov     esi,czIntES                                     ;label
  2127                                                          call    SetConsoleString                                ;draw label
  2128                                                          xor     eax,eax                                         ;zero register
  2129                                                          mov     ax,[ebp+32]                                     ;ES
  2130                                                          mov     cl,46                                           ;column
  2131                                                          mov     ch,12                                           ;row
  2132                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2133                                  ;
  2134                                  ;       Display the SS register label and value
  2135                                  ;
  2136                                                          mov     cl,42                                           ;column
  2137                                                          mov     ch,13                                           ;row
  2138                                                          mov     esi,czIntSS                                     ;label
  2139                                                          call    SetConsoleString                                ;draw label
  2140                                                          xor     eax,eax                                         ;zero register
  2141                                                          mov     ax,ss                                           ;SS
  2142                                                          mov     cl,46                                           ;column
  2143                                                          mov     ch,13                                           ;row
  2144                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2145                                  ;
  2146                                  ;       Display the CS register lable and value
  2147                                  ;
  2148                                                          mov     cl,42                                           ;column
  2149                                                          mov     ch,14                                           ;row
  2150                                                          mov     esi,czIntCS                                     ;label
  2151                                                          call    SetConsoleString                                ;draw label
  2152                                                          xor     eax,eax                                         ;zero register
  2153                                                          mov     ax,[ebp+56]                                     ;CS
  2154                                                          mov     cl,46                                           ;column
  2155                                                          mov     ch,14                                           ;row
  2156                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2157                                  ;
  2158                                  ;       Display the EFLAGS register label and value
  2159                                  ;
  2160                                                          mov     cl,51                                           ;column
  2161                                                          mov     ch,11                                           ;row
  2162                                                          mov     esi,czIntEFLAGS                                 ;label
  2163                                                          call    SetConsoleString                                ;draw label
  2164                                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2165                                                          mov     cl,55                                           ;column
  2166                                                          mov     ch,11                                           ;row
  2167                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2168                                  ;
  2169                                  ;       Display the ESP register label and value
  2170                                  ;
  2171                                                          mov     cl,51                                           ;column
  2172                                                          mov     ch,13                                           ;row
  2173                                                          mov     esi,czIntESP                                    ;label
  2174                                                          call    SetConsoleString                                ;draw label
  2175                                                          mov     eax,[ebp+12]                                    ;ESP
  2176                                                          mov     cl,55                                           ;column
  2177                                                          mov     ch,13                                           ;row
  2178                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2179                                  ;
  2180                                  ;       Display the EIP register label and value
  2181                                  ;
  2182                                                          mov     cl,51                                           ;column
  2183                                                          mov     ch,14                                           ;row
  2184                                                          mov     esi,czIntEIP                                    ;label
  2185                                                          call    SetConsoleString                                ;draw label
  2186                                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2187                                                          mov     cl,55                                           ;column
  2188                                                          mov     ch,14                                           ;row
  2189                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2190                                  ;
  2191                                  ;       Halt and loop until reset
  2192                                  ;
  2193                                  .10                     sti                                                     ;enable maskable interrupts
  2194                                                          hlt                                                     ;halt processor
  2195                                                          jmp     .10                                             ;resume on interrupt
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                  ;
  2198                                  ;       Processor Interrupt Name Strings
  2199                                  ;
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  czIntDivideByZero       db      "Division by zero",0
  2202                                  czIntSingleStep         db      "Single step",0
  2203                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2204                                  czIntBreak              db      "Break",0
  2205                                  czIntInto               db      "Into",0
  2206                                  czIntBounds             db      "Bounds",0
  2207                                  czIntBadOpCode          db      "Bad Operation Code",0
  2208                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2209                                  czIntDoubleFault        db      "Double Fault",0
  2210                                  czIntOperand            db      "Operand",0
  2211                                  czIntBadTSS             db      "Bad Task State Segment",0
  2212                                  czIntNotPresent         db      "Not Present",0
  2213                                  czIntStackLimit         db      "Stack Limit",0
  2214                                  czIntProtection         db      "General Protection Fault",0
  2215                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2216                                  czIntReserved           db      "Reserved",0
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       Processor Interrupt Handling Strings
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2223                                  czIntLabel              db      "Interrupt #",0
  2224                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2225                                  czIntEAX                db      "EAX:",0
  2226                                  czIntECX                db      "ECX:",0
  2227                                  czIntEDX                db      "EDX:",0
  2228                                  czIntEBX                db      "EBX:",0
  2229                                  czIntESI                db      "ESI:",0
  2230                                  czIntEDI                db      "EDI:",0
  2231                                  czIntEBP                db      "EBP:",0
  2232                                  czIntESP                db      "ESP:",0
  2233                                  czIntDS                 db      " DS:",0
  2234                                  czIntES                 db      " ES:",0
  2235                                  czIntSS                 db      " SS:",0
  2236                                  czIntCS                 db      " CS:",0
  2237                                  czIntEFLAGS             db      "FLG:",0
  2238                                  czIntEIP                db      "EIP:",0
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  ;
  2241                                  ;       Routine:        DrawTextDialogBox
  2242                                  ;
  2243                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2244                                  ;
  2245                                  ;       In:             CL      upper left column (0-79)
  2246                                  ;                       CH      upper left row (0-24)
  2247                                  ;                       DL      column width, excluding border
  2248                                  ;                       DH      row height, excluding border
  2249                                  ;                       BH      color attribute
  2250                                  ;
  2251                                  ;-----------------------------------------------------------------------------------------------------------------------
  2252                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2253                                                          push    esi                                             ;
  2254                                                          push    edi                                             ;
  2255                                                          push    es                                              ;
  2256                                                          push    EGDTCGA                                         ;load CGA selector ...
  2257                                                          pop     es                                              ;... into ES
  2258                                  ;
  2259                                  ;       Compute target display offset
  2260                                  ;
  2261                                                          xor     eax,eax                                         ;zero register
  2262                                                          mov     al,ch                                           ;row
  2263                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2264                                                          mul     ah                                              ;row offset
  2265                                                          add     al,cl                                           ;add column
  2266                                                          adc     ah,0                                            ;add overflow
  2267                                                          add     al,cl                                           ;add column
  2268                                                          adc     ah,0                                            ;add overflow
  2269                                                          mov     edi,eax                                         ;target row offset
  2270                                  ;
  2271                                  ;       Display top border row
  2272                                  ;
  2273                                                          push    edi                                             ;save target row offset
  2274                                                          mov     ah,bh                                           ;attribute
  2275                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2276                                                          stosw                                                   ;display character and attribute
  2277                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2278                                                          xor     ecx,ecx                                         ;zero register
  2279                                                          mov     cl,dl                                           ;width, excluding border
  2280                                                          rep     stosw                                           ;display horizontal border
  2281                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2282                                                          stosw                                                   ;display character and attribute
  2283                                                          pop     edi                                             ;restore target row offset
  2284                                                          add     edi,ECONROWBYTES                                ;next row
  2285                                  ;
  2286                                  ;       Display dialog box body rows
  2287                                  ;
  2288                                                          xor     ecx,ecx                                         ;zero register
  2289                                                          mov     cl,dh                                           ;height, excluding border
  2290                                  .10                     push    ecx                                             ;save remaining rows
  2291                                                          push    edi                                             ;save target row offset
  2292                                                          mov     ah,bh                                           ;attribute
  2293                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2294                                                          stosw                                                   ;display character and attribute
  2295                                                          mov     al,EASCIISPACE                                  ;space
  2296                                                          xor     ecx,ecx                                         ;zero register
  2297                                                          mov     cl,dl                                           ;width, excluding border
  2298                                                          rep     stosw                                           ;display row
  2299                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2300                                                          stosw                                                   ;display character and attribute
  2301                                                          pop     edi                                             ;restore target row offset
  2302                                                          add     edi,ECONROWBYTES                                ;next row
  2303                                                          pop     ecx                                             ;remaining rows
  2304                                                          loop    .10                                             ;next row
  2305                                  ;
  2306                                  ;       Display bottom border row
  2307                                  ;
  2308                                                          push    edi                                             ;save target row offset
  2309                                                          mov     ah,bh                                           ;attribute
  2310                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2311                                                          stosw                                                   ;display character and attribute
  2312                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2313                                                          xor     ecx,ecx                                         ;zero register
  2314                                                          mov     cl,dl                                           ;width, excluding border
  2315                                                          rep     stosw                                           ;display horizontal border
  2316                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2317                                                          stosw                                                   ;display character and attribute
  2318                                                          pop     edi                                             ;restore target row offset
  2319                                                          add     edi,ECONROWBYTES                                ;next row
  2320                                  ;
  2321                                  ;       Restore and return
  2322                                  ;
  2323                                                          pop     es                                              ;restore non-volatile regs
  2324                                                          pop     edi                                             ;
  2325                                                          pop     esi                                             ;
  2326                                                          pop     ecx                                             ;
  2327                                                          ret                                                     ;return
  2328                                  ;=======================================================================================================================
  2329                                  ;
  2330                                  ;       Hardware Device Interupts
  2331                                  ;
  2332                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2333                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2334                                  ;       (BX=2028h).
  2335                                  ;
  2336                                  ;=======================================================================================================================
  2337                                  ;-----------------------------------------------------------------------------------------------------------------------
  2338                                  ;
  2339                                  ;       IRQ0    Clock Tick Interrupt
  2340                                  ;
  2341                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2342                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2343                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2344                                  ;
  2345                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2346                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2347                                  ;
  2348                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2349                                  ;       zero, the floppy disk motors are turned off.
  2350                                  ;
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                                          menter  clocktick                                       ;clock tick interrupt
  2353                                                          push    eax                                             ;save non-volatile regs
  2354                                                          push    edx                                             ;
  2355                                                          push    ds                                              ;
  2356                                  ;
  2357                                  ;       Update the clock tick count and the elapsed days as needed.
  2358                                  ;
  2359                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2360                                                          pop     ds                                              ;... into data segment register
  2361                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2362                                                          inc     eax                                             ;increment clock ticks
  2363                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2364                                                          jb      irq0.10                                         ;no, skip ahead
  2365                                                          inc     byte [wbClockDays]                              ;increment clock days
  2366                                                          xor     eax,eax                                         ;reset clock ticks
  2367                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2368                                  ;
  2369                                  ;       Decrement floppy disk motor timeout.
  2370                                  ;
  2371                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2372                                                          je      irq0.20                                         ;yes, skip ahead
  2373                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2374                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2375                                  ;
  2376                                  ;       Turn off the floppy disk motor if appropriate.
  2377                                  ;
  2378                                                          sti                                                     ;enable maskable interrupts
  2379                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2380                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2381                                                          in      al,dx                                           ;FDC main status byte
  2382                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2383                                                          jnz     irq0.15                                         ;wait while busy
  2384                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2385                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2386                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2387                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2388                                                          out     dx,al                                           ;turn motor off
  2389                                  ;
  2390                                  ;       Signal the end of the hardware interrupt.
  2391                                  ;
  2392                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2393                                  ;
  2394                                  ;       Restore and return.
  2395                                  ;
  2396                                                          pop     ds                                              ;restore modified regs
  2397                                                          pop     edx                                             ;
  2398                                                          pop     eax                                             ;
  2399                                                          iretd                                                   ;return
  2400                                  ;-----------------------------------------------------------------------------------------------------------------------
  2401                                  ;
  2402                                  ;       IRQ1    Keyboard Interrupt
  2403                                  ;
  2404                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2405                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2406                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2407                                  ;       ALL modified registers upon return.
  2408                                  ;
  2409                                  ;-----------------------------------------------------------------------------------------------------------------------
  2410                                                          menter  keyboard                                        ;keyboard interrrupt
  2411                                                          push    eax                                             ;save non-volatile regs
  2412                                                          push    ebx                                             ;
  2413                                                          push    ecx                                             ;
  2414                                                          push    esi                                             ;
  2415                                                          push    ds                                              ;
  2416                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2417                                                          pop     ds                                              ;... into data segment register
  2418                                                          xor     al,al                                           ;zero
  2419                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2420                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2421                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2422                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2423                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2424                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2425                                                          mov     al,' '                                          ;space
  2426                                                          mov     [wbConsoleChar],al                              ;set character to space
  2427                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2428                                                          not     al                                              ;controller timeout mask
  2429                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2430                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2431                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2432                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2433                                                          jz      irq1.140                                        ;yes, skip ahead
  2434                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2435                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2436                                                          mov     ah,al                                           ;copy scan code 0
  2437                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2438                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2439                                                          je      irq1.30                                         ;yes, set flag
  2440                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2441                                                          je      irq1.40                                         ;yes, reset flag
  2442                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2443                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2444                                                          je      irq1.30                                         ;yes, set flag
  2445                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2446                                                          je      irq1.40                                         ;yes, reset flag
  2447                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2448                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2449                                                          je      irq1.30                                         ;yes, set flag
  2450                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2451                                                          je      irq1.40                                         ;yes, reset flag
  2452                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2453                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2454                                                          je      irq1.30                                         ;yes, set flag
  2455                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2456                                                          je      irq1.40                                         ;yes, reset flag
  2457                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2458                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2459                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2460                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2461                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2462                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2463                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2464                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2465                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2466                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2467                                                          jne     irq1.70                                         ;no, skip ahead
  2468                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2469                                                          jz      irq1.140                                        ;yes, skip ahead
  2470                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2471                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2472                                                          mov     ah,al                                           ;copy scan code 1
  2473                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2474                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2475                                                          je      irq1.30                                         ;yes, set flag
  2476                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2477                                                          je      irq1.40                                         ;yes, reset flag
  2478                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2479                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2480                                                          je      irq1.30                                         ;yes, set flag
  2481                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2482                                                          je      irq1.40                                         ;yes, reset flag
  2483                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2484                                                          je      irq1.80                                         ;yes, skip ahead
  2485                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2486                                                          je      irq1.80                                         ;yes, skip ahead
  2487                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2488                                                          je      irq1.10                                         ;yes, continue
  2489                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2490                                                          jne     irq1.20                                         ;no, skip ahead
  2491                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2492                                                          jz      irq1.140                                        ;yes, skip ahead
  2493                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2494                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2495                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2496                                                          jz      irq1.140                                        ;yes, skip ahead
  2497                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2498                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2499                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2500                                  irq1.30                 or      bl,al                                           ;set shift flag
  2501                                                          jmp     irq1.60                                         ;skip ahead
  2502                                  irq1.40                 not     al                                              ;convert flag to mask
  2503                                                          and     bl,al                                           ;reset shift flag
  2504                                                          jmp     irq1.60                                         ;skip ahead
  2505                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2506                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2507                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2508                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2509                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2510                                                          jmp     irq1.150                                        ;finish keyboard handling
  2511                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2512                                                          jne     irq1.80                                         ;no continue
  2513                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2514                                                          jz      irq1.140                                        ;yes, skip ahead
  2515                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2516                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2517                                                          mov     ah,al                                           ;copy scan code 1
  2518                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2519                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2520                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2521                                                          jz      irq1.140                                        ;yes, skip ahead
  2522                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2523                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2524                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2525                                                          jz      irq1.140                                        ;yes, skip ahead
  2526                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2527                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2528                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2529                                                          jz      irq1.140                                        ;yes, skip ahead
  2530                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2531                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2532                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2533                                                          jz      irq1.140                                        ;yes, skip ahead
  2534                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2535                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2536                                                          jmp     irq1.150                                        ;continue
  2537                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2538                                                          test    ah,EKEYBUP                                      ;release code?
  2539                                                          jnz     irq1.130                                        ;yes, skip ahead
  2540                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2541                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2542                                                          jz      irq1.90                                         ;no, skip ahead
  2543                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2544                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2545                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2546                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2547                                                          jz      irq1.100                                        ;no skip ahead
  2548                                                          mov     cl,al                                           ;copy ASCII code
  2549                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2550                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2551                                                          jb      irq1.100                                        ;yes, skip ahead
  2552                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2553                                                          ja      irq1.100                                        ;yes, skip ahead
  2554                                                          xor     al,EASCIICASE                                   ;switch case
  2555                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2556                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2557                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2558                                                          jz      irq1.120                                        ;no, skip ahead
  2559                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2560                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2561                                                          or      edx,eax                                         ;msg id and codes
  2562                                                          xor     ecx,ecx                                         ;null param
  2563                                                          push    eax                                             ;save codes
  2564                                                          call    PutMessage                                      ;put message to console
  2565                                                          pop     eax                                             ;restore codes
  2566                                                          test    al,al                                           ;ASCII translation?
  2567                                                          jz      irq1.130                                        ;no, skip ahead
  2568                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2569                                                          and     eax,0FFFFh                                      ;clear high-order word
  2570                                                          or      edx,eax                                         ;msg id and codes
  2571                                                          xor     ecx,ecx                                         ;null param
  2572                                                          call    PutMessage                                      ;put message to console
  2573                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2574                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2575                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2576                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2577                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2578                                                          pop     ds                                              ;restore non-volatile regs
  2579                                                          pop     esi                                             ;
  2580                                                          pop     ecx                                             ;
  2581                                                          pop     ebx                                             ;
  2582                                                          pop     eax                                             ;
  2583                                                          iretd                                                   ;return
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                  ;       Scan-Code to ASCII Translation Tables
  2586                                  ;-----------------------------------------------------------------------------------------------------------------------
  2587                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2588                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2589                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2590                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2591                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2592                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2593                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2594                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2595                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2596                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2597                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2598                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2599                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2600                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2601                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2602                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2603                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2604                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2605                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2606                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2607                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2608                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2609                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2610                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2611                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2612                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2613                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2614                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2615                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2616                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2617                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2618                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  iochannel                                       ;secondary 8259A cascade
  2625                                                          push    eax                                             ;save modified regs
  2626                                                          jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  com2                                            ;serial port 2 interrupt
  2633                                                          push    eax                                             ;save modified regs
  2634                                                          jmp     hwint                                           ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  com1                                            ;serial port 1 interrupt
  2641                                                          push    eax                                             ;save modified regs
  2642                                                          jmp     hwint                                           ;end interrupt and return
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  ;
  2645                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2646                                  ;
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2649                                                          push    eax                                             ;save modified regs
  2650                                                          jmp     hwint                                           ;end interrupt and return
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  ;
  2653                                  ;       IRQ6    Diskette Hardware Interrupt
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                                          menter  diskette                                        ;floppy disk interrupt
  2657                                                          push    eax                                             ;save non-volatile regs
  2658                                                          push    ds                                              ;
  2659                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2660                                                          pop     ds                                              ;... into DS register
  2661                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2662                                                          or      al,10000000b                                    ;set IRQ flag
  2663                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2664                                                          pop     ds                                              ;restore non-volatile regs
  2665                                                          jmp     hwint                                           ;end primary PIC interrupt
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2672                                                          push    eax                                             ;save modified regs
  2673                                                          jmp     hwint                                           ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  rtclock                                         ;real-time clock interrupt
  2680                                                          push    eax                                             ;save modified regs
  2681                                                          jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2688                                                          push    eax                                             ;save modified regs
  2689                                                          jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ10   Reserved Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  irq10                                           ;reserved
  2696                                                          push    eax                                             ;save modified regs
  2697                                                          jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ11   Reserved Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  irq11                                           ;reserved
  2704                                                          push    eax                                             ;save modified regs
  2705                                                          jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2712                                                          push    eax                                             ;save modified regs
  2713                                                          jmp     hwwint                                          ;end interrupt and return
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                  ;
  2716                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2717                                  ;
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                                          menter  coprocessor                                     ;coprocessor interrupt
  2720                                                          push    eax                                             ;save modified regs
  2721                                                          jmp     hwwint                                          ;end interrupt and return
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                  ;
  2724                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2725                                  ;
  2726                                  ;-----------------------------------------------------------------------------------------------------------------------
  2727                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2728                                                          push    eax                                             ;save modified regs
  2729                                                          jmp     hwwint                                          ;end interrupt and return
  2730                                  ;-----------------------------------------------------------------------------------------------------------------------
  2731                                  ;
  2732                                  ;       IRQ15   Reserved Hardware Interrupt
  2733                                  ;
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                                          menter  irq15                                           ;reserved
  2736                                                          push    eax                                             ;save modified regs
  2737                                                          jmp     hwwint                                          ;end interrupt and return
  2738                                  ;-----------------------------------------------------------------------------------------------------------------------
  2739                                  ;
  2740                                  ;       Exit from hardware interrupt
  2741                                  ;
  2742                                  ;-----------------------------------------------------------------------------------------------------------------------
  2743                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2744                                                          jmp     hwint90                                         ;skip ahead
  2745                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2746                                  hwint90                 pop     eax                                             ;restore modified regs
  2747                                                          iretd                                                   ;return from interrupt
  2748                                  ;-----------------------------------------------------------------------------------------------------------------------
  2749                                  ;
  2750                                  ;       INT 30h Operating System Software Service Interrupt
  2751                                  ;
  2752                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2753                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2754                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2755                                  ;       the entry address of the specific function from a table.
  2756                                  ;
  2757                                  ;-----------------------------------------------------------------------------------------------------------------------
  2758                                                          menter  svc
  2759                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2760                                                          jae     svc90                                           ;yes, skip ahead
  2761                                                          movzx   eax,al                                          ;function
  2762                                                          shl     eax,2                                           ;offset into table
  2763                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2764                                  svc90                   iretd                                                   ;return from interrupt
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                  ;
  2767                                  ;       Service Request Table
  2768                                  ;
  2769                                  ;
  2770                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  tsvc                    tsvce   AllocateMemory                                  ;allocate memory block
  2774                                                          tsvce   ClearConsoleScreen                              ;clear console screen
  2775                                                          tsvce   CompareMemory                                   ;compare memory
  2776                                                          tsvce   DecimalToUnsigned                               ;convert decimal string to unsigned integer
  2777                                                          tsvce   FreeMemory                                      ;free memory block
  2778                                                          tsvce   GetConsoleString                                ;get string input
  2779                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2780                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2781                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2782                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2783                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2784                                                          tsvce   UpperCaseString                                 ;upper-case string
  2785                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                  ;
  2788                                  ;       Service Request Macros
  2789                                  ;
  2790                                  ;       These macros provide positional parameterization of service request calls.
  2791                                  ;
  2792                                  ;-----------------------------------------------------------------------------------------------------------------------
  2793                                  %macro                  allocateMemory 1
  2794                                                          mov     ecx,%1                                          ;bytes to allocate
  2795                                                          mov     al,eAllocateMemory                              ;allocate memory fn.
  2796                                                          int     _svc                                            ;invoke OS service
  2797                                  %endmacro
  2798                                  %macro                  clearConsoleScreen 0
  2799                                                          mov     al,eClearConsoleScreen                          ;function code
  2800                                                          int     _svc                                            ;invoke OS service
  2801                                  %endmacro
  2802                                  %macro                  compareMemory 0
  2803                                                          mov     al,eCompareMemory                               ;function code
  2804                                                          int     _svc                                            ;invoke OS service
  2805                                  %endmacro
  2806                                  %macro                  decimalToUnsigned 0
  2807                                                          mov     al,eDecimalToUnsigned                           ;function code
  2808                                                          int     _svc                                            ;invoke OS servie
  2809                                  %endmacro
  2810                                  %macro                  freeMemory 1
  2811                                                          mov     edx,%1                                          ;address of memory block
  2812                                                          mov     al,eFreeMemory                                  ;function code
  2813                                                          int     _svc                                            ;invoke OS service
  2814                                  %endmacro
  2815                                  %macro                  getConsoleString 4
  2816                                                          mov     edx,%1                                          ;buffer address
  2817                                                          mov     ecx,%2                                          ;max characters
  2818                                                          mov     bh,%3                                           ;echo indicator
  2819                                                          mov     bl,%4                                           ;terminator
  2820                                                          mov     al,eGetConsoleString                            ;function code
  2821                                                          int     _svc                                            ;invoke OS service
  2822                                  %endmacro
  2823                                  %macro                  hexadecimalToUnsigned 0
  2824                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2825                                                          int     _svc                                            ;invoke OS service
  2826                                  %endmacro
  2827                                  %macro                  placeCursor 0
  2828                                                          mov     al,ePlaceCursor                                 ;function code
  2829                                                          int     _svc                                            ;invoke OS service
  2830                                  %endmacro
  2831                                  %macro                  putConsoleString 1
  2832                                                          mov     edx,%1                                          ;string address
  2833                                                          mov     al,ePutConsoleString                            ;function code
  2834                                                          int     _svc                                            ;invoke OS service
  2835                                  %endmacro
  2836                                  %macro                  resetSystem 0
  2837                                                          mov     al,eResetSystem                                 ;function code
  2838                                                          int     _svc                                            ;invoke OS service
  2839                                  %endmacro
  2840                                  %macro                  unsignedToHexadecimal 0
  2841                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2842                                                          int     _svc                                            ;invoke OS service
  2843                                  %endmacro
  2844                                  %macro                  upperCaseString 0
  2845                                                          mov     al,eUpperCaseString                             ;function code
  2846                                                          int     _svc                                            ;invoke OS service
  2847                                  %endmacro
  2848                                  ;=======================================================================================================================
  2849                                  ;
  2850                                  ;       Kernel Function Library
  2851                                  ;
  2852                                  ;=======================================================================================================================
  2853                                  ;=======================================================================================================================
  2854                                  ;
  2855                                  ;       Memory Helper Routines
  2856                                  ;
  2857                                  ;       AllocateMemory
  2858                                  ;       FreeMemory
  2859                                  ;
  2860                                  ;=======================================================================================================================
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                  ;
  2863                                  ;       Routine:        AllocateMemory
  2864                                  ;
  2865                                  ;       Description:    This routine allocates a memory block for the given task.
  2866                                  ;
  2867                                  ;       In:             ECX     bytes of memory to allocate
  2868                                  ;
  2869                                  ;       Out:            EAX     !0      address of user portion of newly allocated memory block
  2870                                  ;                               0       unable to allocate memory
  2871                                  ;
  2872                                  ;-----------------------------------------------------------------------------------------------------------------------
  2873                                  AllocateMemory          push    ebx                                             ;save non-volatile regs
  2874                                                          push    ecx                                             ;
  2875                                                          push    esi                                             ;
  2876                                                          push    ds                                              ;
  2877                                  ;
  2878                                  ;       Address kernel memory structures
  2879                                  ;
  2880                                                          push    EGDTOSDATA                                      ;load OS data GDT selector ...
  2881                                                          pop     ds                                              ;... into data segment reg
  2882                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure address
  2883                                  ;
  2884                                  ;       Set requested size to minimum block size if requested size is too small.
  2885                                  ;
  2886                                                          cmp     ecx,EMEMMINSIZE                                 ;is requested size too small?
  2887                                                          jae     .10                                             ;no, branch
  2888                                                          mov     ecx,EMEMMINSIZE                                 ;set requested size to minimum
  2889                                  .10                     add     ecx,EMEMBLOCKLEN                                ;add header block length
  2890                                  ;
  2891                                  ;       Find the first free memory block large enough to satisfy the request.
  2892                                  ;
  2893                                                          mov     eax,[esi+MEMROOT.firstfree]                     ;first free block ptr
  2894                                  .20                     test    eax,eax                                         ;end of free block chain?
  2895                                                          jz      .220                                            ;yes, branch
  2896                                                          cmp     ecx,[eax+MEMBLOCK.bytes]                        ;free block big enough?
  2897                                                          jbe     .30                                             ;yes, branch
  2898                                                          mov     eax,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2899                                                          jmp     .20                                             ;continue
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  ;
  2902                                  ;       Address the previous and next free memory blocks.
  2903                                  ;
  2904                                  .30                     mov     ebx,[eax+MEMBLOCK.previousblock]                ;previous free block addr
  2905                                                          mov     edx,[eax+MEMBLOCK.nextblock]                    ;next free block addr
  2906                                  ;
  2907                                  ;       Remove the free memory block from the forward free memory block chain.
  2908                                  ;
  2909                                                          test    ebx,ebx                                         ;any previous free memory block?
  2910                                                          jz      .40                                             ;no, branch
  2911                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;remove free block from forwrad chain
  2912                                                          jmp     .50                                             ;continue
  2913                                  .40                     mov     [esi+MEMROOT.firstfree],edx                     ;next free is now also the first free
  2914                                  ;
  2915                                  ;       Remove the free memory block from the reverse free memory block chain.
  2916                                  ;
  2917                                  .50                     test    edx,edx                                         ;any next free memory block?
  2918                                                          jz      .60                                             ;no, branch
  2919                                                          mov     [edx+MEMBLOCK.previousblock],ebx                ;remove free block from reverse chain
  2920                                                          jmp     .70                                             ;continue
  2921                                  .60                     mov     [esi+MEMROOT.lastfree],ebx                      ;previous free is now also the last free
  2922                                  ;-----------------------------------------------------------------------------------------------------------------------
  2923                                  ;
  2924                                  ;       Determine if the free memory block can be split.
  2925                                  ;
  2926                                  .70                     mov     ebx,[eax+MEMBLOCK.bytes]                        ;size of free memory block
  2927                                                          sub     ebx,ecx                                         ;subtract requested memory size
  2928                                                          cmp     ebx,EMEMMINSIZE                                 ;remaining block can stand alone?
  2929                                                          jb      .150                                            ;no, branch
  2930                                  ;
  2931                                  ;       We know that our block can be split to create a new free memory block. We update the size of our free memory
  2932                                  ;       block to the requested memory size. We update the next contiguous block pointer to point just past the end
  2933                                  ;       of the requested memory size.
  2934                                  ;
  2935                                                          mov     [eax+MEMBLOCK.bytes],ecx                        ;shorten memory block size
  2936                                                          mov     edx,eax                                         ;memory block address
  2937                                                          add     edx,ecx                                         ;address new new next contig block
  2938                                                          mov     ecx,[eax+MEMBLOCK.nextcontig]                   ;next contig block address
  2939                                                          mov     [eax+MEMBLOCK.nextcontig],edx                   ;update next contig block address
  2940                                  ;
  2941                                  ;       If there is a next contiguous block, we update that memory block's previous contig pointer to point to the new
  2942                                  ;       free block we are splitting off. If there is no next contiguous block, we update the last contig block pointer.
  2943                                  ;
  2944                                                          jecxz   .80                                             ;no next contig, branch
  2945                                                          mov     [ecx+MEMBLOCK.previouscontig],edx               ;update previous contig pointer
  2946                                                          jmp     .90                                             ;continue
  2947                                  .80                     mov     [esi+MEMROOT.lastcontig],edx                    ;update last contig pointer
  2948                                  ;
  2949                                  ;       Now that the contig block pointers have been updated, we initialize the new free block members.
  2950                                  ;
  2951                                  .90                     mov     [edx+MEMBLOCK.bytes],ebx                        ;set the block size
  2952                                                          mov     [edx+MEMBLOCK.nextcontig],ecx                   ;set the next contig block addr
  2953                                                          mov     [edx+MEMBLOCK.previouscontig],eax               ;set the previous contig block addr
  2954                                                          mov     ebx,EMEMFREECODE                                ;free memory signature
  2955                                                          mov     [edx+MEMBLOCK.signature],ebx                    ;set the block signature
  2956                                                          xor     ebx,ebx                                         ;zero register
  2957                                                          mov     [edx+MEMBLOCK.reserved],ebx                     ;set reserved
  2958                                                          mov     [edx+MEMBLOCK.owner],ebx                        ;set the owner
  2959                                  ;
  2960                                  ;       Find the proper location in the free block chain for the new free block
  2961                                  ;
  2962                                                          mov     ebx,[edx+MEMBLOCK.bytes]                        ;free block size
  2963                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block addr
  2964                                  .100                    jecxz   .110                                            ;branch if at end of chain
  2965                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;new block smaller or equal?
  2966                                                          jbe     .110                                            ;yes, branch
  2967                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free block addr
  2968                                                          jmp     .100                                            ;continue
  2969                                  ;
  2970                                  ;       Having found the proper location for our new free block, we store the address of the following free block, or
  2971                                  ;       zero if our new free block is larger than any other, as our next free block. Then, we take the address of our
  2972                                  ;       next block's previous block or the global last-free block as our new previous block and update the previous
  2973                                  ;       block of hte next block, if there is one.
  2974                                  ;
  2975                                  .110                    mov     [edx+MEMBLOCK.nextblock],ecx                    ;set the new free block's next ptr
  2976                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;last free block addr
  2977                                                          jecxz   .120                                            ;branch if no next block
  2978                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block
  2979                                                          mov     [ecx+MEMBLOCK.previousblock],edx                ;set the next block's previous block
  2980                                                          jmp     .130                                            ;continue
  2981                                  .120                    mov     [esi+MEMROOT.lastfree],edx                      ;set the new last free block
  2982                                  ;
  2983                                  ;       Store our previous block pointer. If we have a previous free block, update that block's next block pointer to
  2984                                  ;       point to the new block. Since the new block may now be the first or last user block, we update the first and/or
  2985                                  ;       last user block pointers if necessary.
  2986                                  ;
  2987                                  .130                    mov     [edx+MEMBLOCK.previousblock],ebx                ;set the previous block pointer
  2988                                                          test    ebx,ebx                                         ;is there a previous block?
  2989                                                          jz      .140                                            ;no, branch
  2990                                                          mov     [ebx+MEMBLOCK.nextblock],edx                    ;set the previous block's next ptr
  2991                                                          jmp     .150                                            ;continue
  2992                                  .140                    mov     [esi+MEMROOT.firstfree],edx                     ;set the new first free ptr
  2993                                  ;
  2994                                  ;       Update the newly allocated block's owner and signature.
  2995                                  ;
  2996                                  .150                    mov     edx,EMEMUSERCODE                                ;user memory signature
  2997                                                          mov     [eax+MEMBLOCK.signature],edx                    ;set the block signature
  2998                                                          xor     edx,edx                                         ;zero register
  2999                                                          str     dx                                              ;load the task state register
  3000                                                          mov     [eax+MEMBLOCK.owner],edx                        ;set the block owner
  3001                                  ;
  3002                                  ;       Remove the allocated block from the free block chain and insert it into the user block chain.
  3003                                  ;
  3004                                                          mov     ecx,[esi+MEMROOT.firsttask]                     ;first task block
  3005                                  .160                    jecxz   .180                                            ;branch if at end of chain
  3006                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;does this block belong to the task?
  3007                                                          jb      .180                                            ;branch if block belongs to next task
  3008                                                          je      .170                                            ;branch if block belongs to this task
  3009                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next task block
  3010                                                          jmp     .160                                            ;continue
  3011                                  ;
  3012                                  ;       We have found the start of our task's user block chain or the start of the next task's user block chain. If we
  3013                                  ;       have found the next task's chain, then we have no other user memory for this task and we can simply add the
  3014                                  ;       block here. If we are at the start of our task's user block chain, then we need to further seek for the proper
  3015                                  ;       place to insert the block.
  3016                                  ;
  3017                                  .170                    mov     edx,[eax+MEMBLOCK.bytes]                        ;size of block in bytes
  3018                                                          cmp     edx,[ecx+MEMBLOCK.bytes]                        ;less or equal to chain block?
  3019                                                          jbe     .180                                            ;yes, branch
  3020                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next chain block address
  3021                                                          test    ecx,ecx                                         ;end of chain?
  3022                                                          jz      .180                                            ;yes, branch
  3023                                                          mov     edx,[eax+MEMBLOCK.owner]                        ;owning task
  3024                                                          cmp     edx,[ecx+MEMBLOCK.owner]                        ;same task?
  3025                                                          je      .170                                            ;yes, continue search
  3026                                  ;
  3027                                  ;       We have found the proper place in our task's user-block chain to insert our new user block. It may also be the
  3028                                  ;       end of the user-block chain. To insert our new user block, first we update the next-block pointer. Then, we load
  3029                                  ;       the next-block's previous-block pointer or the global last-user block pointer if we have no next-block. If we
  3030                                  ;       do have a previous-block, we update that block's next-block pointer.
  3031                                  ;
  3032                                  .180                    mov     [eax+MEMBLOCK.nextblock],ecx                    ;set the next task block
  3033                                                          mov     ebx,[esi+MEMROOT.lasttask]                      ;last task block
  3034                                                          jecxz   .190                                            ;branch if no next-task block
  3035                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next-task's previous-task block
  3036                                                          mov     [ecx+MEMBLOCK.previousblock],eax                ;update next-task block's previous-task
  3037                                                          jmp     .200                                            ;continue
  3038                                  .190                    mov     [esi+MEMROOT.lasttask],eax                      ;new block is the last user-block
  3039                                  ;
  3040                                  ;       Now wes tore our previous-block pointer and, if we have a previous-free block, we update that block's next-
  3041                                  ;       block pointer to point to our block. Since our block may now be the first or last user-block, we update the
  3042                                  ;       global first and/or last user-block pointers if necessary.
  3043                                  ;
  3044                                  .200                    mov     [eax+MEMBLOCK.previousblock],ebx                ;set the previous task block
  3045                                                          test    ebx,ebx                                         ;do we have a previous task block?
  3046                                                          jz      .210                                            ;no, branch
  3047                                                          mov     [ebx+MEMBLOCK.nextblock],eax                    ;set previous-block's next-task block
  3048                                                          jmp     .220                                            ;continue
  3049                                  .210                    mov     [esi+MEMROOT.firsttask],eax                     ;new block is the first user-block
  3050                                  ;
  3051                                  ;       Restore registers and return to caller.
  3052                                  ;
  3053                                  .220                    pop     ds                                              ;restore non-volatie regs
  3054                                                          pop     esi                                             ;
  3055                                                          pop     ecx                                             ;
  3056                                                          pop     ebx                                             ;
  3057                                                          ret                                                     ;return
  3058                                  ;-----------------------------------------------------------------------------------------------------------------------
  3059                                  ;
  3060                                  ;       Routine:        FreeMemory
  3061                                  ;
  3062                                  ;       Description:    This routine frees a memory block for the given task. The address provided in EDX points to the
  3063                                  ;                       memory block header. The memory block must be USER memory, not a FREE memory block. If the block
  3064                                  ;                       is adjacent to a contiguous FREE memory block, then the blocks are merged. The residual FREE
  3065                                  ;                       memory is repositioned in the FREE memory block chain according to size. The user portion of the
  3066                                  ;                       block, following the block header, is reset (wiped) with the memory wipe value.
  3067                                  ;
  3068                                  ;       In:             EDX     memory block to free, relative to EGDTOSDATA
  3069                                  ;
  3070                                  ;       Out:            EAX     -1      invalid memory block
  3071                                  ;                               0       memory block freed
  3072                                  ;
  3073                                  ;-----------------------------------------------------------------------------------------------------------------------
  3074                                  FreeMemory              push    ebx                                             ;save non-volatile regs
  3075                                                          push    ecx                                             ;
  3076                                                          push    esi                                             ;
  3077                                                          push    edi                                             ;
  3078                                                          push    ds                                              ;
  3079                                                          push    es                                              ;
  3080                                  ;
  3081                                  ;       Address the root memory structure
  3082                                  ;
  3083                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3084                                                          pop     es                                              ;... into extra segment reg
  3085                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3086                                                          pop     ds                                              ;... into data segment reg
  3087                                                          mov     esi,wsConsoleMemRoot                            ;memory root structure
  3088                                                          mov     edi,edx                                         ;memory block address
  3089                                  ;
  3090                                  ;       If the block is FREE, return success. Otherwise, if it is not USER, return with error.
  3091                                  ;
  3092                                                          xor     eax,eax                                         ;indicate success
  3093                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;is the block FREE?
  3094                                                          je      .240                                            ;yes, branch
  3095                                                          dec     eax                                             ;indicate failure
  3096                                                          cmp     dword [edi+MEMBLOCK.signature],EMEMUSERCODE     ;is the block USER?
  3097                                                          jne     .240                                            ;no, branch
  3098                                  ;-----------------------------------------------------------------------------------------------------------------------
  3099                                  ;
  3100                                  ;       Unlink the USER memory block.
  3101                                  ;
  3102                                  ;-----------------------------------------------------------------------------------------------------------------------
  3103                                  ;
  3104                                  ;       Set the block signature. Reset owner.
  3105                                  ;
  3106                                                          mov     dword [edi+MEMBLOCK.signature],EMEMFREECODE     ;set FREE block signature
  3107                                                          xor     eax,eax                                         ;zero register
  3108                                                          mov     [edi+MEMBLOCK.owner],eax                        ;zero block owner
  3109                                  ;
  3110                                  ;       Wipe user area.
  3111                                  ;
  3112                                                          push    edi                                             ;save block address
  3113                                                          mov     ecx,[edi+MEMBLOCK.bytes]                        ;block size
  3114                                                          sub     ecx,EMEMBLOCKLEN                                ;subtract header size
  3115                                                          add     edi,EMEMBLOCKLEN                                ;point to user area
  3116                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3117                                                          rep     stosb                                           ;clear memory
  3118                                                          pop     edi                                             ;restore block address
  3119                                  ;
  3120                                  ;       Address the preceding and following USER memory blocks
  3121                                  ;
  3122                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3123                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3124                                  ;
  3125                                  ;       If a USER block precedes this block, update that block's next pointer. Otherwise, update the first task
  3126                                  ;       pointer to point to the USER block following this block.
  3127                                  ;
  3128                                                          test    ebx,ebx                                         ;is there a previous block?
  3129                                                          jz      .10                                             ;no, branch
  3130                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3131                                                          jmp     .20                                             ;continue
  3132                                  .10                     mov     [esi+MEMROOT.firsttask],ecx                     ;update first USER pointer
  3133                                  ;
  3134                                  ;       If a USER block follows this block, update that block's previous pointer. Otherwise, update the last task
  3135                                  ;       pointer to point to the USER block preceding this block.
  3136                                  ;
  3137                                  .20                     jecxz   .30                                             ;branch if no next block
  3138                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3139                                                          jmp     .40                                             ;continue
  3140                                  .30                     mov     [esi+MEMROOT.lasttask],ebx                      ;update last USER pointer
  3141                                  ;-----------------------------------------------------------------------------------------------------------------------
  3142                                  ;
  3143                                  ;       Merge with a previous contiguous FREE memory block.
  3144                                  ;
  3145                                  ;-----------------------------------------------------------------------------------------------------------------------
  3146                                  ;
  3147                                  ;       Address the preceding and following contiguous memory blocks.
  3148                                  ;
  3149                                  .40                     mov     ebx,[edi+MEMBLOCK.previouscontig]               ;previous contiguous block ptr
  3150                                                          mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3151                                  ;
  3152                                  ;       Verify we have a previous contiguous FREE block.
  3153                                  ;
  3154                                                          test    ebx,ebx                                         ;is there a previous block?
  3155                                                          jz      .100                                            ;no, branch
  3156                                                          cmp     dword [ebx+MEMBLOCK.signature],EMEMFREECODE     ;is the previous block FREE?
  3157                                                          jne     .100                                            ;no, branch
  3158                                  ;
  3159                                  ;       Update adjacent block's contiguous pointers.
  3160                                  ;
  3161                                                          mov     [ebx+MEMBLOCK.nextcontig],ecx                   ;update previous contig's next contig
  3162                                                          jecxz   .50                                             ;branch if no next contiguous block
  3163                                                          mov     [ecx+MEMBLOCK.previouscontig],ebx               ;update next congit's previous contig
  3164                                                          jmp     .60                                             ;continue
  3165                                  .50                     mov     [esi+MEMROOT.lastcontig],ebx                    ;update last contig pointer
  3166                                  ;
  3167                                  ;       Update the size of the merged FREE block.
  3168                                  ;
  3169                                  .60                     mov     eax,[edi+MEMBLOCK.bytes]                        ;current block size
  3170                                                          add     [ebx+MEMBLOCK.bytes],eax                        ;update previous block's size
  3171                                  ;
  3172                                  ;       Having merged our new free block into the previous free block, make the previous free block the current block
  3173                                  ;
  3174                                                          mov     ecx,EMEMBLOCKLEN                                ;block header length
  3175                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3176                                                          rep     stosb                                           ;clear memory header
  3177                                                          mov     edi,ebx                                         ;current block is now previous block
  3178                                  ;-----------------------------------------------------------------------------------------------------------------------
  3179                                  ;
  3180                                  ;       Unlink the previous contiguous FREE memory block
  3181                                  ;
  3182                                  ;-----------------------------------------------------------------------------------------------------------------------
  3183                                  ;
  3184                                  ;       Address the preceding and following USER memory blocks
  3185                                  ;
  3186                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;previous block pointer
  3187                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next block pointer
  3188                                  ;
  3189                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3190                                  ;       block pointer.
  3191                                  ;
  3192                                                          test    ebx,ebx                                         ;is there a previous block?
  3193                                                          jz      .70                                             ;no, branch
  3194                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update previous block's next pointer
  3195                                                          jmp     .80                                             ;branch
  3196                                  .70                     mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3197                                  ;
  3198                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3199                                  ;       pointer.
  3200                                  ;
  3201                                  .80                     jecxz   .90                                             ;branch if no next block
  3202                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next block's previous pointer
  3203                                                          jmp     .100                                            ;continue
  3204                                  .90                     mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3205                                  ;-----------------------------------------------------------------------------------------------------------------------
  3206                                  ;
  3207                                  ;       Merge with a following contiguous FREE memory block.
  3208                                  ;
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  ;
  3211                                  ;       Verify we have a following contiguous FREE block.
  3212                                  ;
  3213                                  .100                    mov     ecx,[edi+MEMBLOCK.nextcontig]                   ;next contiguous block ptr
  3214                                                          jecxz   .170                                            ;branch if no next contiguous block
  3215                                                          cmp     dword [ecx+MEMBLOCK.signature],EMEMFREECODE     ;is the next-contiguous block free?
  3216                                                          jne     .170                                            ;no, branch
  3217                                  ;
  3218                                  ;       Add the size of the following adjacent FREE block to this block's size.
  3219                                  ;
  3220                                                          mov     eax,[ecx+MEMBLOCK.bytes]                        ;next contiguous (free) block size
  3221                                                          add     [edi+MEMBLOCK.bytes],eax                        ;add size to this block's size
  3222                                  ;
  3223                                  ;       Unlink the following contiguous FREE block from the contiguous block chain.
  3224                                  ;
  3225                                                          mov     eax,[ecx+MEMBLOCK.nextcontig]                   ;following block's next-contig ptr
  3226                                                          mov     [edi+MEMBLOCK.nextcontig],eax                   ;update this block's next-contig ptr
  3227                                                          test    eax,eax                                         ;does a block follow the next contig blk
  3228                                                          jz      .110                                            ;no, branch
  3229                                                          mov     [eax+MEMBLOCK.previouscontig],edi               ;update following block's prev contig
  3230                                                          jmp     .120                                            ;continue
  3231                                  .110                    mov     [esi+MEMROOT.lastcontig],edi                    ;update last contig block ptr
  3232                                  ;-----------------------------------------------------------------------------------------------------------------------
  3233                                  ;
  3234                                  ;       Unlink the following contiguous FREE memory block
  3235                                  ;
  3236                                  ;-----------------------------------------------------------------------------------------------------------------------
  3237                                  ;
  3238                                  ;       Unlink the following adjacent FREE block from the FREE block chain.
  3239                                  ;
  3240                                  .120                    push    edi                                             ;save this block
  3241                                                          mov     edi,ecx                                         ;next contiguous block
  3242                                                          push    ecx                                             ;save next contiguous block
  3243                                  ;
  3244                                  ;       Address the preceding and following USER memory blocks
  3245                                  ;
  3246                                                          mov     ebx,[edi+MEMBLOCK.previousblock]                ;next contig's previous block pointer
  3247                                                          mov     ecx,[edi+MEMBLOCK.nextblock]                    ;next contig's next block pointer
  3248                                  ;
  3249                                  ;       Update the previous block's next-block pointer if there is a previous block. Otherwise, update the first free
  3250                                  ;       block pointer.
  3251                                  ;
  3252                                                          test    ebx,ebx                                         ;is there a previous block?
  3253                                                          jz      .130                                            ;no, branch
  3254                                                          mov     [ebx+MEMBLOCK.nextblock],ecx                    ;update next contig's prev blk next-ptr
  3255                                                          jmp     .140                                            ;branch
  3256                                  .130                    mov     [esi+MEMROOT.firstfree],ecx                     ;update first FREE block pointer
  3257                                  ;
  3258                                  ;       Update the next block's previous-block pointer if there is a next block. Otherwise, update the last free block
  3259                                  ;       pointer.
  3260                                  ;
  3261                                  .140                    jecxz   .150                                            ;branch if no next block
  3262                                                          mov     [ecx+MEMBLOCK.previousblock],ebx                ;update next contig's next blk prev-ptr
  3263                                                          jmp     .160                                            ;continue
  3264                                  .150                    mov     [esi+MEMROOT.lastfree],ebx                      ;update last FREE block pointer
  3265                                  ;
  3266                                  ;       Clear next contiguous block's header
  3267                                  ;
  3268                                  .160                    pop     edi                                             ;next congiguous block pointer
  3269                                                          mov     ecx,EMEMBLOCKLEN                                ;memory block header length
  3270                                                          mov     al,EMEMWIPEBYTE                                 ;memory wipe byte
  3271                                                          rep     stosb                                           ;clear memory header
  3272                                                          pop     edi                                             ;this block's pointer
  3273                                  ;-----------------------------------------------------------------------------------------------------------------------
  3274                                  ;
  3275                                  ;       Insert the final FREE block back into the block chain.
  3276                                  ;
  3277                                  ;-----------------------------------------------------------------------------------------------------------------------
  3278                                  ;
  3279                                  ;       Walk the FREE memory chain until a block is found that is larger than or equal in size to the block being
  3280                                  ;       inserted. The block being inserted will be inserted before that block or after the last block found if none
  3281                                  ;       all are smaller in size.
  3282                                  ;
  3283                                  .170                    mov     ebx,[edi+MEMBLOCK.bytes]                        ;size of block
  3284                                                          mov     ecx,[esi+MEMROOT.firstfree]                     ;first free block ptr
  3285                                  .180                    jecxz   .190                                            ;exit if no ptr
  3286                                                          cmp     ebx,[ecx+MEMBLOCK.bytes]                        ;next block bigger?
  3287                                                          jb      .190                                            ;yes, branch
  3288                                                          mov     ecx,[ecx+MEMBLOCK.nextblock]                    ;next free memory block
  3289                                                          jmp     .180                                            ;continue
  3290                                  ;
  3291                                  ;       Set the next-block pointer. Determine the previous-block, which may be the last FREE block if we found no
  3292                                  ;       larger free block. Update the next block's previous block pointer.
  3293                                  ;
  3294                                  .190                    mov     [edi+MEMBLOCK.nextblock],ecx                    ;set the next block ptr
  3295                                                          mov     ebx,[esi+MEMROOT.lastfree]                      ;assume all blocks smaller
  3296                                                          jecxz   .200                                            ;branch if no block found
  3297                                                          mov     ebx,[ecx+MEMBLOCK.previousblock]                ;next block's previous block ptr
  3298                                                          mov     [ecx+MEMBLOCK.previousblock],edi                ;update next block's previous ptr
  3299                                                          jmp     .210                                            ;continue
  3300                                  .200                    mov     [esi+MEMROOT.lastfree],edi                      ;this block is now the last free
  3301                                  ;
  3302                                  ;       Set our previous block pointer to either the previous pointer of the found block or the last free block.
  3303                                  ;       If there is no previous block pointer, then this block now the first FREE block. Otherwise update that block's
  3304                                  ;       next pointer.
  3305                                  ;
  3306                                  .210                    mov     [edi+MEMBLOCK.previousblock],ebx                ;set the previous block ptr
  3307                                                          test    ebx,ebx                                         ;do we have a previous block?
  3308                                                          jz      .220                                            ;no, branch
  3309                                                          mov     [ebx+MEMBLOCK.nextblock],edi                    ;update previous block's next block ptr
  3310                                                          jmp     .230                                            ;continue
  3311                                  .220                    mov     [esi+MEMROOT.firstfree],edi                     ;update first free ptr
  3312                                  ;
  3313                                  ;       The memory free has completed.
  3314                                  ;
  3315                                  .230                    xor     eax,eax                                         ;indicate success
  3316                                  ;
  3317                                  ;       Restore and return.
  3318                                  ;
  3319                                  .240                    pop     es                                              ;restore non-volatile regs
  3320                                                          pop     ds                                              ;
  3321                                                          pop     edi                                             ;
  3322                                                          pop     esi                                             ;
  3323                                                          pop     ecx                                             ;
  3324                                                          pop     ebx                                             ;
  3325                                                          ret                                                     ;return
  3326                                  ;=======================================================================================================================
  3327                                  ;
  3328                                  ;       String Helper Routines
  3329                                  ;
  3330                                  ;       CompareMemory
  3331                                  ;       UpperCaseString
  3332                                  ;
  3333                                  ;=======================================================================================================================
  3334                                  ;-----------------------------------------------------------------------------------------------------------------------
  3335                                  ;
  3336                                  ;       Routine:        CompareMemory
  3337                                  ;
  3338                                  ;       Description:    This routine compares two byte arrays.
  3339                                  ;
  3340                                  ;       In:             DS:EDX  first source address
  3341                                  ;                       DS:EBX  second source address
  3342                                  ;                       ECX     comparison length
  3343                                  ;
  3344                                  ;       Out:            EDX     first source address
  3345                                  ;                       EBX     second source address
  3346                                  ;                       ECX     0       array 1 = array 2
  3347                                  ;                               <0      array 1 < array 2
  3348                                  ;                               >0      array 1 > array 2
  3349                                  ;
  3350                                  ;-----------------------------------------------------------------------------------------------------------------------
  3351                                  CompareMemory           push    esi                                             ;save non-volatile regs
  3352                                                          push    edi                                             ;
  3353                                                          push    es                                              ;
  3354                                                          push    ds                                              ;copy DS
  3355                                                          pop     es                                              ;... to ES
  3356                                                          mov     esi,edx                                         ;first source address
  3357                                                          mov     edi,ebx                                         ;second source address
  3358                                                          cld                                                     ;forward strings
  3359                                                          rep     cmpsb                                           ;compare bytes
  3360                                                          mov     al,0                                            ;default result
  3361                                                          jz      .10                                             ;branch if arrays equal
  3362                                                          mov     al,1                                            ;positive result
  3363                                                          jnc     .10                                             ;branch if target > source
  3364                                                          mov     al,-1                                           ;negative result
  3365                                  .10                     movsx   ecx,al                                          ;extend sign
  3366                                                          pop     es                                              ;restore non-volatile regs
  3367                                                          pop     edi                                             ;
  3368                                                          pop     esi                                             ;
  3369                                                          ret                                                     ;return
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  ;
  3372                                  ;       Routine:        UpperCaseString
  3373                                  ;
  3374                                  ;       Description:    This routine places all characters in the given string to upper case.
  3375                                  ;
  3376                                  ;       In:             DS:EDX  string address
  3377                                  ;
  3378                                  ;       Out:            EDX     string address
  3379                                  ;
  3380                                  ;-----------------------------------------------------------------------------------------------------------------------
  3381                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  3382                                                          mov     esi,edx                                         ;string address
  3383                                                          cld                                                     ;forward strings
  3384                                  .10                     lodsb                                                   ;string character
  3385                                                          test    al,al                                           ;null?
  3386                                                          jz      .20                                             ;yes, skip ahead
  3387                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3388                                                          jb      .10                                             ;no, continue
  3389                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3390                                                          ja      .10                                             ;no, continue
  3391                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  3392                                                          mov     [esi-1],al                                      ;upper character
  3393                                                          jmp     .10                                             ;continue
  3394                                  .20                     pop     esi                                             ;restore non-volatile regs
  3395                                                          ret                                                     ;return
  3396                                  ;=======================================================================================================================
  3397                                  ;
  3398                                  ;       Console Helper Routines
  3399                                  ;
  3400                                  ;       FirstConsoleColumn
  3401                                  ;       GetConsoleChar
  3402                                  ;       GetConsoleString
  3403                                  ;       NextConsoleColumn
  3404                                  ;       NextConsoleRow
  3405                                  ;       PreviousConsoleColumn
  3406                                  ;       PutConsoleChar
  3407                                  ;       PutConsoleHexByte
  3408                                  ;       PutConsoleHexDword
  3409                                  ;       PutConsoleHexWord
  3410                                  ;       PutConsoleOIAChar
  3411                                  ;       PutConsoleOIAShift
  3412                                  ;       PutConsoleString
  3413                                  ;       Yield
  3414                                  ;
  3415                                  ;=======================================================================================================================
  3416                                  ;-----------------------------------------------------------------------------------------------------------------------
  3417                                  ;
  3418                                  ;       Routine:        FirstConsoleColumn
  3419                                  ;
  3420                                  ;       Description:    This routine resets the console column to start of the row.
  3421                                  ;
  3422                                  ;       In:             DS      OS data selector
  3423                                  ;
  3424                                  ;-----------------------------------------------------------------------------------------------------------------------
  3425                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  3426                                                          mov     [wbConsoleColumn],al                            ;save column
  3427                                                          ret                                                     ;return
  3428                                  ;-----------------------------------------------------------------------------------------------------------------------
  3429                                  ;
  3430                                  ;       Routine:        GetConsoleChar
  3431                                  ;
  3432                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3433                                  ;
  3434                                  ;       Out:            AL      ASCII character code
  3435                                  ;                       AH      keyboard scan code
  3436                                  ;
  3437                                  ;-----------------------------------------------------------------------------------------------------------------------
  3438                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3439                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  3440                                                          or      eax,eax                                         ;do we have a message?
  3441                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  3442                                                          push    eax                                             ;save key codes
  3443                                                          and     eax,0FFFF0000h                                  ;mask for message type
  3444                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3445                                                          pop     eax                                             ;restore key codes
  3446                                                          jne     GetConsoleChar                                  ;no, try again
  3447                                                          and     eax,0000ffffh                                   ;mask for key codes
  3448                                                          ret                                                     ;return
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Routine:        GetConsoleString
  3452                                  ;
  3453                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3454                                  ;
  3455                                  ;       In:             DS:EDX  target buffer address
  3456                                  ;                       ECX     maximum number of characters to accept
  3457                                  ;                       BH      echo to terminal
  3458                                  ;                       BL      terminating character
  3459                                  ;
  3460                                  ;-----------------------------------------------------------------------------------------------------------------------
  3461                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  3462                                                          push    esi                                             ;
  3463                                                          push    edi                                             ;
  3464                                                          push    es                                              ;
  3465                                                          push    ds                                              ;load data segment selector ...
  3466                                                          pop     es                                              ;... into extra segment register
  3467                                                          mov     edi,edx                                         ;edi = target buffer
  3468                                                          push    ecx                                             ;save maximum characters
  3469                                                          xor     al,al                                           ;zero register
  3470                                                          cld                                                     ;forward strings
  3471                                                          rep     stosb                                           ;zero fill buffer
  3472                                                          pop     ecx                                             ;maximum characters
  3473                                                          mov     edi,edx                                         ;edi = target buffer
  3474                                                          mov     esi,edx                                         ;esi = target buffer
  3475                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  3476                                  .20                     call    GetConsoleChar                                  ;al = next input char
  3477                                                          cmp     al,bl                                           ;is this the terminator?
  3478                                                          je      .50                                             ;yes, exit
  3479                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3480                                                          jne     .30                                             ;no, skip ahead
  3481                                                          cmp     esi,edi                                         ;at start of buffer?
  3482                                                          je      .20                                             ;yes, get next character
  3483                                                          dec     edi                                             ;backup target pointer
  3484                                                          mov     byte [edi],0                                    ;zero previous character
  3485                                                          inc     ecx                                             ;increment remaining chars
  3486                                                          test    bh,1                                            ;echo to console?
  3487                                                          jz      .20                                             ;no, get next character
  3488                                                          call    PreviousConsoleColumn                           ;backup console position
  3489                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3490                                                          call    PutConsoleChar                                  ;write space to console
  3491                                                          call    PlaceCursor                                     ;position the cursor
  3492                                                          jmp     .20                                             ;get next character
  3493                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3494                                                          jb      .20                                             ;no, get another character
  3495                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3496                                                          ja      .20                                             ;no, get another character
  3497                                                          stosb                                                   ;store character in buffer
  3498                                                          test    bh,1                                            ;echo to console?
  3499                                                          jz      .40                                             ;no, skip ahead
  3500                                                          call    PutConsoleChar                                  ;write character to console
  3501                                                          call    NextConsoleColumn                               ;advance console position
  3502                                                          call    PlaceCursor                                     ;position the cursor
  3503                                  .40                     dec     ecx                                             ;decrement remaining chars
  3504                                                          jmp     .10                                             ;next
  3505                                  .50                     xor     al,al                                           ;null
  3506                                                          stosb                                                   ;terminate buffer
  3507                                                          pop     es                                              ;restore non-volatile regs
  3508                                                          pop     edi                                             ;
  3509                                                          pop     esi                                             ;
  3510                                                          pop     ecx                                             ;
  3511                                                          ret                                                     ;return
  3512                                  ;-----------------------------------------------------------------------------------------------------------------------
  3513                                  ;
  3514                                  ;       Routine:        NextConsoleColumn
  3515                                  ;
  3516                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3517                                  ;                       incremented if the end of the current row is reached.
  3518                                  ;
  3519                                  ;       In:             DS      OS data selector
  3520                                  ;
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3523                                                          inc     al                                              ;increment column
  3524                                                          mov     [wbConsoleColumn],al                            ;save column
  3525                                                          cmp     al,ECONCOLS                                     ;end of row?
  3526                                                          jb      .10                                             ;no, skip ahead
  3527                                                          call    FirstConsoleColumn                              ;reset column to start of row
  3528                                                          call    NextConsoleRow                                  ;line feed to next row
  3529                                  .10                     ret                                                     ;return
  3530                                  ;-----------------------------------------------------------------------------------------------------------------------
  3531                                  ;
  3532                                  ;       Routine:        NextConsoleRow
  3533                                  ;
  3534                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3535                                  ;
  3536                                  ;       In:             DS      OS data selector
  3537                                  ;
  3538                                  ;-----------------------------------------------------------------------------------------------------------------------
  3539                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3540                                                          inc     al                                              ;increment row
  3541                                                          mov     [wbConsoleRow],al                               ;save row
  3542                                                          cmp     al,ECONROWS                                     ;end of screen?
  3543                                                          jb      .10                                             ;no, skip ahead
  3544                                                          call    ScrollConsoleRow                                ;scroll up one row
  3545                                                          mov     al,[wbConsoleRow]                               ;row
  3546                                                          dec     al                                              ;decrement row
  3547                                                          mov     [wbConsoleRow],al                               ;save row
  3548                                  .10                     ret                                                     ;return
  3549                                  ;-----------------------------------------------------------------------------------------------------------------------
  3550                                  ;
  3551                                  ;       Routine:        PreviousConsoleColumn
  3552                                  ;
  3553                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3554                                  ;                       the column is set to the last position in the row and the row is decremented.
  3555                                  ;
  3556                                  ;       In:             DS      OS data selector
  3557                                  ;
  3558                                  ;-----------------------------------------------------------------------------------------------------------------------
  3559                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3560                                                          or      al,al                                           ;start of row?
  3561                                                          jnz     .10                                             ;no, skip ahead
  3562                                                          mov     ah,[wbConsoleRow]                               ;current row
  3563                                                          or      ah,ah                                           ;top of screen?
  3564                                                          jz      .20                                             ;yes, exit with no change
  3565                                                          dec     ah                                              ;decrement row
  3566                                                          mov     [wbConsoleRow],ah                               ;save row
  3567                                                          mov     al,ECONCOLS                                     ;set maximum column
  3568                                  .10                     dec     al                                              ;decrement column
  3569                                                          mov     [wbConsoleColumn],al                            ;save column
  3570                                  .20                     ret                                                     ;return
  3571                                  ;-----------------------------------------------------------------------------------------------------------------------
  3572                                  ;
  3573                                  ;       Routine:        PutConsoleChar
  3574                                  ;
  3575                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3576                                  ;
  3577                                  ;       In:             AL      ASCII character
  3578                                  ;                       DS      OS data selector
  3579                                  ;
  3580                                  ;-----------------------------------------------------------------------------------------------------------------------
  3581                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3582                                                          push    es                                              ;
  3583                                                          push    EGDTCGA                                         ;load CGA selector ...
  3584                                                          pop     es                                              ;... into extra segment reg
  3585                                                          mov     cl,[wbConsoleColumn]                            ;column
  3586                                                          mov     ch,[wbConsoleRow]                               ;row
  3587                                                          call    SetConsoleChar                                  ;put character at row, column
  3588                                                          pop     es                                              ;restore non-volatile regs
  3589                                                          pop     ecx                                             ;
  3590                                                          ret                                                     ;return
  3591                                  ;-----------------------------------------------------------------------------------------------------------------------
  3592                                  ;
  3593                                  ;       Routine:        PutConsoleHexByte
  3594                                  ;
  3595                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3596                                  ;
  3597                                  ;       In:             AL      byte value
  3598                                  ;                       CL      column
  3599                                  ;                       CH      row
  3600                                  ;                       DS      OS data selector
  3601                                  ;                       ES      CGA selector
  3602                                  ;
  3603                                  ;-----------------------------------------------------------------------------------------------------------------------
  3604                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3605                                                          mov     bl,al                                           ;save byte value
  3606                                                          shr     al,4                                            ;hi-order nybble
  3607                                                          or      al,030h                                         ;apply ASCII zone
  3608                                                          cmp     al,03ah                                         ;numeric?
  3609                                                          jb      .10                                             ;yes, skip ahead
  3610                                                          add     al,7                                            ;add ASCII offset for alpha
  3611                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3612                                                          mov     al,bl                                           ;byte value
  3613                                                          and     al,0fh                                          ;lo-order nybble
  3614                                                          or      al,30h                                          ;apply ASCII zone
  3615                                                          cmp     al,03ah                                         ;numeric?
  3616                                                          jb      .20                                             ;yes, skip ahead
  3617                                                          add     al,7                                            ;add ASCII offset for alpha
  3618                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3619                                                          pop     ebx                                             ;restore non-volatile regs
  3620                                                          ret                                                     ;return
  3621                                  ;-----------------------------------------------------------------------------------------------------------------------
  3622                                  ;
  3623                                  ;       Routine:        PutConsoleHexDword
  3624                                  ;
  3625                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3626                                  ;
  3627                                  ;       In:             EAX     value
  3628                                  ;                       CL      column
  3629                                  ;                       CH      row
  3630                                  ;                       DS      OS data selector
  3631                                  ;                       ES      CGA selector
  3632                                  ;
  3633                                  ;-----------------------------------------------------------------------------------------------------------------------
  3634                                  PutConsoleHexDword      push    eax
  3635                                                          shr     eax,16
  3636                                                          call    PutConsoleHexWord
  3637                                                          pop     eax
  3638                                                          call    PutConsoleHexWord
  3639                                                          ret
  3640                                  ;-----------------------------------------------------------------------------------------------------------------------
  3641                                  ;
  3642                                  ;       Routine:        PutConsoleHexWord
  3643                                  ;
  3644                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3645                                  ;
  3646                                  ;       In:             EAX     value
  3647                                  ;                       CL      column
  3648                                  ;                       CH      row
  3649                                  ;                       DS      OS data selector
  3650                                  ;                       ES      CGA selector
  3651                                  ;
  3652                                  ;-----------------------------------------------------------------------------------------------------------------------
  3653                                  PutConsoleHexWord       push    eax
  3654                                                          shr     eax,8
  3655                                                          call    PutConsoleHexByte
  3656                                                          pop     eax
  3657                                                          call    PutConsoleHexByte
  3658                                                          ret
  3659                                  ;-----------------------------------------------------------------------------------------------------------------------
  3660                                  ;
  3661                                  ;       Routine:        PutConsoleOIAChar
  3662                                  ;
  3663                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3664                                  ;
  3665                                  ;       In:             DS      OS data selector
  3666                                  ;
  3667                                  ;-----------------------------------------------------------------------------------------------------------------------
  3668                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3669                                                          push    ecx                                             ;
  3670                                                          push    esi                                             ;
  3671                                                          push    ds                                              ;
  3672                                                          push    es                                              ;
  3673                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3674                                                          pop     ds                                              ;... into data segment register
  3675                                                          push    EGDTCGA                                         ;load CGA selector ...
  3676                                                          pop     es                                              ;... into extra segment register
  3677                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3678                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3679                                                          mov     bl,0                                            ;starting column
  3680                                                          mov     ecx,6                                           ;maximum scan codes
  3681                                  .10                     push    ecx                                             ;save remaining count
  3682                                                          mov     ecx,ebx                                         ;row, column
  3683                                                          lodsb                                                   ;read scan code
  3684                                                          or      al,al                                           ;scan code present?
  3685                                                          jz      .20                                             ;no, skip ahead
  3686                                                          call    PutConsoleHexByte                               ;display scan code
  3687                                                          jmp     .30                                             ;continue
  3688                                  .20                     mov     al,' '                                          ;ASCII space
  3689                                                          call    SetConsoleChar                                  ;display space
  3690                                                          mov     al,' '                                          ;ASCII space
  3691                                                          call    SetConsoleChar                                  ;display space
  3692                                  .30                     add     bl,2                                            ;next column (+2)
  3693                                                          pop     ecx                                             ;restore remaining
  3694                                                          loop    .10                                             ;next code
  3695                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3696                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3697                                                          jb      .40                                             ;no, skip ahead
  3698                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3699                                                          ja      .40                                             ;no, skip ahead
  3700                                                          mov     ch,bh                                           ;OIA row
  3701                                                          mov     cl,40                                           ;character display column
  3702                                                          call    SetConsoleChar                                  ;display ASCII character
  3703                                  .40                     pop     es                                              ;restore non-volatile regs
  3704                                                          pop     ds                                              ;
  3705                                                          pop     esi                                             ;
  3706                                                          pop     ecx                                             ;
  3707                                                          pop     ebx                                             ;
  3708                                                          ret                                                     ;return
  3709                                  ;-----------------------------------------------------------------------------------------------------------------------
  3710                                  ;
  3711                                  ;       Routine:        PutConsoleOIAShift
  3712                                  ;
  3713                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3714                                  ;
  3715                                  ;       In:             BL      shift flags
  3716                                  ;                       BH      lock flags
  3717                                  ;                       DS      OS data selector
  3718                                  ;
  3719                                  ;-----------------------------------------------------------------------------------------------------------------------
  3720                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3721                                                          push    es                                              ;
  3722                                                          push    EGDTCGA                                         ;load CGA selector ...
  3723                                                          pop     es                                              ;... into ES register
  3724                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3725                                                          mov     al,EASCIISPACE                                  ;space is default character
  3726                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3727                                                          jz      .10                                             ;no, skip ahead
  3728                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3729                                  .10                     mov     cl,14                                           ;indicator column
  3730                                                          call    SetConsoleChar                                  ;display ASCII character
  3731                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3732                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3733                                                          jz      .20                                             ;no, skip ahead
  3734                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3735                                  .20                     mov     cl,64                                           ;indicator column
  3736                                                          call    SetConsoleChar                                  ;display ASCII character
  3737                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3738                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3739                                                          jz      .30                                             ;no, skip ahead
  3740                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3741                                  .30                     mov     cl,15                                           ;indicator column
  3742                                                          call    SetConsoleChar                                  ;display ASCII character
  3743                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3744                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3745                                                          jz      .40                                             ;no, skip ahead
  3746                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3747                                  .40                     mov     cl,63                                           ;indicator column
  3748                                                          call    SetConsoleChar                                  ;display ASCII character
  3749                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3750                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3751                                                          jz      .50                                             ;no, skip ahead
  3752                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3753                                  .50                     mov     cl,16                                           ;indicator column
  3754                                                          call    SetConsoleChar                                  ;display ASCII character
  3755                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3756                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3757                                                          jz      .60                                             ;no, skip ahead
  3758                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3759                                  .60                     mov     cl,62                                           ;indicator column
  3760                                                          call    SetConsoleChar                                  ;display ASCII character
  3761                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3762                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3763                                                          jz      .70                                             ;no, skip ahead
  3764                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3765                                  .70                     mov     cl,78                                           ;indicator column
  3766                                                          call    SetConsoleChar                                  ;display ASCII character
  3767                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3768                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3769                                                          jz      .80                                             ;no, skip ahead
  3770                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3771                                  .80                     mov     cl,77                                           ;indicator column
  3772                                                          call    SetConsoleChar                                  ;display ASCII character
  3773                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3774                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3775                                                          jz      .90                                             ;no, skip ahead
  3776                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3777                                  .90                     mov     cl,76                                           ;indicator column
  3778                                                          call    SetConsoleChar                                  ;display ASCII character
  3779                                                          pop     es                                              ;restore non-volatile regs
  3780                                                          pop     ecx                                             ;
  3781                                                          ret                                                     ;return
  3782                                  ;-----------------------------------------------------------------------------------------------------------------------
  3783                                  ;
  3784                                  ;       Routine:        PutConsoleString
  3785                                  ;
  3786                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3787                                  ;                       console position as needed.
  3788                                  ;
  3789                                  ;       In:             EDX     source address
  3790                                  ;                       DS      OS data selector
  3791                                  ;
  3792                                  ;-----------------------------------------------------------------------------------------------------------------------
  3793                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3794                                                          mov     esi,edx                                         ;source address
  3795                                                          cld                                                     ;forward strings
  3796                                  .10                     lodsb                                                   ;ASCII character
  3797                                                          or      al,al                                           ;end of string?
  3798                                                          jz      .40                                             ;yes, skip ahead
  3799                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3800                                                          jne     .20                                             ;no, skip ahead
  3801                                                          call    FirstConsoleColumn                              ;move to start of row
  3802                                                          jmp     .10                                             ;next character
  3803                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3804                                                          jne     .30                                             ;no, skip ahead
  3805                                                          call    NextConsoleRow                                  ;move to next row
  3806                                                          jmp     .10                                             ;next character
  3807                                  .30                     call    PutConsoleChar                                  ;output character to console
  3808                                                          call    NextConsoleColumn                               ;advance to next column
  3809                                                          jmp     .10                                             ;next character
  3810                                  .40                     pop     esi                                             ;restore non-volatile regs
  3811                                                          ret                                                     ;return
  3812                                  ;-----------------------------------------------------------------------------------------------------------------------
  3813                                  ;
  3814                                  ;       Routine:        Yield
  3815                                  ;
  3816                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3817                                  ;
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819                                  Yield                   sti                                                     ;enable maskagle interrupts
  3820                                                          hlt                                                     ;halt until external interrupt
  3821                                                          ret                                                     ;return
  3822                                  ;=======================================================================================================================
  3823                                  ;
  3824                                  ;       Data-Type Conversion Helper Routines
  3825                                  ;
  3826                                  ;       DecimalToUnsigned
  3827                                  ;       HexadecimalToUnsigned
  3828                                  ;       UnsignedToHexadecimal
  3829                                  ;
  3830                                  ;=======================================================================================================================
  3831                                  ;-----------------------------------------------------------------------------------------------------------------------
  3832                                  ;
  3833                                  ;       Routine:        DecimalToUnsigned
  3834                                  ;
  3835                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ decimal string.
  3836                                  ;
  3837                                  ;       Input:          DS:EDX  null-terminated decimal string address
  3838                                  ;
  3839                                  ;       Output:         EAX     unsigned integer value
  3840                                  ;
  3841                                  ;-----------------------------------------------------------------------------------------------------------------------
  3842                                  DecimalToUnsigned       push    esi                                             ;save non-volatile regs
  3843                                                          mov     esi,edx                                         ;source address
  3844                                                          xor     edx,edx                                         ;zero total
  3845                                  .10                     lodsb                                                   ;source byte
  3846                                                          cmp     al,','                                          ;comma?
  3847                                                          je      .10                                             ;yes, ignore
  3848                                                          test    al,al                                           ;end of string?
  3849                                                          jz      .30                                             ;yes, done
  3850                                                          cmp     al,'.'                                          ;decimal point?
  3851                                                          je      .30                                             ;yes, done
  3852                                                          cmp     al,'0'                                          ;numeral?
  3853                                                          jb      .20                                             ;no, invalid string
  3854                                                          cmp     al,'9'                                          ;numeral?
  3855                                                          ja      .20                                             ;no, invalid string
  3856                                                          and     al,00Fh                                         ;mask ASCII zone
  3857                                                          push    eax                                             ;save numeral
  3858                                                          shl     edx,1                                           ;total * 2
  3859                                                          mov     eax,edx                                         ;total * 2
  3860                                                          shl     edx,2                                           ;total * 8
  3861                                                          add     edx,eax                                         ;total * 10
  3862                                                          pop     eax                                             ;restore numeral
  3863                                                          add     edx,eax                                         ;accumulate decimal digit
  3864                                                          xor     eax,eax                                         ;zero register
  3865                                                          jmp     .10                                             ;next
  3866                                  .20                     xor     edx,edx                                         ;zero result on error
  3867                                  .30                     mov     eax,edx                                         ;result
  3868                                                          pop     esi                                             ;restore non-volatile regs
  3869                                                          ret                                                     ;return
  3870                                  ;-----------------------------------------------------------------------------------------------------------------------
  3871                                  ;
  3872                                  ;       Routine:        HexadecimalToUnsigned
  3873                                  ;
  3874                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3875                                  ;
  3876                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3877                                  ;
  3878                                  ;       Output:         EAX     unsigned integer value
  3879                                  ;
  3880                                  ;-----------------------------------------------------------------------------------------------------------------------
  3881                                  HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3882                                                          mov     esi,edx                                         ;source address
  3883                                                          xor     edx,edx                                         ;zero register
  3884                                  .10                     lodsb                                                   ;source byte
  3885                                                          test    al,al                                           ;end of string?
  3886                                                          jz      .30                                             ;yes, branch
  3887                                                          cmp     al,'9'                                          ;hexadecimal?
  3888                                                          jna     .20                                             ;no, skip ahead
  3889                                                          sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3890                                  .20                     and     eax,0fh                                         ;remove ascii zone
  3891                                                          shl     edx,4                                           ;previous total x 16
  3892                                                          add     edx,eax                                         ;add prior value x 16
  3893                                                          jmp     .10                                             ;next
  3894                                  .30                     mov     eax,edx                                         ;result
  3895                                                          pop     esi                                             ;restore non-volatile regs
  3896                                                          ret                                                     ;return
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;       Routine:        UnsignedToHexadecimal
  3900                                  ;
  3901                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3902                                  ;
  3903                                  ;       Input:          DS:EDX  output buffer address
  3904                                  ;                       ECX     32-bit binary
  3905                                  ;
  3906                                  ;-----------------------------------------------------------------------------------------------------------------------
  3907                                  UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3908                                                          mov     edi,edx                                         ;output buffer address
  3909                                                          mov     edx,ecx                                         ;32-bit unsigned
  3910                                                          xor     ecx,ecx                                         ;zero register
  3911                                                          mov     cl,8                                            ;nybble count
  3912                                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3913                                                          mov     al,dl                                           ;????bbbb
  3914                                                          and     al,0fh                                          ;mask out bits 4-7
  3915                                                          or      al,30h                                          ;mask in ascii zone
  3916                                                          cmp     al,3ah                                          ;A through F?
  3917                                                          jb      .20                                             ;no, skip ahead
  3918                                                          add     al,7                                            ;41h through 46h
  3919                                  .20                     stosb                                                   ;store hexnum
  3920                                                          loop    .10                                             ;next nybble
  3921                                                          xor     al,al                                           ;zero reg
  3922                                                          stosb                                                   ;null terminate
  3923                                                          pop     edi                                             ;restore non-volatile regs
  3924                                                          ret                                                     ;return
  3925                                  ;=======================================================================================================================
  3926                                  ;
  3927                                  ;       Message Queue Helper Routines
  3928                                  ;
  3929                                  ;       GetMessage
  3930                                  ;       PutMessage
  3931                                  ;
  3932                                  ;=======================================================================================================================
  3933                                  ;-----------------------------------------------------------------------------------------------------------------------
  3934                                  ;
  3935                                  ;       Routine:        GetMessage
  3936                                  ;
  3937                                  ;       Description:    This routine reads and removes a message from the message queue.
  3938                                  ;
  3939                                  ;       Out:            EAX     lo-order message data
  3940                                  ;                       EDX     hi-order message data
  3941                                  ;
  3942                                  ;                       CY      0 = message read
  3943                                  ;                               1 = no message to read
  3944                                  ;
  3945                                  ;-----------------------------------------------------------------------------------------------------------------------
  3946                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3947                                                          push    ecx                                             ;
  3948                                                          push    ds                                              ;
  3949                                                          push    ELDTMQ                                          ;load message queue selector ...
  3950                                                          pop     ds                                              ;... into data segment register
  3951                                                          mov     ebx,[MQHead]                                    ;head ptr
  3952                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3953                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3954                                                          or      eax,edx                                         ;is queue empty?
  3955                                                          stc                                                     ;assume queue is emtpy
  3956                                                          jz      .20                                             ;yes, skip ahead
  3957                                                          xor     ecx,ecx                                         ;store zero
  3958                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3959                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3960                                                          add     ebx,8                                           ;next queue element
  3961                                                          and     ebx,03fch                                       ;at end of queue?
  3962                                                          jnz     .10                                             ;no, skip ahead
  3963                                                          mov     bl,8                                            ;reset to 1st entry
  3964                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3965                                                          clc                                                     ;indicate message read
  3966                                  .20                     pop     ds                                              ;restore non-volatile regs
  3967                                                          pop     ecx                                             ;
  3968                                                          pop     ebx                                             ;
  3969                                                          ret                                                     ;return
  3970                                  ;-----------------------------------------------------------------------------------------------------------------------
  3971                                  ;
  3972                                  ;       Routine:        PutMessage
  3973                                  ;
  3974                                  ;       Description:    This routine adda a message to the message queue.
  3975                                  ;
  3976                                  ;       In:             ECX     hi-order data word
  3977                                  ;                       EDX     lo-order data word
  3978                                  ;
  3979                                  ;       Out:            CY      0 = success
  3980                                  ;                               1 = fail: queue is full
  3981                                  ;
  3982                                  ;-----------------------------------------------------------------------------------------------------------------------
  3983                                  PutMessage              push    ds                                              ;save non-volatile regs
  3984                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3985                                                          pop     ds                                              ;... into data segment register
  3986                                                          mov     eax,[MQTail]                                    ;tail ptr
  3987                                                          cmp     dword [eax],0                                   ;is queue full?
  3988                                                          stc                                                     ;assume failure
  3989                                                          jne     .20                                             ;yes, cannot store
  3990                                                          mov     [eax],edx                                       ;store lo-order data
  3991                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3992                                                          add     eax,8                                           ;next queue element adr
  3993                                                          and     eax,03fch                                       ;at end of queue?
  3994                                                          jnz     .10                                             ;no, skip ahead
  3995                                                          mov     al,8                                            ;reset to top of queue
  3996                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3997                                                          clc                                                     ;indicate success
  3998                                  .20                     pop     ds                                              ;restore non-volatile regs
  3999                                                          ret                                                     ;return
  4000                                  ;=======================================================================================================================
  4001                                  ;
  4002                                  ;       Memory-Mapped Video Routines
  4003                                  ;
  4004                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4005                                  ;
  4006                                  ;       ClearConsoleScreen
  4007                                  ;       ScrollConsoleRow
  4008                                  ;       SetConsoleChar
  4009                                  ;       SetConsoleString
  4010                                  ;
  4011                                  ;=======================================================================================================================
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013                                  ;
  4014                                  ;       Routine:        ClearConsoleScreen
  4015                                  ;
  4016                                  ;       Description:    This routine clears the console (CGA) screen.
  4017                                  ;
  4018                                  ;-----------------------------------------------------------------------------------------------------------------------
  4019                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4020                                                          push    edi                                             ;
  4021                                                          push    ds                                              ;
  4022                                                          push    es                                              ;
  4023                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  4024                                                          pop     ds                                              ;... into DS register
  4025                                                          push    EGDTCGA                                         ;load CGA selector ...
  4026                                                          pop     es                                              ;... into ES register
  4027                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  4028                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4029                                                          xor     edi,edi                                         ;target offset
  4030                                                          cld                                                     ;forward strings
  4031                                                          rep     stosd                                           ;reset screen body
  4032                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4033                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4034                                                          rep     stosd                                           ;reset OIA line
  4035                                                          xor     al,al                                           ;zero register
  4036                                                          mov     [wbConsoleRow],al                               ;reset console row
  4037                                                          mov     [wbConsoleColumn],al                            ;reset console column
  4038                                                          call    PlaceCursor                                     ;place cursor at current position
  4039                                                          pop     es                                              ;restore non-volatile regs
  4040                                                          pop     ds                                              ;
  4041                                                          pop     edi                                             ;
  4042                                                          pop     ecx                                             ;
  4043                                                          ret                                                     ;return
  4044                                  ;-----------------------------------------------------------------------------------------------------------------------
  4045                                  ;
  4046                                  ;       Routine:        ScrollConsoleRow
  4047                                  ;
  4048                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4049                                  ;
  4050                                  ;-----------------------------------------------------------------------------------------------------------------------
  4051                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4052                                                          push    esi                                             ;
  4053                                                          push    edi                                             ;
  4054                                                          push    ds                                              ;
  4055                                                          push    es                                              ;
  4056                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4057                                                          pop     ds                                              ;... into DS
  4058                                                          push    EGDTCGA                                         ;load CGA video selector ...
  4059                                                          pop     es                                              ;... into ES
  4060                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4061                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4062                                                          xor     edi,edi                                         ;EDI = target (line 1)
  4063                                                          cld                                                     ;forward strings
  4064                                                          rep     movsd                                           ;move 24 lines up
  4065                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4066                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  4067                                                          rep     stosd                                           ;clear bottom row
  4068                                                          pop     es                                              ;restore non-volatile regs
  4069                                                          pop     ds                                              ;
  4070                                                          pop     edi                                             ;
  4071                                                          pop     esi                                             ;
  4072                                                          pop     ecx                                             ;
  4073                                                          ret                                                     ;return
  4074                                  ;-----------------------------------------------------------------------------------------------------------------------
  4075                                  ;
  4076                                  ;       Routine:        SetConsoleChar
  4077                                  ;
  4078                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4079                                  ;
  4080                                  ;       In:             AL      ASCII character
  4081                                  ;                       CL      column
  4082                                  ;                       CH      row
  4083                                  ;                       ES      CGA selector
  4084                                  ;
  4085                                  ;       Out:            EAX     last target address written (ES:)
  4086                                  ;                       CL      column + 1
  4087                                  ;
  4088                                  ;-----------------------------------------------------------------------------------------------------------------------
  4089                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  4090                                                          movzx   eax,ch                                          ;row
  4091                                                          mov     ah,ECONCOLS                                     ;cols/row
  4092                                                          mul     ah                                              ;row * cols/row
  4093                                                          add     al,cl                                           ;add column
  4094                                                          adc     ah,0                                            ;handle carry
  4095                                                          shl     eax,1                                           ;screen offset
  4096                                                          mov     [es:eax],dl                                     ;store character
  4097                                                          inc     cl                                              ;next column
  4098                                                          ret                                                     ;return
  4099                                  ;-----------------------------------------------------------------------------------------------------------------------
  4100                                  ;
  4101                                  ;       Routine:        SetConsoleString
  4102                                  ;
  4103                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4104                                  ;
  4105                                  ;       In:             ESI     source offset (DS:)
  4106                                  ;                       CL      column
  4107                                  ;                       CH      row
  4108                                  ;                       ES      CGA selector
  4109                                  ;
  4110                                  ;-----------------------------------------------------------------------------------------------------------------------
  4111                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  4112                                                          cld                                                     ;forward strings
  4113                                  .10                     lodsb                                                   ;next ASCII character
  4114                                                          test    al,al                                           ;end of string?
  4115                                                          jz      .20                                             ;yes, branch
  4116                                                          call    SetConsoleChar                                  ;store character
  4117                                                          jmp     .10                                             ;continue
  4118                                  .20                     pop     esi                                             ;restore non-volatile regs
  4119                                                          ret                                                     ;return
  4120                                  ;=======================================================================================================================
  4121                                  ;
  4122                                  ;       Input/Output Routines
  4123                                  ;
  4124                                  ;       These routines read and/or write directly to ports.
  4125                                  ;
  4126                                  ;       PlaceCursor
  4127                                  ;       PutPrimaryEndOfInt
  4128                                  ;       PutSecondaryEndOfInt
  4129                                  ;       ResetSystem
  4130                                  ;       SetKeyboardLamps
  4131                                  ;       WaitForKeyInBuffer
  4132                                  ;       WaitForKeyOutBuffer
  4133                                  ;
  4134                                  ;=======================================================================================================================
  4135                                  ;-----------------------------------------------------------------------------------------------------------------------
  4136                                  ;
  4137                                  ;       Routine:        PlaceCursor
  4138                                  ;
  4139                                  ;       Description:    This routine positions the cursor on the console.
  4140                                  ;
  4141                                  ;       In:             DS      OS data selector
  4142                                  ;
  4143                                  ;-----------------------------------------------------------------------------------------------------------------------
  4144                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  4145                                                          mov     al,[wbConsoleRow]                               ;AL = row
  4146                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  4147                                                          mul     ah                                              ;row offset
  4148                                                          add     al,[wbConsoleColumn]                            ;add column
  4149                                                          adc     ah,0                                            ;add overflow
  4150                                                          mov     ecx,eax                                         ;screen offset
  4151                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4152                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4153                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4154                                                          out     dx,al                                           ;select register
  4155                                                          inc     edx                                             ;data port
  4156                                                          mov     al,ch                                           ;hi-order cursor loc
  4157                                                          out     dx,al                                           ;store hi-order loc
  4158                                                          dec     edx                                             ;register select port
  4159                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4160                                                          out     dx,al                                           ;select register
  4161                                                          inc     edx                                             ;data port
  4162                                                          mov     al,cl                                           ;lo-order cursor loc
  4163                                                          out     dx,al                                           ;store lo-order loc
  4164                                                          pop     ecx                                             ;restore non-volatile regs
  4165                                                          ret                                                     ;return
  4166                                  ;-----------------------------------------------------------------------------------------------------------------------
  4167                                  ;
  4168                                  ;       Routine:        PutPrimaryEndOfInt
  4169                                  ;
  4170                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4171                                  ;
  4172                                  ;-----------------------------------------------------------------------------------------------------------------------
  4173                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4174                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4175                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4176                                                          ret                                                     ;return
  4177                                  ;-----------------------------------------------------------------------------------------------------------------------
  4178                                  ;
  4179                                  ;       Routine:        PutSecondaryEndOfInt
  4180                                  ;
  4181                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4182                                  ;
  4183                                  ;-----------------------------------------------------------------------------------------------------------------------
  4184                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4185                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4186                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4187                                                          ret                                                     ;return
  4188                                  ;-----------------------------------------------------------------------------------------------------------------------
  4189                                  ;
  4190                                  ;       Routine:        ResetSystem
  4191                                  ;
  4192                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4193                                  ;
  4194                                  ;       Out:            N/A     This routine does not return.
  4195                                  ;
  4196                                  ;-----------------------------------------------------------------------------------------------------------------------
  4197                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4198                                                          loop    $                                               ;clear interrupts
  4199                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4200                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4201                                  .10                     sti                                                     ;enable maskable interrupts
  4202                                                          hlt                                                     ;halt until interrupt
  4203                                                          jmp     .10                                             ;repeat until reset kicks in
  4204                                  ;-----------------------------------------------------------------------------------------------------------------------
  4205                                  ;
  4206                                  ;       Routine:        SetKeyboardLamps
  4207                                  ;
  4208                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4209                                  ;
  4210                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4211                                  ;
  4212                                  ;-----------------------------------------------------------------------------------------------------------------------
  4213                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4214                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4215                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  4216                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4217                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4218                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4219                                                          mov     al,bh                                           ;set/reset lamps value
  4220                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  4221                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4222                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4223                                                          ret                                                     ;return
  4224                                  ;-----------------------------------------------------------------------------------------------------------------------
  4225                                  ;
  4226                                  ;       Routine:        WaitForKeyInBuffer
  4227                                  ;
  4228                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4229                                  ;
  4230                                  ;       Out:            ZF      1 = Input buffer ready
  4231                                  ;                               0 = Input buffer not ready after timeout
  4232                                  ;
  4233                                  ;-----------------------------------------------------------------------------------------------------------------------
  4234                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4235                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4236                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4237                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  4238                                                          loopnz  .10                                             ;yes, repeat till timeout
  4239                                                          pop     ecx                                             ;restore non-volatile regs
  4240                                                          ret                                                     ;return
  4241                                  ;-----------------------------------------------------------------------------------------------------------------------
  4242                                  ;
  4243                                  ;       Routine:        WaitForKeyOutBuffer
  4244                                  ;
  4245                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4246                                  ;
  4247                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4248                                  ;                               0 = Output buffer empty after timeout
  4249                                  ;
  4250                                  ;-----------------------------------------------------------------------------------------------------------------------
  4251                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4252                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4253                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4254                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  4255                                                          loopz   .10                                             ;loop until output buffer bit
  4256                                                          pop     ecx                                             ;restore non-volatile regs
  4257                                                          ret                                                     ;return
  4258                                  ;-----------------------------------------------------------------------------------------------------------------------
  4259                                  ;
  4260                                  ;       End of the Kernel Function Library
  4261                                  ;
  4262                                  ;-----------------------------------------------------------------------------------------------------------------------
  4263                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  4264                                  ;=======================================================================================================================
  4265                                  ;
  4266                                  ;       Console Task
  4267                                  ;
  4268                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4269                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4270                                  ;       screen and responds to user commands.
  4271                                  ;
  4272                                  ;=======================================================================================================================
  4273                                  ;-----------------------------------------------------------------------------------------------------------------------
  4274                                  ;
  4275                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4276                                  ;
  4277                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4278                                  ;
  4279                                  ;-----------------------------------------------------------------------------------------------------------------------
  4280                                  section                 constack                                                ;console task stack
  4281                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  4282                                  ;-----------------------------------------------------------------------------------------------------------------------
  4283                                  ;
  4284                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4285                                  ;
  4286                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4287                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4288                                  ;       16 descriptors. Six are initially defined.
  4289                                  ;
  4290                                  ;-----------------------------------------------------------------------------------------------------------------------
  4291                                  section                 conldt                                                  ;console local descriptors
  4292                                                          dq      004093004780007Fh                               ;04 TSS alias
  4293                                                          dq      004093004700007Fh                               ;0c LDT alias
  4294                                                          dq      00409300400006FFh                               ;14 stack
  4295                                                          dq      00CF93000000FFFFh                               ;1c data
  4296                                                          dq      00409B0050000FFFh                               ;24 code
  4297                                                          dq      00409300480007FFh                               ;2c message queue
  4298                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4299                                  ;-----------------------------------------------------------------------------------------------------------------------
  4300                                  ;
  4301                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4302                                  ;
  4303                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4304                                  ;       segment. CS to console code.
  4305                                  ;
  4306                                  ;-----------------------------------------------------------------------------------------------------------------------
  4307                                  section                 contss                                                  ;console task state segment
  4308                                                          dd      0                                               ;00 back-link tss
  4309                                                          dd      0700h                                           ;04 esp ring 0
  4310                                                          dd      0014h                                           ;08 ss ring 0
  4311                                                          dd      0700h                                           ;0c esp ring 1
  4312                                                          dd      0014h                                           ;10 es ring 1
  4313                                                          dd      0700h                                           ;14 esp ring 2
  4314                                                          dd      0014h                                           ;18 ss ring 2
  4315                                                          dd      0                                               ;1c cr ring 3
  4316                                                          dd      0                                               ;20 eip
  4317                                                          dd      0200h                                           ;24 eflags
  4318                                                          dd      0                                               ;28 eax
  4319                                                          dd      0                                               ;2c ecx
  4320                                                          dd      0                                               ;30 edx
  4321                                                          dd      0                                               ;34 ebx
  4322                                                          dd      0700h                                           ;38 esp ring 3
  4323                                                          dd      0                                               ;3c ebp
  4324                                                          dd      0                                               ;40 esi
  4325                                                          dd      0                                               ;44 edi
  4326                                                          dd      001Ch                                           ;48 es
  4327                                                          dd      0024h                                           ;4c cs
  4328                                                          dd      0014h                                           ;50 ss ring 3
  4329                                                          dd      001Ch                                           ;54 ds
  4330                                                          dd      0                                               ;58 fs
  4331                                                          dd      0                                               ;5c gs
  4332                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4333                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  4334                                  ;-----------------------------------------------------------------------------------------------------------------------
  4335                                  ;
  4336                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4337                                  ;
  4338                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4339                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4340                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4341                                  ;       event.
  4342                                  ;
  4343                                  ;-----------------------------------------------------------------------------------------------------------------------
  4344                                  section                 conmque                                                 ;console message queue
  4345                                                          dd      8                                               ;head pointer
  4346                                                          dd      8                                               ;tail pointer
  4347                                                          times   510 dd 0                                        ;queue elements
  4348                                  ;-----------------------------------------------------------------------------------------------------------------------
  4349                                  ;
  4350                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4351                                  ;
  4352                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4353                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4354                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4355                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4356                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4357                                  ;       board input, echoing to the console screen and responding to user commands.
  4358                                  ;
  4359                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4360                                  ;
  4361                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4362                                  ;                               |  Real Mode Interrupt Vectors                  |
  4363                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4364                                  ;                               |  Reserved BIOS Memory Area                    |
  4365                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4366                                  ;                               |  Shared Kernel Memory Area                    |
  4367                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4368                                  ;                               |  Global Descriptor Table (GDT)                |
  4369                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4370                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4371                                  ;                       002000  +-----------------------------------------------+
  4372                                  ;                               |  Interrupt Handlers                           |
  4373                                  ;                               |  Kernel Function Library                      |
  4374                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4375                                  ;                               |  Console Task Stack Area                      |
  4376                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4377                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4378                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4379                                  ;                               |  Console Task Task State Segment (TSS)        |
  4380                                  ;                       004800  +-----------------------------------------------+
  4381                                  ;                               |  Console Task Message Queue                   |
  4382                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4383                                  ;                               |  Console Task Code                            |
  4384                                  ;                               |  Console Task Constants                       |
  4385                                  ;                       006000  +===============================================+
  4386                                  ;
  4387                                  ;-----------------------------------------------------------------------------------------------------------------------
  4388                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4389                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  4390                                  
  4391                                                          clearConsoleScreen                                      ;clear the console screen
  4392                                                          putConsoleString czTitle                                ;display startup message
  4393                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4394                                                          placeCursor                                             ;set CRT cursor location
  4395                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4396                                                          putConsoleString czNewLine                              ;newline
  4397                                  
  4398                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  4399                                                          mov     ebx,wzConsoleToken                              ;token buffer
  4400                                                          call    ConTakeToken                                    ;handle console input
  4401                                                          mov     edx,wzConsoleToken                              ;token buffer
  4402                                                          call    ConDetermineCommand                             ;determine command number
  4403                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4404                                                          jb      .20                                             ;yes, branch
  4405                                  
  4406                                                          putConsoleString czUnknownCommand                       ;display error message
  4407                                  
  4408                                                          jmp     .10                                             ;next command
  4409                                  .20                     shl     eax,2                                           ;index into jump table
  4410                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  4411                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4412                                                          call    eax                                             ;call command handler
  4413                                                          jmp     .10                                             ;next command
  4414                                  ;-----------------------------------------------------------------------------------------------------------------------
  4415                                  ;
  4416                                  ;       Routine:        ConInitializeData
  4417                                  ;
  4418                                  ;       Description:    This routine initializes console task variables.
  4419                                  ;
  4420                                  ;-----------------------------------------------------------------------------------------------------------------------
  4421                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  4422                                                          push    edi                                             ;
  4423                                                          push    es                                              ;
  4424                                  ;
  4425                                  ;       Initialize console work areas.
  4426                                  ;
  4427                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  4428                                                          pop     es                                              ;... into extra segment register
  4429                                                          mov     edi,ECONDATA                                    ;OS console data address
  4430                                                          xor     al,al                                           ;initialization value
  4431                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  4432                                                          cld                                                     ;forward strings
  4433                                                          rep     stosb                                           ;initialize data
  4434                                  ;
  4435                                  ;       Initialize heap size
  4436                                  ;
  4437                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4438                                                          mov     [wdConsoleHeapSize],eax                         ;set heap size
  4439                                  ;
  4440                                  ;       Initialize MEMROOT structure
  4441                                  ;
  4442                                                          mov     edi,wsConsoleMemRoot                            ;memory root structure address
  4443                                                          mov     eax,EKRNHEAPBASE                                ;base address of heap storage
  4444                                                          xor     ecx,ecx                                         ;zero register
  4445                                                          mov     cl,4                                            ;count
  4446                                                          rep     stosd                                           ;store first/last contig and free addrs
  4447                                                          xor     eax,eax                                         ;zero register
  4448                                                          stosd                                                   ;zero first task block
  4449                                                          stosd                                                   ;zero last task block
  4450                                  ;
  4451                                  ;       Initialize MEMBLOCK structure at EMEMBASE
  4452                                  ;
  4453                                                          mov     edi,EKRNHEAPBASE                                ;memory block structure address
  4454                                                          mov     eax,EMEMFREECODE                                ;free memory signature
  4455                                                          stosd                                                   ;store signature
  4456                                                          mov     eax,EKRNHEAPSIZE                                ;heap size
  4457                                                          stosd                                                   ;store block size
  4458                                                          xor     ecx,ecx                                         ;zero register
  4459                                                          mov     cl,6                                            ;count
  4460                                                          xor     eax,eax                                         ;zero register
  4461                                                          rep     stosd                                           ;zero owner, reserved, pointers
  4462                                  ;
  4463                                  ;       Restore and return.
  4464                                  ;
  4465                                                          pop     es                                              ;restore non-volatile regs
  4466                                                          pop     edi                                             ;
  4467                                                          pop     ecx                                             ;
  4468                                                          ret                                                     ;return
  4469                                  ;-----------------------------------------------------------------------------------------------------------------------
  4470                                  ;
  4471                                  ;       Routine:        ConTakeToken
  4472                                  ;
  4473                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4474                                  ;
  4475                                  ;       In:             DS:EDX  source buffer address
  4476                                  ;                       DS:EBX  target buffer address
  4477                                  ;
  4478                                  ;       Out:            DS:EDX  source buffer address
  4479                                  ;                       DS:EBX  target buffer address
  4480                                  ;
  4481                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4482                                  ;
  4483                                  ;-----------------------------------------------------------------------------------------------------------------------
  4484                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  4485                                                          push    edi                                             ;
  4486                                                          push    es                                              ;
  4487                                                          push    ds                                              ;load data segment selector ...
  4488                                                          pop     es                                              ;... into extra segment reg
  4489                                                          mov     esi,edx                                         ;source buffer address
  4490                                                          mov     edi,ebx                                         ;target buffer address
  4491                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4492                                                          cld                                                     ;forward strings
  4493                                  .10                     lodsb                                                   ;load byte
  4494                                                          cmp     al,EASCIISPACE                                  ;space?
  4495                                                          je      .10                                             ;yes, continue
  4496                                                          test    al,al                                           ;end of line?
  4497                                                          jz      .40                                             ;yes, branch
  4498                                  .20                     stosb                                                   ;store byte
  4499                                                          lodsb                                                   ;load byte
  4500                                                          test    al,al                                           ;end of line?
  4501                                                          jz      .40                                             ;no, continue
  4502                                                          cmp     al,EASCIISPACE                                  ;space?
  4503                                                          jne     .20                                             ;no, continue
  4504                                  .30                     lodsb                                                   ;load byte
  4505                                                          cmp     al,EASCIISPACE                                  ;space?
  4506                                                          je      .30                                             ;yes, continue
  4507                                                          dec     esi                                             ;pre-position
  4508                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4509                                                          mov     edi,edx                                         ;source buffer address
  4510                                  .50                     lodsb                                                   ;remaining byte
  4511                                                          stosb                                                   ;move to front of buffer
  4512                                                          test    al,al                                           ;end of line?
  4513                                                          jnz     .50                                             ;no, continue
  4514                                                          pop     es                                              ;restore non-volatile regs
  4515                                                          pop     edi                                             ;
  4516                                                          pop     esi                                             ;
  4517                                                          ret                                                     ;return
  4518                                  ;-----------------------------------------------------------------------------------------------------------------------
  4519                                  ;
  4520                                  ;       Routine:        ConDetermineCommand
  4521                                  ;
  4522                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4523                                  ;
  4524                                  ;       input:          DS:EDX  command address
  4525                                  ;
  4526                                  ;       output:         EAX     >=0     = command nbr
  4527                                  ;                               0       = unknown command
  4528                                  ;
  4529                                  ;-----------------------------------------------------------------------------------------------------------------------
  4530                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4531                                                          push    ecx                                             ;
  4532                                                          push    esi                                             ;
  4533                                                          push    edi                                             ;
  4534                                  
  4535                                                          upperCaseString                                         ;upper-case string at EDX
  4536                                  
  4537                                                          mov     esi,tConCmdTbl                                  ;commands table
  4538                                                          xor     edi,edi                                         ;intialize command number
  4539                                                          cld                                                     ;forward strings
  4540                                  .10                     lodsb                                                   ;command length
  4541                                                          movzx   ecx,al                                          ;command length
  4542                                                          jecxz   .20                                             ;branch if end of table
  4543                                                          mov     ebx,esi                                         ;table entry address
  4544                                                          add     esi,ecx                                         ;next table entry address
  4545                                  
  4546                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4547                                  
  4548                                                          jecxz   .20                                             ;branch if equal
  4549                                                          inc     edi                                             ;increment command nbr
  4550                                                          jmp     .10                                             ;repeat
  4551                                  .20                     mov     eax,edi                                         ;command number
  4552                                                          pop     edi                                             ;restore non-volatile regs
  4553                                                          pop     esi                                             ;
  4554                                                          pop     ecx                                             ;
  4555                                                          pop     ebx                                             ;
  4556                                                          ret                                                     ;return
  4557                                  ;-----------------------------------------------------------------------------------------------------------------------
  4558                                  ;
  4559                                  ;       Routine:        ConClear
  4560                                  ;
  4561                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4562                                  ;
  4563                                  ;-----------------------------------------------------------------------------------------------------------------------
  4564                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4565                                                          ret                                                     ;return
  4566                                  ;-----------------------------------------------------------------------------------------------------------------------
  4567                                  ;
  4568                                  ;       Routine:        ConExit
  4569                                  ;
  4570                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4571                                  ;
  4572                                  ;-----------------------------------------------------------------------------------------------------------------------
  4573                                  ConExit                 resetSystem                                             ;issue system reset
  4574                                                          ret                                                     ;return
  4575                                  ;-----------------------------------------------------------------------------------------------------------------------
  4576                                  ;
  4577                                  ;       Routine:        ConFree
  4578                                  ;
  4579                                  ;       Description:    This routine handles the FREE command.
  4580                                  ;
  4581                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4582                                  ;
  4583                                  ;-----------------------------------------------------------------------------------------------------------------------
  4584                                  ConFree                 push    ebx                                             ;save non-volatile regs
  4585                                                          push    ecx                                             ;
  4586                                                          push    esi                                             ;
  4587                                                          push    edi                                             ;
  4588                                  ;
  4589                                  ;       Get address parameter
  4590                                  ;
  4591                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (param)
  4592                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4593                                                          call    ConTakeToken                                    ;take first param as token
  4594                                  ;
  4595                                  ;       Convert input parameter from hexadecimal string to binary
  4596                                  ;
  4597                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4598                                                          je      .10                                             ;no, branch
  4599                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4600                                  
  4601                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4602                                  
  4603                                                          test    eax,eax                                         ;valid parameter?
  4604                                                          jz      .10                                             ;no, branch
  4605                                  ;
  4606                                  ;       Free memory block
  4607                                  ;
  4608                                                          freeMemory eax                                          ;free memory
  4609                                  
  4610                                                          cmp     eax,-1                                          ;memory freed?
  4611                                                          je      .10                                             ;no, branch
  4612                                  ;
  4613                                  ;       Indicate memory freed
  4614                                  ;
  4615                                                          putConsoleString czOK                                   ;indicate success
  4616                                  ;
  4617                                  ;       Restore and return
  4618                                  ;
  4619                                  .10                     pop     edi                                             ;restore non-volatile regs
  4620                                                          pop     esi                                             ;
  4621                                                          pop     ecx                                             ;
  4622                                                          pop     ebx                                             ;
  4623                                                          ret                                                     ;return
  4624                                  ;-----------------------------------------------------------------------------------------------------------------------
  4625                                  ;
  4626                                  ;       Routine:        ConInt6
  4627                                  ;
  4628                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4629                                  ;
  4630                                  ;-----------------------------------------------------------------------------------------------------------------------
  4631                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  4632                                                          ret                                                     ;return (not executed)
  4633                                  ;-----------------------------------------------------------------------------------------------------------------------
  4634                                  ;
  4635                                  ;       Routine:        ConMalloc
  4636                                  ;
  4637                                  ;       Description:    This routine handles the MALLOC command.
  4638                                  ;
  4639                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4640                                  ;
  4641                                  ;-----------------------------------------------------------------------------------------------------------------------
  4642                                  ConMalloc               push    ebx                                             ;save non-volatile regs
  4643                                                          push    ecx                                             ;
  4644                                                          push    esi                                             ;
  4645                                                          push    edi                                             ;
  4646                                  ;
  4647                                  ;       Get size parameter
  4648                                  ;
  4649                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4650                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4651                                                          call    ConTakeToken                                    ;take first param as token
  4652                                  ;
  4653                                  ;       Convert input parameter from decimal string to binary
  4654                                  ;
  4655                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4656                                                          je      .10                                             ;no, branch
  4657                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4658                                  
  4659                                                          decimalToUnsigned                                       ;convert string token to unsigned
  4660                                  
  4661                                                          test    eax,eax                                         ;valid parameter?
  4662                                                          jz      .10                                             ;no, branch
  4663                                  ;
  4664                                  ;       Allocate memory block
  4665                                  ;
  4666                                                          allocateMemory eax                                      ;allocate memory
  4667                                  
  4668                                                          test    eax,eax                                         ;memory allocated?
  4669                                                          jz      .10                                             ;no, branch
  4670                                  ;
  4671                                  ;       Report allocated memory block address
  4672                                  ;
  4673                                                          mov     edx,wzConsoleOutBuffer                          ;output buffer address
  4674                                                          mov     ecx,eax                                         ;memory address
  4675                                  
  4676                                                          unsignedToHexadecimal                                   ;convert memory address to hex
  4677                                                          putConsoleString wzConsoleOutBuffer                     ;display memory address
  4678                                                          putConsoleString czNewLine                              ;display new line
  4679                                  
  4680                                  .10                     pop     edi                                             ;restore non-volatile regs
  4681                                                          pop     esi                                             ;
  4682                                                          pop     ecx                                             ;
  4683                                                          pop     ebx                                             ;
  4684                                                          ret                                                     ;return
  4685                                  ;-----------------------------------------------------------------------------------------------------------------------
  4686                                  ;
  4687                                  ;       Routine:        ConMem
  4688                                  ;
  4689                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4690                                  ;
  4691                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4692                                  ;
  4693                                  ;-----------------------------------------------------------------------------------------------------------------------
  4694                                  ConMem                  push    ebx                                             ;save non-volatile regs
  4695                                                          push    esi                                             ;
  4696                                                          push    edi                                             ;
  4697                                  ;
  4698                                  ;       Update the source address if a parameter is given.
  4699                                  ;
  4700                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4701                                                          mov     ebx,wzConsoleToken                              ;console command token address
  4702                                                          call    ConTakeToken                                    ;take first param as token
  4703                                                          cmp     byte [wzConsoleToken],0                         ;token found?
  4704                                                          je      .10                                             ;no, branch
  4705                                                          mov     edx,wzConsoleToken                              ;first param as token address
  4706                                  
  4707                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4708                                  
  4709                                                          mov     [wdConsoleMemBase],eax                          ;save console memory address
  4710                                  ;
  4711                                  ;       Setup source address and row count.
  4712                                  ;
  4713                                  .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4714                                                          xor     ecx,ecx                                         ;zero register
  4715                                                          mov     cl,16                                           ;row count
  4716                                  ;
  4717                                  ;       Start the row with the source address in hexadecimal.
  4718                                  ;
  4719                                  .20                     push    ecx                                             ;save remaining rows
  4720                                                          mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4721                                                          mov     edx,edi                                         ;output buffer address
  4722                                                          mov     ecx,esi                                         ;console memory address
  4723                                  
  4724                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4725                                  
  4726                                                          add     edi,8                                           ;end of memory addr hexnum
  4727                                                          mov     al,' '                                          ;ascii space
  4728                                                          stosb                                                   ;store delimiter
  4729                                  ;
  4730                                  ;       Output 16 ASCII hexadecimal byte values for the row.
  4731                                  ;
  4732                                                          xor     ecx,ecx                                         ;zero register
  4733                                                          mov     cl,16                                           ;loop count
  4734                                  .30                     push    ecx                                             ;save loop count
  4735                                                          lodsb                                                   ;memory byte
  4736                                                          mov     ah,al                                           ;memory byte
  4737                                                          shr     al,4                                            ;high-order in bits 3-0
  4738                                                          or      al,30h                                          ;apply ascii numeric zone
  4739                                                          cmp     al,3ah                                          ;numeric range?
  4740                                                          jb      .40                                             ;yes, skip ahead
  4741                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4742                                  .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4743                                                          mov     al,ah                                           ;low-order in bits 3-0
  4744                                                          and     al,0fh                                          ;mask out high-order bits
  4745                                                          or      al,30h                                          ;apply ascii numeric zone
  4746                                                          cmp     al,3ah                                          ;numeric range?
  4747                                                          jb      .50                                             ;yes, skip ahead
  4748                                                          add     al,7                                            ;adjust ascii for 'A'-'F'
  4749                                  .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4750                                                          mov     al,' '                                          ;ascii space
  4751                                                          stosb                                                   ;store ascii space delimiter
  4752                                                          pop     ecx                                             ;loop count
  4753                                                          loop    .30                                             ;next
  4754                                  ;
  4755                                  ;       Output printable ASCII character section for the row.
  4756                                  ;
  4757                                                          sub     esi,16                                          ;reset source pointer
  4758                                                          mov     cl,16                                           ;loop count
  4759                                  .60                     lodsb                                                   ;source byte
  4760                                                          cmp     al,32                                           ;printable? (low-range test)
  4761                                                          jb      .70                                             ;no, skip ahead
  4762                                                          cmp     al,128                                          ;printable? (high-range test)
  4763                                                          jb      .80                                             ;yes, skip ahead
  4764                                  .70                     mov     al,' '                                          ;display space instead of printable
  4765                                  .80                     stosb                                                   ;store printable ascii byte
  4766                                                          loop    .60                                             ;next source byte
  4767                                                          xor     al,al                                           ;nul-terminator
  4768                                                          stosb                                                   ;terminate output line
  4769                                  ;
  4770                                  ;       Display constructed output buffer and newline.
  4771                                  ;
  4772                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4773                                                          putConsoleString czNewLine                              ;display new line
  4774                                  ;
  4775                                  ;       Repeat until all lines displayed and preserve source address.
  4776                                  ;
  4777                                                          pop     ecx                                             ;remaining rows
  4778                                                          loop    .20                                             ;next row
  4779                                                          mov     [wdConsoleMemBase],esi                          ;update console memory address
  4780                                                          pop     edi                                             ;restore regs
  4781                                                          pop     esi                                             ;
  4782                                                          pop     ebx                                             ;
  4783                                                          ret                                                     ;return
  4784                                  ;-----------------------------------------------------------------------------------------------------------------------
  4785                                  ;
  4786                                  ;       Routine:        ConVersion
  4787                                  ;
  4788                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4789                                  ;
  4790                                  ;-----------------------------------------------------------------------------------------------------------------------
  4791                                  ConVersion              putConsoleString czTitle                                ;display version message
  4792                                                          ret                                                     ;return
  4793                                  ;-----------------------------------------------------------------------------------------------------------------------
  4794                                  ;
  4795                                  ;       Tables
  4796                                  ;
  4797                                  ;-----------------------------------------------------------------------------------------------------------------------
  4798                                                                                                                  ;---------------------------------------
  4799                                                                                                                  ;  Command Jump Table
  4800                                                                                                                  ;---------------------------------------
  4801                                  tConJmpTbl              equ     $                                               ;command jump table
  4802                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  4803                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  4804                                                          dd      ConMalloc       - ConCode                       ;malloc command routine offset
  4805                                                          dd      ConMem          - ConCode                       ;memory command routine offset
  4806                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  4807                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  4808                                                          dd      ConFree         - ConCode                       ;free command routine offset
  4809                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  4810                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  4811                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  4812                                                          dd      ConMem          - ConCode                       ;mem command routine offset
  4813                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  4814                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4815                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4816                                                                                                                  ;---------------------------------------
  4817                                                                                                                  ;  Command Name Table
  4818                                                                                                                  ;---------------------------------------
  4819                                  tConCmdTbl              equ     $                                               ;command name table
  4820                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  4821                                                          db      8,"VERSION",0                                   ;version command
  4822                                                          db      7,"MALLOC",0                                    ;malloc command
  4823                                                          db      7,"MEMORY",0                                    ;memory command
  4824                                                          db      6,"CLEAR",0                                     ;clear command
  4825                                                          db      5,"EXIT",0                                      ;exit command
  4826                                                          db      5,"FREE",0                                      ;free command
  4827                                                          db      5,"INT6",0                                      ;int6 command
  4828                                                          db      5,"QUIT",0                                      ;quit command
  4829                                                          db      4,"CLS",0                                       ;cls command
  4830                                                          db      4,"MEM",0                                       ;mem command
  4831                                                          db      4,"VER",0                                       ;ver command
  4832                                                          db      0                                               ;end of table
  4833                                  ;-----------------------------------------------------------------------------------------------------------------------
  4834                                  ;
  4835                                  ;       Constants
  4836                                  ;
  4837                                  ;-----------------------------------------------------------------------------------------------------------------------
  4838                                  czNewLine               db      13,10,0                                         ;new line string
  4839                                  czOK                    db      "ok",13,10,0                                    ;ok string
  4840                                  czPrompt                db      ":",0                                           ;prompt string
  4841                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4842                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4843                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  4844                                  %endif
  4845                                  %ifdef BUILDDISK
  4846                                  ;-----------------------------------------------------------------------------------------------------------------------
  4847                                  ;
  4848                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4849                                  ;
  4850                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4851                                  ;
  4852                                  ;-----------------------------------------------------------------------------------------------------------------------
  4853                                  section                 unused                                                  ;unused disk space
  4854                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4855                                  %endif
  4856                                  ;=======================================================================================================================
  4857                                  ;
  4858                                  ;       End of Program Code
  4859                                  ;
  4860                                  ;=======================================================================================================================
