     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.010
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to add a "pciprobe" command that searches the
     8                                  ;			system for PCI expansion BIOS.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   190                                  ;
   191                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ERTCREGPORT		equ	70h						;register select port
   195                                  ERTCDATAPORT		equ	71h						;data port
   196                                  ERTCSECONDREG		equ	00h						;second
   197                                  ERTCMINUTEREG		equ	02h						;minute
   198                                  ERTCHOURREG		equ	04h						;hour
   199                                  ERTCWEEKDAYREG		equ	06h						;weekday
   200                                  ERTCDAYREG		equ	07h						;day
   201                                  ERTCMONTHREG		equ	08h						;month
   202                                  ERTCYEARREG		equ	09h						;year of the century
   203                                  ERTCSTATUSREG		equ	0bh						;status
   204                                  ERTCCENTURYREG		equ	32h						;century
   205                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  ;
   208                                  ;	x86 Descriptor Access Codes						EACC...
   209                                  ;
   210                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   211                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   212                                  ;
   213                                  ;	0.......	Segment is not present in memory (triggers int 11)
   214                                  ;	1.......	Segment is present in memory
   215                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   216                                  ;	...0....	Segment is a system segment
   217                                  ;	...00010		Local Descriptor Table
   218                                  ;	...00101		Task Gate
   219                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   220                                  ;	...01100		Call Gate (386)
   221                                  ;	...01110		Interrupt Gate (386)
   222                                  ;	...01111		Trap Gate (386)
   223                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   224                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   225                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   226                                  ;
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  EACCLDT			equ	10000010b					;local descriptor table
   229                                  EACCTASK		equ	10000101b					;task gate
   230                                  EACCTSS			equ	10001001b					;task-state segment
   231                                  EACCGATE		equ	10001100b					;call gate
   232                                  EACCINT			equ	10001110b					;interrupt gate
   233                                  EACCTRAP		equ	10001111b					;trap gate
   234                                  EACCDATA		equ	10010011b					;upward writable data
   235                                  EACCCODE		equ	10011011b					;non-conforming readable code
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;	BIOS Interrupts and Functions						EBIOS...
   239                                  ;
   240                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   241                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   242                                  ;
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   245                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   246                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   247                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   248                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   249                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   250                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;	ASCII									EASCII...
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   257                                  EASCIILINEFEED		equ	10						;ASCII line feed
   258                                  EASCIIRETURN		equ	13						;ASCII carriage return
   259                                  EASCIIESCAPE		equ	27						;ASCII escape
   260                                  EASCIISPACE		equ	32						;ASCII space
   261                                  EASCIIPERIOD		equ	46						;ASCII period
   262                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   263                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   264                                  EASCIILOWERA		equ	97						;ASCII 'a'
   265                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   266                                  EASCIITILDE		equ	126						;ASCII '~'
   267                                  EASCIICASE		equ	00100000b					;ASCII case bit
   268                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  ;
   271                                  ;	PCI									EPCI...
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  EPCIVENDORAPPLE		equ	106Bh						;Apple
   275                                  EPCIVENDORINTEL		equ	8086h						;Intel
   276                                  EPCIVENDORORACLE	equ	80EEh						;Oracle
   277                                  EPCIAPPLEUSB		equ	003Fh						;USB Controller
   278                                  EPCIINTELPRO1000MT	equ	100Fh						;Pro/1000 MT Ethernet Adapter
   279                                  EPCIINTELPCIMEM		equ	1237h						;PCI & Memory
   280                                  EPCIINTELAD1881		equ	2415h						;Aureal AD1881 SOUNDMAX
   281                                  EPCIINTELPIIX3		equ	7000h						;PIIX3 PCI-to-ISA Bridge (Triton II)
   282                                  EPCIINTEL82371AB	equ	7111h						;82371AB/EB PCI Bus Master IDE Cntrlr
   283                                  EPCIINTELPIIX4		equ	7113h						;PIIX4/4E/4M Power Mgmt Cntrlr
   284                                  EPCIORACLEVBOXGA	equ	0BEEFh						;VirtualBox Graphics Adapter
   285                                  EPCIORACLEVBOXDEVICE	equ	0CAFEh						;VirtualBox Device
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;	Boot Sector and Loader Constants
   289                                  ;
   290                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   291                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   292                                  ;
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   295                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   296                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   297                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   298                                  EMAXTRIES		equ	5						;max read retries
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ESELDAT			equ	18h						;kernel data selector
   303                                  ESELCGA			equ	20h						;cga video selector
   304                                  ESELOSCODE		equ	48h						;os kernel selector
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;	LDT Selectors								ESEL...
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  ESELMQ			equ	2Ch						;console task message queue
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;	Kernel Constants							EKRN...
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  EKRNDESLEN		equ	8						;size of descriptor
   313                                  EKRNADR			equ	1000h						;kernel base address
   314                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   315                                  ;-----------------------------------------------------------------------------------------------------------------------
   316                                  ;	Keyboard Flags								EKEY...
   317                                  ;-----------------------------------------------------------------------------------------------------------------------
   318                                  EKEYCTRLLEFT		equ	00000001b					;left control
   319                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   320                                  EKEYALTLEFT		equ	00000100b					;left alt
   321                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   322                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   323                                  EKEYSHIFT		equ	00010010b					;left or right shift
   324                                  EKEYALTRIGHT		equ	00100000b					;right alt
   325                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   326                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   327                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   328                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;	Hardware Flags
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EHWETHERNET		equ	80h						;ethernet adapter found
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;	Console Constants							ECON...
   335                                  ;-----------------------------------------------------------------------------------------------------------------------
   336                                  ECONCOLS		equ	80						;columns per row
   337                                  ECONROWS		equ	24						;console rows
   338                                  ECONOIAROW		equ	24						;operator information area row
   339                                  ECONCOLBYTES		equ	2						;bytes per column
   340                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   341                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   342                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   343                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   344                                  ;-----------------------------------------------------------------------------------------------------------------------
   345                                  ;	Kernel Message Identifiers						EMSG...
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   348                                  EMSGKEYUP		equ	41010000h					;message: key-up
   349                                  EMSGKEYCHAR		equ	41020000h					;message: character
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;	Structures
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;
   357                                  ;	DATETIME
   358                                  ;
   359                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  struc			DATETIME
   363 00000000 <res 00000001>          .second			resb	1						;seconds
   364 00000001 <res 00000001>          .minute			resb	1						;minutes
   365 00000002 <res 00000001>          .hour			resb	1						;hours
   366 00000003 <res 00000001>          .weekday		resb	1						;day of week
   367 00000004 <res 00000001>          .day			resb	1						;day of month
   368 00000005 <res 00000001>          .month			resb	1						;month of year
   369 00000006 <res 00000001>          .year			resb	1						;year of century
   370 00000007 <res 00000001>          .century		resb	1						;century
   371                                  EDATETIMEL		equ	($-.second)
   372                                  endstruc
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;
   375                                  ;	MQUEUE
   376                                  ;
   377                                  ;	The MQUEUE structure maps memory used for a message queue.
   378                                  ;
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  struc			MQUEUE
   381 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   382 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   383 00000008 <res 000003F8>          MQData			resd	254						;message queue
   384                                  endstruc
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  ;
   387                                  ;	OSDATA
   388                                  ;
   389                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   390                                  ;	used by the BIOS.
   391                                  ;
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  struc			OSDATA
   394 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   395 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   396 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   397 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   398 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   399 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   400 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   401 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   402 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   403 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   404 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   405 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   406 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   407 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   408 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   409 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   410 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   411 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   412 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   413 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   414 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   415 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   416 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   417 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   418 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   419 00000449 <res 00000001>          			resb	1						;449 current video mode
   420 0000044A <res 00000002>          			resw	1						;44A screen columns
   421 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   422 0000044E <res 00000002>          			resw	1						;44E current video page offset
   423 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   424 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   425 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   426 00000462 <res 00000001>          			resb	1						;462 active display page number
   427 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   428 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   429 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   430 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   431 00000469 <res 00000003>          			resb	3						;469 vague
   432 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   433 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   434 00000471 <res 00000001>          			resb	1						;471 bios break flag
   435 00000472 <res 00000002>          			resw	1						;472 soft reset
   436 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   437 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   438 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   439 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   440 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   441 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   442 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   443 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   444 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   445 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   446 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   447 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   448 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   449 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   450 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   451 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   452 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   453 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   454 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   455 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   456 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   457 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   458 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   459 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   460 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   461 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   462 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   463 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   464 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   465 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   466 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   467 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   468 000004AC <res 00000008>          			resb	8						;4AC reserved
   469 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   470 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   471 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   472 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   473 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   474 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   475 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   476 000004CD <res 00000001>          			resb	1						;4CD unknown
   477 000004CE <res 00000002>          			resw	1						;4CE day counter
   478 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   479 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   480 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   481 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   482 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   483 00000505 <res 0000000A>          			resb	10						;505 POST work area
   484 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   485 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   486 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   487 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   488 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   489 0000051E <res 00000002>          			resw	1						;51E unknown
   490 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   491 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   492 00000530 <res 00000004>          			resb	4						;530 MODE command
   493 00000534 <res 000001CC>          			resb	460						;534 unused
   494 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   495                                  ;-----------------------------------------------------------------------------------------------------------------------
   496                                  ;
   497                                  ;	OS Variables								@disk: N/A	@mem: 000800
   498                                  ;
   499                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   500                                  ;	accessible by any kernel task or interrupt.
   501                                  ;
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  ECONDATA		equ	($)
   504 00000800 <res 00000004>          wfConsoleMemAddr	resd	1						;console memory address
   505 00000804 <res 00000004>          wfConsolePCISelector	resd	1						;PCI selector (bbbbbbbb dddddfff)
   506                                  wfConsolePCIData	equ	$						;PCI register data value
   507 00000808 <res 00000002>          wwConsolePCIVendor	resw	1						;PCI data vendor
   508 0000080A <res 00000002>          wwConsolePCIChip	resw	1						;PCI data chip
   509 0000080C <res 00000004>          wfConsolePCIVendorStr	resd	1						;PCI vendor name string addr
   510 00000810 <res 00000004>          wfConsolePCIChipStr	resd	1						;PCI device name string addr
   511 00000814 <res 00000004>          wfConsoleEthernetDevice	resd	1						;PCI ethernet adapter selector
   512 00000818 <res 00000004>          wfConsoleEthernetMem	resd	1						;PCI ethernet memory mapped i/o address
   513 0000081C <res 00000004>          wfConsoleEthernetPort	resd	1						;PCI ethernet i/o port
   514 00000820 <res 00000004>          wfConsoleEthernetCtrl	resd	1						;PCI ethernet control register value
   515 00000824 <res 00000001>          wbConsoleColumn		resb	1						;console column
   516 00000825 <res 00000001>          wbConsoleRow		resb	1						;console row
   517 00000826 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   518 00000827 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   519 00000828 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   520 00000829 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   521 0000082A <res 00000001>          wbConsoleScan1		resb	1						;scan code
   522 0000082B <res 00000001>          wbConsoleScan2		resb	1						;scan code
   523 0000082C <res 00000001>          wbConsoleScan3		resb	1						;scan code
   524 0000082D <res 00000001>          wbConsoleScan4		resb	1						;scan code
   525 0000082E <res 00000001>          wbConsoleScan5		resb	1						;scan code
   526 0000082F <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   527 00000830 <res 00000001>          wbConsolePCIBus		resb	1						;PCI bus
   528 00000831 <res 00000001>          wbConsolePCIDevice	resb	1						;PCI device
   529 00000832 <res 00000001>          wbConsolePCIFunction	resb	1						;PCI function
   530 00000833 <res 00000001>          wbConsoleHWFlags	resb	1						;Hardware Flags
   531 00000834 <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   532 00000884 <res 00000050>          wzConsoleToken		resb	80						;token buffer
   533 000008D4 <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   534 00000924 <res 00000008>          wsConsoleDateTime	resb	EDATETIMEL					;date-time buffer
   535                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   536                                  endstruc
   537                                  ;-----------------------------------------------------------------------------------------------------------------------
   538                                  ;
   539                                  ;	Macros
   540                                  ;
   541                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   542                                  ;
   543                                  ;-----------------------------------------------------------------------------------------------------------------------
   544                                  %macro			mint	1
   545                                  _%1			equ	($-$$) / EKRNDESLEN
   546                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   547                                  %endmacro
   548                                  %macro			mtrap	1
   549                                  _%1			equ	($-$$) / EKRNDESLEN
   550                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   551                                  %endmacro
   552                                  %macro			menter	1
   553                                  ?%1			equ	($-$$)
   554                                  %endmacro
   555                                  %macro			tsvce	1
   556                                  e%1			equ	($-tsvc)/4
   557                                  			dd	%1
   558                                  %endmacro
   559                                  %ifdef BUILDBOOT
   560                                  ;-----------------------------------------------------------------------------------------------------------------------
   561                                  ;
   562                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   563                                  ;
   564                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   565                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   566                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   567                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   568                                  ;
   569                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   570                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   571                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   572                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   573                                  ;	immediately followed by a disk parameter table.
   574                                  ;
   575                                  ;-----------------------------------------------------------------------------------------------------------------------
   576                                  			cpu	8086						;assume minimal CPU
   577                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   578                                  			bits	16						;16-bit code at power-up
   579                                  %ifdef BUILDPREP
   580                                  Boot			jmp	word Prep					;jump to preparation code
   581                                  %else
   582 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   583                                  %endif
   584                                  ;-----------------------------------------------------------------------------------------------------------------------
   585                                  ;
   586                                  ;	Disk Parameter Table
   587                                  ;
   588                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   589                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   590                                  ;
   591                                  ;-----------------------------------------------------------------------------------------------------------------------
   592 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   593 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   594 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   595 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   596 00000010 02                      cbFatCount		db	2						;file allocation table copies
   597 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   598 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   599 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   600 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   601                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   602 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   603 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   604 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   605                                  ;
   606                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   607                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   608                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   609                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   610                                  ;	given several possible starting values for CS:IP.
   611                                  ;
   612                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   613 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   614                                  .@20			equ	$-$$						;.@20 = 021h
   615 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   616 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   617 00000025 B104                    			mov	cl,4						;shift count
   618 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   619 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   620 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   621                                  ;
   622                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   623                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   624                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   625                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   626                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   627                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   628                                  ;
   629 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   630 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   631 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   632 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   633 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   634                                  ;
   635                                  ;	Our boot addressability is now set up according to the following diagram.
   636                                  ;
   637                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   638                                  ;				|  Unused (DOS Program Segment Prefix)		|
   639                                  ;			007c00	+-----------------------------------------------+ DS:0100
   640                                  ;				|  Boot Sector Code (vstart=100h)		|
   641                                  ;				|						|
   642                                  ;			007e00	+-----------------------------------------------+ DS:0300
   643                                  ;				|  Boot Stack					|
   644                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   645                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   646                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   647                                  ;				|						|
   648                                  ;			009100	+-----------------------------------------------+ DS:1600
   649                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   650                                  ;				|						|
   651                                  ;			009300	+-----------------------------------------------+ DS:1800
   652                                  ;
   653                                  ;	On entry, DL indicates the drive being booted from.
   654                                  ;
   655 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   656                                  ;
   657                                  ;	Compute directory i/o buffer address.
   658                                  ;
   659 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   660 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   661 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   662 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   663                                  ;
   664                                  ;	Compute segment where os.com will be loaded.
   665                                  ;
   666 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   667 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   668 0000004E 83E810                  			sub	ax,16						;AX = 0900
   669 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   670                                  ;
   671                                  ;	Write a message to the console so we know we have our addressability established.
   672                                  ;
   673 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   674 00000057 E84B01                  			call	BootPrint					;display loader message
   675                                  ;
   676                                  ;	Initialize the number of directory sectors to search.
   677                                  ;
   678 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   679 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   680                                  ;
   681                                  ;	Compute number of directory sectors and initialize overhead count.
   682                                  ;
   683 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   684 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   685 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   686 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   687                                  ;
   688                                  ;	Compute directory entries per sector.
   689                                  ;
   690 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   691 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   692 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   693                                  ;
   694                                  ;	Compute first logical directory sector and update overhead count.
   695                                  ;
   696 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   697 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   698 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   699 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   700 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   701 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   702                                  ;
   703                                  ;	Read directory sector.
   704                                  ;
   705 00000089 B001                    .30			mov	al,1						;sector count
   706 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   707 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   708 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   709                                  ;
   710                                  ;	Setup variables to search this directory sector.
   711                                  ;
   712 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   713 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   714 0000009C 7603                    			jna	.40						;no, continue
   715 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   716 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   717 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   718 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   719                                  ;
   720                                  ;	Loop through directory sectors searching for kernel program.
   721                                  ;
   722 000000AC 56                      .50			push	si						;save kernel name address
   723 000000AD 57                      			push	di						;save dir i/o buffer address
   724 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   725 000000B1 FC                      			cld							;forward strings
   726 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   727 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   728 000000B5 5E                      			pop	si						;restore kernel name address
   729 000000B6 7418                    			je	.60						;exit loop if found
   730 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   731 000000BC 48                      			dec	ax						;decrement remaining entries
   732 000000BD 75ED                    			jnz	.50						;next entry
   733                                  ;
   734                                  ;	Repeat search if we are not at the end of the directory.
   735                                  ;
   736 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   737 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   738 000000C8 75BF                    			jne	.30						;no, get next sector
   739 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   740 000000CD E9C000                  			jmp	BootExit					;display message and exit
   741                                  ;
   742                                  ;	If we find the kernel program in the directory, read the FAT.
   743                                  ;
   744 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   745 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   746 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   747 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   748 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   749 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   750                                  ;
   751                                  ;	Get the starting cluster of the kernel program and target address.
   752                                  ;
   753 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   754 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   755                                  ;
   756                                  ;	Read each program cluster into RAM.
   757                                  ;
   758 000000E9 50                      .70			push	ax						;save cluster nbr
   759 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   760 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   761 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   762 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   763 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   764 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   765 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   766 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   767                                  ;
   768                                  ;	Update buffer pointer for next cluster.
   769                                  ;
   770 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   771 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   772 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   773 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   774 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   775                                  ;
   776                                  ;	Compute next cluster number.
   777                                  ;
   778 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   779 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   780 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   781 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   782 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   783 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   784 0000011B 83E701                  			and	di,1						;get low bit
   785 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   786 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   787 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   788                                  ;
   789                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   790                                  ;
   791 00000126 F6C101                  			test	cl,1						;is cluster odd?
   792 00000129 7404                    			jz	.80						;no, skip ahead
   793 0000012B B104                    			mov	cl,4						;shift count
   794 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   795 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   796 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   797 00000135 75B2                    			jne	.70						;no, continue
   798                                  ;
   799                                  ;	Transfer control to the operating system program.
   800                                  ;
   801 00000137 EA                      			db	0EAh						;jmp seg:offset
   802 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   803 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   804                                  ;
   805                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   806                                  ;
   807 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   808 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   809 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   810 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   811 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   812 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   813 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   814 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   815 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   816 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   817                                  ;
   818                                  ;	Try maxtries times to read sector.
   819                                  ;
   820 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   821 0000015B 53                      .10			push	bx						;save buffer address
   822 0000015C 51                      			push	cx						;save retry count
   823 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   824 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   825 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   826 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   827 0000016A 59                      			pop	cx						;restore retry count
   828 0000016B 5B                      			pop	bx						;restore buffer address
   829 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   830 0000016E E2EB                    			loop	.10						;retry
   831                                  ;
   832                                  ;	Handle disk error: convert to ASCII and store in error string.
   833                                  ;
   834 00000170 88E0                    			mov	al,ah						;AL = bios error code
   835 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   836 00000174 B210                    			mov	dl,16						;divisor for base 16
   837 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   838 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   839 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   840 0000017E 7203                    			jb	.20						;continue if numeral
   841 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   842 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   843 00000185 7203                    			jb	.30						;continue if numeral
   844 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   845 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   846 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   847 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   848 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   849 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   850 00000197 7504                    			jnz	.20						;continue if key pressed
   851 00000199 FB                      			sti							;enable maskable interrupts
   852 0000019A F4                      			hlt							;wait for interrupt
   853 0000019B EBF6                    			jmp	.10						;repeat
   854 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   855 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   856 000001A1 FB                      .30			sti							;enable maskable interrupts
   857 000001A2 F4                      			hlt							;stop until reset, int, nmi
   858 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   859                                  ;
   860                                  ;	Display text message.
   861                                  ;
   862 000001A5 FC                      BootPrint		cld							;forward strings
   863 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   864 000001A7 84C0                    			test	al,al						;end of string?
   865 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   866 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   867 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   868 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   869 000001B1 C3                      BootReturn		ret							;return
   870                                  ;-----------------------------------------------------------------------------------------------------------------------
   871                                  ;
   872                                  ;	Constants
   873                                  ;
   874                                  ;-----------------------------------------------------------------------------------------------------------------------
   875                                  			align	2
   876 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   877 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   877 000001BD 4F4D               
   878 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   878 000001C8 2E2E0D0A00         
   879 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   879 000001D6 7220               
   880 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   881 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   881 000001E4 7373696E6700       
   882                                  ;-----------------------------------------------------------------------------------------------------------------------
   883                                  ;
   884                                  ;	Work Areas
   885                                  ;
   886                                  ;-----------------------------------------------------------------------------------------------------------------------
   887                                  			align	2
   888 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   889 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   890 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   891 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   892 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   893                                  wwReadCountCommand	equ	$						;read count and command
   894 000001F4 00                      wbReadCount		db	0						;sectors to read
   895 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   896                                  wwDriveHead		equ	$						;drive, head (word)
   897 000001F6 00                      wbDrive			db	0						;drive
   898 000001F7 00                      wbHead			db	0						;head
   899                                  wwSectorTrack		equ	$						;sector, track (word)
   900 000001F8 00                      			db	0						;sector
   901 000001F9 00                      wbTrack			db	0						;track
   902 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   903 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   904                                  %endif
   905                                  %ifdef BUILDPREP
   906                                  ;-----------------------------------------------------------------------------------------------------------------------
   907                                  ;
   908                                  ;	Diskette Preparation Code
   909                                  ;
   910                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   911                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   912                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   913                                  ;
   914                                  ;-----------------------------------------------------------------------------------------------------------------------
   915                                  ;
   916                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   917                                  ;
   918                                  Prep			mov	si,czPrepMsg10					;starting message address
   919                                  			call	BootPrint					;display message
   920                                  ;
   921                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   922                                  ;
   923                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   924                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   925                                  			jnz	.12						;continue if key pressed
   926                                  			sti							;enable interrupts
   927                                  			hlt							;wait for interrupt
   928                                  			jmp	.10						;repeat
   929                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   930                                  			je	.15						;yes, branch
   931                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   932                                  			jne	.10						;no, repeat
   933                                  			jmp	.90						;yes, exit program
   934                                  ;
   935                                  ;	Display writing-sector message and patch the JMP instruction.
   936                                  ;
   937                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   938                                  			call	BootPrint					;display message
   939                                  			mov	bx,Boot+1					;address of JMP instruction operand
   940                                  			mov	ax,01Bh						;address past disk parameter table
   941                                  			mov	[bx],ax						;update the JMP instruction
   942                                  ;
   943                                  ;	Try to read the boot sector.
   944                                  ;
   945                                  			mov	cx,EMAXTRIES					;try up to five times
   946                                  .20			push	cx						;save remaining tries
   947                                  			mov	bx,wcPrepInBuf					;input buffer address
   948                                  			mov	dx,0						;head zero, drive zero
   949                                  			mov	cx,1						;track zero, sector one
   950                                  			mov	ax,0201h					;read one sector
   951                                  			int	EBIOSINTDISKETTE				;attempt the read
   952                                  			pop	cx						;restore remaining retries
   953                                  			jnc	.30						;skip ahead if successful
   954                                  			loop	.20						;try again
   955                                  			mov	si,czPrepMsg20					;read-error message address
   956                                  			jmp	.50						;branch to error routine
   957                                  ;
   958                                  ;	Copy diskette parms from input buffer to output buffer.
   959                                  ;
   960                                  .30			mov	si,wcPrepInBuf					;input buffer address
   961                                  			add	si,11						;skip over JMP and system ID
   962                                  			mov	di,Boot						;output buffer address
   963                                  			add	di,11						;skip over JMP and system ID
   964                                  			mov	cx,19						;length of diskette parameters
   965                                  			cld							;forward string copies
   966                                  			rep	movsb						;copy diskette parameters
   967                                  ;
   968                                  ;	Try to write boot sector to diskette.
   969                                  ;
   970                                  			mov	cx,EMAXTRIES					;try up to five times
   971                                  .40			push	cx						;save remaining tries
   972                                  			mov	bx,Boot						;output buffer address
   973                                  			mov	dx,0						;head zero, drive zero
   974                                  			mov	cx,1						;track zero, sector one
   975                                  			mov	ax,0301h					;write one sector
   976                                  			int	EBIOSINTDISKETTE				;attempt the write
   977                                  			pop	cx						;restore remaining retries
   978                                  			jnc	.80						;skip ahead if successful
   979                                  			loop	.40						;try again
   980                                  			mov	si,czPrepMsg30					;write-error message address
   981                                  ;
   982                                  ;	Convert the error code to ASCII and display the error message.
   983                                  ;
   984                                  .50			push	ax						;save error code
   985                                  			mov	al,ah						;copy error code
   986                                  			mov	ah,0						;AX = error code
   987                                  			mov	dl,10h						;hexadecimal divisor
   988                                  			idiv	dl						;AL = hi-order, AH = lo-order
   989                                  			or	ax,3030h					;add ASCII zone digits
   990                                  			cmp	ah,3Ah						;AH ASCII numeral?
   991                                  			jb	.60						;yes, continue
   992                                  			add	ah,7						;no, make ASCII 'A'-'F'
   993                                  .60			cmp	al,3Ah						;al ASCII numeral?
   994                                  			jb	.70						;yes, continue
   995                                  			add	al,7						;no, make ASCII
   996                                  .70			mov	[si+17],ax					;put ASCII error code in message
   997                                  			call	BootPrint					;write error message
   998                                  			pop	ax						;restore error code
   999                                  ;
  1000                                  ;	Display the completion message.
  1001                                  ;
  1002                                  .80			mov	si,czPrepMsgOK					;assume successful completion
  1003                                  			mov	al,ah						;BIOS return code
  1004                                  			cmp	al,0						;success?
  1005                                  			je	.85						;yes, continue
  1006                                  			mov	si,czPrepMsgErr1				;disk parameter error message
  1007                                  			cmp	al,1						;disk parameter error?
  1008                                  			je	.85						;yes, continue
  1009                                  			mov	si,czPrepMsgErr2				;address mark not found message
  1010                                  			cmp	al,2						;address mark not found?
  1011                                  			je	.85						;yes, continue
  1012                                  			mov	si,czPrepMsgErr3				;protected disk message
  1013                                  			cmp	al,3						;protected disk?
  1014                                  			je	.85						;yes, continue
  1015                                  			mov	si,czPrepMsgErr6				;diskette removed message
  1016                                  			cmp	al,6						;diskette removed?
  1017                                  			je	.85						;yes, continue
  1018                                  			mov	si,czPrepMsgErr80				;drive timed out message
  1019                                  			cmp	al,80H						;drive timed out?
  1020                                  			je	.85						;yes, continue
  1021                                  			mov	si,czPrepMsgErrXX				;unknown error message
  1022                                  .85			call	BootPrint					;display result message
  1023                                  .90			mov	ax,4C00H					;terminate with zero result code
  1024                                  			int	21h						;terminate DOS program
  1025                                  			ret							;return (should not execute)
  1026                                  ;-----------------------------------------------------------------------------------------------------------------------
  1027                                  ;
  1028                                  ;	Diskette Preparation Messages
  1029                                  ;
  1030                                  ;-----------------------------------------------------------------------------------------------------------------------
  1031                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1032                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1033                                  			db	13,10
  1034                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1035                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
  1036                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1037                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1038                                  			db	13,10,0
  1039                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1040                                  			db	13,10,0
  1041                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1042                                  			db	13,10,0
  1043                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1044                                  			db	13,10,0
  1045                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1046                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1047                                  			db	13,10,0
  1048                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1049                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1050                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1051                                  			db	13,10,"and retry."
  1052                                  			db	13,10,0
  1053                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1054                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1055                                  			db	13,10,"using another diskette."
  1056                                  			db	13,10,0
  1057                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1058                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1059                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1060                                  			db	13,10,0
  1061                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1062                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1063                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1064                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1065                                  			db	13,10,"is properly inserted in the diskette drive."
  1066                                  			db	13,10,0
  1067                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1068                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1069                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1070                                  			db	13,10,0
  1071                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1072                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1073                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1074                                  			db	13,10,0
  1075                                  wcPrepInBuf		equ	$
  1076                                  %endif
  1077                                  %ifdef BUILDDISK
  1078                                  ;-----------------------------------------------------------------------------------------------------------------------
  1079                                  ;
  1080                                  ;	File Allocation Tables
  1081                                  ;
  1082                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1083                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1084                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1085                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1086                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1087                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1088                                  ;	the last cluster in the chain.
  1089                                  ;
  1090                                  ;	Every three bytes encode two FAT entries as follows:
  1091                                  ;
  1092                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1093                                  ;
  1094                                  ;-----------------------------------------------------------------------------------------------------------------------
  1095                                  ;-----------------------------------------------------------------------------------------------------------------------
  1096                                  ;
  1097                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1098                                  ;
  1099                                  ;-----------------------------------------------------------------------------------------------------------------------
  1100                                  section			fat1							;first copy of FAT
  1101 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1102 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1103 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1104 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1105 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1106 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1107 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1108 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1109 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1110 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1111 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1112 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1113                                  ;-----------------------------------------------------------------------------------------------------------------------
  1114                                  ;
  1115                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1116                                  ;
  1117                                  ;-----------------------------------------------------------------------------------------------------------------------
  1118                                  section			fat2							;second copy of FAT
  1119 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1120 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1121 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1122 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1123 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1124 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1125 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1126 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1127 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1128 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1129 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1130 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1131                                  ;-----------------------------------------------------------------------------------------------------------------------
  1132                                  ;
  1133                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1134                                  ;
  1135                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1136                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1137                                  ;	copy.
  1138                                  ;
  1139                                  ;-----------------------------------------------------------------------------------------------------------------------
  1140                                  section			dir							;diskette directory
  1141 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
  1141 00000009 4F4D               
  1142 0000000B 20                      			db	20h						;attribute (archive bit set)
  1143 0000000C 00<rept>                			times	10 db 0;					;unused
  1144 00000016 0000                    			dw	0h						;time
  1145 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1146 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1147 0000001A 0200                    			dw	2						;first cluster
  1148 0000001C 00520000                			dd	5200h						;file size
  1149 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1150                                  %endif
  1151                                  %ifdef BUILDCOM
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  ;
  1154                                  ;	OS.COM
  1155                                  ;
  1156                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1157                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1158                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1159                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1160                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1161                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1162                                  ;
  1163                                  ;	Our loader addressability is set up according to the following diagram.
  1164                                  ;
  1165                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1166                                  ;				|  Boot Sector & Loader Stack Area		|
  1167                                  ;				|						|
  1168                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1169                                  ;
  1170                                  ;
  1171                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1172                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1173                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1174                                  ;				|  Loader Code					|
  1175                                  ;				|						|
  1176                                  ;			009300	+-----------------------------------------------+ CS:0200
  1177                                  ;
  1178                                  ;-----------------------------------------------------------------------------------------------------------------------
  1179                                  ;-----------------------------------------------------------------------------------------------------------------------
  1180                                  ;
  1181                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1182                                  ;
  1183                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1184                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1185                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1186                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1187                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1188                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1189                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1190                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1191                                  ;	registers.
  1192                                  ;
  1193                                  ;-----------------------------------------------------------------------------------------------------------------------
  1194                                  			cpu	8086						;assume minimal CPU
  1195                                  section			loader	vstart=100h					;use .COM compatible addressing
  1196                                  			bits	16						;this is 16-bit code
  1197 00000000 0E                      Loader			push	cs						;use the code segment
  1198 00000001 1F                      			pop	ds						;...as our data segment
  1199 00000002 0E                      			push	cs						;use the code segment
  1200 00000003 07                      			pop	es						;...as our extra segment
  1201                                  ;
  1202                                  ;	Write a message to the console so we know we have our addressability established.
  1203                                  ;
  1204 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1205 00000007 E8A600                  			call	PutTTYString					;display loader message
  1206                                  ;
  1207                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1208                                  ;
  1209 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1210 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1211 00000010 3C03                    			cmp	al,3						;80386+?
  1212 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1213                                  			cpu	386						;allow 80386 instructions
  1214 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1215 00000017 E89600                  			call	PutTTYString					;display message
  1216                                  ;
  1217                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1218                                  ;
  1219 0000001A BE0003                  			mov	si,300h						;GDT offset
  1220 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1221 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1222 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1223 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1224 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1225 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1226 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1227 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1228 00000032 E87B00                  			call	PutTTYString					;display message
  1229                                  ;
  1230                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1231                                  ;
  1232 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1233 00000038 07                      			pop	es						;... as target segment
  1234 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1235 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1236 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1237 00000041 FC                      			cld							;forward strings
  1238 00000042 F3A4                    			rep	movsb						;copy kernel image
  1239 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1240 00000047 E86600                  			call	PutTTYString					;display message
  1241                                  ;
  1242                                  ;	Switch to protected mode.
  1243                                  ;
  1244 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1245 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1246 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1247 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1248 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1249 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1250 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1251 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1252 0000005E 4A                      			dec	dx						;restore outer loop count
  1253 0000005F 75F8                    			jnz	.10						;continue outer loop
  1254 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1255                                  ;
  1256                                  ;	Enable hardware and maskable interrupts
  1257                                  ;
  1258 00000063 30C0                    			xor	al,al						;enable all registers code
  1259 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1260 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1261 00000069 FB                      			sti							;enable maskable interrupts
  1262                                  ;
  1263                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1264                                  ;
  1265 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1266 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1267 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1268                                  ;-----------------------------------------------------------------------------------------------------------------------
  1269                                  ;
  1270                                  ;	Routine:	LoaderExit
  1271                                  ;
  1272                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1273                                  ;
  1274                                  ;	In:		DS:SI	string address
  1275                                  ;
  1276                                  ;-----------------------------------------------------------------------------------------------------------------------
  1277 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1278                                  ;
  1279                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1280                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1281                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1282                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1283                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1284                                  ;
  1285 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1286 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1287 00000082 7504                    			jnz	.40						;exit if key pressed
  1288 00000084 FB                      			sti							;enable maskable interrupts
  1289 00000085 F4                      			hlt							;wait for interrupt
  1290 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1291                                  ;
  1292                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1293                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1294                                  ;	HLT until the system resets.
  1295                                  ;
  1296 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1297 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1298 0000008C FB                      .50			sti							;enable maskable interrupts
  1299 0000008D F4                      			hlt							;stop until reset, int, nmi
  1300 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1301                                  ;-----------------------------------------------------------------------------------------------------------------------
  1302                                  ;
  1303                                  ;	Routine:	GetCPUType
  1304                                  ;
  1305                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1306                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1307                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1308                                  ;
  1309                                  ;	Output:		AX	0 = 808x, v20, etc.
  1310                                  ;				1 = 80186
  1311                                  ;				2 = 80286
  1312                                  ;				3 = 80386
  1313                                  ;
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1316 00000092 B120                    			mov	cl,32						;shift count
  1317 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1318 00000096 08C0                    			or	al,al						;did the shift happen?
  1319 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1320                                  			cpu	186
  1321 0000009A 54                      			push	sp						;save stack pointer
  1322 0000009B 59                      			pop	cx						;...into cx
  1323 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1324 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1325                                  			cpu	286
  1326 000000A0 40                      			inc	ax						;AX = 2
  1327 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1328 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1329 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1330 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1331 000000AE 40                      			inc	ax						;AX = 3
  1332 000000AF C3                      .10			ret							;return
  1333                                  ;-----------------------------------------------------------------------------------------------------------------------
  1334                                  ;
  1335                                  ;	Routine:	PutTTYString
  1336                                  ;
  1337                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1338                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1339                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1340                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1341                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1342                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1343                                  ;			registers and flags unless used to indicate return status.
  1344                                  ;
  1345                                  ;	In:		DS:SI	address of string
  1346                                  ;
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348 000000B0 FC                      PutTTYString		cld							;forward strings
  1349 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1350 000000B2 84C0                    			test	al,al						;end of string?
  1351 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1352 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1353 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1354 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1355 000000BC C3                      .10			ret							;return
  1356                                  ;-----------------------------------------------------------------------------------------------------------------------
  1357                                  ;
  1358                                  ;	Loader Data
  1359                                  ;
  1360                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1361                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1362                                  ;
  1363                                  ;-----------------------------------------------------------------------------------------------------------------------
  1364 000000BD 90                      			align	2
  1365 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1366 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1367 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1368 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1369 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1369 000000D1 74696E672073797374-
  1369 000000DA 656D20726571756972-
  1369 000000E3 657320616E20693338-
  1369 000000EC 3620               
  1370 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1370 000000F7 70726F636573736F72-
  1370 00000100 2E0D0A             
  1371 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1371 0000010C 65737320616E79206B-
  1371 00000115 657920746F20726573-
  1371 0000011E 746172742074686520 
  1372 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1372 00000130 0D0A00             
  1373 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1374 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1374 00000145 7265640D0A00       
  1375 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1375 00000154 616465640D0A00     
  1376 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1376 00000164 2E2E2E0D0A00       
  1377 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1378 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  ;
  1381                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1382                                  ;
  1383                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1384                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1385                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1386                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1387                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1388                                  ;
  1389                                  ;-----------------------------------------------------------------------------------------------------------------------
  1390                                  ;-----------------------------------------------------------------------------------------------------------------------
  1391                                  ;
  1392                                  ;	Tables
  1393                                  ;
  1394                                  ;-----------------------------------------------------------------------------------------------------------------------
  1395                                  ;-----------------------------------------------------------------------------------------------------------------------
  1396                                  ;
  1397                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1398                                  ;
  1399                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1400                                  ;	first descriptor must be all nulls.
  1401                                  ;
  1402                                  ;	6   5         4         3         2         1         0
  1403                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1404                                  ;	----------------------------------------------------------------
  1405                                  ;	h......hffffmmmma......ab......................bn..............n
  1406                                  ;	00000000			all areas have base addresses below 2^24
  1407                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1408                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1409                                  ;	            1001		present, ring-0, selector
  1410                                  ;
  1411                                  ;	h...h	hi-order base address (bits 24-31)
  1412                                  ;	ffff	flags
  1413                                  ;	mmmm	hi-order limit (bits 16-19)
  1414                                  ;	a...a	access
  1415                                  ;	b...b	lo-order base address (bits 0-23)
  1416                                  ;	n...n	lo-order limit (bits 0-15)
  1417                                  ;
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  section			gdt							;global descriptor table
  1420 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1421 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1422 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1423 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1424 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1425 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1426 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1427 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1428 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1429 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1430 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1431 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1432 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1433 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1434 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1435                                  ;-----------------------------------------------------------------------------------------------------------------------
  1436                                  ;
  1437                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1438                                  ;
  1439                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1440                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1441                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1442                                  ;
  1443                                  ;	6   5         4         3         2         1         0
  1444                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1445                                  ;	----------------------------------------------------------------
  1446                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1447                                  ;
  1448                                  ;	h...h	high-order offset (bits 16-31)
  1449                                  ;	P	present (0=unused interrupt)
  1450                                  ;	zz	descriptor privilege level
  1451                                  ;	S	storage segment (must be zero for IDT)
  1452                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1453                                  ;	S...S	handling code selector in GDT
  1454                                  ;	l...l	lo-order offset (bits 0-15)
  1455                                  ;
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  section			idt							;interrupt descriptor table
  1458                                  			mint	dividebyzero					;00 divide by zero
  1458                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1458 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1459                                  			mint	singlestep					;01 single step
  1459                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1459 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1460                                  			mint	nmi						;02 non-maskable
  1460                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1460 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1461                                  			mint	break						;03 break
  1461                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1461 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1462                                  			mint	into						;04 into
  1462                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1462 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1463                                  			mint	bounds						;05 bounds
  1463                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1463 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1464                                  			mint	badopcode					;06 bad op code
  1464                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1464 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1465                                  			mint	nocoproc					;07 no coprocessor
  1465                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1465 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1466                                  			mint	doublefault					;08 double-fault
  1466                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1466 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1467                                  			mint	operand						;09 operand
  1467                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1467 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                  			mint	badtss						;0A bad TSS
  1468                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1468 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469                                  			mint	notpresent					;0B not-present
  1469                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1469 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1470                                  			mint	stacklimit					;0C stack limit
  1470                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1470 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1471                                  			mint	protection					;0D general protection fault
  1471                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1471 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1472                                  			mint	int14						;0E (reserved)
  1472                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1472 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1473                                  			mint	int15						;0F (reserved)
  1473                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1473 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1474                                  			mint	coproccalc					;10 (reserved)
  1474                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1474 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1475                                  			mint	int17						;11 (reserved)
  1475                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1475 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1476                                  			mint	int18						;12 (reserved)
  1476                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1476 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1477                                  			mint	int19						;13 (reserved)
  1477                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1477 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1478                                  			mint	int20						;14 (reserved)
  1478                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1478 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1479                                  			mint	int21						;15 (reserved)
  1479                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1479 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1480                                  			mint	int22						;16 (reserved)
  1480                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1480 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1481                                  			mint	int23						;17 (reserved)
  1481                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1481 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1482                                  			mint	int24						;18 (reserved)
  1482                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1482 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1483                                  			mint	int25						;19 (reserved)
  1483                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1483 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1484                                  			mint	int26						;1A (reserved)
  1484                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1484 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1485                                  			mint	int27						;1B (reserved)
  1485                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1485 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1486                                  			mint	int28						;1C (reserved)
  1486                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1486 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1487                                  			mint	int29						;1D (reserved)
  1487                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1487 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1488                                  			mint	int30						;1E (reserved)
  1488                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1488 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1489                                  			mint	int31						;1F (reserved)
  1489                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1489 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1490                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1490                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1490 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1491                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1491                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1491 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1492                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1492                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1492 00000110 2B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1493                                  			mtrap	com2						;23 IRQ3 com2
  1493                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1493 00000118 2E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1494                                  			mtrap	com1						;24 IRQ4 com1
  1494                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1494 00000120 31044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1495                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1495                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1495 00000128 34044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1496                                  			mtrap	diskette					;26 IRQ6 diskette
  1496                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1496 00000130 37044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1497                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1497                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1497 00000138 4B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1498                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1498                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1498 00000140 4E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1499                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1499                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1499 00000148 51044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1500                                  			mtrap	irq10						;2A IRQA (reserved)
  1500                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1500 00000150 54044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1501                                  			mtrap	irq11						;2B IRQB (reserved)
  1501                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1501 00000158 57044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1502                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1502                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1502 00000160 5A044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1503                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1503                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1503 00000168 5D044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1504                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1504                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1504 00000170 60044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1505                                  			mtrap	irq15						;2F IRQF (reserved)
  1505                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1505 00000178 63044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1506                                  			mtrap	svc						;30 OS services
  1506                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1506 00000180 72044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1507 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1508                                  ;-----------------------------------------------------------------------------------------------------------------------
  1509                                  ;
  1510                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1511                                  ;
  1512                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1513                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1514                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1515                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1516                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1517                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1518                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1519                                  ;
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  section			kernel	vstart=0h					;data offsets relative to 0
  1522                                  			cpu	386						;allow 80386 instructions
  1523                                  			bits	32						;this is 32-bit code
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  ;
  1526                                  ;	CPU Interrupt Handlers
  1527                                  ;
  1528                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1529                                  ;
  1530                                  ;-----------------------------------------------------------------------------------------------------------------------
  1531                                  			menter	dividebyzero					;divide by zero
  1531                              <1> ?%1 equ ($-$$)
  1532 00000000 6A00                    			push	0						;
  1533 00000002 EB7A                    			jmp	intcpu						;
  1534                                  			menter	singlestep					;single step
  1534                              <1> ?%1 equ ($-$$)
  1535 00000004 6A01                    			push	1						;
  1536 00000006 EB76                    			jmp	intcpu						;
  1537                                  			menter	nmi						;non-maskable
  1537                              <1> ?%1 equ ($-$$)
  1538 00000008 6A02                    			push	2						;
  1539 0000000A EB72                    			jmp	intcpu						;
  1540                                  			menter	break						;break
  1540                              <1> ?%1 equ ($-$$)
  1541 0000000C 6A03                    			push	3						;
  1542 0000000E EB6E                    			jmp	intcpu						;
  1543                                  			menter	into						;into
  1543                              <1> ?%1 equ ($-$$)
  1544 00000010 6A04                    			push	4						;
  1545 00000012 EB6A                    			jmp	intcpu						;
  1546                                  			menter	bounds						;bounds
  1546                              <1> ?%1 equ ($-$$)
  1547 00000014 6A05                    			push	5						;
  1548 00000016 EB66                    			jmp	intcpu						;
  1549                                  			menter	badopcode					;bad opcode interrupt
  1549                              <1> ?%1 equ ($-$$)
  1550 00000018 6A06                    			push	6						;
  1551 0000001A EB62                    			jmp	intcpu						;
  1552                                  			menter	nocoproc					;no coprocessor interrupt
  1552                              <1> ?%1 equ ($-$$)
  1553 0000001C 6A07                    			push	7						;
  1554 0000001E EB5E                    			jmp	intcpu						;
  1555                                  			menter	doublefault					;doublefault interrupt
  1555                              <1> ?%1 equ ($-$$)
  1556 00000020 6A08                    			push	8						;
  1557 00000022 EB5A                    			jmp	intcpu						;
  1558                                  			menter	operand						;operand interrupt
  1558                              <1> ?%1 equ ($-$$)
  1559 00000024 6A09                    			push	9						;
  1560 00000026 EB56                    			jmp	intcpu						;
  1561                                  			menter	badtss						;bad tss interrupt
  1561                              <1> ?%1 equ ($-$$)
  1562 00000028 6A0A                    			push	10						;
  1563 0000002A EB52                    			jmp	intcpu						;
  1564                                  			menter	notpresent					;not present interrupt
  1564                              <1> ?%1 equ ($-$$)
  1565 0000002C 6A0B                    			push	11						;
  1566 0000002E EB4E                    			jmp	intcpu						;
  1567                                  			menter	stacklimit					;stack limit interrupt
  1567                              <1> ?%1 equ ($-$$)
  1568 00000030 6A0C                    			push	12						;
  1569 00000032 EB4A                    			jmp	intcpu						;
  1570                                  			menter	protection					;protection fault interrupt
  1570                              <1> ?%1 equ ($-$$)
  1571 00000034 6A0D                    			push	13						;
  1572 00000036 EB46                    			jmp	intcpu						;
  1573                                  			menter	int14						;(reserved)
  1573                              <1> ?%1 equ ($-$$)
  1574 00000038 6A0E                    			push	14						;
  1575 0000003A EB42                    			jmp	intcpu						;
  1576                                  			menter	int15						;(reserved)
  1576                              <1> ?%1 equ ($-$$)
  1577 0000003C 6A0F                    			push	15						;
  1578 0000003E EB3E                    			jmp	intcpu						;
  1579                                  			menter	coproccalc					;coprocessor calculation
  1579                              <1> ?%1 equ ($-$$)
  1580 00000040 6A10                    			push	16						;
  1581 00000042 EB3A                    			jmp	intcpu						;
  1582                                  			menter	int17						;(reserved)
  1582                              <1> ?%1 equ ($-$$)
  1583 00000044 6A11                    			push	17						;
  1584 00000046 EB36                    			jmp	intcpu						;
  1585                                  			menter	int18						;(reserved)
  1585                              <1> ?%1 equ ($-$$)
  1586 00000048 6A12                    			push	18						;
  1587 0000004A EB32                    			jmp	intcpu						;
  1588                                  			menter	int19						;(reserved)
  1588                              <1> ?%1 equ ($-$$)
  1589 0000004C 6A13                    			push	19						;
  1590 0000004E EB2E                    			jmp	intcpu						;
  1591                                  			menter	int20						;(reserved)
  1591                              <1> ?%1 equ ($-$$)
  1592 00000050 6A14                    			push	20						;
  1593 00000052 EB2A                    			jmp	intcpu						;
  1594                                  			menter	int21						;(reserved)
  1594                              <1> ?%1 equ ($-$$)
  1595 00000054 6A15                    			push	21						;
  1596 00000056 EB26                    			jmp	intcpu						;
  1597                                  			menter	int22						;(reserved)
  1597                              <1> ?%1 equ ($-$$)
  1598 00000058 6A16                    			push	22						;
  1599 0000005A EB22                    			jmp	intcpu						;
  1600                                  			menter	int23						;(reserved)
  1600                              <1> ?%1 equ ($-$$)
  1601 0000005C 6A17                    			push	23						;
  1602 0000005E EB1E                    			jmp	intcpu						;
  1603                                  			menter	int24						;(reserved)
  1603                              <1> ?%1 equ ($-$$)
  1604 00000060 6A18                    			push	24						;
  1605 00000062 EB1A                    			jmp	intcpu						;
  1606                                  			menter	int25						;(reserved)
  1606                              <1> ?%1 equ ($-$$)
  1607 00000064 6A19                    			push	25						;
  1608 00000066 EB16                    			jmp	intcpu						;
  1609                                  			menter	int26						;(reserved)
  1609                              <1> ?%1 equ ($-$$)
  1610 00000068 6A1A                    			push	26						;
  1611 0000006A EB12                    			jmp	intcpu						;
  1612                                  			menter	int27						;(reserved)
  1612                              <1> ?%1 equ ($-$$)
  1613 0000006C 6A1B                    			push	27						;
  1614 0000006E EB0E                    			jmp	intcpu						;
  1615                                  			menter	int28						;(reserved)
  1615                              <1> ?%1 equ ($-$$)
  1616 00000070 6A1C                    			push	28						;
  1617 00000072 EB0A                    			jmp	intcpu						;
  1618                                  			menter	int29						;(reserved)
  1618                              <1> ?%1 equ ($-$$)
  1619 00000074 6A1D                    			push	29						;
  1620 00000076 EB06                    			jmp	intcpu						;
  1621                                  			menter	int30						;(reserved)
  1621                              <1> ?%1 equ ($-$$)
  1622 00000078 6A1E                    			push	30						;
  1623 0000007A EB02                    			jmp	intcpu						;
  1624                                  			menter	int31						;(reserved)
  1624                              <1> ?%1 equ ($-$$)
  1625 0000007C 6A1F                    			push	31						;
  1626 0000007E 58                      intcpu			pop	eax						;
  1627 0000007F CF                      			iretd							;return
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                  ;
  1630                                  ;	Hardware Device Interupts
  1631                                  ;
  1632                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1633                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1634                                  ;	(BX=2028h).
  1635                                  ;
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;	IRQ0	Clock Tick Interrupt
  1640                                  ;
  1641                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1642                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1643                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1644                                  ;
  1645                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1646                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1647                                  ;
  1648                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1649                                  ;	zero, the floppy disk motors are turned off.
  1650                                  ;
  1651                                  ;-----------------------------------------------------------------------------------------------------------------------
  1652                                  			menter	clocktick					;clock tick interrupt
  1652                              <1> ?%1 equ ($-$$)
  1653 00000080 50                      			push	eax						;save modified regs
  1654 00000081 52                      			push	edx						;
  1655 00000082 1E                      			push	ds						;
  1656 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1657 00000085 1F                      			pop	ds						;... into data segment register
  1658 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1659 0000008B 40                      			inc	eax						;increment clock ticks
  1660 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1661 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1662 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1663 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1664 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1665 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1666 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1667 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1668 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1669 000000B1 FB                      			sti							;enable maskable interrupts
  1670 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1671 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1672 000000B6 EC                      			in	al,dx						;FDC main status byte
  1673 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1674 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1675 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1676 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1677 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1678 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1679 000000C6 EE                      			out	dx,al						;turn motor off
  1680 000000C7 E82B090000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1681 000000CC 1F                      			pop	ds						;restore modified regs
  1682 000000CD 5A                      			pop	edx						;
  1683 000000CE 58                      			pop	eax						;
  1684 000000CF CF                      			iretd							;return
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;	IRQ1	Keyboard Interrupt
  1688                                  ;
  1689                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1690                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1691                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1692                                  ;	ALL modified registers upon return.
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  			menter	keyboard					;keyboard interrrupt
  1695                              <1> ?%1 equ ($-$$)
  1696 000000D0 50                      			push	eax						;save non-volatile regs
  1697 000000D1 53                      			push	ebx						;
  1698 000000D2 51                      			push	ecx						;
  1699 000000D3 56                      			push	esi						;
  1700 000000D4 1E                      			push	ds						;
  1701 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1702 000000D7 1F                      			pop	ds						;... into data segment register
  1703 000000D8 30C0                    			xor	al,al						;zero
  1704 000000DA A229080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1705 000000DF A22A080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1706 000000E4 A22B080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1707 000000E9 A22C080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1708 000000EE A22D080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1709 000000F3 A22E080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1710 000000F8 B020                    			mov	al,' '						;space
  1711 000000FA A22F080000              			mov	[wbConsoleChar],al				;set character to space
  1712 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1713 00000101 F6D0                    			not	al						;controller timeout mask
  1714 00000103 200528080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1715 00000109 8A1D26080000            			mov	bl,[wbConsoleShift]				;shift flags
  1716 0000010F 8A3D27080000            			mov	bh,[wbConsoleLock]				;lock flags
  1717 00000115 E892090000              			call	WaitForKeyOutBuffer				;controller timeout?
  1718 0000011A 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1719 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1720 00000122 A229080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1721 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1722 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1723 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1724 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1725 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1726 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1727 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1728 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1729 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1730 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1731 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1732 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1733 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1734 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1735 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1736 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1737 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1738 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1739 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1740 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1741 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1742 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1743 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1744 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1745 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1746 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1747 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1748 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1749 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1750 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1751 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1752 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1753 000001A3 E804090000              			call	WaitForKeyOutBuffer				;controller timeout?
  1754 000001A8 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1755 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1756 000001B0 A22A080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1757 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1758 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1759 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1760 000001BC 7456                    			je	irq1.30						;yes, set flag
  1761 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1762 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1763 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1764 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1765 000001C8 744A                    			je	irq1.30						;yes, set flag
  1766 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1767 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1768 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1769 000001D2 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1770 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1771 000001DB 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1772 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1773 000001E4 7405                    			je	irq1.10						;yes, continue
  1774 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1775 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1776 000001EB E8BC080000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1777 000001F0 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1778 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1779 000001F8 A22B080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1780 000001FD E8AA080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1781 00000202 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1782 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1783 0000020A A22C080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1784 0000020F E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1785 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1786 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1787 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1788 0000021A 20C3                    			and	bl,al						;reset shift flag
  1789 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1790 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1791 00000220 E858080000              			call	SetKeyboardLamps				;update keyboard lamps
  1792 00000225 881D26080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1793 0000022B 883D27080000            			mov	[wbConsoleLock],bh				;save lock flags
  1794 00000231 E873040000              			call	PutConsoleOIAShift				;update OIA indicators
  1795 00000236 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  1796 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1797 0000023E 7563                    			jne	irq1.80						;no continue
  1798 00000240 E867080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1799 00000245 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  1800 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1801 0000024D A22A080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1802 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1803 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1804 00000257 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  1805 0000025D E84A080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1806 00000262 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  1807 00000268 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1808 0000026A A22B080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1809 0000026F E838080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1810 00000274 0F8499000000            			jz	irq1.140					;yes, skip ahead
  1811 0000027A E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1812 0000027C A22C080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1813 00000281 E826080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1814 00000286 0F8487000000            			jz	irq1.140					;yes, skip ahead
  1815 0000028C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1816 0000028E A22D080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1817 00000293 E814080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1818 00000298 7479                    			jz	irq1.140					;yes, skip ahead
  1819 0000029A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1820 0000029C A22E080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1821 000002A1 EB78                    			jmp	irq1.150					;continue
  1822 000002A3 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1823 000002A5 F6C480                  			test	ah,EKEYUP					;release code?
  1824 000002A8 7531                    			jnz	irq1.110					;yes, skip ahead
  1825 000002AA BE[2B030000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1826 000002AF F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1827 000002B2 7405                    			jz	irq1.90						;no, skip ahead
  1828 000002B4 BE[AB030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1829 000002B9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1830 000002BC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1831 000002C0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1832 000002C3 7411                    			jz	irq1.100					;no skip ahead
  1833 000002C5 88C1                    			mov	cl,al						;copy ASCII code
  1834 000002C7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1835 000002CA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1836 000002CD 7207                    			jb	irq1.100					;yes, skip ahead
  1837 000002CF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1838 000002D2 7702                    			ja	irq1.100					;yes, skip ahead
  1839 000002D4 3420                    			xor	al,EASCIICASE					;switch case
  1840 000002D6 A22F080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1841 000002DB BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1842 000002E0 F6C480                  			test	ah,EKEYUP					;release scan-code?
  1843 000002E3 7405                    			jz	irq1.120					;no, skip ahead
  1844 000002E5 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  1845 000002EA 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  1846 000002EF 09C2                    			or	edx,eax						;msg id and codes
  1847 000002F1 31C9                    			xor	ecx,ecx						;null param
  1848 000002F3 50                      			push	eax						;save codes
  1849 000002F4 E8FC050000              			call	PutMessage					;put message to console
  1850 000002F9 58                      			pop	eax						;restore codes
  1851 000002FA 84C0                    			test	al,al						;ASCII translation?
  1852 000002FC 7413                    			jz	irq1.130					;no, skip ahead
  1853 000002FE BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  1854 00000303 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  1855 00000308 09C2                    			or	edx,eax						;msg id and codes
  1856 0000030A 31C9                    			xor	ecx,ecx						;null param
  1857 0000030C E8E4050000              			call	PutMessage					;put message to console
  1858 00000311 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1859 00000313 B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1860 00000315 080528080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1861 0000031B E823040000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1862 00000320 E8D2060000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1863 00000325 1F                      			pop	ds						;restore non-volatile regs
  1864 00000326 5E                      			pop	esi						;
  1865 00000327 59                      			pop	ecx						;
  1866 00000328 5B                      			pop	ebx						;
  1867 00000329 58                      			pop	eax						;
  1868 0000032A CF                      			iretd							;return
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                  ;	Scan-Code to ASCII Translation Tables
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872 0000032B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1873 00000333 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1874 0000033B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1875 00000343 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1876 0000034B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1877 00000353 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1878 0000035B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1879 00000363 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1880 0000036B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1881 00000373 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1882 0000037B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1883 00000383 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1884 0000038B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1885 00000393 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1886 0000039B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1887 000003A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1888 000003AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1889 000003B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1890 000003BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1891 000003C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1892 000003CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1893 000003D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1894 000003DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1895 000003E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1896 000003EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1897 000003F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1898 000003FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1899 00000403 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1900 0000040B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1901 00000413 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1902 0000041B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1903 00000423 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                  			menter	iochannel					;secondary 8259A cascade
  1909                              <1> ?%1 equ ($-$$)
  1910 0000042B 50                      			push	eax						;
  1911 0000042C EB3D                    			jmp	hwint						;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1915                                  ;
  1916                                  ;-----------------------------------------------------------------------------------------------------------------------
  1917                                  			menter	com2						;serial port 2 interrupt
  1917                              <1> ?%1 equ ($-$$)
  1918 0000042E 50                      			push	eax						;
  1919 0000042F EB3A                    			jmp	hwint						;
  1920                                  ;-----------------------------------------------------------------------------------------------------------------------
  1921                                  ;
  1922                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1923                                  ;
  1924                                  ;-----------------------------------------------------------------------------------------------------------------------
  1925                                  			menter	com1						;serial port 1 interrupt
  1925                              <1> ?%1 equ ($-$$)
  1926 00000431 50                      			push	eax						;
  1927 00000432 EB37                    			jmp	hwint						;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929                                  ;
  1930                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1931                                  ;
  1932                                  ;-----------------------------------------------------------------------------------------------------------------------
  1933                                  			menter	lpt2						;parallel port 2 interrupt
  1933                              <1> ?%1 equ ($-$$)
  1934 00000434 50                      			push	eax						;
  1935 00000435 EB34                    			jmp	hwint						;
  1936                                  ;-----------------------------------------------------------------------------------------------------------------------
  1937                                  ;
  1938                                  ;	IRQ6	Diskette Hardware Interrupt
  1939                                  ;
  1940                                  ;-----------------------------------------------------------------------------------------------------------------------
  1941                                  			menter	diskette					;floppy disk interrupt
  1941                              <1> ?%1 equ ($-$$)
  1942 00000437 50                      			push	eax						;save non-volatile regs
  1943 00000438 1E                      			push	ds						;
  1944 00000439 6A18                    			push	ESELDAT						;load OS data selector ...
  1945 0000043B 1F                      			pop	ds						;... into DS register
  1946 0000043C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1947 00000441 0C80                    			or	al,10000000b					;set IRQ flag
  1948 00000443 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1949 00000448 1F                      			pop	ds						;restore non-volatile regs
  1950 00000449 EB20                    			jmp	hwint						;end primary PIC interrupt
  1951                                  ;-----------------------------------------------------------------------------------------------------------------------
  1952                                  ;
  1953                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1954                                  ;
  1955                                  ;-----------------------------------------------------------------------------------------------------------------------
  1956                                  			menter	lpt1						;parallel port 1 interrupt
  1956                              <1> ?%1 equ ($-$$)
  1957 0000044B 50                      			push	eax						;
  1958 0000044C EB1D                    			jmp	hwint						;
  1959                                  ;-----------------------------------------------------------------------------------------------------------------------
  1960                                  ;
  1961                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  			menter	rtclock						;real-time clock interrupt
  1964                              <1> ?%1 equ ($-$$)
  1965 0000044E 50                      			push	eax						;
  1966 0000044F EB13                    			jmp	hwwint						;
  1967                                  ;-----------------------------------------------------------------------------------------------------------------------
  1968                                  ;
  1969                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1970                                  ;
  1971                                  ;-----------------------------------------------------------------------------------------------------------------------
  1972                                  			menter	retrace						;CGA vertical retrace interrupt
  1972                              <1> ?%1 equ ($-$$)
  1973 00000451 50                      			push	eax						;
  1974 00000452 EB10                    			jmp	hwwint						;
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                  ;
  1977                                  ;	IRQ10	Reserved Hardware Interrupt
  1978                                  ;
  1979                                  ;-----------------------------------------------------------------------------------------------------------------------
  1980                                  			menter	irq10						;reserved
  1980                              <1> ?%1 equ ($-$$)
  1981 00000454 50                      			push	eax						;
  1982 00000455 EB0D                    			jmp	hwwint						;
  1983                                  ;-----------------------------------------------------------------------------------------------------------------------
  1984                                  ;
  1985                                  ;	IRQ11	Reserved Hardware Interrupt
  1986                                  ;
  1987                                  ;-----------------------------------------------------------------------------------------------------------------------
  1988                                  			menter	irq11						;reserved
  1988                              <1> ?%1 equ ($-$$)
  1989 00000457 50                      			push	eax						;
  1990 00000458 EB0A                    			jmp	hwwint						;
  1991                                  ;-----------------------------------------------------------------------------------------------------------------------
  1992                                  ;
  1993                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1994                                  ;
  1995                                  ;-----------------------------------------------------------------------------------------------------------------------
  1996                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1996                              <1> ?%1 equ ($-$$)
  1997 0000045A 50                      			push	eax						;
  1998 0000045B EB07                    			jmp	hwwint						;
  1999                                  ;-----------------------------------------------------------------------------------------------------------------------
  2000                                  ;
  2001                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2002                                  ;
  2003                                  ;-----------------------------------------------------------------------------------------------------------------------
  2004                                  			menter	coprocessor					;coprocessor interrupt
  2004                              <1> ?%1 equ ($-$$)
  2005 0000045D 50                      			push	eax						;
  2006 0000045E EB04                    			jmp	hwwint						;
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                  ;
  2009                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2010                                  ;
  2011                                  ;-----------------------------------------------------------------------------------------------------------------------
  2012                                  			menter	fixeddisk					;fixed disk interrupt
  2012                              <1> ?%1 equ ($-$$)
  2013 00000460 50                      			push	eax						;
  2014 00000461 EB01                    			jmp	hwwint						;
  2015                                  ;-----------------------------------------------------------------------------------------------------------------------
  2016                                  ;
  2017                                  ;	IRQ15	Reserved Hardware Interrupt
  2018                                  ;
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020                                  			menter	irq15						;reserved
  2020                              <1> ?%1 equ ($-$$)
  2021 00000463 50                      			push	eax						;save modified regs
  2022                                  ;-----------------------------------------------------------------------------------------------------------------------
  2023                                  ;
  2024                                  ;	Exit from hardware interrupt
  2025                                  ;
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027 00000464 E894050000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2028 00000469 EB05                    			jmp	hwint90						;skip ahead
  2029 0000046B E887050000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2030 00000470 58                      hwint90			pop	eax						;restore modified regs
  2031 00000471 CF                      			iretd							;return from interrupt
  2032                                  ;-----------------------------------------------------------------------------------------------------------------------
  2033                                  ;
  2034                                  ;	INT 30h Operating System Software Service Interrupt
  2035                                  ;
  2036                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2037                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2038                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2039                                  ;	the entry address of the specific function from a table.
  2040                                  ;
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  			menter	svc
  2042                              <1> ?%1 equ ($-$$)
  2043 00000472 3C0E                    			cmp	al,maxtsvc					;is our function out of range?
  2044 00000474 730D                    			jae	svc90						;yes, skip ahead
  2045 00000476 0FB6C0                  			movzx	eax,al						;function
  2046 00000479 C1E002                  			shl	eax,2						;offset into table
  2047 0000047C 2EFF90[84040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  2048 00000483 CF                      svc90			iretd							;return from interrupt
  2049                                  ;-----------------------------------------------------------------------------------------------------------------------
  2050                                  ;
  2051                                  ;	Service Request Table
  2052                                  ;
  2053                                  ;
  2054                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2055                                  ;
  2056                                  ;-----------------------------------------------------------------------------------------------------------------------
  2057                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  2057                              <1> tsvc :
  2057                              <1> e%1 equ ($-tsvc)/4
  2057 00000484 [69050000]          <1>  dd %1
  2058                                  			tsvce	GetConsoleString				;get string input
  2058                              <1> e%1 equ ($-tsvc)/4
  2058 00000488 [96050000]          <1>  dd %1
  2059                                  			tsvce	ClearConsoleScreen				;clear console screen
  2059                              <1> e%1 equ ($-tsvc)/4
  2059 0000048C [52090000]          <1>  dd %1
  2060                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2060                              <1> e%1 equ ($-tsvc)/4
  2060 00000490 [CD090000]          <1>  dd %1
  2061                                  			tsvce	UpperCaseString					;upper-case string
  2061                              <1> e%1 equ ($-tsvc)/4
  2061 00000494 [32050000]          <1>  dd %1
  2062                                  			tsvce	CompareMemory					;compare memory
  2062                              <1> e%1 equ ($-tsvc)/4
  2062 00000498 [4C050000]          <1>  dd %1
  2063                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2063                              <1> e%1 equ ($-tsvc)/4
  2063 0000049C [6E0A0000]          <1>  dd %1
  2064                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2064                              <1> e%1 equ ($-tsvc)/4
  2064 000004A0 [BC040000]          <1>  dd %1
  2065                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2065                              <1> e%1 equ ($-tsvc)/4
  2065 000004A4 [FD040000]          <1>  dd %1
  2066                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2066                              <1> e%1 equ ($-tsvc)/4
  2066 000004A8 [030A0000]          <1>  dd %1
  2067                                  			tsvce	UnsignedToDecimalString 			;convert unsigned integer to decimal string
  2067                              <1> e%1 equ ($-tsvc)/4
  2067 000004AC [C5070000]          <1>  dd %1
  2068                                  			tsvce	ByteToDecimalString				;convert byte to decimal string
  2068                              <1> e%1 equ ($-tsvc)/4
  2068 000004B0 [69080000]          <1>  dd %1
  2069                                  			tsvce	UnsignedToHexadecimal				;convert unsigned integer to hexadecimal string
  2069                              <1> e%1 equ ($-tsvc)/4
  2069 000004B4 [B7080000]          <1>  dd %1
  2070                                  			tsvce	HexadecimalToUnsigned				;convert hexadecimal string to unsigned integer
  2070                              <1> e%1 equ ($-tsvc)/4
  2070 000004B8 [D7080000]          <1>  dd %1
  2071                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2072                                  ;-----------------------------------------------------------------------------------------------------------------------
  2073                                  ;
  2074                                  ;	Service Request Macros
  2075                                  ;
  2076                                  ;	These macros provide positional parameterization of service request calls.
  2077                                  ;
  2078                                  ;-----------------------------------------------------------------------------------------------------------------------
  2079                                  %macro			putConsoleString 0
  2080                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2081                                  			int	_svc						;invoke OS service
  2082                                  %endmacro
  2083                                  %macro			putConsoleString 1
  2084                                  			mov	edx,%1						;EDX = string address
  2085                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2086                                  			int	_svc						;invoke OS service
  2087                                  %endmacro
  2088                                  %macro			getConsoleString 4
  2089                                  			mov	edx,%1						;EDX = buffer address
  2090                                  			mov	ecx,%2						;ECX = max characters
  2091                                  			mov	bh,%3						;BH = echo indicator
  2092                                  			mov	bl,%4						;BL = terminator
  2093                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2094                                  			int	_svc						;invoke OS service
  2095                                  %endmacro
  2096                                  %macro			clearConsoleScreen 0
  2097                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2098                                  			int	_svc						;invoke OS service
  2099                                  %endmacro
  2100                                  %macro			placeCursor 0
  2101                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2102                                  			int	_svc						;invoke OS service
  2103                                  %endmacro
  2104                                  %macro			upperCaseString 0
  2105                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2106                                  			int	_svc						;invoke OS service
  2107                                  %endmacro
  2108                                  %macro			compareMemory 0
  2109                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2110                                  			int	_svc						;invoke OS service
  2111                                  %endmacro
  2112                                  %macro			resetSystem 0
  2113                                  			mov	al,eResetSystem					;AL = system reset fn.
  2114                                  			int	_svc						;invoke OS service
  2115                                  %endmacro
  2116                                  %macro			putDateString 0
  2117                                  			mov	al,ePutDateString				;function code
  2118                                  			int	_svc						;invoke OS service
  2119                                  %endmacro
  2120                                  %macro			putDateString 2
  2121                                  			mov	ebx,%1						;DATETIME addr
  2122                                  			mov	edx,%2						;output buffer addr
  2123                                  			mov	al,ePutDateString				;function code
  2124                                  			int	_svc						;invoke OS service
  2125                                  %endmacro
  2126                                  %macro			putTimeString 0
  2127                                  			mov	al,ePutTimeString				;function code
  2128                                  			int	_svc						;invoke OS service
  2129                                  %endmacro
  2130                                  %macro			putTimeString 2
  2131                                  			mov	ebx,%1						;DATETIME addr
  2132                                  			mov	edx,%2						;output buffer addr
  2133                                  			mov	al,ePutTimeString				;function code
  2134                                  			int	_svc						;invoke OS service
  2135                                  %endmacro
  2136                                  %macro			readRealTimeClock 0
  2137                                  			mov	al,eReadRealTimeClock				;function code
  2138                                  			int	_svc						;invoke OS service
  2139                                  %endmacro
  2140                                  %macro			readRealTimeClock 1
  2141                                  			mov	ebx,%1						;DATETIME addr
  2142                                  			mov	al,eReadRealTimeClock				;function code
  2143                                  			int	_svc						;invoke OS service
  2144                                  %endmacro
  2145                                  %macro			unsignedToDecimalString 0
  2146                                  			mov	al,eUnsignedToDecimalString			;AL = function code
  2147                                  			int	_svc						;invoke OS service
  2148                                  %endmacro
  2149                                  %macro			byteToDecimalString 0
  2150                                  			mov	al,eByteToDecimalString				;AL = function code
  2151                                  			int	_svc						;invoke OS service
  2152                                  %endmacro
  2153                                  %macro			unsignedToHexadecimal 0
  2154                                  			mov	al,eUnsignedToHexadecimal			;AL = unsigned to hexademcial fn.
  2155                                  			int	_svc						;invoke OS service
  2156                                  %endmacro
  2157                                  %macro			hexadecimalToUnsigned 0
  2158                                  			mov	al,eHexadecimalToUnsigned			;AL = hex to unsigned fn.
  2159                                  			int	_svc						;invoke OS service
  2160                                  %endmacro
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  ;
  2163                                  ;	Kernel Function Library
  2164                                  ;
  2165                                  ;-----------------------------------------------------------------------------------------------------------------------
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167                                  ;
  2168                                  ;	Date and Time Helper Routines
  2169                                  ;
  2170                                  ;	PutDateString
  2171                                  ;	PutTimeString
  2172                                  ;
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                  ;
  2176                                  ;	Routine:	PutDateString
  2177                                  ;
  2178                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2179                                  ;			structure at ds:ebx.
  2180                                  ;
  2181                                  ;	In:		DS:EBX	DATETIME address
  2182                                  ;			DS:EDX	output buffer address
  2183                                  ;
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185 000004BC 51                      PutDateString		push	ecx						;save non-volatile regs
  2186 000004BD 57                      			push	edi						;
  2187 000004BE 06                      			push	es						;
  2188 000004BF 1E                      			push	ds						;store data selector ...
  2189 000004C0 07                      			pop	es						;... in extra segment reg
  2190 000004C1 89D7                    			mov	edi,edx						;output buffer address
  2191 000004C3 B10A                    			mov	cl,10						;divisor
  2192 000004C5 BA30302F00              			mov	edx,002f3030h					;ASCIIZ "00/" (reversed)
  2193 000004CA 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month
  2194 000004CE F6F1                    			div	cl						;ah = rem; al = quotient
  2195 000004D0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2196 000004D2 FC                      			cld							;forward strings
  2197 000004D3 AB                      			stosd							;store "mm/"nul
  2198 000004D4 4F                      			dec	edi						;address of terminator
  2199 000004D5 0FB64304                			movzx	eax,byte [ebx+DATETIME.day]			;day
  2200 000004D9 F6F1                    			div	cl						;ah = rem; al = quotient
  2201 000004DB 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2202 000004DD AB                      			stosd							;store "dd/"nul
  2203 000004DE 4F                      			dec	edi						;address of terminator
  2204 000004DF 0FB64307                			movzx	eax,byte [ebx+DATETIME.century]			;century
  2205 000004E3 F6F1                    			div	cl						;ah = rem; al = quotient
  2206 000004E5 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2207 000004E7 AB                      			stosd							;store "cc/"null
  2208 000004E8 4F                      			dec	edi						;address of terminator
  2209 000004E9 4F                      			dec	edi						;address of delimiter
  2210 000004EA 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2211 000004EE F6F1                    			div	cl						;ah = rem; al = quotient
  2212 000004F0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2213 000004F2 AA                      			stosb							;store quotient
  2214 000004F3 88E0                    			mov	al,ah						;remainder
  2215 000004F5 AA                      			stosb							;store remainder
  2216 000004F6 30C0                    			xor	al,al						;null terminator
  2217 000004F8 AA                      			stosb							;store terminator
  2218 000004F9 07                      			pop	es						;restore non-volatile regs
  2219 000004FA 5F                      			pop	edi						;
  2220 000004FB 59                      			pop	ecx						;
  2221 000004FC C3                      			ret							;return
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                  ;
  2224                                  ;	Routine:	PutTimeString
  2225                                  ;
  2226                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  2227                                  ;			structure at ds:ebx.
  2228                                  ;
  2229                                  ;	In:		DS:EBX	DATETIME address
  2230                                  ;			DS:EDX	output buffer address
  2231                                  ;
  2232                                  ;-----------------------------------------------------------------------------------------------------------------------
  2233 000004FD 51                      PutTimeString		push	ecx						;save non-volatile regs
  2234 000004FE 57                      			push	edi						;
  2235 000004FF 06                      			push	es						;
  2236 00000500 1E                      			push	ds						;store data selector ...
  2237 00000501 07                      			pop	es						;... in extra segment reg
  2238 00000502 89D7                    			mov	edi,edx						;output buffer address
  2239 00000504 B10A                    			mov	cl,10						;divisor
  2240 00000506 BA30303A00              			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  2241 0000050B 0FB64302                			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  2242 0000050F F6F1                    			div	cl						;ah = rem; al = quotient
  2243 00000511 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2244 00000513 FC                      			cld							;forward strings
  2245 00000514 AB                      			stosd							;store "mm/"nul
  2246 00000515 4F                      			dec	edi						;address of terminator
  2247 00000516 0FB64301                			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  2248 0000051A F6F1                    			div	cl						;ah = rem; al = quotient
  2249 0000051C 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2250 0000051E AB                      			stosd							;store "dd/"nul
  2251 0000051F 4F                      			dec	edi						;address of terminator
  2252 00000520 0FB603                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  2253 00000523 F6F1                    			div	cl						;ah = rem; al = quotient
  2254 00000525 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2255 00000527 AA                      			stosb							;store quotient
  2256 00000528 88E0                    			mov	al,ah						;remainder
  2257 0000052A AA                      			stosb							;store remainder
  2258 0000052B 30C0                    			xor	al,al						;null terminator
  2259 0000052D AA                      			stosb							;store terminator
  2260 0000052E 07                      			pop	es						;restore non-volatile regs
  2261 0000052F 5F                      			pop	edi						;
  2262 00000530 59                      			pop	ecx						;
  2263 00000531 C3                      			ret							;return
  2264                                  ;-----------------------------------------------------------------------------------------------------------------------
  2265                                  ;
  2266                                  ;	String Helper Routines
  2267                                  ;
  2268                                  ;	UpperCaseString
  2269                                  ;	CompareMemory
  2270                                  ;
  2271                                  ;-----------------------------------------------------------------------------------------------------------------------
  2272                                  ;-----------------------------------------------------------------------------------------------------------------------
  2273                                  ;
  2274                                  ;	Routine:	UpperCaseString
  2275                                  ;
  2276                                  ;	Description:	This routine places all characters in the given string to upper case.
  2277                                  ;
  2278                                  ;	In:		DS:EDX	string address
  2279                                  ;
  2280                                  ;	Out:		EDX	string address
  2281                                  ;
  2282                                  ;-----------------------------------------------------------------------------------------------------------------------
  2283 00000532 56                      UpperCaseString		push	esi						;save non-volatile regs
  2284 00000533 89D6                    			mov	esi,edx						;string address
  2285 00000535 FC                      			cld							;forward strings
  2286 00000536 AC                      .10			lodsb							;string character
  2287 00000537 84C0                    			test	al,al						;null?
  2288 00000539 740F                    			jz	.20						;yes, skip ahead
  2289 0000053B 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2290 0000053D 72F7                    			jb	.10						;no, continue
  2291 0000053F 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2292 00000541 77F3                    			ja	.10						;no, continue
  2293 00000543 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  2294 00000545 8846FF                  			mov	[esi-1],al					;upper character
  2295 00000548 EBEC                    			jmp	.10						;continue
  2296 0000054A 5E                      .20			pop	esi						;restore non-volatile regs
  2297 0000054B C3                      			ret							;return
  2298                                  ;-----------------------------------------------------------------------------------------------------------------------
  2299                                  ;
  2300                                  ;	Routine:	CompareMemory
  2301                                  ;
  2302                                  ;	Description:	This routine compares two byte arrays.
  2303                                  ;
  2304                                  ;	In:		DS:EDX	first source address
  2305                                  ;			DS:EBX	second source address
  2306                                  ;			ECX	comparison length
  2307                                  ;
  2308                                  ;	Out:		EDX	first source address
  2309                                  ;			EBX	second source address
  2310                                  ;			ECX	0	array 1 = array 2
  2311                                  ;				<0	array 1 < array 2
  2312                                  ;				>0	array 1 > array 2
  2313                                  ;
  2314                                  ;-----------------------------------------------------------------------------------------------------------------------
  2315 0000054C 56                      CompareMemory		push	esi						;save non-volatile regs
  2316 0000054D 57                      			push	edi						;
  2317 0000054E 06                      			push	es						;
  2318 0000054F 1E                      			push	ds						;copy DS
  2319 00000550 07                      			pop	es						;... to ES
  2320 00000551 89D6                    			mov	esi,edx						;first source address
  2321 00000553 89DF                    			mov	edi,ebx						;second source address
  2322 00000555 FC                      			cld							;forward strings
  2323 00000556 F3A6                    			rep	cmpsb						;compare bytes
  2324 00000558 B000                    			mov	al,0						;default result
  2325 0000055A 7406                    			jz	.10						;branch if arrays equal
  2326 0000055C B001                    			mov	al,1						;positive result
  2327 0000055E 7302                    			jnc	.10						;branch if target > source
  2328 00000560 B0FF                    			mov	al,-1						;negative result
  2329 00000562 0FBEC8                  .10			movsx	ecx,al						;extend sign
  2330 00000565 07                      			pop	es						;restore regs
  2331 00000566 5F                      			pop	edi						;
  2332 00000567 5E                      			pop	esi						;
  2333 00000568 C3                      			ret							;return
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  ;
  2336                                  ;	Console Helper Routines
  2337                                  ;
  2338                                  ;	PutConsoleString
  2339                                  ;	GetConsoleString
  2340                                  ;	GetConsoleChar
  2341                                  ;	Yield
  2342                                  ;	PreviousConsoleColumn
  2343                                  ;	NextConsoleColumn
  2344                                  ;	FirstConsoleColumn
  2345                                  ;	NextConsoleRow
  2346                                  ;	PutConsoleChar
  2347                                  ;	PutConsoleOIAShift
  2348                                  ;	PutConsoleOIAChar
  2349                                  ;	PutConsoleHexByte
  2350                                  ;
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  ;
  2354                                  ;	Routine:	PutConsoleString
  2355                                  ;
  2356                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2357                                  ;			console position as needed.
  2358                                  ;
  2359                                  ;	In:		EDX	source address
  2360                                  ;			DS	OS data selector
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363 00000569 56                      PutConsoleString	push	esi						;save non-volatile regs
  2364 0000056A 89D6                    			mov	esi,edx						;source address
  2365 0000056C FC                      			cld							;forward strings
  2366 0000056D AC                      .10			lodsb							;ASCII character
  2367 0000056E 08C0                    			or	al,al						;end of string?
  2368 00000570 7422                    			jz	.40						;yes, skip ahead
  2369 00000572 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2370 00000574 7507                    			jne	.20						;no, skip ahead
  2371 00000576 E8EB000000              			call	FirstConsoleColumn				;move to start of row
  2372 0000057B EBF0                    			jmp	.10						;next character
  2373 0000057D 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2374 0000057F 7507                    			jne	.30						;no, skip ahead
  2375 00000581 E8E8000000              			call	NextConsoleRow					;move to next row
  2376 00000586 EBE5                    			jmp	.10						;next character
  2377 00000588 E803010000              .30			call	PutConsoleChar					;output character to console
  2378 0000058D E8B9000000              			call	NextConsoleColumn				;advance to next column
  2379 00000592 EBD9                    			jmp	.10						;next character
  2380 00000594 5E                      .40			pop	esi						;restore non-volatile regs
  2381 00000595 C3                      			ret							;return
  2382                                  ;-----------------------------------------------------------------------------------------------------------------------
  2383                                  ;
  2384                                  ;	Routine:	GetConsoleString
  2385                                  ;
  2386                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2387                                  ;
  2388                                  ;	Input:		DS:EDX	target buffer address
  2389                                  ;			ECX	maximum number of characters to accept
  2390                                  ;			BH	echo to terminal
  2391                                  ;			BL	terminating character
  2392                                  ;
  2393                                  ;-----------------------------------------------------------------------------------------------------------------------
  2394 00000596 51                      GetConsoleString	push	ecx						;save non-volatile regs
  2395 00000597 56                      			push	esi						;
  2396 00000598 57                      			push	edi						;
  2397 00000599 06                      			push	es						;
  2398 0000059A 1E                      			push	ds						;load data segment selector ...
  2399 0000059B 07                      			pop	es						;... into extra segment register
  2400 0000059C 89D7                    			mov	edi,edx						;edi = target buffer
  2401 0000059E 51                      			push	ecx						;save maximum characters
  2402 0000059F 30C0                    			xor	al,al						;zero register
  2403 000005A1 FC                      			cld							;forward strings
  2404 000005A2 F3AA                    			rep	stosb						;zero fill buffer
  2405 000005A4 59                      			pop	ecx						;maximum characters
  2406 000005A5 89D7                    			mov	edi,edx						;edi = target buffer
  2407 000005A7 89D6                    			mov	esi,edx						;esi = target buffer
  2408 000005A9 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2409 000005AB E856000000              .20			call	GetConsoleChar					;al = next input char
  2410 000005B0 38D8                    			cmp	al,bl						;is this the terminator?
  2411 000005B2 7445                    			je	.50						;yes, exit
  2412 000005B4 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2413 000005B6 7521                    			jne	.30						;no, skip ahead
  2414 000005B8 39FE                    			cmp	esi,edi						;at start of buffer?
  2415 000005BA 74EF                    			je	.20						;yes, get next character
  2416 000005BC 4F                      			dec	edi						;backup target pointer
  2417 000005BD C60700                  			mov	byte [edi],0					;zero previous character
  2418 000005C0 41                      			inc	ecx						;increment remaining chars
  2419 000005C1 F6C701                  			test	bh,1						;echo to console?
  2420 000005C4 74E5                    			jz	.20						;no, get next character
  2421 000005C6 E85B000000              			call	PreviousConsoleColumn				;backup console position
  2422 000005CB B020                    			mov	al,EASCIISPACE					;ASCII space
  2423 000005CD E8BE000000              			call	PutConsoleChar					;write space to console
  2424 000005D2 E8F6030000              			call	PlaceCursor					;position the cursor
  2425 000005D7 EBD2                    			jmp	.20						;get next character
  2426 000005D9 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2427 000005DB 72CE                    			jb	.20						;no, get another character
  2428 000005DD 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2429 000005DF 77CA                    			ja	.20						;no, get another character
  2430 000005E1 AA                      			stosb							;store character in buffer
  2431 000005E2 F6C701                  			test	bh,1						;echo to console?
  2432 000005E5 740F                    			jz	.40						;no, skip ahead
  2433 000005E7 E8A4000000              			call	PutConsoleChar					;write character to console
  2434 000005EC E85A000000              			call	NextConsoleColumn				;advance console position
  2435 000005F1 E8D7030000              			call	PlaceCursor					;position the cursor
  2436 000005F6 49                      .40			dec	ecx						;decrement remaining chars
  2437 000005F7 EBB0                    			jmp	.10						;next
  2438 000005F9 30C0                    .50			xor	al,al						;null
  2439 000005FB AA                      			stosb							;terminate buffer
  2440 000005FC 07                      			pop	es						;restore non-volatile regs
  2441 000005FD 5F                      			pop	edi						;
  2442 000005FE 5E                      			pop	esi						;
  2443 000005FF 59                      			pop	ecx						;
  2444 00000600 C3                      			ret							;return
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446                                  ;
  2447                                  ;	Routine:	GetConsoleChar
  2448                                  ;
  2449                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2450                                  ;
  2451                                  ;	Output:		AL	ASCII character code
  2452                                  ;			AH	keyboard scan code
  2453                                  ;
  2454                                  ;-----------------------------------------------------------------------------------------------------------------------
  2455 00000601 E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2456 00000606 E812030000              GetConsoleChar		call	GetMessage					;get the next message
  2457 0000060B 09C0                    			or	eax,eax						;do we have a message?
  2458 0000060D 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2459 0000060F 50                      			push	eax						;save key codes
  2460 00000610 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2461 00000615 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2462 0000061A 58                      			pop	eax						;restore key codes
  2463 0000061B 75E9                    			jne	GetConsoleChar					;no, try again
  2464 0000061D 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2465 00000622 C3                      			ret							;return
  2466                                  ;-----------------------------------------------------------------------------------------------------------------------
  2467                                  ;
  2468                                  ;	Routine:	Yield
  2469                                  ;
  2470                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2471                                  ;
  2472                                  ;-----------------------------------------------------------------------------------------------------------------------
  2473 00000623 FB                      Yield			sti							;enable maskagle interrupts
  2474 00000624 F4                      			hlt							;halt until external interrupt
  2475 00000625 C3                      			ret							;return
  2476                                  ;-----------------------------------------------------------------------------------------------------------------------
  2477                                  ;
  2478                                  ;	Routine:	PreviousConsoleColumn
  2479                                  ;
  2480                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2481                                  ;			the column is set to the last position in the row and the row is decremented.
  2482                                  ;
  2483                                  ;	Input:		DS	OS data selector
  2484                                  ;
  2485                                  ;-----------------------------------------------------------------------------------------------------------------------
  2486 00000626 A024080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2487 0000062B 08C0                    			or	al,al						;start of row?
  2488 0000062D 7514                    			jnz	.10						;no, skip ahead
  2489 0000062F 8A2525080000            			mov	ah,[wbConsoleRow]				;current row
  2490 00000635 08E4                    			or	ah,ah						;top of screen?
  2491 00000637 7411                    			jz	.20						;yes, exit with no change
  2492 00000639 FECC                    			dec	ah						;decrement row
  2493 0000063B 882525080000            			mov	[wbConsoleRow],ah				;save row
  2494 00000641 B050                    			mov	al,ECONCOLS					;set maximum column
  2495 00000643 FEC8                    .10			dec	al						;decrement column
  2496 00000645 A224080000              			mov	[wbConsoleColumn],al				;save column
  2497 0000064A C3                      .20			ret							;return
  2498                                  ;-----------------------------------------------------------------------------------------------------------------------
  2499                                  ;
  2500                                  ;	Routine:	NextConsoleColumn
  2501                                  ;
  2502                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2503                                  ;			incremented if the end of the current row is reached.
  2504                                  ;
  2505                                  ;	In:		DS	OS data selector
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508 0000064B A024080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2509 00000650 FEC0                    			inc	al						;increment column
  2510 00000652 A224080000              			mov	[wbConsoleColumn],al				;save column
  2511 00000657 3C50                    			cmp	al,ECONCOLS					;end of row?
  2512 00000659 720A                    			jb	.10						;no, skip ahead
  2513 0000065B E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2514 00000660 E809000000              			call	NextConsoleRow					;line feed to next row
  2515 00000665 C3                      .10			ret							;return
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  ;
  2518                                  ;	Routine:	FirstConsoleColumn
  2519                                  ;
  2520                                  ;	Description:	This routine resets the console column to start of the row.
  2521                                  ;
  2522                                  ;	In:		DS	OS data selector
  2523                                  ;
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525 00000666 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2526 00000668 A224080000              			mov	[wbConsoleColumn],al				;save column
  2527 0000066D C3                      			ret							;return
  2528                                  ;-----------------------------------------------------------------------------------------------------------------------
  2529                                  ;
  2530                                  ;	Routine:	NextConsoleRow
  2531                                  ;
  2532                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2533                                  ;
  2534                                  ;	In:		DS	OS data selector
  2535                                  ;
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537 0000066E A025080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2538 00000673 FEC0                    			inc	al						;increment row
  2539 00000675 A225080000              			mov	[wbConsoleRow],al				;save row
  2540 0000067A 3C18                    			cmp	al,ECONROWS					;end of screen?
  2541 0000067C 7211                    			jb	.10						;no, skip ahead
  2542 0000067E E80A030000              			call	ScrollConsoleRow				;scroll up one row
  2543 00000683 A025080000              			mov	al,[wbConsoleRow]				;row
  2544 00000688 FEC8                    			dec	al						;decrement row
  2545 0000068A A225080000              			mov	[wbConsoleRow],al				;save row
  2546 0000068F C3                      .10			ret							;return
  2547                                  ;-----------------------------------------------------------------------------------------------------------------------
  2548                                  ;
  2549                                  ;	Routine:	PutConsoleChar
  2550                                  ;
  2551                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2552                                  ;
  2553                                  ;	In:		AL	ASCII character
  2554                                  ;			DS	OS data selector
  2555                                  ;
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557 00000690 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2558 00000691 06                      			push	es						;
  2559 00000692 6A20                    			push	ESELCGA						;load CGA selector ...
  2560 00000694 07                      			pop	es						;... into extra segment reg
  2561 00000695 8A0D24080000            			mov	cl,[wbConsoleColumn]				;column
  2562 0000069B 8A2D25080000            			mov	ch,[wbConsoleRow]				;row
  2563 000006A1 E813030000              			call	SetConsoleChar					;put character at row, column
  2564 000006A6 07                      			pop	es						;restore non-volatile regs
  2565 000006A7 59                      			pop	ecx						;
  2566 000006A8 C3                      			ret							;return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;
  2569                                  ;	Routine:	PutConsoleOIAShift
  2570                                  ;
  2571                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2572                                  ;
  2573                                  ;	In:		BL	shift flags
  2574                                  ;			BH	lock flags
  2575                                  ;			DS	OS data selector
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578 000006A9 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2579 000006AA 06                      			push	es						;
  2580 000006AB 6A20                    			push	ESELCGA						;load CGA selector ...
  2581 000006AD 07                      			pop	es						;... into ES register
  2582 000006AE B518                    			mov	ch,ECONOIAROW					;OIA row
  2583 000006B0 B020                    			mov	al,EASCIISPACE					;space is default character
  2584 000006B2 F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2585 000006B5 7402                    			jz	.10						;no, skip ahead
  2586 000006B7 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2587 000006B9 B10E                    .10			mov	cl,14						;indicator column
  2588 000006BB E8F9020000              			call	SetConsoleChar					;display ASCII character
  2589 000006C0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2590 000006C2 F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2591 000006C5 7402                    			jz	.20						;no, skip ahead
  2592 000006C7 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2593 000006C9 B140                    .20			mov	cl,64						;indicator column
  2594 000006CB E8E9020000              			call	SetConsoleChar					;display ASCII character
  2595 000006D0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2596 000006D2 F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2597 000006D5 7402                    			jz	.30						;no, skip ahead
  2598 000006D7 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2599 000006D9 B10F                    .30			mov	cl,15						;indicator column
  2600 000006DB E8D9020000              			call	SetConsoleChar					;display ASCII character
  2601 000006E0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2602 000006E2 F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2603 000006E5 7402                    			jz	.40						;no, skip ahead
  2604 000006E7 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2605 000006E9 B13F                    .40			mov	cl,63						;indicator column
  2606 000006EB E8C9020000              			call	SetConsoleChar					;display ASCII character
  2607 000006F0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2608 000006F2 F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2609 000006F5 7402                    			jz	.50						;no, skip ahead
  2610 000006F7 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2611 000006F9 B110                    .50			mov	cl,16						;indicator column
  2612 000006FB E8B9020000              			call	SetConsoleChar					;display ASCII character
  2613 00000700 B020                    			mov	al,EASCIISPACE					;ASCII space
  2614 00000702 F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2615 00000705 7402                    			jz	.60						;no, skip ahead
  2616 00000707 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2617 00000709 B13E                    .60			mov	cl,62						;indicator column
  2618 0000070B E8A9020000              			call	SetConsoleChar					;display ASCII character
  2619 00000710 B020                    			mov	al,EASCIISPACE					;ASCII space
  2620 00000712 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2621 00000715 7402                    			jz	.70						;no, skip ahead
  2622 00000717 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2623 00000719 B14E                    .70			mov	cl,78						;indicator column
  2624 0000071B E899020000              			call	SetConsoleChar					;display ASCII character
  2625 00000720 B020                    			mov	al,EASCIISPACE					;ASCII space
  2626 00000722 F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2627 00000725 7402                    			jz	.80						;no, skip ahead
  2628 00000727 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2629 00000729 B14D                    .80			mov	cl,77						;indicator column
  2630 0000072B E889020000              			call	SetConsoleChar					;display ASCII character
  2631 00000730 B020                    			mov	al,EASCIISPACE					;ASCII space
  2632 00000732 F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2633 00000735 7402                    			jz	.90						;no, skip ahead
  2634 00000737 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2635 00000739 B14C                    .90			mov	cl,76						;indicator column
  2636 0000073B E879020000              			call	SetConsoleChar					;display ASCII character
  2637 00000740 07                      			pop	es						;restore non-volatile regs
  2638 00000741 59                      			pop	ecx						;
  2639 00000742 C3                      			ret							;return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;	Routine:	PutConsoleOIAChar
  2643                                  ;
  2644                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2645                                  ;
  2646                                  ;	In:		DS	OS data selector
  2647                                  ;
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649 00000743 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2650 00000744 51                      			push	ecx						;
  2651 00000745 56                      			push	esi						;
  2652 00000746 1E                      			push	ds						;
  2653 00000747 06                      			push	es						;
  2654 00000748 6A18                    			push	ESELDAT						;load OS data selector ...
  2655 0000074A 1F                      			pop	ds						;... into data segment register
  2656 0000074B 6A20                    			push	ESELCGA						;load CGA selector ...
  2657 0000074D 07                      			pop	es						;... into extra segment register
  2658 0000074E BE29080000              			mov	esi,wbConsoleScan0				;scan codes address
  2659 00000753 B718                    			mov	bh,ECONOIAROW					;OIA row
  2660 00000755 B300                    			mov	bl,0						;starting column
  2661 00000757 B906000000              			mov	ecx,6						;maximum scan codes
  2662 0000075C 51                      .10			push	ecx						;save remaining count
  2663 0000075D 89D9                    			mov	ecx,ebx						;row, column
  2664 0000075F AC                      			lodsb							;read scan code
  2665 00000760 08C0                    			or	al,al						;scan code present?
  2666 00000762 7407                    			jz	.20						;no, skip ahead
  2667 00000764 E834000000              			call	PutConsoleHexByte				;display scan code
  2668 00000769 EB10                    			jmp	.30						;continue
  2669 0000076B B020                    .20			mov	al,' '						;ASCII space
  2670 0000076D E847020000              			call	SetConsoleChar					;display space
  2671 00000772 FEC1                    			inc	cl
  2672 00000774 B020                    			mov	al,' '						;ASCII space
  2673 00000776 E83E020000              			call	SetConsoleChar					;display space
  2674 0000077B 80C302                  .30			add	bl,2						;next column (+2)
  2675 0000077E 59                      			pop	ecx						;restore remaining
  2676 0000077F E2DB                    			loop	.10						;next code
  2677 00000781 A02F080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2678 00000786 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2679 00000788 720D                    			jb	.40						;no, skip ahead
  2680 0000078A 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2681 0000078C 7709                    			ja	.40						;no, skip ahead
  2682 0000078E 88FD                    			mov	ch,bh						;OIA row
  2683 00000790 B128                    			mov	cl,40						;character display column
  2684 00000792 E822020000              			call	SetConsoleChar					;display ASCII character
  2685 00000797 07                      .40			pop	es						;restore non-volatile regs
  2686 00000798 1F                      			pop	ds						;
  2687 00000799 5E                      			pop	esi						;
  2688 0000079A 59                      			pop	ecx						;
  2689 0000079B 5B                      			pop	ebx						;
  2690 0000079C C3                      			ret							;return
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                  ;
  2693                                  ;	Routine:	PutConsoleHexByte
  2694                                  ;
  2695                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2696                                  ;
  2697                                  ;	In:		AL	byte value
  2698                                  ;			CH	row
  2699                                  ;			CL	column
  2700                                  ;			DS	OS data selector
  2701                                  ;			ES	CGA selector
  2702                                  ;
  2703                                  ;-----------------------------------------------------------------------------------------------------------------------
  2704 0000079D 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2705 0000079E 88C3                    			mov	bl,al						;save byte value
  2706 000007A0 C0E804                  			shr	al,4						;hi-order nybble
  2707 000007A3 0C30                    			or	al,030h						;apply ASCII zone
  2708 000007A5 3C3A                    			cmp	al,03ah						;numeric?
  2709 000007A7 7202                    			jb	.10						;yes, skip ahead
  2710 000007A9 0407                    			add	al,7						;add ASCII offset for alpha
  2711 000007AB E809020000              .10			call	SetConsoleChar					;display ASCII character
  2712 000007B0 FEC1                    			inc	cl						;increment column
  2713 000007B2 88D8                    			mov	al,bl						;byte value
  2714 000007B4 240F                    			and	al,0fh						;lo-order nybble
  2715 000007B6 0C30                    			or	al,30h						;apply ASCII zone
  2716 000007B8 3C3A                    			cmp	al,03ah						;numeric?
  2717 000007BA 7202                    			jb	.20						;yes, skip ahead
  2718 000007BC 0407                    			add	al,7						;add ASCII offset for alpha
  2719 000007BE E8F6010000              .20			call	SetConsoleChar					;display ASCII character
  2720 000007C3 5B                      			pop	ebx						;restore non-volatile regs
  2721 000007C4 C3                      			ret							;return
  2722                                  ;-----------------------------------------------------------------------------------------------------------------------
  2723                                  ;
  2724                                  ;	Data-Type Conversion Helper Routines
  2725                                  ;
  2726                                  ;	UnsignedToDecimalString
  2727                                  ;	ByteToDecimalString
  2728                                  ;	UnsignedToHexadecimal
  2729                                  ;	HexadecimalToUnsigned
  2730                                  ;
  2731                                  ;-----------------------------------------------------------------------------------------------------------------------
  2732                                  ;-----------------------------------------------------------------------------------------------------------------------
  2733                                  ;
  2734                                  ;	Routine:	UnsignedToDecimalString
  2735                                  ;
  2736                                  ;	Description:	This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  2737                                  ;
  2738                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  2739                                  ;						bit 1: 1 = include comma grouping delimiters
  2740                                  ;						bit 4: 1 = non-zero digit found (internal)
  2741                                  ;			ECX	32-bit binary
  2742                                  ;			DS:EDX	output buffer address
  2743                                  ;
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745 000007C5 53                      UnsignedToDecimalString push	ebx						;save non-volatile regs
  2746 000007C6 51                      			push	ecx						;
  2747 000007C7 57                      			push	edi						;
  2748 000007C8 06                      			push	es						;
  2749 000007C9 1E                      			push	ds						;load data selector
  2750 000007CA 07                      			pop	es						;... into extra segment reg
  2751 000007CB 89D7                    			mov	edi,edx 					;output buffer address
  2752 000007CD 80E70F                  			and	bh,00001111b					;zero internal flags
  2753 000007D0 89CA                    			mov	edx,ecx 					;binary
  2754 000007D2 B900CA9A3B              			mov	ecx,1000000000					;10^9 divisor
  2755 000007D7 E871000000              			call	.30						;divide and store
  2756 000007DC B900E1F505              			mov	ecx,100000000					;10^8 divisor
  2757 000007E1 E855000000              			call	.10						;divide and store
  2758 000007E6 B980969800              			mov	ecx,10000000					;10^7 divisor
  2759 000007EB E85D000000              			call	.30						;divide and store
  2760 000007F0 B940420F00              			mov	ecx,1000000					;10^6 divisor
  2761 000007F5 E853000000              			call	.30						;divide and store
  2762 000007FA B9A0860100              			mov	ecx,100000					;10^5 divisor
  2763 000007FF E837000000              			call	.10						;divide and store
  2764 00000804 B910270000              			mov	ecx,10000					;10^4 divisor
  2765 00000809 E83F000000              			call	.30						;divide and store
  2766 0000080E B9E8030000              			mov	ecx,1000					;10^3 divisor
  2767 00000813 E835000000              			call	.30						;divide and store
  2768 00000818 B964000000              			mov	ecx,100 					;10^2 divisor
  2769 0000081D E819000000              			call	.10						;divide and store
  2770 00000822 B90A000000              			mov	ecx,10						;10^2 divisor
  2771 00000827 E821000000              			call	.30						;divide and store
  2772 0000082C 89D0                    			mov	eax,edx 					;10^1 remainder
  2773 0000082E E827000000              			call	.40						;store
  2774 00000833 30C0                    			xor	al,al						;null terminator
  2775 00000835 AA                      			stosb
  2776 00000836 07                      			pop	es						;restore non-volatile regs
  2777 00000837 5F                      			pop	edi						;
  2778 00000838 59                      			pop	ecx						;
  2779 00000839 5B                      			pop	ebx						;
  2780 0000083A C3                      			ret							;return
  2781 0000083B F6C702                  .10			test	bh,00000010b					;comma group delims?
  2782 0000083E 740D                    			jz	.30						;no, branch
  2783 00000840 F6C701                  			test	bh,00000001b					;trim leading zeros?
  2784 00000843 7405                    			jz	.20						;no, store delim
  2785 00000845 F6C710                  			test	bh,00010000b					;non-zero found?
  2786 00000848 7403                    			jz	.30						;no, branch
  2787 0000084A B02C                    .20			mov	al,','						;delimiter
  2788 0000084C AA                      			stosb							;store delimiter
  2789 0000084D 89D0                    .30			mov	eax,edx 					;lo-orer dividend
  2790 0000084F 31D2                    			xor	edx,edx 					;zero hi-order
  2791 00000851 F7F1                    			div	ecx						;divide by power of 10
  2792 00000853 84C0                    			test	al,al						;zero?
  2793 00000855 7407                    			jz	.50						;yes, branch
  2794 00000857 80CF10                  			or	bh,00010000b					;non-zero found
  2795 0000085A 0C30                    .40			or	al,30h						;ASCII zone
  2796 0000085C AA                      			stosb							;store digit
  2797 0000085D C3                      			ret							;return
  2798 0000085E F6C701                  .50			test	bh,00000001b					;trim leading zeros?
  2799 00000861 74F7                    			jz	.40						;no, store and continue
  2800 00000863 F6C710                  			test	bh,00010000b					;non-zero found?
  2801 00000866 75F2                    			jnz	.40						;yes, store and continue
  2802 00000868 C3                      			ret							;return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;	Routine:	ByteToDecimalString
  2806                                  ;
  2807                                  ;	Description:	This routine outputs an ASCIIZ string representing the decimal value of 8-bit binary input
  2808                                  ;
  2809                                  ;	Input:		BH	flags		bit 0: 1 = trim leading zeros
  2810                                  ;						bit 1: 1 = left pad with spaces
  2811                                  ;						bit 4: 1 = non-zero digit found (internal)
  2812                                  ;			CL	8-bit binary
  2813                                  ;			DS:EDX	output buffer address
  2814                                  ;
  2815                                  ;-----------------------------------------------------------------------------------------------------------------------
  2816 00000869 53                      ByteToDecimalString	push	ebx						;save non-volatile regs
  2817 0000086A 51                      			push	ecx						;
  2818 0000086B 57                      			push	edi						;
  2819 0000086C 06                      			push	es						;
  2820 0000086D 1E                      			push	ds						;copy data segment selector
  2821 0000086E 07                      			pop	es						;... into extra segment selector
  2822 0000086F 89D7                    			mov	edi,edx						;output buffer address
  2823 00000871 80E70F                  			and	bh,00001111b					;zero internal flags
  2824 00000874 88CC                    			mov	ah,cl						;8-bit binary value
  2825 00000876 B164                    			mov	cl,100						;divisor
  2826 00000878 FC                      			cld							;forward strings
  2827 00000879 E816000000              			call	.10						;divide and store
  2828 0000087E B10A                    			mov	cl,10						;divisor
  2829 00000880 E80F000000              			call	.10						;divide and store
  2830 00000885 88E0                    			mov	al,ah						;remainder
  2831 00000887 E815000000              			call	.20						;store
  2832 0000088C 30C0                    			xor	al,al						;null
  2833 0000088E AA                      			stosb							;terminate string
  2834 0000088F 07                      			pop	es						;restore non-volatile regs
  2835 00000890 5F                      			pop	edi						;
  2836 00000891 59                      			pop	ecx						;
  2837 00000892 5B                      			pop	ebx						;
  2838 00000893 C3                      			ret							;return
  2839 00000894 88E0                    .10			mov	al,ah						;last remainder (or starting value)
  2840 00000896 30E4                    			xor	ah,ah						;zero hi-order dividend
  2841 00000898 F6F1                    			div	cl						;divide by power or 10
  2842 0000089A 84C0                    			test	al,al						;zero?
  2843 0000089C 7407                    			jz	.40						;yes, branch
  2844 0000089E 80CF10                  			or	bh,00010000b					;non-zero found
  2845 000008A1 0C30                    .20			or	al,30h						;ASCII zone
  2846 000008A3 AA                      .30			stosb							;store digit
  2847 000008A4 C3                      			ret							;return
  2848 000008A5 F6C701                  .40			test	bh,00000001b					;trim leading zeros?
  2849 000008A8 74F7                    			jz	.20						;no, store and continue
  2850 000008AA F6C710                  			test	bh,00010000b					;non-zero found?
  2851 000008AD 75F2                    			jnz	.20						;yes, store and continue
  2852 000008AF B020                    			mov	al,' '						;space
  2853 000008B1 F6C702                  			test	bh,00000010b					;left pad with spaces?
  2854 000008B4 75ED                    			jnz	.30						;yes, store space and continue
  2855 000008B6 C3                      			ret							;return
  2856                                  ;-----------------------------------------------------------------------------------------------------------------------
  2857                                  ;
  2858                                  ;	Routine:	UnsignedToHexadecimal
  2859                                  ;
  2860                                  ;	Description:	This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  2861                                  ;
  2862                                  ;	Input:		DS:EDX	output buffer address
  2863                                  ;			ECX	32-bit binary
  2864                                  ;
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866 000008B7 57                      UnsignedToHexadecimal	push	edi						;store non-volatile regs
  2867 000008B8 89D7                    			mov	edi,edx						;output buffer address
  2868 000008BA 89CA                    			mov	edx,ecx						;32-bit unsigned
  2869 000008BC 31C9                    			xor	ecx,ecx						;zero register
  2870 000008BE B108                    			mov	cl,8						;nybble count
  2871 000008C0 C1C204                  .10			rol	edx,4						;next hi-order nybble in bits 0-3
  2872 000008C3 88D0                    			mov	al,dl						;????bbbb
  2873 000008C5 240F                    			and	al,0fh						;mask out bits 4-7
  2874 000008C7 0C30                    			or	al,30h						;mask in ascii zone
  2875 000008C9 3C3A                    			cmp	al,3ah						;A through F?
  2876 000008CB 7202                    			jb	.20						;no, skip ahead
  2877 000008CD 0407                    			add	al,7						;41h through 46h
  2878 000008CF AA                      .20			stosb							;store hexnum
  2879 000008D0 E2EE                    			loop	.10						;next nybble
  2880 000008D2 30C0                    			xor	al,al						;zero reg
  2881 000008D4 AA                      			stosb							;null terminate
  2882 000008D5 5F                      			pop	edi						;restore non-volatile regs
  2883 000008D6 C3                      			ret							;return
  2884                                  ;-----------------------------------------------------------------------------------------------------------------------
  2885                                  ;
  2886                                  ;	Routine:	HexadecimalToUnsigned
  2887                                  ;
  2888                                  ;	Description:	This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  2889                                  ;
  2890                                  ;	Input:		DS:EDX	null-terminated hexadecimal string address
  2891                                  ;
  2892                                  ;	Output: 	EAX	unsigned integer value
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895 000008D7 56                      HexadecimalToUnsigned	push	esi						;save non-volatile regs
  2896 000008D8 89D6                    			mov	esi,edx						;source address
  2897 000008DA 31D2                    			xor	edx,edx						;zero register
  2898 000008DC AC                      .10			lodsb							;source byte
  2899 000008DD 84C0                    			test	al,al						;end of string?
  2900 000008DF 7410                    			jz	.30						;yes, skip ahead
  2901 000008E1 3C39                    			cmp	al,'9'						;hexadecimal?
  2902 000008E3 7602                    			jna	.20						;no, skip ahead
  2903 000008E5 2C37                    			sub	al,37h						;'A' = 41h, less 37h = 0Ah
  2904 000008E7 83E00F                  .20			and	eax,0fh						;remove ascii zone
  2905 000008EA C1E204                  			shl	edx,4						;previous total x 16
  2906 000008ED 01C2                    			add	edx,eax						;add prior value x 16
  2907 000008EF EBEB                    			jmp	.10						;next
  2908 000008F1 89D0                    .30			mov	eax,edx						;result
  2909 000008F3 5E                      			pop	esi						;restore non-volatile regs
  2910 000008F4 C3                      			ret							;return
  2911                                  ;-----------------------------------------------------------------------------------------------------------------------
  2912                                  ;
  2913                                  ;	Message Queue Helper Routines
  2914                                  ;
  2915                                  ;	PutMessage
  2916                                  ;	GetMessage
  2917                                  ;
  2918                                  ;-----------------------------------------------------------------------------------------------------------------------
  2919                                  ;-----------------------------------------------------------------------------------------------------------------------
  2920                                  ;
  2921                                  ;	Routine:	PutMessage
  2922                                  ;
  2923                                  ;	Description:	This routine adda a message to the message queue.
  2924                                  ;
  2925                                  ;	Input:		ECX	hi-order data word
  2926                                  ;			EDX	lo-order data word
  2927                                  ;
  2928                                  ;	Output:		CY	0 = success
  2929                                  ;				1 = fail: queue is full
  2930                                  ;
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932 000008F5 1E                      PutMessage		push	ds						;save non-volatile regs
  2933 000008F6 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2934 000008F8 1F                      			pop	ds						;... into data segment register
  2935 000008F9 A104000000              			mov	eax,[MQTail]					;tail ptr
  2936 000008FE 833800                  			cmp	dword [eax],0					;is queue full?
  2937 00000901 F9                      			stc							;assume failure
  2938 00000902 7517                    			jne	.20						;yes, cannot store
  2939 00000904 8910                    			mov	[eax],edx					;store lo-order data
  2940 00000906 894804                  			mov	[eax+4],ecx					;store hi-order data
  2941 00000909 83C008                  			add	eax,8						;next queue element adr
  2942 0000090C 25FC030000              			and	eax,03fch					;at end of queue?
  2943 00000911 7502                    			jnz	.10						;no, skip ahead
  2944 00000913 B008                    			mov	al,8						;reset to top of queue
  2945 00000915 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2946 0000091A F8                      			clc							;indicate success
  2947 0000091B 1F                      .20			pop	ds						;restore non-volatile regs
  2948 0000091C C3                      			ret							;return
  2949                                  ;-----------------------------------------------------------------------------------------------------------------------
  2950                                  ;
  2951                                  ;	Routine:	GetMessage
  2952                                  ;
  2953                                  ;	Description:	This routine reads and removes a message from the message queue.
  2954                                  ;
  2955                                  ;	Output:		EAX	lo-order message data
  2956                                  ;			EDX	hi-order message data
  2957                                  ;
  2958                                  ;			CY	0 = message read
  2959                                  ;				1 = no message to read
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962 0000091D 53                      GetMessage		push	ebx						;save non-volatile regs
  2963 0000091E 51                      			push	ecx						;
  2964 0000091F 1E                      			push	ds						;
  2965 00000920 6A2C                    			push	ESELMQ						;load message queue selector ...
  2966 00000922 1F                      			pop	ds						;... into data segment register
  2967 00000923 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2968 00000929 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2969 0000092B 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2970 0000092E 09D0                    			or	eax,edx						;is queue empty?
  2971 00000930 F9                      			stc							;assume queue is emtpy
  2972 00000931 741B                    			jz	.20						;yes, skip ahead
  2973 00000933 31C9                    			xor	ecx,ecx						;store zero
  2974 00000935 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2975 00000937 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2976 0000093A 83C308                  			add	ebx,8						;next queue element
  2977 0000093D 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2978 00000943 7502                    			jnz	.10						;no, skip ahead
  2979 00000945 B308                    			mov	bl,8						;reset to 1st entry
  2980 00000947 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2981 0000094D F8                      			clc							;indicate message read
  2982 0000094E 1F                      .20			pop	ds						;restore non-volatile regs
  2983 0000094F 59                      			pop	ecx						;
  2984 00000950 5B                      			pop	ebx						;
  2985 00000951 C3                      			ret							;return
  2986                                  ;-----------------------------------------------------------------------------------------------------------------------
  2987                                  ;
  2988                                  ;	Memory-Mapped Video Routines
  2989                                  ;
  2990                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2991                                  ;
  2992                                  ;	ClearConsoleScreen
  2993                                  ;	ScrollConsoleRow
  2994                                  ;	SetConsoleChar
  2995                                  ;
  2996                                  ;-----------------------------------------------------------------------------------------------------------------------
  2997                                  ;-----------------------------------------------------------------------------------------------------------------------
  2998                                  ;
  2999                                  ;	Routine:	ClearConsoleScreen
  3000                                  ;
  3001                                  ;	Description:	This routine clears the console (CGA) screen.
  3002                                  ;
  3003                                  ;-----------------------------------------------------------------------------------------------------------------------
  3004 00000952 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  3005 00000953 57                      			push	edi						;
  3006 00000954 1E                      			push	ds						;
  3007 00000955 06                      			push	es						;
  3008 00000956 6A18                    			push	ESELDAT						;load OS Data selector ...
  3009 00000958 1F                      			pop	ds						;... into DS register
  3010 00000959 6A20                    			push	ESELCGA						;load CGA selector ...
  3011 0000095B 07                      			pop	es						;... into ES register
  3012 0000095C B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  3013 00000961 B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  3014 00000966 31FF                    			xor	edi,edi						;target offset
  3015 00000968 FC                      			cld							;forward strings
  3016 00000969 F3AB                    			rep	stosd						;reset screen body
  3017 0000096B B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  3018 00000970 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  3019 00000975 F3AB                    			rep	stosd						;reset OIA line
  3020 00000977 30C0                    			xor	al,al						;zero register
  3021 00000979 A225080000              			mov	[wbConsoleRow],al				;reset console row
  3022 0000097E A224080000              			mov	[wbConsoleColumn],al				;reset console column
  3023 00000983 E845000000              			call	PlaceCursor					;place cursor at current position
  3024 00000988 07                      			pop	es						;restore non-volatile regs
  3025 00000989 1F                      			pop	ds						;
  3026 0000098A 5F                      			pop	edi						;
  3027 0000098B 59                      			pop	ecx						;
  3028 0000098C C3                      			ret							;return
  3029                                  ;-----------------------------------------------------------------------------------------------------------------------
  3030                                  ;
  3031                                  ;	Routine:	ScrollConsoleRow
  3032                                  ;
  3033                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  3034                                  ;
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036 0000098D 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  3037 0000098E 56                      			push	esi						;
  3038 0000098F 57                      			push	edi						;
  3039 00000990 1E                      			push	ds						;
  3040 00000991 06                      			push	es						;
  3041 00000992 6A20                    			push	ESELCGA						;load CGA video selector ...
  3042 00000994 1F                      			pop	ds						;... into DS
  3043 00000995 6A20                    			push	ESELCGA						;load CGA video selector ...
  3044 00000997 07                      			pop	es						;... into ES
  3045 00000998 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  3046 0000099D BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  3047 000009A2 31FF                    			xor	edi,edi						;edi = target (line 1)
  3048 000009A4 FC                      			cld							;forward strings
  3049 000009A5 F3A5                    			rep	movsd						;move 24 lines up
  3050 000009A7 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  3051 000009AC B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  3052 000009B1 F3AB                    			rep	stosd						;clear bottom row
  3053 000009B3 07                      			pop	es						;restore non-volatile regs
  3054 000009B4 1F                      			pop	ds						;
  3055 000009B5 5F                      			pop	edi						;
  3056 000009B6 5E                      			pop	esi						;
  3057 000009B7 59                      			pop	ecx						;
  3058 000009B8 C3                      			ret							;return
  3059                                  ;-----------------------------------------------------------------------------------------------------------------------
  3060                                  ;
  3061                                  ;	Routine:	SetConsoleChar
  3062                                  ;
  3063                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  3064                                  ;
  3065                                  ;	In:		AL	ASCII character
  3066                                  ;			CL	column
  3067                                  ;			CH	row
  3068                                  ;			ES	CGA selector
  3069                                  ;
  3070                                  ;-----------------------------------------------------------------------------------------------------------------------
  3071 000009B9 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  3072 000009BB 0FB6C5                  			movzx	eax,ch						;row
  3073 000009BE B450                    			mov	ah,ECONCOLS					;cols/row
  3074 000009C0 F6E4                    			mul	ah						;row * cols/row
  3075 000009C2 00C8                    			add	al,cl						;add column
  3076 000009C4 80D400                  			adc	ah,0						;handle carry
  3077 000009C7 D1E0                    			shl	eax,1						;screen offset
  3078 000009C9 268810                  			mov	[es:eax],dl					;store character
  3079 000009CC C3                      			ret							;return
  3080                                  ;-----------------------------------------------------------------------------------------------------------------------
  3081                                  ;
  3082                                  ;	Input/Output Routines
  3083                                  ;
  3084                                  ;	These routines read and/or write directly to ports.
  3085                                  ;
  3086                                  ;	PlaceCursor
  3087                                  ;	PutPrimaryEndOfInt
  3088                                  ;	PutSecondaryEndOfInt
  3089                                  ;	ReadRealTimeClock
  3090                                  ;	ResetSystem
  3091                                  ;	SetKeyboardLamps
  3092                                  ;	WaitForKeyInBuffer
  3093                                  ;	WaitForKeyOutBuffer
  3094                                  ;
  3095                                  ;-----------------------------------------------------------------------------------------------------------------------
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  ;
  3098                                  ;	Routine:	PlaceCursor
  3099                                  ;
  3100                                  ;	Description:	This routine positions the cursor on the console.
  3101                                  ;
  3102                                  ;	In:		DS	OS data selector
  3103                                  ;
  3104                                  ;-----------------------------------------------------------------------------------------------------------------------
  3105 000009CD 51                      PlaceCursor		push	ecx						;save non-volatile regs
  3106 000009CE A025080000              			mov	al,[wbConsoleRow]				;al = row
  3107 000009D3 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  3108 000009D5 F6E4                    			mul	ah						;row offset
  3109 000009D7 020524080000            			add	al,[wbConsoleColumn]				;add column
  3110 000009DD 80D400                  			adc	ah,0						;add overflow
  3111 000009E0 89C1                    			mov	ecx,eax						;screen offset
  3112 000009E2 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  3113 000009E4 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  3114 000009E6 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  3115 000009E8 EE                      			out	dx,al						;select register
  3116 000009E9 42                      			inc	edx						;data port
  3117 000009EA 88E8                    			mov	al,ch						;hi-order cursor loc
  3118 000009EC EE                      			out	dx,al						;store hi-order loc
  3119 000009ED 4A                      			dec	edx						;register select port
  3120 000009EE B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  3121 000009F0 EE                      			out	dx,al						;select register
  3122 000009F1 42                      			inc	edx						;data port
  3123 000009F2 88C8                    			mov	al,cl						;lo-order cursor loc
  3124 000009F4 EE                      			out	dx,al						;store lo-order loc
  3125 000009F5 59                      			pop	ecx						;restore non-volatile regs
  3126 000009F6 C3                      			ret							;return
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  ;
  3129                                  ;	Routine:	PutPrimaryEndOfInt
  3130                                  ;
  3131                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3132                                  ;
  3133                                  ;-----------------------------------------------------------------------------------------------------------------------
  3134 000009F7 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  3135 000009F8 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  3136 000009FA E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  3137 000009FC C3                      			ret							;return
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;	Routine:	PutSecondaryEndOfInt
  3141                                  ;
  3142                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3143                                  ;
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145 000009FD FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  3146 000009FE B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  3147 00000A00 E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  3148 00000A02 C3                      			ret							;return
  3149                                  ;-----------------------------------------------------------------------------------------------------------------------
  3150                                  ;
  3151                                  ;	Routine:	ReadRealTimeClock
  3152                                  ;
  3153                                  ;	Description:	This routine gets current date time from the real-time clock.
  3154                                  ;
  3155                                  ;	In:		DS:EBX	DATETIME structure
  3156                                  ;
  3157                                  ;-----------------------------------------------------------------------------------------------------------------------
  3158 00000A03 56                      ReadRealTimeClock	push	esi						;save non-volatile regs
  3159 00000A04 57                      			push	edi						;
  3160 00000A05 06                      			push	es						;
  3161 00000A06 1E                      			push	ds						;store data selector ...
  3162 00000A07 07                      			pop	es						;... in es register
  3163 00000A08 89DF                    			mov	edi,ebx						;date-time structure
  3164 00000A0A B000                    			mov	al,ERTCSECONDREG				;second register
  3165 00000A0C E670                    			out	ERTCREGPORT,al					;select second register
  3166 00000A0E E471                    			in	al,ERTCDATAPORT					;read second register
  3167 00000A10 FC                      			cld							;forward strings
  3168 00000A11 AA                      			stosb							;store second value
  3169 00000A12 B002                    			mov	al,ERTCMINUTEREG				;minute register
  3170 00000A14 E670                    			out	ERTCREGPORT,al					;select minute register
  3171 00000A16 E471                    			in	al,ERTCDATAPORT					;read minute register
  3172 00000A18 AA                      			stosb							;store minute value
  3173 00000A19 B004                    			mov	al,ERTCHOURREG					;hour register
  3174 00000A1B E670                    			out	ERTCREGPORT,al					;select hour register
  3175 00000A1D E471                    			in	al,ERTCDATAPORT					;read hour register
  3176 00000A1F AA                      			stosb							;store hour value
  3177 00000A20 B006                    			mov	al,ERTCWEEKDAYREG				;weekday register
  3178 00000A22 E670                    			out	ERTCREGPORT,al					;select weekday register
  3179 00000A24 E471                    			in	al,ERTCDATAPORT					;read weekday register
  3180 00000A26 AA                      			stosb							;store weekday value
  3181 00000A27 B007                    			mov	al,ERTCDAYREG					;day register
  3182 00000A29 E670                    			out	ERTCREGPORT,al					;select day register
  3183 00000A2B E471                    			in	al,ERTCDATAPORT					;read day register
  3184 00000A2D AA                      			stosb							;store day value
  3185 00000A2E B008                    			mov	al,ERTCMONTHREG					;month register
  3186 00000A30 E670                    			out	ERTCREGPORT,al					;select month register
  3187 00000A32 E471                    			in	al,ERTCDATAPORT					;read month register
  3188 00000A34 AA                      			stosb							;store month value
  3189 00000A35 B009                    			mov	al,ERTCYEARREG					;year register
  3190 00000A37 E670                    			out	ERTCREGPORT,al					;select year register
  3191 00000A39 E471                    			in	al,ERTCDATAPORT					;read year register
  3192 00000A3B AA                      			stosb							;store year value
  3193 00000A3C B032                    			mov	al,ERTCCENTURYREG				;century register
  3194 00000A3E E670                    			out	ERTCREGPORT,al					;select century register
  3195 00000A40 E471                    			in	al,ERTCDATAPORT					;read century register
  3196 00000A42 AA                      			stosb							;store century value
  3197 00000A43 B00B                    			mov	al,ERTCSTATUSREG				;status register
  3198 00000A45 E670                    			out	ERTCREGPORT,al					;select status register
  3199 00000A47 E471                    			in	al,ERTCDATAPORT					;read status register
  3200 00000A49 A804                    			test	al,ERTCBINARYVALS				;test if values are binary
  3201 00000A4B 751D                    			jnz	.20						;skip ahead if binary values
  3202 00000A4D 89DE                    			mov	esi,ebx						;date-time structure address
  3203 00000A4F 89DF                    			mov	edi,ebx						;date-time structure address
  3204 00000A51 B908000000              			mov	ecx,8						;loop counter
  3205 00000A56 AC                      .10			lodsb							;BCD value
  3206 00000A57 88C4                    			mov	ah,al						;BCD value
  3207 00000A59 240F                    			and	al,00001111b					;low-order decimal zone
  3208 00000A5B 80E4F0                  			and	ah,11110000b					;hi-order decimal zone
  3209 00000A5E D0EC                    			shr	ah,1						;hi-order decimal * 8
  3210 00000A60 00E0                    			add	al,ah						;low-order + hi-order * 8
  3211 00000A62 C0EC02                  			shr	ah,2						;hi-order decimal * 2
  3212 00000A65 00E0                    			add	al,ah						;low-order + hi-order * 10
  3213 00000A67 AA                      			stosb							;replace BCD with binary
  3214 00000A68 E2EC                    			loop	.10						;next value
  3215 00000A6A 07                      .20			pop	es						;restore non-volatile regs
  3216 00000A6B 5F                      			pop	edi						;
  3217 00000A6C 5E                      			pop	esi						;
  3218 00000A6D C3                      			ret							;return
  3219                                  ;-----------------------------------------------------------------------------------------------------------------------
  3220                                  ;
  3221                                  ;	Routine:	ResetSystem
  3222                                  ;
  3223                                  ;	Description:	This routine restarts the system using the 8042 controller.
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226 00000A6E B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  3227 00000A73 E2FE                    			loop	$						;clear interrupts
  3228 00000A75 B0FE                    			mov	al,EKEYCMDRESET					;mask out bit zero
  3229 00000A77 E664                    			out	EKEYPORTSTAT,al					;drive bit zero low
  3230 00000A79 FB                      .10			sti							;enable maskable interrupts
  3231 00000A7A F4                      			hlt							;halt until interrupt
  3232 00000A7B EBFC                    			jmp	.10						;repeat until reset kicks in
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  ;
  3235                                  ;	Routine:	SetKeyboardLamps
  3236                                  ;
  3237                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  3238                                  ;
  3239                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3240                                  ;
  3241                                  ;-----------------------------------------------------------------------------------------------------------------------
  3242 00000A7D E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  3243 00000A82 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  3244 00000A84 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  3245 00000A86 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  3246 00000A8B E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3247 00000A8D E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  3248 00000A92 88F8                    			mov	al,bh						;set/reset lamps value
  3249 00000A94 E660                    			out	EKEYPORTDATA,al					;send lamps value
  3250 00000A96 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  3251 00000A9B E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3252 00000A9D C3                      			ret							;return
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  ;
  3255                                  ;	Routine:	WaitForKeyInBuffer
  3256                                  ;
  3257                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3258                                  ;
  3259                                  ;	Out:		ZF	1 = Input buffer ready
  3260                                  ;				0 = Input buffer not ready after timeout
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263 00000A9E 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3264 00000A9F B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3265 00000AA4 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3266 00000AA6 A802                    			test	al,EKEYBITIN					;is input buffer still full?
  3267 00000AA8 E0FA                    			loopnz	.10						;yes, repeat till timeout
  3268 00000AAA 59                      			pop	ecx						;restore non-volatile regs
  3269 00000AAB C3                      			ret							;return
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  ;
  3272                                  ;	Routine:	WaitForKeyOutBuffer
  3273                                  ;
  3274                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3275                                  ;
  3276                                  ;	Out:		ZF	0 = Output buffer has data from controller
  3277                                  ;				1 = Output buffer empty after timeout
  3278                                  ;
  3279                                  ;-----------------------------------------------------------------------------------------------------------------------
  3280 00000AAC 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3281 00000AAD B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3282 00000AB2 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3283 00000AB4 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  3284 00000AB6 E1FA                    			loopz	.10						;loop until output buffer bit
  3285 00000AB8 59                      			pop	ecx						;restore non-volatile regs
  3286 00000AB9 C3                      			ret							;return
  3287                                  ;-----------------------------------------------------------------------------------------------------------------------
  3288                                  ;
  3289                                  ;	End of the Kernel Function Library
  3290                                  ;
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292 00000ABA 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  3293 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  3294                                  ;-----------------------------------------------------------------------------------------------------------------------
  3295                                  ;
  3296                                  ;	Console Task
  3297                                  ;
  3298                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3299                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3300                                  ;	screen and responds to user commands.
  3301                                  ;
  3302                                  ;-----------------------------------------------------------------------------------------------------------------------
  3303                                  ;-----------------------------------------------------------------------------------------------------------------------
  3304                                  ;
  3305                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3306                                  ;
  3307                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3308                                  ;
  3309                                  ;-----------------------------------------------------------------------------------------------------------------------
  3310                                  section			constack						;console task stack
  3311 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  3312                                  ;-----------------------------------------------------------------------------------------------------------------------
  3313                                  ;
  3314                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3315                                  ;
  3316                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3317                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3318                                  ;	16 descriptors. Six are initially defined.
  3319                                  ;
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  section			conldt							;console local descriptors
  3322 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  3323 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  3324 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  3325 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  3326 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  3327 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  3328 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3329                                  ;-----------------------------------------------------------------------------------------------------------------------
  3330                                  ;
  3331                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3332                                  ;
  3333                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3334                                  ;	segment. CS to console code.
  3335                                  ;
  3336                                  ;-----------------------------------------------------------------------------------------------------------------------
  3337                                  section			contss							;console task state segment
  3338 00000000 00000000                			dd	0						;00 back-link tss
  3339 00000004 00070000                			dd	0700h						;04 esp ring 0
  3340 00000008 14000000                			dd	0014h						;08 ss ring 0
  3341 0000000C 00070000                			dd	0700h						;0C esp ring 1
  3342 00000010 14000000                			dd	0014h						;10 es ring 1
  3343 00000014 00070000                			dd	0700h						;14 esp ring 2
  3344 00000018 14000000                			dd	0014h						;18 ss ring 2
  3345 0000001C 00000000                			dd	0						;1C cr ring 3
  3346 00000020 00000000                			dd	0						;20 eip
  3347 00000024 00020000                			dd	0200h						;24 eflags
  3348 00000028 00000000                			dd	0						;28 eax
  3349 0000002C 00000000                			dd	0						;2C ecx
  3350 00000030 00000000                			dd	0						;30 edx
  3351 00000034 00000000                			dd	0						;34 ebx
  3352 00000038 00070000                			dd	0700h						;38 esp ring 3
  3353 0000003C 00000000                			dd	0						;3C ebp
  3354 00000040 00000000                			dd	0						;40 esi
  3355 00000044 00000000                			dd	0						;44 edi
  3356 00000048 1C000000                			dd	001Ch						;48 es
  3357 0000004C 24000000                			dd	0024h						;4C cs
  3358 00000050 14000000                			dd	0014h						;50 ss ring 3
  3359 00000054 1C000000                			dd	001Ch						;54 ds
  3360 00000058 00000000                			dd	0						;58 fs
  3361 0000005C 00000000                			dd	0						;5c gs
  3362 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  3363 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3364                                  ;-----------------------------------------------------------------------------------------------------------------------
  3365                                  ;
  3366                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3367                                  ;
  3368                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3369                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3370                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3371                                  ;	event.
  3372                                  ;
  3373                                  ;-----------------------------------------------------------------------------------------------------------------------
  3374                                  section			conmque							;console message queue
  3375 00000000 08000000                			dd	8						;head pointer
  3376 00000004 08000000                			dd	8						;tail pointer
  3377 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  3378                                  ;-----------------------------------------------------------------------------------------------------------------------
  3379                                  ;
  3380                                  ;	Console Code								@disk: 008400	@mem: 005000
  3381                                  ;
  3382                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3383                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3384                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3385                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3386                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3387                                  ;	board input, echoing to the console screen and responding to user commands.
  3388                                  ;
  3389                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3390                                  ;
  3391                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3392                                  ;				|  Real Mode Interrupt Vectors			|
  3393                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3394                                  ;				|  Reserved BIOS Memory Area			|
  3395                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3396                                  ;				|  Shared Kernel Memory Area			|
  3397                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3398                                  ;				|  Global Descriptor Table (GDT)		|
  3399                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3400                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3401                                  ;			002000	+-----------------------------------------------+
  3402                                  ;				|  Interrupt Handlers				|
  3403                                  ;				|  Kernel Function Library			|
  3404                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3405                                  ;				|  Console Task Stack Area			|
  3406                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3407                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3408                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3409                                  ;				|  Console Task Task State Segment (TSS)	|
  3410                                  ;			004800	+-----------------------------------------------+
  3411                                  ;				|  Console Task Message Queue			|
  3412                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3413                                  ;				|  Console Task Code				|
  3414                                  ;				|  Console Task Constants			|
  3415                                  ;			006000	+===============================================+
  3416                                  ;
  3417                                  ;-----------------------------------------------------------------------------------------------------------------------
  3418                                  section			concode	vstart=5000h					;labels relative to 5000h
  3419 00000000 E874000000              ConCode			call	ConInitializeData				;initialize console variables
  3420                                  
  3421                                  			clearConsoleScreen					;clear the console screen
  3421 00000005 B002                <1>  mov al,eClearConsoleScreen
  3421 00000007 CD30                <1>  int _svc
  3422                                  			putConsoleString czTitle				;display startup message
  3422 00000009 BA[70050000]        <1>  mov edx,%1
  3422 0000000E B000                <1>  mov al,ePutConsoleString
  3422 00000010 CD30                <1>  int _svc
  3423                                  .10			putConsoleString czPrompt				;display input prompt
  3423                              <1> .10 :
  3423 00000012 BA[8E050000]        <1>  mov edx,%1
  3423 00000017 B000                <1>  mov al,ePutConsoleString
  3423 00000019 CD30                <1>  int _svc
  3424                                  			placeCursor						;set CRT cursor location
  3424 0000001B B003                <1>  mov al,ePlaceCursor
  3424 0000001D CD30                <1>  int _svc
  3425                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3425 0000001F BA34080000          <1>  mov edx,%1
  3425 00000024 B94F000000          <1>  mov ecx,%2
  3425 00000029 B701                <1>  mov bh,%3
  3425 0000002B B30D                <1>  mov bl,%4
  3425 0000002D B001                <1>  mov al,eGetConsoleString
  3425 0000002F CD30                <1>  int _svc
  3426                                  			putConsoleString czNewLine				;newline
  3426 00000031 BA[A6050000]        <1>  mov edx,%1
  3426 00000036 B000                <1>  mov al,ePutConsoleString
  3426 00000038 CD30                <1>  int _svc
  3427                                  
  3428 0000003A C6058408000000          			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3429 00000041 BA34080000              			mov	edx,wzConsoleInBuffer				;console input buffer
  3430 00000046 BB84080000              			mov	ebx,wzConsoleToken				;token buffer
  3431 0000004B E842000000              			call	ConTakeToken					;handle console input
  3432 00000050 BA84080000              			mov	edx,wzConsoleToken				;token buffer
  3433 00000055 E866000000              			call	ConDetermineCommand				;determine command number
  3434 0000005A 83F80D                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3435 0000005D 720B                    			jb	.20						;yes, branch
  3436                                  
  3437                                  			putConsoleString czUnknownCommand			;display error message
  3437 0000005F BA[94050000]        <1>  mov edx,%1
  3437 00000064 B000                <1>  mov al,ePutConsoleString
  3437 00000066 CD30                <1>  int _svc
  3438                                  
  3439 00000068 EBA8                    			jmp	.10						;next command
  3440 0000006A C1E002                  .20			shl	eax,2						;index into jump table
  3441 0000006D BA[E1040000]            			mov	edx,tConJmpTbl					;jump table base address
  3442 00000072 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  3443 00000075 FFD0                    			call	eax						;call command handler
  3444 00000077 EB99                    			jmp	.10						;next command
  3445                                  ;-----------------------------------------------------------------------------------------------------------------------
  3446                                  ;
  3447                                  ;	Routine:	ConInitializeData
  3448                                  ;
  3449                                  ;	Description:	This routine initializes console task variables.
  3450                                  ;
  3451                                  ;-----------------------------------------------------------------------------------------------------------------------
  3452 00000079 51                      ConInitializeData	push	ecx						;save non-volatile regs
  3453 0000007A 57                      			push	edi						;
  3454 0000007B 06                      			push	es						;
  3455 0000007C 6A18                    			push	ESELDAT						;load OS data selector ...
  3456 0000007E 07                      			pop	es						;... into extra segment register
  3457 0000007F BF00080000              			mov	edi,ECONDATA					;OS console data address
  3458 00000084 30C0                    			xor	al,al						;initialization value
  3459 00000086 B92C010000              			mov	ecx,ECONDATALEN					;size of OS console data
  3460 0000008B FC                      			cld							;forward strings
  3461 0000008C F3AA                    			rep	stosb						;initialize data
  3462 0000008E 07                      			pop	es						;restore non-volatile regs
  3463 0000008F 5F                      			pop	edi						;
  3464 00000090 59                      			pop	ecx						;
  3465 00000091 C3                      			ret							;return
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                  ;
  3468                                  ;	Routine:	ConTakeToken
  3469                                  ;
  3470                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3471                                  ;
  3472                                  ;	In:		DS:EDX	source buffer address
  3473                                  ;			DS:EBX	target buffer address
  3474                                  ;
  3475                                  ;	Out:		DS:EDX	source buffer address
  3476                                  ;			DS:EBX	target buffer address
  3477                                  ;
  3478                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3479                                  ;
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481 00000092 56                      ConTakeToken		push	esi						;save non-volatile regs
  3482 00000093 57                      			push	edi						;
  3483 00000094 89D6                    			mov	esi,edx						;source buffer address
  3484 00000096 89DF                    			mov	edi,ebx						;target buffer address
  3485 00000098 FC                      			cld							;forward strings
  3486 00000099 AC                      .10			lodsb							;load byte
  3487 0000009A 3C20                    			cmp	al,EASCIISPACE					;space?
  3488 0000009C 74FB                    			je	.10						;yes, continue
  3489 0000009E 84C0                    			test	al,al						;end of line?
  3490 000000A0 7410                    			jz	.40						;yes, branch
  3491 000000A2 AA                      .20			stosb							;store byte
  3492 000000A3 AC                      			lodsb							;load byte
  3493 000000A4 84C0                    			test	al,al						;end of line?
  3494 000000A6 740A                    			jz	.40						;no, continue
  3495 000000A8 3C20                    			cmp	al,EASCIISPACE					;space?
  3496 000000AA 75F6                    			jne	.20						;no, continue
  3497 000000AC AC                      .30			lodsb							;load byte
  3498 000000AD 3C20                    			cmp	al,EASCIISPACE					;space?
  3499 000000AF 74FB                    			je	.30						;yes, continue
  3500 000000B1 4E                      			dec	esi						;pre-position
  3501 000000B2 C60700                  .40			mov	byte [edi],0					;terminate buffer
  3502 000000B5 89D7                    			mov	edi,edx						;source buffer address
  3503 000000B7 AC                      .50			lodsb							;remaining byte
  3504 000000B8 AA                      			stosb							;move to front of buffer
  3505 000000B9 84C0                    			test	al,al						;end of line?
  3506 000000BB 75FA                    			jnz	.50						;no, continue
  3507 000000BD 5F                      			pop	edi						;restore non-volatile regs
  3508 000000BE 5E                      			pop	esi						;
  3509 000000BF C3                      			ret							;return
  3510                                  ;-----------------------------------------------------------------------------------------------------------------------
  3511                                  ;
  3512                                  ;	Routine:	ConDetermineCommand
  3513                                  ;
  3514                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3515                                  ;
  3516                                  ;	input:		DS:EDX	command address
  3517                                  ;
  3518                                  ;	output:		EAX	>=0	= command nbr
  3519                                  ;				0	= unknown command
  3520                                  ;
  3521                                  ;-----------------------------------------------------------------------------------------------------------------------
  3522 000000C0 53                      ConDetermineCommand	push	ebx						;save non-volatile regs
  3523 000000C1 56                      			push	esi						;
  3524 000000C2 57                      			push	edi						;
  3525                                  
  3526                                  			upperCaseString						;upper-case string at EDX
  3526 000000C3 B004                <1>  mov al,eUpperCaseString
  3526 000000C5 CD30                <1>  int _svc
  3527                                  
  3528 000000C7 BE[15050000]            			mov	esi,tConCmdTbl					;commands table
  3529 000000CC 31FF                    			xor	edi,edi						;intialize command number
  3530 000000CE FC                      			cld							;forward strings
  3531 000000CF AC                      .10			lodsb							;command length
  3532 000000D0 0FB6C8                  			movzx	ecx,al						;command length
  3533 000000D3 E30D                    			jecxz	.20						;branch if end of table
  3534 000000D5 89F3                    			mov	ebx,esi						;table entry address
  3535 000000D7 01CE                    			add	esi,ecx						;next table entry address
  3536                                  
  3537                                  			compareMemory						;compare byte arrays at EDX, EBX
  3537 000000D9 B005                <1>  mov al,eCompareMemory
  3537 000000DB CD30                <1>  int _svc
  3538                                  
  3539 000000DD E303                    			jecxz	.20						;branch if equal
  3540 000000DF 47                      			inc	edi						;increment command nbr
  3541 000000E0 EBED                    			jmp	.10						;repeat
  3542 000000E2 89F8                    .20			mov	eax,edi						;command number
  3543 000000E4 5F                      			pop	edi						;restore non-volatile regs
  3544 000000E5 5E                      			pop	esi						;
  3545 000000E6 5B                      			pop	ebx						;
  3546 000000E7 C3                      			ret							;return
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  ;
  3549                                  ;	Routine:	ConClear
  3550                                  ;
  3551                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3552                                  ;
  3553                                  ;-----------------------------------------------------------------------------------------------------------------------
  3554                                  ConClear		clearConsoleScreen					;clear console screen
  3554                              <1> ConClear :
  3554 000000E8 B002                <1>  mov al,eClearConsoleScreen
  3554 000000EA CD30                <1>  int _svc
  3555 000000EC C3                      			ret							;return
  3556                                  ;-----------------------------------------------------------------------------------------------------------------------
  3557                                  ;
  3558                                  ;	Routine:	ConDate
  3559                                  ;
  3560                                  ;	Description:	This routine handles the DATE command.
  3561                                  ;
  3562                                  ;-----------------------------------------------------------------------------------------------------------------------
  3563                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3563                              <1> ConDate :
  3563 000000ED BB24090000          <1>  mov ebx,%1
  3563 000000F2 B009                <1>  mov al,eReadRealTimeClock
  3563 000000F4 CD30                <1>  int _svc
  3564                                  			putDateString	  wsConsoleDateTime, wzConsoleOutBuffer	;format date string
  3564 000000F6 BB24090000          <1>  mov ebx,%1
  3564 000000FB BAD4080000          <1>  mov edx,%2
  3564 00000100 B007                <1>  mov al,ePutDateString
  3564 00000102 CD30                <1>  int _svc
  3565                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3565 00000104 BAD4080000          <1>  mov edx,%1
  3565 00000109 B000                <1>  mov al,ePutConsoleString
  3565 0000010B CD30                <1>  int _svc
  3566                                  			putConsoleString  czNewLine				;write newline to console
  3566 0000010D BA[A6050000]        <1>  mov edx,%1
  3566 00000112 B000                <1>  mov al,ePutConsoleString
  3566 00000114 CD30                <1>  int _svc
  3567 00000116 C3                      			ret							;return
  3568                                  ;-----------------------------------------------------------------------------------------------------------------------
  3569                                  ;
  3570                                  ;	Routine:	ConExit
  3571                                  ;
  3572                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3573                                  ;
  3574                                  ;-----------------------------------------------------------------------------------------------------------------------
  3575                                  ConExit			resetSystem						;issue system reset
  3575                              <1> ConExit :
  3575 00000117 B006                <1>  mov al,eResetSystem
  3575 00000119 CD30                <1>  int _svc
  3576 0000011B C3                      			ret							;return
  3577                                  ;-----------------------------------------------------------------------------------------------------------------------
  3578                                  ;
  3579                                  ;	Routine:	ConMem
  3580                                  ;
  3581                                  ;	Description:	This routine handles the MEMORY command and its MEM alias.
  3582                                  ;
  3583                                  ;	Input:		wzConsoleInBuffer contains parameter(s)
  3584                                  ;
  3585                                  ;-----------------------------------------------------------------------------------------------------------------------
  3586 0000011C 53                      ConMem			push	ebx						;save non-volatile regs
  3587 0000011D 56                      			push	esi						;
  3588 0000011E 57                      			push	edi						;
  3589                                  ;
  3590                                  ;			update the source address if a parameter is given
  3591                                  ;
  3592 0000011F BA34080000              			mov	edx,wzConsoleInBuffer				;console input buffer address (params)
  3593 00000124 BB84080000              			mov	ebx,wzConsoleToken				;console command token address
  3594 00000129 E864FFFFFF              			call	ConTakeToken					;take first param as token
  3595 0000012E 803D8408000000          			cmp	byte [wzConsoleToken],0				;token found?
  3596 00000135 740E                    			je	.10						;no, branch
  3597 00000137 BA84080000              			mov	edx,wzConsoleToken				;first param as token address
  3598                                  
  3599                                  			hexadecimalToUnsigned					;convert string token to unsigned
  3599 0000013C B00D                <1>  mov al,eHexadecimalToUnsigned
  3599 0000013E CD30                <1>  int _svc
  3600                                  
  3601 00000140 A300080000              			mov	[wfConsoleMemAddr],eax				;save console memory address
  3602                                  ;
  3603                                  ;			setup source address and row count
  3604                                  ;
  3605 00000145 8B3500080000            .10			mov	esi,[wfConsoleMemAddr]				;source memory address
  3606 0000014B 31C9                    			xor	ecx,ecx						;zero register
  3607 0000014D B110                    			mov	cl,16						;row count
  3608                                  ;
  3609                                  ;			start the row with the source address in hexadecimal
  3610                                  ;
  3611 0000014F 51                      .20			push	ecx						;save remaining rows
  3612 00000150 BFD4080000              			mov	edi,wzConsoleOutBuffer				;output buffer address
  3613 00000155 89FA                    			mov	edx,edi						;output buffer address
  3614 00000157 89F1                    			mov	ecx,esi						;console memory address
  3615                                  
  3616                                  			unsignedToHexadecimal					;convert unsigned address to hex string
  3616 00000159 B00C                <1>  mov al,eUnsignedToHexadecimal
  3616 0000015B CD30                <1>  int _svc
  3617                                  
  3618 0000015D 83C708                  			add	edi,8						;end of memory addr hexnum
  3619 00000160 B020                    			mov	al,' '						;ascii space
  3620 00000162 AA                      			stosb							;store delimiter
  3621                                  ;
  3622                                  ;			output 16 ASCII hexadecimal byte values for the row
  3623                                  ;
  3624 00000163 31C9                    			xor	ecx,ecx						;zero register
  3625 00000165 B110                    			mov	cl,16						;loop count
  3626 00000167 51                      .30			push	ecx						;save loop count
  3627 00000168 AC                      			lodsb							;memory byte
  3628 00000169 88C4                    			mov	ah,al						;memory byte
  3629 0000016B C0E804                  			shr	al,4						;high-order in bits 3-0
  3630 0000016E 0C30                    			or	al,30h						;apply ascii numeric zone
  3631 00000170 3C3A                    			cmp	al,3ah						;numeric range?
  3632 00000172 7202                    			jb	.40						;yes, skip ahead
  3633 00000174 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  3634 00000176 AA                      .40			stosb							;store ascii hexadecimal of high-order
  3635 00000177 88E0                    			mov	al,ah						;low-order in bits 3-0
  3636 00000179 240F                    			and	al,0fh						;mask out high-order bits
  3637 0000017B 0C30                    			or	al,30h						;apply ascii numeric zone
  3638 0000017D 3C3A                    			cmp	al,3ah						;numeric range?
  3639 0000017F 7202                    			jb	.50						;yes, skip ahead
  3640 00000181 0407                    			add	al,7						;adjust ascii for 'A'-'F'
  3641 00000183 AA                      .50			stosb							;store ascii hexadecimal of low-order
  3642 00000184 B020                    			mov	al,' '						;ascii space
  3643 00000186 AA                      			stosb							;store ascii space delimiter
  3644 00000187 59                      			pop	ecx						;loop count
  3645 00000188 E2DD                    			loop	.30						;next
  3646                                  ;
  3647                                  ;			output printable ASCII character section for the row
  3648                                  ;
  3649 0000018A 83EE10                  			sub	esi,16						;reset source pointer
  3650 0000018D B110                    			mov	cl,16						;loop count
  3651 0000018F AC                      .60			lodsb							;source byte
  3652 00000190 3C20                    			cmp	al,32						;printable? (low-range test)
  3653 00000192 7204                    			jb	.70						;no, skip ahead
  3654 00000194 3C80                    			cmp	al,128						;printable? (high-range test)
  3655 00000196 7202                    			jb	.80						;yes, skip ahead
  3656 00000198 B020                    .70			mov	al,' '						;display space instead of printable
  3657 0000019A AA                      .80			stosb							;store printable ascii byte
  3658 0000019B E2F2                    			loop	.60						;next source byte
  3659 0000019D 30C0                    			xor	al,al						;nul-terminator
  3660 0000019F AA                      			stosb							;terminate output line
  3661                                  ;
  3662                                  ;			display constructed output buffer and newline
  3663                                  ;
  3664                                  			putConsoleString wzConsoleOutBuffer			;display constructed output
  3664 000001A0 BAD4080000          <1>  mov edx,%1
  3664 000001A5 B000                <1>  mov al,ePutConsoleString
  3664 000001A7 CD30                <1>  int _svc
  3665                                  			putConsoleString czNewLine				;display new line
  3665 000001A9 BA[A6050000]        <1>  mov edx,%1
  3665 000001AE B000                <1>  mov al,ePutConsoleString
  3665 000001B0 CD30                <1>  int _svc
  3666                                  ;
  3667                                  ;			repeat until all lines displayed and preserve source address
  3668                                  ;
  3669 000001B2 59                      			pop	ecx						;remaining rows
  3670 000001B3 E29A                    			loop	.20						;next row
  3671 000001B5 893500080000            			mov	[wfConsoleMemAddr],esi				;update console memory address
  3672 000001BB 5F                      			pop	edi						;restore regs
  3673 000001BC 5E                      			pop	esi						;
  3674 000001BD 5B                      			pop	ebx						;
  3675 000001BE C3                      			ret							;return
  3676                                  ;-----------------------------------------------------------------------------------------------------------------------
  3677                                  ;
  3678                                  ;	Routine:	ConPCIProbe
  3679                                  ;
  3680                                  ;	Description:	This routine handles the PCIProbe command.
  3681                                  ;
  3682                                  ;-----------------------------------------------------------------------------------------------------------------------
  3683 000001BF 53                      ConPCIProbe		push	ebx						;save non-volatile regs
  3684                                  ;
  3685                                  ;			initialize variables
  3686                                  ;
  3687 000001C0 30C0                    			xor	al,al						;zero register
  3688 000001C2 A230080000              			mov	[wbConsolePCIBus],al				;initialize bus
  3689 000001C7 A231080000              			mov	[wbConsolePCIDevice],al				;initialize device
  3690 000001CC A232080000              			mov	[wbConsolePCIFunction],al			;initialize function
  3691                                  ;
  3692                                  ;			output starting message to console
  3693                                  ;
  3694                                  			;putConsoleString czProbingPCI				;probing PCI message
  3695                                  ;
  3696                                  ;			construct PCI selector
  3697                                  ;
  3698 000001D1 8A2530080000            .10			mov	ah,[wbConsolePCIBus]				;AH = bbbb bbbb
  3699 000001D7 8A1531080000            			mov	dl,[wbConsolePCIDevice]				;DL = ???d dddd
  3700 000001DD C0E203                  			shl	dl,3						;DL = dddd d000
  3701 000001E0 A032080000              			mov	al,[wbConsolePCIFunction]			;AL = ???? ?fff
  3702 000001E5 2407                    			and	al,007h						;AL = 0000 0fff
  3703 000001E7 08D0                    			or	al,dl						;AL = dddd dfff
  3704 000001E9 0FB7C0                  			movzx	eax,ax						;0000 0000 0000 0000 bbbb bbbb dddd dfff
  3705 000001EC C1E008                  			shl	eax,8						;0000 0000 bbbb bbbb dddd dfff 0000 0000
  3706 000001EF 0D00000080              			or	eax,80000000h					;1000 0000 bbbb bbbb dddd dfff 0000 0000
  3707 000001F4 A304080000              			mov	[wfConsolePCISelector],eax			;save selector
  3708                                  ;
  3709                                  ;			read PCI data register
  3710                                  ;
  3711 000001F9 66BAF80C                			mov	dx,0cf8h					;register port
  3712 000001FD EF                      			out	dx,eax						;select device
  3713 000001FE 66BAFC0C                			mov	dx,0cfch					;data port
  3714 00000202 ED                      			in	eax,dx						;read register data
  3715 00000203 A308080000              			mov	[wfConsolePCIData],eax				;save data
  3716                                  ;
  3717                                  ;			interpret PCI data value and display finding
  3718                                  ;
  3719 00000208 83F8FF                  			cmp	eax,0ffffffffh					;not defined?
  3720 0000020B 7447                    			je	.20						;yes, branch
  3721 0000020D BA84080000              			mov	edx,wzConsoleToken				;output buffer
  3722 00000212 E83D010000              			call	ConBuildPCIIdent				;build PCI bus, device, function ident
  3723                                  
  3724                                  			putConsoleString wzConsoleToken				;display bus as decimal
  3724 00000217 BA84080000          <1>  mov edx,%1
  3724 0000021C B000                <1>  mov al,ePutConsoleString
  3724 0000021E CD30                <1>  int _svc
  3725                                  
  3726 00000220 E873010000              			call	ConInterpretPCIData				;update flags based on data
  3727                                  
  3728                                  			putConsoleString czSpace
  3728 00000225 BA[92050000]        <1>  mov edx,%1
  3728 0000022A B000                <1>  mov al,ePutConsoleString
  3728 0000022C CD30                <1>  int _svc
  3729                                  			putConsoleString [wfConsolePCIVendorStr]
  3729 0000022E 8B150C080000        <1>  mov edx,%1
  3729 00000234 B000                <1>  mov al,ePutConsoleString
  3729 00000236 CD30                <1>  int _svc
  3730                                  			putConsoleString czSpace
  3730 00000238 BA[92050000]        <1>  mov edx,%1
  3730 0000023D B000                <1>  mov al,ePutConsoleString
  3730 0000023F CD30                <1>  int _svc
  3731                                  			putConsoleString [wfConsolePCIChipStr]
  3731 00000241 8B1510080000        <1>  mov edx,%1
  3731 00000247 B000                <1>  mov al,ePutConsoleString
  3731 00000249 CD30                <1>  int _svc
  3732                                  			putConsoleString czNewLine				;display new line
  3732 0000024B BA[A6050000]        <1>  mov edx,%1
  3732 00000250 B000                <1>  mov al,ePutConsoleString
  3732 00000252 CD30                <1>  int _svc
  3733                                  ;
  3734                                  ;			step to next function, device, bus
  3735                                  ;
  3736 00000254 FE0532080000            .20			inc	byte [wbConsolePCIFunction]			;next function
  3737 0000025A 803D3208000008          			cmp	byte [wbConsolePCIFunction],8			;at limit?
  3738 00000261 0F826AFFFFFF            			jb	.10						;no, continue
  3739 00000267 C6053208000000          			mov	byte [wbConsolePCIFunction],0			;zero function
  3740 0000026E FE0531080000            			inc	byte [wbConsolePCIDevice]			;next device
  3741 00000274 803D3108000020          			cmp	byte [wbConsolePCIDevice],32			;at limit?
  3742 0000027B 0F8250FFFFFF            			jb	.10						;no, continue
  3743 00000281 C6053108000000          			mov	byte [wbConsolePCIDevice],0			;zero device
  3744 00000288 FE0530080000            			inc	byte [wbConsolePCIBus]				;next bus
  3745 0000028E 803D3008000000          			cmp	byte [wbConsolePCIBus],0			;at limit?
  3746 00000295 0F8236FFFFFF            			jb	.10						;no, continue
  3747                                  
  3748 0000029B E9B2000000              			jmp	.30
  3749                                  
  3750                                  ;
  3751                                  ;			report if ethernet adapter found
  3752                                  ;
  3753 000002A0 F6053308000080          			test	byte [wbConsoleHWFlags],EHWETHERNET		;ethernet h/w switch set?
  3754 000002A7 0F84A5000000            			jz	.30						;branch if no
  3755                                  
  3756                                  			putConsoleString czEthernetAdapterFound			;report adapter found
  3756 000002AD BA[C3060000]        <1>  mov edx,%1
  3756 000002B2 B000                <1>  mov al,ePutConsoleString
  3756 000002B4 CD30                <1>  int _svc
  3757                                  ;
  3758                                  ;			read base address register 0 at offset 10h
  3759                                  ;
  3760 000002B6 A114080000              			mov	eax,[wfConsoleEthernetDevice]			;adapter PCI selector
  3761 000002BB 83C810                  			or	eax,10h						;set function bits
  3762 000002BE 66BAF80C                			mov	dx,0cf8h					;register port
  3763 000002C2 EF                      			out	dx,eax						;select register
  3764 000002C3 66BAFC0C                			mov	dx,0cfch					;data port
  3765 000002C7 ED                      			in	eax,dx						;register data
  3766 000002C8 A318080000              			mov	[wfConsoleEthernetMem],eax			;save ethernet memory mapped i/o addr
  3767                                  ;
  3768                                  ;			report base address register 0 value
  3769                                  ;
  3770 000002CD 89C1                    			mov	ecx,eax						;unsigned integer param
  3771 000002CF BA84080000              			mov	edx,wzConsoleToken				;target buffer address
  3772                                  
  3773                                  			unsignedToHexadecimal					;convert unsigned to ASCII hex string
  3773 000002D4 B00C                <1>  mov al,eUnsignedToHexadecimal
  3773 000002D6 CD30                <1>  int _svc
  3774                                  			putConsoleString wzConsoleToken				;output string to console
  3774 000002D8 BA84080000          <1>  mov edx,%1
  3774 000002DD B000                <1>  mov al,ePutConsoleString
  3774 000002DF CD30                <1>  int _svc
  3775                                  			putConsoleString czNewLine				;output newline to console
  3775 000002E1 BA[A6050000]        <1>  mov edx,%1
  3775 000002E6 B000                <1>  mov al,ePutConsoleString
  3775 000002E8 CD30                <1>  int _svc
  3776                                  ;
  3777                                  ;			read base address register 2 at offset 18h
  3778                                  ;
  3779 000002EA A114080000              			mov	eax,[wfConsoleEthernetDevice]			;adapter PCI selector
  3780 000002EF 83C818                  			or	eax,18h						;set function bits
  3781 000002F2 66BAF80C                			mov	dx,0cf8h					;register port
  3782 000002F6 EF                      			out	dx,eax						;select register
  3783 000002F7 66BAFC0C                			mov	dx,0cfch					;data port
  3784 000002FB ED                      			in	eax,dx						;register data
  3785 000002FC 24FE                    			and	al,0feh						;clear bit zero
  3786 000002FE A31C080000              			mov	[wfConsoleEthernetPort],eax			;save ethernet i/o port
  3787                                  ;
  3788                                  ;			report base address register 2 value
  3789                                  ;
  3790 00000303 89C1                    			mov	ecx,eax						;unsigned integer param
  3791 00000305 BA84080000              			mov	edx,wzConsoleToken				;target buffer address
  3792                                  
  3793                                  			unsignedToHexadecimal					;convert unsigned to ASCII hex string
  3793 0000030A B00C                <1>  mov al,eUnsignedToHexadecimal
  3793 0000030C CD30                <1>  int _svc
  3794                                  			putConsoleString wzConsoleToken				;output string to console
  3794 0000030E BA84080000          <1>  mov edx,%1
  3794 00000313 B000                <1>  mov al,ePutConsoleString
  3794 00000315 CD30                <1>  int _svc
  3795                                  			putConsoleString czNewLine				;output newline to console
  3795 00000317 BA[A6050000]        <1>  mov edx,%1
  3795 0000031C B000                <1>  mov al,ePutConsoleString
  3795 0000031E CD30                <1>  int _svc
  3796                                  ;
  3797                                  ;			read ethernet control register using port i/o
  3798                                  ;
  3799 00000320 A11C080000              			mov	eax,[wfConsoleEthernetPort]			;ethernet i/o port
  3800 00000325 6689C2                  			mov	dx,ax						;ethernet i/o port
  3801 00000328 31C0                    			xor	eax,eax						;control register (zero)
  3802 0000032A EF                      			out	dx,eax						;select register
  3803 0000032B 6683C204                			add	dx,4						;data register
  3804 0000032F ED                      			in	eax,dx						;read register data
  3805 00000330 A320080000              			mov	[wfConsoleEthernetCtrl],eax			;save ethernet control register value
  3806                                  ;
  3807                                  ;			report adapter control register value
  3808                                  ;
  3809 00000335 89C1                    			mov	ecx,eax						;unsigned integer param
  3810 00000337 BA84080000              			mov	edx,wzConsoleToken				;target buffer address
  3811                                  
  3812                                  			unsignedToHexadecimal					;convert unsigned to ASCII hex string
  3812 0000033C B00C                <1>  mov al,eUnsignedToHexadecimal
  3812 0000033E CD30                <1>  int _svc
  3813                                  			putConsoleString wzConsoleToken				;output string to console
  3813 00000340 BA84080000          <1>  mov edx,%1
  3813 00000345 B000                <1>  mov al,ePutConsoleString
  3813 00000347 CD30                <1>  int _svc
  3814                                  			putConsoleString czNewLine				;output newline to console
  3814 00000349 BA[A6050000]        <1>  mov edx,%1
  3814 0000034E B000                <1>  mov al,ePutConsoleString
  3814 00000350 CD30                <1>  int _svc
  3815                                  
  3816 00000352 5B                      .30			pop	ebx						;restore non-volatile regs
  3817 00000353 C3                      			ret							;return
  3818                                  ;-----------------------------------------------------------------------------------------------------------------------
  3819 00000354 57                      ConBuildPCIIdent	push	edi
  3820 00000355 89D7                    			mov	edi,edx
  3821 00000357 A030080000              			mov	al,[wbConsolePCIBus]
  3822 0000035C 30E4                    			xor	ah,ah
  3823 0000035E B164                    			mov	cl,100
  3824 00000360 F6F1                    			div	cl
  3825 00000362 0C30                    			or	al,30h
  3826 00000364 FC                      			cld
  3827 00000365 AA                      			stosb
  3828 00000366 88E0                    			mov	al,ah
  3829 00000368 30E4                    			xor	ah,ah
  3830 0000036A B10A                    			mov	cl,10
  3831 0000036C F6F1                    			div	cl
  3832 0000036E 660D3030                			or	ax,3030h
  3833 00000372 66AB                    			stosw
  3834 00000374 B02E                    			mov	al,EASCIIPERIOD
  3835 00000376 AA                      			stosb
  3836 00000377 A031080000              			mov	al,[wbConsolePCIDevice]
  3837 0000037C 30E4                    			xor	ah,ah
  3838 0000037E B10A                    			mov	cl,10
  3839 00000380 F6F1                    			div	cl
  3840 00000382 660D3030                			or	ax,3030h
  3841 00000386 66AB                    			stosw
  3842 00000388 B02E                    			mov	al,EASCIIPERIOD
  3843 0000038A AA                      			stosb
  3844 0000038B A032080000              			mov	al,[wbConsolePCIFunction]
  3845 00000390 0C30                    			or	al,30h
  3846 00000392 AA                      			stosb
  3847 00000393 30C0                    			xor	al,al
  3848 00000395 AA                      			stosb
  3849 00000396 5F                      			pop	edi
  3850 00000397 C3                      			ret							;return
  3851                                  ;-----------------------------------------------------------------------------------------------------------------------
  3852                                  ;
  3853                                  ;	Routine:	ConInterpretPCIData
  3854                                  ;
  3855                                  ;	Description:	This routine interprets the PCI vendor and device IDs.
  3856                                  ;
  3857                                  ;-----------------------------------------------------------------------------------------------------------------------
  3858 00000398 B8[C3050000]            ConInterpretPCIData	mov	eax,czApple
  3859 0000039D 66813D080800006B10      			cmp	word [wwConsolePCIVendor],EPCIVENDORAPPLE	;Apple?
  3860 000003A6 751D                    			jne	.10						;no, branch
  3861 000003A8 BA[DC050000]            			mov	edx,czUSBController
  3862 000003AD 66833D0A0800003F        			cmp	word [wwConsolePCIChip],EPCIAPPLEUSB		;USB?
  3863 000003B5 0F84CA000000            			je	.80						;yes, branch
  3864 000003BB BA[D6050000]            			mov	edx,czOther					;other
  3865 000003C0 E9C0000000              			jmp	.80						;continue
  3866 000003C5 B8[C9050000]            .10			mov	eax,czIntel					;Intel
  3867 000003CA 66813D080800008680      			cmp	word [wwConsolePCIVendor],EPCIVENDORINTEL	;Intel?
  3868 000003D3 756F                    			jne	.20						;no, branch
  3869 000003D5 BA[EB050000]            			mov	edx,czPro1000MT					;Pro/1000 MT
  3870 000003DA 66813D0A0800000F10      			cmp	word [wwConsolePCIChip],EPCIINTELPRO1000MT	;Pro/1000 MT?
  3871 000003E3 0F849C000000            			je	.80						;yes, branch
  3872 000003E9 BA[08060000]            			mov	edx,czPCIAndMem					;PCI and Memory
  3873 000003EE 66813D0A0800003712      			cmp	word [wwConsolePCIChip],EPCIINTELPCIMEM		;PCI and Memory?
  3874 000003F7 0F8488000000            			je	.80						;yes, branch
  3875 000003FD BA[15060000]            			mov	edx,czAurealAD1881				;Aureal 1881 SOUNDMAX
  3876 00000402 66813D0A0800001524      			cmp	word [wwConsolePCIChip],EPCIINTELAD1881		;Aureal 1881 SOUNDMAX?
  3877 0000040B 7478                    			je	.80						;yes, branch
  3878 0000040D BA[2C060000]            			mov	edx,czPIIX3PCItoIDEBridge			;PIIX3 PCI-to-IDE Bridge
  3879 00000412 66813D0A0800000070      			cmp	word [wwConsolePCIChip],EPCIINTELPIIX3		;PIIX3 PCI-to-IDE Bridge?
  3880 0000041B 7468                    			je	.80						;yes, branch
  3881 0000041D BA[44060000]            			mov	edx,cz82371ABBusMaster				;82371AB Bus Master
  3882 00000422 66813D0A0800001171      			cmp	word [wwConsolePCIChip],EPCIINTEL82371AB	;82371AB Bus Master?
  3883 0000042B 7458                    			je	.80						;yes, branch
  3884 0000042D BA[6D060000]            			mov	edx,czPIIX4PowerMgmt				;PIIX4/4E/4M Power Mgmt Controller
  3885 00000432 66813D0A0800001371      			cmp	word [wwConsolePCIChip],EPCIINTELPIIX4		;PIIX4/4E/4M Power Mgmt Controller?
  3886 0000043B 7448                    			je	.80						;yes, branch
  3887 0000043D BA[D6050000]            			mov	edx,czOther					;other
  3888 00000442 EB41                    			jmp	.80						;continue
  3889 00000444 B8[CF050000]            .20			mov	eax,czOracle					;Oracle
  3890 00000449 66813D08080000EE80      			cmp	word [wwConsolePCIVendor],EPCIVENDORORACLE	;Oracle?
  3891 00000452 7527                    			jne	.30						;no, branch
  3892 00000454 BA[95060000]            			mov	edx,czVirtualBoxGA				;VirtulaBox Graphics Adapter
  3893 00000459 66813D0A080000EFBE      			cmp	word [wwConsolePCIChip],EPCIORACLEVBOXGA	;VirtualBox Graphics Adapter?
  3894 00000462 7421                    			je	.80						;yes, branch
  3895 00000464 BA[B1060000]            			mov	edx,czVirtualBoxDevice				;VirtualBox Device
  3896 00000469 66813D0A080000FECA      			cmp	word [wwConsolePCIChip],EPCIORACLEVBOXDEVICE	;VirtualBox Device?
  3897 00000472 7411                    			je	.80						;yes, branch
  3898 00000474 BA[D6050000]            			mov	edx,czOther					;other
  3899 00000479 EB0A                    			jmp	.80						;continue
  3900 0000047B B8[D6050000]            .30			mov	eax,czOther					;other
  3901 00000480 BA[D6050000]            			mov	edx,czOther					;other
  3902 00000485 A30C080000              .80			mov	[wfConsolePCIVendorStr],eax			;save vendor string
  3903 0000048A 891510080000            			mov	[wfConsolePCIChipStr],edx			;save chip string
  3904 00000490 66813D0A0800000F10      			cmp	word [wwConsolePCIChip],EPCIINTELPRO1000MT	;Pro/1000 MT Ethernet Adapter
  3905 00000499 7511                    			jne	.90						;no, branch
  3906 0000049B 800D3308000080          			or	byte [wbConsoleHWFlags],EHWETHERNET		;ethernet adapter found
  3907 000004A2 A104080000              			mov	eax,[wfConsolePCISelector]			;PCI selector
  3908 000004A7 A314080000              			mov	[wfConsoleEthernetDevice],eax			;save as ethernet device selector
  3909 000004AC C3                      .90			ret							;return
  3910                                  ;-----------------------------------------------------------------------------------------------------------------------
  3911                                  ;
  3912                                  ;	Routine:	ConTime
  3913                                  ;
  3914                                  ;	Description:	This routine Handles the TIME command.
  3915                                  ;
  3916                                  ;-----------------------------------------------------------------------------------------------------------------------
  3917                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3917                              <1> ConTime :
  3917 000004AD BB24090000          <1>  mov ebx,%1
  3917 000004B2 B009                <1>  mov al,eReadRealTimeClock
  3917 000004B4 CD30                <1>  int _svc
  3918                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  3918 000004B6 BB24090000          <1>  mov ebx,%1
  3918 000004BB BAD4080000          <1>  mov edx,%2
  3918 000004C0 B008                <1>  mov al,ePutTimeString
  3918 000004C2 CD30                <1>  int _svc
  3919                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3919 000004C4 BAD4080000          <1>  mov edx,%1
  3919 000004C9 B000                <1>  mov al,ePutConsoleString
  3919 000004CB CD30                <1>  int _svc
  3920                                  			putConsoleString  czNewLine				;write newline to console
  3920 000004CD BA[A6050000]        <1>  mov edx,%1
  3920 000004D2 B000                <1>  mov al,ePutConsoleString
  3920 000004D4 CD30                <1>  int _svc
  3921 000004D6 C3                      			ret							;return
  3922                                  ;-----------------------------------------------------------------------------------------------------------------------
  3923                                  ;
  3924                                  ;	Routine:	ConVersion
  3925                                  ;
  3926                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3927                                  ;
  3928                                  ;-----------------------------------------------------------------------------------------------------------------------
  3929                                  ConVersion		putConsoleString czTitle				;display version message
  3929                              <1> ConVersion :
  3929 000004D7 BA[70050000]        <1>  mov edx,%1
  3929 000004DC B000                <1>  mov al,ePutConsoleString
  3929 000004DE CD30                <1>  int _svc
  3930 000004E0 C3                      			ret							;return
  3931                                  ;-----------------------------------------------------------------------------------------------------------------------
  3932                                  ;
  3933                                  ;	Tables
  3934                                  ;
  3935                                  ;-----------------------------------------------------------------------------------------------------------------------
  3936                                  										;---------------------------------------
  3937                                  										;  Command Jump Table
  3938                                  										;---------------------------------------
  3939                                  tConJmpTbl		equ	$						;command jump table
  3940 000004E1 BF010000                			dd	ConPCIProbe	- ConCode			;pciprobe command routine offset
  3941 000004E5 17010000                			dd	ConExit		- ConCode			;shutdown command routine offset
  3942 000004E9 D7040000                			dd	ConVersion	- ConCode			;version command routine offset
  3943 000004ED 1C010000                			dd	ConMem		- ConCode			;memory command routine offset
  3944 000004F1 E8000000                			dd	ConClear	- ConCode			;clear command routine offset
  3945 000004F5 BF010000                			dd	ConPCIProbe	- ConCode			;lspci command routine offset
  3946 000004F9 ED000000                			dd	ConDate		- ConCode			;date command routine offset
  3947 000004FD 17010000                			dd	ConExit		- ConCode			;exit command routine offset
  3948 00000501 17010000                			dd	ConExit		- ConCode			;quit command routine offset
  3949 00000505 AD040000                			dd	ConTime		- ConCode			;time command routine offset
  3950 00000509 E8000000                			dd	ConClear	- ConCode			;cls command routine offset
  3951 0000050D 1C010000                			dd	ConMem		- ConCode			;mem command routine offset
  3952 00000511 D7040000                			dd	ConVersion	- ConCode			;ver command routine offset
  3953                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3954                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3955                                  										;---------------------------------------
  3956                                  										;  Command Name Table
  3957                                  										;---------------------------------------
  3958                                  tConCmdTbl		equ	$						;command name table
  3959 00000515 0950434950524F4245-     			db	9,"PCIPROBE",0					;pciprobe command
  3959 0000051E 00                 
  3960 0000051F 0953485554444F574E-     			db	9,"SHUTDOWN",0					;shutdown command
  3960 00000528 00                 
  3961 00000529 0856455253494F4E00      			db	8,"VERSION",0					;version command
  3962 00000532 074D454D4F525900        			db	7,"MEMORY",0					;memory command
  3963 0000053A 06434C45415200          			db	6,"CLEAR",0					;clear command
  3964 00000541 064C5350434900          			db	6,"LSPCI",0					;lspci command (pciprobe alias)
  3965 00000548 054441544500            			db	5,"DATE",0					;date command
  3966 0000054E 054558495400            			db	5,"EXIT",0					;exit command
  3967 00000554 055155495400            			db	5,"QUIT",0					;quit command
  3968 0000055A 0554494D4500            			db	5,"TIME",0					;time command
  3969 00000560 04434C5300              			db	4,"CLS",0					;cls command
  3970 00000565 044D454D00              			db	4,"MEM",0					;mem command
  3971 0000056A 0456455200              			db	4,"VER",0					;ver command
  3972 0000056F 00                      			db	0						;end of table
  3973                                  ;-----------------------------------------------------------------------------------------------------------------------
  3974                                  ;
  3975                                  ;	Constants
  3976                                  ;
  3977                                  ;-----------------------------------------------------------------------------------------------------------------------
  3978 00000570 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3978 00000579 65726174696E672053-
  3978 00000582 797374656D20312E30-
  3978 0000058B 0D0A00             
  3979 0000058E 3A00                    czPrompt		db	":",0						;prompt string
  3980 00000590 2E00                    czPeriod		db	".",0						;period delimiter
  3981 00000592 2000                    czSpace			db	" ",0
  3982 00000594 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3982 0000059D 6F6D6D616E640D0A00 
  3983 000005A6 0D0A00                  czNewLine		db	13,10,0						;new line string
  3984 000005A9 50726F62696E672050-     czProbingPCI		db	"Probing PCI devices ...",13,10,0		;probing PCI devices string
  3984 000005B2 434920646576696365-
  3984 000005BB 73202E2E2E0D0A00   
  3985                                  
  3986 000005C3 4170706C6500            czApple			db	"Apple",0
  3987 000005C9 496E74656C00            czIntel			db	"Intel",0					;Intel
  3988 000005CF 4F7261636C6500          czOracle		db	"Oracle",0
  3989 000005D6 4F7468657200            czOther			db	"Other",0
  3990                                  
  3991 000005DC 55534220436F6E7472-     czUSBController		db	"USB Controller",0
  3991 000005E5 6F6C6C657200       
  3992 000005EB 50726F2F3130303020-     czPro1000MT		db	"Pro/1000 MT Ethernet Adapter",0
  3992 000005F4 4D542045746865726E-
  3992 000005FD 657420416461707465-
  3992 00000606 7200               
  3993 00000608 5043492026204D656D-     czPCIAndMem		db	"PCI & Memory",0
  3993 00000611 6F727900           
  3994 00000615 41757265616C204144-     czAurealAD1881		db	"Aureal AD1881 SOUNDMAX",0
  3994 0000061E 3138383120534F554E-
  3994 00000627 444D415800         
  3995 0000062C 504949583320504349-     czPIIX3PCItoIDEBridge	db	"PIIX3 PCI-to-ISA Bridge",0
  3995 00000635 2D746F2D4953412042-
  3995 0000063E 726964676500       
  3996 00000644 383233373141422F45-     cz82371ABBusMaster	db	"82371AB/EB PCI Bus Master IDE Controller",0
  3996 0000064D 422050434920427573-
  3996 00000656 204D61737465722049-
  3996 0000065F 444520436F6E74726F-
  3996 00000668 6C6C657200         
  3997 0000066D 50494958342F34452F-     czPIIX4PowerMgmt	db	"PIIX4/4E/4M Power Management Controller",0
  3997 00000676 344D20506F77657220-
  3997 0000067F 4D616E6167656D656E-
  3997 00000688 7420436F6E74726F6C-
  3997 00000691 6C657200           
  3998 00000695 5669727475616C426F-     czVirtualBoxGA		db	"VirtualBox Graphics Adapter",0
  3998 0000069E 782047726170686963-
  3998 000006A7 732041646170746572-
  3998 000006B0 00                 
  3999 000006B1 5669727475616C426F-     czVirtualBoxDevice	db	"VirtualBox Device",0
  3999 000006BA 782044657669636500 
  4000                                  
  4001 000006C3 45746865726E657420-     czEthernetAdapterFound	db	"Ethernet adapter found",13,10,0		;adapter found message
  4001 000006CC 616461707465722066-
  4001 000006D5 6F756E640D0A00     
  4002 000006DC 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  4003 00000FFE 55AA                    			db	055h,0AAh					;end of section
  4004                                  %endif
  4005                                  %ifdef BUILDDISK
  4006                                  ;-----------------------------------------------------------------------------------------------------------------------
  4007                                  ;
  4008                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  4009                                  ;
  4010                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4011                                  ;
  4012                                  ;-----------------------------------------------------------------------------------------------------------------------
  4013                                  section			unused							;unused disk space
  4014 00000000 F6<rept>                			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  4015                                  %endif
