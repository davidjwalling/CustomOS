     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.010
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the "mem" and "memory" commands.
     8                                  ;
     9                                  ;       Revised:        July 4, 2018
    10                                  ;
    11                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    12                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    13                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    14                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    15                                  ;
    16                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    17                                  ;
    18                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    19                                  ;
    20                                  ;=======================================================================================================================
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;
    23                                  ;       Assembly Directives
    24                                  ;
    25                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    26                                  ;
    27                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    28                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    29                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    30                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    31                                  ;
    32                                  ;-----------------------------------------------------------------------------------------------------------------------
    33                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    34                                  %define BUILDBOOT                                                               ;... build the boot sector
    35                                  %define BUILDCOM                                                                ;... and the OS kernel
    36                                  %endif
    37                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    38                                  %define BUILDBOOT                                                               ;... also build the boot sector
    39                                  %endif
    40                                  ;-----------------------------------------------------------------------------------------------------------------------
    41                                  ;
    42                                  ;       Conventions
    43                                  ;
    44                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    45                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    46                                  ;                       Assembly operands begin in column 33.
    47                                  ;                       Inline comments begin in column 81.
    48                                  ;                       Lines should not extend beyond column 120.
    49                                  ;
    50                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    51                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    52                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    53                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    54                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    55                                  ;                       ouput buffers, respectively.
    56                                  ;
    57                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    58                                  ;                       Negative relative call or jump addresses indicate reuse.
    59                                  ;
    60                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    61                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    62                                  ;                       Register names in comments are in upper case (EAX, EDI).
    63                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    64                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    65                                  ;                       register contents on entry and exit.
    66                                  ;
    67                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    68                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    69                                  ;                       The 2nd letter of the constant label indicates the storage type.
    70                                  ;
    71                                  ;                       cq......        constant quad-word (dq)
    72                                  ;                       cd......        constant double-word (dd)
    73                                  ;                       cw......        constant word (dw)
    74                                  ;                       cb......        constant byte (db)
    75                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    76                                  ;
    77                                  ;       Instructions:   32-bit instructions are generally favored.
    78                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    79                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    80                                  ;
    81                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    82                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    83                                  ;
    84                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    85                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    86                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    87                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    88                                  ;                       Octal literal values are avoided.
    89                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    90                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    91                                  ;
    92                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    93                                  ;                       Macro names describe an action and so DO begin with a verb.
    94                                  ;
    95                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    96                                  ;                       Buffers are kept to as small a size as practicable.
    97                                  ;                       Data and code intermingling is avoided wherever possible.
    98                                  ;
    99                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   100                                  ;                       Register names in source code are in lower case (eax, edx).
   101                                  ;
   102                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   103                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   104                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   105                                  ;
   106                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   107                                  ;                       Routine names begin with a verb (Get, Read, Load).
   108                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   109                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   110                                  ;                       function but begin with a leading underscore (_) character.
   111                                  ;
   112                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   113                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   114                                  ;
   115                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   116                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   117                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   118                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   119                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   120                                  ;
   121                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   122                                  ;                       The 2nd letter of the variable label indicates the storage type.
   123                                  ;
   124                                  ;                       wq......        variable quad-word (resq)
   125                                  ;                       wd......        variable double-word (resd)
   126                                  ;                       ww......        variable word (resw)
   127                                  ;                       wb......        variable byte (resb)
   128                                  ;                       ws......        writable structure
   129                                  ;
   130                                  ;-----------------------------------------------------------------------------------------------------------------------
   131                                  ;=======================================================================================================================
   132                                  ;
   133                                  ;       Equates
   134                                  ;
   135                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   136                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   137                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   138                                  ;       sets. Equates here are defined in the following groupings:
   139                                  ;
   140                                  ;       Hardware-Defined Values
   141                                  ;
   142                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   143                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   144                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   145                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   146                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   147                                  ;       EX86...         Intel x86 CPU architecture values
   148                                  ;
   149                                  ;       Firmware-Defined Values
   150                                  ;
   151                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   152                                  ;
   153                                  ;       Standards-Based Values
   154                                  ;
   155                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   156                                  ;
   157                                  ;       Operating System Values
   158                                  ;
   159                                  ;       EBOOT...        Boot sector and loader values
   160                                  ;       ECON...         Console values (dimensions and attributes)
   161                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   162                                  ;       EKEYF...        Keyboard status flags
   163                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   164                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   165                                  ;       EMSG...         Message identifers
   166                                  ;
   167                                  ;=======================================================================================================================
   168                                  ;-----------------------------------------------------------------------------------------------------------------------
   169                                  ;
   170                                  ;       Hardware-Defined Values
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;
   175                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   176                                  ;
   177                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   178                                  ;       for CGA, EGA, VGA and compatible video modes.
   179                                  ;
   180                                  ;-----------------------------------------------------------------------------------------------------------------------
   181                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   182                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   183                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   184                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ;
   187                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   188                                  ;
   189                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   190                                  ;
   191                                  ;-----------------------------------------------------------------------------------------------------------------------
   192                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   193                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   194                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   195                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   196                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   197                                  ;-----------------------------------------------------------------------------------------------------------------------
   198                                  ;
   199                                  ;       8042 Keyboard Controller                                                EKEYB...
   200                                  ;
   201                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   202                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   203                                  ;
   204                                  ;-----------------------------------------------------------------------------------------------------------------------
   205                                  EKEYBPORTDATA           equ     060h                                            ;data port
   206                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   207                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   208                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   209                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   210                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   211                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   212                                                                                                                  ;---------------------------------------
   213                                                                                                                  ;       Keyboard Scan Codes
   214                                                                                                                  ;---------------------------------------
   215                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   216                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   217                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   218                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   219                                  EKEYBSLASH              equ     035h                                            ;slash
   220                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   221                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   222                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   223                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   224                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   225                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   226                                  EKEYBUP                 equ     080h                                            ;up
   227                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   228                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   229                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   230                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   231                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   232                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   233                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   234                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   235                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   236                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   237                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   238                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  ;
   241                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   242                                  ;
   243                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   244                                  ;       external devices and signals a hardware interrupt to the CPU.
   245                                  ;
   246                                  ;-----------------------------------------------------------------------------------------------------------------------
   247                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   248                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   249                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   250                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   251                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   252                                  ;-----------------------------------------------------------------------------------------------------------------------
   253                                  ;
   254                                  ;       8253 Programmable Interval Timer                                        EPIT...
   255                                  ;
   256                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   257                                  ;       approximately 18.2 times per second.
   258                                  ;
   259                                  ;-----------------------------------------------------------------------------------------------------------------------
   260                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   261                                  ;-----------------------------------------------------------------------------------------------------------------------
   262                                  ;
   263                                  ;       x86 CPU Architecture                                                    ;EX86...
   264                                  ;
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   267                                  ;-----------------------------------------------------------------------------------------------------------------------
   268                                  ;
   269                                  ;       Motorola MC 146818 Real-Time Clock                                      ERTC...
   270                                  ;
   271                                  ;       The Motorola MC 146818 was the original real-time clock in PCs.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  ERTCREGPORT             equ     70h                                             ;register select port
   275                                  ERTCDATAPORT            equ     71h                                             ;data port
   276                                  ERTCSECONDREG           equ     00h                                             ;second
   277                                  ERTCMINUTEREG           equ     02h                                             ;minute
   278                                  ERTCHOURREG             equ     04h                                             ;hour
   279                                  ERTCWEEKDAYREG          equ     06h                                             ;weekday
   280                                  ERTCDAYREG              equ     07h                                             ;day
   281                                  ERTCMONTHREG            equ     08h                                             ;month
   282                                  ERTCYEARREG             equ     09h                                             ;year of the century
   283                                  ERTCSTATUSREG           equ     0bh                                             ;status
   284                                  ERTCCENTURYREG          equ     32h                                             ;century
   285                                  ERTCBINARYVALS          equ     00000100b                                       ;values are binary
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;
   288                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   289                                  ;
   290                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   291                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   292                                  ;
   293                                  ;       0.......        Segment is not present in memory (triggers int 11)
   294                                  ;       1.......        Segment is present in memory
   295                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   296                                  ;       ...0....        Segment is a system segment
   297                                  ;       ...00010                Local Descriptor Table
   298                                  ;       ...00101                Task Gate
   299                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   300                                  ;       ...01100                Call Gate (386)
   301                                  ;       ...01110                Interrupt Gate (386)
   302                                  ;       ...01111                Trap Gate (386)
   303                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   304                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   305                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   309                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   310                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   311                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   312                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   313                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   314                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   315                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ;
   318                                  ;       Firmware-Defined Values
   319                                  ;
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  ;
   323                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   324                                  ;
   325                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   326                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   330                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   331                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   332                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   333                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   334                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   335                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   336                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   337                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   338                                  ;-----------------------------------------------------------------------------------------------------------------------
   339                                  ;
   340                                  ;       Standards-Based Values
   341                                  ;
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;-----------------------------------------------------------------------------------------------------------------------
   344                                  ;
   345                                  ;       ASCII                                                                   EASCII...
   346                                  ;
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   349                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   350                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   351                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   352                                  EASCIISPACE             equ     020h                                            ;space
   353                                  EASCIIUPPERA            equ     041h                                            ;'A'
   354                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   355                                  EASCIILOWERA            equ     061h                                            ;'a'
   356                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   357                                  EASCIITILDE             equ     07Eh                                            ;'~'
   358                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   359                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   360                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   361                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   362                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   363                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   364                                  EASCIICASE              equ     00100000b                                       ;case bit
   365                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   366                                  ;-----------------------------------------------------------------------------------------------------------------------
   367                                  ;
   368                                  ;       Operating System Values
   369                                  ;
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;-----------------------------------------------------------------------------------------------------------------------
   372                                  ;
   373                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   374                                  ;
   375                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   376                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   377                                  ;
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   380                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   381                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   382                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   383                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   384                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   385                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  ;       Console Constants                                                       ECON...
   388                                  ;-----------------------------------------------------------------------------------------------------------------------
   389                                  ECONCOLS                equ     80                                              ;columns per row
   390                                  ECONROWS                equ     24                                              ;console rows
   391                                  ECONOIAROW              equ     24                                              ;operator information area row
   392                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   393                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   394                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   395                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   396                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   401                                  EGDTCGA                 equ     020h                                            ;cga video selector
   402                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   403                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   404                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   405                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   406                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   407                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Keyboard Flags                                                          EKEYF...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   412                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   413                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   414                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   415                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   416                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   417                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   418                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   419                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   420                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   421                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  ;       Kernel Constants                                                        EKRN...
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   426                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   427                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   428                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   429                                  ;-----------------------------------------------------------------------------------------------------------------------
   430                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   433                                  ;-----------------------------------------------------------------------------------------------------------------------
   434                                  ;       Message Identifiers                                                     EMSG...
   435                                  ;-----------------------------------------------------------------------------------------------------------------------
   436                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   437                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   438                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   439                                  ;=======================================================================================================================
   440                                  ;
   441                                  ;       Structures
   442                                  ;
   443                                  ;=======================================================================================================================
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  ;
   446                                  ;       DATETIME
   447                                  ;
   448                                  ;       The DATETIME structure stores date and time values from the real-time clock.
   449                                  ;
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  struc                   DATETIME
   452 00000000 <res 00000001>          .second                 resb    1                                               ;seconds
   453 00000001 <res 00000001>          .minute                 resb    1                                               ;minutes
   454 00000002 <res 00000001>          .hour                   resb    1                                               ;hours
   455 00000003 <res 00000001>          .weekday                resb    1                                               ;day of week
   456 00000004 <res 00000001>          .day                    resb    1                                               ;day of month
   457 00000005 <res 00000001>          .month                  resb    1                                               ;month of year
   458 00000006 <res 00000001>          .year                   resb    1                                               ;year of century
   459 00000007 <res 00000001>          .century                resb    1                                               ;century
   460                                  EDATETIMELEN            equ     ($-.second)
   461                                  endstruc
   462                                  ;-----------------------------------------------------------------------------------------------------------------------
   463                                  ;
   464                                  ;       MQUEUE
   465                                  ;
   466                                  ;       The MQUEUE structure maps memory used for a message queue.
   467                                  ;
   468                                  ;-----------------------------------------------------------------------------------------------------------------------
   469                                  struc                   MQUEUE
   470 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   471 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   472 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   473                                  endstruc
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  ;
   476                                  ;       OSDATA
   477                                  ;
   478                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   479                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   480                                  ;
   481                                  ;-----------------------------------------------------------------------------------------------------------------------
   482                                  struc                   OSDATA
   483 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   484 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   485 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   486 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   487 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   488 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   489 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   490 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   491 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   492 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   493 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   494 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   495 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   496 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   497 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   498 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   499 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   500 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   501 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   502 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   503 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   504 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   505 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   506 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   507 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   508 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   509 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   510 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   511 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   512 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   513 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   514 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   515 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   516 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   517 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   518 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   519 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   520 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   521 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   522 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   523 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   524 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   525 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   526 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   527 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   528 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   529 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   530 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   531 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   532 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   533 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   534 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   535 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   536 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   537 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   538 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   539 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   540 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   541 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   542 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   543 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   544 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   545 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   546 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   547 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   548 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   549 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   550 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   551 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   552 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   553 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   554 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   555 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   556 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   557 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   558 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   559 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   560 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   561 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   562 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   563 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   564 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   565 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   566 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   567 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   568 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   569 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   570 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   571 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   572 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   573 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   574 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   575 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   576 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   577 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   578 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   579 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   580 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   581 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   582 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   583 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   584                                  ;-----------------------------------------------------------------------------------------------------------------------
   585                                  ;
   586                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   587                                  ;
   588                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   589                                  ;
   590                                  ;-----------------------------------------------------------------------------------------------------------------------
   591                                  ECONDATA                equ     ($)
   592 00000800 <res 00000004>          wdConsoleMemBase        resd    1                                               ;console memory address
   593 00000804 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   594 00000805 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   595 00000806 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   596 00000807 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   597 00000808 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   598 00000809 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   599 0000080A <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   600 0000080B <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   601 0000080C <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   602 0000080D <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   603 0000080E <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   604 0000080F <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   605 00000810 <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   606 00000860 <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   607 000008B0 <res 00000050>          wzConsoleOutBuffer      resb    80                                              ;response output buffer
   608 00000900 <res 00000008>          wsConsoleDateTime       resb    EDATETIMELEN                                    ;date-time buffer
   609                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   610                                  ;-----------------------------------------------------------------------------------------------------------------------
   611                                  ;
   612                                  ;       End of OS Variables
   613                                  ;
   614                                  ;-----------------------------------------------------------------------------------------------------------------------
   615                                  endstruc
   616                                  ;-----------------------------------------------------------------------------------------------------------------------
   617                                  ;
   618                                  ;       Macros
   619                                  ;
   620                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   621                                  ;
   622                                  ;-----------------------------------------------------------------------------------------------------------------------
   623                                  %macro                  mint    1
   624                                  _%1                     equ     ($-$$) / EX86DESCLEN
   625                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   626                                  %endmacro
   627                                  %macro                  mtrap   1
   628                                  _%1                     equ     ($-$$) / EX86DESCLEN
   629                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   630                                  %endmacro
   631                                  %macro                  menter  1
   632                                  ?%1                     equ     ($-$$)
   633                                  %endmacro
   634                                  %macro                  tsvce   1
   635                                  e%1                     equ     ($-tsvc)/4
   636                                                          dd      %1
   637                                  %endmacro
   638                                  %ifdef BUILDBOOT
   639                                  ;=======================================================================================================================
   640                                  ;
   641                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   642                                  ;
   643                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   644                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   645                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   646                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   647                                  ;
   648                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   649                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   650                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   651                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   652                                  ;       immediately followed by a disk parameter table.
   653                                  ;
   654                                  ;=======================================================================================================================
   655                                                          cpu     8086                                            ;assume minimal CPU
   656                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   657                                                          bits    16                                              ;16-bit code at power-up
   658                                  %ifdef BUILDPREP
   659                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   660                                  %else
   661 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   662                                  %endif
   663                                  ;-----------------------------------------------------------------------------------------------------------------------
   664                                  ;
   665                                  ;       Disk Parameter Table
   666                                  ;
   667                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   668                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   669                                  ;
   670                                  ;-----------------------------------------------------------------------------------------------------------------------
   671 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   672 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   673 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   674 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   675 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   676 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   677 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   678 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   679 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   680                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   681 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   682 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   683 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   684                                  ;
   685                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   686                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   687                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   688                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   689                                  ;       given several possible starting values for CS:IP.
   690                                  ;
   691                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   692 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   693                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   694 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   695 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   696 00000025 B104                                            mov     cl,4                                            ;shift count
   697 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   698 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   699 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   700                                  ;
   701                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   702                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   703                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   704                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   705                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   706                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   707                                  ;
   708 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   709 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   710 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   711 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   712 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   713                                  ;
   714                                  ;       Our boot addressability is now set up according to the following diagram.
   715                                  ;
   716                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   717                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   718                                  ;                               |  256 = 100h bytes                             |
   719                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   720                                  ;                               |  Boot Sector (vstart=0100h)                   |
   721                                  ;                               |  1 sector = 512 = 200h bytes                  |
   722                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   723                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   724                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   725                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   726                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   727                                  ;                               |  2 sectors = 1024 = 400h bytes
   728                                  ;                       009400  +-----------------------------------------------+ DS:1900
   729                                  ;
   730                                  ;       On entry, DL indicates the drive being booted from.
   731                                  ;
   732 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   733                                  ;
   734                                  ;       Compute directory i/o buffer address.
   735                                  ;
   736 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   737 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   738 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   739 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   740                                  ;
   741                                  ;       Compute segment where os.com will be loaded.
   742                                  ;
   743 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   744 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   745 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   746 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   747                                  ;
   748                                  ;       Set the video mode to 80 column, 25 row, text.
   749                                  ;
   750 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   751 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   752                                  ;
   753                                  ;       Write a message to the console so we know we have our addressability established.
   754                                  ;
   755 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   756 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   757                                  ;
   758                                  ;       Initialize the number of directory sectors to search.
   759                                  ;
   760 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   761 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   762                                  ;
   763                                  ;       Compute number of directory sectors and initialize overhead count.
   764                                  ;
   765 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   766 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   767 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   768 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   769                                  ;
   770                                  ;       Compute directory entries per sector.
   771                                  ;
   772 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   773 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   774 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   775                                  ;
   776                                  ;       Compute first logical directory sector and update overhead count.
   777                                  ;
   778 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   779 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   780 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   781 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   782 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   783 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   784                                  ;
   785                                  ;       Read directory sector.
   786                                  ;
   787 0000008E B001                    .30                     mov     al,1                                            ;sector count
   788 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   789 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   790 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   791                                  ;
   792                                  ;       Setup variables to search this directory sector.
   793                                  ;
   794 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   795 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   796 000000A1 7603                                            jna     .40                                             ;no, continue
   797 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   798 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   799 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   800 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   801                                  ;
   802                                  ;       Loop through directory sectors searching for kernel program.
   803                                  ;
   804 000000B1 56                      .50                     push    si                                              ;save kernel name address
   805 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   806 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   807 000000B6 FC                                              cld                                                     ;forward strings
   808 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   809 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   810 000000BA 5E                                              pop     si                                              ;restore kernel name address
   811 000000BB 7418                                            je      .60                                             ;exit loop if found
   812 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   813 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   814 000000C2 75ED                                            jnz     .50                                             ;next entry
   815                                  ;
   816                                  ;       Repeat search if we are not at the end of the directory.
   817                                  ;
   818 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   819 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   820 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   821 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   822 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   823                                  ;
   824                                  ;       If we find the kernel program in the directory, read the FAT.
   825                                  ;
   826 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   827 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   828 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   829 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   830 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   831 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   832                                  ;
   833                                  ;       Get the starting cluster of the kernel program and target address.
   834                                  ;
   835 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   836 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   837                                  ;
   838                                  ;       Read each program cluster into RAM.
   839                                  ;
   840 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   841 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   842 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   843 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   844 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   845 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   846 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   847 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   848 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   849                                  ;
   850                                  ;       Update buffer pointer for next cluster.
   851                                  ;
   852 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   853 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   854 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   855 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   856 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   857                                  ;
   858                                  ;       Compute next cluster number.
   859                                  ;
   860 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   861 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   862 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   863 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   864 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   865 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   866 00000120 83E701                                          and     di,1                                            ;get low bit
   867 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   868 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   869 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   870                                  ;
   871                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   872                                  ;
   873 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   874 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   875 00000130 B104                                            mov     cl,4                                            ;shift count
   876 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   877 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   878 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   879 0000013A 75B2                                            jne     .70                                             ;no, continue
   880                                  ;
   881                                  ;       Transfer control to the operating system program.
   882                                  ;
   883 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   884 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   885 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   886                                  ;
   887                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   888                                  ;
   889 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   890 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   891 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   892 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   893 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   894 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   895 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   896 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   897 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   898 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   899                                  ;
   900                                  ;       Try maxtries times to read sector.
   901                                  ;
   902 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   903 00000160 53                      .10                     push    bx                                              ;save buffer address
   904 00000161 51                                              push    cx                                              ;save retry count
   905 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   906 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   907 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   908 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   909 0000016F 59                                              pop     cx                                              ;restore retry count
   910 00000170 5B                                              pop     bx                                              ;restore buffer address
   911 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   912 00000173 E2EB                                            loop    .10                                             ;retry
   913                                  ;
   914                                  ;       Handle disk error: convert to ASCII and store in error string.
   915                                  ;
   916 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   917 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   918 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   919 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   920 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   921 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   922 00000183 7203                                            jb      .20                                             ;continue if numeral
   923 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   924 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   925 0000018A 7203                                            jb      .30                                             ;continue if numeral
   926 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   927 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   928 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   929 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   930                                  ;
   931                                  ;       Wait for a key press.
   932                                  ;
   933 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   934 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   935 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   936 0000019E FB                                              sti                                                     ;enable maskable interrupts
   937 0000019F F4                                              hlt                                                     ;wait for interrupt
   938 000001A0 EBF6                                            jmp     .10                                             ;repeat
   939                                  ;
   940                                  ;       Reset the system.
   941                                  ;
   942 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   943 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   944 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   945 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   946 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   947                                  ;
   948                                  ;       Display text message.
   949                                  ;
   950 000001AA FC                      BootPrint               cld                                                     ;forward strings
   951 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   952 000001AC 84C0                                            test    al,al                                           ;end of string?
   953 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   954 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   955 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   956 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   957 000001B6 C3                      BootReturn              ret                                                     ;return
   958                                  ;-----------------------------------------------------------------------------------------------------------------------
   959                                  ;
   960                                  ;       Constants
   961                                  ;
   962                                  ;-----------------------------------------------------------------------------------------------------------------------
   963 000001B7 90                                              align   2
   964 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   965 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   965 000001C3 4F4D               
   966 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   966 000001CE 530D0A00           
   967 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   967 000001DB 7220               
   968 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   969 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   969 000001E9 6700               
   970                                  ;-----------------------------------------------------------------------------------------------------------------------
   971                                  ;
   972                                  ;       Work Areas
   973                                  ;
   974                                  ;-----------------------------------------------------------------------------------------------------------------------
   975 000001EB 90                                              align   2
   976 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   977 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   978 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   979 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   980 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   981                                  wwReadCountCommand      equ     $                                               ;read count and command
   982 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   983 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   984                                  wwDriveHead             equ     $                                               ;drive, head (word)
   985 000001F8 00                      wbDrive                 db      0                                               ;drive
   986 000001F9 00                      wbHead                  db      0                                               ;head
   987                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   988 000001FA 00                                              db      0                                               ;sector
   989 000001FB 00                      wbTrack                 db      0                                               ;track
   990 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   991 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   992                                  %endif
   993                                  %ifdef BUILDPREP
   994                                  ;=======================================================================================================================
   995                                  ;
   996                                  ;       Diskette Preparation Code
   997                                  ;
   998                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   999                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
  1000                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
  1001                                  ;
  1002                                  ;=======================================================================================================================
  1003                                  ;
  1004                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
  1005                                  ;
  1006                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
  1007                                                          call    BootPrint                                       ;display message
  1008                                  ;
  1009                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
  1010                                  ;
  1011                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
  1012                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
  1013                                                          jnz     .20                                             ;continue if key pressed
  1014                                                          sti                                                     ;enable interrupts
  1015                                                          hlt                                                     ;wait for interrupt
  1016                                                          jmp     .10                                             ;repeat
  1017                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
  1018                                                          je      .30                                             ;yes, branch
  1019                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
  1020                                                          jne     .10                                             ;no, repeat
  1021                                                          jmp     .120                                            ;yes, exit program
  1022                                  ;
  1023                                  ;       Display writing-sector message and patch the JMP instruction.
  1024                                  ;
  1025                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
  1026                                                          call    BootPrint                                       ;display message
  1027                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
  1028                                                          mov     ax,01Bh                                         ;address past disk parameter table
  1029                                                          mov     [bx],ax                                         ;update the JMP instruction
  1030                                  ;
  1031                                  ;       Try to read the boot sector.
  1032                                  ;
  1033                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1034                                  .40                     push    cx                                              ;save remaining tries
  1035                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1036                                                          mov     dx,0                                            ;head zero, drive zero
  1037                                                          mov     cx,1                                            ;track zero, sector one
  1038                                                          mov     ax,0201h                                        ;read one sector
  1039                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1040                                                          pop     cx                                              ;restore remaining retries
  1041                                                          jnc     .50                                             ;skip ahead if successful
  1042                                                          loop    .40                                             ;try again
  1043                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1044                                                          jmp     .70                                             ;branch to error routine
  1045                                  ;
  1046                                  ;       Copy diskette parms from input buffer to output buffer.
  1047                                  ;
  1048                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1049                                                          add     si,11                                           ;skip over JMP and system ID
  1050                                                          mov     di,Boot                                         ;output buffer address
  1051                                                          add     di,11                                           ;skip over JMP and system ID
  1052                                                          mov     cx,19                                           ;length of diskette parameters
  1053                                                          cld                                                     ;forward string copies
  1054                                                          rep     movsb                                           ;copy diskette parameters
  1055                                  ;
  1056                                  ;       Try to write boot sector to diskette.
  1057                                  ;
  1058                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1059                                  .60                     push    cx                                              ;save remaining tries
  1060                                                          mov     bx,Boot                                         ;output buffer address
  1061                                                          mov     dx,0                                            ;head zero, drive zero
  1062                                                          mov     cx,1                                            ;track zero, sector one
  1063                                                          mov     ax,0301h                                        ;write one sector
  1064                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1065                                                          pop     cx                                              ;restore remaining retries
  1066                                                          jnc     .100                                            ;skip ahead if successful
  1067                                                          loop    .60                                             ;try again
  1068                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1069                                  ;
  1070                                  ;       Convert the error code to ASCII and display the error message.
  1071                                  ;
  1072                                  .70                     push    ax                                              ;save error code
  1073                                                          mov     al,ah                                           ;copy error code
  1074                                                          mov     ah,0                                            ;AX = error code
  1075                                                          mov     dl,10h                                          ;hexadecimal divisor
  1076                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1077                                                          or      ax,03030h                                       ;add ASCII zone digits
  1078                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1079                                                          jb      .80                                             ;yes, continue
  1080                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1081                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1082                                                          jb      .90                                             ;yes, continue
  1083                                                          add     al,7                                            ;no, make ASCII
  1084                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1085                                                          call    BootPrint                                       ;write error message
  1086                                                          pop     ax                                              ;restore error code
  1087                                  ;
  1088                                  ;       Display the completion message.
  1089                                  ;
  1090                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1091                                                          mov     al,ah                                           ;BIOS return code
  1092                                                          cmp     al,0                                            ;success?
  1093                                                          je      .110                                            ;yes, continue
  1094                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1095                                                          cmp     al,1                                            ;disk parameter error?
  1096                                                          je      .110                                            ;yes, continue
  1097                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1098                                                          cmp     al,2                                            ;address mark not found?
  1099                                                          je      .110                                            ;yes, continue
  1100                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1101                                                          cmp     al,3                                            ;protected disk?
  1102                                                          je      .110                                            ;yes, continue
  1103                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1104                                                          cmp     al,6                                            ;diskette removed?
  1105                                                          je      .110                                            ;yes, continue
  1106                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1107                                                          cmp     al,80H                                          ;drive timed out?
  1108                                                          je      .110                                            ;yes, continue
  1109                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1110                                  .110                    call    BootPrint                                       ;display result message
  1111                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1112                                                          int     021h                                            ;terminate DOS program
  1113                                                          ret                                                     ;return (should not execute)
  1114                                  ;-----------------------------------------------------------------------------------------------------------------------
  1115                                  ;
  1116                                  ;       Diskette Preparation Messages
  1117                                  ;
  1118                                  ;-----------------------------------------------------------------------------------------------------------------------
  1119                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1120                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1121                                                          db      13,10
  1122                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1123                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1124                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1125                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1126                                                          db      13,10,0
  1127                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1128                                                          db      13,10,0
  1129                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1130                                                          db      13,10,0
  1131                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1132                                                          db      13,10,0
  1133                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1134                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1135                                                          db      13,10,0
  1136                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1137                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1138                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1139                                                          db      13,10,"and retry."
  1140                                                          db      13,10,0
  1141                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1142                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1143                                                          db      13,10,"using another diskette."
  1144                                                          db      13,10,0
  1145                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1146                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1147                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1148                                                          db      13,10,0
  1149                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1150                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1151                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1152                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1153                                                          db      13,10,"is properly inserted in the diskette drive."
  1154                                                          db      13,10,0
  1155                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1156                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1157                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1158                                                          db      13,10,0
  1159                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1160                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1161                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1162                                                          db      13,10,0
  1163                                  wcPrepInBuf             equ     $
  1164                                  %endif
  1165                                  %ifdef BUILDDISK
  1166                                  ;=======================================================================================================================
  1167                                  ;
  1168                                  ;       File Allocation Tables
  1169                                  ;
  1170                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1171                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1172                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1173                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1174                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1175                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1176                                  ;       the last cluster in the chain.
  1177                                  ;
  1178                                  ;       Every three bytes encode two FAT entries as follows:
  1179                                  ;
  1180                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1181                                  ;
  1182                                  ;=======================================================================================================================
  1183                                  ;-----------------------------------------------------------------------------------------------------------------------
  1184                                  ;
  1185                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1186                                  ;
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  section                 fat1                                                    ;first copy of FAT
  1189 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1190 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1191 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1192 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1193 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1194 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1195 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1196 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1197 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1198 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1199 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1200 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1201                                  ;-----------------------------------------------------------------------------------------------------------------------
  1202                                  ;
  1203                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1204                                  ;
  1205                                  ;-----------------------------------------------------------------------------------------------------------------------
  1206                                  section                 fat2                                                    ;second copy of FAT
  1207 00000000 F0FFFF034000                                    db      0F0h,0FFh,0FFh, 003h,040h,000h
  1208 00000006 056000078000                                    db      005h,060h,000h, 007h,080h,000h
  1209 0000000C 09A0000BC000                                    db      009h,0A0h,000h, 00Bh,0C0h,000h
  1210 00000012 0DE0000F0001                                    db      00Dh,0E0h,000h, 00Fh,000h,001h
  1211 00000018 112001134001                                    db      011h,020h,001h, 013h,040h,001h
  1212 0000001E 156001178001                                    db      015h,060h,001h, 017h,080h,001h
  1213 00000024 19A0011BC001                                    db      019h,0A0h,001h, 01Bh,0C0h,001h
  1214 0000002A 1DE0011F0002                                    db      01Dh,0E0h,001h, 01Fh,000h,002h
  1215 00000030 212002234002                                    db      021h,020h,002h, 023h,040h,002h
  1216 00000036 256002278002                                    db      025h,060h,002h, 027h,080h,002h
  1217 0000003C 29A0022BF0FF                                    db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1218 00000042 00<rept>                                        times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1219                                  ;-----------------------------------------------------------------------------------------------------------------------
  1220                                  ;
  1221                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1222                                  ;
  1223                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1224                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1225                                  ;       copy.
  1226                                  ;
  1227                                  ;-----------------------------------------------------------------------------------------------------------------------
  1228                                  section                 dir                                                     ;diskette directory
  1229 00000000 4F5320202020202043-                             db      "OS      COM"                                   ;file name (must contain spaces)
  1229 00000009 4F4D               
  1230 0000000B 20                                              db      020h                                            ;attribute (archive bit set)
  1231 0000000C 00<rept>                                        times   10 db 0                                         ;unused
  1232 00000016 0000                                            dw      0h                                              ;time
  1233 00000018 41                                              db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1234 00000019 49                                              db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1235 0000001A 0200                                            dw      2                                               ;first cluster
  1236 0000001C 00540000                                        dd      05400h                                          ;file size
  1237 00000020 00<rept>                                        times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1238                                  %endif
  1239                                  %ifdef BUILDCOM
  1240                                  ;=======================================================================================================================
  1241                                  ;
  1242                                  ;       OS.COM
  1243                                  ;
  1244                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1245                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1246                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1247                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1248                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1249                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1250                                  ;
  1251                                  ;       Our loader addressability is set up according to the following diagram.
  1252                                  ;
  1253                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1254                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1255                                  ;                               |  256 = 100h bytes                             |
  1256                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1257                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1258                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1259                                  ;                       007e00  +-----------------------------------------------+
  1260                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1261                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1262                                  ;                               |                                               |
  1263                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1264                                  ;                               |                                               |
  1265                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1266                                  ;                               |  Loader Code                                  |
  1267                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1268                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1269                                  ;
  1270                                  ;=======================================================================================================================
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272                                  ;
  1273                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1274                                  ;
  1275                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1276                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1277                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1278                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1279                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1280                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1281                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1282                                  ;       registers.
  1283                                  ;
  1284                                  ;-----------------------------------------------------------------------------------------------------------------------
  1285                                                          cpu     8086                                            ;assume minimal CPU
  1286                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1287                                                          bits    16                                              ;this is 16-bit code
  1288 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1289 00000001 1F                                              pop     ds                                              ;...as our data segment
  1290 00000002 0E                                              push    cs                                              ;use the code segment
  1291 00000003 07                                              pop     es                                              ;...as our extra segment
  1292                                  ;
  1293                                  ;       Write a message to the console so we know we have our addressability established.
  1294                                  ;
  1295 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1296 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1297                                  ;
  1298                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1299                                  ;
  1300 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1301 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1302 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1303 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1304                                                          cpu     386                                             ;allow 80386 instructions
  1305 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1306 00000017 E89600                                          call    PutTTYString                                    ;display message
  1307                                  ;
  1308                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1309                                  ;
  1310 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1311 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1312 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1313 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1314 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1315 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1316 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1317 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1318 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1319 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1320                                  ;
  1321                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1322                                  ;
  1323 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1324 00000038 07                                              pop     es                                              ;... as target segment
  1325 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1326 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1327 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1328 00000041 FC                                              cld                                                     ;forward strings
  1329 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1330 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1331 00000047 E86600                                          call    PutTTYString                                    ;display message
  1332                                  ;
  1333                                  ;       Switch to protected mode.
  1334                                  ;
  1335 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1336 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1337 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1338 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1339 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1340 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1341 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1342 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1343 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1344 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1345 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1346                                  ;
  1347                                  ;       Enable hardware and maskable interrupts.
  1348                                  ;
  1349 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1350 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1351 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1352 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1353                                  ;
  1354                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1355                                  ;
  1356 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1357 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1358 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;       Routine:        LoaderExit
  1362                                  ;
  1363                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1364                                  ;
  1365                                  ;       In:             DS:SI   string address
  1366                                  ;
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1369                                  ;
  1370                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1371                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1372                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1373                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1374                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1375                                  ;
  1376 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1377 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1378 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1379 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1380 00000085 F4                                              hlt                                                     ;wait for interrupt
  1381 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1382                                  ;
  1383                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1384                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1385                                  ;       HLT until the system resets.
  1386                                  ;
  1387 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1388 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1389 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1390 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1391 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  ;
  1394                                  ;       Routine:        GetCPUType
  1395                                  ;
  1396                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1397                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1398                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1399                                  ;
  1400                                  ;       Out:            AX      0 = 808x, v20, etc.
  1401                                  ;                               1 = 80186
  1402                                  ;                               2 = 80286
  1403                                  ;                               3 = 80386
  1404                                  ;
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1407 00000092 B120                                            mov     cl,32                                           ;shift count
  1408 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1409 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1410 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1411                                                          cpu     186
  1412 0000009A 54                                              push    sp                                              ;save stack pointer
  1413 0000009B 59                                              pop     cx                                              ;...into cx
  1414 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1415 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1416                                                          cpu     286
  1417 000000A0 40                                              inc     ax                                              ;AX = 2
  1418 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1419 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1420 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1421 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1422 000000AE 40                                              inc     ax                                              ;AX = 3
  1423 000000AF C3                      .10                     ret                                                     ;return
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                  ;
  1426                                  ;       Routine:        PutTTYString
  1427                                  ;
  1428                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1429                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1430                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1431                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1432                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1433                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1434                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1435                                  ;                       to LODSB is not needed.
  1436                                  ;
  1437                                  ;       In:             DS:SI   address of string
  1438                                  ;
  1439                                  ;       Out:            DF      0
  1440                                  ;                       ZF      1
  1441                                  ;                       AL      0
  1442                                  ;
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1445 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1446 000000B2 84C0                                            test    al,al                                           ;end of string?
  1447 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1448 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1449 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1450 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1451 000000BC C3                      .20                     ret                                                     ;return
  1452                                  ;-----------------------------------------------------------------------------------------------------------------------
  1453                                  ;
  1454                                  ;       Loader Data
  1455                                  ;
  1456                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1457                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1458                                  ;
  1459                                  ;-----------------------------------------------------------------------------------------------------------------------
  1460 000000BD 90                                              align   2
  1461 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1462 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1463 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1464 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1465 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1465 000000D1 74696E672073797374-
  1465 000000DA 656D20726571756972-
  1465 000000E3 657320616E20693338-
  1465 000000EC 36206F72206C617465-
  1465 000000F5 722070726F63657373-
  1465 000000FE 6F722E0D0A         
  1466 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1466 0000010C 65737320616E79206B-
  1466 00000115 657920746F20726573-
  1466 0000011E 746172742074686520-
  1466 00000127 636F6D70757465722E-
  1466 00000130 0D0A00             
  1467 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1468 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1468 00000145 7265640D0A00       
  1469 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1469 00000154 616465640D0A00     
  1470 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1470 00000164 4F530D0A00         
  1471 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1472                                  ;=======================================================================================================================
  1473                                  ;
  1474                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1475                                  ;
  1476                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1477                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1478                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1479                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1480                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1481                                  ;
  1482                                  ;=======================================================================================================================
  1483                                  ;=======================================================================================================================
  1484                                  ;
  1485                                  ;       Kernel Tables
  1486                                  ;
  1487                                  ;=======================================================================================================================
  1488                                  ;-----------------------------------------------------------------------------------------------------------------------
  1489                                  ;
  1490                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1491                                  ;
  1492                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1493                                  ;       first descriptor must be all nulls.
  1494                                  ;
  1495                                  ;       6   5         4         3         2         1         0
  1496                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1497                                  ;       ----------------------------------------------------------------
  1498                                  ;       h......hffffmmmma......ab......................bn..............n
  1499                                  ;       00000000                        all areas have base addresses below 2^24
  1500                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1501                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1502                                  ;                   1001                present, ring-0, selector
  1503                                  ;
  1504                                  ;       h...h   hi-order base address (bits 24-31)
  1505                                  ;       ffff    flags
  1506                                  ;       mmmm    hi-order limit (bits 16-19)
  1507                                  ;       a...a   access
  1508                                  ;       b...b   lo-order base address (bits 0-23)
  1509                                  ;       n...n   lo-order limit (bits 0-15)
  1510                                  ;
  1511                                  ;-----------------------------------------------------------------------------------------------------------------------
  1512                                  section                 gdt                                                     ;global descriptor table
  1513 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1514 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1515 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1516 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1517 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1518 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1519 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1520 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1521 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1522 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1523 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1524 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1525 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1526 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1527 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1528                                  ;-----------------------------------------------------------------------------------------------------------------------
  1529                                  ;
  1530                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1531                                  ;
  1532                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1533                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1534                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1535                                  ;
  1536                                  ;       6   5         4         3         2         1         0
  1537                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1538                                  ;       ----------------------------------------------------------------
  1539                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1540                                  ;
  1541                                  ;       h...h   high-order offset (bits 16-31)
  1542                                  ;       P       present (0=unused interrupt)
  1543                                  ;       zz      descriptor privilege level
  1544                                  ;       S       storage segment (must be zero for IDT)
  1545                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1546                                  ;       S...S   handling code selector in GDT
  1547                                  ;       l...l   lo-order offset (bits 0-15)
  1548                                  ;
  1549                                  ;-----------------------------------------------------------------------------------------------------------------------
  1550                                  section                 idt                                                     ;interrupt descriptor table
  1551                                                          mint    dividebyzero                                    ;00 divide by zero
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mint    singlestep                                      ;01 single step
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mint    nmi                                             ;02 non-maskable
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mint    break                                           ;03 break
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mint    into                                            ;04 into
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mint    bounds                                          ;05 bounds
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    badopcode                                       ;06 bad op code
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    nocoproc                                        ;07 no coprocessor
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    doublefault                                     ;08 double-fault
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    operand                                         ;09 operand
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    badtss                                          ;0a bad TSS
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    notpresent                                      ;0b not-present
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    stacklimit                                      ;0c stack limit
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    protection                                      ;0d general protection fault
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    int14                                           ;0e (reserved)
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    int15                                           ;0f (reserved)
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mint    coproccalc                                      ;10 (reserved)
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mint    int17                                           ;11 (reserved)
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mint    int18                                           ;12 (reserved)
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mint    int19                                           ;13 (reserved)
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mint    int20                                           ;14 (reserved)
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mint    int21                                           ;15 (reserved)
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mint    int22                                           ;16 (reserved)
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mint    int23                                           ;17 (reserved)
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mint    int24                                           ;18 (reserved)
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mint    int25                                           ;19 (reserved)
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mint    int26                                           ;1a (reserved)
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                                          mint    int27                                           ;1b (reserved)
  1578                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1578 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                                          mint    int28                                           ;1c (reserved)
  1579                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1579 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                                          mint    int29                                           ;1d (reserved)
  1580                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1580 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                                          mint    int30                                           ;1e (reserved)
  1581                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1581 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                                          mint    int31                                           ;1f (reserved)
  1582                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1582 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1583                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1583 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1584                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1584 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1585                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1585                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1585 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1586                                                          mtrap   com2                                            ;23 IRQ3 com2
  1586                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1586 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1587                                                          mtrap   com1                                            ;24 IRQ4 com1
  1587                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1587 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1588                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1588                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1588 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1589                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1589                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1589 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1590                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1590                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1590 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1591                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1591                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1591 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1592                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1592                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1592 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1593                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1593                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1593 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1594                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1594                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1594 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1595                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1595                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1595 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1596                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1596                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1596 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1597                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1597                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1597 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1598                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1598                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1598 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1599                                                          mtrap   svc                                             ;30 OS services
  1599                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1599 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1600 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1601                                  ;=======================================================================================================================
  1602                                  ;
  1603                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1604                                  ;
  1605                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1606                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1607                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1608                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1609                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1610                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1611                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1612                                  ;
  1613                                  ;=======================================================================================================================
  1614                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1615                                                          cpu     386                                             ;allow 80386 instructions
  1616                                                          bits    32                                              ;this is 32-bit code
  1617                                  ;=======================================================================================================================
  1618                                  ;
  1619                                  ;       CPU Interrupt Handlers
  1620                                  ;
  1621                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1622                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1623                                  ;
  1624                                  ;=======================================================================================================================
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT0    Divide By Zero
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  dividebyzero                                    ;divide by zero
  1630                              <1> ?%1 equ ($-$$)
  1631 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1632 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1633 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT1    Single Step
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  singlestep                                      ;single step
  1639                              <1> ?%1 equ ($-$$)
  1640 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1641 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1642 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT2    Non-Maskable Interrupt
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  nmi                                             ;non-maskable
  1648                              <1> ?%1 equ ($-$$)
  1649 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1650 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1651 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;       INT3    Break
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                                          menter  break                                           ;break
  1657                              <1> ?%1 equ ($-$$)
  1658 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1659 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1660 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT4    Into
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  into                                            ;into
  1666                              <1> ?%1 equ ($-$$)
  1667 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1668 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1669 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;       INT5    Bounds
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                                          menter  bounds                                          ;bounds
  1675                              <1> ?%1 equ ($-$$)
  1676 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1677 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1678 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;       INT6    Bad Operation Code
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                                          menter  badopcode                                       ;bad opcode interrupt
  1684                              <1> ?%1 equ ($-$$)
  1685 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1686 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1687 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT7    No Coprocessor
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1693                              <1> ?%1 equ ($-$$)
  1694 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1695 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1696 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT8    Double Fault
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  doublefault                                     ;doublefault interrupt
  1702                              <1> ?%1 equ ($-$$)
  1703 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1704 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1705 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT9    Operand
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  operand                                         ;operand interrupt
  1711                              <1> ?%1 equ ($-$$)
  1712 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1713 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1714 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT10   Bad Task State Segment
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  badtss                                          ;bad TSS interrupt
  1720                              <1> ?%1 equ ($-$$)
  1721 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1722 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1723 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT11   Not Present
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  notpresent                                      ;not present interrupt
  1729                              <1> ?%1 equ ($-$$)
  1730 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1731 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1732 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT12   Stack Limit
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  stacklimit                                      ;stack limit interrupt
  1738                              <1> ?%1 equ ($-$$)
  1739 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1740 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1741 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT13   General Protection Fault
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  protection                                      ;protection fault interrupt
  1747                              <1> ?%1 equ ($-$$)
  1748 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1749 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1750 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT14   Reserved
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  int14                                           ;(reserved)
  1756                              <1> ?%1 equ ($-$$)
  1757 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1758 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1759 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT15   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int15                                           ;(reserved)
  1765                              <1> ?%1 equ ($-$$)
  1766 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1767 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1768 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT16   Coprocessor Calculation
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  coproccalc                                      ;coprocessor calculation
  1774                              <1> ?%1 equ ($-$$)
  1775 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1776 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1777 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT17   Reserved
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  int17                                           ;(reserved)
  1783                              <1> ?%1 equ ($-$$)
  1784 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1785 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1786 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT18   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int18                                           ;(reserved)
  1792                              <1> ?%1 equ ($-$$)
  1793 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1794 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1795 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT19   Reserved
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  int19                                           ;(reserved)
  1801                              <1> ?%1 equ ($-$$)
  1802 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1803 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1804 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT20   Reserved
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  int20                                           ;(reserved)
  1810                              <1> ?%1 equ ($-$$)
  1811 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1812 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1813 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT21   Reserved
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  int21                                           ;(reserved)
  1819                              <1> ?%1 equ ($-$$)
  1820 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1821 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1822 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT22   Reserved
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  int22                                           ;(reserved)
  1828                              <1> ?%1 equ ($-$$)
  1829 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1830 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1831 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT23   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int23                                           ;(reserved)
  1837                              <1> ?%1 equ ($-$$)
  1838 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1839 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1840 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT24   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int24                                           ;(reserved)
  1846                              <1> ?%1 equ ($-$$)
  1847 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1848 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1849 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT25   Reserved
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  int25                                           ;(reserved)
  1855                              <1> ?%1 equ ($-$$)
  1856 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1857 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1858 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT26   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int26                                           ;(reserved)
  1864                              <1> ?%1 equ ($-$$)
  1865 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1866 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1867 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT27   Reserved
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  int27                                           ;(reserved)
  1873                              <1> ?%1 equ ($-$$)
  1874 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1875 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1876 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT28   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int28                                           ;(reserved)
  1882                              <1> ?%1 equ ($-$$)
  1883 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1884 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1885 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT29   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int29                                           ;(reserved)
  1891                              <1> ?%1 equ ($-$$)
  1892 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1893 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1894 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       INT30   Reserved
  1898                                  ;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                                          menter  int30                                           ;(reserved)
  1900                              <1> ?%1 equ ($-$$)
  1901 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1902 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1903 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1904                                  ;-----------------------------------------------------------------------------------------------------------------------
  1905                                  ;
  1906                                  ;       INT31   Reserved
  1907                                  ;
  1908                                  ;-----------------------------------------------------------------------------------------------------------------------
  1909                                                          menter  int31                                           ;(reserved)
  1909                              <1> ?%1 equ ($-$$)
  1910 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1911 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1912 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1913                                  ;-----------------------------------------------------------------------------------------------------------------------
  1914                                  ;
  1915                                  ;       Routine:        ReportInterrupt
  1916                                  ;
  1917                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1918                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1919                                  ;
  1920                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1921                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1922                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1923                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1924                                  ;                       [esp+0]         error message address                   stored by push instructions
  1925                                  ;
  1926                                  ;       Out:            N/A             This routine does not exit.
  1927                                  ;
  1928                                  ;-----------------------------------------------------------------------------------------------------------------------
  1929 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1930 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1931 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1932 00000156 89E5                                            mov     ebp,esp                                         ;ebp --> [EDI]
  1933                                  ;
  1934                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1935                                  ;
  1936                                  ;                       [ebp+56]        eflags
  1937                                  ;                       [ebp+52]        cs
  1938                                  ;                       [ebp+48]        eip
  1939                                  ;                       [ebp+44]        interrupt number (0-31)
  1940                                  ;                       [ebp+40]        error message address
  1941                                  ;                       [ebp+36]        ds
  1942                                  ;                       [ebp+32]        es
  1943                                  ;                       [ebp+28]        eax
  1944                                  ;                       [ebp+24]        ecx
  1945                                  ;                       [ebp+20]        edx
  1946                                  ;                       [ebp+16]        ebx
  1947                                  ;                       [ebp+12]        esp
  1948                                  ;                       [ebp+8]         ebp
  1949                                  ;                       [ebp+4]         esi
  1950                                  ;                       [ebp+0]         edi
  1951                                  ;
  1952 00000158 0E                                              push    cs                                              ;load code selector ...
  1953 00000159 1F                                              pop     ds                                              ;... into DS
  1954 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1955 0000015C 07                                              pop     es                                              ;... into ES
  1956                                  ;
  1957                                  ;       Display the interrupt report boundary box
  1958                                  ;
  1959 0000015D B10D                                            mov     cl,13                                           ;column
  1960 0000015F B506                                            mov     ch,6                                            ;row
  1961 00000161 B232                                            mov     dl,50                                           ;width
  1962 00000163 B608                                            mov     dh,8                                            ;height
  1963 00000165 B707                                            mov     bh,07h                                          ;attribute
  1964 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1965                                  ;
  1966                                  ;       Display the report header
  1967                                  ;
  1968 0000016C B10F                                            mov     cl,15                                           ;column
  1969 0000016E B507                                            mov     ch,7                                            ;row
  1970 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1971 00000175 E8A90E0000                                      call    SetConsoleString                                ;draw text string
  1972                                  ;
  1973                                  ;       Display the interrupt description label
  1974                                  ;
  1975 0000017A B10F                                            mov     cl,15                                           ;column
  1976 0000017C B508                                            mov     ch,8                                            ;row
  1977 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1978 00000183 E89B0E0000                                      call    SetConsoleString                                ;draw text string
  1979                                  ;
  1980                                  ;       Display the interrupt number
  1981                                  ;
  1982 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1983 0000018B B11A                                            mov     cl,26                                           ;column
  1984 0000018D B508                                            mov     ch,8                                            ;row
  1985 0000018F E86B0B0000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1986                                  ;
  1987                                  ;       Display the interrupt name
  1988                                  ;
  1989 00000194 B11D                                            mov     cl,29                                           ;column
  1990 00000196 B508                                            mov     ch,8                                            ;row
  1991 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1992 0000019B E8830E0000                                      call    SetConsoleString                                ;display interrupt description
  1993                                  ;
  1994                                  ;       Display the register values header
  1995                                  ;
  1996 000001A0 B10F                                            mov     cl,15                                           ;column
  1997 000001A2 B50A                                            mov     ch,10                                           ;row
  1998 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  1999 000001A9 E8750E0000                                      call    SetConsoleString                                ;draw text string
  2000                                  ;
  2001                                  ;       Display the EAX register label and value
  2002                                  ;
  2003 000001AE B10F                                            mov     cl,15                                           ;column
  2004 000001B0 B50B                                            mov     ch,11                                           ;row
  2005 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  2006 000001B7 E8670E0000                                      call    SetConsoleString                                ;draw label
  2007 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  2008 000001BF B113                                            mov     cl,19                                           ;column
  2009 000001C1 B50B                                            mov     ch,11                                           ;row
  2010 000001C3 E85D0B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2011                                  ;
  2012                                  ;       Display the ECX register label and value
  2013                                  ;
  2014 000001C8 B10F                                            mov     cl,15                                           ;column
  2015 000001CA B50C                                            mov     ch,12                                           ;row
  2016 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2017 000001D1 E84D0E0000                                      call    SetConsoleString                                ;draw label
  2018 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2019 000001D9 B113                                            mov     cl,19                                           ;column
  2020 000001DB B50C                                            mov     ch,12                                           ;row
  2021 000001DD E8430B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2022                                  ;
  2023                                  ;       Display the EDX register label and value
  2024                                  ;
  2025 000001E2 B10F                                            mov     cl,15                                           ;column
  2026 000001E4 B50D                                            mov     ch,13                                           ;row
  2027 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2028 000001EB E8330E0000                                      call    SetConsoleString                                ;draw label
  2029 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2030 000001F3 B113                                            mov     cl,19                                           ;column
  2031 000001F5 B50D                                            mov     ch,13                                           ;row
  2032 000001F7 E8290B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2033                                  ;
  2034                                  ;       Display the EBX register label and value
  2035                                  ;
  2036 000001FC B10F                                            mov     cl,15                                           ;column
  2037 000001FE B50E                                            mov     ch,14                                           ;row
  2038 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2039 00000205 E8190E0000                                      call    SetConsoleString                                ;draw label
  2040 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2041 0000020D B113                                            mov     cl,19                                           ;column
  2042 0000020F B50E                                            mov     ch,14                                           ;row
  2043 00000211 E80F0B0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2044                                  ;
  2045                                  ;       Display the ESI register label and value
  2046                                  ;
  2047 00000216 B11D                                            mov     cl,29                                           ;column
  2048 00000218 B50B                                            mov     ch,11                                           ;row
  2049 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2050 0000021F E8FF0D0000                                      call    SetConsoleString                                ;draw label
  2051 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2052 00000227 B121                                            mov     cl,33                                           ;column
  2053 00000229 B50B                                            mov     ch,11                                           ;row
  2054 0000022B E8F50A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2055                                  ;
  2056                                  ;       Display the EDI register label and value
  2057                                  ;
  2058 00000230 B11D                                            mov     cl,29                                           ;column
  2059 00000232 B50C                                            mov     ch,12                                           ;row
  2060 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2061 00000239 E8E50D0000                                      call    SetConsoleString                                ;draw label
  2062 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2063 00000241 B121                                            mov     cl,33                                           ;column
  2064 00000243 B50C                                            mov     ch,12                                           ;row
  2065 00000245 E8DB0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2066                                  ;
  2067                                  ;       Display the EBP register label and value
  2068                                  ;
  2069 0000024A B11D                                            mov     cl,29                                           ;column
  2070 0000024C B50D                                            mov     ch,13                                           ;row
  2071 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2072 00000253 E8CB0D0000                                      call    SetConsoleString                                ;draw label
  2073 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2074 0000025B B121                                            mov     cl,33                                           ;column
  2075 0000025D B50D                                            mov     ch,13                                           ;row
  2076 0000025F E8C10A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2077                                  ;
  2078                                  ;       Display the DS register label and value
  2079                                  ;
  2080 00000264 B12A                                            mov     cl,42                                           ;column
  2081 00000266 B50B                                            mov     ch,11                                           ;row
  2082 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2083 0000026D E8B10D0000                                      call    SetConsoleString                                ;draw label
  2084 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2085 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2086 00000278 B12E                                            mov     cl,46                                           ;column
  2087 0000027A B50B                                            mov     ch,11                                           ;row
  2088 0000027C E8B40A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2089                                  ;
  2090                                  ;       Display the ES register label and value
  2091                                  ;
  2092 00000281 B12A                                            mov     cl,42                                           ;column
  2093 00000283 B50C                                            mov     ch,12                                           ;row
  2094 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2095 0000028A E8940D0000                                      call    SetConsoleString                                ;draw label
  2096 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2097 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2098 00000295 B12E                                            mov     cl,46                                           ;column
  2099 00000297 B50C                                            mov     ch,12                                           ;row
  2100 00000299 E8970A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2101                                  ;
  2102                                  ;       Display the SS register label and value
  2103                                  ;
  2104 0000029E B12A                                            mov     cl,42                                           ;column
  2105 000002A0 B50D                                            mov     ch,13                                           ;row
  2106 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2107 000002A7 E8770D0000                                      call    SetConsoleString                                ;draw label
  2108 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2109 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2110 000002B1 B12E                                            mov     cl,46                                           ;column
  2111 000002B3 B50D                                            mov     ch,13                                           ;row
  2112 000002B5 E87B0A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2113                                  ;
  2114                                  ;       Display the CS register lable and value
  2115                                  ;
  2116 000002BA B12A                                            mov     cl,42                                           ;column
  2117 000002BC B50E                                            mov     ch,14                                           ;row
  2118 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2119 000002C3 E85B0D0000                                      call    SetConsoleString                                ;draw label
  2120 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2121 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2122 000002CE B12E                                            mov     cl,46                                           ;column
  2123 000002D0 B50E                                            mov     ch,14                                           ;row
  2124 000002D2 E85E0A0000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2125                                  ;
  2126                                  ;       Display the EFLAGS register label and value
  2127                                  ;
  2128 000002D7 B133                                            mov     cl,51                                           ;column
  2129 000002D9 B50B                                            mov     ch,11                                           ;row
  2130 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2131 000002E0 E83E0D0000                                      call    SetConsoleString                                ;draw label
  2132 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2133 000002E8 B137                                            mov     cl,55                                           ;column
  2134 000002EA B50B                                            mov     ch,11                                           ;row
  2135 000002EC E8340A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2136                                  ;
  2137                                  ;       Display the ESP register label and value
  2138                                  ;
  2139 000002F1 B133                                            mov     cl,51                                           ;column
  2140 000002F3 B50D                                            mov     ch,13                                           ;row
  2141 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2142 000002FA E8240D0000                                      call    SetConsoleString                                ;draw label
  2143 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2144 00000302 B137                                            mov     cl,55                                           ;column
  2145 00000304 B50D                                            mov     ch,13                                           ;row
  2146 00000306 E81A0A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2147                                  ;
  2148                                  ;       Display the EIP register label and value
  2149                                  ;
  2150 0000030B B133                                            mov     cl,51                                           ;column
  2151 0000030D B50E                                            mov     ch,14                                           ;row
  2152 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2153 00000314 E80A0D0000                                      call    SetConsoleString                                ;draw label
  2154 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP
  2155 0000031C B137                                            mov     cl,55                                           ;column
  2156 0000031E B50E                                            mov     ch,14                                           ;row
  2157 00000320 E8000A0000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2158                                  ;
  2159                                  ;       Halt and loop until reset
  2160                                  ;
  2161 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2162 00000326 F4                                              hlt                                                     ;halt processor
  2163 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2164                                  ;-----------------------------------------------------------------------------------------------------------------------
  2165                                  ;
  2166                                  ;       Processor Interrupt Name Strings
  2167                                  ;
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2169 00000332 6279207A65726F00   
  2170 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2170 00000343 657000             
  2171 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2171 0000034F 626C6520696E746572-
  2171 00000358 7275707400         
  2172 0000035D 427265616B00            czIntBreak              db      "Break",0
  2173 00000363 496E746F00              czIntInto               db      "Into",0
  2174 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2175 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2175 00000378 74696F6E20436F6465-
  2175 00000381 00                 
  2176 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2176 0000038B 6573736F7200       
  2177 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2177 0000039A 756C7400           
  2178 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2179 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2179 000003AF 537461746520536567-
  2179 000003B8 6D656E7400         
  2180 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2180 000003C6 6E7400             
  2181 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2181 000003D2 697400             
  2182 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2182 000003DE 726F74656374696F6E-
  2182 000003E7 204661756C7400     
  2183 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2183 000003F7 6F722043616C63756C-
  2183 00000400 6174696F6E00       
  2184 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  ;
  2187                                  ;       Processor Interrupt Handling Strings
  2188                                  ;
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2190 00000418 6C65642070726F6365-
  2190 00000421 73736F7220696E7465-
  2190 0000042A 727275707420686173-
  2190 00000433 206F63637572726564-
  2190 0000043C 3A00               
  2191 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2191 00000447 202300             
  2192 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2192 00000453 206174207468652074-
  2192 0000045C 696D65206F66207468-
  2192 00000465 6520696E7465727275-
  2192 0000046E 70743A00           
  2193 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2194 00000477 4543583A00              czIntECX                db      "ECX:",0
  2195 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2196 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2197 00000486 4553493A00              czIntESI                db      "ESI:",0
  2198 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2199 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2200 00000495 4553503A00              czIntESP                db      "ESP:",0
  2201 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2202 0000049F 2045533A00              czIntES                 db      " ES:",0
  2203 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2204 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2205 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2206 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  ;
  2209                                  ;       Routine:        DrawTextDialogBox
  2210                                  ;
  2211                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2212                                  ;
  2213                                  ;       In:             CL      upper left column (0-79)
  2214                                  ;                       CH      upper left row (0-24)
  2215                                  ;                       DL      column width, excluding border
  2216                                  ;                       DH      row height, excluding border
  2217                                  ;                       BH      color attribute
  2218                                  ;
  2219                                  ;-----------------------------------------------------------------------------------------------------------------------
  2220 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2221 000004B9 56                                              push    esi                                             ;
  2222 000004BA 57                                              push    edi                                             ;
  2223 000004BB 06                                              push    es                                              ;
  2224 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2225 000004BE 07                                              pop     es                                              ;... into ES
  2226                                  ;
  2227                                  ;       Compute target display offset
  2228                                  ;
  2229 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2230 000004C1 88E8                                            mov     al,ch                                           ;row
  2231 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2232 000004C5 F6E4                                            mul     ah                                              ;row offset
  2233 000004C7 00C8                                            add     al,cl                                           ;add column
  2234 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2235 000004CC 00C8                                            add     al,cl                                           ;add column
  2236 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2237 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2238                                  ;
  2239                                  ;       Display top border row
  2240                                  ;
  2241 000004D3 57                                              push    edi                                             ;save target row offset
  2242 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2243 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2244 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2245 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2246 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2247 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2248 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2249 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2250 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2251 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2252 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2253                                  ;
  2254                                  ;       Display dialog box body rows
  2255                                  ;
  2256 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2257 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2258 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2259 000004F3 57                                              push    edi                                             ;save target row offset
  2260 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2261 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2262 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2263 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2264 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2265 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2266 00000500 F366AB                                          rep     stosw                                           ;display row
  2267 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2268 00000505 66AB                                            stosw                                                   ;display character and attribute
  2269 00000507 5F                                              pop     edi                                             ;restore target row offset
  2270 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2271 0000050E 59                                              pop     ecx                                             ;remaining rows
  2272 0000050F E2E1                                            loop    .10                                             ;next row
  2273                                  ;
  2274                                  ;       Display bottom border row
  2275                                  ;
  2276 00000511 57                                              push    edi                                             ;save target row offset
  2277 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2278 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2279 00000516 66AB                                            stosw                                                   ;display character and attribute
  2280 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2281 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2282 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2283 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2284 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2285 00000523 66AB                                            stosw                                                   ;display character and attribute
  2286 00000525 5F                                              pop     edi                                             ;restore target row offset
  2287 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2288                                  ;
  2289                                  ;       Restore and return
  2290                                  ;
  2291 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2292 0000052D 5F                                              pop     edi                                             ;
  2293 0000052E 5E                                              pop     esi                                             ;
  2294 0000052F 59                                              pop     ecx                                             ;
  2295 00000530 C3                                              ret                                                     ;return
  2296                                  ;=======================================================================================================================
  2297                                  ;
  2298                                  ;       Hardware Device Interupts
  2299                                  ;
  2300                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2301                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2302                                  ;       (BX=2028h).
  2303                                  ;
  2304                                  ;=======================================================================================================================
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;       IRQ0    Clock Tick Interrupt
  2308                                  ;
  2309                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2310                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2311                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2312                                  ;
  2313                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2314                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2315                                  ;
  2316                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2317                                  ;       zero, the floppy disk motors are turned off.
  2318                                  ;
  2319                                  ;-----------------------------------------------------------------------------------------------------------------------
  2320                                                          menter  clocktick                                       ;clock tick interrupt
  2320                              <1> ?%1 equ ($-$$)
  2321 00000531 50                                              push    eax                                             ;save modified regs
  2322 00000532 52                                              push    edx                                             ;
  2323 00000533 1E                                              push    ds                                              ;
  2324                                  ;
  2325                                  ;       Update the clock tick count and the elapsed days as needed.
  2326                                  ;
  2327 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2328 00000536 1F                                              pop     ds                                              ;... into data segment register
  2329 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2330 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2331 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2332 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2333 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2334 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2335 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2336                                  ;
  2337                                  ;       Decrement floppy disk motor timeout.
  2338                                  ;
  2339 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2340 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2341 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2342 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2343                                  ;
  2344                                  ;       Turn off the floppy disk motor if appropriate.
  2345                                  ;
  2346 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2347 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2348 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2349 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2350 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2351 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2352 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2353 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2354 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2355 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2356 00000577 EE                                              out     dx,al                                           ;turn motor off
  2357                                  ;
  2358                                  ;       Signal the end of the hardware interrupt.
  2359                                  ;
  2360 00000578 E8E00A0000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2361                                  ;
  2362                                  ;       Restore and return.
  2363                                  ;
  2364 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2365 0000057E 5A                                              pop     edx                                             ;
  2366 0000057F 58                                              pop     eax                                             ;
  2367 00000580 CF                                              iretd                                                   ;return
  2368                                  ;-----------------------------------------------------------------------------------------------------------------------
  2369                                  ;
  2370                                  ;       IRQ1    Keyboard Interrupt
  2371                                  ;
  2372                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2373                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2374                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2375                                  ;       ALL modified registers upon return.
  2376                                  ;
  2377                                  ;-----------------------------------------------------------------------------------------------------------------------
  2378                                                          menter  keyboard                                        ;keyboard interrrupt
  2378                              <1> ?%1 equ ($-$$)
  2379 00000581 50                                              push    eax                                             ;save non-volatile regs
  2380 00000582 53                                              push    ebx                                             ;
  2381 00000583 51                                              push    ecx                                             ;
  2382 00000584 56                                              push    esi                                             ;
  2383 00000585 1E                                              push    ds                                              ;
  2384 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2385 00000588 1F                                              pop     ds                                              ;... into data segment register
  2386 00000589 30C0                                            xor     al,al                                           ;zero
  2387 0000058B A209080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2388 00000590 A20A080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2389 00000595 A20B080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2390 0000059A A20C080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2391 0000059F A20D080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2392 000005A4 A20E080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2393 000005A9 B020                                            mov     al,' '                                          ;space
  2394 000005AB A20F080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2395 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2396 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2397 000005B4 200508080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2398 000005BA 8A1D06080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2399 000005C0 8A3D07080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2400 000005C6 E8470B0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2401 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2402 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2403 000005D3 A209080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2404 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2405 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2406 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2407 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2408 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2409 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2410 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2411 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2412 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2413 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2414 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2415 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2416 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2417 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2418 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2419 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2420 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2421 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2422 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2423 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2424 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2425 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2426 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2427 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2428 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2429 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2430 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2431 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2432 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2433 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2434 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2435 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2436 00000654 E8B90A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2437 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2438 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2439 00000661 A20A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2440 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2441 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2442 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2443 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2444 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2445 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2446 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2447 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2448 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2449 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2450 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2451 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2452 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2453 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2454 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2455 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2456 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2457 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2458 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2459 0000069C E8710A0000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2460 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2461 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2462 000006A9 A20B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2463 000006AE E85F0A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2464 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2465 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2466 000006BB A20C080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2467 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2468 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2469 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2470 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2471 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2472 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2473 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2474 000006D1 E80D0A0000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2475 000006D6 881D06080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2476 000006DC 883D07080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2477 000006E2 E8B6060000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2478 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2479 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2480 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2481 000006F1 E81C0A0000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2482 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2483 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2484 000006FE A20A080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2485 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2486 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2487 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2488 0000070E E8FF090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2489 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2490 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2491 0000071B A20B080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2492 00000720 E8ED090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2493 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2494 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2495 0000072D A20C080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2496 00000732 E8DB090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2497 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2498 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2499 0000073F A20D080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2500 00000744 E8C9090000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2501 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2502 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2503 0000074D A20E080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2504 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2505 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2506 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2507 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2508 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2509 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2510 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2511 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2512 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2513 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2514 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2515 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2516 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2517 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2518 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2519 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2520 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2521 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2522 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2523 00000787 A20F080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2524 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2525 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2526 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2527 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2528 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2529 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2530 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2531 000007A4 50                                              push    eax                                             ;save codes
  2532 000007A5 E8D4070000                                      call    PutMessage                                      ;put message to console
  2533 000007AA 58                                              pop     eax                                             ;restore codes
  2534 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2535 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2536 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2537 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2538 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2539 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2540 000007BD E8BC070000                                      call    PutMessage                                      ;put message to console
  2541 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2542 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2543 000007C6 080508080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2544 000007CC E874050000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2545 000007D1 E887080000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2546 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2547 000007D7 5E                                              pop     esi                                             ;
  2548 000007D8 59                                              pop     ecx                                             ;
  2549 000007D9 5B                                              pop     ebx                                             ;
  2550 000007DA 58                                              pop     eax                                             ;
  2551 000007DB CF                                              iretd                                                   ;return
  2552                                  ;-----------------------------------------------------------------------------------------------------------------------
  2553                                  ;       Scan-Code to ASCII Translation Tables
  2554                                  ;-----------------------------------------------------------------------------------------------------------------------
  2555 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2556 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2557 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2558 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2559 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2560 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2561 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2562 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2563 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2564 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2565 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2566 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2567 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2568 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2569 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2570 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2571 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2572 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2573 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2574 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2575 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2576 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2577 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2578 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2579 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2580 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2581 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2582 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2583 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2584 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2585 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2586 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;
  2589                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2590                                  ;
  2591                                  ;-----------------------------------------------------------------------------------------------------------------------
  2592                                                          menter  iochannel                                       ;secondary 8259A cascade
  2592                              <1> ?%1 equ ($-$$)
  2593 000008DC 50                                              push    eax                                             ;save modified regs
  2594 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  com2                                            ;serial port 2 interrupt
  2600                              <1> ?%1 equ ($-$$)
  2601 000008DF 50                                              push    eax                                             ;save modified regs
  2602 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  com1                                            ;serial port 1 interrupt
  2608                              <1> ?%1 equ ($-$$)
  2609 000008E2 50                                              push    eax                                             ;save modified regs
  2610 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2616                              <1> ?%1 equ ($-$$)
  2617 000008E5 50                                              push    eax                                             ;save modified regs
  2618 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ6    Diskette Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  diskette                                        ;floppy disk interrupt
  2624                              <1> ?%1 equ ($-$$)
  2625 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2626 000008E9 1E                                              push    ds                                              ;
  2627 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2628 000008EC 1F                                              pop     ds                                              ;... into DS register
  2629 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2630 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2631 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2632 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2633 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  ;
  2636                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2637                                  ;
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2639                              <1> ?%1 equ ($-$$)
  2640 000008FC 50                                              push    eax                                             ;save modified regs
  2641 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                  ;
  2644                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                                          menter  rtclock                                         ;real-time clock interrupt
  2647                              <1> ?%1 equ ($-$$)
  2648 000008FF 50                                              push    eax                                             ;save modified regs
  2649 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2655                              <1> ?%1 equ ($-$$)
  2656 00000902 50                                              push    eax                                             ;save modified regs
  2657 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                  ;
  2660                                  ;       IRQ10   Reserved Hardware Interrupt
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                                          menter  irq10                                           ;reserved
  2663                              <1> ?%1 equ ($-$$)
  2664 00000905 50                                              push    eax                                             ;save modified regs
  2665 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ11   Reserved Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  irq11                                           ;reserved
  2671                              <1> ?%1 equ ($-$$)
  2672 00000908 50                                              push    eax                                             ;save modified regs
  2673 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2679                              <1> ?%1 equ ($-$$)
  2680 0000090B 50                                              push    eax                                             ;save modified regs
  2681 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  coprocessor                                     ;coprocessor interrupt
  2687                              <1> ?%1 equ ($-$$)
  2688 0000090E 50                                              push    eax                                             ;save modified regs
  2689 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2695                              <1> ?%1 equ ($-$$)
  2696 00000911 50                                              push    eax                                             ;save modified regs
  2697 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       IRQ15   Reserved Hardware Interrupt
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                                          menter  irq15                                           ;reserved
  2703                              <1> ?%1 equ ($-$$)
  2704 00000914 50                                              push    eax                                             ;save modified regs
  2705 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       Exit from hardware interrupt
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711 00000917 E847070000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2712 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2713 0000091E E83A070000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2714 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2715 00000924 CF                                              iretd                                                   ;return from interrupt
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  ;
  2718                                  ;       INT 30h Operating System Software Service Interrupt
  2719                                  ;
  2720                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2721                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2722                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2723                                  ;       the entry address of the specific function from a table.
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                                          menter  svc
  2726                              <1> ?%1 equ ($-$$)
  2727 00000925 3C17                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2728 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2729 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2730 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2731 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2732 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;       Service Request Table
  2736                                  ;
  2737                                  ;
  2738                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2741                              <1> tsvc :
  2741                              <1> e%1 equ ($-tsvc)/4
  2741 00000937 [A60F0000]          <1>  dd %1
  2742                                                          tsvce   CompareMemory                                   ;compare memory
  2742                              <1> e%1 equ ($-tsvc)/4
  2742 0000093B [B80B0000]          <1>  dd %1
  2743                                                          tsvce   GetConsoleString                                ;get string input
  2743                              <1> e%1 equ ($-tsvc)/4
  2743 0000093F [190C0000]          <1>  dd %1
  2744                                                          tsvce   HexadecimalToUnsigned                           ;convert hexadecimal string to unsigned integer
  2744                              <1> e%1 equ ($-tsvc)/4
  2744 00000943 [670E0000]          <1>  dd %1
  2745                                                          tsvce   IsLeapYear                                      ;return ecx=1 if leap year
  2745                              <1> e%1 equ ($-tsvc)/4
  2745 00000947 [A1090000]          <1>  dd %1
  2746                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2746                              <1> e%1 equ ($-tsvc)/4
  2746 0000094B [33100000]          <1>  dd %1
  2747                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2747                              <1> e%1 equ ($-tsvc)/4
  2747 0000094F [370E0000]          <1>  dd %1
  2748                                                          tsvce   PutDateString                                   ;put MM/DD/YYYY string
  2748                              <1> e%1 equ ($-tsvc)/4
  2748 00000953 [BC090000]          <1>  dd %1
  2749                                                          tsvce   PutDayString                                    ;put DD string
  2749                              <1> e%1 equ ($-tsvc)/4
  2749 00000957 [FD090000]          <1>  dd %1
  2750                                                          tsvce   PutHourString                                   ;put hh string
  2750                              <1> e%1 equ ($-tsvc)/4
  2750 0000095B [0B0A0000]          <1>  dd %1
  2751                                                          tsvce   PutMinuteString                                 ;put mm string
  2751                              <1> e%1 equ ($-tsvc)/4
  2751 0000095F [190A0000]          <1>  dd %1
  2752                                                          tsvce   PutMonthString                                  ;put MM string
  2752                              <1> e%1 equ ($-tsvc)/4
  2752 00000963 [270A0000]          <1>  dd %1
  2753                                                          tsvce   PutMonthNameString                              ;put name(MM) string
  2753                              <1> e%1 equ ($-tsvc)/4
  2753 00000967 [350A0000]          <1>  dd %1
  2754                                                          tsvce   PutSecondString                                 ;put ss string
  2754                              <1> e%1 equ ($-tsvc)/4
  2754 0000096B [590A0000]          <1>  dd %1
  2755                                                          tsvce   PutTimeString                                   ;put HH:MM:SS string
  2755                              <1> e%1 equ ($-tsvc)/4
  2755 0000096F [660A0000]          <1>  dd %1
  2756                                                          tsvce   PutWeekdayString                                ;put weekday string
  2756                              <1> e%1 equ ($-tsvc)/4
  2756 00000973 [9B0A0000]          <1>  dd %1
  2757                                                          tsvce   PutWeekdayNameString                            ;put name(weekday) string
  2757                              <1> e%1 equ ($-tsvc)/4
  2757 00000977 [A90A0000]          <1>  dd %1
  2758                                                          tsvce   PutYearString                                   ;put YYYY string
  2758                              <1> e%1 equ ($-tsvc)/4
  2758 0000097B [CC0A0000]          <1>  dd %1
  2759                                                          tsvce   ReadRealTimeClock                               ;get real-time clock date and time
  2759                              <1> e%1 equ ($-tsvc)/4
  2759 0000097F [69100000]          <1>  dd %1
  2760                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2760                              <1> e%1 equ ($-tsvc)/4
  2760 00000983 [D4100000]          <1>  dd %1
  2761                                                          tsvce   UnsignedToDecimalString                         ;convert unsigned integer to decimal string
  2761                              <1> e%1 equ ($-tsvc)/4
  2761 00000987 [850E0000]          <1>  dd %1
  2762                                                          tsvce   UnsignedToHexadecimal                           ;convert unsigned integer to hexadecimal string
  2762                              <1> e%1 equ ($-tsvc)/4
  2762 0000098B [290F0000]          <1>  dd %1
  2763                                                          tsvce   UpperCaseString                                 ;upper-case string
  2763                              <1> e%1 equ ($-tsvc)/4
  2763 0000098F [D50B0000]          <1>  dd %1
  2764                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2765                                  ;-----------------------------------------------------------------------------------------------------------------------
  2766                                  ;
  2767                                  ;       Service Request Macros
  2768                                  ;
  2769                                  ;       These macros provide positional parameterization of service request calls.
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  %macro                  clearConsoleScreen 0
  2773                                                          mov     al,eClearConsoleScreen                          ;function code
  2774                                                          int     _svc                                            ;invoke OS service
  2775                                  %endmacro
  2776                                  %macro                  compareMemory 0
  2777                                                          mov     al,eCompareMemory                               ;function code
  2778                                                          int     _svc                                            ;invoke OS service
  2779                                  %endmacro
  2780                                  %macro                  getConsoleString 4
  2781                                                          mov     edx,%1                                          ;buffer address
  2782                                                          mov     ecx,%2                                          ;max characters
  2783                                                          mov     bh,%3                                           ;echo indicator
  2784                                                          mov     bl,%4                                           ;terminator
  2785                                                          mov     al,eGetConsoleString                            ;function code
  2786                                                          int     _svc                                            ;invoke OS service
  2787                                  %endmacro
  2788                                  %macro                  hexadecimalToUnsigned 0
  2789                                                          mov     al,eHexadecimalToUnsigned                       ;function code
  2790                                                          int     _svc                                            ;invoke OS service
  2791                                  %endmacro
  2792                                  %macro                  isLeapYear 1
  2793                                                          mov     ebx,%1                                          ;DATETIME addr
  2794                                                          mov     al,eIsLeapYear                                  ;function code
  2795                                                          int     _svc                                            ;invoke OS service
  2796                                  %endmacro
  2797                                  %macro                  placeCursor 0
  2798                                                          mov     al,ePlaceCursor                                 ;function code
  2799                                                          int     _svc                                            ;invoke OS service
  2800                                  %endmacro
  2801                                  %macro                  putConsoleString 1
  2802                                                          mov     edx,%1                                          ;string address
  2803                                                          mov     al,ePutConsoleString                            ;function code
  2804                                                          int     _svc                                            ;invoke OS service
  2805                                  %endmacro
  2806                                  %macro                  putDateString 0
  2807                                                          mov     al,ePutDateString                               ;function code
  2808                                                          int     _svc                                            ;invoke OS service
  2809                                  %endmacro
  2810                                  %macro                  putDateString 2
  2811                                                          mov     ebx,%1                                          ;DATETIME addr
  2812                                                          mov     edx,%2                                          ;output buffer addr
  2813                                                          mov     al,ePutDateString                               ;function code
  2814                                                          int     _svc                                            ;invoke OS service
  2815                                  %endmacro
  2816                                  %macro                  putDayString 2
  2817                                                          mov     ebx,%1                                          ;DATETIME addr
  2818                                                          mov     edx,%2                                          ;output buffer addr
  2819                                                          mov     al,ePutDayString                                ;function code
  2820                                                          int     _svc                                            ;invoke OS service
  2821                                  %endmacro
  2822                                  %macro                  putHourString 2
  2823                                                          mov     ebx,%1                                          ;DATETIME addr
  2824                                                          mov     edx,%2                                          ;output buffer addr
  2825                                                          mov     al,ePutHourString                               ;function code
  2826                                                          int     _svc                                            ;invoke OS service
  2827                                  %endmacro
  2828                                  %macro                  putMinuteString 2
  2829                                                          mov     ebx,%1                                          ;DATETIME addr
  2830                                                          mov     edx,%2                                          ;output buffer addr
  2831                                                          mov     al,ePutMinuteString                             ;function code
  2832                                                          int     _svc                                            ;invoke OS service
  2833                                  %endmacro
  2834                                  %macro                  putMonthString 2
  2835                                                          mov     ebx,%1                                          ;DATETIME addr
  2836                                                          mov     edx,%2                                          ;output buffer addr
  2837                                                          mov     al,ePutMonthString                              ;function code
  2838                                                          int     _svc                                            ;invoke OS service
  2839                                  %endmacro
  2840                                  %macro                  putMonthNameString 2
  2841                                                          mov     ebx,%1                                          ;DATETIME addr
  2842                                                          mov     edx,%2                                          ;output buffer addr
  2843                                                          mov     al,ePutMonthNameString                          ;function code
  2844                                                          int     _svc                                            ;invoke OS service
  2845                                  %endmacro
  2846                                  %macro                  putSecondString 2
  2847                                                          mov     ebx,%1                                          ;DATETIME addr
  2848                                                          mov     edx,%2                                          ;output buffer addr
  2849                                                          mov     al,ePutSecondString                             ;function code
  2850                                                          int     _svc                                            ;invoke OS service
  2851                                  %endmacro
  2852                                  %macro                  putTimeString 0
  2853                                                          mov     al,ePutTimeString                               ;function code
  2854                                                          int     _svc                                            ;invoke OS service
  2855                                  %endmacro
  2856                                  %macro                  putTimeString 2
  2857                                                          mov     ebx,%1                                          ;DATETIME addr
  2858                                                          mov     edx,%2                                          ;output buffer addr
  2859                                                          mov     al,ePutTimeString                               ;function code
  2860                                                          int     _svc                                            ;invoke OS service
  2861                                  %endmacro
  2862                                  %macro                  putWeekdayString 2
  2863                                                          mov     ebx,%1                                          ;DATETIME addr
  2864                                                          mov     edx,%2                                          ;output buffer addr
  2865                                                          mov     al,ePutWeekdayString                            ;function code
  2866                                                          int     _svc                                            ;invoke OS service
  2867                                  %endmacro
  2868                                  %macro                  putWeekdayNameString 2
  2869                                                          mov     ebx,%1                                          ;DATETIME addr
  2870                                                          mov     edx,%2                                          ;output buffer addr
  2871                                                          mov     al,ePutWeekdayNameString                        ;function code
  2872                                                          int     _svc                                            ;invoke OS service
  2873                                  %endmacro
  2874                                  %macro                  putYearString 2
  2875                                                          mov     ebx,%1                                          ;DATETIME addr
  2876                                                          mov     edx,%2                                          ;output buffer addr
  2877                                                          mov     al,ePutYearString                               ;function code
  2878                                                          int     _svc                                            ;invoke OS service
  2879                                  %endmacro
  2880                                  %macro                  readRealTimeClock 0
  2881                                                          mov     al,eReadRealTimeClock                           ;function code
  2882                                                          int     _svc                                            ;invoke OS service
  2883                                  %endmacro
  2884                                  %macro                  readRealTimeClock 1
  2885                                                          mov     ebx,%1                                          ;DATETIME addr
  2886                                                          mov     al,eReadRealTimeClock                           ;function code
  2887                                                          int     _svc                                            ;invoke OS service
  2888                                  %endmacro
  2889                                  %macro                  resetSystem 0
  2890                                                          mov     al,eResetSystem                                 ;function code
  2891                                                          int     _svc                                            ;invoke OS service
  2892                                  %endmacro
  2893                                  %macro                  unsignedToDecimalString 0
  2894                                                          mov     al,eUnsignedToDecimalString                     ;function code
  2895                                                          int     _svc                                            ;invoke OS service
  2896                                  %endmacro
  2897                                  %macro                  unsignedToHexadecimal 0
  2898                                                          mov     al,eUnsignedToHexadecimal                       ;function code
  2899                                                          int     _svc                                            ;invoke OS service
  2900                                  %endmacro
  2901                                  %macro                  upperCaseString 0
  2902                                                          mov     al,eUpperCaseString                             ;function code
  2903                                                          int     _svc                                            ;invoke OS service
  2904                                  %endmacro
  2905                                  ;=======================================================================================================================
  2906                                  ;
  2907                                  ;       Kernel Function Library
  2908                                  ;
  2909                                  ;=======================================================================================================================
  2910                                  ;=======================================================================================================================
  2911                                  ;
  2912                                  ;       Date and Time Helper Routines
  2913                                  ;
  2914                                  ;       GetYear
  2915                                  ;       IsLeapYear
  2916                                  ;       PutDateString
  2917                                  ;       PutDayString
  2918                                  ;       PutHourString
  2919                                  ;       PutMinuteString
  2920                                  ;       PutMonthString
  2921                                  ;       PutMonthNameString
  2922                                  ;       PutSecondString
  2923                                  ;       PutTimeString
  2924                                  ;       PutWeekdayString
  2925                                  ;       PutWeekdayNameString
  2926                                  ;       PutYearString
  2927                                  ;
  2928                                  ;=======================================================================================================================
  2929                                  ;-----------------------------------------------------------------------------------------------------------------------
  2930                                  ;
  2931                                  ;       Routine:        GetYear
  2932                                  ;
  2933                                  ;       Description:    Return the four-digit year (century * 100 + year of century)
  2934                                  ;
  2935                                  ;       In:             DS:EBX  DATETIME address
  2936                                  ;
  2937                                  ;       Out:            ECX     year
  2938                                  ;
  2939                                  ;-----------------------------------------------------------------------------------------------------------------------
  2940 00000993 0FB64B07                GetYear                 movzx   ecx,byte [ebx+DATETIME.century]                 ;century
  2941 00000997 6BC964                                          imul    ecx,100                                         ;century * 100
  2942 0000099A 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year of century
  2943 0000099E 01C1                                            add     ecx,eax                                         ;year (YYYY)
  2944 000009A0 C3                                              ret                                                     ;return
  2945                                  ;-----------------------------------------------------------------------------------------------------------------------
  2946                                  ;
  2947                                  ;       Routine:        IsLeapYear
  2948                                  ;
  2949                                  ;       Description:    This routine returns an indicator if the current year is a leap year.
  2950                                  ;
  2951                                  ;       In:             DS:EBX  DATETIME ADDRESS
  2952                                  ;
  2953                                  ;       Out:            ECX     0 = not a leap year
  2954                                  ;                               1 = leap year
  2955                                  ;
  2956                                  ;-----------------------------------------------------------------------------------------------------------------------
  2957 000009A1 E8EDFFFFFF              IsLeapYear              call    GetYear                                         ;ECX = YYYY
  2958 000009A6 89C8                                            mov     eax,ecx                                         ;EAX = YYYY
  2959 000009A8 31C9                                            xor     ecx,ecx                                         ;assume not leap year
  2960 000009AA A803                                            test    al,00000011b                                    ;multiple of four?
  2961 000009AC 750D                                            jnz     .no                                             ;no, branch
  2962 000009AE B264                                            mov     dl,100                                          ;divisor
  2963 000009B0 F6F2                                            div     dl                                              ;divide by 100
  2964 000009B2 84E4                                            test    ah,ah                                           ;multiple of 100?
  2965 000009B4 7504                                            jnz     .yes                                            ;yes, branch
  2966 000009B6 A803                                            test    al,00000011b                                    ;multiple of 400?
  2967 000009B8 7501                                            jnz     .no                                             ;no, branch
  2968 000009BA 41                      .yes                    inc     ecx                                             ;indicate leap
  2969 000009BB C3                      .no                     ret                                                     ;return
  2970                                  ;-----------------------------------------------------------------------------------------------------------------------
  2971                                  ;
  2972                                  ;       Routine:        PutDateString
  2973                                  ;
  2974                                  ;       Description:    This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2975                                  ;                       structure at ds:ebx.
  2976                                  ;
  2977                                  ;       In:             DS:EBX  DATETIME address
  2978                                  ;                       DS:EDX  output buffer address
  2979                                  ;
  2980                                  ;-----------------------------------------------------------------------------------------------------------------------
  2981 000009BC 51                      PutDateString           push    ecx                                             ;save non-volatile regs
  2982 000009BD 57                                              push    edi                                             ;
  2983 000009BE 06                                              push    es                                              ;
  2984 000009BF 1E                                              push    ds                                              ;store data selector ...
  2985 000009C0 07                                              pop     es                                              ;... in extra segment reg
  2986 000009C1 89D7                                            mov     edi,edx                                         ;output buffer address
  2987 000009C3 B10A                                            mov     cl,10                                           ;divisor
  2988 000009C5 BA30302F00                                      mov     edx,0002F3030h                                  ;ASCIIZ "00/" (reversed)
  2989 000009CA 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month
  2990 000009CE F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  2991 000009D0 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  2992 000009D2 FC                                              cld                                                     ;forward strings
  2993 000009D3 AB                                              stosd                                                   ;store "mm/"nul
  2994 000009D4 4F                                              dec     edi                                             ;address of terminator
  2995 000009D5 0FB64304                                        movzx   eax,byte [ebx+DATETIME.day]                     ;day
  2996 000009D9 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  2997 000009DB 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  2998 000009DD AB                                              stosd                                                   ;store "dd/"nul
  2999 000009DE 4F                                              dec     edi                                             ;address of terminator
  3000 000009DF 0FB64307                                        movzx   eax,byte [ebx+DATETIME.century]                 ;century
  3001 000009E3 F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3002 000009E5 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3003 000009E7 AB                                              stosd                                                   ;store "cc/"null
  3004 000009E8 4F                                              dec     edi                                             ;address of terminator
  3005 000009E9 4F                                              dec     edi                                             ;address of delimiter
  3006 000009EA 0FB64306                                        movzx   eax,byte [ebx+DATETIME.year]                    ;year (yy)
  3007 000009EE F6F1                                            div     cl                                              ;AH = rem; AL = quotient
  3008 000009F0 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3009 000009F2 AA                                              stosb                                                   ;store quotient
  3010 000009F3 88E0                                            mov     al,ah                                           ;remainder
  3011 000009F5 AA                                              stosb                                                   ;store remainder
  3012 000009F6 30C0                                            xor     al,al                                           ;null terminator
  3013 000009F8 AA                                              stosb                                                   ;store terminator
  3014 000009F9 07                                              pop     es                                              ;restore non-volatile regs
  3015 000009FA 5F                                              pop     edi                                             ;
  3016 000009FB 59                                              pop     ecx                                             ;
  3017 000009FC C3                                              ret                                                     ;return
  3018                                  ;-----------------------------------------------------------------------------------------------------------------------
  3019                                  ;
  3020                                  ;       Routine:        PutDayString
  3021                                  ;
  3022                                  ;       Description:    This routine returns an ASCIIZ dd string at ds:edx from the date in the DATETIME
  3023                                  ;                       structure at ds:ebx.
  3024                                  ;
  3025                                  ;       In:             DS:EBX  DATETIME address
  3026                                  ;                       DS:EDX  output buffer address
  3027                                  ;
  3028                                  ;-----------------------------------------------------------------------------------------------------------------------
  3029 000009FD 51                      PutDayString            push    ecx                                             ;save non-volatile regs
  3030 000009FE 0FB64B04                                        movzx   ecx,byte [ebx+DATETIME.day]                     ;day
  3031 00000A02 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3032 00000A04 E87C040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3033 00000A09 59                                              pop     ecx                                             ;
  3034 00000A0A C3                                              ret                                                     ;return
  3035                                  ;-----------------------------------------------------------------------------------------------------------------------
  3036                                  ;
  3037                                  ;       Routine:        PutHourString
  3038                                  ;
  3039                                  ;       Description:    This routine returns an ASCIIZ hh string at ds:edx from the date in the DATETIME
  3040                                  ;                       structure at ds:ebx.
  3041                                  ;
  3042                                  ;       In:             DS:EBX  DATETIME address
  3043                                  ;                       DS:EDX  output buffer address
  3044                                  ;
  3045                                  ;-----------------------------------------------------------------------------------------------------------------------
  3046 00000A0B 51                      PutHourString           push    ecx                                             ;save non-volatile regs
  3047 00000A0C 0FB64B02                                        movzx   ecx,byte [ebx+DATETIME.hour]                    ;hour
  3048 00000A10 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3049 00000A12 E86E040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3050 00000A17 59                                              pop     ecx                                             ;
  3051 00000A18 C3                                              ret                                                     ;return
  3052                                  ;-----------------------------------------------------------------------------------------------------------------------
  3053                                  ;
  3054                                  ;       Routine:        PutMinuteString
  3055                                  ;
  3056                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3057                                  ;                       structure at ds:ebx.
  3058                                  ;
  3059                                  ;       In:             DS:EBX  DATETIME address
  3060                                  ;                       DS:EDX  output buffer address
  3061                                  ;
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063 00000A19 51                      PutMinuteString         push    ecx                                             ;save non-volatile regs
  3064 00000A1A 0FB64B01                                        movzx   ecx,byte [ebx+DATETIME.minute]                  ;minute
  3065 00000A1E B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3066 00000A20 E860040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3067 00000A25 59                                              pop     ecx                                             ;
  3068 00000A26 C3                                              ret                                                     ;return
  3069                                  ;-----------------------------------------------------------------------------------------------------------------------
  3070                                  ;
  3071                                  ;       Routine:        PutMonthString
  3072                                  ;
  3073                                  ;       Description:    This routine returns an ASCIIZ mm string at ds:edx from the date in the DATETIME
  3074                                  ;                       structure at ds:ebx.
  3075                                  ;
  3076                                  ;       In:             DS:EBX  DATETIME address
  3077                                  ;                       DS:EDX  output buffer address
  3078                                  ;
  3079                                  ;-----------------------------------------------------------------------------------------------------------------------
  3080 00000A27 51                      PutMonthString          push    ecx                                             ;save non-volatile regs
  3081 00000A28 0FB64B05                                        movzx   ecx,byte [ebx+DATETIME.month]                   ;month
  3082 00000A2C B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3083 00000A2E E852040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3084 00000A33 59                                              pop     ecx                                             ;
  3085 00000A34 C3                                              ret                                                     ;return
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  ;
  3088                                  ;       Routine:        PutMonthNameString
  3089                                  ;
  3090                                  ;       Description:    This routine returns an ASCIIZ name(mm) string at ds:edx from the date in the DATETIME
  3091                                  ;                       structure at ds:ebx.
  3092                                  ;
  3093                                  ;       In:             DS:EBX  DATETIME address
  3094                                  ;                       DS:EDX  output buffer address
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097 00000A35 56                      PutMonthNameString      push    esi                                             ;save non-volatile regs
  3098 00000A36 57                                              push    edi                                             ;
  3099 00000A37 1E                                              push    ds                                              ;
  3100 00000A38 06                                              push    es                                              ;
  3101 00000A39 1E                                              push    ds                                              ;load data selector ...
  3102 00000A3A 07                                              pop     es                                              ;... into extra segment
  3103 00000A3B 89D7                                            mov     edi,edx                                         ;output buffer address
  3104 00000A3D 0FB64305                                        movzx   eax,byte [ebx+DATETIME.month]                   ;month (1-12)
  3105 00000A41 48                                              dec     eax                                             ;month (0-11)
  3106 00000A42 C1E002                                          shl     eax,2                                           ;offset into month name lookup table
  3107 00000A45 0E                                              push    cs                                              ;load code selector ...
  3108 00000A46 1F                                              pop     ds                                              ;... into data segment
  3109 00000A47 8BB0[880B0000]                                  mov     esi,[tMonthNames+eax]                           ;month name address
  3110 00000A4D FC                                              cld                                                     ;forward strings
  3111 00000A4E AC                      .10                     lodsb                                                   ;name character
  3112 00000A4F AA                                              stosb                                                   ;store in output buffer
  3113 00000A50 84C0                                            test    al,al                                           ;end of string?
  3114 00000A52 75FA                                            jnz     .10                                             ;no, continue
  3115 00000A54 07                                              pop     es                                              ;restore non-volatile regs
  3116 00000A55 1F                                              pop     ds                                              ;
  3117 00000A56 5F                                              pop     edi                                             ;
  3118 00000A57 5E                                              pop     esi                                             ;
  3119 00000A58 C3                                              ret                                                     ;return
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121                                  ;
  3122                                  ;       Routine:        PutSecondString
  3123                                  ;
  3124                                  ;       Description:    This routine returns an ASCIIZ ss string at ds:edx from the date in the DATETIME
  3125                                  ;                       structure at ds:ebx.
  3126                                  ;
  3127                                  ;       In:             DS:EBX  DATETIME address
  3128                                  ;                       DS:EDX  output buffer address
  3129                                  ;
  3130                                  ;-----------------------------------------------------------------------------------------------------------------------
  3131 00000A59 51                      PutSecondString         push    ecx                                             ;save non-volatile regs
  3132 00000A5A 0FB60B                                          movzx   ecx,byte [ebx+DATETIME.second]                  ;second
  3133 00000A5D B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3134 00000A5F E821040000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3135 00000A64 59                                              pop     ecx                                             ;
  3136 00000A65 C3                                              ret                                                     ;return
  3137                                  ;-----------------------------------------------------------------------------------------------------------------------
  3138                                  ;
  3139                                  ;       Routine:        PutTimeString
  3140                                  ;
  3141                                  ;       Description:    This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  3142                                  ;                       structure at ds:ebx.
  3143                                  ;
  3144                                  ;       In:             DS:EBX  DATETIME address
  3145                                  ;                       DS:EDX  output buffer address
  3146                                  ;
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148 00000A66 51                      PutTimeString           push    ecx                                             ;save non-volatile regs
  3149 00000A67 57                                              push    edi                                             ;
  3150 00000A68 06                                              push    es                                              ;
  3151 00000A69 1E                                              push    ds                                              ;store data selector ...
  3152 00000A6A 07                                              pop     es                                              ;... in extra segment reg
  3153 00000A6B 89D7                                            mov     edi,edx                                         ;output buffer address
  3154 00000A6D B10A                                            mov     cl,10                                           ;divisor
  3155 00000A6F BA30303A00                                      mov     edx,003a3030h                                   ;ASCIIZ "00:" (reversed)
  3156 00000A74 0FB64302                                        movzx   eax,byte [ebx+DATETIME.hour]                    ;hour
  3157 00000A78 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3158 00000A7A 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3159 00000A7C FC                                              cld                                                     ;forward strings
  3160 00000A7D AB                                              stosd                                                   ;store "mm/"nul
  3161 00000A7E 4F                                              dec     edi                                             ;address of terminator
  3162 00000A7F 0FB64301                                        movzx   eax,byte [ebx+DATETIME.minute]                  ;minute
  3163 00000A83 F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3164 00000A85 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3165 00000A87 AB                                              stosd                                                   ;store "dd/"nul
  3166 00000A88 4F                                              dec     edi                                             ;address of terminator
  3167 00000A89 0FB603                                          movzx   eax,byte [ebx+DATETIME.second]                  ;second
  3168 00000A8C F6F1                                            div     cl                                              ;ah = rem; al = quotient
  3169 00000A8E 09D0                                            or      eax,edx                                         ;apply ASCII zones and delimiter
  3170 00000A90 AA                                              stosb                                                   ;store quotient
  3171 00000A91 88E0                                            mov     al,ah                                           ;remainder
  3172 00000A93 AA                                              stosb                                                   ;store remainder
  3173 00000A94 30C0                                            xor     al,al                                           ;null terminator
  3174 00000A96 AA                                              stosb                                                   ;store terminator
  3175 00000A97 07                                              pop     es                                              ;restore non-volatile regs
  3176 00000A98 5F                                              pop     edi                                             ;
  3177 00000A99 59                                              pop     ecx                                             ;
  3178 00000A9A C3                                              ret                                                     ;return
  3179                                  ;-----------------------------------------------------------------------------------------------------------------------
  3180                                  ;
  3181                                  ;       Routine:        PutWeekdayString
  3182                                  ;
  3183                                  ;       Description:    This routine returns an ASCIIZ weekday string at ds:edx from the date in the DATETIME
  3184                                  ;                       structure at ds:ebx.
  3185                                  ;
  3186                                  ;       In:             DS:EBX  DATETIME address
  3187                                  ;                       DS:EDX  output buffer address
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190 00000A9B 51                      PutWeekdayString        push    ecx                                             ;save non-volatile regs
  3191 00000A9C 0FB64B03                                        movzx   ecx,byte [ebx+DATETIME.weekday]                 ;weekday
  3192 00000AA0 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3193 00000AA2 E8DE030000                                      call    UnsignedToDecimalString                         ;store ASCII decimal string
  3194 00000AA7 59                                              pop     ecx                                             ;
  3195 00000AA8 C3                                              ret                                                     ;return
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  ;
  3198                                  ;       Routine:        PutWeekdayNameString
  3199                                  ;
  3200                                  ;       Description:    This routine returns an ASCIIZ name(weekday) string at ds:edx from the date in the DATETIME
  3201                                  ;                       structure at ds:ebx.
  3202                                  ;
  3203                                  ;       In:             DS:EBX  DATETIME address
  3204                                  ;                       DS:EDX  output buffer address
  3205                                  ;
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207 00000AA9 56                      PutWeekdayNameString    push    esi                                             ;save non-volatile regs
  3208 00000AAA 57                                              push    edi                                             ;
  3209 00000AAB 1E                                              push    ds                                              ;
  3210 00000AAC 06                                              push    es                                              ;
  3211 00000AAD 1E                                              push    ds                                              ;load data selector ...
  3212 00000AAE 07                                              pop     es                                              ;... into extra segment
  3213 00000AAF 89D7                                            mov     edi,edx                                         ;output buffer address
  3214 00000AB1 0FB64303                                        movzx   eax,byte [ebx+DATETIME.weekday]                 ;weekday (0-6)
  3215 00000AB5 C1E002                                          shl     eax,2                                           ;offset into day name lookup table
  3216 00000AB8 0E                                              push    cs                                              ;load code selector ...
  3217 00000AB9 1F                                              pop     ds                                              ;... into data segment
  3218 00000ABA 8BB0[6C0B0000]                                  mov     esi,[tDayNames+eax]                             ;day name address
  3219 00000AC0 FC                                              cld                                                     ;forward strings
  3220 00000AC1 AC                      .10                     lodsb                                                   ;name character
  3221 00000AC2 AA                                              stosb                                                   ;store in output buffer
  3222 00000AC3 84C0                                            test    al,al                                           ;end of string?
  3223 00000AC5 75FA                                            jnz     .10                                             ;no, continue
  3224 00000AC7 07                                              pop     es                                              ;restore non-volatile regs
  3225 00000AC8 1F                                              pop     ds                                              ;
  3226 00000AC9 5F                                              pop     edi                                             ;
  3227 00000ACA 5E                                              pop     esi                                             ;
  3228 00000ACB C3                                              ret                                                     ;return
  3229                                  ;-----------------------------------------------------------------------------------------------------------------------
  3230                                  ;
  3231                                  ;       Routine:        PutYearString
  3232                                  ;
  3233                                  ;       Description:    This routine returns an ASCIIZ yyyy string at ds:edx from the date in the DATETIME
  3234                                  ;                       structure at ds:ebx.
  3235                                  ;
  3236                                  ;       In:             DS:EBX  DATETIME address
  3237                                  ;                       DS:EDX  output buffer address
  3238                                  ;
  3239                                  ;-----------------------------------------------------------------------------------------------------------------------
  3240 00000ACC 51                      PutYearString           push    ecx                                             ;save non-volatile regs
  3241 00000ACD E8C1FEFFFF                                      call    GetYear                                         ;ECX = YYYY
  3242 00000AD2 B701                                            mov     bh,1                                            ;trim leading zeros; no commas
  3243 00000AD4 E8AC030000                                      call    UnsignedToDecimalString                         ;store decimal string at DS:EDX
  3244 00000AD9 59                                              pop     ecx                                             ;restore non-volatile regs
  3245 00000ADA C3                                              ret                                                     ;return
  3246                                  ;-----------------------------------------------------------------------------------------------------------------------
  3247                                  ;
  3248                                  ;       Day Names
  3249                                  ;
  3250                                  ;-----------------------------------------------------------------------------------------------------------------------
  3251 00000ADB 53756E64617900          czSunday                db      "Sunday",0
  3252 00000AE2 4D6F6E64617900          czMonday                db      "Monday",0
  3253 00000AE9 5475657364617900        czTuesday               db      "Tuesday",0
  3254 00000AF1 5765646E6573646179-     czWednesday             db      "Wednesday",0
  3254 00000AFA 00                 
  3255 00000AFB 546875727364617900      czThursday              db      "Thursday",0
  3256 00000B04 46726964617900          czFriday                db      "Friday",0
  3257 00000B0B 536174757264617900      czSaturday              db      "Saturday",0
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;       Month Names
  3261                                  ;
  3262                                  ;-----------------------------------------------------------------------------------------------------------------------
  3263 00000B14 4A616E7561727900        czJanuary               db      "January",0
  3264 00000B1C 466562727561727900      czFebruary              db      "February",0
  3265 00000B25 4D6172636800            czMarch                 db      "March",0
  3266 00000B2B 417072696C00            czApril                 db      "April",0
  3267 00000B31 4D617900                czMay                   db      "May",0
  3268 00000B35 4A756E6500              czJune                  db      "June",0
  3269 00000B3A 4A756C7900              czJuly                  db      "July",0
  3270 00000B3F 41756775737400          czAugust                db      "August",0
  3271 00000B46 53657074656D626572-     czSeptember             db      "September",0
  3271 00000B4F 00                 
  3272 00000B50 4F63746F62657200        czOctober               db      "October",0
  3273 00000B58 4E6F76656D62657200      czNovember              db      "November",0
  3274 00000B61 446563656D62657200      czDecember              db      "December",0
  3275                                  ;-----------------------------------------------------------------------------------------------------------------------
  3276                                  ;
  3277                                  ;       Day Names Lookup Table
  3278                                  ;
  3279                                  ;-----------------------------------------------------------------------------------------------------------------------
  3280 00000B6A 90<rept>                                        align   4
  3281                                  tDayNames               equ     $
  3282 00000B6C [DB0A0000]                                      dd      czSunday
  3283 00000B70 [E20A0000]                                      dd      czMonday
  3284 00000B74 [E90A0000]                                      dd      czTuesday
  3285 00000B78 [F10A0000]                                      dd      czWednesday
  3286 00000B7C [FB0A0000]                                      dd      czThursday
  3287 00000B80 [040B0000]                                      dd      czFriday
  3288 00000B84 [0B0B0000]                                      dd      czSaturday
  3289                                  EDAYNAMESTBLL           equ     ($-tDayNames)
  3290                                  EDAYNAMESTBLCNT         equ     EDAYNAMESTBLL/4
  3291                                  ;-----------------------------------------------------------------------------------------------------------------------
  3292                                  ;
  3293                                  ;       Month Names Lookup Table
  3294                                  ;
  3295                                  ;-----------------------------------------------------------------------------------------------------------------------
  3296                                                          align   4
  3297                                  tMonthNames             equ     $
  3298 00000B88 [140B0000]                                      dd      czJanuary
  3299 00000B8C [1C0B0000]                                      dd      czFebruary
  3300 00000B90 [250B0000]                                      dd      czMarch
  3301 00000B94 [2B0B0000]                                      dd      czApril
  3302 00000B98 [310B0000]                                      dd      czMay
  3303 00000B9C [350B0000]                                      dd      czJune
  3304 00000BA0 [3A0B0000]                                      dd      czJuly
  3305 00000BA4 [3F0B0000]                                      dd      czAugust
  3306 00000BA8 [460B0000]                                      dd      czSeptember
  3307 00000BAC [500B0000]                                      dd      czOctober
  3308 00000BB0 [580B0000]                                      dd      czNovember
  3309 00000BB4 [610B0000]                                      dd      czDecember
  3310                                  EMONTHNAMESTBLL         equ     ($-tMonthNames)
  3311                                  EMONTHNAMESTBLCNT       equ     EMONTHNAMESTBLL/4
  3312                                  ;=======================================================================================================================
  3313                                  ;
  3314                                  ;       String Helper Routines
  3315                                  ;
  3316                                  ;       CompareMemory
  3317                                  ;       UpperCaseString
  3318                                  ;
  3319                                  ;=======================================================================================================================
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  ;
  3322                                  ;       Routine:        CompareMemory
  3323                                  ;
  3324                                  ;       Description:    This routine compares two byte arrays.
  3325                                  ;
  3326                                  ;       In:             DS:EDX  first source address
  3327                                  ;                       DS:EBX  second source address
  3328                                  ;                       ECX     comparison length
  3329                                  ;
  3330                                  ;       Out:            EDX     first source address
  3331                                  ;                       EBX     second source address
  3332                                  ;                       ECX     0       array 1 = array 2
  3333                                  ;                               <0      array 1 < array 2
  3334                                  ;                               >0      array 1 > array 2
  3335                                  ;
  3336                                  ;-----------------------------------------------------------------------------------------------------------------------
  3337 00000BB8 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  3338 00000BB9 57                                              push    edi                                             ;
  3339 00000BBA 06                                              push    es                                              ;
  3340 00000BBB 1E                                              push    ds                                              ;copy DS
  3341 00000BBC 07                                              pop     es                                              ;... to ES
  3342 00000BBD 89D6                                            mov     esi,edx                                         ;first source address
  3343 00000BBF 89DF                                            mov     edi,ebx                                         ;second source address
  3344 00000BC1 FC                                              cld                                                     ;forward strings
  3345 00000BC2 F3A6                                            rep     cmpsb                                           ;compare bytes
  3346 00000BC4 B000                                            mov     al,0                                            ;default result
  3347 00000BC6 7406                                            jz      .10                                             ;branch if arrays equal
  3348 00000BC8 B001                                            mov     al,1                                            ;positive result
  3349 00000BCA 7302                                            jnc     .10                                             ;branch if target > source
  3350 00000BCC B0FF                                            mov     al,-1                                           ;negative result
  3351 00000BCE 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  3352 00000BD1 07                                              pop     es                                              ;restore non-volatile regs
  3353 00000BD2 5F                                              pop     edi                                             ;
  3354 00000BD3 5E                                              pop     esi                                             ;
  3355 00000BD4 C3                                              ret                                                     ;return
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                  ;
  3358                                  ;       Routine:        UpperCaseString
  3359                                  ;
  3360                                  ;       Description:    This routine places all characters in the given string to upper case.
  3361                                  ;
  3362                                  ;       In:             DS:EDX  string address
  3363                                  ;
  3364                                  ;       Out:            EDX     string address
  3365                                  ;
  3366                                  ;-----------------------------------------------------------------------------------------------------------------------
  3367 00000BD5 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  3368 00000BD6 89D6                                            mov     esi,edx                                         ;string address
  3369 00000BD8 FC                                              cld                                                     ;forward strings
  3370 00000BD9 AC                      .10                     lodsb                                                   ;string character
  3371 00000BDA 84C0                                            test    al,al                                           ;null?
  3372 00000BDC 740F                                            jz      .20                                             ;yes, skip ahead
  3373 00000BDE 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  3374 00000BE0 72F7                                            jb      .10                                             ;no, continue
  3375 00000BE2 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  3376 00000BE4 77F3                                            ja      .10                                             ;no, continue
  3377 00000BE6 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  3378 00000BE8 8846FF                                          mov     [esi-1],al                                      ;upper character
  3379 00000BEB EBEC                                            jmp     .10                                             ;continue
  3380 00000BED 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3381 00000BEE C3                                              ret                                                     ;return
  3382                                  ;=======================================================================================================================
  3383                                  ;
  3384                                  ;       Console Helper Routines
  3385                                  ;
  3386                                  ;       FirstConsoleColumn
  3387                                  ;       GetConsoleChar
  3388                                  ;       GetConsoleString
  3389                                  ;       NextConsoleColumn
  3390                                  ;       NextConsoleRow
  3391                                  ;       PreviousConsoleColumn
  3392                                  ;       PutConsoleChar
  3393                                  ;       PutConsoleHexByte
  3394                                  ;       PutConsoleHexDword
  3395                                  ;       PutConsoleHexWord
  3396                                  ;       PutConsoleOIAChar
  3397                                  ;       PutConsoleOIAShift
  3398                                  ;       PutConsoleString
  3399                                  ;       Yield
  3400                                  ;
  3401                                  ;=======================================================================================================================
  3402                                  ;-----------------------------------------------------------------------------------------------------------------------
  3403                                  ;
  3404                                  ;       Routine:        FirstConsoleColumn
  3405                                  ;
  3406                                  ;       Description:    This routine resets the console column to start of the row.
  3407                                  ;
  3408                                  ;       In:             DS      OS data selector
  3409                                  ;
  3410                                  ;-----------------------------------------------------------------------------------------------------------------------
  3411 00000BEF 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  3412 00000BF1 A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  3413 00000BF6 C3                                              ret                                                     ;return
  3414                                  ;-----------------------------------------------------------------------------------------------------------------------
  3415                                  ;
  3416                                  ;       Routine:        GetConsoleChar
  3417                                  ;
  3418                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  3419                                  ;
  3420                                  ;       Out:            AL      ASCII character code
  3421                                  ;                       AH      keyboard scan code
  3422                                  ;
  3423                                  ;-----------------------------------------------------------------------------------------------------------------------
  3424 00000BF7 E868020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  3425 00000BFC E848030000              GetConsoleChar          call    GetMessage                                      ;get the next message
  3426 00000C01 09C0                                            or      eax,eax                                         ;do we have a message?
  3427 00000C03 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  3428 00000C05 50                                              push    eax                                             ;save key codes
  3429 00000C06 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  3430 00000C0B 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  3431 00000C10 58                                              pop     eax                                             ;restore key codes
  3432 00000C11 75E9                                            jne     GetConsoleChar                                  ;no, try again
  3433 00000C13 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  3434 00000C18 C3                                              ret                                                     ;return
  3435                                  ;-----------------------------------------------------------------------------------------------------------------------
  3436                                  ;
  3437                                  ;       Routine:        GetConsoleString
  3438                                  ;
  3439                                  ;       Description:    This routine accepts keyboard input into a buffer.
  3440                                  ;
  3441                                  ;       In:             DS:EDX  target buffer address
  3442                                  ;                       ECX     maximum number of characters to accept
  3443                                  ;                       BH      echo to terminal
  3444                                  ;                       BL      terminating character
  3445                                  ;
  3446                                  ;-----------------------------------------------------------------------------------------------------------------------
  3447 00000C19 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  3448 00000C1A 56                                              push    esi                                             ;
  3449 00000C1B 57                                              push    edi                                             ;
  3450 00000C1C 06                                              push    es                                              ;
  3451 00000C1D 1E                                              push    ds                                              ;load data segment selector ...
  3452 00000C1E 07                                              pop     es                                              ;... into extra segment register
  3453 00000C1F 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3454 00000C21 51                                              push    ecx                                             ;save maximum characters
  3455 00000C22 30C0                                            xor     al,al                                           ;zero register
  3456 00000C24 FC                                              cld                                                     ;forward strings
  3457 00000C25 F3AA                                            rep     stosb                                           ;zero fill buffer
  3458 00000C27 59                                              pop     ecx                                             ;maximum characters
  3459 00000C28 89D7                                            mov     edi,edx                                         ;edi = target buffer
  3460 00000C2A 89D6                                            mov     esi,edx                                         ;esi = target buffer
  3461 00000C2C E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  3462 00000C2E E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  3463 00000C33 38D8                                            cmp     al,bl                                           ;is this the terminator?
  3464 00000C35 7445                                            je      .50                                             ;yes, exit
  3465 00000C37 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  3466 00000C39 7521                                            jne     .30                                             ;no, skip ahead
  3467 00000C3B 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  3468 00000C3D 74EF                                            je      .20                                             ;yes, get next character
  3469 00000C3F 4F                                              dec     edi                                             ;backup target pointer
  3470 00000C40 C60700                                          mov     byte [edi],0                                    ;zero previous character
  3471 00000C43 41                                              inc     ecx                                             ;increment remaining chars
  3472 00000C44 F6C701                                          test    bh,1                                            ;echo to console?
  3473 00000C47 74E5                                            jz      .20                                             ;no, get next character
  3474 00000C49 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  3475 00000C4E B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3476 00000C50 E891000000                                      call    PutConsoleChar                                  ;write space to console
  3477 00000C55 E8D9030000                                      call    PlaceCursor                                     ;position the cursor
  3478 00000C5A EBD2                                            jmp     .20                                             ;get next character
  3479 00000C5C 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  3480 00000C5E 72CE                                            jb      .20                                             ;no, get another character
  3481 00000C60 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  3482 00000C62 77CA                                            ja      .20                                             ;no, get another character
  3483 00000C64 AA                                              stosb                                                   ;store character in buffer
  3484 00000C65 F6C701                                          test    bh,1                                            ;echo to console?
  3485 00000C68 740F                                            jz      .40                                             ;no, skip ahead
  3486 00000C6A E877000000                                      call    PutConsoleChar                                  ;write character to console
  3487 00000C6F E810000000                                      call    NextConsoleColumn                               ;advance console position
  3488 00000C74 E8BA030000                                      call    PlaceCursor                                     ;position the cursor
  3489 00000C79 49                      .40                     dec     ecx                                             ;decrement remaining chars
  3490 00000C7A EBB0                                            jmp     .10                                             ;next
  3491 00000C7C 30C0                    .50                     xor     al,al                                           ;null
  3492 00000C7E AA                                              stosb                                                   ;terminate buffer
  3493 00000C7F 07                                              pop     es                                              ;restore non-volatile regs
  3494 00000C80 5F                                              pop     edi                                             ;
  3495 00000C81 5E                                              pop     esi                                             ;
  3496 00000C82 59                                              pop     ecx                                             ;
  3497 00000C83 C3                                              ret                                                     ;return
  3498                                  ;-----------------------------------------------------------------------------------------------------------------------
  3499                                  ;
  3500                                  ;       Routine:        NextConsoleColumn
  3501                                  ;
  3502                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  3503                                  ;                       incremented if the end of the current row is reached.
  3504                                  ;
  3505                                  ;       In:             DS      OS data selector
  3506                                  ;
  3507                                  ;-----------------------------------------------------------------------------------------------------------------------
  3508 00000C84 A004080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  3509 00000C89 FEC0                                            inc     al                                              ;increment column
  3510 00000C8B A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  3511 00000C90 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  3512 00000C92 720A                                            jb      .10                                             ;no, skip ahead
  3513 00000C94 E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  3514 00000C99 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  3515 00000C9E C3                      .10                     ret                                                     ;return
  3516                                  ;-----------------------------------------------------------------------------------------------------------------------
  3517                                  ;
  3518                                  ;       Routine:        NextConsoleRow
  3519                                  ;
  3520                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  3521                                  ;
  3522                                  ;       In:             DS      OS data selector
  3523                                  ;
  3524                                  ;-----------------------------------------------------------------------------------------------------------------------
  3525 00000C9F A005080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  3526 00000CA4 FEC0                                            inc     al                                              ;increment row
  3527 00000CA6 A205080000                                      mov     [wbConsoleRow],al                               ;save row
  3528 00000CAB 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  3529 00000CAD 7211                                            jb      .10                                             ;no, skip ahead
  3530 00000CAF E82D030000                                      call    ScrollConsoleRow                                ;scroll up one row
  3531 00000CB4 A005080000                                      mov     al,[wbConsoleRow]                               ;row
  3532 00000CB9 FEC8                                            dec     al                                              ;decrement row
  3533 00000CBB A205080000                                      mov     [wbConsoleRow],al                               ;save row
  3534 00000CC0 C3                      .10                     ret                                                     ;return
  3535                                  ;-----------------------------------------------------------------------------------------------------------------------
  3536                                  ;
  3537                                  ;       Routine:        PreviousConsoleColumn
  3538                                  ;
  3539                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3540                                  ;                       the column is set to the last position in the row and the row is decremented.
  3541                                  ;
  3542                                  ;       In:             DS      OS data selector
  3543                                  ;
  3544                                  ;-----------------------------------------------------------------------------------------------------------------------
  3545 00000CC1 A004080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3546 00000CC6 08C0                                            or      al,al                                           ;start of row?
  3547 00000CC8 7514                                            jnz     .10                                             ;no, skip ahead
  3548 00000CCA 8A2505080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3549 00000CD0 08E4                                            or      ah,ah                                           ;top of screen?
  3550 00000CD2 7411                                            jz      .20                                             ;yes, exit with no change
  3551 00000CD4 FECC                                            dec     ah                                              ;decrement row
  3552 00000CD6 882505080000                                    mov     [wbConsoleRow],ah                               ;save row
  3553 00000CDC B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3554 00000CDE FEC8                    .10                     dec     al                                              ;decrement column
  3555 00000CE0 A204080000                                      mov     [wbConsoleColumn],al                            ;save column
  3556 00000CE5 C3                      .20                     ret                                                     ;return
  3557                                  ;-----------------------------------------------------------------------------------------------------------------------
  3558                                  ;
  3559                                  ;       Routine:        PutConsoleChar
  3560                                  ;
  3561                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3562                                  ;
  3563                                  ;       In:             AL      ASCII character
  3564                                  ;                       DS      OS data selector
  3565                                  ;
  3566                                  ;-----------------------------------------------------------------------------------------------------------------------
  3567 00000CE6 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3568 00000CE7 06                                              push    es                                              ;
  3569 00000CE8 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3570 00000CEA 07                                              pop     es                                              ;... into extra segment reg
  3571 00000CEB 8A0D04080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3572 00000CF1 8A2D05080000                                    mov     ch,[wbConsoleRow]                               ;row
  3573 00000CF7 E811030000                                      call    SetConsoleChar                                  ;put character at row, column
  3574 00000CFC 07                                              pop     es                                              ;restore non-volatile regs
  3575 00000CFD 59                                              pop     ecx                                             ;
  3576 00000CFE C3                                              ret                                                     ;return
  3577                                  ;-----------------------------------------------------------------------------------------------------------------------
  3578                                  ;
  3579                                  ;       Routine:        PutConsoleHexByte
  3580                                  ;
  3581                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3582                                  ;
  3583                                  ;       In:             AL      byte value
  3584                                  ;                       CL      column
  3585                                  ;                       CH      row
  3586                                  ;                       DS      OS data selector
  3587                                  ;                       ES      CGA selector
  3588                                  ;
  3589                                  ;-----------------------------------------------------------------------------------------------------------------------
  3590 00000CFF 53                      PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3591 00000D00 88C3                                            mov     bl,al                                           ;save byte value
  3592 00000D02 C0E804                                          shr     al,4                                            ;hi-order nybble
  3593 00000D05 0C30                                            or      al,030h                                         ;apply ASCII zone
  3594 00000D07 3C3A                                            cmp     al,03ah                                         ;numeric?
  3595 00000D09 7202                                            jb      .10                                             ;yes, skip ahead
  3596 00000D0B 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3597 00000D0D E8FB020000              .10                     call    SetConsoleChar                                  ;display ASCII character
  3598 00000D12 88D8                                            mov     al,bl                                           ;byte value
  3599 00000D14 240F                                            and     al,0fh                                          ;lo-order nybble
  3600 00000D16 0C30                                            or      al,30h                                          ;apply ASCII zone
  3601 00000D18 3C3A                                            cmp     al,03ah                                         ;numeric?
  3602 00000D1A 7202                                            jb      .20                                             ;yes, skip ahead
  3603 00000D1C 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3604 00000D1E E8EA020000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3605 00000D23 5B                                              pop     ebx                                             ;restore non-volatile regs
  3606 00000D24 C3                                              ret                                                     ;return
  3607                                  ;-----------------------------------------------------------------------------------------------------------------------
  3608                                  ;
  3609                                  ;       Routine:        PutConsoleHexDword
  3610                                  ;
  3611                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3612                                  ;
  3613                                  ;       In:             EAX     value
  3614                                  ;                       CL      column
  3615                                  ;                       CH      row
  3616                                  ;                       DS      OS data selector
  3617                                  ;                       ES      CGA selector
  3618                                  ;
  3619                                  ;-----------------------------------------------------------------------------------------------------------------------
  3620 00000D25 50                      PutConsoleHexDword      push    eax
  3621 00000D26 C1E810                                          shr     eax,16
  3622 00000D29 E807000000                                      call    PutConsoleHexWord
  3623 00000D2E 58                                              pop     eax
  3624 00000D2F E801000000                                      call    PutConsoleHexWord
  3625 00000D34 C3                                              ret
  3626                                  ;-----------------------------------------------------------------------------------------------------------------------
  3627                                  ;
  3628                                  ;       Routine:        PutConsoleHexWord
  3629                                  ;
  3630                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3631                                  ;
  3632                                  ;       In:             EAX     value
  3633                                  ;                       CL      column
  3634                                  ;                       CH      row
  3635                                  ;                       DS      OS data selector
  3636                                  ;                       ES      CGA selector
  3637                                  ;
  3638                                  ;-----------------------------------------------------------------------------------------------------------------------
  3639 00000D35 50                      PutConsoleHexWord       push    eax
  3640 00000D36 C1E808                                          shr     eax,8
  3641 00000D39 E8C1FFFFFF                                      call    PutConsoleHexByte
  3642 00000D3E 58                                              pop     eax
  3643 00000D3F E8BBFFFFFF                                      call    PutConsoleHexByte
  3644 00000D44 C3                                              ret
  3645                                  ;-----------------------------------------------------------------------------------------------------------------------
  3646                                  ;
  3647                                  ;       Routine:        PutConsoleOIAChar
  3648                                  ;
  3649                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3650                                  ;
  3651                                  ;       In:             DS      OS data selector
  3652                                  ;
  3653                                  ;-----------------------------------------------------------------------------------------------------------------------
  3654 00000D45 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3655 00000D46 51                                              push    ecx                                             ;
  3656 00000D47 56                                              push    esi                                             ;
  3657 00000D48 1E                                              push    ds                                              ;
  3658 00000D49 06                                              push    es                                              ;
  3659 00000D4A 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3660 00000D4C 1F                                              pop     ds                                              ;... into data segment register
  3661 00000D4D 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3662 00000D4F 07                                              pop     es                                              ;... into extra segment register
  3663 00000D50 BE09080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3664 00000D55 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3665 00000D57 B300                                            mov     bl,0                                            ;starting column
  3666 00000D59 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3667 00000D5E 51                      .10                     push    ecx                                             ;save remaining count
  3668 00000D5F 89D9                                            mov     ecx,ebx                                         ;row, column
  3669 00000D61 AC                                              lodsb                                                   ;read scan code
  3670 00000D62 08C0                                            or      al,al                                           ;scan code present?
  3671 00000D64 7407                                            jz      .20                                             ;no, skip ahead
  3672 00000D66 E894FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3673 00000D6B EB0E                                            jmp     .30                                             ;continue
  3674 00000D6D B020                    .20                     mov     al,' '                                          ;ASCII space
  3675 00000D6F E899020000                                      call    SetConsoleChar                                  ;display space
  3676 00000D74 B020                                            mov     al,' '                                          ;ASCII space
  3677 00000D76 E892020000                                      call    SetConsoleChar                                  ;display space
  3678 00000D7B 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3679 00000D7E 59                                              pop     ecx                                             ;restore remaining
  3680 00000D7F E2DD                                            loop    .10                                             ;next code
  3681 00000D81 A00F080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3682 00000D86 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3683 00000D88 720D                                            jb      .40                                             ;no, skip ahead
  3684 00000D8A 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3685 00000D8C 7709                                            ja      .40                                             ;no, skip ahead
  3686 00000D8E 88FD                                            mov     ch,bh                                           ;OIA row
  3687 00000D90 B128                                            mov     cl,40                                           ;character display column
  3688 00000D92 E876020000                                      call    SetConsoleChar                                  ;display ASCII character
  3689 00000D97 07                      .40                     pop     es                                              ;restore non-volatile regs
  3690 00000D98 1F                                              pop     ds                                              ;
  3691 00000D99 5E                                              pop     esi                                             ;
  3692 00000D9A 59                                              pop     ecx                                             ;
  3693 00000D9B 5B                                              pop     ebx                                             ;
  3694 00000D9C C3                                              ret                                                     ;return
  3695                                  ;-----------------------------------------------------------------------------------------------------------------------
  3696                                  ;
  3697                                  ;       Routine:        PutConsoleOIAShift
  3698                                  ;
  3699                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3700                                  ;
  3701                                  ;       In:             BL      shift flags
  3702                                  ;                       BH      lock flags
  3703                                  ;                       DS      OS data selector
  3704                                  ;
  3705                                  ;-----------------------------------------------------------------------------------------------------------------------
  3706 00000D9D 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3707 00000D9E 06                                              push    es                                              ;
  3708 00000D9F 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3709 00000DA1 07                                              pop     es                                              ;... into ES register
  3710 00000DA2 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3711 00000DA4 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3712 00000DA6 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3713 00000DA9 7402                                            jz      .10                                             ;no, skip ahead
  3714 00000DAB B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3715 00000DAD B10E                    .10                     mov     cl,14                                           ;indicator column
  3716 00000DAF E859020000                                      call    SetConsoleChar                                  ;display ASCII character
  3717 00000DB4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3718 00000DB6 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3719 00000DB9 7402                                            jz      .20                                             ;no, skip ahead
  3720 00000DBB B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3721 00000DBD B140                    .20                     mov     cl,64                                           ;indicator column
  3722 00000DBF E849020000                                      call    SetConsoleChar                                  ;display ASCII character
  3723 00000DC4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3724 00000DC6 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3725 00000DC9 7402                                            jz      .30                                             ;no, skip ahead
  3726 00000DCB B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3727 00000DCD B10F                    .30                     mov     cl,15                                           ;indicator column
  3728 00000DCF E839020000                                      call    SetConsoleChar                                  ;display ASCII character
  3729 00000DD4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3730 00000DD6 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3731 00000DD9 7402                                            jz      .40                                             ;no, skip ahead
  3732 00000DDB B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3733 00000DDD B13F                    .40                     mov     cl,63                                           ;indicator column
  3734 00000DDF E829020000                                      call    SetConsoleChar                                  ;display ASCII character
  3735 00000DE4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3736 00000DE6 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3737 00000DE9 7402                                            jz      .50                                             ;no, skip ahead
  3738 00000DEB B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3739 00000DED B110                    .50                     mov     cl,16                                           ;indicator column
  3740 00000DEF E819020000                                      call    SetConsoleChar                                  ;display ASCII character
  3741 00000DF4 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3742 00000DF6 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3743 00000DF9 7402                                            jz      .60                                             ;no, skip ahead
  3744 00000DFB B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3745 00000DFD B13E                    .60                     mov     cl,62                                           ;indicator column
  3746 00000DFF E809020000                                      call    SetConsoleChar                                  ;display ASCII character
  3747 00000E04 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3748 00000E06 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3749 00000E09 7402                                            jz      .70                                             ;no, skip ahead
  3750 00000E0B B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3751 00000E0D B14E                    .70                     mov     cl,78                                           ;indicator column
  3752 00000E0F E8F9010000                                      call    SetConsoleChar                                  ;display ASCII character
  3753 00000E14 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3754 00000E16 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3755 00000E19 7402                                            jz      .80                                             ;no, skip ahead
  3756 00000E1B B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3757 00000E1D B14D                    .80                     mov     cl,77                                           ;indicator column
  3758 00000E1F E8E9010000                                      call    SetConsoleChar                                  ;display ASCII character
  3759 00000E24 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3760 00000E26 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3761 00000E29 7402                                            jz      .90                                             ;no, skip ahead
  3762 00000E2B B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3763 00000E2D B14C                    .90                     mov     cl,76                                           ;indicator column
  3764 00000E2F E8D9010000                                      call    SetConsoleChar                                  ;display ASCII character
  3765 00000E34 07                                              pop     es                                              ;restore non-volatile regs
  3766 00000E35 59                                              pop     ecx                                             ;
  3767 00000E36 C3                                              ret                                                     ;return
  3768                                  ;-----------------------------------------------------------------------------------------------------------------------
  3769                                  ;
  3770                                  ;       Routine:        PutConsoleString
  3771                                  ;
  3772                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3773                                  ;                       console position as needed.
  3774                                  ;
  3775                                  ;       In:             EDX     source address
  3776                                  ;                       DS      OS data selector
  3777                                  ;
  3778                                  ;-----------------------------------------------------------------------------------------------------------------------
  3779 00000E37 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3780 00000E38 89D6                                            mov     esi,edx                                         ;source address
  3781 00000E3A FC                                              cld                                                     ;forward strings
  3782 00000E3B AC                      .10                     lodsb                                                   ;ASCII character
  3783 00000E3C 08C0                                            or      al,al                                           ;end of string?
  3784 00000E3E 7422                                            jz      .40                                             ;yes, skip ahead
  3785 00000E40 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3786 00000E42 7507                                            jne     .20                                             ;no, skip ahead
  3787 00000E44 E8A6FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3788 00000E49 EBF0                                            jmp     .10                                             ;next character
  3789 00000E4B 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3790 00000E4D 7507                                            jne     .30                                             ;no, skip ahead
  3791 00000E4F E84BFEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3792 00000E54 EBE5                                            jmp     .10                                             ;next character
  3793 00000E56 E88BFEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3794 00000E5B E824FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3795 00000E60 EBD9                                            jmp     .10                                             ;next character
  3796 00000E62 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3797 00000E63 C3                                              ret                                                     ;return
  3798                                  ;-----------------------------------------------------------------------------------------------------------------------
  3799                                  ;
  3800                                  ;       Routine:        Yield
  3801                                  ;
  3802                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3803                                  ;
  3804                                  ;-----------------------------------------------------------------------------------------------------------------------
  3805 00000E64 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3806 00000E65 F4                                              hlt                                                     ;halt until external interrupt
  3807 00000E66 C3                                              ret                                                     ;return
  3808                                  ;=======================================================================================================================
  3809                                  ;
  3810                                  ;       Data-Type Conversion Helper Routines
  3811                                  ;
  3812                                  ;       HexadecimalToUnsigned
  3813                                  ;       UnsignedToDecimalString
  3814                                  ;       UnsignedToHexadecimal
  3815                                  ;
  3816                                  ;=======================================================================================================================
  3817                                  ;-----------------------------------------------------------------------------------------------------------------------
  3818                                  ;
  3819                                  ;       Routine:        HexadecimalToUnsigned
  3820                                  ;
  3821                                  ;       Description:    This routine returns an unsigned integer of the value of the input ASCIIZ hexadecimal string.
  3822                                  ;
  3823                                  ;       Input:          DS:EDX  null-terminated hexadecimal string address
  3824                                  ;
  3825                                  ;       Output:         EAX     unsigned integer value
  3826                                  ;
  3827                                  ;-----------------------------------------------------------------------------------------------------------------------
  3828 00000E67 56                      HexadecimalToUnsigned   push    esi                                             ;save non-volatile regs
  3829 00000E68 89D6                                            mov     esi,edx                                         ;source address
  3830 00000E6A 31D2                                            xor     edx,edx                                         ;zero register
  3831 00000E6C AC                      .10                     lodsb                                                   ;source byte
  3832 00000E6D 84C0                                            test    al,al                                           ;end of string?
  3833 00000E6F 7410                                            jz      .30                                             ;yes, branch
  3834 00000E71 3C39                                            cmp     al,'9'                                          ;hexadecimal?
  3835 00000E73 7602                                            jna     .20                                             ;no, skip ahead
  3836 00000E75 2C37                                            sub     al,37h                                          ;'A' = 41h, less 37h = 0Ah
  3837 00000E77 83E00F                  .20                     and     eax,0fh                                         ;remove ascii zone
  3838 00000E7A C1E204                                          shl     edx,4                                           ;previous total x 16
  3839 00000E7D 01C2                                            add     edx,eax                                         ;add prior value x 16
  3840 00000E7F EBEB                                            jmp     .10                                             ;next
  3841 00000E81 89D0                    .30                     mov     eax,edx                                         ;result
  3842 00000E83 5E                                              pop     esi                                             ;restore non-volatile regs
  3843 00000E84 C3                                              ret                                                     ;return
  3844                                  ;-----------------------------------------------------------------------------------------------------------------------
  3845                                  ;
  3846                                  ;       Routine:        UnsignedToDecimalString
  3847                                  ;
  3848                                  ;       Description:    This routine creates an ASCIIZ string representing the decimal value of 32-bit binary input.
  3849                                  ;
  3850                                  ;       Input:          BH      flags           bit 0: 1 = trim leading zeros
  3851                                  ;                                               bit 1: 1 = include comma grouping delimiters
  3852                                  ;                                               bit 4: 1 = non-zero digit found (internal)
  3853                                  ;                       ECX     32-bit binary
  3854                                  ;                       DS:EDX  output buffer address
  3855                                  ;
  3856                                  ;-----------------------------------------------------------------------------------------------------------------------
  3857 00000E85 53                      UnsignedToDecimalString push    ebx                                             ;save non-volatile regs
  3858 00000E86 51                                              push    ecx                                             ;
  3859 00000E87 57                                              push    edi                                             ;
  3860 00000E88 06                                              push    es                                              ;
  3861 00000E89 1E                                              push    ds                                              ;load data selector
  3862 00000E8A 07                                              pop     es                                              ;... into extra segment reg
  3863 00000E8B 89D7                                            mov     edi,edx                                         ;output buffer address
  3864 00000E8D 80E70F                                          and     bh,00001111b                                    ;zero internal flags
  3865 00000E90 89CA                                            mov     edx,ecx                                         ;binary
  3866 00000E92 B900CA9A3B                                      mov     ecx,1000000000                                  ;10^9 divisor
  3867 00000E97 E871000000                                      call    .30                                             ;divide and store
  3868 00000E9C B900E1F505                                      mov     ecx,100000000                                   ;10^8 divisor
  3869 00000EA1 E855000000                                      call    .10                                             ;divide and store
  3870 00000EA6 B980969800                                      mov     ecx,10000000                                    ;10^7 divisor
  3871 00000EAB E85D000000                                      call    .30                                             ;divide and store
  3872 00000EB0 B940420F00                                      mov     ecx,1000000                                     ;10^6 divisor
  3873 00000EB5 E853000000                                      call    .30                                             ;divide and store
  3874 00000EBA B9A0860100                                      mov     ecx,100000                                      ;10^5 divisor
  3875 00000EBF E837000000                                      call    .10                                             ;divide and store
  3876 00000EC4 B910270000                                      mov     ecx,10000                                       ;10^4 divisor
  3877 00000EC9 E83F000000                                      call    .30                                             ;divide and store
  3878 00000ECE B9E8030000                                      mov     ecx,1000                                        ;10^3 divisor
  3879 00000ED3 E835000000                                      call    .30                                             ;divide and store
  3880 00000ED8 B964000000                                      mov     ecx,100                                         ;10^2 divisor
  3881 00000EDD E819000000                                      call    .10                                             ;divide and store
  3882 00000EE2 B90A000000                                      mov     ecx,10                                          ;10^2 divisor
  3883 00000EE7 E821000000                                      call    .30                                             ;divide and store
  3884 00000EEC 89D0                                            mov     eax,edx                                         ;10^1 remainder
  3885 00000EEE E827000000                                      call    .40                                             ;store
  3886 00000EF3 30C0                                            xor     al,al                                           ;null terminator
  3887 00000EF5 AA                                              stosb
  3888 00000EF6 07                                              pop     es                                              ;restore non-volatile regs
  3889 00000EF7 5F                                              pop     edi                                             ;
  3890 00000EF8 59                                              pop     ecx                                             ;
  3891 00000EF9 5B                                              pop     ebx                                             ;
  3892 00000EFA C3                                              ret                                                     ;return
  3893 00000EFB F6C702                  .10                     test    bh,00000010b                                    ;comma group delims?
  3894 00000EFE 740D                                            jz      .30                                             ;no, branch
  3895 00000F00 F6C701                                          test    bh,00000001b                                    ;trim leading zeros?
  3896 00000F03 7405                                            jz      .20                                             ;no, store delim
  3897 00000F05 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  3898 00000F08 7403                                            jz      .30                                             ;no, branch
  3899 00000F0A B02C                    .20                     mov     al,','                                          ;delimiter
  3900 00000F0C AA                                              stosb                                                   ;store delimiter
  3901 00000F0D 89D0                    .30                     mov     eax,edx                                         ;lo-orer dividend
  3902 00000F0F 31D2                                            xor     edx,edx                                         ;zero hi-order
  3903 00000F11 F7F1                                            div     ecx                                             ;divide by power of 10
  3904 00000F13 84C0                                            test    al,al                                           ;zero?
  3905 00000F15 7407                                            jz      .50                                             ;yes, branch
  3906 00000F17 80CF10                                          or      bh,00010000b                                    ;non-zero found
  3907 00000F1A 0C30                    .40                     or      al,30h                                          ;ASCII zone
  3908 00000F1C AA                                              stosb                                                   ;store digit
  3909 00000F1D C3                                              ret                                                     ;return
  3910 00000F1E F6C701                  .50                     test    bh,00000001b                                    ;trim leading zeros?
  3911 00000F21 74F7                                            jz      .40                                             ;no, store and continue
  3912 00000F23 F6C710                                          test    bh,00010000b                                    ;non-zero found?
  3913 00000F26 75F2                                            jnz     .40                                             ;yes, store and continue
  3914 00000F28 C3                                              ret                                                     ;return
  3915                                  ;-----------------------------------------------------------------------------------------------------------------------
  3916                                  ;
  3917                                  ;       Routine:        UnsignedToHexadecimal
  3918                                  ;
  3919                                  ;       Description:    This routine creates an ASCIIZ string representing the hexadecimal value of binary input
  3920                                  ;
  3921                                  ;       Input:          DS:EDX  output buffer address
  3922                                  ;                       ECX     32-bit binary
  3923                                  ;
  3924                                  ;-----------------------------------------------------------------------------------------------------------------------
  3925 00000F29 57                      UnsignedToHexadecimal   push    edi                                             ;store non-volatile regs
  3926 00000F2A 89D7                                            mov     edi,edx                                         ;output buffer address
  3927 00000F2C 89CA                                            mov     edx,ecx                                         ;32-bit unsigned
  3928 00000F2E 31C9                                            xor     ecx,ecx                                         ;zero register
  3929 00000F30 B108                                            mov     cl,8                                            ;nybble count
  3930 00000F32 C1C204                  .10                     rol     edx,4                                           ;next hi-order nybble in bits 0-3
  3931 00000F35 88D0                                            mov     al,dl                                           ;????bbbb
  3932 00000F37 240F                                            and     al,0fh                                          ;mask out bits 4-7
  3933 00000F39 0C30                                            or      al,30h                                          ;mask in ascii zone
  3934 00000F3B 3C3A                                            cmp     al,3ah                                          ;A through F?
  3935 00000F3D 7202                                            jb      .20                                             ;no, skip ahead
  3936 00000F3F 0407                                            add     al,7                                            ;41h through 46h
  3937 00000F41 AA                      .20                     stosb                                                   ;store hexnum
  3938 00000F42 E2EE                                            loop    .10                                             ;next nybble
  3939 00000F44 30C0                                            xor     al,al                                           ;zero reg
  3940 00000F46 AA                                              stosb                                                   ;null terminate
  3941 00000F47 5F                                              pop     edi                                             ;restore non-volatile regs
  3942 00000F48 C3                                              ret                                                     ;return
  3943                                  ;=======================================================================================================================
  3944                                  ;
  3945                                  ;       Message Queue Helper Routines
  3946                                  ;
  3947                                  ;       GetMessage
  3948                                  ;       PutMessage
  3949                                  ;
  3950                                  ;=======================================================================================================================
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  ;
  3953                                  ;       Routine:        GetMessage
  3954                                  ;
  3955                                  ;       Description:    This routine reads and removes a message from the message queue.
  3956                                  ;
  3957                                  ;       Out:            EAX     lo-order message data
  3958                                  ;                       EDX     hi-order message data
  3959                                  ;
  3960                                  ;                       CY      0 = message read
  3961                                  ;                               1 = no message to read
  3962                                  ;
  3963                                  ;-----------------------------------------------------------------------------------------------------------------------
  3964 00000F49 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3965 00000F4A 51                                              push    ecx                                             ;
  3966 00000F4B 1E                                              push    ds                                              ;
  3967 00000F4C 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3968 00000F4E 1F                                              pop     ds                                              ;... into data segment register
  3969 00000F4F 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3970 00000F55 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3971 00000F57 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3972 00000F5A 09D0                                            or      eax,edx                                         ;is queue empty?
  3973 00000F5C F9                                              stc                                                     ;assume queue is emtpy
  3974 00000F5D 741B                                            jz      .20                                             ;yes, skip ahead
  3975 00000F5F 31C9                                            xor     ecx,ecx                                         ;store zero
  3976 00000F61 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3977 00000F63 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3978 00000F66 83C308                                          add     ebx,8                                           ;next queue element
  3979 00000F69 81E3FC030000                                    and     ebx,03fch                                       ;at end of queue?
  3980 00000F6F 7502                                            jnz     .10                                             ;no, skip ahead
  3981 00000F71 B308                                            mov     bl,8                                            ;reset to 1st entry
  3982 00000F73 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3983 00000F79 F8                                              clc                                                     ;indicate message read
  3984 00000F7A 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3985 00000F7B 59                                              pop     ecx                                             ;
  3986 00000F7C 5B                                              pop     ebx                                             ;
  3987 00000F7D C3                                              ret                                                     ;return
  3988                                  ;-----------------------------------------------------------------------------------------------------------------------
  3989                                  ;
  3990                                  ;       Routine:        PutMessage
  3991                                  ;
  3992                                  ;       Description:    This routine adda a message to the message queue.
  3993                                  ;
  3994                                  ;       In:             ECX     hi-order data word
  3995                                  ;                       EDX     lo-order data word
  3996                                  ;
  3997                                  ;       Out:            CY      0 = success
  3998                                  ;                               1 = fail: queue is full
  3999                                  ;
  4000                                  ;-----------------------------------------------------------------------------------------------------------------------
  4001 00000F7E 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  4002 00000F7F 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  4003 00000F81 1F                                              pop     ds                                              ;... into data segment register
  4004 00000F82 A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  4005 00000F87 833800                                          cmp     dword [eax],0                                   ;is queue full?
  4006 00000F8A F9                                              stc                                                     ;assume failure
  4007 00000F8B 7517                                            jne     .20                                             ;yes, cannot store
  4008 00000F8D 8910                                            mov     [eax],edx                                       ;store lo-order data
  4009 00000F8F 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  4010 00000F92 83C008                                          add     eax,8                                           ;next queue element adr
  4011 00000F95 25FC030000                                      and     eax,03fch                                       ;at end of queue?
  4012 00000F9A 7502                                            jnz     .10                                             ;no, skip ahead
  4013 00000F9C B008                                            mov     al,8                                            ;reset to top of queue
  4014 00000F9E A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  4015 00000FA3 F8                                              clc                                                     ;indicate success
  4016 00000FA4 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  4017 00000FA5 C3                                              ret                                                     ;return
  4018                                  ;=======================================================================================================================
  4019                                  ;
  4020                                  ;       Memory-Mapped Video Routines
  4021                                  ;
  4022                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  4023                                  ;
  4024                                  ;       ClearConsoleScreen
  4025                                  ;       ScrollConsoleRow
  4026                                  ;       SetConsoleChar
  4027                                  ;       SetConsoleString
  4028                                  ;
  4029                                  ;=======================================================================================================================
  4030                                  ;-----------------------------------------------------------------------------------------------------------------------
  4031                                  ;
  4032                                  ;       Routine:        ClearConsoleScreen
  4033                                  ;
  4034                                  ;       Description:    This routine clears the console (CGA) screen.
  4035                                  ;
  4036                                  ;-----------------------------------------------------------------------------------------------------------------------
  4037 00000FA6 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  4038 00000FA7 57                                              push    edi                                             ;
  4039 00000FA8 1E                                              push    ds                                              ;
  4040 00000FA9 06                                              push    es                                              ;
  4041 00000FAA 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  4042 00000FAC 1F                                              pop     ds                                              ;... into DS register
  4043 00000FAD 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  4044 00000FAF 07                                              pop     es                                              ;... into ES register
  4045 00000FB0 B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  4046 00000FB5 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  4047 00000FBA 31FF                                            xor     edi,edi                                         ;target offset
  4048 00000FBC FC                                              cld                                                     ;forward strings
  4049 00000FBD F3AB                                            rep     stosd                                           ;reset screen body
  4050 00000FBF B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  4051 00000FC4 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4052 00000FC9 F3AB                                            rep     stosd                                           ;reset OIA line
  4053 00000FCB 30C0                                            xor     al,al                                           ;zero register
  4054 00000FCD A205080000                                      mov     [wbConsoleRow],al                               ;reset console row
  4055 00000FD2 A204080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  4056 00000FD7 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  4057 00000FDC 07                                              pop     es                                              ;restore non-volatile regs
  4058 00000FDD 1F                                              pop     ds                                              ;
  4059 00000FDE 5F                                              pop     edi                                             ;
  4060 00000FDF 59                                              pop     ecx                                             ;
  4061 00000FE0 C3                                              ret                                                     ;return
  4062                                  ;-----------------------------------------------------------------------------------------------------------------------
  4063                                  ;
  4064                                  ;       Routine:        ScrollConsoleRow
  4065                                  ;
  4066                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  4067                                  ;
  4068                                  ;-----------------------------------------------------------------------------------------------------------------------
  4069 00000FE1 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  4070 00000FE2 56                                              push    esi                                             ;
  4071 00000FE3 57                                              push    edi                                             ;
  4072 00000FE4 1E                                              push    ds                                              ;
  4073 00000FE5 06                                              push    es                                              ;
  4074 00000FE6 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4075 00000FE8 1F                                              pop     ds                                              ;... into DS
  4076 00000FE9 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  4077 00000FEB 07                                              pop     es                                              ;... into ES
  4078 00000FEC B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  4079 00000FF1 BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  4080 00000FF6 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  4081 00000FF8 FC                                              cld                                                     ;forward strings
  4082 00000FF9 F3A5                                            rep     movsd                                           ;move 24 lines up
  4083 00000FFB B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  4084 00001000 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  4085 00001005 F3AB                                            rep     stosd                                           ;clear bottom row
  4086 00001007 07                                              pop     es                                              ;restore non-volatile regs
  4087 00001008 1F                                              pop     ds                                              ;
  4088 00001009 5F                                              pop     edi                                             ;
  4089 0000100A 5E                                              pop     esi                                             ;
  4090 0000100B 59                                              pop     ecx                                             ;
  4091 0000100C C3                                              ret                                                     ;return
  4092                                  ;-----------------------------------------------------------------------------------------------------------------------
  4093                                  ;
  4094                                  ;       Routine:        SetConsoleChar
  4095                                  ;
  4096                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  4097                                  ;
  4098                                  ;       In:             AL      ASCII character
  4099                                  ;                       CL      column
  4100                                  ;                       CH      row
  4101                                  ;                       ES      CGA selector
  4102                                  ;
  4103                                  ;       Out:            EAX     last target address written (ES:)
  4104                                  ;                       CL      column + 1
  4105                                  ;
  4106                                  ;-----------------------------------------------------------------------------------------------------------------------
  4107 0000100D 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  4108 0000100F 0FB6C5                                          movzx   eax,ch                                          ;row
  4109 00001012 B450                                            mov     ah,ECONCOLS                                     ;cols/row
  4110 00001014 F6E4                                            mul     ah                                              ;row * cols/row
  4111 00001016 00C8                                            add     al,cl                                           ;add column
  4112 00001018 80D400                                          adc     ah,0                                            ;handle carry
  4113 0000101B D1E0                                            shl     eax,1                                           ;screen offset
  4114 0000101D 268810                                          mov     [es:eax],dl                                     ;store character
  4115 00001020 FEC1                                            inc     cl                                              ;next column
  4116 00001022 C3                                              ret                                                     ;return
  4117                                  ;-----------------------------------------------------------------------------------------------------------------------
  4118                                  ;
  4119                                  ;       Routine:        SetConsoleString
  4120                                  ;
  4121                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  4122                                  ;
  4123                                  ;       In:             ESI     source offset (DS:)
  4124                                  ;                       CL      column
  4125                                  ;                       CH      row
  4126                                  ;                       ES      CGA selector
  4127                                  ;
  4128                                  ;-----------------------------------------------------------------------------------------------------------------------
  4129 00001023 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  4130 00001024 FC                                              cld                                                     ;forward strings
  4131 00001025 AC                      .10                     lodsb                                                   ;next ASCII character
  4132 00001026 84C0                                            test    al,al                                           ;end of string?
  4133 00001028 7407                                            jz      .20                                             ;yes, branch
  4134 0000102A E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  4135 0000102F EBF4                                            jmp     .10                                             ;continue
  4136 00001031 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  4137 00001032 C3                                              ret                                                     ;return
  4138                                  ;=======================================================================================================================
  4139                                  ;
  4140                                  ;       Input/Output Routines
  4141                                  ;
  4142                                  ;       These routines read and/or write directly to ports.
  4143                                  ;
  4144                                  ;       PlaceCursor
  4145                                  ;       PutPrimaryEndOfInt
  4146                                  ;       PutSecondaryEndOfInt
  4147                                  ;       ReadRealTimeClock
  4148                                  ;       ResetSystem
  4149                                  ;       SetKeyboardLamps
  4150                                  ;       WaitForKeyInBuffer
  4151                                  ;       WaitForKeyOutBuffer
  4152                                  ;
  4153                                  ;=======================================================================================================================
  4154                                  ;-----------------------------------------------------------------------------------------------------------------------
  4155                                  ;
  4156                                  ;       Routine:        PlaceCursor
  4157                                  ;
  4158                                  ;       Description:    This routine positions the cursor on the console.
  4159                                  ;
  4160                                  ;       In:             DS      OS data selector
  4161                                  ;
  4162                                  ;-----------------------------------------------------------------------------------------------------------------------
  4163 00001033 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  4164 00001034 A005080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  4165 00001039 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  4166 0000103B F6E4                                            mul     ah                                              ;row offset
  4167 0000103D 020504080000                                    add     al,[wbConsoleColumn]                            ;add column
  4168 00001043 80D400                                          adc     ah,0                                            ;add overflow
  4169 00001046 89C1                                            mov     ecx,eax                                         ;screen offset
  4170 00001048 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  4171 0000104A B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  4172 0000104C B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  4173 0000104E EE                                              out     dx,al                                           ;select register
  4174 0000104F 42                                              inc     edx                                             ;data port
  4175 00001050 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  4176 00001052 EE                                              out     dx,al                                           ;store hi-order loc
  4177 00001053 4A                                              dec     edx                                             ;register select port
  4178 00001054 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  4179 00001056 EE                                              out     dx,al                                           ;select register
  4180 00001057 42                                              inc     edx                                             ;data port
  4181 00001058 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  4182 0000105A EE                                              out     dx,al                                           ;store lo-order loc
  4183 0000105B 59                                              pop     ecx                                             ;restore non-volatile regs
  4184 0000105C C3                                              ret                                                     ;return
  4185                                  ;-----------------------------------------------------------------------------------------------------------------------
  4186                                  ;
  4187                                  ;       Routine:        PutPrimaryEndOfInt
  4188                                  ;
  4189                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  4190                                  ;
  4191                                  ;-----------------------------------------------------------------------------------------------------------------------
  4192 0000105D FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  4193 0000105E B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4194 00001060 E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  4195 00001062 C3                                              ret                                                     ;return
  4196                                  ;-----------------------------------------------------------------------------------------------------------------------
  4197                                  ;
  4198                                  ;       Routine:        PutSecondaryEndOfInt
  4199                                  ;
  4200                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  4201                                  ;
  4202                                  ;-----------------------------------------------------------------------------------------------------------------------
  4203 00001063 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  4204 00001064 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  4205 00001066 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  4206 00001068 C3                                              ret                                                     ;return
  4207                                  ;-----------------------------------------------------------------------------------------------------------------------
  4208                                  ;
  4209                                  ;       Routine:        ReadRealTimeClock
  4210                                  ;
  4211                                  ;       Description:    This routine gets current date time from the real-time clock.
  4212                                  ;
  4213                                  ;       In:             DS:EBX  DATETIME structure
  4214                                  ;
  4215                                  ;-----------------------------------------------------------------------------------------------------------------------
  4216 00001069 56                      ReadRealTimeClock       push    esi                                             ;save non-volatile regs
  4217 0000106A 57                                              push    edi                                             ;
  4218 0000106B 06                                              push    es                                              ;
  4219 0000106C 1E                                              push    ds                                              ;store data selector ...
  4220 0000106D 07                                              pop     es                                              ;... in es register
  4221 0000106E 89DF                                            mov     edi,ebx                                         ;date-time structure
  4222 00001070 B000                                            mov     al,ERTCSECONDREG                                ;second register
  4223 00001072 E670                                            out     ERTCREGPORT,al                                  ;select second register
  4224 00001074 E471                                            in      al,ERTCDATAPORT                                 ;read second register
  4225 00001076 FC                                              cld                                                     ;forward strings
  4226 00001077 AA                                              stosb                                                   ;store second value
  4227 00001078 B002                                            mov     al,ERTCMINUTEREG                                ;minute register
  4228 0000107A E670                                            out     ERTCREGPORT,al                                  ;select minute register
  4229 0000107C E471                                            in      al,ERTCDATAPORT                                 ;read minute register
  4230 0000107E AA                                              stosb                                                   ;store minute value
  4231 0000107F B004                                            mov     al,ERTCHOURREG                                  ;hour register
  4232 00001081 E670                                            out     ERTCREGPORT,al                                  ;select hour register
  4233 00001083 E471                                            in      al,ERTCDATAPORT                                 ;read hour register
  4234 00001085 AA                                              stosb                                                   ;store hour value
  4235 00001086 B006                                            mov     al,ERTCWEEKDAYREG                               ;weekday register
  4236 00001088 E670                                            out     ERTCREGPORT,al                                  ;select weekday register
  4237 0000108A E471                                            in      al,ERTCDATAPORT                                 ;read weekday register
  4238 0000108C AA                                              stosb                                                   ;store weekday value
  4239 0000108D B007                                            mov     al,ERTCDAYREG                                   ;day register
  4240 0000108F E670                                            out     ERTCREGPORT,al                                  ;select day register
  4241 00001091 E471                                            in      al,ERTCDATAPORT                                 ;read day register
  4242 00001093 AA                                              stosb                                                   ;store day value
  4243 00001094 B008                                            mov     al,ERTCMONTHREG                                 ;month register
  4244 00001096 E670                                            out     ERTCREGPORT,al                                  ;select month register
  4245 00001098 E471                                            in      al,ERTCDATAPORT                                 ;read month register
  4246 0000109A AA                                              stosb                                                   ;store month value
  4247 0000109B B009                                            mov     al,ERTCYEARREG                                  ;year register
  4248 0000109D E670                                            out     ERTCREGPORT,al                                  ;select year register
  4249 0000109F E471                                            in      al,ERTCDATAPORT                                 ;read year register
  4250 000010A1 AA                                              stosb                                                   ;store year value
  4251 000010A2 B032                                            mov     al,ERTCCENTURYREG                               ;century register
  4252 000010A4 E670                                            out     ERTCREGPORT,al                                  ;select century register
  4253 000010A6 E471                                            in      al,ERTCDATAPORT                                 ;read century register
  4254 000010A8 AA                                              stosb                                                   ;store century value
  4255 000010A9 B00B                                            mov     al,ERTCSTATUSREG                                ;status register
  4256 000010AB E670                                            out     ERTCREGPORT,al                                  ;select status register
  4257 000010AD E471                                            in      al,ERTCDATAPORT                                 ;read status register
  4258 000010AF A804                                            test    al,ERTCBINARYVALS                               ;test if values are binary
  4259 000010B1 751D                                            jnz     .20                                             ;skip ahead if binary values
  4260 000010B3 89DE                                            mov     esi,ebx                                         ;date-time structure address
  4261 000010B5 89DF                                            mov     edi,ebx                                         ;date-time structure address
  4262 000010B7 B908000000                                      mov     ecx,8                                           ;loop counter
  4263 000010BC AC                      .10                     lodsb                                                   ;BCD value
  4264 000010BD 88C4                                            mov     ah,al                                           ;BCD value
  4265 000010BF 240F                                            and     al,00001111b                                    ;low-order decimal zone
  4266 000010C1 80E4F0                                          and     ah,11110000b                                    ;hi-order decimal zone
  4267 000010C4 D0EC                                            shr     ah,1                                            ;hi-order decimal * 8
  4268 000010C6 00E0                                            add     al,ah                                           ;low-order + hi-order * 8
  4269 000010C8 C0EC02                                          shr     ah,2                                            ;hi-order decimal * 2
  4270 000010CB 00E0                                            add     al,ah                                           ;low-order + hi-order * 10
  4271 000010CD AA                                              stosb                                                   ;replace BCD with binary
  4272 000010CE E2EC                                            loop    .10                                             ;next value
  4273 000010D0 07                      .20                     pop     es                                              ;restore non-volatile regs
  4274 000010D1 5F                                              pop     edi                                             ;
  4275 000010D2 5E                                              pop     esi                                             ;
  4276 000010D3 C3                                              ret                                                     ;return
  4277                                  ;-----------------------------------------------------------------------------------------------------------------------
  4278                                  ;
  4279                                  ;       Routine:        ResetSystem
  4280                                  ;
  4281                                  ;       Description:    This routine restarts the system using the 8042 controller.
  4282                                  ;
  4283                                  ;       Out:            N/A     This routine does not return.
  4284                                  ;
  4285                                  ;-----------------------------------------------------------------------------------------------------------------------
  4286 000010D4 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  4287 000010D9 E2FE                                            loop    $                                               ;clear interrupts
  4288 000010DB B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  4289 000010DD E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  4290 000010DF FB                      .10                     sti                                                     ;enable maskable interrupts
  4291 000010E0 F4                                              hlt                                                     ;halt until interrupt
  4292 000010E1 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  4293                                  ;-----------------------------------------------------------------------------------------------------------------------
  4294                                  ;
  4295                                  ;       Routine:        SetKeyboardLamps
  4296                                  ;
  4297                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  4298                                  ;
  4299                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  4300                                  ;
  4301                                  ;-----------------------------------------------------------------------------------------------------------------------
  4302 000010E3 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4303 000010E8 B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  4304 000010EA E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  4305 000010EC E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4306 000010F1 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4307 000010F3 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  4308 000010F8 88F8                                            mov     al,bh                                           ;set/reset lamps value
  4309 000010FA E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  4310 000010FC E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  4311 00001101 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  4312 00001103 C3                                              ret                                                     ;return
  4313                                  ;-----------------------------------------------------------------------------------------------------------------------
  4314                                  ;
  4315                                  ;       Routine:        WaitForKeyInBuffer
  4316                                  ;
  4317                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  4318                                  ;
  4319                                  ;       Out:            ZF      1 = Input buffer ready
  4320                                  ;                               0 = Input buffer not ready after timeout
  4321                                  ;
  4322                                  ;-----------------------------------------------------------------------------------------------------------------------
  4323 00001104 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  4324 00001105 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4325 0000110A E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4326 0000110C A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  4327 0000110E E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  4328 00001110 59                                              pop     ecx                                             ;restore non-volatile regs
  4329 00001111 C3                                              ret                                                     ;return
  4330                                  ;-----------------------------------------------------------------------------------------------------------------------
  4331                                  ;
  4332                                  ;       Routine:        WaitForKeyOutBuffer
  4333                                  ;
  4334                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  4335                                  ;
  4336                                  ;       Out:            ZF      1 = Output buffer has data from controller
  4337                                  ;                               0 = Output buffer empty after timeout
  4338                                  ;
  4339                                  ;-----------------------------------------------------------------------------------------------------------------------
  4340 00001112 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  4341 00001113 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  4342 00001118 E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  4343 0000111A A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  4344 0000111C E1FA                                            loopz   .10                                             ;loop until output buffer bit
  4345 0000111E 59                                              pop     ecx                                             ;restore non-volatile regs
  4346 0000111F C3                                              ret                                                     ;return
  4347                                  ;-----------------------------------------------------------------------------------------------------------------------
  4348                                  ;
  4349                                  ;       End of the Kernel Function Library
  4350                                  ;
  4351                                  ;-----------------------------------------------------------------------------------------------------------------------
  4352 00001120 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  4353                                  ;=======================================================================================================================
  4354                                  ;
  4355                                  ;       Console Task
  4356                                  ;
  4357                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  4358                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  4359                                  ;       screen and responds to user commands.
  4360                                  ;
  4361                                  ;=======================================================================================================================
  4362                                  ;-----------------------------------------------------------------------------------------------------------------------
  4363                                  ;
  4364                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  4365                                  ;
  4366                                  ;       This is the stack for the console task. It supports 448 nested calls.
  4367                                  ;
  4368                                  ;-----------------------------------------------------------------------------------------------------------------------
  4369                                  section                 constack                                                ;console task stack
  4370 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  4371                                  ;-----------------------------------------------------------------------------------------------------------------------
  4372                                  ;
  4373                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  4374                                  ;
  4375                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  4376                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  4377                                  ;       16 descriptors. Six are initially defined.
  4378                                  ;
  4379                                  ;-----------------------------------------------------------------------------------------------------------------------
  4380                                  section                 conldt                                                  ;console local descriptors
  4381 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  4382 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  4383 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  4384 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  4385 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  4386 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  4387 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4388                                  ;-----------------------------------------------------------------------------------------------------------------------
  4389                                  ;
  4390                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  4391                                  ;
  4392                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  4393                                  ;       segment. CS to console code.
  4394                                  ;
  4395                                  ;-----------------------------------------------------------------------------------------------------------------------
  4396                                  section                 contss                                                  ;console task state segment
  4397 00000000 00000000                                        dd      0                                               ;00 back-link tss
  4398 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  4399 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  4400 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  4401 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  4402 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  4403 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  4404 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  4405 00000020 00000000                                        dd      0                                               ;20 eip
  4406 00000024 00020000                                        dd      0200h                                           ;24 eflags
  4407 00000028 00000000                                        dd      0                                               ;28 eax
  4408 0000002C 00000000                                        dd      0                                               ;2c ecx
  4409 00000030 00000000                                        dd      0                                               ;30 edx
  4410 00000034 00000000                                        dd      0                                               ;34 ebx
  4411 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  4412 0000003C 00000000                                        dd      0                                               ;3c ebp
  4413 00000040 00000000                                        dd      0                                               ;40 esi
  4414 00000044 00000000                                        dd      0                                               ;44 edi
  4415 00000048 1C000000                                        dd      001Ch                                           ;48 es
  4416 0000004C 24000000                                        dd      0024h                                           ;4c cs
  4417 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  4418 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  4419 00000058 00000000                                        dd      0                                               ;58 fs
  4420 0000005C 00000000                                        dd      0                                               ;5c gs
  4421 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  4422 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  4423                                  ;-----------------------------------------------------------------------------------------------------------------------
  4424                                  ;
  4425                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  4426                                  ;
  4427                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  4428                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  4429                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  4430                                  ;       event.
  4431                                  ;
  4432                                  ;-----------------------------------------------------------------------------------------------------------------------
  4433                                  section                 conmque                                                 ;console message queue
  4434 00000000 08000000                                        dd      8                                               ;head pointer
  4435 00000004 08000000                                        dd      8                                               ;tail pointer
  4436 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  4437                                  ;-----------------------------------------------------------------------------------------------------------------------
  4438                                  ;
  4439                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  4440                                  ;
  4441                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  4442                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  4443                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  4444                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  4445                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  4446                                  ;       board input, echoing to the console screen and responding to user commands.
  4447                                  ;
  4448                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  4449                                  ;
  4450                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  4451                                  ;                               |  Real Mode Interrupt Vectors                  |
  4452                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  4453                                  ;                               |  Reserved BIOS Memory Area                    |
  4454                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  4455                                  ;                               |  Shared Kernel Memory Area                    |
  4456                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  4457                                  ;                               |  Global Descriptor Table (GDT)                |
  4458                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  4459                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  4460                                  ;                       002000  +-----------------------------------------------+
  4461                                  ;                               |  Interrupt Handlers                           |
  4462                                  ;                               |  Kernel Function Library                      |
  4463                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  4464                                  ;                               |  Console Task Stack Area                      |
  4465                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  4466                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  4467                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  4468                                  ;                               |  Console Task Task State Segment (TSS)        |
  4469                                  ;                       004800  +-----------------------------------------------+
  4470                                  ;                               |  Console Task Message Queue                   |
  4471                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  4472                                  ;                               |  Console Task Code                            |
  4473                                  ;                               |  Console Task Constants                       |
  4474                                  ;                       006000  +===============================================+
  4475                                  ;
  4476                                  ;-----------------------------------------------------------------------------------------------------------------------
  4477                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  4478 00000000 E86D000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  4479                                  
  4480                                                          clearConsoleScreen                                      ;clear the console screen
  4480 00000005 B000                <1>  mov al,eClearConsoleScreen
  4480 00000007 CD30                <1>  int _svc
  4481                                                          putConsoleString czTitle                                ;display startup message
  4481 00000009 BA[A0040000]        <1>  mov edx,%1
  4481 0000000E B006                <1>  mov al,ePutConsoleString
  4481 00000010 CD30                <1>  int _svc
  4482                                  .10                     putConsoleString czPrompt                               ;display input prompt
  4482                              <1> .10 :
  4482 00000012 BA[9E040000]        <1>  mov edx,%1
  4482 00000017 B006                <1>  mov al,ePutConsoleString
  4482 00000019 CD30                <1>  int _svc
  4483                                                          placeCursor                                             ;set CRT cursor location
  4483 0000001B B005                <1>  mov al,ePlaceCursor
  4483 0000001D CD30                <1>  int _svc
  4484                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  4484 0000001F BA10080000          <1>  mov edx,%1
  4484 00000024 B94F000000          <1>  mov ecx,%2
  4484 00000029 B701                <1>  mov bh,%3
  4484 0000002B B30D                <1>  mov bl,%4
  4484 0000002D B002                <1>  mov al,eGetConsoleString
  4484 0000002F CD30                <1>  int _svc
  4485                                                          putConsoleString czNewLine                              ;newline
  4485 00000031 BA[9B040000]        <1>  mov edx,%1
  4485 00000036 B006                <1>  mov al,ePutConsoleString
  4485 00000038 CD30                <1>  int _svc
  4486                                  
  4487 0000003A BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  4488 0000003F BB60080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  4489 00000044 E842000000                                      call    ConTakeToken                                    ;handle console input
  4490 00000049 BA60080000                                      mov     edx,wzConsoleToken                              ;token buffer
  4491 0000004E E86D000000                                      call    ConDetermineCommand                             ;determine command number
  4492 00000053 83F816                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  4493 00000056 720B                                            jb      .20                                             ;yes, branch
  4494                                  
  4495                                                          putConsoleString czUnknownCommand                       ;display error message
  4495 00000058 BA[BE040000]        <1>  mov edx,%1
  4495 0000005D B006                <1>  mov al,ePutConsoleString
  4495 0000005F CD30                <1>  int _svc
  4496                                  
  4497 00000061 EBAF                                            jmp     .10                                             ;next command
  4498 00000063 C1E002                  .20                     shl     eax,2                                           ;index into jump table
  4499 00000066 BA[9B030000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  4500 0000006B 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  4501 0000006E FFD0                                            call    eax                                             ;call command handler
  4502 00000070 EBA0                                            jmp     .10                                             ;next command
  4503                                  ;-----------------------------------------------------------------------------------------------------------------------
  4504                                  ;
  4505                                  ;       Routine:        ConInitializeData
  4506                                  ;
  4507                                  ;       Description:    This routine initializes console task variables.
  4508                                  ;
  4509                                  ;-----------------------------------------------------------------------------------------------------------------------
  4510 00000072 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  4511 00000073 57                                              push    edi                                             ;
  4512 00000074 06                                              push    es                                              ;
  4513                                  ;
  4514                                  ;       Initialize console work areas.
  4515                                  ;
  4516 00000075 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  4517 00000077 07                                              pop     es                                              ;... into extra segment register
  4518 00000078 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  4519 0000007D 30C0                                            xor     al,al                                           ;initialization value
  4520 0000007F B908010000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  4521 00000084 FC                                              cld                                                     ;forward strings
  4522 00000085 F3AA                                            rep     stosb                                           ;initialize data
  4523                                  ;
  4524                                  ;       Restore and return.
  4525                                  ;
  4526 00000087 07                                              pop     es                                              ;restore non-volatile regs
  4527 00000088 5F                                              pop     edi                                             ;
  4528 00000089 59                                              pop     ecx                                             ;
  4529 0000008A C3                                              ret                                                     ;return
  4530                                  ;-----------------------------------------------------------------------------------------------------------------------
  4531                                  ;
  4532                                  ;       Routine:        ConTakeToken
  4533                                  ;
  4534                                  ;       Description:    This routine extracts the next token from the given source buffer.
  4535                                  ;
  4536                                  ;       In:             DS:EDX  source buffer address
  4537                                  ;                       DS:EBX  target buffer address
  4538                                  ;
  4539                                  ;       Out:            DS:EDX  source buffer address
  4540                                  ;                       DS:EBX  target buffer address
  4541                                  ;
  4542                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  4543                                  ;
  4544                                  ;-----------------------------------------------------------------------------------------------------------------------
  4545 0000008B 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  4546 0000008C 57                                              push    edi                                             ;
  4547 0000008D 06                                              push    es                                              ;
  4548 0000008E 1E                                              push    ds                                              ;load data segment selector ...
  4549 0000008F 07                                              pop     es                                              ;... into extra segment reg
  4550 00000090 89D6                                            mov     esi,edx                                         ;source buffer address
  4551 00000092 89DF                                            mov     edi,ebx                                         ;target buffer address
  4552 00000094 C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  4553 00000097 FC                                              cld                                                     ;forward strings
  4554 00000098 AC                      .10                     lodsb                                                   ;load byte
  4555 00000099 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4556 0000009B 74FB                                            je      .10                                             ;yes, continue
  4557 0000009D 84C0                                            test    al,al                                           ;end of line?
  4558 0000009F 7410                                            jz      .40                                             ;yes, branch
  4559 000000A1 AA                      .20                     stosb                                                   ;store byte
  4560 000000A2 AC                                              lodsb                                                   ;load byte
  4561 000000A3 84C0                                            test    al,al                                           ;end of line?
  4562 000000A5 740A                                            jz      .40                                             ;no, continue
  4563 000000A7 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4564 000000A9 75F6                                            jne     .20                                             ;no, continue
  4565 000000AB AC                      .30                     lodsb                                                   ;load byte
  4566 000000AC 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  4567 000000AE 74FB                                            je      .30                                             ;yes, continue
  4568 000000B0 4E                                              dec     esi                                             ;pre-position
  4569 000000B1 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  4570 000000B4 89D7                                            mov     edi,edx                                         ;source buffer address
  4571 000000B6 AC                      .50                     lodsb                                                   ;remaining byte
  4572 000000B7 AA                                              stosb                                                   ;move to front of buffer
  4573 000000B8 84C0                                            test    al,al                                           ;end of line?
  4574 000000BA 75FA                                            jnz     .50                                             ;no, continue
  4575 000000BC 07                                              pop     es                                              ;restore non-volatile regs
  4576 000000BD 5F                                              pop     edi                                             ;
  4577 000000BE 5E                                              pop     esi                                             ;
  4578 000000BF C3                                              ret                                                     ;return
  4579                                  ;-----------------------------------------------------------------------------------------------------------------------
  4580                                  ;
  4581                                  ;       Routine:        ConDetermineCommand
  4582                                  ;
  4583                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  4584                                  ;
  4585                                  ;       input:          DS:EDX  command address
  4586                                  ;
  4587                                  ;       output:         EAX     >=0     = command nbr
  4588                                  ;                               0       = unknown command
  4589                                  ;
  4590                                  ;-----------------------------------------------------------------------------------------------------------------------
  4591 000000C0 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  4592 000000C1 51                                              push    ecx                                             ;
  4593 000000C2 56                                              push    esi                                             ;
  4594 000000C3 57                                              push    edi                                             ;
  4595                                  
  4596                                                          upperCaseString                                         ;upper-case string at EDX
  4596 000000C4 B016                <1>  mov al,eUpperCaseString
  4596 000000C6 CD30                <1>  int _svc
  4597                                  
  4598 000000C8 BE[F3030000]                                    mov     esi,tConCmdTbl                                  ;commands table
  4599 000000CD 31FF                                            xor     edi,edi                                         ;intialize command number
  4600 000000CF FC                                              cld                                                     ;forward strings
  4601 000000D0 AC                      .10                     lodsb                                                   ;command length
  4602 000000D1 0FB6C8                                          movzx   ecx,al                                          ;command length
  4603 000000D4 E30D                                            jecxz   .20                                             ;branch if end of table
  4604 000000D6 89F3                                            mov     ebx,esi                                         ;table entry address
  4605 000000D8 01CE                                            add     esi,ecx                                         ;next table entry address
  4606                                  
  4607                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  4607 000000DA B001                <1>  mov al,eCompareMemory
  4607 000000DC CD30                <1>  int _svc
  4608                                  
  4609 000000DE E303                                            jecxz   .20                                             ;branch if equal
  4610 000000E0 47                                              inc     edi                                             ;increment command nbr
  4611 000000E1 EBED                                            jmp     .10                                             ;repeat
  4612 000000E3 89F8                    .20                     mov     eax,edi                                         ;command number
  4613 000000E5 5F                                              pop     edi                                             ;restore non-volatile regs
  4614 000000E6 5E                                              pop     esi                                             ;
  4615 000000E7 59                                              pop     ecx                                             ;
  4616 000000E8 5B                                              pop     ebx                                             ;
  4617 000000E9 C3                                              ret                                                     ;return
  4618                                  ;-----------------------------------------------------------------------------------------------------------------------
  4619                                  ;
  4620                                  ;       Routine:        ConClear
  4621                                  ;
  4622                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  4623                                  ;
  4624                                  ;-----------------------------------------------------------------------------------------------------------------------
  4625                                  ConClear                clearConsoleScreen                                      ;clear console screen
  4625                              <1> ConClear :
  4625 000000EA B000                <1>  mov al,eClearConsoleScreen
  4625 000000EC CD30                <1>  int _svc
  4626 000000EE C3                                              ret                                                     ;return
  4627                                  ;-----------------------------------------------------------------------------------------------------------------------
  4628                                  ;
  4629                                  ;       Routine:        ConDate
  4630                                  ;
  4631                                  ;       Description:    This routine handles the DATE command.
  4632                                  ;
  4633                                  ;-----------------------------------------------------------------------------------------------------------------------
  4634                                  ConDate                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4634                              <1> ConDate :
  4634 000000EF BB00090000          <1>  mov ebx,%1
  4634 000000F4 B012                <1>  mov al,eReadRealTimeClock
  4634 000000F6 CD30                <1>  int _svc
  4635                                                          putDateString     wsConsoleDateTime,wzConsoleOutBuffer  ;format date string
  4635 000000F8 BB00090000          <1>  mov ebx,%1
  4635 000000FD BAB0080000          <1>  mov edx,%2
  4635 00000102 B007                <1>  mov al,ePutDateString
  4635 00000104 CD30                <1>  int _svc
  4636                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4636 00000106 BAB0080000          <1>  mov edx,%1
  4636 0000010B B006                <1>  mov al,ePutConsoleString
  4636 0000010D CD30                <1>  int _svc
  4637                                                          putConsoleString  czNewLine                             ;write newline to console
  4637 0000010F BA[9B040000]        <1>  mov edx,%1
  4637 00000114 B006                <1>  mov al,ePutConsoleString
  4637 00000116 CD30                <1>  int _svc
  4638 00000118 C3                                              ret                                                     ;return
  4639                                  ;-----------------------------------------------------------------------------------------------------------------------
  4640                                  ;
  4641                                  ;       Routine:        ConDay
  4642                                  ;
  4643                                  ;       Description:    This routine handles the DAY command.
  4644                                  ;
  4645                                  ;-----------------------------------------------------------------------------------------------------------------------
  4646                                  ConDay                  readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4646                              <1> ConDay :
  4646 00000119 BB00090000          <1>  mov ebx,%1
  4646 0000011E B012                <1>  mov al,eReadRealTimeClock
  4646 00000120 CD30                <1>  int _svc
  4647                                                          putDayString      wsConsoleDateTime,wzConsoleOutBuffer  ;format day string
  4647 00000122 BB00090000          <1>  mov ebx,%1
  4647 00000127 BAB0080000          <1>  mov edx,%2
  4647 0000012C B008                <1>  mov al,ePutDayString
  4647 0000012E CD30                <1>  int _svc
  4648                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4648 00000130 BAB0080000          <1>  mov edx,%1
  4648 00000135 B006                <1>  mov al,ePutConsoleString
  4648 00000137 CD30                <1>  int _svc
  4649                                                          putConsoleString  czNewLine                             ;write newline to console
  4649 00000139 BA[9B040000]        <1>  mov edx,%1
  4649 0000013E B006                <1>  mov al,ePutConsoleString
  4649 00000140 CD30                <1>  int _svc
  4650 00000142 C3                                              ret                                                     ;return
  4651                                  ;-----------------------------------------------------------------------------------------------------------------------
  4652                                  ;
  4653                                  ;       Routine:        ConExit
  4654                                  ;
  4655                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  4656                                  ;
  4657                                  ;-----------------------------------------------------------------------------------------------------------------------
  4658                                  ConExit                 resetSystem                                             ;issue system reset
  4658                              <1> ConExit :
  4658 00000143 B013                <1>  mov al,eResetSystem
  4658 00000145 CD30                <1>  int _svc
  4659 00000147 C3                                              ret                                                     ;return
  4660                                  ;-----------------------------------------------------------------------------------------------------------------------
  4661                                  ;
  4662                                  ;       Routine:        ConHour
  4663                                  ;
  4664                                  ;       Description:    This routine Handles the HOUR command.
  4665                                  ;
  4666                                  ;-----------------------------------------------------------------------------------------------------------------------
  4667                                  ConHour                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4667                              <1> ConHour :
  4667 00000148 BB00090000          <1>  mov ebx,%1
  4667 0000014D B012                <1>  mov al,eReadRealTimeClock
  4667 0000014F CD30                <1>  int _svc
  4668                                                          putHourString     wsConsoleDateTime,wzConsoleOutBuffer  ;format hour string
  4668 00000151 BB00090000          <1>  mov ebx,%1
  4668 00000156 BAB0080000          <1>  mov edx,%2
  4668 0000015B B009                <1>  mov al,ePutHourString
  4668 0000015D CD30                <1>  int _svc
  4669                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4669 0000015F BAB0080000          <1>  mov edx,%1
  4669 00000164 B006                <1>  mov al,ePutConsoleString
  4669 00000166 CD30                <1>  int _svc
  4670                                                          putConsoleString  czNewLine                             ;write newline to console
  4670 00000168 BA[9B040000]        <1>  mov edx,%1
  4670 0000016D B006                <1>  mov al,ePutConsoleString
  4670 0000016F CD30                <1>  int _svc
  4671 00000171 C3                                              ret                                                     ;return
  4672                                  ;-----------------------------------------------------------------------------------------------------------------------
  4673                                  ;
  4674                                  ;       Routine:        ConInt6
  4675                                  ;
  4676                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  4677                                  ;
  4678                                  ;-----------------------------------------------------------------------------------------------------------------------
  4679 00000172 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  4680 00000174 C3                                              ret                                                     ;return (not executed)
  4681                                  ;-----------------------------------------------------------------------------------------------------------------------
  4682                                  ;
  4683                                  ;       Routine:        ConMem
  4684                                  ;
  4685                                  ;       Description:    This routine handles the MEMORY command and its MEM alias.
  4686                                  ;
  4687                                  ;       Input:          wzConsoleInBuffer contains parameter(s)
  4688                                  ;
  4689                                  ;-----------------------------------------------------------------------------------------------------------------------
  4690 00000175 53                      ConMem                  push    ebx                                             ;save non-volatile regs
  4691 00000176 56                                              push    esi                                             ;
  4692 00000177 57                                              push    edi                                             ;
  4693                                  ;
  4694                                  ;                       update the source address if a parameter is given
  4695                                  ;
  4696 00000178 BA10080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer address (params)
  4697 0000017D BB60080000                                      mov     ebx,wzConsoleToken                              ;console command token address
  4698 00000182 E804FFFFFF                                      call    ConTakeToken                                    ;take first param as token
  4699 00000187 803D6008000000                                  cmp     byte [wzConsoleToken],0                         ;token found?
  4700 0000018E 740E                                            je      .10                                             ;no, branch
  4701 00000190 BA60080000                                      mov     edx,wzConsoleToken                              ;first param as token address
  4702                                  
  4703                                                          hexadecimalToUnsigned                                   ;convert string token to unsigned
  4703 00000195 B003                <1>  mov al,eHexadecimalToUnsigned
  4703 00000197 CD30                <1>  int _svc
  4704                                  
  4705 00000199 A300080000                                      mov     [wdConsoleMemBase],eax                          ;save console memory address
  4706                                  ;
  4707                                  ;                       setup source address and row count
  4708                                  ;
  4709 0000019E 8B3500080000            .10                     mov     esi,[wdConsoleMemBase]                          ;source memory address
  4710 000001A4 31C9                                            xor     ecx,ecx                                         ;zero register
  4711 000001A6 B110                                            mov     cl,16                                           ;row count
  4712                                  ;
  4713                                  ;                       start the row with the source address in hexadecimal
  4714                                  ;
  4715 000001A8 51                      .20                     push    ecx                                             ;save remaining rows
  4716 000001A9 BFB0080000                                      mov     edi,wzConsoleOutBuffer                          ;output buffer address
  4717 000001AE 89FA                                            mov     edx,edi                                         ;output buffer address
  4718 000001B0 89F1                                            mov     ecx,esi                                         ;console memory address
  4719                                  
  4720                                                          unsignedToHexadecimal                                   ;convert unsigned address to hex string
  4720 000001B2 B015                <1>  mov al,eUnsignedToHexadecimal
  4720 000001B4 CD30                <1>  int _svc
  4721                                  
  4722 000001B6 83C708                                          add     edi,8                                           ;end of memory addr hexnum
  4723 000001B9 B020                                            mov     al,' '                                          ;ascii space
  4724 000001BB AA                                              stosb                                                   ;store delimiter
  4725                                  ;
  4726                                  ;                       output 16 ASCII hexadecimal byte values for the row
  4727                                  ;
  4728 000001BC 31C9                                            xor     ecx,ecx                                         ;zero register
  4729 000001BE B110                                            mov     cl,16                                           ;loop count
  4730 000001C0 51                      .30                     push    ecx                                             ;save loop count
  4731 000001C1 AC                                              lodsb                                                   ;memory byte
  4732 000001C2 88C4                                            mov     ah,al                                           ;memory byte
  4733 000001C4 C0E804                                          shr     al,4                                            ;high-order in bits 3-0
  4734 000001C7 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4735 000001C9 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4736 000001CB 7202                                            jb      .40                                             ;yes, skip ahead
  4737 000001CD 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4738 000001CF AA                      .40                     stosb                                                   ;store ascii hexadecimal of high-order
  4739 000001D0 88E0                                            mov     al,ah                                           ;low-order in bits 3-0
  4740 000001D2 240F                                            and     al,0fh                                          ;mask out high-order bits
  4741 000001D4 0C30                                            or      al,30h                                          ;apply ascii numeric zone
  4742 000001D6 3C3A                                            cmp     al,3ah                                          ;numeric range?
  4743 000001D8 7202                                            jb      .50                                             ;yes, skip ahead
  4744 000001DA 0407                                            add     al,7                                            ;adjust ascii for 'A'-'F'
  4745 000001DC AA                      .50                     stosb                                                   ;store ascii hexadecimal of low-order
  4746 000001DD B020                                            mov     al,' '                                          ;ascii space
  4747 000001DF AA                                              stosb                                                   ;store ascii space delimiter
  4748 000001E0 59                                              pop     ecx                                             ;loop count
  4749 000001E1 E2DD                                            loop    .30                                             ;next
  4750                                  ;
  4751                                  ;                       output printable ASCII character section for the row
  4752                                  ;
  4753 000001E3 83EE10                                          sub     esi,16                                          ;reset source pointer
  4754 000001E6 B110                                            mov     cl,16                                           ;loop count
  4755 000001E8 AC                      .60                     lodsb                                                   ;source byte
  4756 000001E9 3C20                                            cmp     al,32                                           ;printable? (low-range test)
  4757 000001EB 7204                                            jb      .70                                             ;no, skip ahead
  4758 000001ED 3C80                                            cmp     al,128                                          ;printable? (high-range test)
  4759 000001EF 7202                                            jb      .80                                             ;yes, skip ahead
  4760 000001F1 B020                    .70                     mov     al,' '                                          ;display space instead of printable
  4761 000001F3 AA                      .80                     stosb                                                   ;store printable ascii byte
  4762 000001F4 E2F2                                            loop    .60                                             ;next source byte
  4763 000001F6 30C0                                            xor     al,al                                           ;nul-terminator
  4764 000001F8 AA                                              stosb                                                   ;terminate output line
  4765                                  ;
  4766                                  ;                       display constructed output buffer and newline
  4767                                  ;
  4768                                                          putConsoleString wzConsoleOutBuffer                     ;display constructed output
  4768 000001F9 BAB0080000          <1>  mov edx,%1
  4768 000001FE B006                <1>  mov al,ePutConsoleString
  4768 00000200 CD30                <1>  int _svc
  4769                                                          putConsoleString czNewLine                              ;display new line
  4769 00000202 BA[9B040000]        <1>  mov edx,%1
  4769 00000207 B006                <1>  mov al,ePutConsoleString
  4769 00000209 CD30                <1>  int _svc
  4770                                  ;
  4771                                  ;                       repeat until all lines displayed and preserve source address
  4772                                  ;
  4773 0000020B 59                                              pop     ecx                                             ;remaining rows
  4774 0000020C E29A                                            loop    .20                                             ;next row
  4775 0000020E 893500080000                                    mov     [wdConsoleMemBase],esi                          ;update console memory address
  4776 00000214 5F                                              pop     edi                                             ;restore regs
  4777 00000215 5E                                              pop     esi                                             ;
  4778 00000216 5B                                              pop     ebx                                             ;
  4779 00000217 C3                                              ret                                                     ;return
  4780                                  ;-----------------------------------------------------------------------------------------------------------------------
  4781                                  ;
  4782                                  ;       Routine:        ConMinute
  4783                                  ;
  4784                                  ;       Description:    This routine Handles the MINUTE command.
  4785                                  ;
  4786                                  ;-----------------------------------------------------------------------------------------------------------------------
  4787                                  ConMinute               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4787                              <1> ConMinute :
  4787 00000218 BB00090000          <1>  mov ebx,%1
  4787 0000021D B012                <1>  mov al,eReadRealTimeClock
  4787 0000021F CD30                <1>  int _svc
  4788                                                          putMinuteString   wsConsoleDateTime,wzConsoleOutBuffer  ;format minute string
  4788 00000221 BB00090000          <1>  mov ebx,%1
  4788 00000226 BAB0080000          <1>  mov edx,%2
  4788 0000022B B00A                <1>  mov al,ePutMinuteString
  4788 0000022D CD30                <1>  int _svc
  4789                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4789 0000022F BAB0080000          <1>  mov edx,%1
  4789 00000234 B006                <1>  mov al,ePutConsoleString
  4789 00000236 CD30                <1>  int _svc
  4790                                                          putConsoleString  czNewLine                             ;write newline to console
  4790 00000238 BA[9B040000]        <1>  mov edx,%1
  4790 0000023D B006                <1>  mov al,ePutConsoleString
  4790 0000023F CD30                <1>  int _svc
  4791 00000241 C3                                              ret                                                     ;return
  4792                                  ;-----------------------------------------------------------------------------------------------------------------------
  4793                                  ;
  4794                                  ;       Routine:        ConMonth
  4795                                  ;
  4796                                  ;       Description:    This routine Handles the MONTH command.
  4797                                  ;
  4798                                  ;-----------------------------------------------------------------------------------------------------------------------
  4799                                  ConMonth                readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4799                              <1> ConMonth :
  4799 00000242 BB00090000          <1>  mov ebx,%1
  4799 00000247 B012                <1>  mov al,eReadRealTimeClock
  4799 00000249 CD30                <1>  int _svc
  4800                                                          putMonthString    wsConsoleDateTime,wzConsoleOutBuffer  ;format month string
  4800 0000024B BB00090000          <1>  mov ebx,%1
  4800 00000250 BAB0080000          <1>  mov edx,%2
  4800 00000255 B00B                <1>  mov al,ePutMonthString
  4800 00000257 CD30                <1>  int _svc
  4801                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4801 00000259 BAB0080000          <1>  mov edx,%1
  4801 0000025E B006                <1>  mov al,ePutConsoleString
  4801 00000260 CD30                <1>  int _svc
  4802                                                          putConsoleString  czNewLine                             ;write newline to console
  4802 00000262 BA[9B040000]        <1>  mov edx,%1
  4802 00000267 B006                <1>  mov al,ePutConsoleString
  4802 00000269 CD30                <1>  int _svc
  4803 0000026B C3                                              ret                                                     ;return
  4804                                  ;-----------------------------------------------------------------------------------------------------------------------
  4805                                  ;
  4806                                  ;       Routine:        ConMonthName
  4807                                  ;
  4808                                  ;       Description:    This routine Handles the MONTH.NAME command.
  4809                                  ;
  4810                                  ;-----------------------------------------------------------------------------------------------------------------------
  4811                                  ConMonthName            readRealTimeClock  wsConsoleDateTime                    ;read RTC data into structure
  4811                              <1> ConMonthName :
  4811 0000026C BB00090000          <1>  mov ebx,%1
  4811 00000271 B012                <1>  mov al,eReadRealTimeClock
  4811 00000273 CD30                <1>  int _svc
  4812                                                          putMonthNameString wsConsoleDateTime,wzConsoleOutBuffer ;format month name string
  4812 00000275 BB00090000          <1>  mov ebx,%1
  4812 0000027A BAB0080000          <1>  mov edx,%2
  4812 0000027F B00C                <1>  mov al,ePutMonthNameString
  4812 00000281 CD30                <1>  int _svc
  4813                                                          putConsoleString   wzConsoleOutBuffer                   ;write string to console
  4813 00000283 BAB0080000          <1>  mov edx,%1
  4813 00000288 B006                <1>  mov al,ePutConsoleString
  4813 0000028A CD30                <1>  int _svc
  4814                                                          putConsoleString   czNewLine                            ;write newline to console
  4814 0000028C BA[9B040000]        <1>  mov edx,%1
  4814 00000291 B006                <1>  mov al,ePutConsoleString
  4814 00000293 CD30                <1>  int _svc
  4815 00000295 C3                                              ret                                                     ;return
  4816                                  ;-----------------------------------------------------------------------------------------------------------------------
  4817                                  ;
  4818                                  ;       Routine:        ConSecond
  4819                                  ;
  4820                                  ;       Description:    This routine Handles the SECOND command.
  4821                                  ;
  4822                                  ;-----------------------------------------------------------------------------------------------------------------------
  4823                                  ConSecond               readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4823                              <1> ConSecond :
  4823 00000296 BB00090000          <1>  mov ebx,%1
  4823 0000029B B012                <1>  mov al,eReadRealTimeClock
  4823 0000029D CD30                <1>  int _svc
  4824                                                          putSecondString   wsConsoleDateTime,wzConsoleOutBuffer  ;format second string
  4824 0000029F BB00090000          <1>  mov ebx,%1
  4824 000002A4 BAB0080000          <1>  mov edx,%2
  4824 000002A9 B00D                <1>  mov al,ePutSecondString
  4824 000002AB CD30                <1>  int _svc
  4825                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4825 000002AD BAB0080000          <1>  mov edx,%1
  4825 000002B2 B006                <1>  mov al,ePutConsoleString
  4825 000002B4 CD30                <1>  int _svc
  4826                                                          putConsoleString  czNewLine                             ;write newline to console
  4826 000002B6 BA[9B040000]        <1>  mov edx,%1
  4826 000002BB B006                <1>  mov al,ePutConsoleString
  4826 000002BD CD30                <1>  int _svc
  4827 000002BF C3                                              ret                                                     ;return
  4828                                  ;-----------------------------------------------------------------------------------------------------------------------
  4829                                  ;
  4830                                  ;       Routine:        ConTime
  4831                                  ;
  4832                                  ;       Description:    This routine Handles the TIME command.
  4833                                  ;
  4834                                  ;-----------------------------------------------------------------------------------------------------------------------
  4835                                  ConTime                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4835                              <1> ConTime :
  4835 000002C0 BB00090000          <1>  mov ebx,%1
  4835 000002C5 B012                <1>  mov al,eReadRealTimeClock
  4835 000002C7 CD30                <1>  int _svc
  4836                                                          putTimeString     wsConsoleDateTime,wzConsoleOutBuffer  ;format time string
  4836 000002C9 BB00090000          <1>  mov ebx,%1
  4836 000002CE BAB0080000          <1>  mov edx,%2
  4836 000002D3 B00E                <1>  mov al,ePutTimeString
  4836 000002D5 CD30                <1>  int _svc
  4837                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4837 000002D7 BAB0080000          <1>  mov edx,%1
  4837 000002DC B006                <1>  mov al,ePutConsoleString
  4837 000002DE CD30                <1>  int _svc
  4838                                                          putConsoleString  czNewLine                             ;write newline to console
  4838 000002E0 BA[9B040000]        <1>  mov edx,%1
  4838 000002E5 B006                <1>  mov al,ePutConsoleString
  4838 000002E7 CD30                <1>  int _svc
  4839 000002E9 C3                                              ret                                                     ;return
  4840                                  ;-----------------------------------------------------------------------------------------------------------------------
  4841                                  ;
  4842                                  ;       Routine:        ConVersion
  4843                                  ;
  4844                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  4845                                  ;
  4846                                  ;-----------------------------------------------------------------------------------------------------------------------
  4847                                  ConVersion              putConsoleString czTitle                                ;display version message
  4847                              <1> ConVersion :
  4847 000002EA BA[A0040000]        <1>  mov edx,%1
  4847 000002EF B006                <1>  mov al,ePutConsoleString
  4847 000002F1 CD30                <1>  int _svc
  4848 000002F3 C3                                              ret                                                     ;return
  4849                                  ;-----------------------------------------------------------------------------------------------------------------------
  4850                                  ;
  4851                                  ;       Routine:        ConWeekday
  4852                                  ;
  4853                                  ;       Description:    This routine handles the WEEKDAY command.
  4854                                  ;
  4855                                  ;-----------------------------------------------------------------------------------------------------------------------
  4856                                  ConWeekday              readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4856                              <1> ConWeekday :
  4856 000002F4 BB00090000          <1>  mov ebx,%1
  4856 000002F9 B012                <1>  mov al,eReadRealTimeClock
  4856 000002FB CD30                <1>  int _svc
  4857                                                          putWeekdayString  wsConsoleDateTime,wzConsoleOutBuffer  ;format weekday string
  4857 000002FD BB00090000          <1>  mov ebx,%1
  4857 00000302 BAB0080000          <1>  mov edx,%2
  4857 00000307 B00F                <1>  mov al,ePutWeekdayString
  4857 00000309 CD30                <1>  int _svc
  4858                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4858 0000030B BAB0080000          <1>  mov edx,%1
  4858 00000310 B006                <1>  mov al,ePutConsoleString
  4858 00000312 CD30                <1>  int _svc
  4859                                                          putConsoleString  czNewLine                             ;write newline to console
  4859 00000314 BA[9B040000]        <1>  mov edx,%1
  4859 00000319 B006                <1>  mov al,ePutConsoleString
  4859 0000031B CD30                <1>  int _svc
  4860 0000031D C3                                              ret                                                     ;return
  4861                                  ;-----------------------------------------------------------------------------------------------------------------------
  4862                                  ;
  4863                                  ;       Routine:        ConWeekdayName
  4864                                  ;
  4865                                  ;       Description:    This routine Handles the WEEKDAY.NAME command.
  4866                                  ;
  4867                                  ;-----------------------------------------------------------------------------------------------------------------------
  4868                                  ConWeekdayName          readRealTimeClock    wsConsoleDateTime                          ;read RTC data into structure
  4868                              <1> ConWeekdayName :
  4868 0000031E BB00090000          <1>  mov ebx,%1
  4868 00000323 B012                <1>  mov al,eReadRealTimeClock
  4868 00000325 CD30                <1>  int _svc
  4869                                                          putWeekdayNameString wsConsoleDateTime,wzConsoleOutBuffer       ;format day name string
  4869 00000327 BB00090000          <1>  mov ebx,%1
  4869 0000032C BAB0080000          <1>  mov edx,%2
  4869 00000331 B010                <1>  mov al,ePutWeekdayNameString
  4869 00000333 CD30                <1>  int _svc
  4870                                                          putConsoleString     wzConsoleOutBuffer                         ;write string to console
  4870 00000335 BAB0080000          <1>  mov edx,%1
  4870 0000033A B006                <1>  mov al,ePutConsoleString
  4870 0000033C CD30                <1>  int _svc
  4871                                                          putConsoleString     czNewLine                                  ;write newline to console
  4871 0000033E BA[9B040000]        <1>  mov edx,%1
  4871 00000343 B006                <1>  mov al,ePutConsoleString
  4871 00000345 CD30                <1>  int _svc
  4872 00000347 C3                                              ret                                                             ;return
  4873                                  ;-----------------------------------------------------------------------------------------------------------------------
  4874                                  ;
  4875                                  ;       Routine:        ConYear
  4876                                  ;
  4877                                  ;       Description:    This routine Handles the YEAR command.
  4878                                  ;
  4879                                  ;-----------------------------------------------------------------------------------------------------------------------
  4880                                  ConYear                 readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4880                              <1> ConYear :
  4880 00000348 BB00090000          <1>  mov ebx,%1
  4880 0000034D B012                <1>  mov al,eReadRealTimeClock
  4880 0000034F CD30                <1>  int _svc
  4881                                                          putYearString     wsConsoleDateTime,wzConsoleOutBuffer  ;format year string
  4881 00000351 BB00090000          <1>  mov ebx,%1
  4881 00000356 BAB0080000          <1>  mov edx,%2
  4881 0000035B B011                <1>  mov al,ePutYearString
  4881 0000035D CD30                <1>  int _svc
  4882                                                          putConsoleString  wzConsoleOutBuffer                    ;write string to console
  4882 0000035F BAB0080000          <1>  mov edx,%1
  4882 00000364 B006                <1>  mov al,ePutConsoleString
  4882 00000366 CD30                <1>  int _svc
  4883                                                          putConsoleString  czNewLine                             ;write newline to console
  4883 00000368 BA[9B040000]        <1>  mov edx,%1
  4883 0000036D B006                <1>  mov al,ePutConsoleString
  4883 0000036F CD30                <1>  int _svc
  4884 00000371 C3                                              ret                                                     ;return
  4885                                  ;-----------------------------------------------------------------------------------------------------------------------
  4886                                  ;
  4887                                  ;       Routine:        ConYearIsLeap
  4888                                  ;
  4889                                  ;       Description:    This routine handles the YEAR.ISLEAP command
  4890                                  ;
  4891                                  ;-----------------------------------------------------------------------------------------------------------------------
  4892                                  ConYearIsLeap           readRealTimeClock wsConsoleDateTime                     ;read RTC data into structure
  4892                              <1> ConYearIsLeap :
  4892 00000372 BB00090000          <1>  mov ebx,%1
  4892 00000377 B012                <1>  mov al,eReadRealTimeClock
  4892 00000379 CD30                <1>  int _svc
  4893                                                          isLeapYear        wsConsoleDateTime                     ;indicate if year is leap year
  4893 0000037B BB00090000          <1>  mov ebx,%1
  4893 00000380 B004                <1>  mov al,eIsLeapYear
  4893 00000382 CD30                <1>  int _svc
  4894                                  
  4895 00000384 E30B                                            jecxz   .10                                             ;branch if not leap
  4896                                  
  4897                                                          putConsoleString  czYearIsLeap                          ;display year is leap message
  4897 00000386 BA[D0040000]        <1>  mov edx,%1
  4897 0000038B B006                <1>  mov al,ePutConsoleString
  4897 0000038D CD30                <1>  int _svc
  4898                                  
  4899 0000038F EB09                                            jmp     .20                                             ;continue
  4900                                  
  4901                                  .10                     putConsoleString  czYearIsNotLeap                       ;display year is not leap mesage
  4901                              <1> .10 :
  4901 00000391 BA[EB040000]        <1>  mov edx,%1
  4901 00000396 B006                <1>  mov al,ePutConsoleString
  4901 00000398 CD30                <1>  int _svc
  4902 0000039A C3                      .20                     ret                                                     ;return
  4903                                  ;-----------------------------------------------------------------------------------------------------------------------
  4904                                  ;
  4905                                  ;       Tables
  4906                                  ;
  4907                                  ;-----------------------------------------------------------------------------------------------------------------------
  4908                                                                                                                  ;---------------------------------------
  4909                                                                                                                  ;  Command Jump Table
  4910                                                                                                                  ;---------------------------------------
  4911                                  tConJmpTbl              equ     $                                               ;command jump table
  4912 0000039B 1E030000                                        dd      ConWeekdayName  - ConCode                       ;weekday.name command routine offset
  4913 0000039F 72030000                                        dd      ConYearIsLeap   - ConCode                       ;year.isleap command routine offset
  4914 000003A3 6C020000                                        dd      ConMonthName    - ConCode                       ;month.name command routine offset
  4915 000003A7 43010000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  4916 000003AB EA020000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  4917 000003AF F4020000                                        dd      ConWeekday      - ConCode                       ;weekday command routine offset
  4918 000003B3 75010000                                        dd      ConMem          - ConCode                       ;memory command routine offset
  4919 000003B7 18020000                                        dd      ConMinute       - ConCode                       ;minute command routine offset
  4920 000003BB 96020000                                        dd      ConSecond       - ConCode                       ;second command routine offset
  4921 000003BF EA000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  4922 000003C3 42020000                                        dd      ConMonth        - ConCode                       ;month command routine offset
  4923 000003C7 EF000000                                        dd      ConDate         - ConCode                       ;date command routine offset
  4924 000003CB 43010000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  4925 000003CF 48010000                                        dd      ConHour         - ConCode                       ;hour command routine offset
  4926 000003D3 72010000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  4927 000003D7 43010000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  4928 000003DB C0020000                                        dd      ConTime         - ConCode                       ;time command routine offset
  4929 000003DF 48030000                                        dd      ConYear         - ConCode                       ;year command routine offset
  4930 000003E3 EA000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  4931 000003E7 19010000                                        dd      ConDay          - ConCode                       ;day command routine offset
  4932 000003EB 75010000                                        dd      ConMem          - ConCode                       ;mem command routine offset
  4933 000003EF EA020000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  4934                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  4935                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  4936                                                                                                                  ;---------------------------------------
  4937                                                                                                                  ;  Command Name Table
  4938                                                                                                                  ;---------------------------------------
  4939                                  tConCmdTbl              equ     $                                               ;command name table
  4940 000003F3 0D5745454B4441592E-                             db      13,"WEEKDAY.NAME",0                             ;weekday.name command
  4940 000003FC 4E414D4500         
  4941 00000401 0C594541522E49534C-                             db      12,"YEAR.ISLEAP",0                              ;year.isleap command
  4941 0000040A 45415000           
  4942 0000040E 0B4D4F4E54482E4E41-                             db      11,"MONTH.NAME",0                               ;month.name command
  4942 00000417 4D4500             
  4943 0000041A 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  4943 00000423 00                 
  4944 00000424 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  4945 0000042D 085745454B44415900                              db      8,"WEEKDAY",0                                   ;weekday command
  4946 00000436 074D454D4F525900                                db      7,"MEMORY",0                                    ;memory command
  4947 0000043E 074D494E55544500                                db      7,"MINUTE",0                                    ;minute command
  4948 00000446 075345434F4E4400                                db      7,"SECOND",0                                    ;second command
  4949 0000044E 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  4950 00000455 064D4F4E544800                                  db      6,"MONTH",0                                     ;month command
  4951 0000045C 054441544500                                    db      5,"DATE",0                                      ;date command
  4952 00000462 054558495400                                    db      5,"EXIT",0                                      ;exit command
  4953 00000468 05484F555200                                    db      5,"HOUR",0                                      ;hour command
  4954 0000046E 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  4955 00000474 055155495400                                    db      5,"QUIT",0                                      ;quit command
  4956 0000047A 0554494D4500                                    db      5,"TIME",0                                      ;time command
  4957 00000480 055945415200                                    db      5,"YEAR",0                                      ;year command
  4958 00000486 04434C5300                                      db      4,"CLS",0                                       ;cls command
  4959 0000048B 0444415900                                      db      4,"DAY",0                                       ;day command
  4960 00000490 044D454D00                                      db      4,"MEM",0                                       ;mem command
  4961 00000495 0456455200                                      db      4,"VER",0                                       ;ver command
  4962 0000049A 00                                              db      0                                               ;end of table
  4963                                  ;-----------------------------------------------------------------------------------------------------------------------
  4964                                  ;
  4965                                  ;       Constants
  4966                                  ;
  4967                                  ;-----------------------------------------------------------------------------------------------------------------------
  4968 0000049B 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  4969 0000049E 3A00                    czPrompt                db      ":",0                                           ;prompt string
  4970 000004A0 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  4970 000004A9 65726174696E672053-
  4970 000004B2 797374656D20312E30-
  4970 000004BB 0D0A00             
  4971 000004BE 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  4971 000004C7 6F6D6D616E640D0A00 
  4972 000004D0 546865207965617220-     czYearIsLeap            db      "The year is a leap year.",13,10,0              ;leap year message
  4972 000004D9 69732061206C656170-
  4972 000004E2 20796561722E0D0A00 
  4973 000004EB 546865207965617220-     czYearIsNotLeap         db      "The year is not a leap year.",13,10,0          ;not leap year message
  4973 000004F4 6973206E6F74206120-
  4973 000004FD 6C6561702079656172-
  4973 00000506 2E0D0A00           
  4974 0000050A 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  4975                                  %endif
  4976                                  %ifdef BUILDDISK
  4977                                  ;-----------------------------------------------------------------------------------------------------------------------
  4978                                  ;
  4979                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  4980                                  ;
  4981                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  4982                                  ;
  4983                                  ;-----------------------------------------------------------------------------------------------------------------------
  4984                                  section                 unused                                                  ;unused disk space
  4985 00000000 F6<rept>                                        times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  4986                                  %endif
  4987                                  ;=======================================================================================================================
  4988                                  ;
  4989                                  ;       End of Program Code
  4990                                  ;
  4991                                  ;=======================================================================================================================
