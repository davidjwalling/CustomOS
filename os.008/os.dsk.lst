     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.008
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support additional "date" and "time" commands
     8                                  ;			that read from the real-time clock and for commands that take parameters.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	Motorola MC 146818 Real-Time Clock					ERTC...
   190                                  ;
   191                                  ;	The Motorola MC 146818 was the original real-time clock in PCs.
   192                                  ;
   193                                  ;-----------------------------------------------------------------------------------------------------------------------
   194                                  ERTCREGPORT		equ	70h						;register select port
   195                                  ERTCDATAPORT		equ	71h						;data port
   196                                  ERTCSECONDREG		equ	00h						;second
   197                                  ERTCMINUTEREG		equ	02h						;minute
   198                                  ERTCHOURREG		equ	04h						;hour
   199                                  ERTCWEEKDAYREG		equ	06h						;weekday
   200                                  ERTCDAYREG		equ	07h						;day
   201                                  ERTCMONTHREG		equ	08h						;month
   202                                  ERTCYEARREG		equ	09h						;year of the century
   203                                  ERTCSTATUSREG		equ	0bh						;status
   204                                  ERTCCENTURYREG		equ	32h						;century
   205                                  ERTCBINARYVALS		equ	00000100b					;values are binary
   206                                  ;-----------------------------------------------------------------------------------------------------------------------
   207                                  ;
   208                                  ;	x86 Descriptor Access Codes						EACC...
   209                                  ;
   210                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   211                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   212                                  ;
   213                                  ;	0.......	Segment is not present in memory (triggers int 11)
   214                                  ;	1.......	Segment is present in memory
   215                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   216                                  ;	...0....	Segment is a system segment
   217                                  ;	...00010		Local Descriptor Table
   218                                  ;	...00101		Task Gate
   219                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   220                                  ;	...01100		Call Gate (386)
   221                                  ;	...01110		Interrupt Gate (386)
   222                                  ;	...01111		Trap Gate (386)
   223                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   224                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   225                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   226                                  ;
   227                                  ;-----------------------------------------------------------------------------------------------------------------------
   228                                  EACCLDT			equ	10000010b					;local descriptor table
   229                                  EACCTASK		equ	10000101b					;task gate
   230                                  EACCTSS			equ	10001001b					;task-state segment
   231                                  EACCGATE		equ	10001100b					;call gate
   232                                  EACCINT			equ	10001110b					;interrupt gate
   233                                  EACCTRAP		equ	10001111b					;trap gate
   234                                  EACCDATA		equ	10010011b					;upward writable data
   235                                  EACCCODE		equ	10011011b					;non-conforming readable code
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  ;
   238                                  ;	BIOS Interrupts and Functions						EBIOS...
   239                                  ;
   240                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   241                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   242                                  ;
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   245                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   246                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   247                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   248                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   249                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   250                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   251                                  ;-----------------------------------------------------------------------------------------------------------------------
   252                                  ;
   253                                  ;	ASCII									EASCII...
   254                                  ;
   255                                  ;-----------------------------------------------------------------------------------------------------------------------
   256                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   257                                  EASCIILINEFEED		equ	10						;ASCII line feed
   258                                  EASCIIRETURN		equ	13						;ASCII carriage return
   259                                  EASCIIESCAPE		equ	27						;ASCII escape
   260                                  EASCIISPACE		equ	32						;ASCII space
   261                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   262                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   263                                  EASCIILOWERA		equ	97						;ASCII 'a'
   264                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   265                                  EASCIITILDE		equ	126						;ASCII '~'
   266                                  EASCIICASE		equ	00100000b					;ASCII case bit
   267                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;	Boot Sector and Loader Constants
   271                                  ;
   272                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   273                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   274                                  ;
   275                                  ;-----------------------------------------------------------------------------------------------------------------------
   276                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   277                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   278                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   279                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   280                                  EMAXTRIES		equ	5						;max read retries
   281                                  ;-----------------------------------------------------------------------------------------------------------------------
   282                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   283                                  ;-----------------------------------------------------------------------------------------------------------------------
   284                                  ESELDAT			equ	18h						;kernel data selector
   285                                  ESELCGA			equ	20h						;cga video selector
   286                                  ESELOSCODE		equ	48h						;os kernel selector
   287                                  ;-----------------------------------------------------------------------------------------------------------------------
   288                                  ;	LDT Selectors								ESEL...
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  ESELMQ			equ	2Ch						;console task message queue
   291                                  ;-----------------------------------------------------------------------------------------------------------------------
   292                                  ;	Kernel Constants							EKRN...
   293                                  ;-----------------------------------------------------------------------------------------------------------------------
   294                                  EKRNDESLEN		equ	8						;size of descriptor
   295                                  EKRNADR			equ	1000h						;kernel base address
   296                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   297                                  ;-----------------------------------------------------------------------------------------------------------------------
   298                                  ;	Keyboard Flags								EKEY...
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  EKEYCTRLLEFT		equ	00000001b					;left control
   301                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   302                                  EKEYALTLEFT		equ	00000100b					;left alt
   303                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   304                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   305                                  EKEYSHIFT		equ	00010010b					;left or right shift
   306                                  EKEYALTRIGHT		equ	00100000b					;right alt
   307                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   308                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   309                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   310                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   311                                  ;-----------------------------------------------------------------------------------------------------------------------
   312                                  ;	Console Constants							ECON...
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ECONCOLS		equ	80						;columns per row
   315                                  ECONROWS		equ	24						;console rows
   316                                  ECONOIAROW		equ	24						;operator information area row
   317                                  ECONCOLBYTES		equ	2						;bytes per column
   318                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   319                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   320                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   321                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;	Kernel Message Identifiers						EMSG...
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   326                                  EMSGKEYUP		equ	41010000h					;message: key-up
   327                                  EMSGKEYCHAR		equ	41020000h					;message: character
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  ;
   330                                  ;	Structures
   331                                  ;
   332                                  ;-----------------------------------------------------------------------------------------------------------------------
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  ;
   335                                  ;	DATETIME
   336                                  ;
   337                                  ;	The DATETIME structure stores date and time values from the real-time clock.
   338                                  ;
   339                                  ;-----------------------------------------------------------------------------------------------------------------------
   340                                  struc			DATETIME
   341 00000000 <res 00000001>          .second			resb	1						;seconds
   342 00000001 <res 00000001>          .minute			resb	1						;minutes
   343 00000002 <res 00000001>          .hour			resb	1						;hours
   344 00000003 <res 00000001>          .weekday		resb	1						;day of week
   345 00000004 <res 00000001>          .day			resb	1						;day of month
   346 00000005 <res 00000001>          .month			resb	1						;month of year
   347 00000006 <res 00000001>          .year			resb	1						;year of century
   348 00000007 <res 00000001>          .century		resb	1						;century
   349                                  EDATETIMEL		equ	($-.second)
   350                                  endstruc
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;
   353                                  ;	MQUEUE
   354                                  ;
   355                                  ;	The MQUEUE structure maps memory used for a message queue.
   356                                  ;
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  struc			MQUEUE
   359 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   360 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   361 00000008 <res 000003F8>          MQData			resd	254						;message queue
   362                                  endstruc
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ;
   365                                  ;	OSDATA
   366                                  ;
   367                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   368                                  ;	used by the BIOS.
   369                                  ;
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  struc			OSDATA
   372 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   373 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   374 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   375 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   376 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   377 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   378 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   379 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   380 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   381 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   382 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   383 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   384 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   385 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   386 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   387 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   388 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   389 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   390 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   391 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   392 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   393 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   394 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   395 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   396 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   397 00000449 <res 00000001>          			resb	1						;449 current video mode
   398 0000044A <res 00000002>          			resw	1						;44A screen columns
   399 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   400 0000044E <res 00000002>          			resw	1						;44E current video page offset
   401 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   402 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   403 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   404 00000462 <res 00000001>          			resb	1						;462 active display page number
   405 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   406 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   407 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   408 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   409 00000469 <res 00000003>          			resb	3						;469 vague
   410 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   411 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   412 00000471 <res 00000001>          			resb	1						;471 bios break flag
   413 00000472 <res 00000002>          			resw	1						;472 soft reset
   414 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   415 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   416 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   417 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   418 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   419 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   420 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   421 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   422 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   423 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   424 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   425 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   426 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   427 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   428 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   429 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   430 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   431 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   432 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   433 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   434 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   435 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   436 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   437 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   438 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   439 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   440 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   441 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   442 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   443 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   444 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   445 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   446 000004AC <res 00000008>          			resb	8						;4AC reserved
   447 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   448 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   449 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   450 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   451 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   452 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   453 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   454 000004CD <res 00000001>          			resb	1						;4CD unknown
   455 000004CE <res 00000002>          			resw	1						;4CE day counter
   456 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   457 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   458 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   459 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   460 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   461 00000505 <res 0000000A>          			resb	10						;505 POST work area
   462 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   463 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   464 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   465 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   466 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   467 0000051E <res 00000002>          			resw	1						;51E unknown
   468 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   469 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   470 00000530 <res 00000004>          			resb	4						;530 MODE command
   471 00000534 <res 000001CC>          			resb	460						;534 unused
   472 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;	OS Variables								@disk: N/A	@mem: 000800
   476                                  ;
   477                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   478                                  ;	accessible by any kernel task or interrupt.
   479                                  ;
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  ECONDATA		equ	($)
   482 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   483 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   484 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   485 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   486 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   487 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   488 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   489 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   490 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   491 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   492 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   493 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   494 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   495 0000085C <res 00000050>          wzConsoleToken		resb	80						;token buffer
   496 000008AC <res 00000050>          wzConsoleOutBuffer	resb	80						;response output buffer
   497 000008FC <res 00000008>          wsConsoleDateTime	resb	EDATETIMEL					;date-time buffer
   498                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   499                                  endstruc
   500                                  ;-----------------------------------------------------------------------------------------------------------------------
   501                                  ;
   502                                  ;	Macros
   503                                  ;
   504                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   505                                  ;
   506                                  ;-----------------------------------------------------------------------------------------------------------------------
   507                                  %macro			mint	1
   508                                  _%1			equ	($-$$) / EKRNDESLEN
   509                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   510                                  %endmacro
   511                                  %macro			mtrap	1
   512                                  _%1			equ	($-$$) / EKRNDESLEN
   513                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   514                                  %endmacro
   515                                  %macro			menter	1
   516                                  ?%1			equ	($-$$)
   517                                  %endmacro
   518                                  %macro			tsvce	1
   519                                  e%1			equ	($-tsvc)/4
   520                                  			dd	%1
   521                                  %endmacro
   522                                  %ifdef BUILDBOOT
   523                                  ;-----------------------------------------------------------------------------------------------------------------------
   524                                  ;
   525                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   526                                  ;
   527                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   528                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   529                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   530                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   531                                  ;
   532                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   533                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   534                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   535                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   536                                  ;	immediately followed by a disk parameter table.
   537                                  ;
   538                                  ;-----------------------------------------------------------------------------------------------------------------------
   539                                  			cpu	8086						;assume minimal CPU
   540                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   541                                  			bits	16						;16-bit code at power-up
   542                                  %ifdef BUILDPREP
   543                                  Boot			jmp	word Prep					;jump to preparation code
   544                                  %else
   545 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   546                                  %endif
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;	Disk Parameter Table
   550                                  ;
   551                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   552                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   553                                  ;
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   556 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   557 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   558 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   559 00000010 02                      cbFatCount		db	2						;file allocation table copies
   560 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   561 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   562 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   563 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   564                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   565 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   566 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   567 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   568                                  ;
   569                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   570                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   571                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   572                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   573                                  ;	given several possible starting values for CS:IP.
   574                                  ;
   575                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   576 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   577                                  .@20			equ	$-$$						;.@20 = 021h
   578 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   579 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   580 00000025 B104                    			mov	cl,4						;shift count
   581 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   582 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   583 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   584                                  ;
   585                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   586                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   587                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   588                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   589                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   590                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   591                                  ;
   592 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   593 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   594 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   595 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   596 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   597                                  ;
   598                                  ;	Our boot addressability is now set up according to the following diagram.
   599                                  ;
   600                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   601                                  ;				|  Unused (DOS Program Segment Prefix)		|
   602                                  ;			007c00	+-----------------------------------------------+ DS:0100
   603                                  ;				|  Boot Sector Code (vstart=100h)		|
   604                                  ;				|						|
   605                                  ;			007e00	+-----------------------------------------------+ DS:0300
   606                                  ;				|  Boot Stack					|
   607                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   608                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   609                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   610                                  ;				|						|
   611                                  ;			009100	+-----------------------------------------------+ DS:1600
   612                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   613                                  ;				|						|
   614                                  ;			009300	+-----------------------------------------------+ DS:1800
   615                                  ;
   616                                  ;	On entry, DL indicates the drive being booted from.
   617                                  ;
   618 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   619                                  ;
   620                                  ;	Compute directory i/o buffer address.
   621                                  ;
   622 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   623 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   624 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   625 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   626                                  ;
   627                                  ;	Compute segment where os.com will be loaded.
   628                                  ;
   629 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   630 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   631 0000004E 83E810                  			sub	ax,16						;AX = 0900
   632 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   633                                  ;
   634                                  ;	Write a message to the console so we know we have our addressability established.
   635                                  ;
   636 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   637 00000057 E84B01                  			call	BootPrint					;display loader message
   638                                  ;
   639                                  ;	Initialize the number of directory sectors to search.
   640                                  ;
   641 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   642 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   643                                  ;
   644                                  ;	Compute number of directory sectors and initialize overhead count.
   645                                  ;
   646 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   647 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   648 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   649 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   650                                  ;
   651                                  ;	Compute directory entries per sector.
   652                                  ;
   653 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   654 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   655 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   656                                  ;
   657                                  ;	Compute first logical directory sector and update overhead count.
   658                                  ;
   659 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   660 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   661 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   662 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   663 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   664 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   665                                  ;
   666                                  ;	Read directory sector.
   667                                  ;
   668 00000089 B001                    .30			mov	al,1						;sector count
   669 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   670 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   671 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   672                                  ;
   673                                  ;	Setup variables to search this directory sector.
   674                                  ;
   675 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   676 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   677 0000009C 7603                    			jna	.40						;no, continue
   678 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   679 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   680 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   681 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   682                                  ;
   683                                  ;	Loop through directory sectors searching for kernel program.
   684                                  ;
   685 000000AC 56                      .50			push	si						;save kernel name address
   686 000000AD 57                      			push	di						;save dir i/o buffer address
   687 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   688 000000B1 FC                      			cld							;forward strings
   689 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   690 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   691 000000B5 5E                      			pop	si						;restore kernel name address
   692 000000B6 7418                    			je	.60						;exit loop if found
   693 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   694 000000BC 48                      			dec	ax						;decrement remaining entries
   695 000000BD 75ED                    			jnz	.50						;next entry
   696                                  ;
   697                                  ;	Repeat search if we are not at the end of the directory.
   698                                  ;
   699 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   700 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   701 000000C8 75BF                    			jne	.30						;no, get next sector
   702 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   703 000000CD E9C000                  			jmp	BootExit					;display message and exit
   704                                  ;
   705                                  ;	If we find the kernel program in the directory, read the FAT.
   706                                  ;
   707 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   708 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   709 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   710 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   711 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   712 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   713                                  ;
   714                                  ;	Get the starting cluster of the kernel program and target address.
   715                                  ;
   716 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   717 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   718                                  ;
   719                                  ;	Read each program cluster into RAM.
   720                                  ;
   721 000000E9 50                      .70			push	ax						;save cluster nbr
   722 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   723 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   724 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   725 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   726 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   727 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   728 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   729 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   730                                  ;
   731                                  ;	Update buffer pointer for next cluster.
   732                                  ;
   733 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   734 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   735 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   736 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   737 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   738                                  ;
   739                                  ;	Compute next cluster number.
   740                                  ;
   741 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   742 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   743 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   744 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   745 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   746 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   747 0000011B 83E701                  			and	di,1						;get low bit
   748 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   749 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   750 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   751                                  ;
   752                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   753                                  ;
   754 00000126 F6C101                  			test	cl,1						;is cluster odd?
   755 00000129 7404                    			jz	.80						;no, skip ahead
   756 0000012B B104                    			mov	cl,4						;shift count
   757 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   758 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   759 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   760 00000135 75B2                    			jne	.70						;no, continue
   761                                  ;
   762                                  ;	Transfer control to the operating system program.
   763                                  ;
   764 00000137 EA                      			db	0EAh						;jmp seg:offset
   765 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   766 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   767                                  ;
   768                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   769                                  ;
   770 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   771 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   772 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   773 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   774 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   775 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   776 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   777 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   778 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   779 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   780                                  ;
   781                                  ;	Try maxtries times to read sector.
   782                                  ;
   783 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   784 0000015B 53                      .10			push	bx						;save buffer address
   785 0000015C 51                      			push	cx						;save retry count
   786 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   787 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   788 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   789 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   790 0000016A 59                      			pop	cx						;restore retry count
   791 0000016B 5B                      			pop	bx						;restore buffer address
   792 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   793 0000016E E2EB                    			loop	.10						;retry
   794                                  ;
   795                                  ;	Handle disk error: convert to ASCII and store in error string.
   796                                  ;
   797 00000170 88E0                    			mov	al,ah						;AL = bios error code
   798 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   799 00000174 B210                    			mov	dl,16						;divisor for base 16
   800 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   801 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   802 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   803 0000017E 7203                    			jb	.20						;continue if numeral
   804 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   805 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   806 00000185 7203                    			jb	.30						;continue if numeral
   807 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   808 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   809 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   810 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   811 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   812 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   813 00000197 7504                    			jnz	.20						;continue if key pressed
   814 00000199 FB                      			sti							;enable maskable interrupts
   815 0000019A F4                      			hlt							;wait for interrupt
   816 0000019B EBF6                    			jmp	.10						;repeat
   817 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   818 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   819 000001A1 FB                      .30			sti							;enable maskable interrupts
   820 000001A2 F4                      			hlt							;stop until reset, int, nmi
   821 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   822                                  ;
   823                                  ;	Display text message.
   824                                  ;
   825 000001A5 FC                      BootPrint		cld							;forward strings
   826 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   827 000001A7 84C0                    			test	al,al						;end of string?
   828 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   829 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   830 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   831 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   832 000001B1 C3                      BootReturn		ret							;return
   833                                  ;-----------------------------------------------------------------------------------------------------------------------
   834                                  ;
   835                                  ;	Constants
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838                                  			align	2
   839 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   840 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   840 000001BD 4F4D               
   841 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   841 000001C8 2E2E0D0A00         
   842 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   842 000001D6 7220               
   843 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   844 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   844 000001E4 7373696E6700       
   845                                  ;-----------------------------------------------------------------------------------------------------------------------
   846                                  ;
   847                                  ;	Work Areas
   848                                  ;
   849                                  ;-----------------------------------------------------------------------------------------------------------------------
   850                                  			align	2
   851 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   852 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   853 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   854 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   855 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   856                                  wwReadCountCommand	equ	$						;read count and command
   857 000001F4 00                      wbReadCount		db	0						;sectors to read
   858 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   859                                  wwDriveHead		equ	$						;drive, head (word)
   860 000001F6 00                      wbDrive			db	0						;drive
   861 000001F7 00                      wbHead			db	0						;head
   862                                  wwSectorTrack		equ	$						;sector, track (word)
   863 000001F8 00                      			db	0						;sector
   864 000001F9 00                      wbTrack			db	0						;track
   865 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   866 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   867                                  %endif
   868                                  %ifdef BUILDPREP
   869                                  ;-----------------------------------------------------------------------------------------------------------------------
   870                                  ;
   871                                  ;	Diskette Preparation Code
   872                                  ;
   873                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   874                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   875                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   876                                  ;
   877                                  ;-----------------------------------------------------------------------------------------------------------------------
   878                                  ;
   879                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   880                                  ;
   881                                  Prep			mov	si,czPrepMsg10					;starting message address
   882                                  			call	BootPrint					;display message
   883                                  ;
   884                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   885                                  ;
   886                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   887                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   888                                  			jnz	.12						;continue if key pressed
   889                                  			sti							;enable interrupts
   890                                  			hlt							;wait for interrupt
   891                                  			jmp	.10						;repeat
   892                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   893                                  			je	.15						;yes, branch
   894                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   895                                  			jne	.10						;no, repeat
   896                                  			jmp	.90						;yes, exit program
   897                                  ;
   898                                  ;	Display writing-sector message and patch the JMP instruction.
   899                                  ;
   900                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   901                                  			call	BootPrint					;display message
   902                                  			mov	bx,Boot+1					;address of JMP instruction operand
   903                                  			mov	ax,01Bh						;address past disk parameter table
   904                                  			mov	[bx],ax						;update the JMP instruction
   905                                  ;
   906                                  ;	Try to read the boot sector.
   907                                  ;
   908                                  			mov	cx,EMAXTRIES					;try up to five times
   909                                  .20			push	cx						;save remaining tries
   910                                  			mov	bx,wcPrepInBuf					;input buffer address
   911                                  			mov	dx,0						;head zero, drive zero
   912                                  			mov	cx,1						;track zero, sector one
   913                                  			mov	ax,0201h					;read one sector
   914                                  			int	EBIOSINTDISKETTE				;attempt the read
   915                                  			pop	cx						;restore remaining retries
   916                                  			jnc	.30						;skip ahead if successful
   917                                  			loop	.20						;try again
   918                                  			mov	si,czPrepMsg20					;read-error message address
   919                                  			jmp	.50						;branch to error routine
   920                                  ;
   921                                  ;	Copy diskette parms from input buffer to output buffer.
   922                                  ;
   923                                  .30			mov	si,wcPrepInBuf					;input buffer address
   924                                  			add	si,11						;skip over JMP and system ID
   925                                  			mov	di,Boot						;output buffer address
   926                                  			add	di,11						;skip over JMP and system ID
   927                                  			mov	cx,19						;length of diskette parameters
   928                                  			cld							;forward string copies
   929                                  			rep	movsb						;copy diskette parameters
   930                                  ;
   931                                  ;	Try to write boot sector to diskette.
   932                                  ;
   933                                  			mov	cx,EMAXTRIES					;try up to five times
   934                                  .40			push	cx						;save remaining tries
   935                                  			mov	bx,Boot						;output buffer address
   936                                  			mov	dx,0						;head zero, drive zero
   937                                  			mov	cx,1						;track zero, sector one
   938                                  			mov	ax,0301h					;write one sector
   939                                  			int	EBIOSINTDISKETTE				;attempt the write
   940                                  			pop	cx						;restore remaining retries
   941                                  			jnc	.80						;skip ahead if successful
   942                                  			loop	.40						;try again
   943                                  			mov	si,czPrepMsg30					;write-error message address
   944                                  ;
   945                                  ;	Convert the error code to ASCII and display the error message.
   946                                  ;
   947                                  .50			push	ax						;save error code
   948                                  			mov	al,ah						;copy error code
   949                                  			mov	ah,0						;AX = error code
   950                                  			mov	dl,10h						;hexadecimal divisor
   951                                  			idiv	dl						;AL = hi-order, AH = lo-order
   952                                  			or	ax,3030h					;add ASCII zone digits
   953                                  			cmp	ah,3Ah						;AH ASCII numeral?
   954                                  			jb	.60						;yes, continue
   955                                  			add	ah,7						;no, make ASCII 'A'-'F'
   956                                  .60			cmp	al,3Ah						;al ASCII numeral?
   957                                  			jb	.70						;yes, continue
   958                                  			add	al,7						;no, make ASCII
   959                                  .70			mov	[si+17],ax					;put ASCII error code in message
   960                                  			call	BootPrint					;write error message
   961                                  			pop	ax						;restore error code
   962                                  ;
   963                                  ;	Display the completion message.
   964                                  ;
   965                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   966                                  			mov	al,ah						;BIOS return code
   967                                  			cmp	al,0						;success?
   968                                  			je	.85						;yes, continue
   969                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   970                                  			cmp	al,1						;disk parameter error?
   971                                  			je	.85						;yes, continue
   972                                  			mov	si,czPrepMsgErr2				;address mark not found message
   973                                  			cmp	al,2						;address mark not found?
   974                                  			je	.85						;yes, continue
   975                                  			mov	si,czPrepMsgErr3				;protected disk message
   976                                  			cmp	al,3						;protected disk?
   977                                  			je	.85						;yes, continue
   978                                  			mov	si,czPrepMsgErr6				;diskette removed message
   979                                  			cmp	al,6						;diskette removed?
   980                                  			je	.85						;yes, continue
   981                                  			mov	si,czPrepMsgErr80				;drive timed out message
   982                                  			cmp	al,80H						;drive timed out?
   983                                  			je	.85						;yes, continue
   984                                  			mov	si,czPrepMsgErrXX				;unknown error message
   985                                  .85			call	BootPrint					;display result message
   986                                  .90			mov	ax,4C00H					;terminate with zero result code
   987                                  			int	21h						;terminate DOS program
   988                                  			ret							;return (should not execute)
   989                                  ;-----------------------------------------------------------------------------------------------------------------------
   990                                  ;
   991                                  ;	Diskette Preparation Messages
   992                                  ;
   993                                  ;-----------------------------------------------------------------------------------------------------------------------
   994                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   995                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   996                                  			db	13,10
   997                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   998                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   999                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1000                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1001                                  			db	13,10,0
  1002                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1003                                  			db	13,10,0
  1004                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1005                                  			db	13,10,0
  1006                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1007                                  			db	13,10,0
  1008                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1009                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1010                                  			db	13,10,0
  1011                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1012                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1013                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1014                                  			db	13,10,"and retry."
  1015                                  			db	13,10,0
  1016                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1017                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1018                                  			db	13,10,"using another diskette."
  1019                                  			db	13,10,0
  1020                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1021                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1022                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1023                                  			db	13,10,0
  1024                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1025                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1026                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1027                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1028                                  			db	13,10,"is properly inserted in the diskette drive."
  1029                                  			db	13,10,0
  1030                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1031                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1032                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1033                                  			db	13,10,0
  1034                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1035                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1036                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1037                                  			db	13,10,0
  1038                                  wcPrepInBuf		equ	$
  1039                                  %endif
  1040                                  %ifdef BUILDDISK
  1041                                  ;-----------------------------------------------------------------------------------------------------------------------
  1042                                  ;
  1043                                  ;	File Allocation Tables
  1044                                  ;
  1045                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1046                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1047                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1048                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1049                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1050                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1051                                  ;	the last cluster in the chain.
  1052                                  ;
  1053                                  ;	Every three bytes encode two FAT entries as follows:
  1054                                  ;
  1055                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1056                                  ;
  1057                                  ;-----------------------------------------------------------------------------------------------------------------------
  1058                                  ;-----------------------------------------------------------------------------------------------------------------------
  1059                                  ;
  1060                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1061                                  ;
  1062                                  ;-----------------------------------------------------------------------------------------------------------------------
  1063                                  section			fat1							;first copy of FAT
  1064 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1065 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1066 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1067 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1068 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1069 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1070 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1071 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1072 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1073 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1074 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1075 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1079                                  ;
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081                                  section			fat2							;second copy of FAT
  1082 00000000 F0FFFF034000            			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1083 00000006 056000078000            			db	005h,060h,000h,	007h,080h,000h
  1084 0000000C 09A0000BC000            			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1085 00000012 0DE0000F0001            			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1086 00000018 112001134001            			db	011h,020h,001h,	013h,040h,001h
  1087 0000001E 156001178001            			db	015h,060h,001h,	017h,080h,001h
  1088 00000024 19A0011BC001            			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1089 0000002A 1DE0011F0002            			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1090 00000030 212002234002            			db	021h,020h,002h,	023h,040h,002h
  1091 00000036 256002278002            			db	025h,060h,002h,	027h,080h,002h
  1092 0000003C 29A002FF0F00            			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1093 00000042 00<rept>                			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1094                                  ;-----------------------------------------------------------------------------------------------------------------------
  1095                                  ;
  1096                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1097                                  ;
  1098                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1099                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1100                                  ;	copy.
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                  section			dir							;diskette directory
  1104 00000000 4F5320202020202043-     			db	"OS      COM"					;file name (must contain spaces)
  1104 00000009 4F4D               
  1105 0000000B 20                      			db	20h						;attribute (archive bit set)
  1106 0000000C 00<rept>                			times	10 db 0;					;unused
  1107 00000016 0000                    			dw	0h						;time
  1108 00000018 41                      			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1109 00000019 49                      			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1110 0000001A 0200                    			dw	2						;first cluster
  1111 0000001C 00520000                			dd	5200h						;file size
  1112 00000020 00<rept>                			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1113                                  %endif
  1114                                  %ifdef BUILDCOM
  1115                                  ;-----------------------------------------------------------------------------------------------------------------------
  1116                                  ;
  1117                                  ;	OS.COM
  1118                                  ;
  1119                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1120                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1121                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1122                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1123                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1124                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1125                                  ;
  1126                                  ;	Our loader addressability is set up according to the following diagram.
  1127                                  ;
  1128                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1129                                  ;				|  Boot Sector & Loader Stack Area		|
  1130                                  ;				|						|
  1131                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1132                                  ;
  1133                                  ;
  1134                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1135                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1136                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1137                                  ;				|  Loader Code					|
  1138                                  ;				|						|
  1139                                  ;			009300	+-----------------------------------------------+ CS:0200
  1140                                  ;
  1141                                  ;-----------------------------------------------------------------------------------------------------------------------
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  ;
  1144                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1145                                  ;
  1146                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1147                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1148                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1149                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1150                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1151                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1152                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1153                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1154                                  ;	registers.
  1155                                  ;
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  			cpu	8086						;assume minimal CPU
  1158                                  section			loader	vstart=100h					;use .COM compatible addressing
  1159                                  			bits	16						;this is 16-bit code
  1160 00000000 0E                      Loader			push	cs						;use the code segment
  1161 00000001 1F                      			pop	ds						;...as our data segment
  1162 00000002 0E                      			push	cs						;use the code segment
  1163 00000003 07                      			pop	es						;...as our extra segment
  1164                                  ;
  1165                                  ;	Write a message to the console so we know we have our addressability established.
  1166                                  ;
  1167 00000004 BE[5B01]                			mov	si,czStartingMsg				;starting message
  1168 00000007 E8A600                  			call	PutTTYString					;display loader message
  1169                                  ;
  1170                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1171                                  ;
  1172 0000000A E88300                  			call	GetCPUType					;AL = cpu type
  1173 0000000D BE[C800]                			mov	si,czCPUErrorMsg				;loader error message
  1174 00000010 3C03                    			cmp	al,3						;80386+?
  1175 00000012 7267                    			jb	LoaderExit					;no, exit with error message
  1176                                  			cpu	386						;allow 80386 instructions
  1177 00000014 BE[3301]                			mov	si,czCPUOKMsg					;cpu ok message
  1178 00000017 E89600                  			call	PutTTYString					;display message
  1179                                  ;
  1180                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1181                                  ;
  1182 0000001A BE0003                  			mov	si,300h						;GDT offset
  1183 0000001D 8CC8                    			mov	ax,cs						;AX:SI = gdt source
  1184 0000001F C1C004                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1185 00000022 88C1                    			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1186 00000024 24F0                    			and	al,0F0h						;AL = phys addr bits 11-0
  1187 00000026 80E10F                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1188 00000029 894432                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1189 0000002C 884C34                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1190 0000002F BE[3C01]                			mov	si,czGDTOKMsg					;GDT prepared message
  1191 00000032 E87B00                  			call	PutTTYString					;display message
  1192                                  ;
  1193                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1194                                  ;
  1195 00000035 680001                  			push	EKRNSEG						;use kernel segment ...
  1196 00000038 07                      			pop	es						;... as target segment
  1197 00000039 31FF                    			xor	di,di						;ES:DI = target address
  1198 0000003B BE0003                  			mov	si,300h						;DS:SI = source address
  1199 0000003E B90050                  			mov	cx,5000h					;CX = kernel size
  1200 00000041 FC                      			cld							;forward strings
  1201 00000042 F3A4                    			rep	movsb						;copy kernel image
  1202 00000044 BE[4B01]                			mov	si,czKernelLoadedMsg				;kernel moved message
  1203 00000047 E86600                  			call	PutTTYString					;display message
  1204                                  ;
  1205                                  ;	Switch to protected mode.
  1206                                  ;
  1207 0000004A 31F6                    			xor	si,si						;ES:SI = gdt addr
  1208 0000004C 8ED6                    			mov	ss,si						;protected mode ss
  1209 0000004E BC0010                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1210 00000051 B489                    			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1211 00000053 BB2820                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1212 00000056 BA1F00                  			mov	dx,001Fh					;outer delay loop count
  1213 00000059 B9FFFF                  .10			mov	cx,0FFFFh					;inner delay loop count
  1214 0000005C E2FE                    			loop	$						;wait out pending interrupts
  1215 0000005E 4A                      			dec	dx						;restore outer loop count
  1216 0000005F 75F8                    			jnz	.10						;continue outer loop
  1217 00000061 CD15                    			int	EBIOSINTMISC					;call BIOS to set protected mode
  1218                                  ;
  1219                                  ;	Enable hardware and maskable interrupts
  1220                                  ;
  1221 00000063 30C0                    			xor	al,al						;enable all registers code
  1222 00000065 E621                    			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1223 00000067 E6A1                    			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1224 00000069 FB                      			sti							;enable maskable interrupts
  1225                                  ;
  1226                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1227                                  ;
  1228 0000006A 2E0F001E[BE00]          			ltr	[cs:cwLoaderTSS]				;load task register
  1229 00000070 2E0F0016[C000]          			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1230 00000076 EA00005800              			jmp	0058h:0						;jump to task state segment selector
  1231                                  ;-----------------------------------------------------------------------------------------------------------------------
  1232                                  ;
  1233                                  ;	Routine:	LoaderExit
  1234                                  ;
  1235                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1236                                  ;
  1237                                  ;	In:		DS:SI	string address
  1238                                  ;
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240 0000007B E83200                  LoaderExit		call	PutTTYString					;display error message
  1241                                  ;
  1242                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1243                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1244                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1245                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1246                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1247                                  ;
  1248 0000007E B401                    .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1249 00000080 CD16                    			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1250 00000082 7504                    			jnz	.40						;exit if key pressed
  1251 00000084 FB                      			sti							;enable maskable interrupts
  1252 00000085 F4                      			hlt							;wait for interrupt
  1253 00000086 EBF6                    			jmp	.30						;repeat until keypress
  1254                                  ;
  1255                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1256                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1257                                  ;	HLT until the system resets.
  1258                                  ;
  1259 00000088 B0FE                    .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1260 0000008A E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1261 0000008C FB                      .50			sti							;enable maskable interrupts
  1262 0000008D F4                      			hlt							;stop until reset, int, nmi
  1263 0000008E EBFC                    			jmp	.50						;loop until restart kicks in
  1264                                  ;-----------------------------------------------------------------------------------------------------------------------
  1265                                  ;
  1266                                  ;	Routine:	GetCPUType
  1267                                  ;
  1268                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1269                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1270                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1271                                  ;
  1272                                  ;	Output:		AX	0 = 808x, v20, etc.
  1273                                  ;				1 = 80186
  1274                                  ;				2 = 80286
  1275                                  ;				3 = 80386
  1276                                  ;
  1277                                  ;-----------------------------------------------------------------------------------------------------------------------
  1278 00000090 B001                    GetCPUType		mov	al,1						;AL = 1
  1279 00000092 B120                    			mov	cl,32						;shift count
  1280 00000094 D2E8                    			shr	al,cl						;try a 32-bit shift
  1281 00000096 08C0                    			or	al,al						;did the shift happen?
  1282 00000098 7415                    			jz	.10						;yes, cpu is 808x, v20, etc.
  1283                                  			cpu	186
  1284 0000009A 54                      			push	sp						;save stack pointer
  1285 0000009B 59                      			pop	cx						;...into cx
  1286 0000009C 39E1                    			cmp	cx,sp						;did sp decrement before push?
  1287 0000009E 750F                    			jne	.10						;yes, cpu is 80186
  1288                                  			cpu	286
  1289 000000A0 40                      			inc	ax						;AX = 2
  1290 000000A1 0F0106[C200]            			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1291 000000A6 8A0E[C700]              			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1292 000000AA FEC1                    			inc	cl						;was hi-byte of GDTR 0xff?
  1293 000000AC 7401                    			jz	.10						;yes, cpu is 80286
  1294 000000AE 40                      			inc	ax						;AX = 3
  1295 000000AF C3                      .10			ret							;return
  1296                                  ;-----------------------------------------------------------------------------------------------------------------------
  1297                                  ;
  1298                                  ;	Routine:	PutTTYString
  1299                                  ;
  1300                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1301                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1302                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1303                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1304                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1305                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1306                                  ;			registers and flags unless used to indicate return status.
  1307                                  ;
  1308                                  ;	In:		DS:SI	address of string
  1309                                  ;
  1310                                  ;-----------------------------------------------------------------------------------------------------------------------
  1311 000000B0 FC                      PutTTYString		cld							;forward strings
  1312 000000B1 AC                      			lodsb							;load next byte at DS:SI in AL
  1313 000000B2 84C0                    			test	al,al						;end of string?
  1314 000000B4 7406                    			jz	.10						;... yes, exit our loop
  1315 000000B6 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1316 000000B8 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1317 000000BA EBF4                    			jmp	PutTTYString					;repeat until done
  1318 000000BC C3                      .10			ret							;return
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  ;
  1321                                  ;	Loader Data
  1322                                  ;
  1323                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1324                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1325                                  ;
  1326                                  ;-----------------------------------------------------------------------------------------------------------------------
  1327 000000BD 90                      			align	2
  1328 000000BE 6800                    cwLoaderTSS		dw	0068h						;TSS selector
  1329 000000C0 6000                    cwLoaderLDT		dw	0060h						;LDT selector
  1330 000000C2 00<rept>                cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1331 000000C7 00                      cbLoaderGDTHiByte	db	0						;hi-order byte
  1332 000000C8 546865206F70657261-     czCPUErrorMsg		db	"The operating system requires an i386 "
  1332 000000D1 74696E672073797374-
  1332 000000DA 656D20726571756972-
  1332 000000E3 657320616E20693338-
  1332 000000EC 3620               
  1333 000000EE 6F72206C6174657220-     			db	"or later processor.",13,10,
  1333 000000F7 70726F636573736F72-
  1333 00000100 2E0D0A             
  1334 00000103 506C65617365207072-     			db	"Please press any key to restart the "
  1334 0000010C 65737320616E79206B-
  1334 00000115 657920746F20726573-
  1334 0000011E 746172742074686520 
  1335 00000127 636F6D70757465722E-     			db	"computer.",13,10,0
  1335 00000130 0D0A00             
  1336 00000133 435055206F6B0D0A00      czCPUOKMsg		db	"CPU ok",13,10,0
  1337 0000013C 474454207072657061-     czGDTOKMsg		db	"GDT prepared",13,10,0
  1337 00000145 7265640D0A00       
  1338 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1338 00000154 616465640D0A00     
  1339 0000015B 5374617274696E6720-     czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1339 00000164 2E2E2E0D0A00       
  1340 0000016A 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
  1341 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  ;
  1344                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1345                                  ;
  1346                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1347                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1348                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1349                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1350                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1351                                  ;
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;	Tables
  1356                                  ;
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;
  1360                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1361                                  ;
  1362                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1363                                  ;	first descriptor must be all nulls.
  1364                                  ;
  1365                                  ;	6   5         4         3         2         1         0
  1366                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1367                                  ;	----------------------------------------------------------------
  1368                                  ;	h......hffffmmmma......ab......................bn..............n
  1369                                  ;	00000000			all areas have base addresses below 2^24
  1370                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1371                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1372                                  ;	            1001		present, ring-0, selector
  1373                                  ;
  1374                                  ;	h...h	hi-order base address (bits 24-31)
  1375                                  ;	ffff	flags
  1376                                  ;	mmmm	hi-order limit (bits 16-19)
  1377                                  ;	a...a	access
  1378                                  ;	b...b	lo-order base address (bits 0-23)
  1379                                  ;	n...n	lo-order limit (bits 0-15)
  1380                                  ;
  1381                                  ;-----------------------------------------------------------------------------------------------------------------------
  1382                                  section			gdt							;global descriptor table
  1383 00000000 0000000000000000        			dq	0000000000000000h				;00 required null selector
  1384 00000008 FF07001000934000        			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1385 00000010 FF07001800934000        			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1386 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1387 00000020 FF0F00800B934000        			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1388 00000028 FF0F000000934000        			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1389 00000030 FFFF0000009B0000        			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1390 00000038 FFFF0000FF9B0000        			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1391 00000040 FFFF000400934000        			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1392 00000048 FF1F0020009B4000        			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1393 00000050 7F00004700824000        			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1394 00000058 7F00804700894000        			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1395 00000060 7F00000F00824000        			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1396 00000068 7F00800F00894000        			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1397 00000070 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1398                                  ;-----------------------------------------------------------------------------------------------------------------------
  1399                                  ;
  1400                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1401                                  ;
  1402                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1403                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1404                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1405                                  ;
  1406                                  ;	6   5         4         3         2         1         0
  1407                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1408                                  ;	----------------------------------------------------------------
  1409                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1410                                  ;
  1411                                  ;	h...h	high-order offset (bits 16-31)
  1412                                  ;	P	present (0=unused interrupt)
  1413                                  ;	zz	descriptor privilege level
  1414                                  ;	S	storage segment (must be zero for IDT)
  1415                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1416                                  ;	S...S	handling code selector in GDT
  1417                                  ;	l...l	lo-order offset (bits 0-15)
  1418                                  ;
  1419                                  ;-----------------------------------------------------------------------------------------------------------------------
  1420                                  section			idt							;interrupt descriptor table
  1421                                  			mint	dividebyzero					;00 divide by zero
  1421                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1421 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1422                                  			mint	singlestep					;01 single step
  1422                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1422 00000008 04004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1423                                  			mint	nmi						;02 non-maskable
  1423                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1423 00000010 08004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1424                                  			mint	break						;03 break
  1424                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1424 00000018 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1425                                  			mint	into						;04 into
  1425                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1425 00000020 10004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1426                                  			mint	bounds						;05 bounds
  1426                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1426 00000028 14004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1427                                  			mint	badopcode					;06 bad op code
  1427                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1427 00000030 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1428                                  			mint	nocoproc					;07 no coprocessor
  1428                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1428 00000038 1C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1429                                  			mint	doublefault					;08 double-fault
  1429                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1429 00000040 20004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1430                                  			mint	operand						;09 operand
  1430                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1430 00000048 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1431                                  			mint	badtss						;0A bad TSS
  1431                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1431 00000050 28004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1432                                  			mint	notpresent					;0B not-present
  1432                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1432 00000058 2C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1433                                  			mint	stacklimit					;0C stack limit
  1433                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1433 00000060 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1434                                  			mint	protection					;0D general protection fault
  1434                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1434 00000068 34004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1435                                  			mint	int14						;0E (reserved)
  1435                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1435 00000070 38004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1436                                  			mint	int15						;0F (reserved)
  1436                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1436 00000078 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1437                                  			mint	coproccalc					;10 (reserved)
  1437                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1437 00000080 40004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1438                                  			mint	int17						;11 (reserved)
  1438                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1438 00000088 44004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1439                                  			mint	int18						;12 (reserved)
  1439                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1439 00000090 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1440                                  			mint	int19						;13 (reserved)
  1440                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1440 00000098 4C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1441                                  			mint	int20						;14 (reserved)
  1441                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1441 000000A0 50004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1442                                  			mint	int21						;15 (reserved)
  1442                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1442 000000A8 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1443                                  			mint	int22						;16 (reserved)
  1443                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1443 000000B0 58004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1444                                  			mint	int23						;17 (reserved)
  1444                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1444 000000B8 5C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1445                                  			mint	int24						;18 (reserved)
  1445                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1445 000000C0 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1446                                  			mint	int25						;19 (reserved)
  1446                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1446 000000C8 64004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1447                                  			mint	int26						;1A (reserved)
  1447                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1447 000000D0 68004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1448                                  			mint	int27						;1B (reserved)
  1448                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1448 000000D8 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1449                                  			mint	int28						;1C (reserved)
  1449                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1449 000000E0 70004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1450                                  			mint	int29						;1D (reserved)
  1450                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1450 000000E8 74004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1451                                  			mint	int30						;1E (reserved)
  1451                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1451 000000F0 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1452                                  			mint	int31						;1F (reserved)
  1452                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1452 000000F8 7C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1453                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1453                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1453 00000100 80004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1454                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1454                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1454 00000108 D0004800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1455                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1455                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1455 00000110 2B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1456                                  			mtrap	com2						;23 IRQ3 com2
  1456                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1456 00000118 2E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1457                                  			mtrap	com1						;24 IRQ4 com1
  1457                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1457 00000120 31044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1458                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1458                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1458 00000128 34044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1459                                  			mtrap	diskette					;26 IRQ6 diskette
  1459                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1459 00000130 37044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1460                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1460                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1460 00000138 4B044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1461                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1461                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1461 00000140 4E044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1462                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1462                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1462 00000148 51044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1463                                  			mtrap	irq10						;2A IRQA (reserved)
  1463                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1463 00000150 54044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1464                                  			mtrap	irq11						;2B IRQB (reserved)
  1464                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1464 00000158 57044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1465                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1465                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1465 00000160 5A044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1466                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1466                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1466 00000168 5D044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1467                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1467                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1467 00000170 60044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1468                                  			mtrap	irq15						;2F IRQF (reserved)
  1468                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1468 00000178 63044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1469                                  			mtrap	svc						;30 OS services
  1469                              <1> _%1 equ ($-$$) / EKRNDESLEN
  1469 00000180 72044800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1470 00000188 00<rept>                			times	2048-($-$$) db 0h				;zero fill to end of section
  1471                                  ;-----------------------------------------------------------------------------------------------------------------------
  1472                                  ;
  1473                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1474                                  ;
  1475                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1476                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1477                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1478                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1479                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1480                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1481                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1482                                  ;
  1483                                  ;-----------------------------------------------------------------------------------------------------------------------
  1484                                  section			kernel	vstart=0h					;data offsets relative to 0
  1485                                  			cpu	386						;allow 80386 instructions
  1486                                  			bits	32						;this is 32-bit code
  1487                                  ;-----------------------------------------------------------------------------------------------------------------------
  1488                                  ;
  1489                                  ;	CPU Interrupt Handlers
  1490                                  ;
  1491                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1492                                  ;
  1493                                  ;-----------------------------------------------------------------------------------------------------------------------
  1494                                  			menter	dividebyzero					;divide by zero
  1494                              <1> ?%1 equ ($-$$)
  1495 00000000 6A00                    			push	0						;
  1496 00000002 EB7A                    			jmp	intcpu						;
  1497                                  			menter	singlestep					;single step
  1497                              <1> ?%1 equ ($-$$)
  1498 00000004 6A01                    			push	1						;
  1499 00000006 EB76                    			jmp	intcpu						;
  1500                                  			menter	nmi						;non-maskable
  1500                              <1> ?%1 equ ($-$$)
  1501 00000008 6A02                    			push	2						;
  1502 0000000A EB72                    			jmp	intcpu						;
  1503                                  			menter	break						;break
  1503                              <1> ?%1 equ ($-$$)
  1504 0000000C 6A03                    			push	3						;
  1505 0000000E EB6E                    			jmp	intcpu						;
  1506                                  			menter	into						;into
  1506                              <1> ?%1 equ ($-$$)
  1507 00000010 6A04                    			push	4						;
  1508 00000012 EB6A                    			jmp	intcpu						;
  1509                                  			menter	bounds						;bounds
  1509                              <1> ?%1 equ ($-$$)
  1510 00000014 6A05                    			push	5						;
  1511 00000016 EB66                    			jmp	intcpu						;
  1512                                  			menter	badopcode					;bad opcode interrupt
  1512                              <1> ?%1 equ ($-$$)
  1513 00000018 6A06                    			push	6						;
  1514 0000001A EB62                    			jmp	intcpu						;
  1515                                  			menter	nocoproc					;no coprocessor interrupt
  1515                              <1> ?%1 equ ($-$$)
  1516 0000001C 6A07                    			push	7						;
  1517 0000001E EB5E                    			jmp	intcpu						;
  1518                                  			menter	doublefault					;doublefault interrupt
  1518                              <1> ?%1 equ ($-$$)
  1519 00000020 6A08                    			push	8						;
  1520 00000022 EB5A                    			jmp	intcpu						;
  1521                                  			menter	operand						;operand interrupt
  1521                              <1> ?%1 equ ($-$$)
  1522 00000024 6A09                    			push	9						;
  1523 00000026 EB56                    			jmp	intcpu						;
  1524                                  			menter	badtss						;bad tss interrupt
  1524                              <1> ?%1 equ ($-$$)
  1525 00000028 6A0A                    			push	10						;
  1526 0000002A EB52                    			jmp	intcpu						;
  1527                                  			menter	notpresent					;not present interrupt
  1527                              <1> ?%1 equ ($-$$)
  1528 0000002C 6A0B                    			push	11						;
  1529 0000002E EB4E                    			jmp	intcpu						;
  1530                                  			menter	stacklimit					;stack limit interrupt
  1530                              <1> ?%1 equ ($-$$)
  1531 00000030 6A0C                    			push	12						;
  1532 00000032 EB4A                    			jmp	intcpu						;
  1533                                  			menter	protection					;protection fault interrupt
  1533                              <1> ?%1 equ ($-$$)
  1534 00000034 6A0D                    			push	13						;
  1535 00000036 EB46                    			jmp	intcpu						;
  1536                                  			menter	int14						;(reserved)
  1536                              <1> ?%1 equ ($-$$)
  1537 00000038 6A0E                    			push	14						;
  1538 0000003A EB42                    			jmp	intcpu						;
  1539                                  			menter	int15						;(reserved)
  1539                              <1> ?%1 equ ($-$$)
  1540 0000003C 6A0F                    			push	15						;
  1541 0000003E EB3E                    			jmp	intcpu						;
  1542                                  			menter	coproccalc					;coprocessor calculation
  1542                              <1> ?%1 equ ($-$$)
  1543 00000040 6A10                    			push	16						;
  1544 00000042 EB3A                    			jmp	intcpu						;
  1545                                  			menter	int17						;(reserved)
  1545                              <1> ?%1 equ ($-$$)
  1546 00000044 6A11                    			push	17						;
  1547 00000046 EB36                    			jmp	intcpu						;
  1548                                  			menter	int18						;(reserved)
  1548                              <1> ?%1 equ ($-$$)
  1549 00000048 6A12                    			push	18						;
  1550 0000004A EB32                    			jmp	intcpu						;
  1551                                  			menter	int19						;(reserved)
  1551                              <1> ?%1 equ ($-$$)
  1552 0000004C 6A13                    			push	19						;
  1553 0000004E EB2E                    			jmp	intcpu						;
  1554                                  			menter	int20						;(reserved)
  1554                              <1> ?%1 equ ($-$$)
  1555 00000050 6A14                    			push	20						;
  1556 00000052 EB2A                    			jmp	intcpu						;
  1557                                  			menter	int21						;(reserved)
  1557                              <1> ?%1 equ ($-$$)
  1558 00000054 6A15                    			push	21						;
  1559 00000056 EB26                    			jmp	intcpu						;
  1560                                  			menter	int22						;(reserved)
  1560                              <1> ?%1 equ ($-$$)
  1561 00000058 6A16                    			push	22						;
  1562 0000005A EB22                    			jmp	intcpu						;
  1563                                  			menter	int23						;(reserved)
  1563                              <1> ?%1 equ ($-$$)
  1564 0000005C 6A17                    			push	23						;
  1565 0000005E EB1E                    			jmp	intcpu						;
  1566                                  			menter	int24						;(reserved)
  1566                              <1> ?%1 equ ($-$$)
  1567 00000060 6A18                    			push	24						;
  1568 00000062 EB1A                    			jmp	intcpu						;
  1569                                  			menter	int25						;(reserved)
  1569                              <1> ?%1 equ ($-$$)
  1570 00000064 6A19                    			push	25						;
  1571 00000066 EB16                    			jmp	intcpu						;
  1572                                  			menter	int26						;(reserved)
  1572                              <1> ?%1 equ ($-$$)
  1573 00000068 6A1A                    			push	26						;
  1574 0000006A EB12                    			jmp	intcpu						;
  1575                                  			menter	int27						;(reserved)
  1575                              <1> ?%1 equ ($-$$)
  1576 0000006C 6A1B                    			push	27						;
  1577 0000006E EB0E                    			jmp	intcpu						;
  1578                                  			menter	int28						;(reserved)
  1578                              <1> ?%1 equ ($-$$)
  1579 00000070 6A1C                    			push	28						;
  1580 00000072 EB0A                    			jmp	intcpu						;
  1581                                  			menter	int29						;(reserved)
  1581                              <1> ?%1 equ ($-$$)
  1582 00000074 6A1D                    			push	29						;
  1583 00000076 EB06                    			jmp	intcpu						;
  1584                                  			menter	int30						;(reserved)
  1584                              <1> ?%1 equ ($-$$)
  1585 00000078 6A1E                    			push	30						;
  1586 0000007A EB02                    			jmp	intcpu						;
  1587                                  			menter	int31						;(reserved)
  1587                              <1> ?%1 equ ($-$$)
  1588 0000007C 6A1F                    			push	31						;
  1589 0000007E 58                      intcpu			pop	eax						;
  1590 0000007F CF                      			iretd							;return
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;	Hardware Device Interupts
  1594                                  ;
  1595                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1596                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1597                                  ;	(BX=2028h).
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  ;-----------------------------------------------------------------------------------------------------------------------
  1601                                  ;
  1602                                  ;	IRQ0	Clock Tick Interrupt
  1603                                  ;
  1604                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1605                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1606                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1607                                  ;
  1608                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1609                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1610                                  ;
  1611                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1612                                  ;	zero, the floppy disk motors are turned off.
  1613                                  ;
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  			menter	clocktick					;clock tick interrupt
  1615                              <1> ?%1 equ ($-$$)
  1616 00000080 50                      			push	eax						;save modified regs
  1617 00000081 52                      			push	edx						;
  1618 00000082 1E                      			push	ds						;
  1619 00000083 6A18                    			push	ESELDAT						;load OS data selector ...
  1620 00000085 1F                      			pop	ds						;... into data segment register
  1621 00000086 A16C040000              			mov	eax,[wfClockTicks]				;eax = clock ticks
  1622 0000008B 40                      			inc	eax						;increment clock ticks
  1623 0000008C 3DB0001800              			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1624 00000091 7208                    			jb	irq0.10						;no, skip ahead
  1625 00000093 FE0570040000            			inc	byte [wbClockDays]				;increment clock days
  1626 00000099 31C0                    			xor	eax,eax						;reset clock ticks
  1627 0000009B A36C040000              irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1628 000000A0 803D4004000000          			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1629 000000A7 741E                    			je	irq0.20						;yes, skip ahead
  1630 000000A9 FE0D40040000            			dec	byte [wbFDCMotor]				;decrement motor timeout
  1631 000000AF 7516                    			jnz	irq0.20						;skip ahead if non-zero
  1632 000000B1 FB                      			sti							;enable maskable interrupts
  1633 000000B2 B603                    irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1634 000000B4 B2F4                    			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1635 000000B6 EC                      			in	al,dx						;FDC main status byte
  1636 000000B7 A810                    			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1637 000000B9 75F7                    			jnz	irq0.15						;wait while busy
  1638 000000BB B00C                    			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1639 000000BD A23F040000              			mov	byte [wbFDCControl],al				;save motor-off setting
  1640 000000C2 B603                    			mov	dh,EFDCPORTHI					;fdc port hi
  1641 000000C4 B2F2                    			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1642 000000C6 EE                      			out	dx,al						;turn motor off
  1643 000000C7 E8EB070000              irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1644 000000CC 1F                      			pop	ds						;restore modified regs
  1645 000000CD 5A                      			pop	edx						;
  1646 000000CE 58                      			pop	eax						;
  1647 000000CF CF                      			iretd							;return
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                  ;
  1650                                  ;	IRQ1	Keyboard Interrupt
  1651                                  ;
  1652                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1653                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1654                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1655                                  ;	ALL modified registers upon return.
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  			menter	keyboard					;keyboard interrrupt
  1658                              <1> ?%1 equ ($-$$)
  1659 000000D0 50                      			push	eax						;save non-volatile regs
  1660 000000D1 53                      			push	ebx						;
  1661 000000D2 51                      			push	ecx						;
  1662 000000D3 56                      			push	esi						;
  1663 000000D4 1E                      			push	ds						;
  1664 000000D5 6A18                    			push	ESELDAT						;load OS data selector ...
  1665 000000D7 1F                      			pop	ds						;... into data segment register
  1666 000000D8 30C0                    			xor	al,al						;zero
  1667 000000DA A205080000              			mov	[wbConsoleScan0],al				;clear scan code 0
  1668 000000DF A206080000              			mov	[wbConsoleScan1],al				;clear scan code 1
  1669 000000E4 A207080000              			mov	[wbConsoleScan2],al				;clear scan code 2
  1670 000000E9 A208080000              			mov	[wbConsoleScan3],al				;clear scan code 3
  1671 000000EE A209080000              			mov	[wbConsoleScan4],al				;clear scan code 4
  1672 000000F3 A20A080000              			mov	[wbConsoleScan5],al				;clear scan code 5
  1673 000000F8 B020                    			mov	al,' '						;space
  1674 000000FA A20B080000              			mov	[wbConsoleChar],al				;set character to space
  1675 000000FF B080                    			mov	al,EKEYTIMEOUT					;controller timeout flag
  1676 00000101 F6D0                    			not	al						;controller timeout mask
  1677 00000103 200504080000            			and	[wbConsoleStatus],al				;clear controller timeout flag
  1678 00000109 8A1D02080000            			mov	bl,[wbConsoleShift]				;shift flags
  1679 0000010F 8A3D03080000            			mov	bh,[wbConsoleLock]				;lock flags
  1680 00000115 E852080000              			call	WaitForKeyOutBuffer				;controller timeout?
  1681 0000011A 0F84F3010000            			jz	irq1.140					;yes, skip ahead
  1682 00000120 E460                    			in	al,EKEYPORTDATA					;read scan code 0
  1683 00000122 A205080000              			mov	[wbConsoleScan0],al				;save scan code 0
  1684 00000127 88C4                    			mov	ah,al						;copy scan code 0
  1685 00000129 B002                    			mov	al,EKEYSHIFTLEFT				;left shift flag
  1686 0000012B 80FC2A                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1687 0000012E 0F84E0000000            			je	irq1.30						;yes, set flag
  1688 00000134 80FCAA                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1689 00000137 0F84DB000000            			je	irq1.40						;yes, reset flag
  1690 0000013D B010                    			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1691 0000013F 80FC36                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1692 00000142 0F84CC000000            			je	irq1.30						;yes, set flag
  1693 00000148 80FCB6                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1694 0000014B 0F84C7000000            			je	irq1.40						;yes, reset flag
  1695 00000151 B001                    			mov	al,EKEYCTRLLEFT					;left control flag
  1696 00000153 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1697 00000156 0F84B8000000            			je	irq1.30						;yes, set flag
  1698 0000015C 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1699 0000015F 0F84B3000000            			je	irq1.40						;yes, reset flag
  1700 00000165 B004                    			mov	al,EKEYALTLEFT					;left alt flag
  1701 00000167 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1702 0000016A 0F84A4000000            			je	irq1.30						;yes, set flag
  1703 00000170 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1704 00000173 0F849F000000            			je	irq1.40						;yes, reset flag
  1705 00000179 B004                    			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1706 0000017B 80FC3A                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1707 0000017E 0F849A000000            			je	irq1.50						;yes, toggle lamps and flags
  1708 00000184 B002                    			mov	al,EKEYLOCKNUM					;num-lock flag
  1709 00000186 80FC45                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1710 00000189 0F848F000000            			je	irq1.50						;yes, toggle lamps and flags
  1711 0000018F B001                    			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1712 00000191 80FC46                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1713 00000194 0F8484000000            			je	irq1.50						;yes, toggle lamps and flags
  1714 0000019A 80FCE0                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1715 0000019D 0F8598000000            			jne	irq1.70 					;no, skip ahead
  1716 000001A3 E8C4070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1717 000001A8 0F8465010000            			jz	irq1.140					;yes, skip ahead
  1718 000001AE E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1719 000001B0 A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1720 000001B5 88C4                    			mov	ah,al						;copy scan code 1
  1721 000001B7 B008                    			mov	al,EKEYCTRLRIGHT				;right control flag
  1722 000001B9 80FC1D                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1723 000001BC 7456                    			je	irq1.30						;yes, set flag
  1724 000001BE 80FC9D                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1725 000001C1 7455                    			je	irq1.40						;yes, reset flag
  1726 000001C3 B020                    			mov	al,EKEYALTRIGHT					;right alt flag
  1727 000001C5 80FC38                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1728 000001C8 744A                    			je	irq1.30						;yes, set flag
  1729 000001CA 80FCB8                  			cmp	ah,EKEYALTUP					;alt key up code?
  1730 000001CD 7449                    			je	irq1.40						;yes, reset flag
  1731 000001CF 80FC35                  			cmp	ah,EKEYSLASH					;slash down code?
  1732 000001D2 0F84CB000000            			je	irq1.80						;yes, skip ahead
  1733 000001D8 80FCB5                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1734 000001DB 0F84C2000000            			je	irq1.80						;yes, skip ahead
  1735 000001E1 80FC2A                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1736 000001E4 7405                    			je	irq1.10						;yes, continue
  1737 000001E6 80FCB7                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1738 000001E9 7524                    			jne	irq1.20						;no, skip ahead
  1739 000001EB E87C070000              irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1740 000001F0 0F841D010000            			jz	irq1.140					;yes, skip ahead
  1741 000001F6 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1742 000001F8 A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1743 000001FD E86A070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1744 00000202 0F840B010000            			jz	irq1.140					;yes, skip ahead
  1745 00000208 E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1746 0000020A A208080000              			mov	[wbConsoleScan3],al				;read scan code 3
  1747 0000020F E907010000              irq1.20			jmp	irq1.150					;finish keyboard handling
  1748 00000214 08C3                    irq1.30			or	bl,al						;set shift flag
  1749 00000216 EB0D                    			jmp	irq1.60						;skip ahead
  1750 00000218 F6D0                    irq1.40			not	al						;convert flag to mask
  1751 0000021A 20C3                    			and	bl,al						;reset shift flag
  1752 0000021C EB07                    			jmp	irq1.60						;skip ahead
  1753 0000021E 30C7                    irq1.50			xor	bh,al						;toggle lock flag
  1754 00000220 E818070000              			call	SetKeyboardLamps				;update keyboard lamps
  1755 00000225 881D02080000            irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1756 0000022B 883D03080000            			mov	[wbConsoleLock],bh				;save lock flags
  1757 00000231 E863040000              			call	PutConsoleOIAShift				;update OIA indicators
  1758 00000236 E9E0000000              			jmp	irq1.150					;finish keyboard handling
  1759 0000023B 80FCE1                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1760 0000023E 7563                    			jne	irq1.80						;no continue
  1761 00000240 E827070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1762 00000245 0F84C8000000            			jz	irq1.140					;yes, skip ahead
  1763 0000024B E460                    			in	al,EKEYPORTDATA					;read scan code 1
  1764 0000024D A206080000              			mov	[wbConsoleScan1],al				;save scan code 1
  1765 00000252 88C4                    			mov	ah,al						;copy scan code 1
  1766 00000254 80FC1D                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1767 00000257 0F85BE000000            			jne	irq1.150					;no, finish keyboard handling
  1768 0000025D E80A070000              			call	WaitForKeyOutBuffer				;controller timeout?
  1769 00000262 0F84AB000000            			jz	irq1.140					;yes, skip ahead
  1770 00000268 E460                    			in	al,EKEYPORTDATA					;read scan code 2
  1771 0000026A A207080000              			mov	[wbConsoleScan2],al				;save scan code 2
  1772 0000026F E8F8060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1773 00000274 0F8499000000            			jz	irq1.140					;yes, skip ahead
  1774 0000027A E460                    			in	al,EKEYPORTDATA					;read scan code 3
  1775 0000027C A208080000              			mov	[wbConsoleScan3],al				;save scan code 3
  1776 00000281 E8E6060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1777 00000286 0F8487000000            			jz	irq1.140					;yes, skip ahead
  1778 0000028C E460                    			in	al,EKEYPORTDATA					;read scan code 4
  1779 0000028E A209080000              			mov	[wbConsoleScan4],al				;save scan code 4
  1780 00000293 E8D4060000              			call	WaitForKeyOutBuffer				;controller timeout?
  1781 00000298 7479                    			jz	irq1.140					;yes, skip ahead
  1782 0000029A E460                    			in	al,EKEYPORTDATA					;read scan code 5
  1783 0000029C A20A080000              			mov	[wbConsoleScan5],al				;save scan code 5
  1784 000002A1 EB78                    			jmp	irq1.150					;continue
  1785 000002A3 30C0                    irq1.80			xor	al,al						;assume no ASCII translation
  1786 000002A5 F6C480                  			test	ah,EKEYUP					;release code?
  1787 000002A8 7531                    			jnz	irq1.110					;yes, skip ahead
  1788 000002AA BE[2B030000]            			mov	esi,tscan2ascii					;scan-to-ascii table address
  1789 000002AF F6C312                  			test	bl,EKEYSHIFT					;either shift key down?
  1790 000002B2 7405                    			jz	irq1.90						;no, skip ahead
  1791 000002B4 BE[AB030000]            			mov	esi,tscan2shift					;scan-to-shifted table address
  1792 000002B9 0FB6CC                  irq1.90			movzx	ecx,ah						;scan code offset
  1793 000002BC 2E8A0431                			mov	al,[cs:ecx+esi]					;al = ASCII code
  1794 000002C0 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1795 000002C3 7411                    			jz	irq1.100					;no skip ahead
  1796 000002C5 88C1                    			mov	cl,al						;copy ASCII code
  1797 000002C7 80E1DF                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1798 000002CA 80F941                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1799 000002CD 7207                    			jb	irq1.100					;yes, skip ahead
  1800 000002CF 80F95A                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1801 000002D2 7702                    			ja	irq1.100					;yes, skip ahead
  1802 000002D4 3420                    			xor	al,EASCIICASE					;switch case
  1803 000002D6 A20B080000              irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1804 000002DB BA00000041              irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1805 000002E0 F6C480                  			test	ah,EKEYUP					;release scan-code?
  1806 000002E3 7405                    			jz	irq1.120					;no, skip ahead
  1807 000002E5 BA00000141              			mov	edx,EMSGKEYUP					;key-up event
  1808 000002EA 25FFFF0000              irq1.120		and	eax,0FFFFh					;clear high-order word
  1809 000002EF 09C2                    			or	edx,eax						;msg id and codes
  1810 000002F1 31C9                    			xor	ecx,ecx						;null param
  1811 000002F3 50                      			push	eax						;save codes
  1812 000002F4 E8BC040000              			call	PutMessage					;put message to console
  1813 000002F9 58                      			pop	eax						;restore codes
  1814 000002FA 84C0                    			test	al,al						;ASCII translation?
  1815 000002FC 7413                    			jz	irq1.130					;no, skip ahead
  1816 000002FE BA00000241              			mov	edx,EMSGKEYCHAR					;key-character event
  1817 00000303 25FFFF0000              			and	eax,0FFFFh					;clear high-order word
  1818 00000308 09C2                    			or	edx,eax						;msg id and codes
  1819 0000030A 31C9                    			xor	ecx,ecx						;null param
  1820 0000030C E8A4040000              			call	PutMessage					;put message to console
  1821 00000311 EB08                    irq1.130		jmp	irq1.150					;finish keyboard handling
  1822 00000313 B080                    irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1823 00000315 080504080000            			or	[wbConsoleStatus],al				;set controller timeout flag
  1824 0000031B E813040000              irq1.150		call	PutConsoleOIAChar				;update operator info area
  1825 00000320 E892050000              			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1826 00000325 1F                      			pop	ds						;restore non-volatile regs
  1827 00000326 5E                      			pop	esi						;
  1828 00000327 59                      			pop	ecx						;
  1829 00000328 5B                      			pop	ebx						;
  1830 00000329 58                      			pop	eax						;
  1831 0000032A CF                      			iretd							;return
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;	Scan-Code to ASCII Translation Tables
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835 0000032B 001B313233343536        tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1836 00000333 373839302D3D0809        			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1837 0000033B 7177657274797569        			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1838 00000343 6F705B5D0D006173        			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1839 0000034B 646667686A6B6C3B        			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1840 00000353 2760005C7A786376        			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1841 0000035B 626E6D2C2E2F002A        			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1842 00000363 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1843 0000036B 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1844 00000373 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1845 0000037B 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1846 00000383 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1847 0000038B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1848 00000393 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1849 0000039B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1850 000003A3 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1851 000003AB 001B21402324255E        tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1852 000003B3 262A28295F2B0800        			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1853 000003BB 5157455254595549        			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1854 000003C3 4F507B7D0D004153        			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1855 000003CB 444647484A4B4C3A        			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1856 000003D3 227E007C5A584356        			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1857 000003DB 424E4D3C3E3F002A        			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1858 000003E3 0020000000000000        			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1859 000003EB 0000000000000037        			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1860 000003F3 38392D3435362B31        			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1861 000003FB 3233302E00000000        			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1862 00000403 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1863 0000040B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1864 00000413 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1865 0000041B 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1866 00000423 0000000000000000        			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1867                                  ;-----------------------------------------------------------------------------------------------------------------------
  1868                                  ;
  1869                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1870                                  ;
  1871                                  ;-----------------------------------------------------------------------------------------------------------------------
  1872                                  			menter	iochannel					;secondary 8259A cascade
  1872                              <1> ?%1 equ ($-$$)
  1873 0000042B 50                      			push	eax						;
  1874 0000042C EB3D                    			jmp	hwint						;
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  			menter	com2						;serial port 2 interrupt
  1880                              <1> ?%1 equ ($-$$)
  1881 0000042E 50                      			push	eax						;
  1882 0000042F EB3A                    			jmp	hwint						;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                  			menter	com1						;serial port 1 interrupt
  1888                              <1> ?%1 equ ($-$$)
  1889 00000431 50                      			push	eax						;
  1890 00000432 EB37                    			jmp	hwint						;
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  			menter	lpt2						;parallel port 2 interrupt
  1896                              <1> ?%1 equ ($-$$)
  1897 00000434 50                      			push	eax						;
  1898 00000435 EB34                    			jmp	hwint						;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;	IRQ6	Diskette Hardware Interrupt
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  			menter	diskette					;floppy disk interrupt
  1904                              <1> ?%1 equ ($-$$)
  1905 00000437 50                      			push	eax						;save non-volatile regs
  1906 00000438 1E                      			push	ds						;
  1907 00000439 6A18                    			push	ESELDAT						;load OS data selector ...
  1908 0000043B 1F                      			pop	ds						;... into DS register
  1909 0000043C A03E040000              			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1910 00000441 0C80                    			or	al,10000000b					;set IRQ flag
  1911 00000443 A23E040000              			mov	[wbFDCStatus],al				;update FDC calibration status
  1912 00000448 1F                      			pop	ds						;restore non-volatile regs
  1913 00000449 EB20                    			jmp	hwint						;end primary PIC interrupt
  1914                                  ;-----------------------------------------------------------------------------------------------------------------------
  1915                                  ;
  1916                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1917                                  ;
  1918                                  ;-----------------------------------------------------------------------------------------------------------------------
  1919                                  			menter	lpt1						;parallel port 1 interrupt
  1919                              <1> ?%1 equ ($-$$)
  1920 0000044B 50                      			push	eax						;
  1921 0000044C EB1D                    			jmp	hwint						;
  1922                                  ;-----------------------------------------------------------------------------------------------------------------------
  1923                                  ;
  1924                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                  			menter	rtclock						;real-time clock interrupt
  1927                              <1> ?%1 equ ($-$$)
  1928 0000044E 50                      			push	eax						;
  1929 0000044F EB13                    			jmp	hwwint						;
  1930                                  ;-----------------------------------------------------------------------------------------------------------------------
  1931                                  ;
  1932                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1933                                  ;
  1934                                  ;-----------------------------------------------------------------------------------------------------------------------
  1935                                  			menter	retrace						;CGA vertical retrace interrupt
  1935                              <1> ?%1 equ ($-$$)
  1936 00000451 50                      			push	eax						;
  1937 00000452 EB10                    			jmp	hwwint						;
  1938                                  ;-----------------------------------------------------------------------------------------------------------------------
  1939                                  ;
  1940                                  ;	IRQ10	Reserved Hardware Interrupt
  1941                                  ;
  1942                                  ;-----------------------------------------------------------------------------------------------------------------------
  1943                                  			menter	irq10						;reserved
  1943                              <1> ?%1 equ ($-$$)
  1944 00000454 50                      			push	eax						;
  1945 00000455 EB0D                    			jmp	hwwint						;
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;	IRQ11	Reserved Hardware Interrupt
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951                                  			menter	irq11						;reserved
  1951                              <1> ?%1 equ ($-$$)
  1952 00000457 50                      			push	eax						;
  1953 00000458 EB0A                    			jmp	hwwint						;
  1954                                  ;-----------------------------------------------------------------------------------------------------------------------
  1955                                  ;
  1956                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1957                                  ;
  1958                                  ;-----------------------------------------------------------------------------------------------------------------------
  1959                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1959                              <1> ?%1 equ ($-$$)
  1960 0000045A 50                      			push	eax						;
  1961 0000045B EB07                    			jmp	hwwint						;
  1962                                  ;-----------------------------------------------------------------------------------------------------------------------
  1963                                  ;
  1964                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1965                                  ;
  1966                                  ;-----------------------------------------------------------------------------------------------------------------------
  1967                                  			menter	coprocessor					;coprocessor interrupt
  1967                              <1> ?%1 equ ($-$$)
  1968 0000045D 50                      			push	eax						;
  1969 0000045E EB04                    			jmp	hwwint						;
  1970                                  ;-----------------------------------------------------------------------------------------------------------------------
  1971                                  ;
  1972                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1973                                  ;
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  			menter	fixeddisk					;fixed disk interrupt
  1975                              <1> ?%1 equ ($-$$)
  1976 00000460 50                      			push	eax						;
  1977 00000461 EB01                    			jmp	hwwint						;
  1978                                  ;-----------------------------------------------------------------------------------------------------------------------
  1979                                  ;
  1980                                  ;	IRQ15	Reserved Hardware Interrupt
  1981                                  ;
  1982                                  ;-----------------------------------------------------------------------------------------------------------------------
  1983                                  			menter	irq15						;reserved
  1983                              <1> ?%1 equ ($-$$)
  1984 00000463 50                      			push	eax						;save modified regs
  1985                                  ;-----------------------------------------------------------------------------------------------------------------------
  1986                                  ;
  1987                                  ;	Exit from hardware interrupt
  1988                                  ;
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990 00000464 E854040000              hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1991 00000469 EB05                    			jmp	hwint90						;skip ahead
  1992 0000046B E847040000              hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1993 00000470 58                      hwint90			pop	eax						;restore modified regs
  1994 00000471 CF                      			iretd							;return from interrupt
  1995                                  ;-----------------------------------------------------------------------------------------------------------------------
  1996                                  ;
  1997                                  ;	INT 30h Operating System Software Service Interrupt
  1998                                  ;
  1999                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2000                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2001                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2002                                  ;	the entry address of the specific function from a table.
  2003                                  ;
  2004                                  ;-----------------------------------------------------------------------------------------------------------------------
  2005                                  			menter	svc
  2005                              <1> ?%1 equ ($-$$)
  2006 00000472 3C0A                    			cmp	al,maxtsvc					;is our function out of range?
  2007 00000474 730D                    			jae	svc90						;yes, skip ahead
  2008 00000476 0FB6C0                  			movzx	eax,al						;function
  2009 00000479 C1E002                  			shl	eax,2						;offset into table
  2010 0000047C 2EFF90[84040000]        			call	dword [cs:tsvc+eax]				;far call to indirect address
  2011 00000483 CF                      svc90			iretd							;return from interrupt
  2012                                  ;-----------------------------------------------------------------------------------------------------------------------
  2013                                  ;
  2014                                  ;	Service Request Table
  2015                                  ;
  2016                                  ;
  2017                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2018                                  ;
  2019                                  ;-----------------------------------------------------------------------------------------------------------------------
  2020                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  2020                              <1> tsvc :
  2020                              <1> e%1 equ ($-tsvc)/4
  2020 00000484 [59050000]          <1>  dd %1
  2021                                  			tsvce	GetConsoleString				;get string input
  2021                              <1> e%1 equ ($-tsvc)/4
  2021 00000488 [86050000]          <1>  dd %1
  2022                                  			tsvce	ClearConsoleScreen				;clear console screen
  2022                              <1> e%1 equ ($-tsvc)/4
  2022 0000048C [12080000]          <1>  dd %1
  2023                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2023                              <1> e%1 equ ($-tsvc)/4
  2023 00000490 [8D080000]          <1>  dd %1
  2024                                  			tsvce	UpperCaseString					;upper-case string
  2024                              <1> e%1 equ ($-tsvc)/4
  2024 00000494 [22050000]          <1>  dd %1
  2025                                  			tsvce	CompareMemory					;compare memory
  2025                              <1> e%1 equ ($-tsvc)/4
  2025 00000498 [3C050000]          <1>  dd %1
  2026                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2026                              <1> e%1 equ ($-tsvc)/4
  2026 0000049C [2E090000]          <1>  dd %1
  2027                                  			tsvce	PutDateString					;put MM/DD/YYYY string
  2027                              <1> e%1 equ ($-tsvc)/4
  2027 000004A0 [AC040000]          <1>  dd %1
  2028                                  			tsvce	PutTimeString					;put HH:MM:SS string
  2028                              <1> e%1 equ ($-tsvc)/4
  2028 000004A4 [ED040000]          <1>  dd %1
  2029                                  			tsvce	ReadRealTimeClock				;get real-time clock date and time
  2029                              <1> e%1 equ ($-tsvc)/4
  2029 000004A8 [C3080000]          <1>  dd %1
  2030                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2031                                  ;-----------------------------------------------------------------------------------------------------------------------
  2032                                  ;
  2033                                  ;	Service Request Macros
  2034                                  ;
  2035                                  ;	These macros provide positional parameterization of service request calls.
  2036                                  ;
  2037                                  ;-----------------------------------------------------------------------------------------------------------------------
  2038                                  %macro			putConsoleString 1
  2039                                  			mov	edx,%1						;EDX = string address
  2040                                  			mov	al,ePutConsoleString				;AL = put string fn.
  2041                                  			int	_svc						;invoke OS service
  2042                                  %endmacro
  2043                                  %macro			getConsoleString 4
  2044                                  			mov	edx,%1						;EDX = buffer address
  2045                                  			mov	ecx,%2						;ECX = max characters
  2046                                  			mov	bh,%3						;BH = echo indicator
  2047                                  			mov	bl,%4						;BL = terminator
  2048                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2049                                  			int	_svc						;invoke OS service
  2050                                  %endmacro
  2051                                  %macro			clearConsoleScreen 0
  2052                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2053                                  			int	_svc						;invoke OS service
  2054                                  %endmacro
  2055                                  %macro			placeCursor 0
  2056                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2057                                  			int	_svc						;invoke OS service
  2058                                  %endmacro
  2059                                  %macro			upperCaseString 0
  2060                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2061                                  			int	_svc						;invoke OS service
  2062                                  %endmacro
  2063                                  %macro			compareMemory 0
  2064                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2065                                  			int	_svc						;invoke OS service
  2066                                  %endmacro
  2067                                  %macro			resetSystem 0
  2068                                  			mov	al,eResetSystem					;AL = system reset fn.
  2069                                  			int	_svc						;invoke OS service
  2070                                  %endmacro
  2071                                  %macro			putDateString 0
  2072                                  			mov	al,ePutDateString				;function code
  2073                                  			int	_svc						;invoke OS service
  2074                                  %endmacro
  2075                                  %macro			putDateString 2
  2076                                  			mov	ebx,%1						;DATETIME addr
  2077                                  			mov	edx,%2						;output buffer addr
  2078                                  			mov	al,ePutDateString				;function code
  2079                                  			int	_svc						;invoke OS service
  2080                                  %endmacro
  2081                                  %macro			putTimeString 0
  2082                                  			mov	al,ePutTimeString				;function code
  2083                                  			int	_svc						;invoke OS service
  2084                                  %endmacro
  2085                                  %macro			putTimeString 2
  2086                                  			mov	ebx,%1						;DATETIME addr
  2087                                  			mov	edx,%2						;output buffer addr
  2088                                  			mov	al,ePutTimeString				;function code
  2089                                  			int	_svc						;invoke OS service
  2090                                  %endmacro
  2091                                  %macro			readRealTimeClock 0
  2092                                  			mov	al,eReadRealTimeClock				;function code
  2093                                  			int	_svc						;invoke OS service
  2094                                  %endmacro
  2095                                  %macro			readRealTimeClock 1
  2096                                  			mov	ebx,%1						;DATETIME addr
  2097                                  			mov	al,eReadRealTimeClock				;function code
  2098                                  			int	_svc						;invoke OS service
  2099                                  %endmacro
  2100                                  ;-----------------------------------------------------------------------------------------------------------------------
  2101                                  ;
  2102                                  ;	Kernel Function Library
  2103                                  ;
  2104                                  ;-----------------------------------------------------------------------------------------------------------------------
  2105                                  ;-----------------------------------------------------------------------------------------------------------------------
  2106                                  ;
  2107                                  ;	Date and Time Helper Routines
  2108                                  ;
  2109                                  ;	PutDateString
  2110                                  ;	PutTimeString
  2111                                  ;
  2112                                  ;-----------------------------------------------------------------------------------------------------------------------
  2113                                  ;-----------------------------------------------------------------------------------------------------------------------
  2114                                  ;
  2115                                  ;	Routine:	PutDateString
  2116                                  ;
  2117                                  ;	Description:	This routine returns an ASCIIZ mm/dd/yyyy string at ds:edx from the date in the DATETIME
  2118                                  ;			structure at ds:ebx.
  2119                                  ;
  2120                                  ;	In:		DS:EBX	DATETIME address
  2121                                  ;			DS:EDX	output buffer address
  2122                                  ;
  2123                                  ;-----------------------------------------------------------------------------------------------------------------------
  2124 000004AC 51                      PutDateString		push	ecx						;save non-volatile regs
  2125 000004AD 57                      			push	edi						;
  2126 000004AE 06                      			push	es						;
  2127 000004AF 1E                      			push	ds						;store data selector ...
  2128 000004B0 07                      			pop	es						;... in extra segment reg
  2129 000004B1 89D7                    			mov	edi,edx						;output buffer address
  2130 000004B3 B10A                    			mov	cl,10						;divisor
  2131 000004B5 BA30302F00              			mov	edx,002f3030h					;ASCIIZ "00/" (reversed)
  2132 000004BA 0FB64305                			movzx	eax,byte [ebx+DATETIME.month]			;month
  2133 000004BE F6F1                    			div	cl						;ah = rem; al = quotient
  2134 000004C0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2135 000004C2 FC                      			cld							;forward strings
  2136 000004C3 AB                      			stosd							;store "mm/"nul
  2137 000004C4 4F                      			dec	edi						;address of terminator
  2138 000004C5 0FB64304                			movzx	eax,byte [ebx+DATETIME.day]			;day
  2139 000004C9 F6F1                    			div	cl						;ah = rem; al = quotient
  2140 000004CB 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2141 000004CD AB                      			stosd							;store "dd/"nul
  2142 000004CE 4F                      			dec	edi						;address of terminator
  2143 000004CF 0FB64307                			movzx	eax,byte [ebx+DATETIME.century]			;century
  2144 000004D3 F6F1                    			div	cl						;ah = rem; al = quotient
  2145 000004D5 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2146 000004D7 AB                      			stosd							;store "cc/"null
  2147 000004D8 4F                      			dec	edi						;address of terminator
  2148 000004D9 4F                      			dec	edi						;address of delimiter
  2149 000004DA 0FB64306                			movzx	eax,byte [ebx+DATETIME.year]			;year (yy)
  2150 000004DE F6F1                    			div	cl						;ah = rem; al = quotient
  2151 000004E0 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2152 000004E2 AA                      			stosb							;store quotient
  2153 000004E3 88E0                    			mov	al,ah						;remainder
  2154 000004E5 AA                      			stosb							;store remainder
  2155 000004E6 30C0                    			xor	al,al						;null terminator
  2156 000004E8 AA                      			stosb							;store terminator
  2157 000004E9 07                      			pop	es						;restore non-volatile regs
  2158 000004EA 5F                      			pop	edi						;
  2159 000004EB 59                      			pop	ecx						;
  2160 000004EC C3                      			ret							;return
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  ;
  2163                                  ;	Routine:	PutTimeString
  2164                                  ;
  2165                                  ;	Description:	This routine returns an ASCIIZ hh:mm:ss string at ds:edx from the date in the DATETIME
  2166                                  ;			structure at ds:ebx.
  2167                                  ;
  2168                                  ;	In:		DS:EBX	DATETIME address
  2169                                  ;			DS:EDX	output buffer address
  2170                                  ;
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172 000004ED 51                      PutTimeString		push	ecx						;save non-volatile regs
  2173 000004EE 57                      			push	edi						;
  2174 000004EF 06                      			push	es						;
  2175 000004F0 1E                      			push	ds						;store data selector ...
  2176 000004F1 07                      			pop	es						;... in extra segment reg
  2177 000004F2 89D7                    			mov	edi,edx						;output buffer address
  2178 000004F4 B10A                    			mov	cl,10						;divisor
  2179 000004F6 BA30303A00              			mov	edx,003a3030h					;ASCIIZ "00:" (reversed)
  2180 000004FB 0FB64302                			movzx	eax,byte [ebx+DATETIME.hour]			;hour
  2181 000004FF F6F1                    			div	cl						;ah = rem; al = quotient
  2182 00000501 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2183 00000503 FC                      			cld							;forward strings
  2184 00000504 AB                      			stosd							;store "mm/"nul
  2185 00000505 4F                      			dec	edi						;address of terminator
  2186 00000506 0FB64301                			movzx	eax,byte [ebx+DATETIME.minute]			;minute
  2187 0000050A F6F1                    			div	cl						;ah = rem; al = quotient
  2188 0000050C 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2189 0000050E AB                      			stosd							;store "dd/"nul
  2190 0000050F 4F                      			dec	edi						;address of terminator
  2191 00000510 0FB603                  			movzx	eax,byte [ebx+DATETIME.second]			;second
  2192 00000513 F6F1                    			div	cl						;ah = rem; al = quotient
  2193 00000515 09D0                    			or	eax,edx						;apply ASCII zones and delimiter
  2194 00000517 AA                      			stosb							;store quotient
  2195 00000518 88E0                    			mov	al,ah						;remainder
  2196 0000051A AA                      			stosb							;store remainder
  2197 0000051B 30C0                    			xor	al,al						;null terminator
  2198 0000051D AA                      			stosb							;store terminator
  2199 0000051E 07                      			pop	es						;restore non-volatile regs
  2200 0000051F 5F                      			pop	edi						;
  2201 00000520 59                      			pop	ecx						;
  2202 00000521 C3                      			ret							;return
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204                                  ;
  2205                                  ;	String Helper Routines
  2206                                  ;
  2207                                  ;	UpperCaseString
  2208                                  ;	CompareMemory
  2209                                  ;
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                  ;-----------------------------------------------------------------------------------------------------------------------
  2212                                  ;
  2213                                  ;	Routine:	UpperCaseString
  2214                                  ;
  2215                                  ;	Description:	This routine places all characters in the given string to upper case.
  2216                                  ;
  2217                                  ;	In:		DS:EDX	string address
  2218                                  ;
  2219                                  ;	Out:		EDX	string address
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222 00000522 56                      UpperCaseString		push	esi						;save non-volatile regs
  2223 00000523 89D6                    			mov	esi,edx						;string address
  2224 00000525 FC                      			cld							;forward strings
  2225 00000526 AC                      .10			lodsb							;string character
  2226 00000527 84C0                    			test	al,al						;null?
  2227 00000529 740F                    			jz	.20						;yes, skip ahead
  2228 0000052B 3C61                    			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2229 0000052D 72F7                    			jb	.10						;no, continue
  2230 0000052F 3C7A                    			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2231 00000531 77F3                    			ja	.10						;no, continue
  2232 00000533 24DF                    			and	al,EASCIICASEMASK				;mask for upper case
  2233 00000535 8846FF                  			mov	[esi-1],al					;upper character
  2234 00000538 EBEC                    			jmp	.10						;continue
  2235 0000053A 5E                      .20			pop	esi						;restore non-volatile regs
  2236 0000053B C3                      			ret							;return
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                  ;
  2239                                  ;	Routine:	CompareMemory
  2240                                  ;
  2241                                  ;	Description:	This routine compares two byte arrays.
  2242                                  ;
  2243                                  ;	In:		DS:EDX	first source address
  2244                                  ;			DS:EBX	second source address
  2245                                  ;			ECX	comparison length
  2246                                  ;
  2247                                  ;	Out:		EDX	first source address
  2248                                  ;			EBX	second source address
  2249                                  ;			ECX	0	array 1 = array 2
  2250                                  ;				<0	array 1 < array 2
  2251                                  ;				>0	array 1 > array 2
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254 0000053C 56                      CompareMemory		push	esi						;save non-volatile regs
  2255 0000053D 57                      			push	edi						;
  2256 0000053E 06                      			push	es						;
  2257 0000053F 1E                      			push	ds						;copy DS
  2258 00000540 07                      			pop	es						;... to ES
  2259 00000541 89D6                    			mov	esi,edx						;first source address
  2260 00000543 89DF                    			mov	edi,ebx						;second source address
  2261 00000545 FC                      			cld							;forward strings
  2262 00000546 F3A6                    			rep	cmpsb						;compare bytes
  2263 00000548 B000                    			mov	al,0						;default result
  2264 0000054A 7406                    			jz	.10						;branch if arrays equal
  2265 0000054C B001                    			mov	al,1						;positive result
  2266 0000054E 7302                    			jnc	.10						;branch if target > source
  2267 00000550 B0FF                    			mov	al,-1						;negative result
  2268 00000552 0FBEC8                  .10			movsx	ecx,al						;extend sign
  2269 00000555 07                      			pop	es						;restore regs
  2270 00000556 5F                      			pop	edi						;
  2271 00000557 5E                      			pop	esi						;
  2272 00000558 C3                      			ret							;return
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;
  2275                                  ;	Console Helper Routines
  2276                                  ;
  2277                                  ;	PutConsoleString
  2278                                  ;	GetConsoleString
  2279                                  ;	GetConsoleChar
  2280                                  ;	Yield
  2281                                  ;	PreviousConsoleColumn
  2282                                  ;	NextConsoleColumn
  2283                                  ;	FirstConsoleColumn
  2284                                  ;	NextConsoleRow
  2285                                  ;	PutConsoleChar
  2286                                  ;	PutConsoleOIAShift
  2287                                  ;	PutConsoleOIAChar
  2288                                  ;	PutConsoleHexByte
  2289                                  ;
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                  ;-----------------------------------------------------------------------------------------------------------------------
  2292                                  ;
  2293                                  ;	Routine:	PutConsoleString
  2294                                  ;
  2295                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2296                                  ;			console position as needed.
  2297                                  ;
  2298                                  ;	In:		EDX	source address
  2299                                  ;			DS	OS data selector
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302 00000559 56                      PutConsoleString	push	esi						;save non-volatile regs
  2303 0000055A 89D6                    			mov	esi,edx						;source address
  2304 0000055C FC                      			cld							;forward strings
  2305 0000055D AC                      .10			lodsb							;ASCII character
  2306 0000055E 08C0                    			or	al,al						;end of string?
  2307 00000560 7422                    			jz	.40						;yes, skip ahead
  2308 00000562 3C0D                    			cmp	al,EASCIIRETURN					;carriage return?
  2309 00000564 7507                    			jne	.20						;no, skip ahead
  2310 00000566 E8EB000000              			call	FirstConsoleColumn				;move to start of row
  2311 0000056B EBF0                    			jmp	.10						;next character
  2312 0000056D 3C0A                    .20			cmp	al,EASCIILINEFEED				;line feed?
  2313 0000056F 7507                    			jne	.30						;no, skip ahead
  2314 00000571 E8E8000000              			call	NextConsoleRow					;move to next row
  2315 00000576 EBE5                    			jmp	.10						;next character
  2316 00000578 E803010000              .30			call	PutConsoleChar					;output character to console
  2317 0000057D E8B9000000              			call	NextConsoleColumn				;advance to next column
  2318 00000582 EBD9                    			jmp	.10						;next character
  2319 00000584 5E                      .40			pop	esi						;restore non-volatile regs
  2320 00000585 C3                      			ret							;return
  2321                                  ;-----------------------------------------------------------------------------------------------------------------------
  2322                                  ;
  2323                                  ;	Routine:	GetConsoleString
  2324                                  ;
  2325                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2326                                  ;
  2327                                  ;	Input:		DS:EDX	target buffer address
  2328                                  ;			ECX	maximum number of characters to accept
  2329                                  ;			BH	echo to terminal
  2330                                  ;			BL	terminating character
  2331                                  ;
  2332                                  ;-----------------------------------------------------------------------------------------------------------------------
  2333 00000586 51                      GetConsoleString	push	ecx						;save non-volatile regs
  2334 00000587 56                      			push	esi						;
  2335 00000588 57                      			push	edi						;
  2336 00000589 06                      			push	es						;
  2337 0000058A 1E                      			push	ds						;load data segment selector ...
  2338 0000058B 07                      			pop	es						;... into extra segment register
  2339 0000058C 89D7                    			mov	edi,edx						;edi = target buffer
  2340 0000058E 51                      			push	ecx						;save maximum characters
  2341 0000058F 30C0                    			xor	al,al						;zero register
  2342 00000591 FC                      			cld							;forward strings
  2343 00000592 F3AA                    			rep	stosb						;zero fill buffer
  2344 00000594 59                      			pop	ecx						;maximum characters
  2345 00000595 89D7                    			mov	edi,edx						;edi = target buffer
  2346 00000597 89D6                    			mov	esi,edx						;esi = target buffer
  2347 00000599 E34E                    .10			jecxz	.50						;exit if max-length is zero
  2348 0000059B E856000000              .20			call	GetConsoleChar					;al = next input char
  2349 000005A0 38D8                    			cmp	al,bl						;is this the terminator?
  2350 000005A2 7445                    			je	.50						;yes, exit
  2351 000005A4 3C08                    			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2352 000005A6 7521                    			jne	.30						;no, skip ahead
  2353 000005A8 39FE                    			cmp	esi,edi						;at start of buffer?
  2354 000005AA 74EF                    			je	.20						;yes, get next character
  2355 000005AC 4F                      			dec	edi						;backup target pointer
  2356 000005AD C60700                  			mov	byte [edi],0					;zero previous character
  2357 000005B0 41                      			inc	ecx						;increment remaining chars
  2358 000005B1 F6C701                  			test	bh,1						;echo to console?
  2359 000005B4 74E5                    			jz	.20						;no, get next character
  2360 000005B6 E85B000000              			call	PreviousConsoleColumn				;backup console position
  2361 000005BB B020                    			mov	al,EASCIISPACE					;ASCII space
  2362 000005BD E8BE000000              			call	PutConsoleChar					;write space to console
  2363 000005C2 E8C6020000              			call	PlaceCursor					;position the cursor
  2364 000005C7 EBD2                    			jmp	.20						;get next character
  2365 000005C9 3C20                    .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2366 000005CB 72CE                    			jb	.20						;no, get another character
  2367 000005CD 3C7E                    			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2368 000005CF 77CA                    			ja	.20						;no, get another character
  2369 000005D1 AA                      			stosb							;store character in buffer
  2370 000005D2 F6C701                  			test	bh,1						;echo to console?
  2371 000005D5 740F                    			jz	.40						;no, skip ahead
  2372 000005D7 E8A4000000              			call	PutConsoleChar					;write character to console
  2373 000005DC E85A000000              			call	NextConsoleColumn				;advance console position
  2374 000005E1 E8A7020000              			call	PlaceCursor					;position the cursor
  2375 000005E6 49                      .40			dec	ecx						;decrement remaining chars
  2376 000005E7 EBB0                    			jmp	.10						;next
  2377 000005E9 30C0                    .50			xor	al,al						;null
  2378 000005EB AA                      			stosb							;terminate buffer
  2379 000005EC 07                      			pop	es						;restore non-volatile regs
  2380 000005ED 5F                      			pop	edi						;
  2381 000005EE 5E                      			pop	esi						;
  2382 000005EF 59                      			pop	ecx						;
  2383 000005F0 C3                      			ret							;return
  2384                                  ;-----------------------------------------------------------------------------------------------------------------------
  2385                                  ;
  2386                                  ;	Routine:	GetConsoleChar
  2387                                  ;
  2388                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2389                                  ;
  2390                                  ;	Output:		AL	ASCII character code
  2391                                  ;			AH	keyboard scan code
  2392                                  ;
  2393                                  ;-----------------------------------------------------------------------------------------------------------------------
  2394 000005F1 E81D000000              GetConsoleChar.10	call	Yield						;pass control or halt
  2395 000005F6 E8E2010000              GetConsoleChar		call	GetMessage					;get the next message
  2396 000005FB 09C0                    			or	eax,eax						;do we have a message?
  2397 000005FD 74F2                    			jz	GetConsoleChar.10				;no, skip ahead
  2398 000005FF 50                      			push	eax						;save key codes
  2399 00000600 250000FFFF              			and	eax,0FFFF0000h					;mask for message type
  2400 00000605 3D00000241              			cmp	eax,EMSGKEYCHAR					;key-char message?
  2401 0000060A 58                      			pop	eax						;restore key codes
  2402 0000060B 75E9                    			jne	GetConsoleChar					;no, try again
  2403 0000060D 25FFFF0000              			and	eax,0000ffffh					;mask for key codes
  2404 00000612 C3                      			ret							;return
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406                                  ;
  2407                                  ;	Routine:	Yield
  2408                                  ;
  2409                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2410                                  ;
  2411                                  ;-----------------------------------------------------------------------------------------------------------------------
  2412 00000613 FB                      Yield			sti							;enable maskagle interrupts
  2413 00000614 F4                      			hlt							;halt until external interrupt
  2414 00000615 C3                      			ret							;return
  2415                                  ;-----------------------------------------------------------------------------------------------------------------------
  2416                                  ;
  2417                                  ;	Routine:	PreviousConsoleColumn
  2418                                  ;
  2419                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2420                                  ;			the column is set to the last position in the row and the row is decremented.
  2421                                  ;
  2422                                  ;	Input:		DS	OS data selector
  2423                                  ;
  2424                                  ;-----------------------------------------------------------------------------------------------------------------------
  2425 00000616 A000080000              PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2426 0000061B 08C0                    			or	al,al						;start of row?
  2427 0000061D 7514                    			jnz	.10						;no, skip ahead
  2428 0000061F 8A2501080000            			mov	ah,[wbConsoleRow]				;current row
  2429 00000625 08E4                    			or	ah,ah						;top of screen?
  2430 00000627 7411                    			jz	.20						;yes, exit with no change
  2431 00000629 FECC                    			dec	ah						;decrement row
  2432 0000062B 882501080000            			mov	[wbConsoleRow],ah				;save row
  2433 00000631 B050                    			mov	al,ECONCOLS					;set maximum column
  2434 00000633 FEC8                    .10			dec	al						;decrement column
  2435 00000635 A200080000              			mov	[wbConsoleColumn],al				;save column
  2436 0000063A C3                      .20			ret							;return
  2437                                  ;-----------------------------------------------------------------------------------------------------------------------
  2438                                  ;
  2439                                  ;	Routine:	NextConsoleColumn
  2440                                  ;
  2441                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2442                                  ;			incremented if the end of the current row is reached.
  2443                                  ;
  2444                                  ;	In:		DS	OS data selector
  2445                                  ;
  2446                                  ;-----------------------------------------------------------------------------------------------------------------------
  2447 0000063B A000080000              NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2448 00000640 FEC0                    			inc	al						;increment column
  2449 00000642 A200080000              			mov	[wbConsoleColumn],al				;save column
  2450 00000647 3C50                    			cmp	al,ECONCOLS					;end of row?
  2451 00000649 720A                    			jb	.10						;no, skip ahead
  2452 0000064B E806000000              			call	FirstConsoleColumn				;reset column to start of row
  2453 00000650 E809000000              			call	NextConsoleRow					;line feed to next row
  2454 00000655 C3                      .10			ret							;return
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456                                  ;
  2457                                  ;	Routine:	FirstConsoleColumn
  2458                                  ;
  2459                                  ;	Description:	This routine resets the console column to start of the row.
  2460                                  ;
  2461                                  ;	In:		DS	OS data selector
  2462                                  ;
  2463                                  ;-----------------------------------------------------------------------------------------------------------------------
  2464 00000656 30C0                    FirstConsoleColumn	xor	al,al						;zero column
  2465 00000658 A200080000              			mov	[wbConsoleColumn],al				;save column
  2466 0000065D C3                      			ret							;return
  2467                                  ;-----------------------------------------------------------------------------------------------------------------------
  2468                                  ;
  2469                                  ;	Routine:	NextConsoleRow
  2470                                  ;
  2471                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2472                                  ;
  2473                                  ;	In:		DS	OS data selector
  2474                                  ;
  2475                                  ;-----------------------------------------------------------------------------------------------------------------------
  2476 0000065E A001080000              NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2477 00000663 FEC0                    			inc	al						;increment row
  2478 00000665 A201080000              			mov	[wbConsoleRow],al				;save row
  2479 0000066A 3C18                    			cmp	al,ECONROWS					;end of screen?
  2480 0000066C 7211                    			jb	.10						;no, skip ahead
  2481 0000066E E8DA010000              			call	ScrollConsoleRow				;scroll up one row
  2482 00000673 A001080000              			mov	al,[wbConsoleRow]				;row
  2483 00000678 FEC8                    			dec	al						;decrement row
  2484 0000067A A201080000              			mov	[wbConsoleRow],al				;save row
  2485 0000067F C3                      .10			ret							;return
  2486                                  ;-----------------------------------------------------------------------------------------------------------------------
  2487                                  ;
  2488                                  ;	Routine:	PutConsoleChar
  2489                                  ;
  2490                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2491                                  ;
  2492                                  ;	In:		AL	ASCII character
  2493                                  ;			DS	OS data selector
  2494                                  ;
  2495                                  ;-----------------------------------------------------------------------------------------------------------------------
  2496 00000680 51                      PutConsoleChar		push	ecx						;save non-volatile regs
  2497 00000681 06                      			push	es						;
  2498 00000682 6A20                    			push	ESELCGA						;load CGA selector ...
  2499 00000684 07                      			pop	es						;... into extra segment reg
  2500 00000685 8A0D00080000            			mov	cl,[wbConsoleColumn]				;column
  2501 0000068B 8A2D01080000            			mov	ch,[wbConsoleRow]				;row
  2502 00000691 E8E3010000              			call	SetConsoleChar					;put character at row, column
  2503 00000696 07                      			pop	es						;restore non-volatile regs
  2504 00000697 59                      			pop	ecx						;
  2505 00000698 C3                      			ret							;return
  2506                                  ;-----------------------------------------------------------------------------------------------------------------------
  2507                                  ;
  2508                                  ;	Routine:	PutConsoleOIAShift
  2509                                  ;
  2510                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2511                                  ;
  2512                                  ;	In:		BL	shift flags
  2513                                  ;			BH	lock flags
  2514                                  ;			DS	OS data selector
  2515                                  ;
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517 00000699 51                      PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2518 0000069A 06                      			push	es						;
  2519 0000069B 6A20                    			push	ESELCGA						;load CGA selector ...
  2520 0000069D 07                      			pop	es						;... into ES register
  2521 0000069E B518                    			mov	ch,ECONOIAROW					;OIA row
  2522 000006A0 B020                    			mov	al,EASCIISPACE					;space is default character
  2523 000006A2 F6C302                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2524 000006A5 7402                    			jz	.10						;no, skip ahead
  2525 000006A7 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2526 000006A9 B10E                    .10			mov	cl,14						;indicator column
  2527 000006AB E8C9010000              			call	SetConsoleChar					;display ASCII character
  2528 000006B0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2529 000006B2 F6C310                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2530 000006B5 7402                    			jz	.20						;no, skip ahead
  2531 000006B7 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2532 000006B9 B140                    .20			mov	cl,64						;indicator column
  2533 000006BB E8B9010000              			call	SetConsoleChar					;display ASCII character
  2534 000006C0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2535 000006C2 F6C301                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2536 000006C5 7402                    			jz	.30						;no, skip ahead
  2537 000006C7 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2538 000006C9 B10F                    .30			mov	cl,15						;indicator column
  2539 000006CB E8A9010000              			call	SetConsoleChar					;display ASCII character
  2540 000006D0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2541 000006D2 F6C308                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2542 000006D5 7402                    			jz	.40						;no, skip ahead
  2543 000006D7 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2544 000006D9 B13F                    .40			mov	cl,63						;indicator column
  2545 000006DB E899010000              			call	SetConsoleChar					;display ASCII character
  2546 000006E0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2547 000006E2 F6C304                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2548 000006E5 7402                    			jz	.50						;no, skip ahead
  2549 000006E7 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2550 000006E9 B110                    .50			mov	cl,16						;indicator column
  2551 000006EB E889010000              			call	SetConsoleChar					;display ASCII character
  2552 000006F0 B020                    			mov	al,EASCIISPACE					;ASCII space
  2553 000006F2 F6C320                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2554 000006F5 7402                    			jz	.60						;no, skip ahead
  2555 000006F7 B041                    			mov	al,'A'						;yes, indicate with 'A'
  2556 000006F9 B13E                    .60			mov	cl,62						;indicator column
  2557 000006FB E879010000              			call	SetConsoleChar					;display ASCII character
  2558 00000700 B020                    			mov	al,EASCIISPACE					;ASCII space
  2559 00000702 F6C704                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2560 00000705 7402                    			jz	.70						;no, skip ahead
  2561 00000707 B043                    			mov	al,'C'						;yes, indicate with 'C'
  2562 00000709 B14E                    .70			mov	cl,78						;indicator column
  2563 0000070B E869010000              			call	SetConsoleChar					;display ASCII character
  2564 00000710 B020                    			mov	al,EASCIISPACE					;ASCII space
  2565 00000712 F6C702                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2566 00000715 7402                    			jz	.80						;no, skip ahead
  2567 00000717 B04E                    			mov	al,'N'						;yes, indicate with 'N'
  2568 00000719 B14D                    .80			mov	cl,77						;indicator column
  2569 0000071B E859010000              			call	SetConsoleChar					;display ASCII character
  2570 00000720 B020                    			mov	al,EASCIISPACE					;ASCII space
  2571 00000722 F6C701                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2572 00000725 7402                    			jz	.90						;no, skip ahead
  2573 00000727 B053                    			mov	al,'S'						;yes, indicate with 'S'
  2574 00000729 B14C                    .90			mov	cl,76						;indicator column
  2575 0000072B E849010000              			call	SetConsoleChar					;display ASCII character
  2576 00000730 07                      			pop	es						;restore non-volatile regs
  2577 00000731 59                      			pop	ecx						;
  2578 00000732 C3                      			ret							;return
  2579                                  ;-----------------------------------------------------------------------------------------------------------------------
  2580                                  ;
  2581                                  ;	Routine:	PutConsoleOIAChar
  2582                                  ;
  2583                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2584                                  ;
  2585                                  ;	In:		DS	OS data selector
  2586                                  ;
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588 00000733 53                      PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2589 00000734 51                      			push	ecx						;
  2590 00000735 56                      			push	esi						;
  2591 00000736 1E                      			push	ds						;
  2592 00000737 06                      			push	es						;
  2593 00000738 6A18                    			push	ESELDAT						;load OS data selector ...
  2594 0000073A 1F                      			pop	ds						;... into data segment register
  2595 0000073B 6A20                    			push	ESELCGA						;load CGA selector ...
  2596 0000073D 07                      			pop	es						;... into extra segment register
  2597 0000073E BE05080000              			mov	esi,wbConsoleScan0				;scan codes address
  2598 00000743 B718                    			mov	bh,ECONOIAROW					;OIA row
  2599 00000745 B300                    			mov	bl,0						;starting column
  2600 00000747 B906000000              			mov	ecx,6						;maximum scan codes
  2601 0000074C 51                      .10			push	ecx						;save remaining count
  2602 0000074D 89D9                    			mov	ecx,ebx						;row, column
  2603 0000074F AC                      			lodsb							;read scan code
  2604 00000750 08C0                    			or	al,al						;scan code present?
  2605 00000752 7407                    			jz	.20						;no, skip ahead
  2606 00000754 E834000000              			call	PutConsoleHexByte				;display scan code
  2607 00000759 EB10                    			jmp	.30						;continue
  2608 0000075B B020                    .20			mov	al,' '						;ASCII space
  2609 0000075D E817010000              			call	SetConsoleChar					;display space
  2610 00000762 FEC1                    			inc	cl
  2611 00000764 B020                    			mov	al,' '						;ASCII space
  2612 00000766 E80E010000              			call	SetConsoleChar					;display space
  2613 0000076B 80C302                  .30			add	bl,2						;next column (+2)
  2614 0000076E 59                      			pop	ecx						;restore remaining
  2615 0000076F E2DB                    			loop	.10						;next code
  2616 00000771 A00B080000              			mov	al,[wbConsoleChar]				;console ASCII character
  2617 00000776 3C20                    			cmp	al,32						;printable? (lower-bounds)
  2618 00000778 720D                    			jb	.40						;no, skip ahead
  2619 0000077A 3C7E                    			cmp	al,126						;printable? (upper-bounds)
  2620 0000077C 7709                    			ja	.40						;no, skip ahead
  2621 0000077E 88FD                    			mov	ch,bh						;OIA row
  2622 00000780 B128                    			mov	cl,40						;character display column
  2623 00000782 E8F2000000              			call	SetConsoleChar					;display ASCII character
  2624 00000787 07                      .40			pop	es						;restore non-volatile regs
  2625 00000788 1F                      			pop	ds						;
  2626 00000789 5E                      			pop	esi						;
  2627 0000078A 59                      			pop	ecx						;
  2628 0000078B 5B                      			pop	ebx						;
  2629 0000078C C3                      			ret							;return
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  ;
  2632                                  ;	Routine:	PutConsoleHexByte
  2633                                  ;
  2634                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2635                                  ;
  2636                                  ;	In:		AL	byte value
  2637                                  ;			CH	row
  2638                                  ;			CL	column
  2639                                  ;			DS	OS data selector
  2640                                  ;			ES	CGA selector
  2641                                  ;
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643 0000078D 53                      PutConsoleHexByte	push	ebx						;save non-volatile regs
  2644 0000078E 88C3                    			mov	bl,al						;save byte value
  2645 00000790 C0E804                  			shr	al,4						;hi-order nybble
  2646 00000793 0C30                    			or	al,030h						;apply ASCII zone
  2647 00000795 3C3A                    			cmp	al,03ah						;numeric?
  2648 00000797 7202                    			jb	.10						;yes, skip ahead
  2649 00000799 0407                    			add	al,7						;add ASCII offset for alpha
  2650 0000079B E8D9000000              .10			call	SetConsoleChar					;display ASCII character
  2651 000007A0 FEC1                    			inc	cl						;increment column
  2652 000007A2 88D8                    			mov	al,bl						;byte value
  2653 000007A4 240F                    			and	al,0fh						;lo-order nybble
  2654 000007A6 0C30                    			or	al,30h						;apply ASCII zone
  2655 000007A8 3C3A                    			cmp	al,03ah						;numeric?
  2656 000007AA 7202                    			jb	.20						;yes, skip ahead
  2657 000007AC 0407                    			add	al,7						;add ASCII offset for alpha
  2658 000007AE E8C6000000              .20			call	SetConsoleChar					;display ASCII character
  2659 000007B3 5B                      			pop	ebx						;restore non-volatile regs
  2660 000007B4 C3                      			ret							;return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;	Message Queue Helper Routines
  2664                                  ;
  2665                                  ;	PutMessage
  2666                                  ;	GetMessage
  2667                                  ;
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;-----------------------------------------------------------------------------------------------------------------------
  2670                                  ;
  2671                                  ;	Routine:	PutMessage
  2672                                  ;
  2673                                  ;	Description:	This routine adda a message to the message queue.
  2674                                  ;
  2675                                  ;	Input:		ECX	hi-order data word
  2676                                  ;			EDX	lo-order data word
  2677                                  ;
  2678                                  ;	Output:		CY	0 = success
  2679                                  ;				1 = fail: queue is full
  2680                                  ;
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682 000007B5 1E                      PutMessage		push	ds						;save non-volatile regs
  2683 000007B6 6A2C                    			push	ESELMQ						;load task message queue selector ...
  2684 000007B8 1F                      			pop	ds						;... into data segment register
  2685 000007B9 A104000000              			mov	eax,[MQTail]					;tail ptr
  2686 000007BE 833800                  			cmp	dword [eax],0					;is queue full?
  2687 000007C1 F9                      			stc							;assume failure
  2688 000007C2 7517                    			jne	.20						;yes, cannot store
  2689 000007C4 8910                    			mov	[eax],edx					;store lo-order data
  2690 000007C6 894804                  			mov	[eax+4],ecx					;store hi-order data
  2691 000007C9 83C008                  			add	eax,8						;next queue element adr
  2692 000007CC 25FC030000              			and	eax,03fch					;at end of queue?
  2693 000007D1 7502                    			jnz	.10						;no, skip ahead
  2694 000007D3 B008                    			mov	al,8						;reset to top of queue
  2695 000007D5 A304000000              .10			mov	[MQTail],eax					;save new tail ptr
  2696 000007DA F8                      			clc							;indicate success
  2697 000007DB 1F                      .20			pop	ds						;restore non-volatile regs
  2698 000007DC C3                      			ret							;return
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  ;
  2701                                  ;	Routine:	GetMessage
  2702                                  ;
  2703                                  ;	Description:	This routine reads and removes a message from the message queue.
  2704                                  ;
  2705                                  ;	Output:		EAX	lo-order message data
  2706                                  ;			EDX	hi-order message data
  2707                                  ;
  2708                                  ;			CY	0 = message read
  2709                                  ;				1 = no message to read
  2710                                  ;
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712 000007DD 53                      GetMessage		push	ebx						;save non-volatile regs
  2713 000007DE 51                      			push	ecx						;
  2714 000007DF 1E                      			push	ds						;
  2715 000007E0 6A2C                    			push	ESELMQ						;load message queue selector ...
  2716 000007E2 1F                      			pop	ds						;... into data segment register
  2717 000007E3 8B1D00000000            			mov	ebx,[MQHead]					;head ptr
  2718 000007E9 8B03                    			mov	eax,[ebx]					;lo-order 32 bits
  2719 000007EB 8B5304                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2720 000007EE 09D0                    			or	eax,edx						;is queue empty?
  2721 000007F0 F9                      			stc							;assume queue is emtpy
  2722 000007F1 741B                    			jz	.20						;yes, skip ahead
  2723 000007F3 31C9                    			xor	ecx,ecx						;store zero
  2724 000007F5 890B                    			mov	[ebx],ecx					;... in lo-order dword
  2725 000007F7 894B04                  			mov	[ebx+4],ecx					;... in hi-order dword
  2726 000007FA 83C308                  			add	ebx,8						;next queue element
  2727 000007FD 81E3FC030000            			and	ebx,03fch					;at end of queue?
  2728 00000803 7502                    			jnz	.10						;no, skip ahead
  2729 00000805 B308                    			mov	bl,8						;reset to 1st entry
  2730 00000807 891D00000000            .10			mov	[MQHead],ebx					;save new head ptr
  2731 0000080D F8                      			clc							;indicate message read
  2732 0000080E 1F                      .20			pop	ds						;restore non-volatile regs
  2733 0000080F 59                      			pop	ecx						;
  2734 00000810 5B                      			pop	ebx						;
  2735 00000811 C3                      			ret							;return
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;	Memory-Mapped Video Routines
  2739                                  ;
  2740                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2741                                  ;
  2742                                  ;	ClearConsoleScreen
  2743                                  ;	ScrollConsoleRow
  2744                                  ;	SetConsoleChar
  2745                                  ;
  2746                                  ;-----------------------------------------------------------------------------------------------------------------------
  2747                                  ;-----------------------------------------------------------------------------------------------------------------------
  2748                                  ;
  2749                                  ;	Routine:	ClearConsoleScreen
  2750                                  ;
  2751                                  ;	Description:	This routine clears the console (CGA) screen.
  2752                                  ;
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754 00000812 51                      ClearConsoleScreen	push	ecx						;save non-volatile regs
  2755 00000813 57                      			push	edi						;
  2756 00000814 1E                      			push	ds						;
  2757 00000815 06                      			push	es						;
  2758 00000816 6A18                    			push	ESELDAT						;load OS Data selector ...
  2759 00000818 1F                      			pop	ds						;... into DS register
  2760 00000819 6A20                    			push	ESELCGA						;load CGA selector ...
  2761 0000081B 07                      			pop	es						;... into ES register
  2762 0000081C B820072007              			mov	eax,ECONCLEARDWORD				;initializtion value
  2763 00000821 B9C0030000              			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2764 00000826 31FF                    			xor	edi,edi						;target offset
  2765 00000828 FC                      			cld							;forward strings
  2766 00000829 F3AB                    			rep	stosd						;reset screen body
  2767 0000082B B820702070              			mov	eax,ECONOIADWORD				;OIA attribute and space
  2768 00000830 B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2769 00000835 F3AB                    			rep	stosd						;reset OIA line
  2770 00000837 30C0                    			xor	al,al						;zero register
  2771 00000839 A201080000              			mov	[wbConsoleRow],al				;reset console row
  2772 0000083E A200080000              			mov	[wbConsoleColumn],al				;reset console column
  2773 00000843 E845000000              			call	PlaceCursor					;place cursor at current position
  2774 00000848 07                      			pop	es						;restore non-volatile regs
  2775 00000849 1F                      			pop	ds						;
  2776 0000084A 5F                      			pop	edi						;
  2777 0000084B 59                      			pop	ecx						;
  2778 0000084C C3                      			ret							;return
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  ;
  2781                                  ;	Routine:	ScrollConsoleRow
  2782                                  ;
  2783                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2784                                  ;
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786 0000084D 51                      ScrollConsoleRow	push	ecx						;save non-volatile regs
  2787 0000084E 56                      			push	esi						;
  2788 0000084F 57                      			push	edi						;
  2789 00000850 1E                      			push	ds						;
  2790 00000851 06                      			push	es						;
  2791 00000852 6A20                    			push	ESELCGA						;load CGA video selector ...
  2792 00000854 1F                      			pop	ds						;... into DS
  2793 00000855 6A20                    			push	ESELCGA						;load CGA video selector ...
  2794 00000857 07                      			pop	es						;... into ES
  2795 00000858 B998030000              			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2796 0000085D BEA0000000              			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2797 00000862 31FF                    			xor	edi,edi						;edi = target (line 1)
  2798 00000864 FC                      			cld							;forward strings
  2799 00000865 F3A5                    			rep	movsd						;move 24 lines up
  2800 00000867 B820072007              			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2801 0000086C B928000000              			mov	ecx,ECONROWDWORDS				;double-words per row
  2802 00000871 F3AB                    			rep	stosd						;clear bottom row
  2803 00000873 07                      			pop	es						;restore non-volatile regs
  2804 00000874 1F                      			pop	ds						;
  2805 00000875 5F                      			pop	edi						;
  2806 00000876 5E                      			pop	esi						;
  2807 00000877 59                      			pop	ecx						;
  2808 00000878 C3                      			ret							;return
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                  ;
  2811                                  ;	Routine:	SetConsoleChar
  2812                                  ;
  2813                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2814                                  ;
  2815                                  ;	In:		AL	ASCII character
  2816                                  ;			CL	column
  2817                                  ;			CH	row
  2818                                  ;			ES	CGA selector
  2819                                  ;
  2820                                  ;-----------------------------------------------------------------------------------------------------------------------
  2821 00000879 88C2                    SetConsoleChar		mov	dl,al						;ASCII character
  2822 0000087B 0FB6C5                  			movzx	eax,ch						;row
  2823 0000087E B450                    			mov	ah,ECONCOLS					;cols/row
  2824 00000880 F6E4                    			mul	ah						;row * cols/row
  2825 00000882 00C8                    			add	al,cl						;add column
  2826 00000884 80D400                  			adc	ah,0						;handle carry
  2827 00000887 D1E0                    			shl	eax,1						;screen offset
  2828 00000889 268810                  			mov	[es:eax],dl					;store character
  2829 0000088C C3                      			ret							;return
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  ;
  2832                                  ;	Input/Output Routines
  2833                                  ;
  2834                                  ;	These routines read and/or write directly to ports.
  2835                                  ;
  2836                                  ;	PlaceCursor
  2837                                  ;	PutPrimaryEndOfInt
  2838                                  ;	PutSecondaryEndOfInt
  2839                                  ;	ReadRealTimeClock
  2840                                  ;	ResetSystem
  2841                                  ;	SetKeyboardLamps
  2842                                  ;	WaitForKeyInBuffer
  2843                                  ;	WaitForKeyOutBuffer
  2844                                  ;
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847                                  ;
  2848                                  ;	Routine:	PlaceCursor
  2849                                  ;
  2850                                  ;	Description:	This routine positions the cursor on the console.
  2851                                  ;
  2852                                  ;	In:		DS	OS data selector
  2853                                  ;
  2854                                  ;-----------------------------------------------------------------------------------------------------------------------
  2855 0000088D 51                      PlaceCursor		push	ecx						;save non-volatile regs
  2856 0000088E A001080000              			mov	al,[wbConsoleRow]				;al = row
  2857 00000893 B450                    			mov	ah,ECONCOLS					;ah = cols/row
  2858 00000895 F6E4                    			mul	ah						;row offset
  2859 00000897 020500080000            			add	al,[wbConsoleColumn]				;add column
  2860 0000089D 80D400                  			adc	ah,0						;add overflow
  2861 000008A0 89C1                    			mov	ecx,eax						;screen offset
  2862 000008A2 B2D4                    			mov	dl,ECRTPORTLO					;crt controller port lo
  2863 000008A4 B603                    			mov	dh,ECRTPORTHI					;crt controller port hi
  2864 000008A6 B00E                    			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2865 000008A8 EE                      			out	dx,al						;select register
  2866 000008A9 42                      			inc	edx						;data port
  2867 000008AA 88E8                    			mov	al,ch						;hi-order cursor loc
  2868 000008AC EE                      			out	dx,al						;store hi-order loc
  2869 000008AD 4A                      			dec	edx						;register select port
  2870 000008AE B00F                    			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2871 000008B0 EE                      			out	dx,al						;select register
  2872 000008B1 42                      			inc	edx						;data port
  2873 000008B2 88C8                    			mov	al,cl						;lo-order cursor loc
  2874 000008B4 EE                      			out	dx,al						;store lo-order loc
  2875 000008B5 59                      			pop	ecx						;restore non-volatile regs
  2876 000008B6 C3                      			ret							;return
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878                                  ;
  2879                                  ;	Routine:	PutPrimaryEndOfInt
  2880                                  ;
  2881                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2882                                  ;
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884 000008B7 FB                      PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2885 000008B8 B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2886 000008BA E620                    			out	EPICPORTPRI,al					;send EOI to primary PIC
  2887 000008BC C3                      			ret							;return
  2888                                  ;-----------------------------------------------------------------------------------------------------------------------
  2889                                  ;
  2890                                  ;	Routine:	PutSecondaryEndOfInt
  2891                                  ;
  2892                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895 000008BD FB                      PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2896 000008BE B020                    			mov	al,EPICEOI					;non-specific end-of-interrupt
  2897 000008C0 E6A0                    			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2898 000008C2 C3                      			ret							;return
  2899                                  ;-----------------------------------------------------------------------------------------------------------------------
  2900                                  ;
  2901                                  ;	Routine:	ReadRealTimeClock
  2902                                  ;
  2903                                  ;	Description:	This routine gets current date time from the real-time clock.
  2904                                  ;
  2905                                  ;	In:		DS:EBX	DATETIME structure
  2906                                  ;
  2907                                  ;-----------------------------------------------------------------------------------------------------------------------
  2908 000008C3 56                      ReadRealTimeClock	push	esi						;save non-volatile regs
  2909 000008C4 57                      			push	edi						;
  2910 000008C5 06                      			push	es						;
  2911 000008C6 1E                      			push	ds						;store data selector ...
  2912 000008C7 07                      			pop	es						;... in es register
  2913 000008C8 89DF                    			mov	edi,ebx						;date-time structure
  2914 000008CA B000                    			mov	al,ERTCSECONDREG				;second register
  2915 000008CC E670                    			out	ERTCREGPORT,al					;select second register
  2916 000008CE E471                    			in	al,ERTCDATAPORT					;read second register
  2917 000008D0 FC                      			cld							;forward strings
  2918 000008D1 AA                      			stosb							;store second value
  2919 000008D2 B002                    			mov	al,ERTCMINUTEREG				;minute register
  2920 000008D4 E670                    			out	ERTCREGPORT,al					;select minute register
  2921 000008D6 E471                    			in	al,ERTCDATAPORT					;read minute register
  2922 000008D8 AA                      			stosb							;store minute value
  2923 000008D9 B004                    			mov	al,ERTCHOURREG					;hour register
  2924 000008DB E670                    			out	ERTCREGPORT,al					;select hour register
  2925 000008DD E471                    			in	al,ERTCDATAPORT					;read hour register
  2926 000008DF AA                      			stosb							;store hour value
  2927 000008E0 B006                    			mov	al,ERTCWEEKDAYREG				;weekday register
  2928 000008E2 E670                    			out	ERTCREGPORT,al					;select weekday register
  2929 000008E4 E471                    			in	al,ERTCDATAPORT					;read weekday register
  2930 000008E6 AA                      			stosb							;store weekday value
  2931 000008E7 B007                    			mov	al,ERTCDAYREG					;day register
  2932 000008E9 E670                    			out	ERTCREGPORT,al					;select day register
  2933 000008EB E471                    			in	al,ERTCDATAPORT					;read day register
  2934 000008ED AA                      			stosb							;store day value
  2935 000008EE B008                    			mov	al,ERTCMONTHREG					;month register
  2936 000008F0 E670                    			out	ERTCREGPORT,al					;select month register
  2937 000008F2 E471                    			in	al,ERTCDATAPORT					;read month register
  2938 000008F4 AA                      			stosb							;store month value
  2939 000008F5 B009                    			mov	al,ERTCYEARREG					;year register
  2940 000008F7 E670                    			out	ERTCREGPORT,al					;select year register
  2941 000008F9 E471                    			in	al,ERTCDATAPORT					;read year register
  2942 000008FB AA                      			stosb							;store year value
  2943 000008FC B032                    			mov	al,ERTCCENTURYREG				;century register
  2944 000008FE E670                    			out	ERTCREGPORT,al					;select century register
  2945 00000900 E471                    			in	al,ERTCDATAPORT					;read century register
  2946 00000902 AA                      			stosb							;store century value
  2947 00000903 B00B                    			mov	al,ERTCSTATUSREG				;status register
  2948 00000905 E670                    			out	ERTCREGPORT,al					;select status register
  2949 00000907 E471                    			in	al,ERTCDATAPORT					;read status register
  2950 00000909 A804                    			test	al,ERTCBINARYVALS				;test if values are binary
  2951 0000090B 751D                    			jnz	.20						;skip ahead if binary values
  2952 0000090D 89DE                    			mov	esi,ebx						;date-time structure address
  2953 0000090F 89DF                    			mov	edi,ebx						;date-time structure address
  2954 00000911 B908000000              			mov	ecx,8						;loop counter
  2955 00000916 AC                      .10			lodsb							;BCD value
  2956 00000917 88C4                    			mov	ah,al						;BCD value
  2957 00000919 240F                    			and	al,00001111b					;low-order decimal zone
  2958 0000091B 80E4F0                  			and	ah,11110000b					;hi-order decimal zone
  2959 0000091E D0EC                    			shr	ah,1						;hi-order decimal * 8
  2960 00000920 00E0                    			add	al,ah						;low-order + hi-order * 8
  2961 00000922 C0EC02                  			shr	ah,2						;hi-order decimal * 2
  2962 00000925 00E0                    			add	al,ah						;low-order + hi-order * 10
  2963 00000927 AA                      			stosb							;replace BCD with binary
  2964 00000928 E2EC                    			loop	.10						;next value
  2965 0000092A 07                      .20			pop	es						;restore non-volatile regs
  2966 0000092B 5F                      			pop	edi						;
  2967 0000092C 5E                      			pop	esi						;
  2968 0000092D C3                      			ret							;return
  2969                                  ;-----------------------------------------------------------------------------------------------------------------------
  2970                                  ;
  2971                                  ;	Routine:	ResetSystem
  2972                                  ;
  2973                                  ;	Description:	This routine restarts the system using the 8042 controller.
  2974                                  ;
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976 0000092E B9FFFF1F00              ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  2977 00000933 E2FE                    			loop	$						;clear interrupts
  2978 00000935 B0FE                    			mov	al,EKEYCMDRESET					;mask out bit zero
  2979 00000937 E664                    			out	EKEYPORTSTAT,al					;drive bit zero low
  2980 00000939 FB                      .10			sti							;enable maskable interrupts
  2981 0000093A F4                      			hlt							;halt until interrupt
  2982 0000093B EBFC                    			jmp	.10						;repeat until reset kicks in
  2983                                  ;-----------------------------------------------------------------------------------------------------------------------
  2984                                  ;
  2985                                  ;	Routine:	SetKeyboardLamps
  2986                                  ;
  2987                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2988                                  ;
  2989                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2990                                  ;
  2991                                  ;-----------------------------------------------------------------------------------------------------------------------
  2992 0000093D E81C000000              SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2993 00000942 B0ED                    			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2994 00000944 E660                    			out	EKEYPORTDATA,al					;send command to 8042
  2995 00000946 E821000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  2996 0000094B E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2997 0000094D E80C000000              			call	WaitForKeyInBuffer				;wait for input buffer ready
  2998 00000952 88F8                    			mov	al,bh						;set/reset lamps value
  2999 00000954 E660                    			out	EKEYPORTDATA,al					;send lamps value
  3000 00000956 E811000000              			call	WaitForKeyOutBuffer				;wait for 8042 result
  3001 0000095B E460                    			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  3002 0000095D C3                      			ret							;return
  3003                                  ;-----------------------------------------------------------------------------------------------------------------------
  3004                                  ;
  3005                                  ;	Routine:	WaitForKeyInBuffer
  3006                                  ;
  3007                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3008                                  ;
  3009                                  ;	Out:		ZF	1 = Input buffer ready
  3010                                  ;				0 = Input buffer not ready after timeout
  3011                                  ;
  3012                                  ;-----------------------------------------------------------------------------------------------------------------------
  3013 0000095E 51                      WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3014 0000095F B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3015 00000964 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3016 00000966 A802                    			test	al,EKEYBITIN					;is input buffer still full?
  3017 00000968 E0FA                    			loopnz	.10						;yes, repeat till timeout
  3018 0000096A 59                      			pop	ecx						;restore non-volatile regs
  3019 0000096B C3                      			ret							;return
  3020                                  ;-----------------------------------------------------------------------------------------------------------------------
  3021                                  ;
  3022                                  ;	Routine:	WaitForKeyOutBuffer
  3023                                  ;
  3024                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3025                                  ;
  3026                                  ;	Out:		ZF	0 = Output buffer has data from controller
  3027                                  ;				1 = Output buffer empty after timeout
  3028                                  ;
  3029                                  ;-----------------------------------------------------------------------------------------------------------------------
  3030 0000096C 51                      WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3031 0000096D B900000100              			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  3032 00000972 E464                    .10			in	al,EKEYPORTSTAT					;keyboard status byte
  3033 00000974 A801                    			test	al,EKEYBITOUT					;output buffer status bit
  3034 00000976 E1FA                    			loopz	.10						;loop until output buffer bit
  3035 00000978 59                      			pop	ecx						;restore non-volatile regs
  3036 00000979 C3                      			ret							;return
  3037                                  ;-----------------------------------------------------------------------------------------------------------------------
  3038                                  ;
  3039                                  ;	End of the Kernel Function Library
  3040                                  ;
  3041                                  ;-----------------------------------------------------------------------------------------------------------------------
  3042 0000097A 00<rept>                			times	8190-($-$$) db 0h				;zero fill to end of section
  3043 00001FFE 55AA                    			db	055h,0AAh					;end of segment
  3044                                  ;-----------------------------------------------------------------------------------------------------------------------
  3045                                  ;
  3046                                  ;	Console Task
  3047                                  ;
  3048                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3049                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3050                                  ;	screen and responds to user commands.
  3051                                  ;
  3052                                  ;-----------------------------------------------------------------------------------------------------------------------
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054                                  ;
  3055                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3056                                  ;
  3057                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3058                                  ;
  3059                                  ;-----------------------------------------------------------------------------------------------------------------------
  3060                                  section			constack						;console task stack
  3061 00000000 00<rept>                			times	1792-($-$$) db 0h				;zero fill to end of section
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063                                  ;
  3064                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3065                                  ;
  3066                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3067                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3068                                  ;	16 descriptors. Six are initially defined.
  3069                                  ;
  3070                                  ;-----------------------------------------------------------------------------------------------------------------------
  3071                                  section			conldt							;console local descriptors
  3072 00000000 7F00804700934000        			dq	004093004780007Fh				;04 TSS alias
  3073 00000008 7F00004700934000        			dq	004093004700007Fh				;0C LDT alias
  3074 00000010 FF06004000934000        			dq	00409300400006FFh				;14 stack
  3075 00000018 FFFF00000093CF00        			dq	00CF93000000FFFFh				;1C data
  3076 00000020 FF0F0050009B4000        			dq	00409B0050000FFFh				;24 code
  3077 00000028 FF07004800934000        			dq	00409300480007FFh				;2C message queue
  3078 00000030 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3079                                  ;-----------------------------------------------------------------------------------------------------------------------
  3080                                  ;
  3081                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3082                                  ;
  3083                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3084                                  ;	segment. CS to console code.
  3085                                  ;
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  section			contss							;console task state segment
  3088 00000000 00000000                			dd	0						;00 back-link tss
  3089 00000004 00070000                			dd	0700h						;04 esp ring 0
  3090 00000008 14000000                			dd	0014h						;08 ss ring 0
  3091 0000000C 00070000                			dd	0700h						;0C esp ring 1
  3092 00000010 14000000                			dd	0014h						;10 es ring 1
  3093 00000014 00070000                			dd	0700h						;14 esp ring 2
  3094 00000018 14000000                			dd	0014h						;18 ss ring 2
  3095 0000001C 00000000                			dd	0						;1C cr ring 3
  3096 00000020 00000000                			dd	0						;20 eip
  3097 00000024 00020000                			dd	0200h						;24 eflags
  3098 00000028 00000000                			dd	0						;28 eax
  3099 0000002C 00000000                			dd	0						;2C ecx
  3100 00000030 00000000                			dd	0						;30 edx
  3101 00000034 00000000                			dd	0						;34 ebx
  3102 00000038 00070000                			dd	0700h						;38 esp ring 3
  3103 0000003C 00000000                			dd	0						;3C ebp
  3104 00000040 00000000                			dd	0						;40 esi
  3105 00000044 00000000                			dd	0						;44 edi
  3106 00000048 1C000000                			dd	001Ch						;48 es
  3107 0000004C 24000000                			dd	0024h						;4C cs
  3108 00000050 14000000                			dd	0014h						;50 ss ring 3
  3109 00000054 1C000000                			dd	001Ch						;54 ds
  3110 00000058 00000000                			dd	0						;58 fs
  3111 0000005C 00000000                			dd	0						;5c gs
  3112 00000060 50000000                			dd	0050h						;60 ldt selector in gdt
  3113 00000064 00<rept>                			times	128-($-$$) db 0h				;zero fill to end of section
  3114                                  ;-----------------------------------------------------------------------------------------------------------------------
  3115                                  ;
  3116                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3117                                  ;
  3118                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3119                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3120                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3121                                  ;	event.
  3122                                  ;
  3123                                  ;-----------------------------------------------------------------------------------------------------------------------
  3124                                  section			conmque							;console message queue
  3125 00000000 08000000                			dd	8						;head pointer
  3126 00000004 08000000                			dd	8						;tail pointer
  3127 00000008 00000000<rept>          			times	510 dd 0					;queue elements
  3128                                  ;-----------------------------------------------------------------------------------------------------------------------
  3129                                  ;
  3130                                  ;	Console Code								@disk: 008400	@mem: 005000
  3131                                  ;
  3132                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3133                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3134                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3135                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3136                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3137                                  ;	board input, echoing to the console screen and responding to user commands.
  3138                                  ;
  3139                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3140                                  ;
  3141                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3142                                  ;				|  Real Mode Interrupt Vectors			|
  3143                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3144                                  ;				|  Reserved BIOS Memory Area			|
  3145                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3146                                  ;				|  Shared Kernel Memory Area			|
  3147                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3148                                  ;				|  Global Descriptor Table (GDT)		|
  3149                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3150                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3151                                  ;			002000	+-----------------------------------------------+
  3152                                  ;				|  Interrupt Handlers				|
  3153                                  ;				|  Kernel Function Library			|
  3154                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3155                                  ;				|  Console Task Stack Area			|
  3156                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3157                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3158                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3159                                  ;				|  Console Task Task State Segment (TSS)	|
  3160                                  ;			004800	+-----------------------------------------------+
  3161                                  ;				|  Console Task Message Queue			|
  3162                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3163                                  ;				|  Console Task Code				|
  3164                                  ;				|  Console Task Constants			|
  3165                                  ;			006000	+===============================================+
  3166                                  ;
  3167                                  ;-----------------------------------------------------------------------------------------------------------------------
  3168                                  section			concode	vstart=5000h					;labels relative to 5000h
  3169 00000000 E874000000              ConCode			call	ConInitializeData				;initialize console variables
  3170                                  
  3171                                  			clearConsoleScreen					;clear the console screen
  3171 00000005 B002                <1>  mov al,eClearConsoleScreen
  3171 00000007 CD30                <1>  int _svc
  3172                                  			putConsoleString czTitle				;display startup message
  3172 00000009 BA[B1010000]        <1>  mov edx,%1
  3172 0000000E B000                <1>  mov al,ePutConsoleString
  3172 00000010 CD30                <1>  int _svc
  3173                                  .10			putConsoleString czPrompt				;display input prompt
  3173                              <1> .10 :
  3173 00000012 BA[CF010000]        <1>  mov edx,%1
  3173 00000017 B000                <1>  mov al,ePutConsoleString
  3173 00000019 CD30                <1>  int _svc
  3174                                  			placeCursor						;set CRT cursor location
  3174 0000001B B003                <1>  mov al,ePlaceCursor
  3174 0000001D CD30                <1>  int _svc
  3175                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3175 0000001F BA0C080000          <1>  mov edx,%1
  3175 00000024 B94F000000          <1>  mov ecx,%2
  3175 00000029 B701                <1>  mov bh,%3
  3175 0000002B B30D                <1>  mov bl,%4
  3175 0000002D B001                <1>  mov al,eGetConsoleString
  3175 0000002F CD30                <1>  int _svc
  3176                                  			putConsoleString czNewLine				;newline
  3176 00000031 BA[E3010000]        <1>  mov edx,%1
  3176 00000036 B000                <1>  mov al,ePutConsoleString
  3176 00000038 CD30                <1>  int _svc
  3177                                  
  3178 0000003A C6055C08000000          			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3179 00000041 BA0C080000              			mov	edx,wzConsoleInBuffer				;console input buffer
  3180 00000046 BB5C080000              			mov	ebx,wzConsoleToken				;token buffer
  3181 0000004B E842000000              			call	ConTakeToken					;handle console input
  3182 00000050 BA5C080000              			mov	edx,wzConsoleToken				;token buffer
  3183 00000055 E866000000              			call	ConDetermineCommand				;determine command number
  3184 0000005A 83F809                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3185 0000005D 720B                    			jb	.20						;yes, branch
  3186                                  
  3187                                  			putConsoleString czUnknownCommand			;display error message
  3187 0000005F BA[D1010000]        <1>  mov edx,%1
  3187 00000064 B000                <1>  mov al,ePutConsoleString
  3187 00000066 CD30                <1>  int _svc
  3188                                  
  3189 00000068 EBA8                    			jmp	.10						;next command
  3190 0000006A C1E002                  .20			shl	eax,2						;index into jump table
  3191 0000006D BA[50010000]            			mov	edx,tConJmpTbl					;jump table base address
  3192 00000072 8B0402                  			mov	eax,[edx+eax]					;command handler routine address
  3193 00000075 FFD0                    			call	eax						;call command handler
  3194 00000077 EB99                    			jmp	.10						;next command
  3195                                  ;-----------------------------------------------------------------------------------------------------------------------
  3196                                  ;
  3197                                  ;	Routine:	ConInitializeData
  3198                                  ;
  3199                                  ;	Description:	This routine initializes console task variables.
  3200                                  ;
  3201                                  ;-----------------------------------------------------------------------------------------------------------------------
  3202 00000079 51                      ConInitializeData	push	ecx						;save non-volatile regs
  3203 0000007A 57                      			push	edi						;
  3204 0000007B 06                      			push	es						;
  3205 0000007C 6A18                    			push	ESELDAT						;load OS data selector ...
  3206 0000007E 07                      			pop	es						;... into extra segment register
  3207 0000007F BF00080000              			mov	edi,ECONDATA					;OS console data address
  3208 00000084 30C0                    			xor	al,al						;initialization value
  3209 00000086 B904010000              			mov	ecx,ECONDATALEN					;size of OS console data
  3210 0000008B FC                      			cld							;forward strings
  3211 0000008C F3AA                    			rep	stosb						;initialize data
  3212 0000008E 07                      			pop	es						;restore non-volatile regs
  3213 0000008F 5F                      			pop	edi						;
  3214 00000090 59                      			pop	ecx						;
  3215 00000091 C3                      			ret							;return
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  ;
  3218                                  ;	Routine:	ConTakeToken
  3219                                  ;
  3220                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3221                                  ;
  3222                                  ;	In:		DS:EDX	source buffer address
  3223                                  ;			DS:EBX	target buffer address
  3224                                  ;
  3225                                  ;	Out:		DS:EDX	source buffer address
  3226                                  ;			DS:EBX	target buffer address
  3227                                  ;
  3228                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3229                                  ;
  3230                                  ;-----------------------------------------------------------------------------------------------------------------------
  3231 00000092 56                      ConTakeToken		push	esi						;save non-volatile regs
  3232 00000093 57                      			push	edi						;
  3233 00000094 89D6                    			mov	esi,edx						;source buffer address
  3234 00000096 89DF                    			mov	edi,ebx						;target buffer address
  3235 00000098 FC                      			cld							;forward strings
  3236 00000099 AC                      .10			lodsb							;load byte
  3237 0000009A 3C20                    			cmp	al,EASCIISPACE					;space?
  3238 0000009C 74FB                    			je	.10						;yes, continue
  3239 0000009E 84C0                    			test	al,al						;end of line?
  3240 000000A0 7410                    			jz	.40						;yes, branch
  3241 000000A2 AA                      .20			stosb							;store byte
  3242 000000A3 AC                      			lodsb							;load byte
  3243 000000A4 84C0                    			test	al,al						;end of line?
  3244 000000A6 740A                    			jz	.40						;no, continue
  3245 000000A8 3C20                    			cmp	al,EASCIISPACE					;space?
  3246 000000AA 75F6                    			jne	.20						;no, continue
  3247 000000AC AC                      .30			lodsb							;load byte
  3248 000000AD 3C20                    			cmp	al,EASCIISPACE					;space?
  3249 000000AF 74FB                    			je	.30						;yes, continue
  3250 000000B1 4E                      			dec	esi						;pre-position
  3251 000000B2 C60700                  .40			mov	byte [edi],0					;terminate buffer
  3252 000000B5 89D7                    			mov	edi,edx						;source buffer address
  3253 000000B7 AC                      .50			lodsb							;remaining byte
  3254 000000B8 AA                      			stosb							;move to front of buffer
  3255 000000B9 84C0                    			test	al,al						;end of line?
  3256 000000BB 75FA                    			jnz	.50						;no, continue
  3257 000000BD 5F                      			pop	edi						;restore non-volatile regs
  3258 000000BE 5E                      			pop	esi						;
  3259 000000BF C3                      			ret							;return
  3260                                  ;-----------------------------------------------------------------------------------------------------------------------
  3261                                  ;
  3262                                  ;	Routine:	ConDetermineCommand
  3263                                  ;
  3264                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3265                                  ;
  3266                                  ;	input:		DS:EDX	command address
  3267                                  ;
  3268                                  ;	output:		EAX	>=0	= command nbr
  3269                                  ;				0	= unknown command
  3270                                  ;
  3271                                  ;-----------------------------------------------------------------------------------------------------------------------
  3272 000000C0 53                      ConDetermineCommand	push	ebx						;save non-volatile regs
  3273 000000C1 56                      			push	esi						;
  3274 000000C2 57                      			push	edi						;
  3275                                  
  3276                                  			upperCaseString						;upper-case string at EDX
  3276 000000C3 B004                <1>  mov al,eUpperCaseString
  3276 000000C5 CD30                <1>  int _svc
  3277                                  
  3278 000000C7 BE[74010000]            			mov	esi,tConCmdTbl					;commands table
  3279 000000CC 31FF                    			xor	edi,edi						;intialize command number
  3280 000000CE FC                      			cld							;forward strings
  3281 000000CF AC                      .10			lodsb							;command length
  3282 000000D0 0FB6C8                  			movzx	ecx,al						;command length
  3283 000000D3 E30D                    			jecxz	.20						;branch if end of table
  3284 000000D5 89F3                    			mov	ebx,esi						;table entry address
  3285 000000D7 01CE                    			add	esi,ecx						;next table entry address
  3286                                  
  3287                                  			compareMemory						;compare byte arrays at EDX, EBX
  3287 000000D9 B005                <1>  mov al,eCompareMemory
  3287 000000DB CD30                <1>  int _svc
  3288                                  
  3289 000000DD E303                    			jecxz	.20						;branch if equal
  3290 000000DF 47                      			inc	edi						;increment command nbr
  3291 000000E0 EBED                    			jmp	.10						;repeat
  3292 000000E2 89F8                    .20			mov	eax,edi						;command number
  3293 000000E4 5F                      			pop	edi						;restore non-volatile regs
  3294 000000E5 5E                      			pop	esi						;
  3295 000000E6 5B                      			pop	ebx						;
  3296 000000E7 C3                      			ret							;return
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  ;
  3299                                  ;	Routine:	ConClear
  3300                                  ;
  3301                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3302                                  ;
  3303                                  ;-----------------------------------------------------------------------------------------------------------------------
  3304                                  ConClear		clearConsoleScreen					;clear console screen
  3304                              <1> ConClear :
  3304 000000E8 B002                <1>  mov al,eClearConsoleScreen
  3304 000000EA CD30                <1>  int _svc
  3305 000000EC C3                      			ret							;return
  3306                                  ;-----------------------------------------------------------------------------------------------------------------------
  3307                                  ;
  3308                                  ;	Routine:	ConDate
  3309                                  ;
  3310                                  ;	Description:	This routine handles the DATE command.
  3311                                  ;
  3312                                  ;-----------------------------------------------------------------------------------------------------------------------
  3313                                  ConDate			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3313                              <1> ConDate :
  3313 000000ED BBFC080000          <1>  mov ebx,%1
  3313 000000F2 B009                <1>  mov al,eReadRealTimeClock
  3313 000000F4 CD30                <1>  int _svc
  3314                                  			putDateString	  wsConsoleDateTime, wzConsoleOutBuffer	;format date string
  3314 000000F6 BBFC080000          <1>  mov ebx,%1
  3314 000000FB BAAC080000          <1>  mov edx,%2
  3314 00000100 B007                <1>  mov al,ePutDateString
  3314 00000102 CD30                <1>  int _svc
  3315                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3315 00000104 BAAC080000          <1>  mov edx,%1
  3315 00000109 B000                <1>  mov al,ePutConsoleString
  3315 0000010B CD30                <1>  int _svc
  3316                                  			putConsoleString  czNewLine				;write newline to console
  3316 0000010D BA[E3010000]        <1>  mov edx,%1
  3316 00000112 B000                <1>  mov al,ePutConsoleString
  3316 00000114 CD30                <1>  int _svc
  3317 00000116 C3                      			ret							;return
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  ;
  3320                                  ;	Routine:	ConExit
  3321                                  ;
  3322                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3323                                  ;
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  ConExit			resetSystem						;issue system reset
  3325                              <1> ConExit :
  3325 00000117 B006                <1>  mov al,eResetSystem
  3325 00000119 CD30                <1>  int _svc
  3326 0000011B C3                      			ret							;return
  3327                                  ;-----------------------------------------------------------------------------------------------------------------------
  3328                                  ;
  3329                                  ;	Routine:	ConTime
  3330                                  ;
  3331                                  ;	Description:	This routine Handles the TIME command.
  3332                                  ;
  3333                                  ;-----------------------------------------------------------------------------------------------------------------------
  3334                                  ConTime			readRealTimeClock wsConsoleDateTime			;read RTC data into structure
  3334                              <1> ConTime :
  3334 0000011C BBFC080000          <1>  mov ebx,%1
  3334 00000121 B009                <1>  mov al,eReadRealTimeClock
  3334 00000123 CD30                <1>  int _svc
  3335                                  			putTimeString	  wsConsoleDateTime,wzConsoleOutBuffer	;format time string
  3335 00000125 BBFC080000          <1>  mov ebx,%1
  3335 0000012A BAAC080000          <1>  mov edx,%2
  3335 0000012F B008                <1>  mov al,ePutTimeString
  3335 00000131 CD30                <1>  int _svc
  3336                                  			putConsoleString  wzConsoleOutBuffer			;write string to console
  3336 00000133 BAAC080000          <1>  mov edx,%1
  3336 00000138 B000                <1>  mov al,ePutConsoleString
  3336 0000013A CD30                <1>  int _svc
  3337                                  			putConsoleString  czNewLine				;write newline to console
  3337 0000013C BA[E3010000]        <1>  mov edx,%1
  3337 00000141 B000                <1>  mov al,ePutConsoleString
  3337 00000143 CD30                <1>  int _svc
  3338 00000145 C3                      			ret							;return
  3339                                  ;-----------------------------------------------------------------------------------------------------------------------
  3340                                  ;
  3341                                  ;	Routine:	ConVersion
  3342                                  ;
  3343                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3344                                  ;
  3345                                  ;-----------------------------------------------------------------------------------------------------------------------
  3346                                  ConVersion		putConsoleString czTitle				;display version message
  3346                              <1> ConVersion :
  3346 00000146 BA[B1010000]        <1>  mov edx,%1
  3346 0000014B B000                <1>  mov al,ePutConsoleString
  3346 0000014D CD30                <1>  int _svc
  3347 0000014F C3                      			ret							;return
  3348                                  ;-----------------------------------------------------------------------------------------------------------------------
  3349                                  ;
  3350                                  ;	Tables
  3351                                  ;
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353                                  										;---------------------------------------
  3354                                  										;  Command Jump Table
  3355                                  										;---------------------------------------
  3356                                  tConJmpTbl		equ	$						;command jump table
  3357 00000150 17010000                			dd	ConExit		- ConCode			;shutdown command routine offset
  3358 00000154 46010000                			dd	ConVersion	- ConCode			;version command routine offset
  3359 00000158 E8000000                			dd	ConClear	- ConCode			;clear command routine offset
  3360 0000015C ED000000                			dd	ConDate		- ConCode			;date command routine offset
  3361 00000160 17010000                			dd	ConExit		- ConCode			;exit command routine offset
  3362 00000164 17010000                			dd	ConExit		- ConCode			;quit command routine offset
  3363 00000168 1C010000                			dd	ConTime		- ConCode			;time command routine offset
  3364 0000016C E8000000                			dd	ConClear	- ConCode			;cls command routine offset
  3365 00000170 46010000                			dd	ConVersion	- ConCode			;ver command routine offset
  3366                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3367                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3368                                  										;---------------------------------------
  3369                                  										;  Command Name Table
  3370                                  										;---------------------------------------
  3371                                  tConCmdTbl		equ	$						;command name table
  3372 00000174 0953485554444F574E-     			db	9,"SHUTDOWN",0					;shutdown command
  3372 0000017D 00                 
  3373 0000017E 0856455253494F4E00      			db	8,"VERSION",0					;version command
  3374 00000187 06434C45415200          			db	6,"CLEAR",0					;clear command
  3375 0000018E 054441544500            			db	5,"DATE",0					;date command
  3376 00000194 054558495400            			db	5,"EXIT",0					;exit command
  3377 0000019A 055155495400            			db	5,"QUIT",0					;quit command
  3378 000001A0 0554494D4500            			db	5,"TIME",0					;time command
  3379 000001A6 04434C5300              			db	4,"CLS",0					;cls command
  3380 000001AB 0456455200              			db	4,"VER",0					;ver command
  3381 000001B0 00                      			db	0						;end of table
  3382                                  ;-----------------------------------------------------------------------------------------------------------------------
  3383                                  ;
  3384                                  ;	Constants
  3385                                  ;
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387 000001B1 437573746F6D204F70-     czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3387 000001BA 65726174696E672053-
  3387 000001C3 797374656D20312E30-
  3387 000001CC 0D0A00             
  3388 000001CF 3A00                    czPrompt		db	":",0						;prompt string
  3389 000001D1 556E6B6E6F776E2063-     czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3389 000001DA 6F6D6D616E640D0A00 
  3390 000001E3 0D0A00                  czNewLine		db	13,10,0						;new line string
  3391 000001E6 00<rept>                			times	4094-($-$$) db 0h				;zero fill to end of section
  3392 00000FFE 55AA                    			db	055h,0AAh					;end of section
  3393                                  %endif
  3394                                  %ifdef BUILDDISK
  3395                                  ;-----------------------------------------------------------------------------------------------------------------------
  3396                                  ;
  3397                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3398                                  ;
  3399                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3400                                  ;
  3401                                  ;-----------------------------------------------------------------------------------------------------------------------
  3402                                  section			unused							;unused disk space
  3403 00000000 F6<rept>                			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3404                                  %endif
