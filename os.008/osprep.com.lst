     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.008
     6                                  ;
     7                                  ;       Description:    In this sample program, an "int6" command is added to generate an invalid opcode interrupt.
     8                                  ;                       The interrupt handler displays the contents of registers at the time of the interrupt.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   317                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   318                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   319                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   320                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   321                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ;
   324                                  ;       Standards-Based Values
   325                                  ;
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  ;
   329                                  ;       ASCII                                                                   EASCII...
   330                                  ;
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   333                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   334                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   335                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   336                                  EASCIISPACE             equ     020h                                            ;space
   337                                  EASCIIUPPERA            equ     041h                                            ;'A'
   338                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   339                                  EASCIILOWERA            equ     061h                                            ;'a'
   340                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   341                                  EASCIITILDE             equ     07Eh                                            ;'~'
   342                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   343                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   344                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   345                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   346                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   347                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   348                                  EASCIICASE              equ     00100000b                                       ;case bit
   349                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   350                                  ;-----------------------------------------------------------------------------------------------------------------------
   351                                  ;
   352                                  ;       Operating System Values
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  ;
   357                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   358                                  ;
   359                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   360                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   361                                  ;
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   364                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   365                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   366                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   367                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   368                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   369                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ;       Console Constants                                                       ECON...
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ECONCOLS                equ     80                                              ;columns per row
   374                                  ECONROWS                equ     24                                              ;console rows
   375                                  ECONOIAROW              equ     24                                              ;operator information area row
   376                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   377                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   378                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   379                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   380                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   385                                  EGDTCGA                 equ     020h                                            ;cga video selector
   386                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   387                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   388                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   389                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   390                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   391                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  ;       Keyboard Flags                                                          EKEYF...
   394                                  ;-----------------------------------------------------------------------------------------------------------------------
   395                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   396                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   397                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   398                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   399                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   400                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   401                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   402                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   403                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   404                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   405                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ;       Kernel Constants                                                        EKRN...
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   410                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   411                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   412                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  ;       Message Identifiers                                                     EMSG...
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   421                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   422                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   423                                  ;=======================================================================================================================
   424                                  ;
   425                                  ;       Structures
   426                                  ;
   427                                  ;=======================================================================================================================
   428                                  ;-----------------------------------------------------------------------------------------------------------------------
   429                                  ;
   430                                  ;       MQUEUE
   431                                  ;
   432                                  ;       The MQUEUE structure maps memory used for a message queue.
   433                                  ;
   434                                  ;-----------------------------------------------------------------------------------------------------------------------
   435                                  struc                   MQUEUE
   436 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   437 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   438 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   439                                  endstruc
   440                                  ;-----------------------------------------------------------------------------------------------------------------------
   441                                  ;
   442                                  ;       OSDATA
   443                                  ;
   444                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   445                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   446                                  ;
   447                                  ;-----------------------------------------------------------------------------------------------------------------------
   448                                  struc                   OSDATA
   449 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   450 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   451 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   452 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   453 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   454 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   455 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   456 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   457 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   458 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   459 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   460 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   461 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   462 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   463 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   464 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   465 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   466 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   467 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   468 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   469 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   470 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   471 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   472 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   473 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   474 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   475 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   476 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   477 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   478 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   479 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   480 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   481 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   482 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   483 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   484 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   485 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   486 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   487 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   488 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   489 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   490 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   491 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   492 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   493 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   494 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   495 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   496 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   497 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   498 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   499 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   500 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   501 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   502 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   503 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   504 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   505 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   506 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   507 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   508 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   509 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   510 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   511 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   512 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   513 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   514 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   515 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   516 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   517 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   518 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   519 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   520 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   521 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   522 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   523 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   524 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   525 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   526 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   527 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   528 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   529 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   530 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   531 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   532 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   533 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   534 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   535 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   536 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   537 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   538 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   539 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   540 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   541 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   542 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   543 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   544 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   545 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   546 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   547 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   548 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   549 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   550                                  ;-----------------------------------------------------------------------------------------------------------------------
   551                                  ;
   552                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   553                                  ;
   554                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   555                                  ;
   556                                  ;-----------------------------------------------------------------------------------------------------------------------
   557                                  ECONDATA                equ     ($)
   558 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   559 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   560 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   561 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   562 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   563 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   564 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   565 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   566 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   567 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   568 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   569 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   570 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   571 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   572                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   573                                  ;-----------------------------------------------------------------------------------------------------------------------
   574                                  ;
   575                                  ;       End of OS Variables
   576                                  ;
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  endstruc
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  ;
   581                                  ;       Macros
   582                                  ;
   583                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   584                                  ;
   585                                  ;-----------------------------------------------------------------------------------------------------------------------
   586                                  %macro                  mint    1
   587                                  _%1                     equ     ($-$$) / EX86DESCLEN
   588                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   589                                  %endmacro
   590                                  %macro                  mtrap   1
   591                                  _%1                     equ     ($-$$) / EX86DESCLEN
   592                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   593                                  %endmacro
   594                                  %macro                  menter  1
   595                                  ?%1                     equ     ($-$$)
   596                                  %endmacro
   597                                  %macro                  tsvce   1
   598                                  e%1                     equ     ($-tsvc)/4
   599                                                          dd      %1
   600                                  %endmacro
   601                                  %ifdef BUILDBOOT
   602                                  ;=======================================================================================================================
   603                                  ;
   604                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   605                                  ;
   606                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   607                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   608                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   609                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   610                                  ;
   611                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   612                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   613                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   614                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   615                                  ;       immediately followed by a disk parameter table.
   616                                  ;
   617                                  ;=======================================================================================================================
   618                                                          cpu     8086                                            ;assume minimal CPU
   619                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   620                                                          bits    16                                              ;16-bit code at power-up
   621                                  %ifdef BUILDPREP
   622 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   623                                  %else
   624                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   625                                  %endif
   626                                  ;-----------------------------------------------------------------------------------------------------------------------
   627                                  ;
   628                                  ;       Disk Parameter Table
   629                                  ;
   630                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   631                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   632                                  ;
   633                                  ;-----------------------------------------------------------------------------------------------------------------------
   634 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   635 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   636 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   637 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   638 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   639 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   640 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   641 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   642 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   643                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   644 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   645 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   646 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   647                                  ;
   648                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   649                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   650                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   651                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   652                                  ;       given several possible starting values for CS:IP.
   653                                  ;
   654                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   655 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   656                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   657 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   658 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   659 00000025 B104                                            mov     cl,4                                            ;shift count
   660 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   661 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   662 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   663                                  ;
   664                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   665                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   666                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   667                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   668                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   669                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   670                                  ;
   671 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   672 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   673 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   674 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   675 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   676                                  ;
   677                                  ;       Our boot addressability is now set up according to the following diagram.
   678                                  ;
   679                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   680                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   681                                  ;                               |  256 = 100h bytes                             |
   682                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   683                                  ;                               |  Boot Sector (vstart=0100h)                   |
   684                                  ;                               |  1 sector = 512 = 200h bytes                  |
   685                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   686                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   687                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   688                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   689                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   690                                  ;                               |  2 sectors = 1024 = 400h bytes
   691                                  ;                       009400  +-----------------------------------------------+ DS:1900
   692                                  ;
   693                                  ;       On entry, DL indicates the drive being booted from.
   694                                  ;
   695 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   696                                  ;
   697                                  ;       Compute directory i/o buffer address.
   698                                  ;
   699 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   700 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   701 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   702 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   703                                  ;
   704                                  ;       Compute segment where os.com will be loaded.
   705                                  ;
   706 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   707 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   708 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   709 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   710                                  ;
   711                                  ;       Set the video mode to 80 column, 25 row, text.
   712                                  ;
   713 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   714 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   715                                  ;
   716                                  ;       Write a message to the console so we know we have our addressability established.
   717                                  ;
   718 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   719 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   720                                  ;
   721                                  ;       Initialize the number of directory sectors to search.
   722                                  ;
   723 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   724 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   725                                  ;
   726                                  ;       Compute number of directory sectors and initialize overhead count.
   727                                  ;
   728 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   729 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   730 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   731 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   732                                  ;
   733                                  ;       Compute directory entries per sector.
   734                                  ;
   735 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   736 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   737 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   738                                  ;
   739                                  ;       Compute first logical directory sector and update overhead count.
   740                                  ;
   741 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   742 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   743 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   744 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   745 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   746 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   747                                  ;
   748                                  ;       Read directory sector.
   749                                  ;
   750 0000008E B001                    .30                     mov     al,1                                            ;sector count
   751 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   752 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   753 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   754                                  ;
   755                                  ;       Setup variables to search this directory sector.
   756                                  ;
   757 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   758 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   759 000000A1 7603                                            jna     .40                                             ;no, continue
   760 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   761 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   762 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   763 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   764                                  ;
   765                                  ;       Loop through directory sectors searching for kernel program.
   766                                  ;
   767 000000B1 56                      .50                     push    si                                              ;save kernel name address
   768 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   769 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   770 000000B6 FC                                              cld                                                     ;forward strings
   771 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   772 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   773 000000BA 5E                                              pop     si                                              ;restore kernel name address
   774 000000BB 7418                                            je      .60                                             ;exit loop if found
   775 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   776 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   777 000000C2 75ED                                            jnz     .50                                             ;next entry
   778                                  ;
   779                                  ;       Repeat search if we are not at the end of the directory.
   780                                  ;
   781 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   782 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   783 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   784 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   785 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   786                                  ;
   787                                  ;       If we find the kernel program in the directory, read the FAT.
   788                                  ;
   789 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   790 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   791 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   792 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   793 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   794 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   795                                  ;
   796                                  ;       Get the starting cluster of the kernel program and target address.
   797                                  ;
   798 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   799 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   800                                  ;
   801                                  ;       Read each program cluster into RAM.
   802                                  ;
   803 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   804 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   805 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   806 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   807 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   808 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   809 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   810 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   811 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   812                                  ;
   813                                  ;       Update buffer pointer for next cluster.
   814                                  ;
   815 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   816 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   817 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   818 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   819 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   820                                  ;
   821                                  ;       Compute next cluster number.
   822                                  ;
   823 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   824 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   825 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   826 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   827 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   828 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   829 00000120 83E701                                          and     di,1                                            ;get low bit
   830 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   831 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   832 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   833                                  ;
   834                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   835                                  ;
   836 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   837 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   838 00000130 B104                                            mov     cl,4                                            ;shift count
   839 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   840 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   841 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   842 0000013A 75B2                                            jne     .70                                             ;no, continue
   843                                  ;
   844                                  ;       Transfer control to the operating system program.
   845                                  ;
   846 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   847 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   848 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   849                                  ;
   850                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   851                                  ;
   852 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   853 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   854 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   855 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   856 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   857 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   858 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   859 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   860 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   861 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   862                                  ;
   863                                  ;       Try maxtries times to read sector.
   864                                  ;
   865 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   866 00000160 53                      .10                     push    bx                                              ;save buffer address
   867 00000161 51                                              push    cx                                              ;save retry count
   868 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   869 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   870 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   871 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   872 0000016F 59                                              pop     cx                                              ;restore retry count
   873 00000170 5B                                              pop     bx                                              ;restore buffer address
   874 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   875 00000173 E2EB                                            loop    .10                                             ;retry
   876                                  ;
   877                                  ;       Handle disk error: convert to ASCII and store in error string.
   878                                  ;
   879 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   880 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   881 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   882 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   883 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   884 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   885 00000183 7203                                            jb      .20                                             ;continue if numeral
   886 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   887 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   888 0000018A 7203                                            jb      .30                                             ;continue if numeral
   889 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   890 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   891 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   892 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   893                                  ;
   894                                  ;       Wait for a key press.
   895                                  ;
   896 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   897 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   898 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   899 0000019E FB                                              sti                                                     ;enable maskable interrupts
   900 0000019F F4                                              hlt                                                     ;wait for interrupt
   901 000001A0 EBF6                                            jmp     .10                                             ;repeat
   902                                  ;
   903                                  ;       Reset the system.
   904                                  ;
   905 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   906 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   907 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   908 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   909 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   910                                  ;
   911                                  ;       Display text message.
   912                                  ;
   913 000001AA FC                      BootPrint               cld                                                     ;forward strings
   914 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   915 000001AC 84C0                                            test    al,al                                           ;end of string?
   916 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   917 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   918 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   919 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   920 000001B6 C3                      BootReturn              ret                                                     ;return
   921                                  ;-----------------------------------------------------------------------------------------------------------------------
   922                                  ;
   923                                  ;       Constants
   924                                  ;
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926 000001B7 90                                              align   2
   927 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   928 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   928 000001C3 4F4D               
   929 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   929 000001CE 530D0A00           
   930 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   930 000001DB 7220               
   931 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   932 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   932 000001E9 6700               
   933                                  ;-----------------------------------------------------------------------------------------------------------------------
   934                                  ;
   935                                  ;       Work Areas
   936                                  ;
   937                                  ;-----------------------------------------------------------------------------------------------------------------------
   938 000001EB 90                                              align   2
   939 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   940 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   941 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   942 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   943 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   944                                  wwReadCountCommand      equ     $                                               ;read count and command
   945 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   946 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   947                                  wwDriveHead             equ     $                                               ;drive, head (word)
   948 000001F8 00                      wbDrive                 db      0                                               ;drive
   949 000001F9 00                      wbHead                  db      0                                               ;head
   950                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   951 000001FA 00                                              db      0                                               ;sector
   952 000001FB 00                      wbTrack                 db      0                                               ;track
   953 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   954 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   955                                  %endif
   956                                  %ifdef BUILDPREP
   957                                  ;=======================================================================================================================
   958                                  ;
   959                                  ;       Diskette Preparation Code
   960                                  ;
   961                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   962                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   963                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   964                                  ;
   965                                  ;=======================================================================================================================
   966                                  ;
   967                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   968                                  ;
   969 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   970 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   971                                  ;
   972                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   973                                  ;
   974 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   975 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   976 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   977 0000020C FB                                              sti                                                     ;enable interrupts
   978 0000020D F4                                              hlt                                                     ;wait for interrupt
   979 0000020E EBF6                                            jmp     .10                                             ;repeat
   980 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   981 00000212 7407                                            je      .30                                             ;yes, branch
   982 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   983 00000216 75EE                                            jne     .10                                             ;no, repeat
   984 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   985                                  ;
   986                                  ;       Display writing-sector message and patch the JMP instruction.
   987                                  ;
   988 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   989 0000021E E889FF                                          call    BootPrint                                       ;display message
   990 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   991 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   992 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   993                                  ;
   994                                  ;       Try to read the boot sector.
   995                                  ;
   996 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   997 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   998 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   999 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1000 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
  1001 00000236 B001                                            mov     al,1                                            ;one sector
  1002 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1003 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1004 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1005 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1006 0000023F E2EB                                            loop    .40                                             ;try again
  1007 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1008 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1009                                  ;
  1010                                  ;       Copy diskette parms from input buffer to output buffer.
  1011                                  ;
  1012 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1013 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1014 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1015 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1016 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1017 00000255 FC                                              cld                                                     ;forward string copies
  1018 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1019                                  ;
  1020                                  ;       Try to write boot sector to diskette.
  1021                                  ;
  1022 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1023 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1024 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1025 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1026 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1027 00000265 B001                                            mov     al,1                                            ;one sector
  1028 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1029 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1030 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1031 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1032 0000026E E2EB                                            loop    .60                                             ;try again
  1033 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1034                                  ;
  1035                                  ;       Convert the error code to ASCII and display the error message.
  1036                                  ;
  1037 00000273 50                      .70                     push    ax                                              ;save error code
  1038 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1039 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1040 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1041 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1042 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1043 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1044 00000282 7203                                            jb      .80                                             ;yes, continue
  1045 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1046 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1047 00000289 7202                                            jb      .90                                             ;yes, continue
  1048 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1049 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1050 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1051 00000293 58                                              pop     ax                                              ;restore error code
  1052                                  ;
  1053                                  ;       Display the completion message.
  1054                                  ;
  1055 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1056 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1057 00000299 3C00                                            cmp     al,0                                            ;success?
  1058 0000029B 7426                                            je      .110                                            ;yes, continue
  1059 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1060 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1061 000002A2 741F                                            je      .110                                            ;yes, continue
  1062 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1063 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1064 000002A9 7418                                            je      .110                                            ;yes, continue
  1065 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1066 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1067 000002B0 7411                                            je      .110                                            ;yes, continue
  1068 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1069 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1070 000002B7 740A                                            je      .110                                            ;yes, continue
  1071 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1072 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1073 000002BE 7403                                            je      .110                                            ;yes, continue
  1074 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1075 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1076 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1077 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1078 000002CB C3                                              ret                                                     ;return (should not execute)
  1079                                  ;-----------------------------------------------------------------------------------------------------------------------
  1080                                  ;
  1081                                  ;       Diskette Preparation Messages
  1082                                  ;
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1084 000002D5 5320426F6F742D4469-
  1084 000002DE 736B65747465205072-
  1084 000002E7 657061726174696F6E-
  1084 000002F0 2050726F6772616D   
  1085 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1085 00000301 687420284329203230-
  1085 0000030A 31302D323031382044-
  1085 00000313 61766964204A2E2057-
  1085 0000031C 616C6C696E672E2041-
  1085 00000325 6C6C20726967687473-
  1085 0000032E 207265736572766564-
  1085 00000337 2E                 
  1086 00000338 0D0A                                            db      13,10
  1087 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1087 00000343 6F6772616D206F7665-
  1087 0000034C 727772697465732074-
  1087 00000355 686520626F6F742073-
  1087 0000035E 6563746F72206F6620-
  1087 00000367 61206469736B657474-
  1087 00000370 652077697468207374-
  1087 00000379 617274757020636F64-
  1087 00000382 652074686174       
  1088 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1088 00000391 616420746865206F70-
  1088 0000039A 65726174696E672073-
  1088 000003A3 797374656D20696E74-
  1088 000003AC 6F206D656D6F727920-
  1088 000003B5 7768656E2074686520-
  1088 000003BE 636F6D707574657220-
  1088 000003C7 697320726573746172-
  1088 000003D0 7465642E           
  1089 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1089 000003DD 6565642C20706C6163-
  1089 000003E6 65206120666F726D61-
  1089 000003EF 74746564206469736B-
  1089 000003F8 6574746520696E746F-
  1089 00000401 20647269766520413A-
  1089 0000040A 20616E642070726573-
  1089 00000413 732074686520456E74-
  1089 0000041C 6572206B65792E     
  1090 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1090 0000042C 20746869732070726F-
  1090 00000435 6772616D2077697468-
  1090 0000043E 6F7574207072657061-
  1090 00000447 72696E672061206469-
  1090 00000450 736B657474652C2070-
  1090 00000459 726573732074686520-
  1090 00000462 457363617065206B65-
  1090 0000046B 792E               
  1091 0000046D 0D0A00                                          db      13,10,0
  1092 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1092 00000479 2074686520626F6F74-
  1092 00000482 20736563746F722074-
  1092 0000048B 6F2074686520646973-
  1092 00000494 6B65747465202E2E2E 
  1093 0000049D 0D0A00                                          db      13,10,0
  1094 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1094 000004A9 6F722D636F6465202E-
  1094 000004B2 2E2077617320726574-
  1094 000004BB 75726E65642066726F-
  1094 000004C4 6D207468652042494F-
  1094 000004CD 53207768696C652072-
  1094 000004D6 656164696E67206672-
  1094 000004DF 6F6D20746865206469-
  1094 000004E8 736B2E             
  1095 000004EB 0D0A00                                          db      13,10,0
  1096 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1096 000004F7 6F722D636F6465202E-
  1096 00000500 2E2077617320726574-
  1096 00000509 75726E65642066726F-
  1096 00000512 6D207468652042494F-
  1096 0000051B 53207768696C652077-
  1096 00000524 726974696E6720746F-
  1096 0000052D 20746865206469736B-
  1096 00000536 2E                 
  1097 00000537 0D0A00                                          db      13,10,0
  1098 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1098 00000543 742D736563746F7220-
  1098 0000054C 776173207772697474-
  1098 00000555 656E20746F20746865-
  1098 0000055E 206469736B65747465-
  1098 00000567 2E204265666F726520-
  1098 00000570 626F6F74696E672079-
  1098 00000579 6F757220636F6D7075-
  1098 00000582 7465722077697468   
  1099 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1099 00000593 736B657474652C206D-
  1099 0000059C 616B65207375726520-
  1099 000005A5 746861742074686520-
  1099 000005AE 66696C65204F532E43-
  1099 000005B7 4F4D20697320636F70-
  1099 000005C0 696564206F6E746F20-
  1099 000005C9 746865206469736B65-
  1099 000005D2 7474652E           
  1100 000005D6 0D0A00                                          db      13,10,0
  1101 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1101 000005E2 76616C696420446973-
  1101 000005EB 6B20506172616D6574-
  1101 000005F4 6572               
  1102 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1102 000005FF 20616E20696E746572-
  1102 00000608 6E616C206572726F72-
  1102 00000611 206361757365642062-
  1102 0000061A 7920616E20696E7661-
  1102 00000623 6C69642076616C7565-
  1102 0000062C 206265696E67207061-
  1102 00000635 7373656420746F2061-
  1102 0000063E 2073797374656D     
  1103 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1103 0000064E 6E2E20546865204F53-
  1103 00000657 424F4F542E434F4D20-
  1103 00000660 66696C65206D617920-
  1103 00000669 626520636F72727570-
  1103 00000672 742E20436F7079206F-
  1103 0000067B 7220646F776E6C6F61-
  1103 00000684 64207468652066696C-
  1103 0000068D 6520616761696E     
  1104 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1104 0000069D 72792E             
  1105 000006A0 0D0A00                                          db      13,10,0
  1106 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1106 000006AC 6472657373204D6172-
  1106 000006B5 6B204E6F7420466F75-
  1106 000006BE 6E64               
  1107 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1107 000006C9 726F7220696E646963-
  1107 000006D2 617465732061207068-
  1107 000006DB 79736963616C207072-
  1107 000006E4 6F626C656D20776974-
  1107 000006ED 682074686520666C6F-
  1107 000006F6 707079206469736B65-
  1107 000006FF 7474652E20506C6561-
  1107 00000708 7365207265747279   
  1108 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1108 00000719 6E6F74686572206469-
  1108 00000722 736B657474652E     
  1109 00000729 0D0A00                                          db      13,10,0
  1110 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1110 00000735 6F7465637465642044-
  1110 0000073E 69736B             
  1111 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1111 0000074A 726F72206973207573-
  1111 00000753 75616C6C7920636175-
  1111 0000075C 736564206279206174-
  1111 00000765 74656D7074696E6720-
  1111 0000076E 746F20777269746520-
  1111 00000777 746F20612077726974-
  1111 00000780 652D70726F74656374-
  1111 00000789 6564206469736B2E   
  1112 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1112 0000079A 686520277772697465-
  1112 000007A3 2D70726F7465637427-
  1112 000007AC 2073657474696E6720-
  1112 000007B5 6F6E20746865206469-
  1112 000007BE 736B206F7220726574-
  1112 000007C7 7279207573696E6720-
  1112 000007D0 7573696E6720616E6F-
  1112 000007D9 74686572206469736B-
  1112 000007E2 2E                 
  1113 000007E3 0D0A00                                          db      13,10,0
  1114 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1114 000007EF 736B65747465205265-
  1114 000007F8 6D6F766564         
  1115 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1115 00000806 726F72206D61792069-
  1115 0000080F 6E6469636174652074-
  1115 00000818 686174207468652066-
  1115 00000821 6C6F70707920646973-
  1115 0000082A 6B6574746520686173-
  1115 00000833 206265656E2072656D-
  1115 0000083C 6F7665642066726F6D-
  1115 00000845 20746865           
  1116 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1116 00000852 652064726976652E20-
  1116 0000085B 4F6E20736F6D652073-
  1116 00000864 797374656D732C2074-
  1116 0000086D 68697320636F646520-
  1116 00000876 6D617920616C736F20-
  1116 0000087F 6F6363757220696620-
  1116 00000888 746865206469736B65-
  1116 00000891 747465206973       
  1117 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1117 000008A0 70726F746563746564-
  1117 000008A9 2E2720506C65617365-
  1117 000008B2 207665726966792074-
  1117 000008BB 686174207468652064-
  1117 000008C4 69736B657474652069-
  1117 000008CD 73206E6F7420777269-
  1117 000008D6 74652D70726F746563-
  1117 000008DF 74656420616E64     
  1118 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1118 000008EF 65726C7920696E7365-
  1118 000008F8 7274656420696E2074-
  1118 00000901 6865206469736B6574-
  1118 0000090A 74652064726976652E 
  1119 00000913 0D0A00                                          db      13,10,0
  1120 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1120 0000091F 6976652054696D6564-
  1120 00000928 204F7574           
  1121 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1121 00000935 726F7220757375616C-
  1121 0000093E 6C7920696E64696361-
  1121 00000947 746573207468617420-
  1121 00000950 6E6F206469736B6574-
  1121 00000959 746520697320696E20-
  1121 00000962 746865206469736B65-
  1121 0000096B 747465206472697665-
  1121 00000974 2E20506C65617365   
  1122 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1122 00000985 726520746861742074-
  1122 0000098E 6865206469736B6574-
  1122 00000997 74652069732070726F-
  1122 000009A0 7065726C7920736561-
  1122 000009A9 74656420696E207468-
  1122 000009B2 652064726976652061-
  1122 000009BB 6E642072657472792E 
  1123 000009C4 0D0A00                                          db      13,10,0
  1124 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1124 000009D0 6B6E6F776E20457272-
  1124 000009D9 6F72               
  1125 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1125 000009E4 6F722D636F64652072-
  1125 000009ED 657475726E65642062-
  1125 000009F6 79207468652042494F-
  1125 000009FF 53206973206E6F7420-
  1125 00000A08 61207265636F676E69-
  1125 00000A11 7A6564206572726F72-
  1125 00000A1A 2E20506C6561736520-
  1125 00000A23 636F6E73756C74     
  1126 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1126 00000A33 6D7075746572277320-
  1126 00000A3C 746563686E6963616C-
  1126 00000A45 207265666572656E63-
  1126 00000A4E 6520666F7220612064-
  1126 00000A57 65736372697074696F-
  1126 00000A60 6E206F662074686973-
  1126 00000A69 206572726F7220636F-
  1126 00000A72 64652E             
  1127 00000A75 0D0A00                                          db      13,10,0
  1128                                  wcPrepInBuf             equ     $
  1129                                  %endif
  1130                                  %ifdef BUILDDISK
  1131                                  ;=======================================================================================================================
  1132                                  ;
  1133                                  ;       File Allocation Tables
  1134                                  ;
  1135                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1136                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1137                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1138                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1139                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1140                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1141                                  ;       the last cluster in the chain.
  1142                                  ;
  1143                                  ;       Every three bytes encode two FAT entries as follows:
  1144                                  ;
  1145                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1146                                  ;
  1147                                  ;=======================================================================================================================
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                  ;
  1150                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1151                                  ;
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  section                 fat1                                                    ;first copy of FAT
  1154                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1155                                                          db      005h,060h,000h, 007h,080h,000h
  1156                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1157                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1158                                                          db      011h,020h,001h, 013h,040h,001h
  1159                                                          db      015h,060h,001h, 017h,080h,001h
  1160                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1161                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1162                                                          db      021h,020h,002h, 023h,040h,002h
  1163                                                          db      025h,060h,002h, 027h,080h,002h
  1164                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1165                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1166                                  ;-----------------------------------------------------------------------------------------------------------------------
  1167                                  ;
  1168                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1169                                  ;
  1170                                  ;-----------------------------------------------------------------------------------------------------------------------
  1171                                  section                 fat2                                                    ;second copy of FAT
  1172                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1173                                                          db      005h,060h,000h, 007h,080h,000h
  1174                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1175                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1176                                                          db      011h,020h,001h, 013h,040h,001h
  1177                                                          db      015h,060h,001h, 017h,080h,001h
  1178                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1179                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1180                                                          db      021h,020h,002h, 023h,040h,002h
  1181                                                          db      025h,060h,002h, 027h,080h,002h
  1182                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1183                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1184                                  ;-----------------------------------------------------------------------------------------------------------------------
  1185                                  ;
  1186                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1187                                  ;
  1188                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1189                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1190                                  ;       copy.
  1191                                  ;
  1192                                  ;-----------------------------------------------------------------------------------------------------------------------
  1193                                  section                 dir                                                     ;diskette directory
  1194                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1195                                                          db      020h                                            ;attribute (archive bit set)
  1196                                                          times   10 db 0                                         ;unused
  1197                                                          dw      0h                                              ;time
  1198                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1199                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1200                                                          dw      2                                               ;first cluster
  1201                                                          dd      05400h                                          ;file size
  1202                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1203                                  %endif
  1204                                  %ifdef BUILDCOM
  1205                                  ;=======================================================================================================================
  1206                                  ;
  1207                                  ;       OS.COM
  1208                                  ;
  1209                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1210                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1211                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1212                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1213                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1214                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1215                                  ;
  1216                                  ;       Our loader addressability is set up according to the following diagram.
  1217                                  ;
  1218                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1219                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1220                                  ;                               |  256 = 100h bytes                             |
  1221                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1222                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1223                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1224                                  ;                       007e00  +-----------------------------------------------+
  1225                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1226                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1227                                  ;                               |                                               |
  1228                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1229                                  ;                               |                                               |
  1230                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1231                                  ;                               |  Loader Code                                  |
  1232                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1233                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1234                                  ;
  1235                                  ;=======================================================================================================================
  1236                                  ;-----------------------------------------------------------------------------------------------------------------------
  1237                                  ;
  1238                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1239                                  ;
  1240                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1241                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1242                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1243                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1244                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1245                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1246                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1247                                  ;       registers.
  1248                                  ;
  1249                                  ;-----------------------------------------------------------------------------------------------------------------------
  1250                                                          cpu     8086                                            ;assume minimal CPU
  1251                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1252                                                          bits    16                                              ;this is 16-bit code
  1253                                  Loader                  push    cs                                              ;use the code segment
  1254                                                          pop     ds                                              ;...as our data segment
  1255                                                          push    cs                                              ;use the code segment
  1256                                                          pop     es                                              ;...as our extra segment
  1257                                  ;
  1258                                  ;       Write a message to the console so we know we have our addressability established.
  1259                                  ;
  1260                                                          mov     si,czStartingMsg                                ;starting message
  1261                                                          call    PutTTYString                                    ;display loader message
  1262                                  ;
  1263                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1264                                  ;
  1265                                                          call    GetCPUType                                      ;AL = cpu type
  1266                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1267                                                          cmp     al,3                                            ;80386+?
  1268                                                          jb      LoaderExit                                      ;no, exit with error message
  1269                                                          cpu     386                                             ;allow 80386 instructions
  1270                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1271                                                          call    PutTTYString                                    ;display message
  1272                                  ;
  1273                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1274                                  ;
  1275                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1276                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1277                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1278                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1279                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1280                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1281                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1282                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1283                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1284                                                          call    PutTTYString                                    ;display message
  1285                                  ;
  1286                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1287                                  ;
  1288                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1289                                                          pop     es                                              ;... as target segment
  1290                                                          xor     di,di                                           ;ES:DI = target address
  1291                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1292                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1293                                                          cld                                                     ;forward strings
  1294                                                          rep     movsb                                           ;copy kernel image
  1295                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1296                                                          call    PutTTYString                                    ;display message
  1297                                  ;
  1298                                  ;       Switch to protected mode.
  1299                                  ;
  1300                                                          xor     si,si                                           ;ES:SI = gdt addr
  1301                                                          mov     ss,si                                           ;protected mode ss
  1302                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1303                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1304                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1305                                                          mov     dx,001Fh                                        ;outer delay loop count
  1306                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1307                                                          loop    $                                               ;wait out pending interrupts
  1308                                                          dec     dx                                              ;restore outer loop count
  1309                                                          jnz     .10                                             ;continue outer loop
  1310                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1311                                  ;
  1312                                  ;       Enable hardware and maskable interrupts.
  1313                                  ;
  1314                                                          xor     al,al                                           ;enable all registers code
  1315                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1316                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1317                                                          sti                                                     ;enable maskable interrupts
  1318                                  ;
  1319                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1320                                  ;
  1321                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1322                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1323                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       Routine:        LoaderExit
  1327                                  ;
  1328                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1329                                  ;
  1330                                  ;       In:             DS:SI   string address
  1331                                  ;
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  LoaderExit              call    PutTTYString                                    ;display error message
  1334                                  ;
  1335                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1336                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1337                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1338                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1339                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1340                                  ;
  1341                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1342                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1343                                                          jnz     .40                                             ;exit if key pressed
  1344                                                          sti                                                     ;enable maskable interrupts
  1345                                                          hlt                                                     ;wait for interrupt
  1346                                                          jmp     .30                                             ;repeat until keypress
  1347                                  ;
  1348                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1349                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1350                                  ;       HLT until the system resets.
  1351                                  ;
  1352                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1353                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1354                                  .50                     sti                                                     ;enable maskable interrupts
  1355                                                          hlt                                                     ;stop until reset, int, nmi
  1356                                                          jmp     .50                                             ;loop until restart kicks in
  1357                                  ;-----------------------------------------------------------------------------------------------------------------------
  1358                                  ;
  1359                                  ;       Routine:        GetCPUType
  1360                                  ;
  1361                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1362                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1363                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1364                                  ;
  1365                                  ;       Out:            AX      0 = 808x, v20, etc.
  1366                                  ;                               1 = 80186
  1367                                  ;                               2 = 80286
  1368                                  ;                               3 = 80386
  1369                                  ;
  1370                                  ;-----------------------------------------------------------------------------------------------------------------------
  1371                                  GetCPUType              mov     al,1                                            ;AL = 1
  1372                                                          mov     cl,32                                           ;shift count
  1373                                                          shr     al,cl                                           ;try a 32-bit shift
  1374                                                          or      al,al                                           ;did the shift happen?
  1375                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1376                                                          cpu     186
  1377                                                          push    sp                                              ;save stack pointer
  1378                                                          pop     cx                                              ;...into cx
  1379                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1380                                                          jne     .10                                             ;yes, cpu is 80186
  1381                                                          cpu     286
  1382                                                          inc     ax                                              ;AX = 2
  1383                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1384                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1385                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1386                                                          jz      .10                                             ;yes, cpu is 80286
  1387                                                          inc     ax                                              ;AX = 3
  1388                                  .10                     ret                                                     ;return
  1389                                  ;-----------------------------------------------------------------------------------------------------------------------
  1390                                  ;
  1391                                  ;       Routine:        PutTTYString
  1392                                  ;
  1393                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1394                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1395                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1396                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1397                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1398                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1399                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1400                                  ;                       to LODSB is not needed.
  1401                                  ;
  1402                                  ;       In:             DS:SI   address of string
  1403                                  ;
  1404                                  ;       Out:            DF      0
  1405                                  ;                       ZF      1
  1406                                  ;                       AL      0
  1407                                  ;
  1408                                  ;-----------------------------------------------------------------------------------------------------------------------
  1409                                  PutTTYString            cld                                                     ;forward strings
  1410                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1411                                                          test    al,al                                           ;end of string?
  1412                                                          jz      .20                                             ;... yes, exit our loop
  1413                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1414                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1415                                                          jmp     .10                                             ;repeat until done
  1416                                  .20                     ret                                                     ;return
  1417                                  ;-----------------------------------------------------------------------------------------------------------------------
  1418                                  ;
  1419                                  ;       Loader Data
  1420                                  ;
  1421                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1422                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1423                                  ;
  1424                                  ;-----------------------------------------------------------------------------------------------------------------------
  1425                                                          align   2
  1426                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1427                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1428                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1429                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1430                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1431                                                          db      "Please press any key to restart the computer.",13,10,0
  1432                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1433                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1434                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1435                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1436                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1437                                  ;=======================================================================================================================
  1438                                  ;
  1439                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1440                                  ;
  1441                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1442                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1443                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1444                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1445                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1446                                  ;
  1447                                  ;=======================================================================================================================
  1448                                  ;=======================================================================================================================
  1449                                  ;
  1450                                  ;       Kernel Tables
  1451                                  ;
  1452                                  ;=======================================================================================================================
  1453                                  ;-----------------------------------------------------------------------------------------------------------------------
  1454                                  ;
  1455                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1456                                  ;
  1457                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1458                                  ;       first descriptor must be all nulls.
  1459                                  ;
  1460                                  ;       6   5         4         3         2         1         0
  1461                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1462                                  ;       ----------------------------------------------------------------
  1463                                  ;       h......hffffmmmma......ab......................bn..............n
  1464                                  ;       00000000                        all areas have base addresses below 2^24
  1465                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1466                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1467                                  ;                   1001                present, ring-0, selector
  1468                                  ;
  1469                                  ;       h...h   hi-order base address (bits 24-31)
  1470                                  ;       ffff    flags
  1471                                  ;       mmmm    hi-order limit (bits 16-19)
  1472                                  ;       a...a   access
  1473                                  ;       b...b   lo-order base address (bits 0-23)
  1474                                  ;       n...n   lo-order limit (bits 0-15)
  1475                                  ;
  1476                                  ;-----------------------------------------------------------------------------------------------------------------------
  1477                                  section                 gdt                                                     ;global descriptor table
  1478                                                          dq      0000000000000000h                               ;00 required null selector
  1479                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1480                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1481                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1482                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1483                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1484                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1485                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1486                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1487                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1488                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1489                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1490                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1491                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1492                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1493                                  ;-----------------------------------------------------------------------------------------------------------------------
  1494                                  ;
  1495                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1496                                  ;
  1497                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1498                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1499                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1500                                  ;
  1501                                  ;       6   5         4         3         2         1         0
  1502                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1503                                  ;       ----------------------------------------------------------------
  1504                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1505                                  ;
  1506                                  ;       h...h   high-order offset (bits 16-31)
  1507                                  ;       P       present (0=unused interrupt)
  1508                                  ;       zz      descriptor privilege level
  1509                                  ;       S       storage segment (must be zero for IDT)
  1510                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1511                                  ;       S...S   handling code selector in GDT
  1512                                  ;       l...l   lo-order offset (bits 0-15)
  1513                                  ;
  1514                                  ;-----------------------------------------------------------------------------------------------------------------------
  1515                                  section                 idt                                                     ;interrupt descriptor table
  1516                                                          mint    dividebyzero                                    ;00 divide by zero
  1517                                                          mint    singlestep                                      ;01 single step
  1518                                                          mint    nmi                                             ;02 non-maskable
  1519                                                          mint    break                                           ;03 break
  1520                                                          mint    into                                            ;04 into
  1521                                                          mint    bounds                                          ;05 bounds
  1522                                                          mint    badopcode                                       ;06 bad op code
  1523                                                          mint    nocoproc                                        ;07 no coprocessor
  1524                                                          mint    doublefault                                     ;08 double-fault
  1525                                                          mint    operand                                         ;09 operand
  1526                                                          mint    badtss                                          ;0a bad TSS
  1527                                                          mint    notpresent                                      ;0b not-present
  1528                                                          mint    stacklimit                                      ;0c stack limit
  1529                                                          mint    protection                                      ;0d general protection fault
  1530                                                          mint    int14                                           ;0e (reserved)
  1531                                                          mint    int15                                           ;0f (reserved)
  1532                                                          mint    coproccalc                                      ;10 (reserved)
  1533                                                          mint    int17                                           ;11 (reserved)
  1534                                                          mint    int18                                           ;12 (reserved)
  1535                                                          mint    int19                                           ;13 (reserved)
  1536                                                          mint    int20                                           ;14 (reserved)
  1537                                                          mint    int21                                           ;15 (reserved)
  1538                                                          mint    int22                                           ;16 (reserved)
  1539                                                          mint    int23                                           ;17 (reserved)
  1540                                                          mint    int24                                           ;18 (reserved)
  1541                                                          mint    int25                                           ;19 (reserved)
  1542                                                          mint    int26                                           ;1a (reserved)
  1543                                                          mint    int27                                           ;1b (reserved)
  1544                                                          mint    int28                                           ;1c (reserved)
  1545                                                          mint    int29                                           ;1d (reserved)
  1546                                                          mint    int30                                           ;1e (reserved)
  1547                                                          mint    int31                                           ;1f (reserved)
  1548                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1549                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1550                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1551                                                          mtrap   com2                                            ;23 IRQ3 com2
  1552                                                          mtrap   com1                                            ;24 IRQ4 com1
  1553                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1554                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1555                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1556                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1557                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1558                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1559                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1560                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1561                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1562                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1563                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1564                                                          mtrap   svc                                             ;30 OS services
  1565                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1566                                  ;=======================================================================================================================
  1567                                  ;
  1568                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1569                                  ;
  1570                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1571                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1572                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1573                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1574                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1575                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1576                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1577                                  ;
  1578                                  ;=======================================================================================================================
  1579                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1580                                                          cpu     386                                             ;allow 80386 instructions
  1581                                                          bits    32                                              ;this is 32-bit code
  1582                                  ;=======================================================================================================================
  1583                                  ;
  1584                                  ;       CPU Interrupt Handlers
  1585                                  ;
  1586                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1587                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1588                                  ;
  1589                                  ;=======================================================================================================================
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;
  1592                                  ;       INT0    Divide By Zero
  1593                                  ;
  1594                                  ;-----------------------------------------------------------------------------------------------------------------------
  1595                                                          menter  dividebyzero                                    ;divide by zero
  1596                                                          push    0                                               ;store interrupt nbr
  1597                                                          push    czIntDivideByZero                               ;store message offset
  1598                                                          jmp     ReportInterrupt                                 ;report interrupt
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  ;
  1601                                  ;       INT1    Single Step
  1602                                  ;
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                                          menter  singlestep                                      ;single step
  1605                                                          push    1                                               ;store interrupt nbr
  1606                                                          push    czIntSingleStep                                 ;store message offset
  1607                                                          jmp     ReportInterrupt                                 ;report interrupt
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  ;
  1610                                  ;       INT2    Non-Maskable Interrupt
  1611                                  ;
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                                          menter  nmi                                             ;non-maskable
  1614                                                          push    2                                               ;store interrupt nbr
  1615                                                          push    czIntNonMaskable                                ;store message offset
  1616                                                          jmp     ReportInterrupt                                 ;report interrupt
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                  ;
  1619                                  ;       INT3    Break
  1620                                  ;
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                                          menter  break                                           ;break
  1623                                                          push    3                                               ;store interrupt nbr
  1624                                                          push    czIntBreak                                      ;store message offset
  1625                                                          jmp     ReportInterrupt                                 ;report interrupt
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  ;
  1628                                  ;       INT4    Into
  1629                                  ;
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                                          menter  into                                            ;into
  1632                                                          push    4                                               ;store interrupt nbr
  1633                                                          push    czIntInto                                       ;store message offset
  1634                                                          jmp     ReportInterrupt                                 ;report interrupt
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                  ;
  1637                                  ;       INT5    Bounds
  1638                                  ;
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                                          menter  bounds                                          ;bounds
  1641                                                          push    5                                               ;store interrupt nbr
  1642                                                          push    czIntBounds                                     ;store message offset
  1643                                                          jmp     ReportInterrupt                                 ;report interrupt
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  ;
  1646                                  ;       INT6    Bad Operation Code
  1647                                  ;
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                                          menter  badopcode                                       ;bad opcode interrupt
  1650                                                          push    6                                               ;store interrupt nbr
  1651                                                          push    czIntBadOpCode                                  ;store message offset
  1652                                                          jmp     ReportInterrupt                                 ;report interrupt
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  ;
  1655                                  ;       INT7    No Coprocessor
  1656                                  ;
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1659                                                          push    7                                               ;store interrupt nbr
  1660                                                          push    czIntNoCoprocessor                              ;store message offset
  1661                                                          jmp     ReportInterrupt                                 ;report interrupt
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  ;
  1664                                  ;       INT8    Double Fault
  1665                                  ;
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                                          menter  doublefault                                     ;doublefault interrupt
  1668                                                          push    8                                               ;store interrupt nbr
  1669                                                          push    czIntDoubleFault                                ;store message offset
  1670                                                          jmp     ReportInterrupt                                 ;report interrupt
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       INT9    Operand
  1674                                  ;
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                                          menter  operand                                         ;operand interrupt
  1677                                                          push    9                                               ;store interrupt nbr
  1678                                                          push    czIntOperand                                    ;store message offset
  1679                                                          jmp     ReportInterrupt                                 ;report interrupt
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  ;
  1682                                  ;       INT10   Bad Task State Segment
  1683                                  ;
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                                          menter  badtss                                          ;bad TSS interrupt
  1686                                                          push    10                                              ;store interrupt nbr
  1687                                                          push    czIntBadTSS                                     ;store message offset
  1688                                                          jmp     ReportInterrupt                                 ;report interrupt
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  ;
  1691                                  ;       INT11   Not Present
  1692                                  ;
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                                          menter  notpresent                                      ;not present interrupt
  1695                                                          push    11                                              ;store interrupt nbr
  1696                                                          push    czIntNotPresent                                 ;store message offset
  1697                                                          jmp     ReportInterrupt                                 ;report interrupt
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  ;
  1700                                  ;       INT12   Stack Limit
  1701                                  ;
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                                          menter  stacklimit                                      ;stack limit interrupt
  1704                                                          push    12                                              ;store interrupt nbr
  1705                                                          push    czIntStackLimit                                 ;store message offset
  1706                                                          jmp     ReportInterrupt                                 ;report interrupt
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  ;
  1709                                  ;       INT13   General Protection Fault
  1710                                  ;
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                                          menter  protection                                      ;protection fault interrupt
  1713                                                          push    13                                              ;store interrupt nbr
  1714                                                          push    czIntProtection                                 ;store message offset
  1715                                                          jmp     ReportInterrupt                                 ;report interrupt
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  ;
  1718                                  ;       INT14   Reserved
  1719                                  ;
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                                          menter  int14                                           ;(reserved)
  1722                                                          push    14                                              ;store interrupt nbr
  1723                                                          push    czIntReserved                                   ;store message offset
  1724                                                          jmp     ReportInterrupt                                 ;report interrupt
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  ;
  1727                                  ;       INT15   Reserved
  1728                                  ;
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                                          menter  int15                                           ;(reserved)
  1731                                                          push    15                                              ;store interrupt nbr
  1732                                                          push    czIntReserved                                   ;store message offset
  1733                                                          jmp     ReportInterrupt                                 ;report interrupt
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  ;
  1736                                  ;       INT16   Coprocessor Calculation
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                                          menter  coproccalc                                      ;coprocessor calculation
  1740                                                          push    16                                              ;store interrupt nbr
  1741                                                          push    czIntCoprocessorCalc                            ;store message offset
  1742                                                          jmp     ReportInterrupt                                 ;report interrupt
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                  ;
  1745                                  ;       INT17   Reserved
  1746                                  ;
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                                          menter  int17                                           ;(reserved)
  1749                                                          push    17                                              ;store interrupt nbr
  1750                                                          push    czIntReserved                                   ;store message offset
  1751                                                          jmp     ReportInterrupt                                 ;report interrupt
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  ;
  1754                                  ;       INT18   Reserved
  1755                                  ;
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                                          menter  int18                                           ;(reserved)
  1758                                                          push    18                                              ;store interrupt nbr
  1759                                                          push    czIntReserved                                   ;store message offset
  1760                                                          jmp     ReportInterrupt                                 ;report interrupt
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                  ;
  1763                                  ;       INT19   Reserved
  1764                                  ;
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                                          menter  int19                                           ;(reserved)
  1767                                                          push    19                                              ;store interrupt nbr
  1768                                                          push    czIntReserved                                   ;store message offset
  1769                                                          jmp     ReportInterrupt                                 ;report interrupt
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  ;
  1772                                  ;       INT20   Reserved
  1773                                  ;
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                                          menter  int20                                           ;(reserved)
  1776                                                          push    20                                              ;store interrupt nbr
  1777                                                          push    czIntReserved                                   ;store message offset
  1778                                                          jmp     ReportInterrupt                                 ;report interrupt
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  ;
  1781                                  ;       INT21   Reserved
  1782                                  ;
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                                          menter  int21                                           ;(reserved)
  1785                                                          push    21                                              ;store interrupt nbr
  1786                                                          push    czIntReserved                                   ;store message offset
  1787                                                          jmp     ReportInterrupt                                 ;report interrupt
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                  ;
  1790                                  ;       INT22   Reserved
  1791                                  ;
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                                          menter  int22                                           ;(reserved)
  1794                                                          push    22                                              ;store interrupt nbr
  1795                                                          push    czIntReserved                                   ;store message offset
  1796                                                          jmp     ReportInterrupt                                 ;report interrupt
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  ;
  1799                                  ;       INT23   Reserved
  1800                                  ;
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                                          menter  int23                                           ;(reserved)
  1803                                                          push    23                                              ;store interrupt nbr
  1804                                                          push    czIntReserved                                   ;store message offset
  1805                                                          jmp     ReportInterrupt                                 ;report interrupt
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                  ;
  1808                                  ;       INT24   Reserved
  1809                                  ;
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                                          menter  int24                                           ;(reserved)
  1812                                                          push    24                                              ;store interrupt nbr
  1813                                                          push    czIntReserved                                   ;store message offset
  1814                                                          jmp     ReportInterrupt                                 ;report interrupt
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                  ;
  1817                                  ;       INT25   Reserved
  1818                                  ;
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                                          menter  int25                                           ;(reserved)
  1821                                                          push    25                                              ;store interrupt nbr
  1822                                                          push    czIntReserved                                   ;store message offset
  1823                                                          jmp     ReportInterrupt                                 ;report interrupt
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                  ;
  1826                                  ;       INT26   Reserved
  1827                                  ;
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                                          menter  int26                                           ;(reserved)
  1830                                                          push    26                                              ;store interrupt nbr
  1831                                                          push    czIntReserved                                   ;store message offset
  1832                                                          jmp     ReportInterrupt                                 ;report interrupt
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                  ;
  1835                                  ;       INT27   Reserved
  1836                                  ;
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                                          menter  int27                                           ;(reserved)
  1839                                                          push    27                                              ;store interrupt nbr
  1840                                                          push    czIntReserved                                   ;store message offset
  1841                                                          jmp     ReportInterrupt                                 ;report interrupt
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  ;
  1844                                  ;       INT28   Reserved
  1845                                  ;
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                                          menter  int28                                           ;(reserved)
  1848                                                          push    28                                              ;store interrupt nbr
  1849                                                          push    czIntReserved                                   ;store message offset
  1850                                                          jmp     ReportInterrupt                                 ;report interrupt
  1851                                  ;-----------------------------------------------------------------------------------------------------------------------
  1852                                  ;
  1853                                  ;       INT29   Reserved
  1854                                  ;
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                                          menter  int29                                           ;(reserved)
  1857                                                          push    29                                              ;store interrupt nbr
  1858                                                          push    czIntReserved                                   ;store message offset
  1859                                                          jmp     ReportInterrupt                                 ;report interrupt
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                  ;
  1862                                  ;       INT30   Reserved
  1863                                  ;
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                                          menter  int30                                           ;(reserved)
  1866                                                          push    30                                              ;store interrupt nbr
  1867                                                          push    czIntReserved                                   ;store message offset
  1868                                                          jmp     ReportInterrupt                                 ;report interrupt
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                  ;
  1871                                  ;       INT31   Reserved
  1872                                  ;
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                                          menter  int31                                           ;(reserved)
  1875                                                          push    31                                              ;store interrupt nbr
  1876                                                          push    czIntReserved                                   ;store message offset
  1877                                                          jmp     ReportInterrupt                                 ;report interrupt
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                  ;
  1880                                  ;       Routine:        ReportInterrupt
  1881                                  ;
  1882                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1883                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1884                                  ;
  1885                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1886                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1887                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1888                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1889                                  ;                       [esp+0]         error message address                   stored by push instructions
  1890                                  ;
  1891                                  ;       Out:            N/A             This routine does not exit.
  1892                                  ;
  1893                                  ;-----------------------------------------------------------------------------------------------------------------------
  1894                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1895                                                          push    es                                              ;save ES at time of interrupt
  1896                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1897                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1898                                  ;
  1899                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1900                                  ;
  1901                                  ;                       [ebp+56]        eflags
  1902                                  ;                       [ebp+52]        cs
  1903                                  ;                       [ebp+48]        eip
  1904                                  ;                       [ebp+44]        interrupt number (0-31)
  1905                                  ;                       [ebp+40]        error message address
  1906                                  ;                       [ebp+36]        ds
  1907                                  ;                       [ebp+32]        es
  1908                                  ;                       [ebp+28]        eax
  1909                                  ;                       [ebp+24]        ecx
  1910                                  ;                       [ebp+20]        edx
  1911                                  ;                       [ebp+16]        ebx
  1912                                  ;                       [ebp+12]        esp
  1913                                  ;                       [ebp+8]         ebp
  1914                                  ;                       [ebp+4]         esi
  1915                                  ;                       [ebp+0]         edi
  1916                                  ;
  1917                                                          push    cs                                              ;load code selector ...
  1918                                                          pop     ds                                              ;... into DS
  1919                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1920                                                          pop     es                                              ;... into ES
  1921                                  ;
  1922                                  ;       Display the interrupt report boundary box
  1923                                  ;
  1924                                                          mov     cl,13                                           ;column
  1925                                                          mov     ch,6                                            ;row
  1926                                                          mov     dl,50                                           ;width
  1927                                                          mov     dh,8                                            ;height
  1928                                                          mov     bh,07h                                          ;attribute
  1929                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1930                                  ;
  1931                                  ;       Display the report header
  1932                                  ;
  1933                                                          mov     cl,15                                           ;column
  1934                                                          mov     ch,7                                            ;row
  1935                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1936                                                          call    SetConsoleString                                ;draw text string
  1937                                  ;
  1938                                  ;       Display the interrupt description label
  1939                                  ;
  1940                                                          mov     cl,15                                           ;column
  1941                                                          mov     ch,8                                            ;row
  1942                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1943                                                          call    SetConsoleString                                ;draw text string
  1944                                  ;
  1945                                  ;       Display the interrupt number
  1946                                  ;
  1947                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1948                                                          mov     cl,26                                           ;column
  1949                                                          mov     ch,8                                            ;row
  1950                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1951                                  ;
  1952                                  ;       Display the interrupt name
  1953                                  ;
  1954                                                          mov     cl,29                                           ;column
  1955                                                          mov     ch,8                                            ;row
  1956                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1957                                                          call    SetConsoleString                                ;display interrupt description
  1958                                  ;
  1959                                  ;       Display the register values header
  1960                                  ;
  1961                                                          mov     cl,15                                           ;column
  1962                                                          mov     ch,10                                           ;row
  1963                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1964                                                          call    SetConsoleString                                ;draw text string
  1965                                  ;
  1966                                  ;       Display the EAX register label and value
  1967                                  ;
  1968                                                          mov     cl,15                                           ;column
  1969                                                          mov     ch,11                                           ;row
  1970                                                          mov     esi,czIntEAX                                    ;register EAX label
  1971                                                          call    SetConsoleString                                ;draw label
  1972                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1973                                                          mov     cl,19                                           ;column
  1974                                                          mov     ch,11                                           ;row
  1975                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1976                                  ;
  1977                                  ;       Display the ECX register label and value
  1978                                  ;
  1979                                                          mov     cl,15                                           ;column
  1980                                                          mov     ch,12                                           ;row
  1981                                                          mov     esi,czIntECX                                    ;label
  1982                                                          call    SetConsoleString                                ;draw label
  1983                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  1984                                                          mov     cl,19                                           ;column
  1985                                                          mov     ch,12                                           ;row
  1986                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1987                                  ;
  1988                                  ;       Display the EDX register label and value
  1989                                  ;
  1990                                                          mov     cl,15                                           ;column
  1991                                                          mov     ch,13                                           ;row
  1992                                                          mov     esi,czIntEDX                                    ;label
  1993                                                          call    SetConsoleString                                ;draw label
  1994                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  1995                                                          mov     cl,19                                           ;column
  1996                                                          mov     ch,13                                           ;row
  1997                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1998                                  ;
  1999                                  ;       Display the EBX register label and value
  2000                                  ;
  2001                                                          mov     cl,15                                           ;column
  2002                                                          mov     ch,14                                           ;row
  2003                                                          mov     esi,czIntEBX                                    ;label
  2004                                                          call    SetConsoleString                                ;draw label
  2005                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2006                                                          mov     cl,19                                           ;column
  2007                                                          mov     ch,14                                           ;row
  2008                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2009                                  ;
  2010                                  ;       Display the ESI register label and value
  2011                                  ;
  2012                                                          mov     cl,29                                           ;column
  2013                                                          mov     ch,11                                           ;row
  2014                                                          mov     esi,czIntESI                                    ;label
  2015                                                          call    SetConsoleString                                ;draw label
  2016                                                          mov     eax,[ebp+4]                                     ;ESI
  2017                                                          mov     cl,33                                           ;column
  2018                                                          mov     ch,11                                           ;row
  2019                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2020                                  ;
  2021                                  ;       Display the EDI register label and value
  2022                                  ;
  2023                                                          mov     cl,29                                           ;column
  2024                                                          mov     ch,12                                           ;row
  2025                                                          mov     esi,czIntEDI                                    ;label
  2026                                                          call    SetConsoleString                                ;draw label
  2027                                                          mov     eax,[ebp+0]                                     ;EDI
  2028                                                          mov     cl,33                                           ;column
  2029                                                          mov     ch,12                                           ;row
  2030                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2031                                  ;
  2032                                  ;       Display the EBP register label and value
  2033                                  ;
  2034                                                          mov     cl,29                                           ;column
  2035                                                          mov     ch,13                                           ;row
  2036                                                          mov     esi,czIntEBP                                    ;label
  2037                                                          call    SetConsoleString                                ;draw label
  2038                                                          mov     eax,[ebp+8]                                     ;EBP
  2039                                                          mov     cl,33                                           ;column
  2040                                                          mov     ch,13                                           ;row
  2041                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2042                                  ;
  2043                                  ;       Display the DS register label and value
  2044                                  ;
  2045                                                          mov     cl,42                                           ;column
  2046                                                          mov     ch,11                                           ;row
  2047                                                          mov     esi,czIntDS                                     ;label
  2048                                                          call    SetConsoleString                                ;draw label
  2049                                                          xor     eax,eax                                         ;zero register
  2050                                                          mov     ax,[ebp+36]                                     ;DS
  2051                                                          mov     cl,46                                           ;column
  2052                                                          mov     ch,11                                           ;row
  2053                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2054                                  ;
  2055                                  ;       Display the ES register label and value
  2056                                  ;
  2057                                                          mov     cl,42                                           ;column
  2058                                                          mov     ch,12                                           ;row
  2059                                                          mov     esi,czIntES                                     ;label
  2060                                                          call    SetConsoleString                                ;draw label
  2061                                                          xor     eax,eax                                         ;zero register
  2062                                                          mov     ax,[ebp+32]                                     ;ES
  2063                                                          mov     cl,46                                           ;column
  2064                                                          mov     ch,12                                           ;row
  2065                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2066                                  ;
  2067                                  ;       Display the SS register label and value
  2068                                  ;
  2069                                                          mov     cl,42                                           ;column
  2070                                                          mov     ch,13                                           ;row
  2071                                                          mov     esi,czIntSS                                     ;label
  2072                                                          call    SetConsoleString                                ;draw label
  2073                                                          xor     eax,eax                                         ;zero register
  2074                                                          mov     ax,ss                                           ;SS
  2075                                                          mov     cl,46                                           ;column
  2076                                                          mov     ch,13                                           ;row
  2077                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2078                                  ;
  2079                                  ;       Display the CS register lable and value
  2080                                  ;
  2081                                                          mov     cl,42                                           ;column
  2082                                                          mov     ch,14                                           ;row
  2083                                                          mov     esi,czIntCS                                     ;label
  2084                                                          call    SetConsoleString                                ;draw label
  2085                                                          xor     eax,eax                                         ;zero register
  2086                                                          mov     ax,[ebp+52]                                     ;CS
  2087                                                          mov     cl,46                                           ;column
  2088                                                          mov     ch,14                                           ;row
  2089                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2090                                  ;
  2091                                  ;       Display the EFLAGS register label and value
  2092                                  ;
  2093                                                          mov     cl,51                                           ;column
  2094                                                          mov     ch,11                                           ;row
  2095                                                          mov     esi,czIntEFLAGS                                 ;label
  2096                                                          call    SetConsoleString                                ;draw label
  2097                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2098                                                          mov     cl,55                                           ;column
  2099                                                          mov     ch,11                                           ;row
  2100                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2101                                  ;
  2102                                  ;       Display the ESP register label and value
  2103                                  ;
  2104                                                          mov     cl,51                                           ;column
  2105                                                          mov     ch,13                                           ;row
  2106                                                          mov     esi,czIntESP                                    ;label
  2107                                                          call    SetConsoleString                                ;draw label
  2108                                                          mov     eax,[ebp+12]                                    ;ESP
  2109                                                          mov     cl,55                                           ;column
  2110                                                          mov     ch,13                                           ;row
  2111                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2112                                  ;
  2113                                  ;       Display the EIP register label and value
  2114                                  ;
  2115                                                          mov     cl,51                                           ;column
  2116                                                          mov     ch,14                                           ;row
  2117                                                          mov     esi,czIntEIP                                    ;label
  2118                                                          call    SetConsoleString                                ;draw label
  2119                                                          mov     eax,[ebp+48]                                    ;EIP
  2120                                                          mov     cl,55                                           ;column
  2121                                                          mov     ch,14                                           ;row
  2122                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2123                                  ;
  2124                                  ;       Halt and loop until reset
  2125                                  ;
  2126                                  .10                     sti                                                     ;enable maskable interrupts
  2127                                                          hlt                                                     ;halt processor
  2128                                                          jmp     .10                                             ;resume on interrupt
  2129                                  ;-----------------------------------------------------------------------------------------------------------------------
  2130                                  ;
  2131                                  ;       Processor Interrupt Name Strings
  2132                                  ;
  2133                                  ;-----------------------------------------------------------------------------------------------------------------------
  2134                                  czIntDivideByZero       db      "Division by zero",0
  2135                                  czIntSingleStep         db      "Single step",0
  2136                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2137                                  czIntBreak              db      "Break",0
  2138                                  czIntInto               db      "Into",0
  2139                                  czIntBounds             db      "Bounds",0
  2140                                  czIntBadOpCode          db      "Bad Operation Code",0
  2141                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2142                                  czIntDoubleFault        db      "Double Fault",0
  2143                                  czIntOperand            db      "Operand",0
  2144                                  czIntBadTSS             db      "Bad Task State Segment",0
  2145                                  czIntNotPresent         db      "Not Present",0
  2146                                  czIntStackLimit         db      "Stack Limit",0
  2147                                  czIntProtection         db      "General Protection Fault",0
  2148                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2149                                  czIntReserved           db      "Reserved",0
  2150                                  ;-----------------------------------------------------------------------------------------------------------------------
  2151                                  ;
  2152                                  ;       Processor Interrupt Handling Strings
  2153                                  ;
  2154                                  ;-----------------------------------------------------------------------------------------------------------------------
  2155                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2156                                  czIntLabel              db      "Interrupt #",0
  2157                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2158                                  czIntEAX                db      "EAX:",0
  2159                                  czIntECX                db      "ECX:",0
  2160                                  czIntEDX                db      "EDX:",0
  2161                                  czIntEBX                db      "EBX:",0
  2162                                  czIntESI                db      "ESI:",0
  2163                                  czIntEDI                db      "EDI:",0
  2164                                  czIntEBP                db      "EBP:",0
  2165                                  czIntESP                db      "ESP:",0
  2166                                  czIntDS                 db      " DS:",0
  2167                                  czIntES                 db      " ES:",0
  2168                                  czIntSS                 db      " SS:",0
  2169                                  czIntCS                 db      " CS:",0
  2170                                  czIntEFLAGS             db      "FLG:",0
  2171                                  czIntEIP                db      "EIP:",0
  2172                                  ;-----------------------------------------------------------------------------------------------------------------------
  2173                                  ;
  2174                                  ;       Routine:        DrawTextDialogBox
  2175                                  ;
  2176                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2177                                  ;
  2178                                  ;       In:             CL      upper left column (0-79)
  2179                                  ;                       CH      upper left row (0-24)
  2180                                  ;                       DL      column width, excluding border
  2181                                  ;                       DH      row height, excluding border
  2182                                  ;                       BH      color attribute
  2183                                  ;
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2186                                                          push    esi                                             ;
  2187                                                          push    edi                                             ;
  2188                                                          push    es                                              ;
  2189                                                          push    EGDTCGA                                         ;load CGA selector ...
  2190                                                          pop     es                                              ;... into ES
  2191                                  ;
  2192                                  ;       Compute target display offset
  2193                                  ;
  2194                                                          xor     eax,eax                                         ;zero register
  2195                                                          mov     al,ch                                           ;row
  2196                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2197                                                          mul     ah                                              ;row offset
  2198                                                          add     al,cl                                           ;add column
  2199                                                          adc     ah,0                                            ;add overflow
  2200                                                          add     al,cl                                           ;add column
  2201                                                          adc     ah,0                                            ;add overflow
  2202                                                          mov     edi,eax                                         ;target row offset
  2203                                  ;
  2204                                  ;       Display top border row
  2205                                  ;
  2206                                                          push    edi                                             ;save target row offset
  2207                                                          mov     ah,bh                                           ;attribute
  2208                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2209                                                          stosw                                                   ;display character and attribute
  2210                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2211                                                          xor     ecx,ecx                                         ;zero register
  2212                                                          mov     cl,dl                                           ;width, excluding border
  2213                                                          rep     stosw                                           ;display horizontal border
  2214                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2215                                                          stosw                                                   ;display character and attribute
  2216                                                          pop     edi                                             ;restore target row offset
  2217                                                          add     edi,ECONROWBYTES                                ;next row
  2218                                  ;
  2219                                  ;       Display dialog box body rows
  2220                                  ;
  2221                                                          xor     ecx,ecx                                         ;zero register
  2222                                                          mov     cl,dh                                           ;height, excluding border
  2223                                  .10                     push    ecx                                             ;save remaining rows
  2224                                                          push    edi                                             ;save target row offset
  2225                                                          mov     ah,bh                                           ;attribute
  2226                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2227                                                          stosw                                                   ;display character and attribute
  2228                                                          mov     al,EASCIISPACE                                  ;space
  2229                                                          xor     ecx,ecx                                         ;zero register
  2230                                                          mov     cl,dl                                           ;width, excluding border
  2231                                                          rep     stosw                                           ;display row
  2232                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2233                                                          stosw                                                   ;display character and attribute
  2234                                                          pop     edi                                             ;restore target row offset
  2235                                                          add     edi,ECONROWBYTES                                ;next row
  2236                                                          pop     ecx                                             ;remaining rows
  2237                                                          loop    .10                                             ;next row
  2238                                  ;
  2239                                  ;       Display bottom border row
  2240                                  ;
  2241                                                          push    edi                                             ;save target row offset
  2242                                                          mov     ah,bh                                           ;attribute
  2243                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2244                                                          stosw                                                   ;display character and attribute
  2245                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2246                                                          xor     ecx,ecx                                         ;zero register
  2247                                                          mov     cl,dl                                           ;width, excluding border
  2248                                                          rep     stosw                                           ;display horizontal border
  2249                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2250                                                          stosw                                                   ;display character and attribute
  2251                                                          pop     edi                                             ;restore target row offset
  2252                                                          add     edi,ECONROWBYTES                                ;next row
  2253                                  ;
  2254                                  ;       Restore and return
  2255                                  ;
  2256                                                          pop     es                                              ;restore non-volatile regs
  2257                                                          pop     edi                                             ;
  2258                                                          pop     esi                                             ;
  2259                                                          pop     ecx                                             ;
  2260                                                          ret                                                     ;return
  2261                                  ;=======================================================================================================================
  2262                                  ;
  2263                                  ;       Hardware Device Interupts
  2264                                  ;
  2265                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2266                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2267                                  ;       (BX=2028h).
  2268                                  ;
  2269                                  ;=======================================================================================================================
  2270                                  ;-----------------------------------------------------------------------------------------------------------------------
  2271                                  ;
  2272                                  ;       IRQ0    Clock Tick Interrupt
  2273                                  ;
  2274                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2275                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2276                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2277                                  ;
  2278                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2279                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2280                                  ;
  2281                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2282                                  ;       zero, the floppy disk motors are turned off.
  2283                                  ;
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                                          menter  clocktick                                       ;clock tick interrupt
  2286                                                          push    eax                                             ;save non-volatile regs
  2287                                                          push    edx                                             ;
  2288                                                          push    ds                                              ;
  2289                                  ;
  2290                                  ;       Update the clock tick count and the elapsed days as needed.
  2291                                  ;
  2292                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2293                                                          pop     ds                                              ;... into data segment register
  2294                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2295                                                          inc     eax                                             ;increment clock ticks
  2296                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2297                                                          jb      irq0.10                                         ;no, skip ahead
  2298                                                          inc     byte [wbClockDays]                              ;increment clock days
  2299                                                          xor     eax,eax                                         ;reset clock ticks
  2300                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2301                                  ;
  2302                                  ;       Decrement floppy disk motor timeout.
  2303                                  ;
  2304                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2305                                                          je      irq0.20                                         ;yes, skip ahead
  2306                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2307                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2308                                  ;
  2309                                  ;       Turn off the floppy disk motor if appropriate.
  2310                                  ;
  2311                                                          sti                                                     ;enable maskable interrupts
  2312                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2313                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2314                                                          in      al,dx                                           ;FDC main status byte
  2315                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2316                                                          jnz     irq0.15                                         ;wait while busy
  2317                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2318                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2319                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2320                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2321                                                          out     dx,al                                           ;turn motor off
  2322                                  ;
  2323                                  ;       Signal the end of the hardware interrupt.
  2324                                  ;
  2325                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2326                                  ;
  2327                                  ;       Restore and return.
  2328                                  ;
  2329                                                          pop     ds                                              ;restore modified regs
  2330                                                          pop     edx                                             ;
  2331                                                          pop     eax                                             ;
  2332                                                          iretd                                                   ;return
  2333                                  ;-----------------------------------------------------------------------------------------------------------------------
  2334                                  ;
  2335                                  ;       IRQ1    Keyboard Interrupt
  2336                                  ;
  2337                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2338                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2339                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2340                                  ;       ALL modified registers upon return.
  2341                                  ;
  2342                                  ;-----------------------------------------------------------------------------------------------------------------------
  2343                                                          menter  keyboard                                        ;keyboard interrrupt
  2344                                                          push    eax                                             ;save non-volatile regs
  2345                                                          push    ebx                                             ;
  2346                                                          push    ecx                                             ;
  2347                                                          push    esi                                             ;
  2348                                                          push    ds                                              ;
  2349                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2350                                                          pop     ds                                              ;... into data segment register
  2351                                                          xor     al,al                                           ;zero
  2352                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2353                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2354                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2355                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2356                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2357                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2358                                                          mov     al,' '                                          ;space
  2359                                                          mov     [wbConsoleChar],al                              ;set character to space
  2360                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2361                                                          not     al                                              ;controller timeout mask
  2362                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2363                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2364                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2365                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2366                                                          jz      irq1.140                                        ;yes, skip ahead
  2367                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2368                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2369                                                          mov     ah,al                                           ;copy scan code 0
  2370                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2371                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2372                                                          je      irq1.30                                         ;yes, set flag
  2373                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2374                                                          je      irq1.40                                         ;yes, reset flag
  2375                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2376                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2377                                                          je      irq1.30                                         ;yes, set flag
  2378                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2379                                                          je      irq1.40                                         ;yes, reset flag
  2380                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2381                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2382                                                          je      irq1.30                                         ;yes, set flag
  2383                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2384                                                          je      irq1.40                                         ;yes, reset flag
  2385                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2386                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2387                                                          je      irq1.30                                         ;yes, set flag
  2388                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2389                                                          je      irq1.40                                         ;yes, reset flag
  2390                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2391                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2392                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2393                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2394                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2395                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2396                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2397                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2398                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2399                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2400                                                          jne     irq1.70                                         ;no, skip ahead
  2401                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2402                                                          jz      irq1.140                                        ;yes, skip ahead
  2403                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2404                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2405                                                          mov     ah,al                                           ;copy scan code 1
  2406                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2407                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2408                                                          je      irq1.30                                         ;yes, set flag
  2409                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2410                                                          je      irq1.40                                         ;yes, reset flag
  2411                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2412                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2413                                                          je      irq1.30                                         ;yes, set flag
  2414                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2415                                                          je      irq1.40                                         ;yes, reset flag
  2416                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2417                                                          je      irq1.80                                         ;yes, skip ahead
  2418                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2419                                                          je      irq1.80                                         ;yes, skip ahead
  2420                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2421                                                          je      irq1.10                                         ;yes, continue
  2422                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2423                                                          jne     irq1.20                                         ;no, skip ahead
  2424                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2425                                                          jz      irq1.140                                        ;yes, skip ahead
  2426                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2427                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2428                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2429                                                          jz      irq1.140                                        ;yes, skip ahead
  2430                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2431                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2432                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2433                                  irq1.30                 or      bl,al                                           ;set shift flag
  2434                                                          jmp     irq1.60                                         ;skip ahead
  2435                                  irq1.40                 not     al                                              ;convert flag to mask
  2436                                                          and     bl,al                                           ;reset shift flag
  2437                                                          jmp     irq1.60                                         ;skip ahead
  2438                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2439                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2440                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2441                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2442                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2443                                                          jmp     irq1.150                                        ;finish keyboard handling
  2444                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2445                                                          jne     irq1.80                                         ;no continue
  2446                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2447                                                          jz      irq1.140                                        ;yes, skip ahead
  2448                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2449                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2450                                                          mov     ah,al                                           ;copy scan code 1
  2451                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2452                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2453                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2454                                                          jz      irq1.140                                        ;yes, skip ahead
  2455                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2456                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2457                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2458                                                          jz      irq1.140                                        ;yes, skip ahead
  2459                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2460                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2461                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2462                                                          jz      irq1.140                                        ;yes, skip ahead
  2463                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2464                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2465                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2466                                                          jz      irq1.140                                        ;yes, skip ahead
  2467                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2468                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2469                                                          jmp     irq1.150                                        ;continue
  2470                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2471                                                          test    ah,EKEYBUP                                      ;release code?
  2472                                                          jnz     irq1.130                                        ;yes, skip ahead
  2473                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2474                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2475                                                          jz      irq1.90                                         ;no, skip ahead
  2476                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2477                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2478                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2479                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2480                                                          jz      irq1.100                                        ;no skip ahead
  2481                                                          mov     cl,al                                           ;copy ASCII code
  2482                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2483                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2484                                                          jb      irq1.100                                        ;yes, skip ahead
  2485                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2486                                                          ja      irq1.100                                        ;yes, skip ahead
  2487                                                          xor     al,EASCIICASE                                   ;switch case
  2488                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2489                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2490                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2491                                                          jz      irq1.120                                        ;no, skip ahead
  2492                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2493                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2494                                                          or      edx,eax                                         ;msg id and codes
  2495                                                          xor     ecx,ecx                                         ;null param
  2496                                                          push    eax                                             ;save codes
  2497                                                          call    PutMessage                                      ;put message to console
  2498                                                          pop     eax                                             ;restore codes
  2499                                                          test    al,al                                           ;ASCII translation?
  2500                                                          jz      irq1.130                                        ;no, skip ahead
  2501                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2502                                                          and     eax,0FFFFh                                      ;clear high-order word
  2503                                                          or      edx,eax                                         ;msg id and codes
  2504                                                          xor     ecx,ecx                                         ;null param
  2505                                                          call    PutMessage                                      ;put message to console
  2506                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2507                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2508                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2509                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2510                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2511                                                          pop     ds                                              ;restore non-volatile regs
  2512                                                          pop     esi                                             ;
  2513                                                          pop     ecx                                             ;
  2514                                                          pop     ebx                                             ;
  2515                                                          pop     eax                                             ;
  2516                                                          iretd                                                   ;return
  2517                                  ;-----------------------------------------------------------------------------------------------------------------------
  2518                                  ;       Scan-Code to ASCII Translation Tables
  2519                                  ;-----------------------------------------------------------------------------------------------------------------------
  2520                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2521                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2522                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2523                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2524                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2525                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2526                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2527                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2528                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2529                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2530                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2531                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2532                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2533                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2534                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2535                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2536                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2537                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2538                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2539                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2540                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2541                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2542                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2543                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2544                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2545                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2546                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2547                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2548                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2549                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2550                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2551                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2552                                  ;-----------------------------------------------------------------------------------------------------------------------
  2553                                  ;
  2554                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2555                                  ;
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557                                                          menter  iochannel                                       ;secondary 8259A cascade
  2558                                                          push    eax                                             ;save modified regs
  2559                                                          jmp     hwint                                           ;end interrupt and return
  2560                                  ;-----------------------------------------------------------------------------------------------------------------------
  2561                                  ;
  2562                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2563                                  ;
  2564                                  ;-----------------------------------------------------------------------------------------------------------------------
  2565                                                          menter  com2                                            ;serial port 2 interrupt
  2566                                                          push    eax                                             ;save modified regs
  2567                                                          jmp     hwint                                           ;end interrupt and return
  2568                                  ;-----------------------------------------------------------------------------------------------------------------------
  2569                                  ;
  2570                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2571                                  ;
  2572                                  ;-----------------------------------------------------------------------------------------------------------------------
  2573                                                          menter  com1                                            ;serial port 1 interrupt
  2574                                                          push    eax                                             ;save modified regs
  2575                                                          jmp     hwint                                           ;end interrupt and return
  2576                                  ;-----------------------------------------------------------------------------------------------------------------------
  2577                                  ;
  2578                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2579                                  ;
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2582                                                          push    eax                                             ;save modified regs
  2583                                                          jmp     hwint                                           ;end interrupt and return
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                  ;
  2586                                  ;       IRQ6    Diskette Hardware Interrupt
  2587                                  ;
  2588                                  ;-----------------------------------------------------------------------------------------------------------------------
  2589                                                          menter  diskette                                        ;floppy disk interrupt
  2590                                                          push    eax                                             ;save non-volatile regs
  2591                                                          push    ds                                              ;
  2592                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2593                                                          pop     ds                                              ;... into DS register
  2594                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2595                                                          or      al,10000000b                                    ;set IRQ flag
  2596                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2597                                                          pop     ds                                              ;restore non-volatile regs
  2598                                                          jmp     hwint                                           ;end primary PIC interrupt
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                  ;
  2601                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2602                                  ;
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2605                                                          push    eax                                             ;save modified regs
  2606                                                          jmp     hwint                                           ;end interrupt and return
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                  ;
  2609                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2610                                  ;
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                                          menter  rtclock                                         ;real-time clock interrupt
  2613                                                          push    eax                                             ;save modified regs
  2614                                                          jmp     hwwint                                          ;end interrupt and return
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                  ;
  2617                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2618                                  ;
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2621                                                          push    eax                                             ;save modified regs
  2622                                                          jmp     hwwint                                          ;end interrupt and return
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                  ;
  2625                                  ;       IRQ10   Reserved Hardware Interrupt
  2626                                  ;
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                                          menter  irq10                                           ;reserved
  2629                                                          push    eax                                             ;save modified regs
  2630                                                          jmp     hwwint                                          ;end interrupt and return
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                  ;
  2633                                  ;       IRQ11   Reserved Hardware Interrupt
  2634                                  ;
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                                          menter  irq11                                           ;reserved
  2637                                                          push    eax                                             ;save modified regs
  2638                                                          jmp     hwwint                                          ;end interrupt and return
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                  ;
  2641                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2642                                  ;
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2645                                                          push    eax                                             ;save modified regs
  2646                                                          jmp     hwwint                                          ;end interrupt and return
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                  ;
  2649                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2650                                  ;
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                                          menter  coprocessor                                     ;coprocessor interrupt
  2653                                                          push    eax                                             ;save modified regs
  2654                                                          jmp     hwwint                                          ;end interrupt and return
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                  ;
  2657                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2658                                  ;
  2659                                  ;-----------------------------------------------------------------------------------------------------------------------
  2660                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2661                                                          push    eax                                             ;save modified regs
  2662                                                          jmp     hwwint                                          ;end interrupt and return
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                  ;
  2665                                  ;       IRQ15   Reserved Hardware Interrupt
  2666                                  ;
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                                          menter  irq15                                           ;reserved
  2669                                                          push    eax                                             ;save modified regs
  2670                                                          jmp     hwwint                                          ;end interrupt and return
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                  ;
  2673                                  ;       Exit from hardware interrupt
  2674                                  ;
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2677                                                          jmp     hwint90                                         ;skip ahead
  2678                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2679                                  hwint90                 pop     eax                                             ;restore modified regs
  2680                                                          iretd                                                   ;return from interrupt
  2681                                  ;-----------------------------------------------------------------------------------------------------------------------
  2682                                  ;
  2683                                  ;       INT 30h Operating System Software Service Interrupt
  2684                                  ;
  2685                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2686                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2687                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2688                                  ;       the entry address of the specific function from a table.
  2689                                  ;
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                                          menter  svc
  2692                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2693                                                          jae     svc90                                           ;yes, skip ahead
  2694                                                          movzx   eax,al                                          ;function
  2695                                                          shl     eax,2                                           ;offset into table
  2696                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2697                                  svc90                   iretd                                                   ;return from interrupt
  2698                                  ;-----------------------------------------------------------------------------------------------------------------------
  2699                                  ;
  2700                                  ;       Service Request Table
  2701                                  ;
  2702                                  ;
  2703                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2704                                  ;
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2707                                                          tsvce   CompareMemory                                   ;compare memory
  2708                                                          tsvce   GetConsoleString                                ;get string input
  2709                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2710                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2711                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2712                                                          tsvce   UpperCaseString                                 ;upper-case string
  2713                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2714                                  ;-----------------------------------------------------------------------------------------------------------------------
  2715                                  ;
  2716                                  ;       Service Request Macros
  2717                                  ;
  2718                                  ;       These macros provide positional parameterization of service request calls.
  2719                                  ;
  2720                                  ;-----------------------------------------------------------------------------------------------------------------------
  2721                                  %macro                  clearConsoleScreen 0
  2722                                                          mov     al,eClearConsoleScreen                          ;function code
  2723                                                          int     _svc                                            ;invoke OS service
  2724                                  %endmacro
  2725                                  %macro                  compareMemory 0
  2726                                                          mov     al,eCompareMemory                               ;function code
  2727                                                          int     _svc                                            ;invoke OS service
  2728                                  %endmacro
  2729                                  %macro                  getConsoleString 4
  2730                                                          mov     edx,%1                                          ;buffer address
  2731                                                          mov     ecx,%2                                          ;max characters
  2732                                                          mov     bh,%3                                           ;echo indicator
  2733                                                          mov     bl,%4                                           ;terminator
  2734                                                          mov     al,eGetConsoleString                            ;function code
  2735                                                          int     _svc                                            ;invoke OS service
  2736                                  %endmacro
  2737                                  %macro                  placeCursor 0
  2738                                                          mov     al,ePlaceCursor                                 ;function code
  2739                                                          int     _svc                                            ;invoke OS service
  2740                                  %endmacro
  2741                                  %macro                  putConsoleString 1
  2742                                                          mov     edx,%1                                          ;string address
  2743                                                          mov     al,ePutConsoleString                            ;function code
  2744                                                          int     _svc                                            ;invoke OS service
  2745                                  %endmacro
  2746                                  %macro                  resetSystem 0
  2747                                                          mov     al,eResetSystem                                 ;function code
  2748                                                          int     _svc                                            ;invoke OS service
  2749                                  %endmacro
  2750                                  %macro                  upperCaseString 0
  2751                                                          mov     al,eUpperCaseString                             ;function code
  2752                                                          int     _svc                                            ;invoke OS service
  2753                                  %endmacro
  2754                                  ;=======================================================================================================================
  2755                                  ;
  2756                                  ;       Kernel Function Library
  2757                                  ;
  2758                                  ;=======================================================================================================================
  2759                                  ;=======================================================================================================================
  2760                                  ;
  2761                                  ;       String Helper Routines
  2762                                  ;
  2763                                  ;       CompareMemory
  2764                                  ;       UpperCaseString
  2765                                  ;
  2766                                  ;=======================================================================================================================
  2767                                  ;-----------------------------------------------------------------------------------------------------------------------
  2768                                  ;
  2769                                  ;       Routine:        CompareMemory
  2770                                  ;
  2771                                  ;       Description:    This routine compares two byte arrays.
  2772                                  ;
  2773                                  ;       In:             DS:EDX  first source address
  2774                                  ;                       DS:EBX  second source address
  2775                                  ;                       ECX     comparison length
  2776                                  ;
  2777                                  ;       Out:            EDX     first source address
  2778                                  ;                       EBX     second source address
  2779                                  ;                       ECX     0       array 1 = array 2
  2780                                  ;                               <0      array 1 < array 2
  2781                                  ;                               >0      array 1 > array 2
  2782                                  ;
  2783                                  ;-----------------------------------------------------------------------------------------------------------------------
  2784                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2785                                                          push    edi                                             ;
  2786                                                          push    es                                              ;
  2787                                                          push    ds                                              ;copy DS
  2788                                                          pop     es                                              ;... to ES
  2789                                                          mov     esi,edx                                         ;first source address
  2790                                                          mov     edi,ebx                                         ;second source address
  2791                                                          cld                                                     ;forward strings
  2792                                                          rep     cmpsb                                           ;compare bytes
  2793                                                          mov     al,0                                            ;default result
  2794                                                          jz      .10                                             ;branch if arrays equal
  2795                                                          mov     al,1                                            ;positive result
  2796                                                          jnc     .10                                             ;branch if target > source
  2797                                                          mov     al,-1                                           ;negative result
  2798                                  .10                     movsx   ecx,al                                          ;extend sign
  2799                                                          pop     es                                              ;restore non-volatile regs
  2800                                                          pop     edi                                             ;
  2801                                                          pop     esi                                             ;
  2802                                                          ret                                                     ;return
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  ;
  2805                                  ;       Routine:        UpperCaseString
  2806                                  ;
  2807                                  ;       Description:    This routine places all characters in the given string to upper case.
  2808                                  ;
  2809                                  ;       In:             DS:EDX  string address
  2810                                  ;
  2811                                  ;       Out:            EDX     string address
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2815                                                          mov     esi,edx                                         ;string address
  2816                                                          cld                                                     ;forward strings
  2817                                  .10                     lodsb                                                   ;string character
  2818                                                          test    al,al                                           ;null?
  2819                                                          jz      .20                                             ;yes, skip ahead
  2820                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2821                                                          jb      .10                                             ;no, continue
  2822                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2823                                                          ja      .10                                             ;no, continue
  2824                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2825                                                          mov     [esi-1],al                                      ;upper character
  2826                                                          jmp     .10                                             ;continue
  2827                                  .20                     pop     esi                                             ;restore non-volatile regs
  2828                                                          ret                                                     ;return
  2829                                  ;=======================================================================================================================
  2830                                  ;
  2831                                  ;       Console Helper Routines
  2832                                  ;
  2833                                  ;       FirstConsoleColumn
  2834                                  ;       GetConsoleChar
  2835                                  ;       GetConsoleString
  2836                                  ;       NextConsoleColumn
  2837                                  ;       NextConsoleRow
  2838                                  ;       PreviousConsoleColumn
  2839                                  ;       PutConsoleChar
  2840                                  ;       PutConsoleHexByte
  2841                                  ;       PutConsoleHexDword
  2842                                  ;       PutConsoleHexWord
  2843                                  ;       PutConsoleOIAChar
  2844                                  ;       PutConsoleOIAShift
  2845                                  ;       PutConsoleString
  2846                                  ;       Yield
  2847                                  ;
  2848                                  ;=======================================================================================================================
  2849                                  ;-----------------------------------------------------------------------------------------------------------------------
  2850                                  ;
  2851                                  ;       Routine:        FirstConsoleColumn
  2852                                  ;
  2853                                  ;       Description:    This routine resets the console column to start of the row.
  2854                                  ;
  2855                                  ;       In:             DS      OS data selector
  2856                                  ;
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2859                                                          mov     [wbConsoleColumn],al                            ;save column
  2860                                                          ret                                                     ;return
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                  ;
  2863                                  ;       Routine:        GetConsoleChar
  2864                                  ;
  2865                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2866                                  ;
  2867                                  ;       Out:            AL      ASCII character code
  2868                                  ;                       AH      keyboard scan code
  2869                                  ;
  2870                                  ;-----------------------------------------------------------------------------------------------------------------------
  2871                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2872                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2873                                                          or      eax,eax                                         ;do we have a message?
  2874                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2875                                                          push    eax                                             ;save key codes
  2876                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2877                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2878                                                          pop     eax                                             ;restore key codes
  2879                                                          jne     GetConsoleChar                                  ;no, try again
  2880                                                          and     eax,0000ffffh                                   ;mask for key codes
  2881                                                          ret                                                     ;return
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;       Routine:        GetConsoleString
  2885                                  ;
  2886                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2887                                  ;
  2888                                  ;       In:             DS:EDX  target buffer address
  2889                                  ;                       ECX     maximum number of characters to accept
  2890                                  ;                       BH      echo to terminal
  2891                                  ;                       BL      terminating character
  2892                                  ;
  2893                                  ;-----------------------------------------------------------------------------------------------------------------------
  2894                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2895                                                          push    esi                                             ;
  2896                                                          push    edi                                             ;
  2897                                                          push    es                                              ;
  2898                                                          push    ds                                              ;load data segment selector ...
  2899                                                          pop     es                                              ;... into extra segment register
  2900                                                          mov     edi,edx                                         ;edi = target buffer
  2901                                                          push    ecx                                             ;save maximum characters
  2902                                                          xor     al,al                                           ;zero register
  2903                                                          cld                                                     ;forward strings
  2904                                                          rep     stosb                                           ;zero fill buffer
  2905                                                          pop     ecx                                             ;maximum characters
  2906                                                          mov     edi,edx                                         ;edi = target buffer
  2907                                                          mov     esi,edx                                         ;esi = target buffer
  2908                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2909                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2910                                                          cmp     al,bl                                           ;is this the terminator?
  2911                                                          je      .50                                             ;yes, exit
  2912                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2913                                                          jne     .30                                             ;no, skip ahead
  2914                                                          cmp     esi,edi                                         ;at start of buffer?
  2915                                                          je      .20                                             ;yes, get next character
  2916                                                          dec     edi                                             ;backup target pointer
  2917                                                          mov     byte [edi],0                                    ;zero previous character
  2918                                                          inc     ecx                                             ;increment remaining chars
  2919                                                          test    bh,1                                            ;echo to console?
  2920                                                          jz      .20                                             ;no, get next character
  2921                                                          call    PreviousConsoleColumn                           ;backup console position
  2922                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2923                                                          call    PutConsoleChar                                  ;write space to console
  2924                                                          call    PlaceCursor                                     ;position the cursor
  2925                                                          jmp     .20                                             ;get next character
  2926                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2927                                                          jb      .20                                             ;no, get another character
  2928                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2929                                                          ja      .20                                             ;no, get another character
  2930                                                          stosb                                                   ;store character in buffer
  2931                                                          test    bh,1                                            ;echo to console?
  2932                                                          jz      .40                                             ;no, skip ahead
  2933                                                          call    PutConsoleChar                                  ;write character to console
  2934                                                          call    NextConsoleColumn                               ;advance console position
  2935                                                          call    PlaceCursor                                     ;position the cursor
  2936                                  .40                     dec     ecx                                             ;decrement remaining chars
  2937                                                          jmp     .10                                             ;next
  2938                                  .50                     xor     al,al                                           ;null
  2939                                                          stosb                                                   ;terminate buffer
  2940                                                          pop     es                                              ;restore non-volatile regs
  2941                                                          pop     edi                                             ;
  2942                                                          pop     esi                                             ;
  2943                                                          pop     ecx                                             ;
  2944                                                          ret                                                     ;return
  2945                                  ;-----------------------------------------------------------------------------------------------------------------------
  2946                                  ;
  2947                                  ;       Routine:        NextConsoleColumn
  2948                                  ;
  2949                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2950                                  ;                       incremented if the end of the current row is reached.
  2951                                  ;
  2952                                  ;       In:             DS      OS data selector
  2953                                  ;
  2954                                  ;-----------------------------------------------------------------------------------------------------------------------
  2955                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2956                                                          inc     al                                              ;increment column
  2957                                                          mov     [wbConsoleColumn],al                            ;save column
  2958                                                          cmp     al,ECONCOLS                                     ;end of row?
  2959                                                          jb      .10                                             ;no, skip ahead
  2960                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2961                                                          call    NextConsoleRow                                  ;line feed to next row
  2962                                  .10                     ret                                                     ;return
  2963                                  ;-----------------------------------------------------------------------------------------------------------------------
  2964                                  ;
  2965                                  ;       Routine:        NextConsoleRow
  2966                                  ;
  2967                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2968                                  ;
  2969                                  ;       In:             DS      OS data selector
  2970                                  ;
  2971                                  ;-----------------------------------------------------------------------------------------------------------------------
  2972                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2973                                                          inc     al                                              ;increment row
  2974                                                          mov     [wbConsoleRow],al                               ;save row
  2975                                                          cmp     al,ECONROWS                                     ;end of screen?
  2976                                                          jb      .10                                             ;no, skip ahead
  2977                                                          call    ScrollConsoleRow                                ;scroll up one row
  2978                                                          mov     al,[wbConsoleRow]                               ;row
  2979                                                          dec     al                                              ;decrement row
  2980                                                          mov     [wbConsoleRow],al                               ;save row
  2981                                  .10                     ret                                                     ;return
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983                                  ;
  2984                                  ;       Routine:        PreviousConsoleColumn
  2985                                  ;
  2986                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2987                                  ;                       the column is set to the last position in the row and the row is decremented.
  2988                                  ;
  2989                                  ;       In:             DS      OS data selector
  2990                                  ;
  2991                                  ;-----------------------------------------------------------------------------------------------------------------------
  2992                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2993                                                          or      al,al                                           ;start of row?
  2994                                                          jnz     .10                                             ;no, skip ahead
  2995                                                          mov     ah,[wbConsoleRow]                               ;current row
  2996                                                          or      ah,ah                                           ;top of screen?
  2997                                                          jz      .20                                             ;yes, exit with no change
  2998                                                          dec     ah                                              ;decrement row
  2999                                                          mov     [wbConsoleRow],ah                               ;save row
  3000                                                          mov     al,ECONCOLS                                     ;set maximum column
  3001                                  .10                     dec     al                                              ;decrement column
  3002                                                          mov     [wbConsoleColumn],al                            ;save column
  3003                                  .20                     ret                                                     ;return
  3004                                  ;-----------------------------------------------------------------------------------------------------------------------
  3005                                  ;
  3006                                  ;       Routine:        PutConsoleChar
  3007                                  ;
  3008                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3009                                  ;
  3010                                  ;       In:             AL      ASCII character
  3011                                  ;                       DS      OS data selector
  3012                                  ;
  3013                                  ;-----------------------------------------------------------------------------------------------------------------------
  3014                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3015                                                          push    es                                              ;
  3016                                                          push    EGDTCGA                                         ;load CGA selector ...
  3017                                                          pop     es                                              ;... into extra segment reg
  3018                                                          mov     cl,[wbConsoleColumn]                            ;column
  3019                                                          mov     ch,[wbConsoleRow]                               ;row
  3020                                                          call    SetConsoleChar                                  ;put character at row, column
  3021                                                          pop     es                                              ;restore non-volatile regs
  3022                                                          pop     ecx                                             ;
  3023                                                          ret                                                     ;return
  3024                                  ;-----------------------------------------------------------------------------------------------------------------------
  3025                                  ;
  3026                                  ;       Routine:        PutConsoleHexByte
  3027                                  ;
  3028                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3029                                  ;
  3030                                  ;       In:             AL      byte value
  3031                                  ;                       CL      column
  3032                                  ;                       CH      row
  3033                                  ;                       DS      OS data selector
  3034                                  ;                       ES      CGA selector
  3035                                  ;
  3036                                  ;-----------------------------------------------------------------------------------------------------------------------
  3037                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3038                                                          mov     bl,al                                           ;save byte value
  3039                                                          shr     al,4                                            ;hi-order nybble
  3040                                                          or      al,030h                                         ;apply ASCII zone
  3041                                                          cmp     al,03ah                                         ;numeric?
  3042                                                          jb      .10                                             ;yes, skip ahead
  3043                                                          add     al,7                                            ;add ASCII offset for alpha
  3044                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3045                                                          mov     al,bl                                           ;byte value
  3046                                                          and     al,0fh                                          ;lo-order nybble
  3047                                                          or      al,30h                                          ;apply ASCII zone
  3048                                                          cmp     al,03ah                                         ;numeric?
  3049                                                          jb      .20                                             ;yes, skip ahead
  3050                                                          add     al,7                                            ;add ASCII offset for alpha
  3051                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3052                                                          pop     ebx                                             ;restore non-volatile regs
  3053                                                          ret                                                     ;return
  3054                                  ;-----------------------------------------------------------------------------------------------------------------------
  3055                                  ;
  3056                                  ;       Routine:        PutConsoleHexDword
  3057                                  ;
  3058                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3059                                  ;
  3060                                  ;       In:             EAX     value
  3061                                  ;                       CL      column
  3062                                  ;                       CH      row
  3063                                  ;                       DS      OS data selector
  3064                                  ;                       ES      CGA selector
  3065                                  ;
  3066                                  ;-----------------------------------------------------------------------------------------------------------------------
  3067                                  PutConsoleHexDword      push    eax
  3068                                                          shr     eax,16
  3069                                                          call    PutConsoleHexWord
  3070                                                          pop     eax
  3071                                                          call    PutConsoleHexWord
  3072                                                          ret
  3073                                  ;-----------------------------------------------------------------------------------------------------------------------
  3074                                  ;
  3075                                  ;       Routine:        PutConsoleHexWord
  3076                                  ;
  3077                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3078                                  ;
  3079                                  ;       In:             EAX     value
  3080                                  ;                       CL      column
  3081                                  ;                       CH      row
  3082                                  ;                       DS      OS data selector
  3083                                  ;                       ES      CGA selector
  3084                                  ;
  3085                                  ;-----------------------------------------------------------------------------------------------------------------------
  3086                                  PutConsoleHexWord       push    eax
  3087                                                          shr     eax,8
  3088                                                          call    PutConsoleHexByte
  3089                                                          pop     eax
  3090                                                          call    PutConsoleHexByte
  3091                                                          ret
  3092                                  ;-----------------------------------------------------------------------------------------------------------------------
  3093                                  ;
  3094                                  ;       Routine:        PutConsoleOIAChar
  3095                                  ;
  3096                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3097                                  ;
  3098                                  ;       In:             DS      OS data selector
  3099                                  ;
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3102                                                          push    ecx                                             ;
  3103                                                          push    esi                                             ;
  3104                                                          push    ds                                              ;
  3105                                                          push    es                                              ;
  3106                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3107                                                          pop     ds                                              ;... into data segment register
  3108                                                          push    EGDTCGA                                         ;load CGA selector ...
  3109                                                          pop     es                                              ;... into extra segment register
  3110                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3111                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3112                                                          mov     bl,0                                            ;starting column
  3113                                                          mov     ecx,6                                           ;maximum scan codes
  3114                                  .10                     push    ecx                                             ;save remaining count
  3115                                                          mov     ecx,ebx                                         ;row, column
  3116                                                          lodsb                                                   ;read scan code
  3117                                                          or      al,al                                           ;scan code present?
  3118                                                          jz      .20                                             ;no, skip ahead
  3119                                                          call    PutConsoleHexByte                               ;display scan code
  3120                                                          jmp     .30                                             ;continue
  3121                                  .20                     mov     al,' '                                          ;ASCII space
  3122                                                          call    SetConsoleChar                                  ;display space
  3123                                                          mov     al,' '                                          ;ASCII space
  3124                                                          call    SetConsoleChar                                  ;display space
  3125                                  .30                     add     bl,2                                            ;next column (+2)
  3126                                                          pop     ecx                                             ;restore remaining
  3127                                                          loop    .10                                             ;next code
  3128                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3129                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3130                                                          jb      .40                                             ;no, skip ahead
  3131                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3132                                                          ja      .40                                             ;no, skip ahead
  3133                                                          mov     ch,bh                                           ;OIA row
  3134                                                          mov     cl,40                                           ;character display column
  3135                                                          call    SetConsoleChar                                  ;display ASCII character
  3136                                  .40                     pop     es                                              ;restore non-volatile regs
  3137                                                          pop     ds                                              ;
  3138                                                          pop     esi                                             ;
  3139                                                          pop     ecx                                             ;
  3140                                                          pop     ebx                                             ;
  3141                                                          ret                                                     ;return
  3142                                  ;-----------------------------------------------------------------------------------------------------------------------
  3143                                  ;
  3144                                  ;       Routine:        PutConsoleOIAShift
  3145                                  ;
  3146                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3147                                  ;
  3148                                  ;       In:             BL      shift flags
  3149                                  ;                       BH      lock flags
  3150                                  ;                       DS      OS data selector
  3151                                  ;
  3152                                  ;-----------------------------------------------------------------------------------------------------------------------
  3153                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3154                                                          push    es                                              ;
  3155                                                          push    EGDTCGA                                         ;load CGA selector ...
  3156                                                          pop     es                                              ;... into ES register
  3157                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3158                                                          mov     al,EASCIISPACE                                  ;space is default character
  3159                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3160                                                          jz      .10                                             ;no, skip ahead
  3161                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3162                                  .10                     mov     cl,14                                           ;indicator column
  3163                                                          call    SetConsoleChar                                  ;display ASCII character
  3164                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3165                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3166                                                          jz      .20                                             ;no, skip ahead
  3167                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3168                                  .20                     mov     cl,64                                           ;indicator column
  3169                                                          call    SetConsoleChar                                  ;display ASCII character
  3170                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3171                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3172                                                          jz      .30                                             ;no, skip ahead
  3173                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3174                                  .30                     mov     cl,15                                           ;indicator column
  3175                                                          call    SetConsoleChar                                  ;display ASCII character
  3176                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3177                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3178                                                          jz      .40                                             ;no, skip ahead
  3179                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3180                                  .40                     mov     cl,63                                           ;indicator column
  3181                                                          call    SetConsoleChar                                  ;display ASCII character
  3182                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3183                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3184                                                          jz      .50                                             ;no, skip ahead
  3185                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3186                                  .50                     mov     cl,16                                           ;indicator column
  3187                                                          call    SetConsoleChar                                  ;display ASCII character
  3188                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3189                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3190                                                          jz      .60                                             ;no, skip ahead
  3191                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3192                                  .60                     mov     cl,62                                           ;indicator column
  3193                                                          call    SetConsoleChar                                  ;display ASCII character
  3194                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3195                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3196                                                          jz      .70                                             ;no, skip ahead
  3197                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3198                                  .70                     mov     cl,78                                           ;indicator column
  3199                                                          call    SetConsoleChar                                  ;display ASCII character
  3200                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3201                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3202                                                          jz      .80                                             ;no, skip ahead
  3203                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3204                                  .80                     mov     cl,77                                           ;indicator column
  3205                                                          call    SetConsoleChar                                  ;display ASCII character
  3206                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3207                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3208                                                          jz      .90                                             ;no, skip ahead
  3209                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3210                                  .90                     mov     cl,76                                           ;indicator column
  3211                                                          call    SetConsoleChar                                  ;display ASCII character
  3212                                                          pop     es                                              ;restore non-volatile regs
  3213                                                          pop     ecx                                             ;
  3214                                                          ret                                                     ;return
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216                                  ;
  3217                                  ;       Routine:        PutConsoleString
  3218                                  ;
  3219                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3220                                  ;                       console position as needed.
  3221                                  ;
  3222                                  ;       In:             EDX     source address
  3223                                  ;                       DS      OS data selector
  3224                                  ;
  3225                                  ;-----------------------------------------------------------------------------------------------------------------------
  3226                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3227                                                          mov     esi,edx                                         ;source address
  3228                                                          cld                                                     ;forward strings
  3229                                  .10                     lodsb                                                   ;ASCII character
  3230                                                          or      al,al                                           ;end of string?
  3231                                                          jz      .40                                             ;yes, skip ahead
  3232                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3233                                                          jne     .20                                             ;no, skip ahead
  3234                                                          call    FirstConsoleColumn                              ;move to start of row
  3235                                                          jmp     .10                                             ;next character
  3236                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3237                                                          jne     .30                                             ;no, skip ahead
  3238                                                          call    NextConsoleRow                                  ;move to next row
  3239                                                          jmp     .10                                             ;next character
  3240                                  .30                     call    PutConsoleChar                                  ;output character to console
  3241                                                          call    NextConsoleColumn                               ;advance to next column
  3242                                                          jmp     .10                                             ;next character
  3243                                  .40                     pop     esi                                             ;restore non-volatile regs
  3244                                                          ret                                                     ;return
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  ;
  3247                                  ;       Routine:        Yield
  3248                                  ;
  3249                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3250                                  ;
  3251                                  ;-----------------------------------------------------------------------------------------------------------------------
  3252                                  Yield                   sti                                                     ;enable maskagle interrupts
  3253                                                          hlt                                                     ;halt until external interrupt
  3254                                                          ret                                                     ;return
  3255                                  ;=======================================================================================================================
  3256                                  ;
  3257                                  ;       Message Queue Helper Routines
  3258                                  ;
  3259                                  ;       GetMessage
  3260                                  ;       PutMessage
  3261                                  ;
  3262                                  ;=======================================================================================================================
  3263                                  ;-----------------------------------------------------------------------------------------------------------------------
  3264                                  ;
  3265                                  ;       Routine:        GetMessage
  3266                                  ;
  3267                                  ;       Description:    This routine reads and removes a message from the message queue.
  3268                                  ;
  3269                                  ;       Out:            EAX     lo-order message data
  3270                                  ;                       EDX     hi-order message data
  3271                                  ;
  3272                                  ;                       CY      0 = message read
  3273                                  ;                               1 = no message to read
  3274                                  ;
  3275                                  ;-----------------------------------------------------------------------------------------------------------------------
  3276                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3277                                                          push    ecx                                             ;
  3278                                                          push    ds                                              ;
  3279                                                          push    ELDTMQ                                          ;load message queue selector ...
  3280                                                          pop     ds                                              ;... into data segment register
  3281                                                          mov     ebx,[MQHead]                                    ;head ptr
  3282                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3283                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3284                                                          or      eax,edx                                         ;is queue empty?
  3285                                                          stc                                                     ;assume queue is emtpy
  3286                                                          jz      .20                                             ;yes, skip ahead
  3287                                                          xor     ecx,ecx                                         ;store zero
  3288                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3289                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3290                                                          add     ebx,8                                           ;next queue element
  3291                                                          and     ebx,03fch                                       ;at end of queue?
  3292                                                          jnz     .10                                             ;no, skip ahead
  3293                                                          mov     bl,8                                            ;reset to 1st entry
  3294                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3295                                                          clc                                                     ;indicate message read
  3296                                  .20                     pop     ds                                              ;restore non-volatile regs
  3297                                                          pop     ecx                                             ;
  3298                                                          pop     ebx                                             ;
  3299                                                          ret                                                     ;return
  3300                                  ;-----------------------------------------------------------------------------------------------------------------------
  3301                                  ;
  3302                                  ;       Routine:        PutMessage
  3303                                  ;
  3304                                  ;       Description:    This routine adda a message to the message queue.
  3305                                  ;
  3306                                  ;       In:             ECX     hi-order data word
  3307                                  ;                       EDX     lo-order data word
  3308                                  ;
  3309                                  ;       Out:            CY      0 = success
  3310                                  ;                               1 = fail: queue is full
  3311                                  ;
  3312                                  ;-----------------------------------------------------------------------------------------------------------------------
  3313                                  PutMessage              push    ds                                              ;save non-volatile regs
  3314                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3315                                                          pop     ds                                              ;... into data segment register
  3316                                                          mov     eax,[MQTail]                                    ;tail ptr
  3317                                                          cmp     dword [eax],0                                   ;is queue full?
  3318                                                          stc                                                     ;assume failure
  3319                                                          jne     .20                                             ;yes, cannot store
  3320                                                          mov     [eax],edx                                       ;store lo-order data
  3321                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3322                                                          add     eax,8                                           ;next queue element adr
  3323                                                          and     eax,03fch                                       ;at end of queue?
  3324                                                          jnz     .10                                             ;no, skip ahead
  3325                                                          mov     al,8                                            ;reset to top of queue
  3326                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3327                                                          clc                                                     ;indicate success
  3328                                  .20                     pop     ds                                              ;restore non-volatile regs
  3329                                                          ret                                                     ;return
  3330                                  ;=======================================================================================================================
  3331                                  ;
  3332                                  ;       Memory-Mapped Video Routines
  3333                                  ;
  3334                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3335                                  ;
  3336                                  ;       ClearConsoleScreen
  3337                                  ;       ScrollConsoleRow
  3338                                  ;       SetConsoleChar
  3339                                  ;       SetConsoleString
  3340                                  ;
  3341                                  ;=======================================================================================================================
  3342                                  ;-----------------------------------------------------------------------------------------------------------------------
  3343                                  ;
  3344                                  ;       Routine:        ClearConsoleScreen
  3345                                  ;
  3346                                  ;       Description:    This routine clears the console (CGA) screen.
  3347                                  ;
  3348                                  ;-----------------------------------------------------------------------------------------------------------------------
  3349                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3350                                                          push    edi                                             ;
  3351                                                          push    ds                                              ;
  3352                                                          push    es                                              ;
  3353                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  3354                                                          pop     ds                                              ;... into DS register
  3355                                                          push    EGDTCGA                                         ;load CGA selector ...
  3356                                                          pop     es                                              ;... into ES register
  3357                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  3358                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3359                                                          xor     edi,edi                                         ;target offset
  3360                                                          cld                                                     ;forward strings
  3361                                                          rep     stosd                                           ;reset screen body
  3362                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3363                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3364                                                          rep     stosd                                           ;reset OIA line
  3365                                                          xor     al,al                                           ;zero register
  3366                                                          mov     [wbConsoleRow],al                               ;reset console row
  3367                                                          mov     [wbConsoleColumn],al                            ;reset console column
  3368                                                          call    PlaceCursor                                     ;place cursor at current position
  3369                                                          pop     es                                              ;restore non-volatile regs
  3370                                                          pop     ds                                              ;
  3371                                                          pop     edi                                             ;
  3372                                                          pop     ecx                                             ;
  3373                                                          ret                                                     ;return
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Routine:        ScrollConsoleRow
  3377                                  ;
  3378                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3379                                  ;
  3380                                  ;-----------------------------------------------------------------------------------------------------------------------
  3381                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3382                                                          push    esi                                             ;
  3383                                                          push    edi                                             ;
  3384                                                          push    ds                                              ;
  3385                                                          push    es                                              ;
  3386                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3387                                                          pop     ds                                              ;... into DS
  3388                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3389                                                          pop     es                                              ;... into ES
  3390                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3391                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3392                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3393                                                          cld                                                     ;forward strings
  3394                                                          rep     movsd                                           ;move 24 lines up
  3395                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3396                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3397                                                          rep     stosd                                           ;clear bottom row
  3398                                                          pop     es                                              ;restore non-volatile regs
  3399                                                          pop     ds                                              ;
  3400                                                          pop     edi                                             ;
  3401                                                          pop     esi                                             ;
  3402                                                          pop     ecx                                             ;
  3403                                                          ret                                                     ;return
  3404                                  ;-----------------------------------------------------------------------------------------------------------------------
  3405                                  ;
  3406                                  ;       Routine:        SetConsoleChar
  3407                                  ;
  3408                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3409                                  ;
  3410                                  ;       In:             AL      ASCII character
  3411                                  ;                       CL      column
  3412                                  ;                       CH      row
  3413                                  ;                       ES      CGA selector
  3414                                  ;
  3415                                  ;       Out:            EAX     last target address written (ES:)
  3416                                  ;                       CL      column + 1
  3417                                  ;
  3418                                  ;-----------------------------------------------------------------------------------------------------------------------
  3419                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3420                                                          movzx   eax,ch                                          ;row
  3421                                                          mov     ah,ECONCOLS                                     ;cols/row
  3422                                                          mul     ah                                              ;row * cols/row
  3423                                                          add     al,cl                                           ;add column
  3424                                                          adc     ah,0                                            ;handle carry
  3425                                                          shl     eax,1                                           ;screen offset
  3426                                                          mov     [es:eax],dl                                     ;store character
  3427                                                          inc     cl                                              ;next column
  3428                                                          ret                                                     ;return
  3429                                  ;-----------------------------------------------------------------------------------------------------------------------
  3430                                  ;
  3431                                  ;       Routine:        SetConsoleString
  3432                                  ;
  3433                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3434                                  ;
  3435                                  ;       In:             ESI     source offset (DS:)
  3436                                  ;                       CL      column
  3437                                  ;                       CH      row
  3438                                  ;                       ES      CGA selector
  3439                                  ;
  3440                                  ;-----------------------------------------------------------------------------------------------------------------------
  3441                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3442                                                          cld                                                     ;forward strings
  3443                                  .10                     lodsb                                                   ;next ASCII character
  3444                                                          test    al,al                                           ;end of string?
  3445                                                          jz      .20                                             ;yes, branch
  3446                                                          call    SetConsoleChar                                  ;store character
  3447                                                          jmp     .10                                             ;continue
  3448                                  .20                     pop     esi                                             ;restore non-volatile regs
  3449                                                          ret                                                     ;return
  3450                                  ;=======================================================================================================================
  3451                                  ;
  3452                                  ;       Input/Output Routines
  3453                                  ;
  3454                                  ;       These routines read and/or write directly to ports.
  3455                                  ;
  3456                                  ;       PlaceCursor
  3457                                  ;       PutPrimaryEndOfInt
  3458                                  ;       PutSecondaryEndOfInt
  3459                                  ;       ResetSystem
  3460                                  ;       SetKeyboardLamps
  3461                                  ;       WaitForKeyInBuffer
  3462                                  ;       WaitForKeyOutBuffer
  3463                                  ;
  3464                                  ;=======================================================================================================================
  3465                                  ;-----------------------------------------------------------------------------------------------------------------------
  3466                                  ;
  3467                                  ;       Routine:        PlaceCursor
  3468                                  ;
  3469                                  ;       Description:    This routine positions the cursor on the console.
  3470                                  ;
  3471                                  ;       In:             DS      OS data selector
  3472                                  ;
  3473                                  ;-----------------------------------------------------------------------------------------------------------------------
  3474                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3475                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3476                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3477                                                          mul     ah                                              ;row offset
  3478                                                          add     al,[wbConsoleColumn]                            ;add column
  3479                                                          adc     ah,0                                            ;add overflow
  3480                                                          mov     ecx,eax                                         ;screen offset
  3481                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3482                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3483                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3484                                                          out     dx,al                                           ;select register
  3485                                                          inc     edx                                             ;data port
  3486                                                          mov     al,ch                                           ;hi-order cursor loc
  3487                                                          out     dx,al                                           ;store hi-order loc
  3488                                                          dec     edx                                             ;register select port
  3489                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3490                                                          out     dx,al                                           ;select register
  3491                                                          inc     edx                                             ;data port
  3492                                                          mov     al,cl                                           ;lo-order cursor loc
  3493                                                          out     dx,al                                           ;store lo-order loc
  3494                                                          pop     ecx                                             ;restore non-volatile regs
  3495                                                          ret                                                     ;return
  3496                                  ;-----------------------------------------------------------------------------------------------------------------------
  3497                                  ;
  3498                                  ;       Routine:        PutPrimaryEndOfInt
  3499                                  ;
  3500                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3501                                  ;
  3502                                  ;-----------------------------------------------------------------------------------------------------------------------
  3503                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3504                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3505                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3506                                                          ret                                                     ;return
  3507                                  ;-----------------------------------------------------------------------------------------------------------------------
  3508                                  ;
  3509                                  ;       Routine:        PutSecondaryEndOfInt
  3510                                  ;
  3511                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3512                                  ;
  3513                                  ;-----------------------------------------------------------------------------------------------------------------------
  3514                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3515                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3516                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3517                                                          ret                                                     ;return
  3518                                  ;-----------------------------------------------------------------------------------------------------------------------
  3519                                  ;
  3520                                  ;       Routine:        ResetSystem
  3521                                  ;
  3522                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3523                                  ;
  3524                                  ;       Out:            N/A     This routine does not return.
  3525                                  ;
  3526                                  ;-----------------------------------------------------------------------------------------------------------------------
  3527                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3528                                                          loop    $                                               ;clear interrupts
  3529                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3530                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3531                                  .10                     sti                                                     ;enable maskable interrupts
  3532                                                          hlt                                                     ;halt until interrupt
  3533                                                          jmp     .10                                             ;repeat until reset kicks in
  3534                                  ;-----------------------------------------------------------------------------------------------------------------------
  3535                                  ;
  3536                                  ;       Routine:        SetKeyboardLamps
  3537                                  ;
  3538                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3539                                  ;
  3540                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3541                                  ;
  3542                                  ;-----------------------------------------------------------------------------------------------------------------------
  3543                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3544                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3545                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3546                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3547                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3548                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3549                                                          mov     al,bh                                           ;set/reset lamps value
  3550                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3551                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3552                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3553                                                          ret                                                     ;return
  3554                                  ;-----------------------------------------------------------------------------------------------------------------------
  3555                                  ;
  3556                                  ;       Routine:        WaitForKeyInBuffer
  3557                                  ;
  3558                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3559                                  ;
  3560                                  ;       Out:            ZF      1 = Input buffer ready
  3561                                  ;                               0 = Input buffer not ready after timeout
  3562                                  ;
  3563                                  ;-----------------------------------------------------------------------------------------------------------------------
  3564                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3565                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3566                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3567                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3568                                                          loopnz  .10                                             ;yes, repeat till timeout
  3569                                                          pop     ecx                                             ;restore non-volatile regs
  3570                                                          ret                                                     ;return
  3571                                  ;-----------------------------------------------------------------------------------------------------------------------
  3572                                  ;
  3573                                  ;       Routine:        WaitForKeyOutBuffer
  3574                                  ;
  3575                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3576                                  ;
  3577                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3578                                  ;                               0 = Output buffer empty after timeout
  3579                                  ;
  3580                                  ;-----------------------------------------------------------------------------------------------------------------------
  3581                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3582                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3583                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3584                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3585                                                          loopz   .10                                             ;loop until output buffer bit
  3586                                                          pop     ecx                                             ;restore non-volatile regs
  3587                                                          ret                                                     ;return
  3588                                  ;-----------------------------------------------------------------------------------------------------------------------
  3589                                  ;
  3590                                  ;       End of the Kernel Function Library
  3591                                  ;
  3592                                  ;-----------------------------------------------------------------------------------------------------------------------
  3593                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3594                                  ;=======================================================================================================================
  3595                                  ;
  3596                                  ;       Console Task
  3597                                  ;
  3598                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3599                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3600                                  ;       screen and responds to user commands.
  3601                                  ;
  3602                                  ;=======================================================================================================================
  3603                                  ;-----------------------------------------------------------------------------------------------------------------------
  3604                                  ;
  3605                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3606                                  ;
  3607                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3608                                  ;
  3609                                  ;-----------------------------------------------------------------------------------------------------------------------
  3610                                  section                 constack                                                ;console task stack
  3611                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3612                                  ;-----------------------------------------------------------------------------------------------------------------------
  3613                                  ;
  3614                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3615                                  ;
  3616                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3617                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3618                                  ;       16 descriptors. Six are initially defined.
  3619                                  ;
  3620                                  ;-----------------------------------------------------------------------------------------------------------------------
  3621                                  section                 conldt                                                  ;console local descriptors
  3622                                                          dq      004093004780007Fh                               ;04 TSS alias
  3623                                                          dq      004093004700007Fh                               ;0c LDT alias
  3624                                                          dq      00409300400006FFh                               ;14 stack
  3625                                                          dq      00CF93000000FFFFh                               ;1c data
  3626                                                          dq      00409B0050000FFFh                               ;24 code
  3627                                                          dq      00409300480007FFh                               ;2c message queue
  3628                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3629                                  ;-----------------------------------------------------------------------------------------------------------------------
  3630                                  ;
  3631                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3632                                  ;
  3633                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3634                                  ;       segment. CS to console code.
  3635                                  ;
  3636                                  ;-----------------------------------------------------------------------------------------------------------------------
  3637                                  section                 contss                                                  ;console task state segment
  3638                                                          dd      0                                               ;00 back-link tss
  3639                                                          dd      0700h                                           ;04 esp ring 0
  3640                                                          dd      0014h                                           ;08 ss ring 0
  3641                                                          dd      0700h                                           ;0c esp ring 1
  3642                                                          dd      0014h                                           ;10 es ring 1
  3643                                                          dd      0700h                                           ;14 esp ring 2
  3644                                                          dd      0014h                                           ;18 ss ring 2
  3645                                                          dd      0                                               ;1c cr ring 3
  3646                                                          dd      0                                               ;20 eip
  3647                                                          dd      0200h                                           ;24 eflags
  3648                                                          dd      0                                               ;28 eax
  3649                                                          dd      0                                               ;2c ecx
  3650                                                          dd      0                                               ;30 edx
  3651                                                          dd      0                                               ;34 ebx
  3652                                                          dd      0700h                                           ;38 esp ring 3
  3653                                                          dd      0                                               ;3c ebp
  3654                                                          dd      0                                               ;40 esi
  3655                                                          dd      0                                               ;44 edi
  3656                                                          dd      001Ch                                           ;48 es
  3657                                                          dd      0024h                                           ;4c cs
  3658                                                          dd      0014h                                           ;50 ss ring 3
  3659                                                          dd      001Ch                                           ;54 ds
  3660                                                          dd      0                                               ;58 fs
  3661                                                          dd      0                                               ;5c gs
  3662                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3663                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3664                                  ;-----------------------------------------------------------------------------------------------------------------------
  3665                                  ;
  3666                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3667                                  ;
  3668                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3669                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3670                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3671                                  ;       event.
  3672                                  ;
  3673                                  ;-----------------------------------------------------------------------------------------------------------------------
  3674                                  section                 conmque                                                 ;console message queue
  3675                                                          dd      8                                               ;head pointer
  3676                                                          dd      8                                               ;tail pointer
  3677                                                          times   510 dd 0                                        ;queue elements
  3678                                  ;-----------------------------------------------------------------------------------------------------------------------
  3679                                  ;
  3680                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3681                                  ;
  3682                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3683                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3684                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3685                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3686                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3687                                  ;       board input, echoing to the console screen and responding to user commands.
  3688                                  ;
  3689                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3690                                  ;
  3691                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3692                                  ;                               |  Real Mode Interrupt Vectors                  |
  3693                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3694                                  ;                               |  Reserved BIOS Memory Area                    |
  3695                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3696                                  ;                               |  Shared Kernel Memory Area                    |
  3697                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3698                                  ;                               |  Global Descriptor Table (GDT)                |
  3699                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3700                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3701                                  ;                       002000  +-----------------------------------------------+
  3702                                  ;                               |  Interrupt Handlers                           |
  3703                                  ;                               |  Kernel Function Library                      |
  3704                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3705                                  ;                               |  Console Task Stack Area                      |
  3706                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3707                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3708                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3709                                  ;                               |  Console Task Task State Segment (TSS)        |
  3710                                  ;                       004800  +-----------------------------------------------+
  3711                                  ;                               |  Console Task Message Queue                   |
  3712                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3713                                  ;                               |  Console Task Code                            |
  3714                                  ;                               |  Console Task Constants                       |
  3715                                  ;                       006000  +===============================================+
  3716                                  ;
  3717                                  ;-----------------------------------------------------------------------------------------------------------------------
  3718                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3719                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3720                                  
  3721                                                          clearConsoleScreen                                      ;clear the console screen
  3722                                                          putConsoleString czTitle                                ;display startup message
  3723                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3724                                                          placeCursor                                             ;set CRT cursor location
  3725                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3726                                                          putConsoleString czNewLine                              ;newline
  3727                                  
  3728                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3729                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3730                                                          call    ConTakeToken                                    ;handle console input
  3731                                                          mov     edx,wzConsoleToken                              ;token buffer
  3732                                                          call    ConDetermineCommand                             ;determine command number
  3733                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3734                                                          jb      .20                                             ;yes, branch
  3735                                  
  3736                                                          putConsoleString czUnknownCommand                       ;display error message
  3737                                  
  3738                                                          jmp     .10                                             ;next command
  3739                                  .20                     shl     eax,2                                           ;index into jump table
  3740                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3741                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3742                                                          call    eax                                             ;call command handler
  3743                                                          jmp     .10                                             ;next command
  3744                                  ;-----------------------------------------------------------------------------------------------------------------------
  3745                                  ;
  3746                                  ;       Routine:        ConInitializeData
  3747                                  ;
  3748                                  ;       Description:    This routine initializes console task variables.
  3749                                  ;
  3750                                  ;-----------------------------------------------------------------------------------------------------------------------
  3751                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3752                                                          push    edi                                             ;
  3753                                                          push    es                                              ;
  3754                                  ;
  3755                                  ;       Initialize console work areas.
  3756                                  ;
  3757                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3758                                                          pop     es                                              ;... into extra segment register
  3759                                                          mov     edi,ECONDATA                                    ;OS console data address
  3760                                                          xor     al,al                                           ;initialization value
  3761                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3762                                                          cld                                                     ;forward strings
  3763                                                          rep     stosb                                           ;initialize data
  3764                                  ;
  3765                                  ;       Restore and return.
  3766                                  ;
  3767                                                          pop     es                                              ;restore non-volatile regs
  3768                                                          pop     edi                                             ;
  3769                                                          pop     ecx                                             ;
  3770                                                          ret                                                     ;return
  3771                                  ;-----------------------------------------------------------------------------------------------------------------------
  3772                                  ;
  3773                                  ;       Routine:        ConTakeToken
  3774                                  ;
  3775                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3776                                  ;
  3777                                  ;       In:             DS:EDX  source buffer address
  3778                                  ;                       DS:EBX  target buffer address
  3779                                  ;
  3780                                  ;       Out:            DS:EDX  source buffer address
  3781                                  ;                       DS:EBX  target buffer address
  3782                                  ;
  3783                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3784                                  ;
  3785                                  ;-----------------------------------------------------------------------------------------------------------------------
  3786                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3787                                                          push    edi                                             ;
  3788                                                          push    es                                              ;
  3789                                                          push    ds                                              ;load data segment selector ...
  3790                                                          pop     es                                              ;... into extra segment reg
  3791                                                          mov     esi,edx                                         ;source buffer address
  3792                                                          mov     edi,ebx                                         ;target buffer address
  3793                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3794                                                          cld                                                     ;forward strings
  3795                                  .10                     lodsb                                                   ;load byte
  3796                                                          cmp     al,EASCIISPACE                                  ;space?
  3797                                                          je      .10                                             ;yes, continue
  3798                                                          test    al,al                                           ;end of line?
  3799                                                          jz      .40                                             ;yes, branch
  3800                                  .20                     stosb                                                   ;store byte
  3801                                                          lodsb                                                   ;load byte
  3802                                                          test    al,al                                           ;end of line?
  3803                                                          jz      .40                                             ;no, continue
  3804                                                          cmp     al,EASCIISPACE                                  ;space?
  3805                                                          jne     .20                                             ;no, continue
  3806                                  .30                     lodsb                                                   ;load byte
  3807                                                          cmp     al,EASCIISPACE                                  ;space?
  3808                                                          je      .30                                             ;yes, continue
  3809                                                          dec     esi                                             ;pre-position
  3810                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3811                                                          mov     edi,edx                                         ;source buffer address
  3812                                  .50                     lodsb                                                   ;remaining byte
  3813                                                          stosb                                                   ;move to front of buffer
  3814                                                          test    al,al                                           ;end of line?
  3815                                                          jnz     .50                                             ;no, continue
  3816                                                          pop     es                                              ;restore non-volatile regs
  3817                                                          pop     edi                                             ;
  3818                                                          pop     esi                                             ;
  3819                                                          ret                                                     ;return
  3820                                  ;-----------------------------------------------------------------------------------------------------------------------
  3821                                  ;
  3822                                  ;       Routine:        ConDetermineCommand
  3823                                  ;
  3824                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3825                                  ;
  3826                                  ;       input:          DS:EDX  command address
  3827                                  ;
  3828                                  ;       output:         EAX     >=0     = command nbr
  3829                                  ;                               0       = unknown command
  3830                                  ;
  3831                                  ;-----------------------------------------------------------------------------------------------------------------------
  3832                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3833                                                          push    ecx                                             ;
  3834                                                          push    esi                                             ;
  3835                                                          push    edi                                             ;
  3836                                  
  3837                                                          upperCaseString                                         ;upper-case string at EDX
  3838                                  
  3839                                                          mov     esi,tConCmdTbl                                  ;commands table
  3840                                                          xor     edi,edi                                         ;intialize command number
  3841                                                          cld                                                     ;forward strings
  3842                                  .10                     lodsb                                                   ;command length
  3843                                                          movzx   ecx,al                                          ;command length
  3844                                                          jecxz   .20                                             ;branch if end of table
  3845                                                          mov     ebx,esi                                         ;table entry address
  3846                                                          add     esi,ecx                                         ;next table entry address
  3847                                  
  3848                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3849                                  
  3850                                                          jecxz   .20                                             ;branch if equal
  3851                                                          inc     edi                                             ;increment command nbr
  3852                                                          jmp     .10                                             ;repeat
  3853                                  .20                     mov     eax,edi                                         ;command number
  3854                                                          pop     edi                                             ;restore non-volatile regs
  3855                                                          pop     esi                                             ;
  3856                                                          pop     ecx                                             ;
  3857                                                          pop     ebx                                             ;
  3858                                                          ret                                                     ;return
  3859                                  ;-----------------------------------------------------------------------------------------------------------------------
  3860                                  ;
  3861                                  ;       Routine:        ConClear
  3862                                  ;
  3863                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3864                                  ;
  3865                                  ;-----------------------------------------------------------------------------------------------------------------------
  3866                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3867                                                          ret                                                     ;return
  3868                                  ;-----------------------------------------------------------------------------------------------------------------------
  3869                                  ;
  3870                                  ;       Routine:        ConExit
  3871                                  ;
  3872                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3873                                  ;
  3874                                  ;-----------------------------------------------------------------------------------------------------------------------
  3875                                  ConExit                 resetSystem                                             ;issue system reset
  3876                                                          ret                                                     ;return
  3877                                  ;-----------------------------------------------------------------------------------------------------------------------
  3878                                  ;
  3879                                  ;       Routine:        ConInt6
  3880                                  ;
  3881                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3882                                  ;
  3883                                  ;-----------------------------------------------------------------------------------------------------------------------
  3884                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3885                                                          ret                                                     ;return (not executed)
  3886                                  ;-----------------------------------------------------------------------------------------------------------------------
  3887                                  ;
  3888                                  ;       Routine:        ConVersion
  3889                                  ;
  3890                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3891                                  ;
  3892                                  ;-----------------------------------------------------------------------------------------------------------------------
  3893                                  ConVersion              putConsoleString czTitle                                ;display version message
  3894                                                          ret                                                     ;return
  3895                                  ;-----------------------------------------------------------------------------------------------------------------------
  3896                                  ;
  3897                                  ;       Tables
  3898                                  ;
  3899                                  ;-----------------------------------------------------------------------------------------------------------------------
  3900                                                                                                                  ;---------------------------------------
  3901                                                                                                                  ;  Command Jump Table
  3902                                                                                                                  ;---------------------------------------
  3903                                  tConJmpTbl              equ     $                                               ;command jump table
  3904                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3905                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  3906                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  3907                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3908                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  3909                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3910                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  3911                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  3912                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3913                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3914                                                                                                                  ;---------------------------------------
  3915                                                                                                                  ;  Command Name Table
  3916                                                                                                                  ;---------------------------------------
  3917                                  tConCmdTbl              equ     $                                               ;command name table
  3918                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3919                                                          db      8,"VERSION",0                                   ;version command
  3920                                                          db      6,"CLEAR",0                                     ;clear command
  3921                                                          db      5,"EXIT",0                                      ;exit command
  3922                                                          db      5,"INT6",0                                      ;int6 command
  3923                                                          db      5,"QUIT",0                                      ;quit command
  3924                                                          db      4,"CLS",0                                       ;cls command
  3925                                                          db      4,"VER",0                                       ;ver command
  3926                                                          db      0                                               ;end of table
  3927                                  ;-----------------------------------------------------------------------------------------------------------------------
  3928                                  ;
  3929                                  ;       Constants
  3930                                  ;
  3931                                  ;-----------------------------------------------------------------------------------------------------------------------
  3932                                  czNewLine               db      13,10,0                                         ;new line string
  3933                                  czPrompt                db      ":",0                                           ;prompt string
  3934                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3935                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3936                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3937                                  %endif
  3938                                  %ifdef BUILDDISK
  3939                                  ;-----------------------------------------------------------------------------------------------------------------------
  3940                                  ;
  3941                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3942                                  ;
  3943                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3944                                  ;
  3945                                  ;-----------------------------------------------------------------------------------------------------------------------
  3946                                  section                 unused                                                  ;unused disk space
  3947                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3948                                  %endif
  3949                                  ;=======================================================================================================================
  3950                                  ;
  3951                                  ;       End of Program Code
  3952                                  ;
  3953                                  ;=======================================================================================================================
