     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.008
     6                                  ;
     7                                  ;	Description:	In this sample program, unhandled processor interrupts result in a display showing the
     8                                  ;			contents of registers at the time of the interrupt.
     9                                  ;
    10                                  ;	Revised:	July 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;			Register names in comments are in upper case.
    51                                  ;			Hexadecimal values in comments are in lower case.
    52                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    53                                  ;			register contents on entry and exit.
    54                                  ;
    55                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    56                                  ;			Assembly operands begin in column 33.
    57                                  ;			Lines should not extend beyond column 120.
    58                                  ;
    59                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    60                                  ;			Routine names begin with a verb (Get, Read, etc.).
    61                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    62                                  ;
    63                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    64                                  ;			Constant stored values are named in camel case, starting with 'c'.
    65                                  ;			The 2nd letter of the constant label indicates the storage type.
    66                                  ;
    67                                  ;			cq......	constant quad-word (dq)
    68                                  ;			cd......	constant double-word (dd)
    69                                  ;			cw......	constant word (dw)
    70                                  ;			cb......	constant byte (db)
    71                                  ;			cz......	constant ASCIIZ (null-terminated) string
    72                                  ;
    73                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    74                                  ;			The 2nd letter of the variable label indicates the storage type.
    75                                  ;
    76                                  ;			wq......	variable quad-word (resq)
    77                                  ;			wd......	variable double-word (resd)
    78                                  ;			ww......	variable word (resw)
    79                                  ;			wb......	variable byte (resb)
    80                                  ;
    81                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    82                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    83                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    84                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    85                                  ;			Octal literal values are avoided.
    86                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    87                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    88                                  ;
    89                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    90                                  ;			Structure names do not begin with a verb.
    91                                  ;
    92                                  ;	Macros:		Macro names are in camel case (getDateString).
    93                                  ;			Macro names do begin with a verb.
    94                                  ;
    95                                  ;	Registers:	Register names in comments are in upper case.
    96                                  ;			Register names in source code are in lower case.
    97                                  ;
    98                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    99                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   100                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   101                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   102                                  ;
   103                                  ;-----------------------------------------------------------------------------------------------------------------------
   104                                  ;=======================================================================================================================
   105                                  ;
   106                                  ;	Equates
   107                                  ;
   108                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   109                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   110                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   111                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   112                                  ;
   113                                  ;=======================================================================================================================
   114                                  ;-----------------------------------------------------------------------------------------------------------------------
   115                                  ;
   116                                  ;	8042 Keyboard Controller						EKEYB...
   117                                  ;
   118                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   119                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   120                                  ;
   121                                  ;-----------------------------------------------------------------------------------------------------------------------
   122                                  EKEYBPORTDATA		equ	060h						;data port
   123                                  EKEYBPORTSTAT		equ	064h						;status port
   124                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   125                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   126                                  EKEYBBITIN		equ	002h						;input buffer status bit
   127                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   128                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   129                                  										;---------------------------------------
   130                                  										;	Keyboard Scan Codes
   131                                  										;---------------------------------------
   132                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   133                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   134                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   135                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   136                                  EKEYBSLASH		equ	035h						;slash
   137                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   138                                  EKEYBALTDOWN		equ	038h						;alt key down
   139                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   140                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   141                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   142                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   143                                  EKEYBUP			equ	080h						;up
   144                                  EKEYBCTRLUP		equ	09Dh						;control key up
   145                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   146                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   147                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   148                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   149                                  EKEYBALTUP		equ	0B8h						;alt key up
   150                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   151                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   152                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   153                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   154                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   155                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   156                                  ;-----------------------------------------------------------------------------------------------------------------------
   157                                  ;
   158                                  ;	8253 Programmable Interrupt Timer					EPIT...
   159                                  ;
   160                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   161                                  ;	approximately 18.2 times per second.
   162                                  ;
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   165                                  ;-----------------------------------------------------------------------------------------------------------------------
   166                                  ;
   167                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   168                                  ;
   169                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   170                                  ;	external devices and signals a hardware interrupt to the CPU.
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  EPICPORTPRI		equ	020h						;primary control port 0
   174                                  EPICPORTPRI1		equ	021h						;primary control port 1
   175                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   176                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   177                                  EPICEOI			equ	020h						;non-specific EOI code
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;
   180                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   181                                  ;
   182                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   183                                  ;	for CGA, EGA, VGA and compatible video modes.
   184                                  ;
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ECRTPORTHI		equ	003h						;controller port hi
   187                                  ECRTPORTLO		equ	0D4h						;controller port lo
   188                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   189                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  ;
   192                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   193                                  ;
   194                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   195                                  ;
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  EFDCPORTHI		equ	003h						;controller port hi
   198                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   199                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   200                                  EFDCSTATBUSY		equ	010h						;main status is busy
   201                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;	x86 Descriptor Access Codes						EACC...
   205                                  ;
   206                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   207                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   208                                  ;
   209                                  ;	0.......	Segment is not present in memory (triggers int 11)
   210                                  ;	1.......	Segment is present in memory
   211                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   212                                  ;	...0....	Segment is a system segment
   213                                  ;	...00010		Local Descriptor Table
   214                                  ;	...00101		Task Gate
   215                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   216                                  ;	...01100		Call Gate (386)
   217                                  ;	...01110		Interrupt Gate (386)
   218                                  ;	...01111		Trap Gate (386)
   219                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   220                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   221                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   222                                  ;
   223                                  ;-----------------------------------------------------------------------------------------------------------------------
   224                                  EACCLDT			equ	10000010b					;local descriptor table
   225                                  EACCTASK		equ	10000101b					;task gate
   226                                  EACCTSS			equ	10001001b					;task-state segment
   227                                  EACCGATE		equ	10001100b					;call gate
   228                                  EACCINT			equ	10001110b					;interrupt gate
   229                                  EACCTRAP		equ	10001111b					;trap gate
   230                                  EACCDATA		equ	10010011b					;upward writable data
   231                                  EACCCODE		equ	10011011b					;non-conforming readable code
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	BIOS Interrupts and Functions						EBIOS...
   235                                  ;
   236                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   237                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   238                                  ;
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   241                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   242                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   243                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   244                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   245                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   246                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   247                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   248                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	ASCII									EASCII...
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EASCIIBACKSPACE		equ	008h						;backspace
   255                                  EASCIILINEFEED		equ	00Ah						;line feed
   256                                  EASCIIRETURN		equ	00Dh						;carriage return
   257                                  EASCIIESCAPE		equ	01Bh						;escape
   258                                  EASCIISPACE		equ	020h						;space
   259                                  EASCIIUPPERA		equ	041h						;'A'
   260                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   261                                  EASCIILOWERA		equ	061h						;'a'
   262                                  EASCIILOWERZ		equ	07Ah						;'z'
   263                                  EASCIITILDE		equ	07Eh						;'~'
   264                                  EASCIIBORDSGLVERT	equ	0B3h						;vertical single border
   265                                  EASCIIBORDSGLUPRRGT	equ	0BFh						;upper-right single border
   266                                  EASCIIBORDSGLLWRLFT	equ	0C0h						;lower-left single border
   267                                  EASCIIBORDSGLHORZ	equ	0C4h						;horizontal single border
   268                                  EASCIIBORDSGLLWRRGT	equ	0D9h						;lower-right single border
   269                                  EASCIIBORDSGLUPRLFT	equ	0DAh						;upper-left single border
   270                                  EASCIICASE		equ	00100000b					;case bit
   271                                  EASCIICASEMASK		equ	11011111b					;case mask
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;
   274                                  ;	Boot Sector and Loader Constants					EBOOT...
   275                                  ;
   276                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   277                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   278                                  ;
   279                                  ;-----------------------------------------------------------------------------------------------------------------------
   280                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   281                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   282                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   283                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   284                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   285                                  EBOOTMAXTRIES		equ	5						;max read retries
   286                                  ;-----------------------------------------------------------------------------------------------------------------------
   287                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   288                                  ;-----------------------------------------------------------------------------------------------------------------------
   289                                  ESELDAT			equ	018h						;kernel data selector
   290                                  ESELCGA			equ	020h						;cga video selector
   291                                  ESELOSCODE		equ	048h						;os kernel code selector
   292                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   293                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   294                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   295                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  ;	LDT Selectors								ESEL...
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ESELMQ			equ	02Ch						;console task message queue
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;	Kernel Constants							EKRN...
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  EKRNDESLEN		equ	8						;size of descriptor
   304                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   305                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;	Keyboard Flags								EKEYF...
   308                                  ;-----------------------------------------------------------------------------------------------------------------------
   309                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   310                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   311                                  EKEYFALTLEFT		equ	00000100b					;left alt
   312                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   313                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   314                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   315                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   316                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   317                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   318                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   319                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;	Console Constants							ECON...
   322                                  ;-----------------------------------------------------------------------------------------------------------------------
   323                                  ECONCOLS		equ	80						;columns per row
   324                                  ECONROWS		equ	24						;console rows
   325                                  ECONOIAROW		equ	24						;operator information area row
   326                                  ECONCOLBYTES		equ	2						;bytes per column
   327                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   328                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   329                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   330                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   331                                  ;-----------------------------------------------------------------------------------------------------------------------
   332                                  ;	Kernel Message Identifiers						EMSG...
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  EMSGKEYDOWN		equ	041000000h					;key-down
   335                                  EMSGKEYUP		equ	041010000h					;key-up
   336                                  EMSGKEYCHAR		equ	041020000h					;character
   337                                  ;=======================================================================================================================
   338                                  ;
   339                                  ;	Structures
   340                                  ;
   341                                  ;=======================================================================================================================
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;
   344                                  ;	MQUEUE
   345                                  ;
   346                                  ;	The MQUEUE structure maps memory used for a message queue.
   347                                  ;
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  struc			MQUEUE
   350 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   351 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   352 00000008 <res 000003F8>          MQData			resd	254						;message queue
   353                                  endstruc
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  ;
   356                                  ;	OSDATA
   357                                  ;
   358                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   359                                  ;	used by the BIOS.
   360                                  ;
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  struc			OSDATA
   363 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   364 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   365 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   366 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   367 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   368 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   369 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   370 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   371 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   372 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   373 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   374 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   375 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   376 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   377 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   378 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   379 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   380 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   381 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   382 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   383 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   384 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   385 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   386 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   387 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   388 00000449 <res 00000001>          			resb	1						;449 current video mode
   389 0000044A <res 00000002>          			resw	1						;44a screen columns
   390 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   391 0000044E <res 00000002>          			resw	1						;44e current video page offset
   392 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   393 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   394 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   395 00000462 <res 00000001>          			resb	1						;462 active display page number
   396 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   397 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   398 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   399 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   400 00000469 <res 00000003>          			resb	3						;469 vague
   401 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   402 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   403 00000471 <res 00000001>          			resb	1						;471 bios break flag
   404 00000472 <res 00000002>          			resw	1						;472 soft reset
   405 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   406 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   407 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   408 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   409 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   410 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   411 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   412 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   413 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   414 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   415 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   416 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   417 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   418 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   419 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   420 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   421 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   422 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   423 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   424 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   425 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   426 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   427 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   428 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   429 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   430 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   431 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   432 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   433 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   434 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   435 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   436 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   437 000004AC <res 00000008>          			resb	8						;4ac reserved
   438 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   439 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   440 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   441 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   442 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   443 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   444 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   445 000004CD <res 00000001>          			resb	1						;4cd unknown
   446 000004CE <res 00000002>          			resw	1						;4de day counter
   447 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   448 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   449 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   450 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   451 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   452 00000505 <res 0000000A>          			resb	10						;505 POST work area
   453 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   454 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   455 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   456 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   457 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   458 0000051E <res 00000002>          			resw	1						;51e unknown
   459 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   460 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   461 00000530 <res 00000004>          			resb	4						;530 MODE command
   462 00000534 <res 000001CC>          			resb	460						;534 unused
   463 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   464                                  ;-----------------------------------------------------------------------------------------------------------------------
   465                                  ;
   466                                  ;	OS Variables								@disk: N/A	@mem: 000800
   467                                  ;
   468                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   469                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   470                                  ;	are organized based on the task that usually accesses them.
   471                                  ;
   472                                  ;-----------------------------------------------------------------------------------------------------------------------
   473                                  ;-----------------------------------------------------------------------------------------------------------------------
   474                                  ;
   475                                  ;	Console Task Variables
   476                                  ;
   477                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   478                                  ;	the console task starts.
   479                                  ;
   480                                  ;-----------------------------------------------------------------------------------------------------------------------
   481                                  			align	4
   482                                  ECONDATA		equ	($)
   483 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   484 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   485 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   486 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   487 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   488 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   489 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   490 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   491 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   492 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   493 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   494 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   495 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   496 0000085C <res 00000050>          wzConsoleToken		resb	80						;token buffer
   497                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   498                                  ;-----------------------------------------------------------------------------------------------------------------------
   499                                  ;
   500                                  ;	End of OS Variables
   501                                  ;
   502                                  ;-----------------------------------------------------------------------------------------------------------------------
   503                                  endstruc
   504                                  ;-----------------------------------------------------------------------------------------------------------------------
   505                                  ;
   506                                  ;	Macros
   507                                  ;
   508                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   509                                  ;
   510                                  ;-----------------------------------------------------------------------------------------------------------------------
   511                                  %macro			mint	1
   512                                  _%1			equ	($-$$) / EKRNDESLEN
   513                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   514                                  %endmacro
   515                                  %macro			mtrap	1
   516                                  _%1			equ	($-$$) / EKRNDESLEN
   517                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   518                                  %endmacro
   519                                  %macro			menter	1
   520                                  ?%1			equ	($-$$)
   521                                  %endmacro
   522                                  %macro			tsvce	1
   523                                  e%1			equ	($-tsvc)/4
   524                                  			dd	%1
   525                                  %endmacro
   526                                  %ifdef BUILDBOOT
   527                                  ;=======================================================================================================================
   528                                  ;
   529                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   530                                  ;
   531                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   532                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   533                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   534                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   535                                  ;
   536                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   537                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   538                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   539                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   540                                  ;	immediately followed by a disk parameter table.
   541                                  ;
   542                                  ;=======================================================================================================================
   543                                  			cpu	8086						;assume minimal CPU
   544                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   545                                  			bits	16						;16-bit code at power-up
   546                                  %ifdef BUILDPREP
   547 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   548                                  %else
   549                                  Boot			jmp	word Boot.10					;jump over parameter table
   550                                  %endif
   551                                  ;-----------------------------------------------------------------------------------------------------------------------
   552                                  ;
   553                                  ;	Disk Parameter Table
   554                                  ;
   555                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   556                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   557                                  ;
   558                                  ;-----------------------------------------------------------------------------------------------------------------------
   559 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   560 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   561 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   562 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   563 00000010 02                      cbFatCount		db	2						;file allocation table copies
   564 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   565 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   566 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   567 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   568                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   569 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   570 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   571 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   572                                  ;
   573                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   574                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   575                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   576                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   577                                  ;	given several possible starting values for CS:IP.
   578                                  ;
   579                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   580 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   581                                  .@20			equ	$-$$						;.@20 = 021h
   582 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   583 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   584 00000025 B104                    			mov	cl,4						;shift count
   585 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   586 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   587 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   588                                  ;
   589                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   590                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   591                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   592                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   593                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   594                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   595                                  ;
   596 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   597 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   598 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   599 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   600 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   601                                  ;
   602                                  ;	Our boot addressability is now set up according to the following diagram.
   603                                  ;
   604                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   605                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   606                                  ;				|  256 = 100h bytes				|
   607                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   608                                  ;				|  Boot Sector (vstart=0100h)			|
   609                                  ;				|  1 sector = 512 = 200h bytes			|
   610                                  ;			007e00	+-----------------------------------------------+ DS:0300
   611                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   612                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   613                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   614                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   615                                  ;			009200	+-----------------------------------------------+ DS:1700
   616                                  ;
   617                                  ;	On entry, DL indicates the drive being booted from.
   618                                  ;
   619 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   620                                  ;
   621                                  ;	Compute directory i/o buffer address.
   622                                  ;
   623 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   624 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   625 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   626 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   627                                  ;
   628                                  ;	Compute segment where os.com will be loaded.
   629                                  ;
   630 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   631 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   632 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   633 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   634                                  ;
   635                                  ;	Set the video mode to 80 column, 25 row, text.
   636                                  ;
   637 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   638 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   639                                  ;
   640                                  ;	Write a message to the console so we know we have our addressability established.
   641                                  ;
   642 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   643 0000005C E84B01                  			call	BootPrint					;display loader message
   644                                  ;
   645                                  ;	Initialize the number of directory sectors to search.
   646                                  ;
   647 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   648 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   649                                  ;
   650                                  ;	Compute number of directory sectors and initialize overhead count.
   651                                  ;
   652 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   653 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   654 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   655 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   656                                  ;
   657                                  ;	Compute directory entries per sector.
   658                                  ;
   659 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   660 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   661 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   662                                  ;
   663                                  ;	Compute first logical directory sector and update overhead count.
   664                                  ;
   665 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   666 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   667 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   668 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   669 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   670 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   671                                  ;
   672                                  ;	Read directory sector.
   673                                  ;
   674 0000008E B001                    .30			mov	al,1						;sector count
   675 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   676 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   677 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   678                                  ;
   679                                  ;	Setup variables to search this directory sector.
   680                                  ;
   681 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   682 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   683 000000A1 7603                    			jna	.40						;no, continue
   684 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   685 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   686 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   687 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   688                                  ;
   689                                  ;	Loop through directory sectors searching for kernel program.
   690                                  ;
   691 000000B1 56                      .50			push	si						;save kernel name address
   692 000000B2 57                      			push	di						;save dir i/o buffer address
   693 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   694 000000B6 FC                      			cld							;forward strings
   695 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   696 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   697 000000BA 5E                      			pop	si						;restore kernel name address
   698 000000BB 7418                    			je	.60						;exit loop if found
   699 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   700 000000C1 48                      			dec	ax						;decrement remaining entries
   701 000000C2 75ED                    			jnz	.50						;next entry
   702                                  ;
   703                                  ;	Repeat search if we are not at the end of the directory.
   704                                  ;
   705 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   706 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   707 000000CD 75BF                    			jne	.30						;no, get next sector
   708 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   709 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   710                                  ;
   711                                  ;	If we find the kernel program in the directory, read the FAT.
   712                                  ;
   713 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   714 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   715 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   716 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   717 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   718 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   719                                  ;
   720                                  ;	Get the starting cluster of the kernel program and target address.
   721                                  ;
   722 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   723 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   724                                  ;
   725                                  ;	Read each program cluster into RAM.
   726                                  ;
   727 000000EE 50                      .70			push	ax						;save cluster nbr
   728 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   729 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   730 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   731 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   732 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   733 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   734 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   735 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   736                                  ;
   737                                  ;	Update buffer pointer for next cluster.
   738                                  ;
   739 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   740 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   741 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   742 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   743 00000113 58                      			pop	ax						;AX = restore cluster nbr
   744                                  ;
   745                                  ;	Compute next cluster number.
   746                                  ;
   747 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   748 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   749 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   750 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   751 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   752 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   753 00000120 83E701                  			and	di,1						;get low bit
   754 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   755 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   756 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   757                                  ;
   758                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   759                                  ;
   760 0000012B F6C101                  			test	cl,1						;is cluster odd?
   761 0000012E 7404                    			jz	.80						;no, skip ahead
   762 00000130 B104                    			mov	cl,4						;shift count
   763 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   764 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   765 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   766 0000013A 75B2                    			jne	.70						;no, continue
   767                                  ;
   768                                  ;	Transfer control to the operating system program.
   769                                  ;
   770 0000013C EA                      			db	0EAh						;jmp seg:offset
   771 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   772 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   773                                  ;
   774                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   775                                  ;
   776 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   777 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   778 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   779 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   780 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   781 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   782 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   783 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   784 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   785 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   786                                  ;
   787                                  ;	Try maxtries times to read sector.
   788                                  ;
   789 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   790 00000160 53                      .10			push	bx						;save buffer address
   791 00000161 51                      			push	cx						;save retry count
   792 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   793 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   794 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   795 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   796 0000016F 59                      			pop	cx						;restore retry count
   797 00000170 5B                      			pop	bx						;restore buffer address
   798 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   799 00000173 E2EB                    			loop	.10						;retry
   800                                  ;
   801                                  ;	Handle disk error: convert to ASCII and store in error string.
   802                                  ;
   803 00000175 88E0                    			mov	al,ah						;AL = bios error code
   804 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   805 00000179 B210                    			mov	dl,16						;divisor for base 16
   806 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   807 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   808 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   809 00000183 7203                    			jb	.20						;continue if numeral
   810 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   811 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   812 0000018A 7203                    			jb	.30						;continue if numeral
   813 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   814 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   815 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   816 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   817 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   818 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   819 0000019C 7504                    			jnz	.20						;continue if key pressed
   820 0000019E FB                      			sti							;enable maskable interrupts
   821 0000019F F4                      			hlt							;wait for interrupt
   822 000001A0 EBF6                    			jmp	.10						;repeat
   823 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   824 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   825 000001A6 FB                      .30			sti							;enable maskable interrupts
   826 000001A7 F4                      			hlt							;stop until reset, int, nmi
   827 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   828                                  ;
   829                                  ;	Display text message.
   830                                  ;
   831 000001AA FC                      BootPrint		cld							;forward strings
   832 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   833 000001AC 84C0                    			test	al,al						;end of string?
   834 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   835 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   836 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   837 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   838 000001B6 C3                      BootReturn		ret							;return
   839                                  ;-----------------------------------------------------------------------------------------------------------------------
   840                                  ;
   841                                  ;	Constants
   842                                  ;
   843                                  ;-----------------------------------------------------------------------------------------------------------------------
   844 000001B7 90                      			align	2
   845 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   846 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   846 000001C3 4F4D               
   847 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   847 000001CE 530D0A00           
   848 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   848 000001DB 7220               
   849 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   850 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   850 000001E9 6700               
   851                                  ;-----------------------------------------------------------------------------------------------------------------------
   852                                  ;
   853                                  ;	Work Areas
   854                                  ;
   855                                  ;-----------------------------------------------------------------------------------------------------------------------
   856 000001EB 90                      			align	2
   857 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   858 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   859 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   860 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   861 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   862                                  wwReadCountCommand	equ	$						;read count and command
   863 000001F6 00                      wbReadCount		db	0						;sectors to read
   864 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   865                                  wwDriveHead		equ	$						;drive, head (word)
   866 000001F8 00                      wbDrive			db	0						;drive
   867 000001F9 00                      wbHead			db	0						;head
   868                                  wwSectorTrack		equ	$						;sector, track (word)
   869 000001FA 00                      			db	0						;sector
   870 000001FB 00                      wbTrack			db	0						;track
   871 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   872 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   873                                  %endif
   874                                  %ifdef BUILDPREP
   875                                  ;=======================================================================================================================
   876                                  ;
   877                                  ;	Diskette Preparation Code
   878                                  ;
   879                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   880                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   881                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   882                                  ;
   883                                  ;=======================================================================================================================
   884                                  ;
   885                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   886                                  ;
   887 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   888 00000203 E8A4FF                  			call	BootPrint					;display message
   889                                  ;
   890                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   891                                  ;
   892 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   893 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   894 0000020A 7504                    			jnz	.12						;continue if key pressed
   895 0000020C FB                      			sti							;enable interrupts
   896 0000020D F4                      			hlt							;wait for interrupt
   897 0000020E EBF6                    			jmp	.10						;repeat
   898 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   899 00000212 7407                    			je	.15						;yes, branch
   900 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   901 00000216 75EE                    			jne	.10						;no, repeat
   902 00000218 E9A900                  			jmp	.90						;yes, exit program
   903                                  ;
   904                                  ;	Display writing-sector message and patch the JMP instruction.
   905                                  ;
   906 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   907 0000021E E889FF                  			call	BootPrint					;display message
   908 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   909 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   910 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   911                                  ;
   912                                  ;	Try to read the boot sector.
   913                                  ;
   914 00000229 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   915 0000022C 51                      .20			push	cx						;save remaining tries
   916 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   917 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   918 00000233 B90100                  			mov	cx,1						;track zero, sector one
   919 00000236 B80102                  			mov	ax,0201h					;read one sector
   920 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   921 0000023B 59                      			pop	cx						;restore remaining retries
   922 0000023C 7307                    			jnc	.30						;skip ahead if successful
   923 0000023E E2EC                    			loop	.20						;try again
   924 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   925 00000243 EB2C                    			jmp	.50						;branch to error routine
   926                                  ;
   927                                  ;	Copy diskette parms from input buffer to output buffer.
   928                                  ;
   929 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   930 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   931 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   932 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   933 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   934 00000254 FC                      			cld							;forward string copies
   935 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   936                                  ;
   937                                  ;	Try to write boot sector to diskette.
   938                                  ;
   939 00000257 B90500                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   940 0000025A 51                      .40			push	cx						;save remaining tries
   941 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   942 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   943 00000261 B90100                  			mov	cx,1						;track zero, sector one
   944 00000264 B80103                  			mov	ax,0301h					;write one sector
   945 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   946 00000269 59                      			pop	cx						;restore remaining retries
   947 0000026A 7326                    			jnc	.80						;skip ahead if successful
   948 0000026C E2EC                    			loop	.40						;try again
   949 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   950                                  ;
   951                                  ;	Convert the error code to ASCII and display the error message.
   952                                  ;
   953 00000271 50                      .50			push	ax						;save error code
   954 00000272 88E0                    			mov	al,ah						;copy error code
   955 00000274 B400                    			mov	ah,0						;AX = error code
   956 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   957 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   958 0000027A 0D3030                  			or	ax,03030h					;add ASCII zone digits
   959 0000027D 80FC3A                  			cmp	ah,03Ah						;AH ASCII numeral?
   960 00000280 7203                    			jb	.60						;yes, continue
   961 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   962 00000285 3C3A                    .60			cmp	al,03Ah						;al ASCII numeral?
   963 00000287 7202                    			jb	.70						;yes, continue
   964 00000289 0407                    			add	al,7						;no, make ASCII
   965 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   966 0000028E E819FF                  			call	BootPrint					;write error message
   967 00000291 58                      			pop	ax						;restore error code
   968                                  ;
   969                                  ;	Display the completion message.
   970                                  ;
   971 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   972 00000295 88E0                    			mov	al,ah						;BIOS return code
   973 00000297 3C00                    			cmp	al,0						;success?
   974 00000299 7426                    			je	.85						;yes, continue
   975 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   976 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   977 000002A0 741F                    			je	.85						;yes, continue
   978 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   979 000002A5 3C02                    			cmp	al,2						;address mark not found?
   980 000002A7 7418                    			je	.85						;yes, continue
   981 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   982 000002AC 3C03                    			cmp	al,3						;protected disk?
   983 000002AE 7411                    			je	.85						;yes, continue
   984 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   985 000002B3 3C06                    			cmp	al,6						;diskette removed?
   986 000002B5 740A                    			je	.85						;yes, continue
   987 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   988 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   989 000002BC 7403                    			je	.85						;yes, continue
   990 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   991 000002C1 E8E6FE                  .85			call	BootPrint					;display result message
   992 000002C4 B8004C                  .90			mov	ax,04C00H					;terminate with zero result code
   993 000002C7 CD21                    			int	021h						;terminate DOS program
   994 000002C9 C3                      			ret							;return (should not execute)
   995                                  ;-----------------------------------------------------------------------------------------------------------------------
   996                                  ;
   997                                  ;	Diskette Preparation Messages
   998                                  ;
   999                                  ;-----------------------------------------------------------------------------------------------------------------------
  1000 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
  1000 000002D3 5320426F6F742D4469-
  1000 000002DC 736B65747465205072-
  1000 000002E5 657061726174696F6E-
  1000 000002EE 2050726F6772616D   
  1001 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1001 000002FF 687420284329203230-
  1001 00000308 31302D323031372044-
  1001 00000311 61766964204A2E2057-
  1001 0000031A 616C6C696E672E2041-
  1001 00000323 6C6C20726967687473-
  1001 0000032C 207265736572766564-
  1001 00000335 2E                 
  1002 00000336 0D0A                    			db	13,10
  1003 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1003 00000341 6F6772616D206F7665-
  1003 0000034A 727772697465732074-
  1003 00000353 686520626F6F742073-
  1003 0000035C 6563746F72206F6620-
  1003 00000365 61206469736B657474-
  1003 0000036E 652077697468207374-
  1003 00000377 617274757020636F64-
  1003 00000380 652074686174       
  1004 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
  1004 0000038F 616420746865206F70-
  1004 00000398 65726174696E672073-
  1004 000003A1 797374656D20696E74-
  1004 000003AA 6F206D656D6F727920-
  1004 000003B3 7768656E2074686520-
  1004 000003BC 636F6D707574657220-
  1004 000003C5 697320726573746172-
  1004 000003CE 7465642E           
  1005 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1005 000003DB 6565642C20706C6163-
  1005 000003E4 65206120666F726D61-
  1005 000003ED 74746564206469736B-
  1005 000003F6 6574746520696E746F-
  1005 000003FF 20647269766520413A-
  1005 00000408 20616E642070726573-
  1005 00000411 732074686520456E74-
  1005 0000041A 6572206B65792E     
  1006 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1006 0000042A 20746869732070726F-
  1006 00000433 6772616D2077697468-
  1006 0000043C 6F7574207072657061-
  1006 00000445 72696E672061206469-
  1006 0000044E 736B657474652C2070-
  1006 00000457 726573732074686520-
  1006 00000460 457363617065206B65-
  1006 00000469 792E               
  1007 0000046B 0D0A00                  			db	13,10,0
  1008 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1008 00000477 2074686520626F6F74-
  1008 00000480 20736563746F722074-
  1008 00000489 6F2074686520646973-
  1008 00000492 6B65747465202E2E2E 
  1009 0000049B 0D0A00                  			db	13,10,0
  1010 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1010 000004A7 6F722D636F6465202E-
  1010 000004B0 2E2077617320726574-
  1010 000004B9 75726E65642066726F-
  1010 000004C2 6D207468652042494F-
  1010 000004CB 53207768696C652072-
  1010 000004D4 656164696E67206672-
  1010 000004DD 6F6D20746865206469-
  1010 000004E6 736B2E             
  1011 000004E9 0D0A00                  			db	13,10,0
  1012 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1012 000004F5 6F722D636F6465202E-
  1012 000004FE 2E2077617320726574-
  1012 00000507 75726E65642066726F-
  1012 00000510 6D207468652042494F-
  1012 00000519 53207768696C652077-
  1012 00000522 726974696E6720746F-
  1012 0000052B 20746865206469736B-
  1012 00000534 2E                 
  1013 00000535 0D0A00                  			db	13,10,0
  1014 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1014 00000541 742D736563746F7220-
  1014 0000054A 776173207772697474-
  1014 00000553 656E20746F20746865-
  1014 0000055C 206469736B65747465-
  1014 00000565 2E204265666F726520-
  1014 0000056E 626F6F74696E672079-
  1014 00000577 6F757220636F6D7075-
  1014 00000580 7465722077697468   
  1015 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1015 00000591 736B657474652C206D-
  1015 0000059A 616B65207375726520-
  1015 000005A3 746861742074686520-
  1015 000005AC 66696C65204F532E43-
  1015 000005B5 4F4D20697320636F70-
  1015 000005BE 696564206F6E746F20-
  1015 000005C7 746865206469736B65-
  1015 000005D0 7474652E           
  1016 000005D4 0D0A00                  			db	13,10,0
  1017 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1017 000005E0 76616C696420446973-
  1017 000005E9 6B20506172616D6574-
  1017 000005F2 6572               
  1018 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1018 000005FD 20616E20696E746572-
  1018 00000606 6E616C206572726F72-
  1018 0000060F 206361757365642062-
  1018 00000618 7920616E20696E7661-
  1018 00000621 6C69642076616C7565-
  1018 0000062A 206265696E67207061-
  1018 00000633 7373656420746F2061-
  1018 0000063C 2073797374656D     
  1019 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1019 0000064C 6E2E20546865204F53-
  1019 00000655 424F4F542E434F4D20-
  1019 0000065E 66696C65206D617920-
  1019 00000667 626520636F72727570-
  1019 00000670 742E20436F7079206F-
  1019 00000679 7220646F776E6C6F61-
  1019 00000682 64207468652066696C-
  1019 0000068B 6520616761696E     
  1020 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
  1020 0000069B 72792E             
  1021 0000069E 0D0A00                  			db	13,10,0
  1022 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1022 000006AA 6472657373204D6172-
  1022 000006B3 6B204E6F7420466F75-
  1022 000006BC 6E64               
  1023 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1023 000006C7 726F7220696E646963-
  1023 000006D0 617465732061207068-
  1023 000006D9 79736963616C207072-
  1023 000006E2 6F626C656D20776974-
  1023 000006EB 682074686520666C6F-
  1023 000006F4 707079206469736B65-
  1023 000006FD 7474652E20506C6561-
  1023 00000706 7365207265747279   
  1024 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
  1024 00000717 6E6F74686572206469-
  1024 00000720 736B657474652E     
  1025 00000727 0D0A00                  			db	13,10,0
  1026 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1026 00000733 6F7465637465642044-
  1026 0000073C 69736B             
  1027 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1027 00000748 726F72206973207573-
  1027 00000751 75616C6C7920636175-
  1027 0000075A 736564206279206174-
  1027 00000763 74656D7074696E6720-
  1027 0000076C 746F20777269746520-
  1027 00000775 746F20612077726974-
  1027 0000077E 652D70726F74656374-
  1027 00000787 6564206469736B2E   
  1028 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1028 00000798 686520277772697465-
  1028 000007A1 2D70726F7465637427-
  1028 000007AA 2073657474696E6720-
  1028 000007B3 6F6E20746865206469-
  1028 000007BC 736B206F7220726574-
  1028 000007C5 7279207573696E6720-
  1028 000007CE 7573696E6720616E6F-
  1028 000007D7 74686572206469736B-
  1028 000007E0 2E                 
  1029 000007E1 0D0A00                  			db	13,10,0
  1030 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1030 000007ED 736B65747465205265-
  1030 000007F6 6D6F766564         
  1031 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1031 00000804 726F72206D61792069-
  1031 0000080D 6E6469636174652074-
  1031 00000816 686174207468652066-
  1031 0000081F 6C6F70707920646973-
  1031 00000828 6B6574746520686173-
  1031 00000831 206265656E2072656D-
  1031 0000083A 6F7665642066726F6D-
  1031 00000843 20746865           
  1032 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1032 00000850 652064726976652E20-
  1032 00000859 4F6E20736F6D652073-
  1032 00000862 797374656D732C2074-
  1032 0000086B 68697320636F646520-
  1032 00000874 6D617920616C736F20-
  1032 0000087D 6F6363757220696620-
  1032 00000886 746865206469736B65-
  1032 0000088F 747465206973       
  1033 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1033 0000089E 70726F746563746564-
  1033 000008A7 2E2720506C65617365-
  1033 000008B0 207665726966792074-
  1033 000008B9 686174207468652064-
  1033 000008C2 69736B657474652069-
  1033 000008CB 73206E6F7420777269-
  1033 000008D4 74652D70726F746563-
  1033 000008DD 74656420616E64     
  1034 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
  1034 000008ED 65726C7920696E7365-
  1034 000008F6 7274656420696E2074-
  1034 000008FF 6865206469736B6574-
  1034 00000908 74652064726976652E 
  1035 00000911 0D0A00                  			db	13,10,0
  1036 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1036 0000091D 6976652054696D6564-
  1036 00000926 204F7574           
  1037 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1037 00000933 726F7220757375616C-
  1037 0000093C 6C7920696E64696361-
  1037 00000945 746573207468617420-
  1037 0000094E 6E6F206469736B6574-
  1037 00000957 746520697320696E20-
  1037 00000960 746865206469736B65-
  1037 00000969 747465206472697665-
  1037 00000972 2E20506C65617365   
  1038 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1038 00000983 726520746861742074-
  1038 0000098C 6865206469736B6574-
  1038 00000995 74652069732070726F-
  1038 0000099E 7065726C7920736561-
  1038 000009A7 74656420696E207468-
  1038 000009B0 652064726976652061-
  1038 000009B9 6E642072657472792E 
  1039 000009C2 0D0A00                  			db	13,10,0
  1040 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1040 000009CE 6B6E6F776E20457272-
  1040 000009D7 6F72               
  1041 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1041 000009E2 6F722D636F64652072-
  1041 000009EB 657475726E65642062-
  1041 000009F4 79207468652042494F-
  1041 000009FD 53206973206E6F7420-
  1041 00000A06 61207265636F676E69-
  1041 00000A0F 7A6564206572726F72-
  1041 00000A18 2E20506C6561736520-
  1041 00000A21 636F6E73756C74     
  1042 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
  1042 00000A31 6D7075746572277320-
  1042 00000A3A 746563686E6963616C-
  1042 00000A43 207265666572656E63-
  1042 00000A4C 6520666F7220612064-
  1042 00000A55 65736372697074696F-
  1042 00000A5E 6E206F662074686973-
  1042 00000A67 206572726F7220636F-
  1042 00000A70 64652E             
  1043 00000A73 0D0A00                  			db	13,10,0
  1044                                  wcPrepInBuf		equ	$
  1045                                  %endif
  1046                                  %ifdef BUILDDISK
  1047                                  ;=======================================================================================================================
  1048                                  ;
  1049                                  ;	File Allocation Tables
  1050                                  ;
  1051                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1052                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1053                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1054                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1055                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1056                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1057                                  ;	the last cluster in the chain.
  1058                                  ;
  1059                                  ;	Every three bytes encode two FAT entries as follows:
  1060                                  ;
  1061                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1062                                  ;
  1063                                  ;=======================================================================================================================
  1064                                  ;-----------------------------------------------------------------------------------------------------------------------
  1065                                  ;
  1066                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1067                                  ;
  1068                                  ;-----------------------------------------------------------------------------------------------------------------------
  1069                                  section			fat1							;first copy of FAT
  1070                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1071                                  			db	005h,060h,000h,	007h,080h,000h
  1072                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1073                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1074                                  			db	011h,020h,001h,	013h,040h,001h
  1075                                  			db	015h,060h,001h,	017h,080h,001h
  1076                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1077                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1078                                  			db	021h,020h,002h,	023h,040h,002h
  1079                                  			db	025h,060h,002h,	027h,080h,002h
  1080                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1081                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1082                                  ;-----------------------------------------------------------------------------------------------------------------------
  1083                                  ;
  1084                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1085                                  ;
  1086                                  ;-----------------------------------------------------------------------------------------------------------------------
  1087                                  section			fat2							;second copy of FAT
  1088                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1089                                  			db	005h,060h,000h,	007h,080h,000h
  1090                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1091                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1092                                  			db	011h,020h,001h,	013h,040h,001h
  1093                                  			db	015h,060h,001h,	017h,080h,001h
  1094                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1095                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1096                                  			db	021h,020h,002h,	023h,040h,002h
  1097                                  			db	025h,060h,002h,	027h,080h,002h
  1098                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1099                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1100                                  ;-----------------------------------------------------------------------------------------------------------------------
  1101                                  ;
  1102                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1103                                  ;
  1104                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1105                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1106                                  ;	copy.
  1107                                  ;
  1108                                  ;-----------------------------------------------------------------------------------------------------------------------
  1109                                  section			dir							;diskette directory
  1110                                  			db	"OS      COM"					;file name (must contain spaces)
  1111                                  			db	020h						;attribute (archive bit set)
  1112                                  			times	10 db 0						;unused
  1113                                  			dw	0h						;time
  1114                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1115                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1116                                  			dw	2						;first cluster
  1117                                  			dd	05200h						;file size
  1118                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1119                                  %endif
  1120                                  %ifdef BUILDCOM
  1121                                  ;=======================================================================================================================
  1122                                  ;
  1123                                  ;	OS.COM
  1124                                  ;
  1125                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1126                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1127                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1128                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1129                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1130                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1131                                  ;
  1132                                  ;	Our loader addressability is set up according to the following diagram.
  1133                                  ;
  1134                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1135                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1136                                  ;				|  256 = 100h bytes				|
  1137                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1138                                  ;				|  Boot Sector (vstart=0100h)			|
  1139                                  ;				|  1 sector = 512 = 200h bytes			|
  1140                                  ;			007e00	+-----------------------------------------------+
  1141                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1142                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1143                                  ;				|						|
  1144                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1145                                  ;				|						|
  1146                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1147                                  ;				|  Loader Code					|
  1148                                  ;				|  1 sector = 512 = 200h bytes			|
  1149                                  ;			009200	+-----------------------------------------------+ DS:0300
  1150                                  ;
  1151                                  ;=======================================================================================================================
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  ;
  1154                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1155                                  ;
  1156                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1157                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1158                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1159                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1160                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1161                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1162                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1163                                  ;	registers.
  1164                                  ;
  1165                                  ;-----------------------------------------------------------------------------------------------------------------------
  1166                                  			cpu	8086						;assume minimal CPU
  1167                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1168                                  			bits	16						;this is 16-bit code
  1169                                  Loader			push	cs						;use the code segment
  1170                                  			pop	ds						;...as our data segment
  1171                                  			push	cs						;use the code segment
  1172                                  			pop	es						;...as our extra segment
  1173                                  ;
  1174                                  ;	Write a message to the console so we know we have our addressability established.
  1175                                  ;
  1176                                  			mov	si,czStartingMsg				;starting message
  1177                                  			call	PutTTYString					;display loader message
  1178                                  ;
  1179                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1180                                  ;
  1181                                  			call	GetCPUType					;AL = cpu type
  1182                                  			mov	si,czCPUErrorMsg				;loader error message
  1183                                  			cmp	al,3						;80386+?
  1184                                  			jb	LoaderExit					;no, exit with error message
  1185                                  			cpu	386						;allow 80386 instructions
  1186                                  			mov	si,czCPUOKMsg					;cpu ok message
  1187                                  			call	PutTTYString					;display message
  1188                                  ;
  1189                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1190                                  ;
  1191                                  			mov	si,0300h					;GDT offset
  1192                                  			mov	ax,cs						;AX:SI = gdt source
  1193                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1194                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1195                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1196                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1197                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1198                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1199                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1200                                  			call	PutTTYString					;display message
  1201                                  ;
  1202                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1203                                  ;
  1204                                  			push	EKRNCODESEG					;use kernel code segment ...
  1205                                  			pop	es						;... as target segment
  1206                                  			xor	di,di						;ES:DI = target address
  1207                                  			mov	si,0300h					;DS:SI = source address
  1208                                  			mov	cx,05000h					;CX = kernel size
  1209                                  			cld							;forward strings
  1210                                  			rep	movsb						;copy kernel image
  1211                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1212                                  			call	PutTTYString					;display message
  1213                                  ;
  1214                                  ;	Switch to protected mode.
  1215                                  ;
  1216                                  			xor	si,si						;ES:SI = gdt addr
  1217                                  			mov	ss,si						;protected mode ss
  1218                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1219                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1220                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1221                                  			mov	dx,001Fh					;outer delay loop count
  1222                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1223                                  			loop	$						;wait out pending interrupts
  1224                                  			dec	dx						;restore outer loop count
  1225                                  			jnz	.10						;continue outer loop
  1226                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1227                                  ;
  1228                                  ;	Enable hardware and maskable interrupts
  1229                                  ;
  1230                                  			xor	al,al						;enable all registers code
  1231                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1232                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1233                                  			sti							;enable maskable interrupts
  1234                                  ;
  1235                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1236                                  ;
  1237                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1238                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1239                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1240                                  ;-----------------------------------------------------------------------------------------------------------------------
  1241                                  ;
  1242                                  ;	Routine:	LoaderExit
  1243                                  ;
  1244                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1245                                  ;
  1246                                  ;	In:		DS:SI	string address
  1247                                  ;
  1248                                  ;-----------------------------------------------------------------------------------------------------------------------
  1249                                  LoaderExit		call	PutTTYString					;display error message
  1250                                  ;
  1251                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1252                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1253                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1254                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1255                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1256                                  ;
  1257                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1258                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1259                                  			jnz	.40						;exit if key pressed
  1260                                  			sti							;enable maskable interrupts
  1261                                  			hlt							;wait for interrupt
  1262                                  			jmp	.30						;repeat until keypress
  1263                                  ;
  1264                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1265                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1266                                  ;	HLT until the system resets.
  1267                                  ;
  1268                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1269                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1270                                  .50			sti							;enable maskable interrupts
  1271                                  			hlt							;stop until reset, int, nmi
  1272                                  			jmp	.50						;loop until restart kicks in
  1273                                  ;-----------------------------------------------------------------------------------------------------------------------
  1274                                  ;
  1275                                  ;	Routine:	GetCPUType
  1276                                  ;
  1277                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1278                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1279                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1280                                  ;
  1281                                  ;	Out:		AX	0 = 808x, v20, etc.
  1282                                  ;				1 = 80186
  1283                                  ;				2 = 80286
  1284                                  ;				3 = 80386
  1285                                  ;
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  GetCPUType		mov	al,1						;AL = 1
  1288                                  			mov	cl,32						;shift count
  1289                                  			shr	al,cl						;try a 32-bit shift
  1290                                  			or	al,al						;did the shift happen?
  1291                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1292                                  			cpu	186
  1293                                  			push	sp						;save stack pointer
  1294                                  			pop	cx						;...into cx
  1295                                  			cmp	cx,sp						;did sp decrement before push?
  1296                                  			jne	.10						;yes, cpu is 80186
  1297                                  			cpu	286
  1298                                  			inc	ax						;AX = 2
  1299                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1300                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1301                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1302                                  			jz	.10						;yes, cpu is 80286
  1303                                  			inc	ax						;AX = 3
  1304                                  .10			ret							;return
  1305                                  ;-----------------------------------------------------------------------------------------------------------------------
  1306                                  ;
  1307                                  ;	Routine:	PutTTYString
  1308                                  ;
  1309                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1310                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1311                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1312                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1313                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1314                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1315                                  ;			registers and flags unless used to indicate return status.
  1316                                  ;
  1317                                  ;	In:		DS:SI	address of string
  1318                                  ;
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  PutTTYString		cld							;forward strings
  1321                                  			lodsb							;load next byte at DS:SI in AL
  1322                                  			test	al,al						;end of string?
  1323                                  			jz	.10						;... yes, exit our loop
  1324                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1325                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1326                                  			jmp	PutTTYString					;repeat until done
  1327                                  .10			ret							;return
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  ;
  1330                                  ;	Loader Data
  1331                                  ;
  1332                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1333                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1334                                  ;
  1335                                  ;-----------------------------------------------------------------------------------------------------------------------
  1336                                  			align	2
  1337                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1338                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1339                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1340                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1341                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1342                                  			db	"Please press any key to restart the computer.",13,10,0
  1343                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1344                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1345                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1346                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1347                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1348                                  			db	055h,0AAh					;end of sector signature
  1349                                  ;=======================================================================================================================
  1350                                  ;
  1351                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1352                                  ;
  1353                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1354                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1355                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1356                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1357                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1358                                  ;
  1359                                  ;=======================================================================================================================
  1360                                  ;=======================================================================================================================
  1361                                  ;
  1362                                  ;	Kernel Tables
  1363                                  ;
  1364                                  ;=======================================================================================================================
  1365                                  ;-----------------------------------------------------------------------------------------------------------------------
  1366                                  ;
  1367                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1368                                  ;
  1369                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1370                                  ;	first descriptor must be all nulls.
  1371                                  ;
  1372                                  ;	6   5         4         3         2         1         0
  1373                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1374                                  ;	----------------------------------------------------------------
  1375                                  ;	h......hffffmmmma......ab......................bn..............n
  1376                                  ;	00000000			all areas have base addresses below 2^24
  1377                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1378                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1379                                  ;	            1001		present, ring-0, selector
  1380                                  ;
  1381                                  ;	h...h	hi-order base address (bits 24-31)
  1382                                  ;	ffff	flags
  1383                                  ;	mmmm	hi-order limit (bits 16-19)
  1384                                  ;	a...a	access
  1385                                  ;	b...b	lo-order base address (bits 0-23)
  1386                                  ;	n...n	lo-order limit (bits 0-15)
  1387                                  ;
  1388                                  ;-----------------------------------------------------------------------------------------------------------------------
  1389                                  section			gdt							;global descriptor table
  1390                                  			dq	0000000000000000h				;00 required null selector
  1391                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1392                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1393                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1394                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1395                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1396                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1397                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1398                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1399                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1400                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1401                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1402                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1403                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1404                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406                                  ;
  1407                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1408                                  ;
  1409                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1410                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1411                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1412                                  ;
  1413                                  ;	6   5         4         3         2         1         0
  1414                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1415                                  ;	----------------------------------------------------------------
  1416                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1417                                  ;
  1418                                  ;	h...h	high-order offset (bits 16-31)
  1419                                  ;	P	present (0=unused interrupt)
  1420                                  ;	zz	descriptor privilege level
  1421                                  ;	S	storage segment (must be zero for IDT)
  1422                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1423                                  ;	S...S	handling code selector in GDT
  1424                                  ;	l...l	lo-order offset (bits 0-15)
  1425                                  ;
  1426                                  ;-----------------------------------------------------------------------------------------------------------------------
  1427                                  section			idt							;interrupt descriptor table
  1428                                  			mint	dividebyzero					;00 divide by zero
  1429                                  			mint	singlestep					;01 single step
  1430                                  			mint	nmi						;02 non-maskable
  1431                                  			mint	break						;03 break
  1432                                  			mint	into						;04 into
  1433                                  			mint	bounds						;05 bounds
  1434                                  			mint	badopcode					;06 bad op code
  1435                                  			mint	nocoproc					;07 no coprocessor
  1436                                  			mint	doublefault					;08 double-fault
  1437                                  			mint	operand						;09 operand
  1438                                  			mint	badtss						;0a bad TSS
  1439                                  			mint	notpresent					;0b not-present
  1440                                  			mint	stacklimit					;0c stack limit
  1441                                  			mint	protection					;0d general protection fault
  1442                                  			mint	int14						;0e (reserved)
  1443                                  			mint	int15						;0f (reserved)
  1444                                  			mint	coproccalc					;10 (reserved)
  1445                                  			mint	int17						;11 (reserved)
  1446                                  			mint	int18						;12 (reserved)
  1447                                  			mint	int19						;13 (reserved)
  1448                                  			mint	int20						;14 (reserved)
  1449                                  			mint	int21						;15 (reserved)
  1450                                  			mint	int22						;16 (reserved)
  1451                                  			mint	int23						;17 (reserved)
  1452                                  			mint	int24						;18 (reserved)
  1453                                  			mint	int25						;19 (reserved)
  1454                                  			mint	int26						;1a (reserved)
  1455                                  			mint	int27						;1b (reserved)
  1456                                  			mint	int28						;1c (reserved)
  1457                                  			mint	int29						;1d (reserved)
  1458                                  			mint	int30						;1e (reserved)
  1459                                  			mint	int31						;1f (reserved)
  1460                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1461                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1462                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1463                                  			mtrap	com2						;23 IRQ3 com2
  1464                                  			mtrap	com1						;24 IRQ4 com1
  1465                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1466                                  			mtrap	diskette					;26 IRQ6 diskette
  1467                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1468                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1469                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1470                                  			mtrap	irq10						;2a IRQA (reserved)
  1471                                  			mtrap	irq11						;2b IRQB (reserved)
  1472                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1473                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1474                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1475                                  			mtrap	irq15						;2f IRQF (reserved)
  1476                                  			mtrap	svc						;30 OS services
  1477                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1478                                  ;=======================================================================================================================
  1479                                  ;
  1480                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1481                                  ;
  1482                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1483                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1484                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1485                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1486                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1487                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1488                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1489                                  ;
  1490                                  ;=======================================================================================================================
  1491                                  section			kernel	vstart=0h					;data offsets relative to 0
  1492                                  			cpu	386						;allow 80386 instructions
  1493                                  			bits	32						;this is 32-bit code
  1494                                  ;=======================================================================================================================
  1495                                  ;
  1496                                  ;	CPU Interrupt Handlers
  1497                                  ;
  1498                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1499                                  ;	of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1500                                  ;
  1501                                  ;=======================================================================================================================
  1502                                  ;-----------------------------------------------------------------------------------------------------------------------
  1503                                  ;
  1504                                  ;	INT0	Divide By Zero
  1505                                  ;
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  			menter	dividebyzero					;divide by zero
  1508                                  			push	0						;store interrupt nbr
  1509                                  			push	czIntDivideByZero				;store message offset
  1510                                  			jmp	ReportInterrupt					;report interrupt
  1511                                  ;-----------------------------------------------------------------------------------------------------------------------
  1512                                  ;
  1513                                  ;	INT1	Single Step
  1514                                  ;
  1515                                  ;-----------------------------------------------------------------------------------------------------------------------
  1516                                  			menter	singlestep					;single step
  1517                                  			push	1						;store interrupt nbr
  1518                                  			push	czIntSingleStep					;store message offset
  1519                                  			jmp	ReportInterrupt					;report interrupt
  1520                                  ;-----------------------------------------------------------------------------------------------------------------------
  1521                                  ;
  1522                                  ;	INT2	Non-Maskable Interrupt
  1523                                  ;
  1524                                  ;-----------------------------------------------------------------------------------------------------------------------
  1525                                  			menter	nmi						;non-maskable
  1526                                  			push	2						;store interrupt nbr
  1527                                  			push	czIntNonMaskable				;store message offset
  1528                                  			jmp	ReportInterrupt					;report interrupt
  1529                                  ;-----------------------------------------------------------------------------------------------------------------------
  1530                                  ;
  1531                                  ;	INT3	Break
  1532                                  ;
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  			menter	break						;break
  1535                                  			push	3						;store interrupt nbr
  1536                                  			push	czIntBreak					;store message offset
  1537                                  			jmp	ReportInterrupt					;report interrupt
  1538                                  ;-----------------------------------------------------------------------------------------------------------------------
  1539                                  ;
  1540                                  ;	INT4	Into
  1541                                  ;
  1542                                  ;-----------------------------------------------------------------------------------------------------------------------
  1543                                  			menter	into						;into
  1544                                  			push	4						;store interrupt nbr
  1545                                  			push	czIntInto					;store message offset
  1546                                  			jmp	ReportInterrupt					;report interrupt
  1547                                  ;-----------------------------------------------------------------------------------------------------------------------
  1548                                  ;
  1549                                  ;	INT5	Bounds
  1550                                  ;
  1551                                  ;-----------------------------------------------------------------------------------------------------------------------
  1552                                  			menter	bounds						;bounds
  1553                                  			push	5						;store interrupt nbr
  1554                                  			push	czIntBounds					;store message offset
  1555                                  			jmp	ReportInterrupt					;report interrupt
  1556                                  ;-----------------------------------------------------------------------------------------------------------------------
  1557                                  ;
  1558                                  ;	INT6	Bad Operation Code
  1559                                  ;
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                  			menter	badopcode					;bad opcode interrupt
  1562                                  			push	6						;store interrupt nbr
  1563                                  			push	czIntBadOpCode					;store message offset
  1564                                  			jmp	ReportInterrupt					;report interrupt
  1565                                  ;-----------------------------------------------------------------------------------------------------------------------
  1566                                  ;
  1567                                  ;	INT7	No Coprocessor
  1568                                  ;
  1569                                  ;-----------------------------------------------------------------------------------------------------------------------
  1570                                  			menter	nocoproc					;no coprocessor interrupt
  1571                                  			push	7						;store interrupt nbr
  1572                                  			push	czIntNoCoprocessor				;store message offset
  1573                                  			jmp	ReportInterrupt					;report interrupt
  1574                                  ;-----------------------------------------------------------------------------------------------------------------------
  1575                                  ;
  1576                                  ;	INT8	Double Fault
  1577                                  ;
  1578                                  ;-----------------------------------------------------------------------------------------------------------------------
  1579                                  			menter	doublefault					;doublefault interrupt
  1580                                  			push	8						;store interrupt nbr
  1581                                  			push	czIntDoubleFault				;store message offset
  1582                                  			jmp	ReportInterrupt					;report interrupt
  1583                                  ;-----------------------------------------------------------------------------------------------------------------------
  1584                                  ;
  1585                                  ;	INT9	Operand
  1586                                  ;
  1587                                  ;-----------------------------------------------------------------------------------------------------------------------
  1588                                  			menter	operand						;operand interrupt
  1589                                  			push	9						;store interrupt nbr
  1590                                  			push	czIntOperand					;store message offset
  1591                                  			jmp	ReportInterrupt					;report interrupt
  1592                                  ;-----------------------------------------------------------------------------------------------------------------------
  1593                                  ;
  1594                                  ;	INT10	Bad Task State Segment
  1595                                  ;
  1596                                  ;-----------------------------------------------------------------------------------------------------------------------
  1597                                  			menter	badtss						;bad tss interrupt
  1598                                  			push	10						;store interrupt nbr
  1599                                  			push	czIntBadTSS					;store message offset
  1600                                  			jmp	ReportInterrupt					;report interrupt
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;	INT11	Not Present
  1604                                  ;
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  			menter	notpresent					;not present interrupt
  1607                                  			push	11						;store interrupt nbr
  1608                                  			push	czIntNotPresent					;store message offset
  1609                                  			jmp	ReportInterrupt					;report interrupt
  1610                                  ;-----------------------------------------------------------------------------------------------------------------------
  1611                                  ;
  1612                                  ;	INT12	Stack Limit
  1613                                  ;
  1614                                  ;-----------------------------------------------------------------------------------------------------------------------
  1615                                  			menter	stacklimit					;stack limit interrupt
  1616                                  			push	12						;store interrupt nbr
  1617                                  			push	czIntStackLimit					;store message offset
  1618                                  			jmp	ReportInterrupt					;report interrupt
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                  ;
  1621                                  ;	INT13	General Protection Fault
  1622                                  ;
  1623                                  ;-----------------------------------------------------------------------------------------------------------------------
  1624                                  			menter	protection					;protection fault interrupt
  1625                                  			push	13						;store interrupt nbr
  1626                                  			push	czIntProtection					;store message offset
  1627                                  			jmp	ReportInterrupt					;report interrupt
  1628                                  ;-----------------------------------------------------------------------------------------------------------------------
  1629                                  ;
  1630                                  ;	INT14	Reserved
  1631                                  ;
  1632                                  ;-----------------------------------------------------------------------------------------------------------------------
  1633                                  			menter	int14						;(reserved)
  1634                                  			push	14						;store interrupt nbr
  1635                                  			push	czIntReserved					;store message offset
  1636                                  			jmp	ReportInterrupt					;report interrupt
  1637                                  ;-----------------------------------------------------------------------------------------------------------------------
  1638                                  ;
  1639                                  ;	INT15	Reserved
  1640                                  ;
  1641                                  ;-----------------------------------------------------------------------------------------------------------------------
  1642                                  			menter	int15						;(reserved)
  1643                                  			push	15						;store interrupt nbr
  1644                                  			push	czIntReserved					;store message offset
  1645                                  			jmp	ReportInterrupt					;report interrupt
  1646                                  ;-----------------------------------------------------------------------------------------------------------------------
  1647                                  ;
  1648                                  ;	INT16	Coprocessor Calculation
  1649                                  ;
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  			menter	coproccalc					;coprocessor calculation
  1652                                  			push	16						;store interrupt nbr
  1653                                  			push	czIntCoprocessorCalc				;store message offset
  1654                                  			jmp	ReportInterrupt					;report interrupt
  1655                                  ;-----------------------------------------------------------------------------------------------------------------------
  1656                                  ;
  1657                                  ;	INT17	Reserved
  1658                                  ;
  1659                                  ;-----------------------------------------------------------------------------------------------------------------------
  1660                                  			menter	int17						;(reserved)
  1661                                  			push	17						;store interrupt nbr
  1662                                  			push	czIntReserved					;store message offset
  1663                                  			jmp	ReportInterrupt					;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;	INT18	Reserved
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                  			menter	int18						;(reserved)
  1670                                  			push	18						;store interrupt nbr
  1671                                  			push	czIntReserved					;store message offset
  1672                                  			jmp	ReportInterrupt					;report interrupt
  1673                                  ;-----------------------------------------------------------------------------------------------------------------------
  1674                                  ;
  1675                                  ;	INT19	Reserved
  1676                                  ;
  1677                                  ;-----------------------------------------------------------------------------------------------------------------------
  1678                                  			menter	int19						;(reserved)
  1679                                  			push	19						;store interrupt nbr
  1680                                  			push	czIntReserved					;store message offset
  1681                                  			jmp	ReportInterrupt					;report interrupt
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                  ;
  1684                                  ;	INT20	Reserved
  1685                                  ;
  1686                                  ;-----------------------------------------------------------------------------------------------------------------------
  1687                                  			menter	int20						;(reserved)
  1688                                  			push	20						;store interrupt nbr
  1689                                  			push	czIntReserved					;store message offset
  1690                                  			jmp	ReportInterrupt					;report interrupt
  1691                                  ;-----------------------------------------------------------------------------------------------------------------------
  1692                                  ;
  1693                                  ;	INT21	Reserved
  1694                                  ;
  1695                                  ;-----------------------------------------------------------------------------------------------------------------------
  1696                                  			menter	int21						;(reserved)
  1697                                  			push	21						;store interrupt nbr
  1698                                  			push	czIntReserved					;store message offset
  1699                                  			jmp	ReportInterrupt					;report interrupt
  1700                                  ;-----------------------------------------------------------------------------------------------------------------------
  1701                                  ;
  1702                                  ;	INT22	Reserved
  1703                                  ;
  1704                                  ;-----------------------------------------------------------------------------------------------------------------------
  1705                                  			menter	int22						;(reserved)
  1706                                  			push	22						;store interrupt nbr
  1707                                  			push	czIntReserved					;store message offset
  1708                                  			jmp	ReportInterrupt					;report interrupt
  1709                                  ;-----------------------------------------------------------------------------------------------------------------------
  1710                                  ;
  1711                                  ;	INT23	Reserved
  1712                                  ;
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  			menter	int23						;(reserved)
  1715                                  			push	23						;store interrupt nbr
  1716                                  			push	czIntReserved					;store message offset
  1717                                  			jmp	ReportInterrupt					;report interrupt
  1718                                  ;-----------------------------------------------------------------------------------------------------------------------
  1719                                  ;
  1720                                  ;	INT24	Reserved
  1721                                  ;
  1722                                  ;-----------------------------------------------------------------------------------------------------------------------
  1723                                  			menter	int24						;(reserved)
  1724                                  			push	24						;store interrupt nbr
  1725                                  			push	czIntReserved					;store message offset
  1726                                  			jmp	ReportInterrupt					;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;	INT25	Reserved
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                  			menter	int25						;(reserved)
  1733                                  			push	25						;store interrupt nbr
  1734                                  			push	czIntReserved					;store message offset
  1735                                  			jmp	ReportInterrupt					;report interrupt
  1736                                  ;-----------------------------------------------------------------------------------------------------------------------
  1737                                  ;
  1738                                  ;	INT26	Reserved
  1739                                  ;
  1740                                  ;-----------------------------------------------------------------------------------------------------------------------
  1741                                  			menter	int26						;(reserved)
  1742                                  			push	26						;store interrupt nbr
  1743                                  			push	czIntReserved					;store message offset
  1744                                  			jmp	ReportInterrupt					;report interrupt
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                  ;
  1747                                  ;	INT27	Reserved
  1748                                  ;
  1749                                  ;-----------------------------------------------------------------------------------------------------------------------
  1750                                  			menter	int27						;(reserved)
  1751                                  			push	27						;store interrupt nbr
  1752                                  			push	czIntReserved					;store message offset
  1753                                  			jmp	ReportInterrupt					;report interrupt
  1754                                  ;-----------------------------------------------------------------------------------------------------------------------
  1755                                  ;
  1756                                  ;	INT28	Reserved
  1757                                  ;
  1758                                  ;-----------------------------------------------------------------------------------------------------------------------
  1759                                  			menter	int28						;(reserved)
  1760                                  			push	28						;store interrupt nbr
  1761                                  			push	czIntReserved					;store message offset
  1762                                  			jmp	ReportInterrupt					;report interrupt
  1763                                  ;-----------------------------------------------------------------------------------------------------------------------
  1764                                  ;
  1765                                  ;	INT29	Reserved
  1766                                  ;
  1767                                  ;-----------------------------------------------------------------------------------------------------------------------
  1768                                  			menter	int29						;(reserved)
  1769                                  			push	29						;store interrupt nbr
  1770                                  			push	czIntReserved					;store message offset
  1771                                  			jmp	ReportInterrupt					;report interrupt
  1772                                  ;-----------------------------------------------------------------------------------------------------------------------
  1773                                  ;
  1774                                  ;	INT30	Reserved
  1775                                  ;
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  			menter	int30						;(reserved)
  1778                                  			push	30						;store interrupt nbr
  1779                                  			push	czIntReserved					;store message offset
  1780                                  			jmp	ReportInterrupt					;report interrupt
  1781                                  ;-----------------------------------------------------------------------------------------------------------------------
  1782                                  ;
  1783                                  ;	INT31	Reserved
  1784                                  ;
  1785                                  ;-----------------------------------------------------------------------------------------------------------------------
  1786                                  			menter	int31						;(reserved)
  1787                                  			push	31						;store interrupt nbr
  1788                                  			push	czIntReserved					;store message offset
  1789                                  			jmp	ReportInterrupt					;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;	Routine:	ReportInterrupt
  1793                                  ;
  1794                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1795                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1796                                  ;
  1797                                  ;	In:		[esp+16]	eflags					stored by interrupt call
  1798                                  ;			[esp+12]	cs					stored by interrupt call
  1799                                  ;			[esp+8]		eip					stored by interrupt call
  1800                                  ;			[esp+4]		interrupt number (0-31)			stored by push instruction
  1801                                  ;			[esp+0]		error message address			stored by push instructions
  1802                                  ;
  1803                                  ;	Out:		N/A		This routine does not exit.
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ReportInterrupt		push	ds						;save DS at time of interrupt
  1807                                  			push	es						;save ES at time of interrupt
  1808                                  			pushad							;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1809                                  			mov	ebp,esp						;ebp --> [EDI]
  1810                                  ;
  1811                                  ;	Addressability to registers at the time of the interrupt is now established as:
  1812                                  ;
  1813                                  ;			[ebp+56]	eflags
  1814                                  ;			[ebp+52]	cs
  1815                                  ;			[ebp+48]	eip
  1816                                  ;			[ebp+44]	interrupt number (0-31)
  1817                                  ;			[ebp+40]	error message address
  1818                                  ;			[ebp+36]	ds
  1819                                  ;			[ebp+32]	es
  1820                                  ;			[ebp+28]	eax
  1821                                  ;			[ebp+24]	ecx
  1822                                  ;			[ebp+20]	edx
  1823                                  ;			[ebp+16]	ebx
  1824                                  ;			[ebp+12]	esp
  1825                                  ;			[ebp+8]		ebp
  1826                                  ;			[ebp+4]		esi
  1827                                  ;			[ebp+0]		edi
  1828                                  ;
  1829                                  			push	cs						;load code selector ...
  1830                                  			pop	ds						;... into DS
  1831                                  			push	ESELCGA						;load CGA memory selector ...
  1832                                  			pop	es						;... into ES
  1833                                  ;
  1834                                  ;	Display the interrupt report boundary box
  1835                                  ;
  1836                                  			mov	cl,13						;column
  1837                                  			mov	ch,6						;row
  1838                                  			mov	dl,50						;width
  1839                                  			mov	dh,8						;height
  1840                                  			mov	bh,07h						;attribute
  1841                                  			call	DrawTextDialogBox				;draw text dialog box
  1842                                  ;
  1843                                  ;	Display the report header
  1844                                  ;
  1845                                  			mov	cl,15						;column
  1846                                  			mov	ch,7						;row
  1847                                  			mov	esi,czIntHeader					;interrupt message header
  1848                                  			call	SetConsoleString				;draw text string
  1849                                  ;
  1850                                  ;	Display the interrupt description label
  1851                                  ;
  1852                                  			mov	cl,15						;column
  1853                                  			mov	ch,8						;row
  1854                                  			mov	esi,czIntLabel					;interrupt message description lead
  1855                                  			call	SetConsoleString				;draw text string
  1856                                  ;
  1857                                  ;	Display the interrupt number
  1858                                  ;
  1859                                  			mov	eax,[ebp+44]					;interrupt number
  1860                                  			mov	cl,26						;column
  1861                                  			mov	ch,8						;row
  1862                                  			call	PutConsoleHexByte				;draw ASCII hex byte
  1863                                  ;
  1864                                  ;	Display the interrupt name
  1865                                  ;
  1866                                  			mov	cl,29						;column
  1867                                  			mov	ch,8						;row
  1868                                  			mov	esi,[ebp+40]					;interrupt-specific message
  1869                                  			call	SetConsoleString				;display interrupt description
  1870                                  ;
  1871                                  ;	Display the register values header
  1872                                  ;
  1873                                  			mov	cl,15						;column
  1874                                  			mov	ch,10						;row
  1875                                  			mov	esi,czIntRegsHeader				;interrupt registers header
  1876                                  			call	SetConsoleString				;draw text string
  1877                                  ;
  1878                                  ;	Display the EAX register label and value
  1879                                  ;
  1880                                  			mov	cl,15						;column
  1881                                  			mov	ch,11						;row
  1882                                  			mov	esi,czIntEAX					;register EAX label
  1883                                  			call	SetConsoleString				;draw label
  1884                                  			mov	eax,[ebp+28]					;EAX value at interrupt
  1885                                  			mov	cl,19						;column
  1886                                  			mov	ch,11						;row
  1887                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1888                                  ;
  1889                                  ;	Display the ECX register label and value
  1890                                  ;
  1891                                  			mov	cl,15						;column
  1892                                  			mov	ch,12						;row
  1893                                  			mov	esi,czIntECX					;label
  1894                                  			call	SetConsoleString				;draw label
  1895                                  			mov	eax,[ebp+24]					;ECX value at interrupt
  1896                                  			mov	cl,19						;column
  1897                                  			mov	ch,12						;row
  1898                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1899                                  ;
  1900                                  ;	Display the EDX register label and value
  1901                                  ;
  1902                                  			mov	cl,15						;column
  1903                                  			mov	ch,13						;row
  1904                                  			mov	esi,czIntEDX					;label
  1905                                  			call	SetConsoleString				;draw label
  1906                                  			mov	eax,[ebp+20]					;EDX value at interrupt
  1907                                  			mov	cl,19						;column
  1908                                  			mov	ch,13						;row
  1909                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1910                                  ;
  1911                                  ;	Display the EBX register label and value
  1912                                  ;
  1913                                  			mov	cl,15						;column
  1914                                  			mov	ch,14						;row
  1915                                  			mov	esi,czIntEBX					;label
  1916                                  			call	SetConsoleString				;draw label
  1917                                  			mov	eax,[ebp+16]					;EBX value at interrupt
  1918                                  			mov	cl,19						;column
  1919                                  			mov	ch,14						;row
  1920                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1921                                  ;
  1922                                  ;	Display the ESI register label and value
  1923                                  ;
  1924                                  			mov	cl,29						;column
  1925                                  			mov	ch,11						;row
  1926                                  			mov	esi,czIntESI					;label
  1927                                  			call	SetConsoleString				;draw label
  1928                                  			mov	eax,[ebp+4]					;ESI
  1929                                  			mov	cl,33						;column
  1930                                  			mov	ch,11						;row
  1931                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1932                                  ;
  1933                                  ;	Display the EDI register label and value
  1934                                  ;
  1935                                  			mov	cl,29						;column
  1936                                  			mov	ch,12						;row
  1937                                  			mov	esi,czIntEDI					;label
  1938                                  			call	SetConsoleString				;draw label
  1939                                  			mov	eax,[ebp+0]					;EDI
  1940                                  			mov	cl,33						;column
  1941                                  			mov	ch,12						;row
  1942                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1943                                  ;
  1944                                  ;	Display the EBP register label and value
  1945                                  ;
  1946                                  			mov	cl,29						;column
  1947                                  			mov	ch,13						;row
  1948                                  			mov	esi,czIntEBP					;label
  1949                                  			call	SetConsoleString				;draw label
  1950                                  			mov	eax,[ebp+8]					;EBP
  1951                                  			mov	cl,33						;column
  1952                                  			mov	ch,13						;row
  1953                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  1954                                  ;
  1955                                  ;	Display the DS register label and value
  1956                                  ;
  1957                                  			mov	cl,42						;column
  1958                                  			mov	ch,11						;row
  1959                                  			mov	esi,czIntDS					;label
  1960                                  			call	SetConsoleString				;draw label
  1961                                  			xor	eax,eax						;zero register
  1962                                  			mov	ax,[ebp+36]					;DS
  1963                                  			mov	cl,46						;column
  1964                                  			mov	ch,11						;row
  1965                                  			call	PutConsoleHexWord				;draw ASCII hex word
  1966                                  ;
  1967                                  ;	Display the ES register label and value
  1968                                  ;
  1969                                  			mov	cl,42						;column
  1970                                  			mov	ch,12						;row
  1971                                  			mov	esi,czIntES					;label
  1972                                  			call	SetConsoleString				;draw label
  1973                                  			xor	eax,eax						;zero register
  1974                                  			mov	ax,[ebp+32]					;ES
  1975                                  			mov	cl,46						;column
  1976                                  			mov	ch,12						;row
  1977                                  			call	PutConsoleHexWord				;draw ASCII hex word
  1978                                  ;
  1979                                  ;	Display the SS register label and value
  1980                                  ;
  1981                                  			mov	cl,42						;column
  1982                                  			mov	ch,13						;row
  1983                                  			mov	esi,czIntSS					;label
  1984                                  			call	SetConsoleString				;draw label
  1985                                  			xor	eax,eax						;zero register
  1986                                  			mov	ax,ss						;SS
  1987                                  			mov	cl,46						;column
  1988                                  			mov	ch,13						;row
  1989                                  			call	PutConsoleHexWord				;draw ASCII hex word
  1990                                  ;
  1991                                  ;	Display the CS register lable and value
  1992                                  ;
  1993                                  			mov	cl,42						;column
  1994                                  			mov	ch,14						;row
  1995                                  			mov	esi,czIntCS					;label
  1996                                  			call	SetConsoleString				;draw label
  1997                                  			xor	eax,eax						;zero register
  1998                                  			mov	ax,[ebp+52]					;CS
  1999                                  			mov	cl,46						;column
  2000                                  			mov	ch,14						;row
  2001                                  			call	PutConsoleHexWord				;draw ASCII hex word
  2002                                  ;
  2003                                  ;	Display the EFLAGS register label and value
  2004                                  ;
  2005                                  			mov	cl,51						;column
  2006                                  			mov	ch,11						;row
  2007                                  			mov	esi,czIntEFLAGS					;label
  2008                                  			call	SetConsoleString				;draw label
  2009                                  			mov	eax,[ebp+56]					;EFLAGS
  2010                                  			mov	cl,55						;column
  2011                                  			mov	ch,11						;row
  2012                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2013                                  ;
  2014                                  ;	Display the ESP register label and value
  2015                                  ;
  2016                                  			mov	cl,51						;column
  2017                                  			mov	ch,13						;row
  2018                                  			mov	esi,czIntESP					;label
  2019                                  			call	SetConsoleString				;draw label
  2020                                  			mov	eax,[ebp+12]					;ESP
  2021                                  			mov	cl,55						;column
  2022                                  			mov	ch,13						;row
  2023                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2024                                  ;
  2025                                  ;	Display the EIP register label and value
  2026                                  ;
  2027                                  			mov	cl,51						;column
  2028                                  			mov	ch,14						;row
  2029                                  			mov	esi,czIntEIP					;label
  2030                                  			call	SetConsoleString				;draw label
  2031                                  			mov	eax,[ebp+48]					;EIP
  2032                                  			mov	cl,55						;column
  2033                                  			mov	ch,14						;row
  2034                                  			call	PutConsoleHexDword				;draw ASCII hex doubleword
  2035                                  ;
  2036                                  ;	Halt and loop until reset
  2037                                  ;
  2038                                  .10			sti							;enable maskable interrupts
  2039                                  			hlt							;halt processor
  2040                                  			jmp	.10						;resume on interrupt
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;
  2043                                  ;	Processor Interrupt Name Strings
  2044                                  ;
  2045                                  ;-----------------------------------------------------------------------------------------------------------------------
  2046                                  czIntDivideByZero	db	"Division by zero",0
  2047                                  czIntSingleStep		db	"Single step",0
  2048                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  2049                                  czIntBreak		db	"Break",0
  2050                                  czIntInto		db	"Into",0
  2051                                  czIntBounds		db	"Bounds",0
  2052                                  czIntBadOpCode		db	"Bad Operation Code",0
  2053                                  czIntNoCoprocessor	db	"No Coprocessor",0
  2054                                  czIntDoubleFault	db	"Double Fault",0
  2055                                  czIntOperand		db	"Operand",0
  2056                                  czIntBadTSS		db	"Bad Task State Segment",0
  2057                                  czIntNotPresent		db	"Not Present",0
  2058                                  czIntStackLimit		db	"Stack Limit",0
  2059                                  czIntProtection		db	"General Protection Fault",0
  2060                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  2061                                  czIntReserved		db	"Reserved",0
  2062                                  ;-----------------------------------------------------------------------------------------------------------------------
  2063                                  ;
  2064                                  ;	Processor Interrupt Handling Strings
  2065                                  ;
  2066                                  ;-----------------------------------------------------------------------------------------------------------------------
  2067                                  czIntHeader		db	"An unhandled processor interrupt has occurred:",0
  2068                                  czIntLabel		db	"Interrupt #",0
  2069                                  czIntRegsHeader		db	"Registers at the time of the interrupt:",0
  2070                                  czIntEAX		db	"EAX:",0
  2071                                  czIntECX		db	"ECX:",0
  2072                                  czIntEDX		db	"EDX:",0
  2073                                  czIntEBX		db	"EBX:",0
  2074                                  czIntESI		db	"ESI:",0
  2075                                  czIntEDI		db	"EDI:",0
  2076                                  czIntEBP		db	"EBP:",0
  2077                                  czIntESP		db	"ESP:",0
  2078                                  czIntDS			db	" DS:",0
  2079                                  czIntES			db	" ES:",0
  2080                                  czIntSS			db	" SS:",0
  2081                                  czIntCS			db	" CS:",0
  2082                                  czIntEFLAGS		db	"FLG:",0
  2083                                  czIntEIP		db	"EIP:",0
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085                                  ;
  2086                                  ;	Routine:	DrawTextDialogBox
  2087                                  ;
  2088                                  ;	Description:	This routine opens a text-mode dialog box with an ASCII border.
  2089                                  ;
  2090                                  ;	In:		CL	upper left column (0-79)
  2091                                  ;			CH	upper left row (0-24)
  2092                                  ;			DL	column width, excluding border
  2093                                  ;			DH	row height, excluding border
  2094                                  ;			BH	color attribute
  2095                                  ;
  2096                                  ;-----------------------------------------------------------------------------------------------------------------------
  2097                                  DrawTextDialogBox	push	ecx						;save non-volatile regs
  2098                                  			push	esi						;
  2099                                  			push	edi						;
  2100                                  			push	es						;
  2101                                  			push	ESELCGA						;load CGA selector ...
  2102                                  			pop	es						;... into ES
  2103                                  ;
  2104                                  ;	Compute target display offset
  2105                                  ;
  2106                                  			xor	eax,eax						;zero register
  2107                                  			mov	al,ch						;row
  2108                                  			mov	ah,ECONROWBYTES					;mulitplicand
  2109                                  			mul	ah						;row offset
  2110                                  			add	al,cl						;add column
  2111                                  			adc	ah,0						;add overflow
  2112                                  			add	al,cl						;add column
  2113                                  			adc	ah,0						;add overflow
  2114                                  			mov	edi,eax						;target row offset
  2115                                  ;
  2116                                  ;	Display top border row
  2117                                  ;
  2118                                  			push	edi						;save target row offset
  2119                                  			mov	ah,bh						;attribute
  2120                                  			mov	al,EASCIIBORDSGLUPRLFT				;upper-left single border
  2121                                  			stosw							;display character and attribute
  2122                                  			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2123                                  			xor	ecx,ecx						;zero register
  2124                                  			mov	cl,dl						;width, excluding border
  2125                                  			rep	stosw						;display horizontal border
  2126                                  			mov	al,EASCIIBORDSGLUPRRGT				;upper-right single border
  2127                                  			stosw							;display character and attribute
  2128                                  			pop	edi						;restore target row offset
  2129                                  			add	edi,ECONROWBYTES				;next row
  2130                                  ;
  2131                                  ;	Display dialog box body rows
  2132                                  ;
  2133                                  			xor	ecx,ecx						;zero register
  2134                                  			mov	cl,dh						;height, excluding border
  2135                                  .10			push	ecx						;save remaining rows
  2136                                  			push	edi						;save target row offset
  2137                                  			mov	ah,bh						;attribute
  2138                                  			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2139                                  			stosw							;display character and attribute
  2140                                  			mov	al,EASCIISPACE					;space
  2141                                  			xor	ecx,ecx						;zero register
  2142                                  			mov	cl,dl						;width, excluding border
  2143                                  			rep	stosw						;display row
  2144                                  			mov	al,EASCIIBORDSGLVERT				;vertical single border
  2145                                  			stosw							;display character and attribute
  2146                                  			pop	edi						;restore target row offset
  2147                                  			add	edi,ECONROWBYTES				;next row
  2148                                  			pop	ecx						;remaining rows
  2149                                  			loop	.10						;next row
  2150                                  ;
  2151                                  ;	Display bottom border row
  2152                                  ;
  2153                                  			push	edi						;save target row offset
  2154                                  			mov	ah,bh						;attribute
  2155                                  			mov	al,EASCIIBORDSGLLWRLFT				;lower-left single border
  2156                                  			stosw							;display character and attribute
  2157                                  			mov	al,EASCIIBORDSGLHORZ				;horizontal single border
  2158                                  			xor	ecx,ecx						;zero register
  2159                                  			mov	cl,dl						;width, excluding border
  2160                                  			rep	stosw						;display horizontal border
  2161                                  			mov	al,EASCIIBORDSGLLWRRGT				;lower-right single border
  2162                                  			stosw							;display character and attribute
  2163                                  			pop	edi						;restore target row offset
  2164                                  			add	edi,ECONROWBYTES				;next row
  2165                                  ;
  2166                                  ;	Restore and return
  2167                                  ;
  2168                                  			pop	es						;restore non-volatile regs
  2169                                  			pop	edi						;
  2170                                  			pop	esi						;
  2171                                  			pop	ecx						;
  2172                                  			ret							;return
  2173                                  ;=======================================================================================================================
  2174                                  ;
  2175                                  ;	Hardware Device Interupts
  2176                                  ;
  2177                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2178                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2179                                  ;	(BX=2028h).
  2180                                  ;
  2181                                  ;=======================================================================================================================
  2182                                  ;-----------------------------------------------------------------------------------------------------------------------
  2183                                  ;
  2184                                  ;	IRQ0	Clock Tick Interrupt
  2185                                  ;
  2186                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2187                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2188                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2189                                  ;
  2190                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2191                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2192                                  ;
  2193                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2194                                  ;	zero, the floppy disk motors are turned off.
  2195                                  ;
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                  			menter	clocktick					;clock tick interrupt
  2198                                  			push	eax						;save modified regs
  2199                                  			push	edx						;
  2200                                  			push	ds						;
  2201                                  ;
  2202                                  ;	Update the clock tick count and the elapsed days as needed
  2203                                  ;
  2204                                  			push	ESELDAT						;load OS data selector ...
  2205                                  			pop	ds						;... into data segment register
  2206                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  2207                                  			inc	eax						;increment clock ticks
  2208                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  2209                                  			jb	irq0.10						;no, skip ahead
  2210                                  			inc	byte [wbClockDays]				;increment clock days
  2211                                  			xor	eax,eax						;reset clock ticks
  2212                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  2213                                  ;
  2214                                  ;	Decrement floppy disk motor timeout
  2215                                  ;
  2216                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  2217                                  			je	irq0.20						;yes, skip ahead
  2218                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  2219                                  			jnz	irq0.20						;skip ahead if non-zero
  2220                                  ;
  2221                                  ;	Turn off the floppy disk motor if appropriate
  2222                                  ;
  2223                                  			sti							;enable maskable interrupts
  2224                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  2225                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  2226                                  			in	al,dx						;FDC main status byte
  2227                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  2228                                  			jnz	irq0.15						;wait while busy
  2229                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  2230                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  2231                                  			mov	dh,EFDCPORTHI					;fdc port hi
  2232                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  2233                                  			out	dx,al						;turn motor off
  2234                                  ;
  2235                                  ;	Signal the end of the hardware interrupt
  2236                                  ;
  2237                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2238                                  ;
  2239                                  ;	Restore and return
  2240                                  ;
  2241                                  			pop	ds						;restore modified regs
  2242                                  			pop	edx						;
  2243                                  			pop	eax						;
  2244                                  			iretd							;return
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                  ;
  2247                                  ;	IRQ1	Keyboard Interrupt
  2248                                  ;
  2249                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2250                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2251                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2252                                  ;	ALL modified registers upon return.
  2253                                  ;
  2254                                  ;-----------------------------------------------------------------------------------------------------------------------
  2255                                  			menter	keyboard					;keyboard interrrupt
  2256                                  			push	eax						;save non-volatile regs
  2257                                  			push	ebx						;
  2258                                  			push	ecx						;
  2259                                  			push	esi						;
  2260                                  			push	ds						;
  2261                                  			push	ESELDAT						;load OS data selector ...
  2262                                  			pop	ds						;... into data segment register
  2263                                  			xor	al,al						;zero
  2264                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  2265                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  2266                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  2267                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  2268                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  2269                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  2270                                  			mov	al,' '						;space
  2271                                  			mov	[wbConsoleChar],al				;set character to space
  2272                                  			mov	al,EKEYFTIMEOUT					;controller timeout flag
  2273                                  			not	al						;controller timeout mask
  2274                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  2275                                  			mov	bl,[wbConsoleShift]				;shift flags
  2276                                  			mov	bh,[wbConsoleLock]				;lock flags
  2277                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2278                                  			jz	irq1.140					;yes, skip ahead
  2279                                  			in	al,EKEYBPORTDATA				;read scan code 0
  2280                                  			mov	[wbConsoleScan0],al				;save scan code 0
  2281                                  			mov	ah,al						;copy scan code 0
  2282                                  			mov	al,EKEYFSHIFTLEFT				;left shift flag
  2283                                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  2284                                  			je	irq1.30						;yes, set flag
  2285                                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  2286                                  			je	irq1.40						;yes, reset flag
  2287                                  			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  2288                                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  2289                                  			je	irq1.30						;yes, set flag
  2290                                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  2291                                  			je	irq1.40						;yes, reset flag
  2292                                  			mov	al,EKEYFCTRLLEFT				;left control flag
  2293                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2294                                  			je	irq1.30						;yes, set flag
  2295                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2296                                  			je	irq1.40						;yes, reset flag
  2297                                  			mov	al,EKEYFALTLEFT					;left alt flag
  2298                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2299                                  			je	irq1.30						;yes, set flag
  2300                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2301                                  			je	irq1.40						;yes, reset flag
  2302                                  			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  2303                                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  2304                                  			je	irq1.50						;yes, toggle lamps and flags
  2305                                  			mov	al,EKEYFLOCKNUM					;num-lock flag
  2306                                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  2307                                  			je	irq1.50						;yes, toggle lamps and flags
  2308                                  			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  2309                                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  2310                                  			je	irq1.50						;yes, toggle lamps and flags
  2311                                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  2312                                  			jne	irq1.70 					;no, skip ahead
  2313                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2314                                  			jz	irq1.140					;yes, skip ahead
  2315                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2316                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2317                                  			mov	ah,al						;copy scan code 1
  2318                                  			mov	al,EKEYFCTRLRIGHT				;right control flag
  2319                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  2320                                  			je	irq1.30						;yes, set flag
  2321                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  2322                                  			je	irq1.40						;yes, reset flag
  2323                                  			mov	al,EKEYFALTRIGHT				;right alt flag
  2324                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  2325                                  			je	irq1.30						;yes, set flag
  2326                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  2327                                  			je	irq1.40						;yes, reset flag
  2328                                  			cmp	ah,EKEYBSLASH					;slash down code?
  2329                                  			je	irq1.80						;yes, skip ahead
  2330                                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  2331                                  			je	irq1.80						;yes, skip ahead
  2332                                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  2333                                  			je	irq1.10						;yes, continue
  2334                                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  2335                                  			jne	irq1.20						;no, skip ahead
  2336                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  2337                                  			jz	irq1.140					;yes, skip ahead
  2338                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2339                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2340                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2341                                  			jz	irq1.140					;yes, skip ahead
  2342                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2343                                  			mov	[wbConsoleScan3],al				;read scan code 3
  2344                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  2345                                  irq1.30			or	bl,al						;set shift flag
  2346                                  			jmp	irq1.60						;skip ahead
  2347                                  irq1.40			not	al						;convert flag to mask
  2348                                  			and	bl,al						;reset shift flag
  2349                                  			jmp	irq1.60						;skip ahead
  2350                                  irq1.50			xor	bh,al						;toggle lock flag
  2351                                  			call	SetKeyboardLamps				;update keyboard lamps
  2352                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  2353                                  			mov	[wbConsoleLock],bh				;save lock flags
  2354                                  			call	PutConsoleOIAShift				;update OIA indicators
  2355                                  			jmp	irq1.150					;finish keyboard handling
  2356                                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2357                                  			jne	irq1.80						;no continue
  2358                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2359                                  			jz	irq1.140					;yes, skip ahead
  2360                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2361                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2362                                  			mov	ah,al						;copy scan code 1
  2363                                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2364                                  			jne	irq1.150					;no, finish keyboard handling
  2365                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2366                                  			jz	irq1.140					;yes, skip ahead
  2367                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2368                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2369                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2370                                  			jz	irq1.140					;yes, skip ahead
  2371                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2372                                  			mov	[wbConsoleScan3],al				;save scan code 3
  2373                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2374                                  			jz	irq1.140					;yes, skip ahead
  2375                                  			in	al,EKEYBPORTDATA				;read scan code 4
  2376                                  			mov	[wbConsoleScan4],al				;save scan code 4
  2377                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2378                                  			jz	irq1.140					;yes, skip ahead
  2379                                  			in	al,EKEYBPORTDATA				;read scan code 5
  2380                                  			mov	[wbConsoleScan5],al				;save scan code 5
  2381                                  			jmp	irq1.150					;continue
  2382                                  irq1.80			xor	al,al						;assume no ASCII translation
  2383                                  			test	ah,EKEYBUP					;release code?
  2384                                  			jnz	irq1.130					;yes, skip ahead
  2385                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  2386                                  			test	bl,EKEYFSHIFT					;either shift key down?
  2387                                  			jz	irq1.90						;no, skip ahead
  2388                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  2389                                  irq1.90			movzx	ecx,ah						;scan code offset
  2390                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  2391                                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2392                                  			jz	irq1.100					;no skip ahead
  2393                                  			mov	cl,al						;copy ASCII code
  2394                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2395                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2396                                  			jb	irq1.100					;yes, skip ahead
  2397                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2398                                  			ja	irq1.100					;yes, skip ahead
  2399                                  			xor	al,EASCIICASE					;switch case
  2400                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2401                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2402                                  			test	ah,EKEYBUP					;release scan-code?
  2403                                  			jz	irq1.120					;no, skip ahead
  2404                                  			mov	edx,EMSGKEYUP					;key-up event
  2405                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  2406                                  			or	edx,eax						;msg id and codes
  2407                                  			xor	ecx,ecx						;null param
  2408                                  			push	eax						;save codes
  2409                                  			call	PutMessage					;put message to console
  2410                                  			pop	eax						;restore codes
  2411                                  			test	al,al						;ASCII translation?
  2412                                  			jz	irq1.130					;no, skip ahead
  2413                                  			mov	edx,EMSGKEYCHAR					;key-character event
  2414                                  			and	eax,0FFFFh					;clear high-order word
  2415                                  			or	edx,eax						;msg id and codes
  2416                                  			xor	ecx,ecx						;null param
  2417                                  			call	PutMessage					;put message to console
  2418                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  2419                                  irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2420                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  2421                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  2422                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2423                                  			pop	ds						;restore non-volatile regs
  2424                                  			pop	esi						;
  2425                                  			pop	ecx						;
  2426                                  			pop	ebx						;
  2427                                  			pop	eax						;
  2428                                  			iretd							;return
  2429                                  ;-----------------------------------------------------------------------------------------------------------------------
  2430                                  ;	Scan-Code to ASCII Translation Tables
  2431                                  ;-----------------------------------------------------------------------------------------------------------------------
  2432                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2433                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2434                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2435                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2436                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2437                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2438                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2439                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2440                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2441                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2442                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2443                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2444                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2445                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2446                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2447                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2448                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2449                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2450                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2451                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2452                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2453                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2454                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2455                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2456                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2457                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2458                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2459                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2460                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2461                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2462                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2463                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2464                                  ;-----------------------------------------------------------------------------------------------------------------------
  2465                                  ;
  2466                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2467                                  ;
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                  			menter	iochannel					;secondary 8259A cascade
  2470                                  			push	eax						;save modified regs
  2471                                  			jmp	hwint						;end interrupt and return
  2472                                  ;-----------------------------------------------------------------------------------------------------------------------
  2473                                  ;
  2474                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2475                                  ;
  2476                                  ;-----------------------------------------------------------------------------------------------------------------------
  2477                                  			menter	com2						;serial port 2 interrupt
  2478                                  			push	eax						;save modified regs
  2479                                  			jmp	hwint						;end interrupt and return
  2480                                  ;-----------------------------------------------------------------------------------------------------------------------
  2481                                  ;
  2482                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2483                                  ;
  2484                                  ;-----------------------------------------------------------------------------------------------------------------------
  2485                                  			menter	com1						;serial port 1 interrupt
  2486                                  			push	eax						;save modified regs
  2487                                  			jmp	hwint						;end interrupt and return
  2488                                  ;-----------------------------------------------------------------------------------------------------------------------
  2489                                  ;
  2490                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2491                                  ;
  2492                                  ;-----------------------------------------------------------------------------------------------------------------------
  2493                                  			menter	lpt2						;parallel port 2 interrupt
  2494                                  			push	eax						;save modified regs
  2495                                  			jmp	hwint						;end interrupt and return
  2496                                  ;-----------------------------------------------------------------------------------------------------------------------
  2497                                  ;
  2498                                  ;	IRQ6	Diskette Hardware Interrupt
  2499                                  ;
  2500                                  ;-----------------------------------------------------------------------------------------------------------------------
  2501                                  			menter	diskette					;floppy disk interrupt
  2502                                  			push	eax						;save non-volatile regs
  2503                                  			push	ds						;
  2504                                  			push	ESELDAT						;load OS data selector ...
  2505                                  			pop	ds						;... into DS register
  2506                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2507                                  			or	al,10000000b					;set IRQ flag
  2508                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  2509                                  			pop	ds						;restore non-volatile regs
  2510                                  			jmp	hwint						;end primary PIC interrupt
  2511                                  ;-----------------------------------------------------------------------------------------------------------------------
  2512                                  ;
  2513                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2514                                  ;
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516                                  			menter	lpt1						;parallel port 1 interrupt
  2517                                  			push	eax						;save modified regs
  2518                                  			jmp	hwint						;end interrupt and return
  2519                                  ;-----------------------------------------------------------------------------------------------------------------------
  2520                                  ;
  2521                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2522                                  ;
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  			menter	rtclock						;real-time clock interrupt
  2525                                  			push	eax						;save modified regs
  2526                                  			jmp	hwwint						;end interrupt and return
  2527                                  ;-----------------------------------------------------------------------------------------------------------------------
  2528                                  ;
  2529                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2530                                  ;
  2531                                  ;-----------------------------------------------------------------------------------------------------------------------
  2532                                  			menter	retrace						;CGA vertical retrace interrupt
  2533                                  			push	eax						;save modified regs
  2534                                  			jmp	hwwint						;end interrupt and return
  2535                                  ;-----------------------------------------------------------------------------------------------------------------------
  2536                                  ;
  2537                                  ;	IRQ10	Reserved Hardware Interrupt
  2538                                  ;
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  			menter	irq10						;reserved
  2541                                  			push	eax						;save modified regs
  2542                                  			jmp	hwwint						;end interrupt and return
  2543                                  ;-----------------------------------------------------------------------------------------------------------------------
  2544                                  ;
  2545                                  ;	IRQ11	Reserved Hardware Interrupt
  2546                                  ;
  2547                                  ;-----------------------------------------------------------------------------------------------------------------------
  2548                                  			menter	irq11						;reserved
  2549                                  			push	eax						;save modified regs
  2550                                  			jmp	hwwint						;end interrupt and return
  2551                                  ;-----------------------------------------------------------------------------------------------------------------------
  2552                                  ;
  2553                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2554                                  ;
  2555                                  ;-----------------------------------------------------------------------------------------------------------------------
  2556                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2557                                  			push	eax						;save modified regs
  2558                                  			jmp	hwwint						;end interrupt and return
  2559                                  ;-----------------------------------------------------------------------------------------------------------------------
  2560                                  ;
  2561                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2562                                  ;
  2563                                  ;-----------------------------------------------------------------------------------------------------------------------
  2564                                  			menter	coprocessor					;coprocessor interrupt
  2565                                  			push	eax						;save modified regs
  2566                                  			jmp	hwwint						;end interrupt and return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;
  2569                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2570                                  ;
  2571                                  ;-----------------------------------------------------------------------------------------------------------------------
  2572                                  			menter	fixeddisk					;fixed disk interrupt
  2573                                  			push	eax						;save modified regs
  2574                                  			jmp	hwwint						;end interrupt and return
  2575                                  ;-----------------------------------------------------------------------------------------------------------------------
  2576                                  ;
  2577                                  ;	IRQ15	Reserved Hardware Interrupt
  2578                                  ;
  2579                                  ;-----------------------------------------------------------------------------------------------------------------------
  2580                                  			menter	irq15						;reserved
  2581                                  			push	eax						;save modified regs
  2582                                  			jmp	hwwint						;end interrupt and return
  2583                                  ;-----------------------------------------------------------------------------------------------------------------------
  2584                                  ;
  2585                                  ;	Exit from hardware interrupt
  2586                                  ;
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2589                                  			jmp	hwint90						;skip ahead
  2590                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2591                                  hwint90			pop	eax						;restore modified regs
  2592                                  			iretd							;return from interrupt
  2593                                  ;-----------------------------------------------------------------------------------------------------------------------
  2594                                  ;
  2595                                  ;	INT 30h Operating System Software Service Interrupt
  2596                                  ;
  2597                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2598                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2599                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2600                                  ;	the entry address of the specific function from a table.
  2601                                  ;
  2602                                  ;-----------------------------------------------------------------------------------------------------------------------
  2603                                  			menter	svc
  2604                                  			cmp	al,maxtsvc					;is our function out of range?
  2605                                  			jae	svc90						;yes, skip ahead
  2606                                  			movzx	eax,al						;function
  2607                                  			shl	eax,2						;offset into table
  2608                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2609                                  svc90			iretd							;return from interrupt
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  ;
  2612                                  ;	Service Request Table
  2613                                  ;
  2614                                  ;
  2615                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2616                                  ;
  2617                                  ;-----------------------------------------------------------------------------------------------------------------------
  2618                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2619                                  			tsvce	CompareMemory					;compare memory
  2620                                  			tsvce	GetConsoleString				;get string input
  2621                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2622                                  			tsvce	PutConsoleString				;tty output asciiz string
  2623                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2624                                  			tsvce	UpperCaseString					;upper-case string
  2625                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;	Service Request Macros
  2629                                  ;
  2630                                  ;	These macros provide positional parameterization of service request calls.
  2631                                  ;
  2632                                  ;-----------------------------------------------------------------------------------------------------------------------
  2633                                  %macro			clearConsoleScreen 0
  2634                                  			mov	al,eClearConsoleScreen				;function code
  2635                                  			int	_svc						;invoke OS service
  2636                                  %endmacro
  2637                                  %macro			compareMemory 0
  2638                                  			mov	al,eCompareMemory				;function code
  2639                                  			int	_svc						;invoke OS service
  2640                                  %endmacro
  2641                                  %macro			getConsoleString 4
  2642                                  			mov	edx,%1						;buffer address
  2643                                  			mov	ecx,%2						;max characters
  2644                                  			mov	bh,%3						;echo indicator
  2645                                  			mov	bl,%4						;terminator
  2646                                  			mov	al,eGetConsoleString				;function code
  2647                                  			int	_svc						;invoke OS service
  2648                                  %endmacro
  2649                                  %macro			placeCursor 0
  2650                                  			mov	al,ePlaceCursor					;function code
  2651                                  			int	_svc						;invoke OS service
  2652                                  %endmacro
  2653                                  %macro			putConsoleString 1
  2654                                  			mov	edx,%1						;string address
  2655                                  			mov	al,ePutConsoleString				;function code
  2656                                  			int	_svc						;invoke OS service
  2657                                  %endmacro
  2658                                  %macro			resetSystem 0
  2659                                  			mov	al,eResetSystem					;AL = system reset fn.
  2660                                  			int	_svc						;invoke OS service
  2661                                  %endmacro
  2662                                  %macro			upperCaseString 0
  2663                                  			mov	al,eUpperCaseString				;function code
  2664                                  			int	_svc						;invoke OS service
  2665                                  %endmacro
  2666                                  ;=======================================================================================================================
  2667                                  ;
  2668                                  ;	Kernel Function Library
  2669                                  ;
  2670                                  ;=======================================================================================================================
  2671                                  ;=======================================================================================================================
  2672                                  ;
  2673                                  ;	String Helper Routines
  2674                                  ;
  2675                                  ;	UpperCaseString
  2676                                  ;	CompareMemory
  2677                                  ;
  2678                                  ;=======================================================================================================================
  2679                                  ;-----------------------------------------------------------------------------------------------------------------------
  2680                                  ;
  2681                                  ;	Routine:	UpperCaseString
  2682                                  ;
  2683                                  ;	Description:	This routine places all characters in the given string to upper case.
  2684                                  ;
  2685                                  ;	In:		DS:EDX	string address
  2686                                  ;
  2687                                  ;	Out:		EDX	string address
  2688                                  ;
  2689                                  ;-----------------------------------------------------------------------------------------------------------------------
  2690                                  UpperCaseString		push	esi						;save non-volatile regs
  2691                                  			mov	esi,edx						;string address
  2692                                  			cld							;forward strings
  2693                                  .10			lodsb							;string character
  2694                                  			test	al,al						;null?
  2695                                  			jz	.20						;yes, skip ahead
  2696                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2697                                  			jb	.10						;no, continue
  2698                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2699                                  			ja	.10						;no, continue
  2700                                  			and	al,EASCIICASEMASK				;mask for upper case
  2701                                  			mov	[esi-1],al					;upper character
  2702                                  			jmp	.10						;continue
  2703                                  .20			pop	esi						;restore non-volatile regs
  2704                                  			ret							;return
  2705                                  ;-----------------------------------------------------------------------------------------------------------------------
  2706                                  ;
  2707                                  ;	Routine:	CompareMemory
  2708                                  ;
  2709                                  ;	Description:	This routine compares two byte arrays.
  2710                                  ;
  2711                                  ;	In:		DS:EDX	first source address
  2712                                  ;			DS:EBX	second source address
  2713                                  ;			ECX	comparison length
  2714                                  ;
  2715                                  ;	Out:		EDX	first source address
  2716                                  ;			EBX	second source address
  2717                                  ;			ECX	0	array 1 = array 2
  2718                                  ;				<0	array 1 < array 2
  2719                                  ;				>0	array 1 > array 2
  2720                                  ;
  2721                                  ;-----------------------------------------------------------------------------------------------------------------------
  2722                                  CompareMemory		push	esi						;save non-volatile regs
  2723                                  			push	edi						;
  2724                                  			push	es						;
  2725                                  			push	ds						;copy DS
  2726                                  			pop	es						;... to ES
  2727                                  			mov	esi,edx						;first source address
  2728                                  			mov	edi,ebx						;second source address
  2729                                  			cld							;forward strings
  2730                                  			rep	cmpsb						;compare bytes
  2731                                  			mov	al,0						;default result
  2732                                  			jz	.10						;branch if arrays equal
  2733                                  			mov	al,1						;positive result
  2734                                  			jnc	.10						;branch if target > source
  2735                                  			mov	al,-1						;negative result
  2736                                  .10			movsx	ecx,al						;extend sign
  2737                                  			pop	es						;restore non-volatile regs
  2738                                  			pop	edi						;
  2739                                  			pop	esi						;
  2740                                  			ret							;return
  2741                                  ;=======================================================================================================================
  2742                                  ;
  2743                                  ;	Console Helper Routines
  2744                                  ;
  2745                                  ;	PutConsoleString
  2746                                  ;	GetConsoleString
  2747                                  ;	GetConsoleChar
  2748                                  ;	Yield
  2749                                  ;	PreviousConsoleColumn
  2750                                  ;	NextConsoleColumn
  2751                                  ;	FirstConsoleColumn
  2752                                  ;	NextConsoleRow
  2753                                  ;	PutConsoleChar
  2754                                  ;	PutConsoleOIAShift
  2755                                  ;	PutConsoleOIAChar
  2756                                  ;	PutConsoleHexByte
  2757                                  ;
  2758                                  ;=======================================================================================================================
  2759                                  ;-----------------------------------------------------------------------------------------------------------------------
  2760                                  ;
  2761                                  ;	Routine:	PutConsoleString
  2762                                  ;
  2763                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2764                                  ;			console position as needed.
  2765                                  ;
  2766                                  ;	In:		EDX	source address
  2767                                  ;			DS	OS data selector
  2768                                  ;
  2769                                  ;-----------------------------------------------------------------------------------------------------------------------
  2770                                  PutConsoleString	push	esi						;save non-volatile regs
  2771                                  			mov	esi,edx						;source address
  2772                                  			cld							;forward strings
  2773                                  .10			lodsb							;ASCII character
  2774                                  			or	al,al						;end of string?
  2775                                  			jz	.40						;yes, skip ahead
  2776                                  			cmp	al,EASCIIRETURN					;carriage return?
  2777                                  			jne	.20						;no, skip ahead
  2778                                  			call	FirstConsoleColumn				;move to start of row
  2779                                  			jmp	.10						;next character
  2780                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2781                                  			jne	.30						;no, skip ahead
  2782                                  			call	NextConsoleRow					;move to next row
  2783                                  			jmp	.10						;next character
  2784                                  .30			call	PutConsoleChar					;output character to console
  2785                                  			call	NextConsoleColumn				;advance to next column
  2786                                  			jmp	.10						;next character
  2787                                  .40			pop	esi						;restore non-volatile regs
  2788                                  			ret							;return
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  ;
  2791                                  ;	Routine:	GetConsoleString
  2792                                  ;
  2793                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2794                                  ;
  2795                                  ;	In:		DS:EDX	target buffer address
  2796                                  ;			ECX	maximum number of characters to accept
  2797                                  ;			BH	echo to terminal
  2798                                  ;			BL	terminating character
  2799                                  ;
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  GetConsoleString	push	ecx						;save non-volatile regs
  2802                                  			push	esi						;
  2803                                  			push	edi						;
  2804                                  			push	es						;
  2805                                  			push	ds						;load data segment selector ...
  2806                                  			pop	es						;... into extra segment register
  2807                                  			mov	edi,edx						;edi = target buffer
  2808                                  			push	ecx						;save maximum characters
  2809                                  			xor	al,al						;zero register
  2810                                  			cld							;forward strings
  2811                                  			rep	stosb						;zero fill buffer
  2812                                  			pop	ecx						;maximum characters
  2813                                  			mov	edi,edx						;edi = target buffer
  2814                                  			mov	esi,edx						;esi = target buffer
  2815                                  .10			jecxz	.50						;exit if max-length is zero
  2816                                  .20			call	GetConsoleChar					;al = next input char
  2817                                  			cmp	al,bl						;is this the terminator?
  2818                                  			je	.50						;yes, exit
  2819                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2820                                  			jne	.30						;no, skip ahead
  2821                                  			cmp	esi,edi						;at start of buffer?
  2822                                  			je	.20						;yes, get next character
  2823                                  			dec	edi						;backup target pointer
  2824                                  			mov	byte [edi],0					;zero previous character
  2825                                  			inc	ecx						;increment remaining chars
  2826                                  			test	bh,1						;echo to console?
  2827                                  			jz	.20						;no, get next character
  2828                                  			call	PreviousConsoleColumn				;backup console position
  2829                                  			mov	al,EASCIISPACE					;ASCII space
  2830                                  			call	PutConsoleChar					;write space to console
  2831                                  			call	PlaceCursor					;position the cursor
  2832                                  			jmp	.20						;get next character
  2833                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2834                                  			jb	.20						;no, get another character
  2835                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2836                                  			ja	.20						;no, get another character
  2837                                  			stosb							;store character in buffer
  2838                                  			test	bh,1						;echo to console?
  2839                                  			jz	.40						;no, skip ahead
  2840                                  			call	PutConsoleChar					;write character to console
  2841                                  			call	NextConsoleColumn				;advance console position
  2842                                  			call	PlaceCursor					;position the cursor
  2843                                  .40			dec	ecx						;decrement remaining chars
  2844                                  			jmp	.10						;next
  2845                                  .50			xor	al,al						;null
  2846                                  			stosb							;terminate buffer
  2847                                  			pop	es						;restore non-volatile regs
  2848                                  			pop	edi						;
  2849                                  			pop	esi						;
  2850                                  			pop	ecx						;
  2851                                  			ret							;return
  2852                                  ;-----------------------------------------------------------------------------------------------------------------------
  2853                                  ;
  2854                                  ;	Routine:	GetConsoleChar
  2855                                  ;
  2856                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2857                                  ;
  2858                                  ;	Out:		AL	ASCII character code
  2859                                  ;			AH	keyboard scan code
  2860                                  ;
  2861                                  ;-----------------------------------------------------------------------------------------------------------------------
  2862                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2863                                  GetConsoleChar		call	GetMessage					;get the next message
  2864                                  			or	eax,eax						;do we have a message?
  2865                                  			jz	GetConsoleChar.10				;no, skip ahead
  2866                                  			push	eax						;save key codes
  2867                                  			and	eax,0FFFF0000h					;mask for message type
  2868                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2869                                  			pop	eax						;restore key codes
  2870                                  			jne	GetConsoleChar					;no, try again
  2871                                  			and	eax,0000ffffh					;mask for key codes
  2872                                  			ret							;return
  2873                                  ;-----------------------------------------------------------------------------------------------------------------------
  2874                                  ;
  2875                                  ;	Routine:	Yield
  2876                                  ;
  2877                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2878                                  ;
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  Yield			sti							;enable maskagle interrupts
  2881                                  			hlt							;halt until external interrupt
  2882                                  			ret							;return
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884                                  ;
  2885                                  ;	Routine:	PreviousConsoleColumn
  2886                                  ;
  2887                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2888                                  ;			the column is set to the last position in the row and the row is decremented.
  2889                                  ;
  2890                                  ;	In:		DS	OS data selector
  2891                                  ;
  2892                                  ;-----------------------------------------------------------------------------------------------------------------------
  2893                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2894                                  			or	al,al						;start of row?
  2895                                  			jnz	.10						;no, skip ahead
  2896                                  			mov	ah,[wbConsoleRow]				;current row
  2897                                  			or	ah,ah						;top of screen?
  2898                                  			jz	.20						;yes, exit with no change
  2899                                  			dec	ah						;decrement row
  2900                                  			mov	[wbConsoleRow],ah				;save row
  2901                                  			mov	al,ECONCOLS					;set maximum column
  2902                                  .10			dec	al						;decrement column
  2903                                  			mov	[wbConsoleColumn],al				;save column
  2904                                  .20			ret							;return
  2905                                  ;-----------------------------------------------------------------------------------------------------------------------
  2906                                  ;
  2907                                  ;	Routine:	NextConsoleColumn
  2908                                  ;
  2909                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2910                                  ;			incremented if the end of the current row is reached.
  2911                                  ;
  2912                                  ;	In:		DS	OS data selector
  2913                                  ;
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2916                                  			inc	al						;increment column
  2917                                  			mov	[wbConsoleColumn],al				;save column
  2918                                  			cmp	al,ECONCOLS					;end of row?
  2919                                  			jb	.10						;no, skip ahead
  2920                                  			call	FirstConsoleColumn				;reset column to start of row
  2921                                  			call	NextConsoleRow					;line feed to next row
  2922                                  .10			ret							;return
  2923                                  ;-----------------------------------------------------------------------------------------------------------------------
  2924                                  ;
  2925                                  ;	Routine:	FirstConsoleColumn
  2926                                  ;
  2927                                  ;	Description:	This routine resets the console column to start of the row.
  2928                                  ;
  2929                                  ;	In:		DS	OS data selector
  2930                                  ;
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932                                  FirstConsoleColumn	xor	al,al						;zero column
  2933                                  			mov	[wbConsoleColumn],al				;save column
  2934                                  			ret							;return
  2935                                  ;-----------------------------------------------------------------------------------------------------------------------
  2936                                  ;
  2937                                  ;	Routine:	NextConsoleRow
  2938                                  ;
  2939                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2940                                  ;
  2941                                  ;	In:		DS	OS data selector
  2942                                  ;
  2943                                  ;-----------------------------------------------------------------------------------------------------------------------
  2944                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2945                                  			inc	al						;increment row
  2946                                  			mov	[wbConsoleRow],al				;save row
  2947                                  			cmp	al,ECONROWS					;end of screen?
  2948                                  			jb	.10						;no, skip ahead
  2949                                  			call	ScrollConsoleRow				;scroll up one row
  2950                                  			mov	al,[wbConsoleRow]				;row
  2951                                  			dec	al						;decrement row
  2952                                  			mov	[wbConsoleRow],al				;save row
  2953                                  .10			ret							;return
  2954                                  ;-----------------------------------------------------------------------------------------------------------------------
  2955                                  ;
  2956                                  ;	Routine:	PutConsoleChar
  2957                                  ;
  2958                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2959                                  ;
  2960                                  ;	In:		AL	ASCII character
  2961                                  ;			DS	OS data selector
  2962                                  ;
  2963                                  ;-----------------------------------------------------------------------------------------------------------------------
  2964                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2965                                  			push	es						;
  2966                                  			push	ESELCGA						;load CGA selector ...
  2967                                  			pop	es						;... into extra segment reg
  2968                                  			mov	cl,[wbConsoleColumn]				;column
  2969                                  			mov	ch,[wbConsoleRow]				;row
  2970                                  			call	SetConsoleChar					;put character at row, column
  2971                                  			pop	es						;restore non-volatile regs
  2972                                  			pop	ecx						;
  2973                                  			ret							;return
  2974                                  ;-----------------------------------------------------------------------------------------------------------------------
  2975                                  ;
  2976                                  ;	Routine:	PutConsoleOIAShift
  2977                                  ;
  2978                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2979                                  ;
  2980                                  ;	In:		BL	shift flags
  2981                                  ;			BH	lock flags
  2982                                  ;			DS	OS data selector
  2983                                  ;
  2984                                  ;-----------------------------------------------------------------------------------------------------------------------
  2985                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2986                                  			push	es						;
  2987                                  			push	ESELCGA						;load CGA selector ...
  2988                                  			pop	es						;... into ES register
  2989                                  			mov	ch,ECONOIAROW					;OIA row
  2990                                  			mov	al,EASCIISPACE					;space is default character
  2991                                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  2992                                  			jz	.10						;no, skip ahead
  2993                                  			mov	al,'S'						;yes, indicate with 'S'
  2994                                  .10			mov	cl,14						;indicator column
  2995                                  			call	SetConsoleChar					;display ASCII character
  2996                                  			mov	al,EASCIISPACE					;ASCII space
  2997                                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  2998                                  			jz	.20						;no, skip ahead
  2999                                  			mov	al,'S'						;yes, indicate with 'S'
  3000                                  .20			mov	cl,64						;indicator column
  3001                                  			call	SetConsoleChar					;display ASCII character
  3002                                  			mov	al,EASCIISPACE					;ASCII space
  3003                                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  3004                                  			jz	.30						;no, skip ahead
  3005                                  			mov	al,'C'						;yes, indicate with 'C'
  3006                                  .30			mov	cl,15						;indicator column
  3007                                  			call	SetConsoleChar					;display ASCII character
  3008                                  			mov	al,EASCIISPACE					;ASCII space
  3009                                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  3010                                  			jz	.40						;no, skip ahead
  3011                                  			mov	al,'C'						;yes, indicate with 'C'
  3012                                  .40			mov	cl,63						;indicator column
  3013                                  			call	SetConsoleChar					;display ASCII character
  3014                                  			mov	al,EASCIISPACE					;ASCII space
  3015                                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  3016                                  			jz	.50						;no, skip ahead
  3017                                  			mov	al,'A'						;yes, indicate with 'A'
  3018                                  .50			mov	cl,16						;indicator column
  3019                                  			call	SetConsoleChar					;display ASCII character
  3020                                  			mov	al,EASCIISPACE					;ASCII space
  3021                                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  3022                                  			jz	.60						;no, skip ahead
  3023                                  			mov	al,'A'						;yes, indicate with 'A'
  3024                                  .60			mov	cl,62						;indicator column
  3025                                  			call	SetConsoleChar					;display ASCII character
  3026                                  			mov	al,EASCIISPACE					;ASCII space
  3027                                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  3028                                  			jz	.70						;no, skip ahead
  3029                                  			mov	al,'C'						;yes, indicate with 'C'
  3030                                  .70			mov	cl,78						;indicator column
  3031                                  			call	SetConsoleChar					;display ASCII character
  3032                                  			mov	al,EASCIISPACE					;ASCII space
  3033                                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  3034                                  			jz	.80						;no, skip ahead
  3035                                  			mov	al,'N'						;yes, indicate with 'N'
  3036                                  .80			mov	cl,77						;indicator column
  3037                                  			call	SetConsoleChar					;display ASCII character
  3038                                  			mov	al,EASCIISPACE					;ASCII space
  3039                                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  3040                                  			jz	.90						;no, skip ahead
  3041                                  			mov	al,'S'						;yes, indicate with 'S'
  3042                                  .90			mov	cl,76						;indicator column
  3043                                  			call	SetConsoleChar					;display ASCII character
  3044                                  			pop	es						;restore non-volatile regs
  3045                                  			pop	ecx						;
  3046                                  			ret							;return
  3047                                  ;-----------------------------------------------------------------------------------------------------------------------
  3048                                  ;
  3049                                  ;	Routine:	PutConsoleOIAChar
  3050                                  ;
  3051                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  3052                                  ;
  3053                                  ;	In:		DS	OS data selector
  3054                                  ;
  3055                                  ;-----------------------------------------------------------------------------------------------------------------------
  3056                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  3057                                  			push	ecx						;
  3058                                  			push	esi						;
  3059                                  			push	ds						;
  3060                                  			push	es						;
  3061                                  			push	ESELDAT						;load OS data selector ...
  3062                                  			pop	ds						;... into data segment register
  3063                                  			push	ESELCGA						;load CGA selector ...
  3064                                  			pop	es						;... into extra segment register
  3065                                  			mov	esi,wbConsoleScan0				;scan codes address
  3066                                  			mov	bh,ECONOIAROW					;OIA row
  3067                                  			mov	bl,0						;starting column
  3068                                  			mov	ecx,6						;maximum scan codes
  3069                                  .10			push	ecx						;save remaining count
  3070                                  			mov	ecx,ebx						;row, column
  3071                                  			lodsb							;read scan code
  3072                                  			or	al,al						;scan code present?
  3073                                  			jz	.20						;no, skip ahead
  3074                                  			call	PutConsoleHexByte				;display scan code
  3075                                  			jmp	.30						;continue
  3076                                  .20			mov	al,' '						;ASCII space
  3077                                  			call	SetConsoleChar					;display space
  3078                                  			mov	al,' '						;ASCII space
  3079                                  			call	SetConsoleChar					;display space
  3080                                  .30			add	bl,2						;next column (+2)
  3081                                  			pop	ecx						;restore remaining
  3082                                  			loop	.10						;next code
  3083                                  			mov	al,[wbConsoleChar]				;console ASCII character
  3084                                  			cmp	al,32						;printable? (lower-bounds)
  3085                                  			jb	.40						;no, skip ahead
  3086                                  			cmp	al,126						;printable? (upper-bounds)
  3087                                  			ja	.40						;no, skip ahead
  3088                                  			mov	ch,bh						;OIA row
  3089                                  			mov	cl,40						;character display column
  3090                                  			call	SetConsoleChar					;display ASCII character
  3091                                  .40			pop	es						;restore non-volatile regs
  3092                                  			pop	ds						;
  3093                                  			pop	esi						;
  3094                                  			pop	ecx						;
  3095                                  			pop	ebx						;
  3096                                  			ret							;return
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  ;
  3099                                  ;	Routine:	PutConsoleHexDword
  3100                                  ;
  3101                                  ;	Description:	This routine writes eight ASCII characters to the console representing a doubleword value.
  3102                                  ;
  3103                                  ;	In:		EAX	value
  3104                                  ;			CL	column
  3105                                  ;			CH	row
  3106                                  ;			DS	OS data selector
  3107                                  ;			ES	CGA selector
  3108                                  ;
  3109                                  ;-----------------------------------------------------------------------------------------------------------------------
  3110                                  PutConsoleHexDword	push	eax
  3111                                  			shr	eax,16
  3112                                  			call	PutConsoleHexWord
  3113                                  			pop	eax
  3114                                  			call	PutConsoleHexWord
  3115                                  			ret
  3116                                  ;-----------------------------------------------------------------------------------------------------------------------
  3117                                  ;
  3118                                  ;	Routine:	PutConsoleHexWord
  3119                                  ;
  3120                                  ;	Description:	This routine writes four ASCII characters to the console representing a word value.
  3121                                  ;
  3122                                  ;	In:		EAX	value
  3123                                  ;			CL	column
  3124                                  ;			CH	row
  3125                                  ;			DS	OS data selector
  3126                                  ;			ES	CGA selector
  3127                                  ;
  3128                                  ;-----------------------------------------------------------------------------------------------------------------------
  3129                                  PutConsoleHexWord	push	eax
  3130                                  			shr	eax,8
  3131                                  			call	PutConsoleHexByte
  3132                                  			pop	eax
  3133                                  			call	PutConsoleHexByte
  3134                                  			ret
  3135                                  ;-----------------------------------------------------------------------------------------------------------------------
  3136                                  ;
  3137                                  ;	Routine:	PutConsoleHexByte
  3138                                  ;
  3139                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  3140                                  ;
  3141                                  ;	In:		AL	byte value
  3142                                  ;			CL	column
  3143                                  ;			CH	row
  3144                                  ;			DS	OS data selector
  3145                                  ;			ES	CGA selector
  3146                                  ;
  3147                                  ;-----------------------------------------------------------------------------------------------------------------------
  3148                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  3149                                  			mov	bl,al						;save byte value
  3150                                  			shr	al,4						;hi-order nybble
  3151                                  			or	al,030h						;apply ASCII zone
  3152                                  			cmp	al,03ah						;numeric?
  3153                                  			jb	.10						;yes, skip ahead
  3154                                  			add	al,7						;add ASCII offset for alpha
  3155                                  .10			call	SetConsoleChar					;display ASCII character
  3156                                  			mov	al,bl						;byte value
  3157                                  			and	al,0fh						;lo-order nybble
  3158                                  			or	al,30h						;apply ASCII zone
  3159                                  			cmp	al,03ah						;numeric?
  3160                                  			jb	.20						;yes, skip ahead
  3161                                  			add	al,7						;add ASCII offset for alpha
  3162                                  .20			call	SetConsoleChar					;display ASCII character
  3163                                  			pop	ebx						;restore non-volatile regs
  3164                                  			ret							;return
  3165                                  ;=======================================================================================================================
  3166                                  ;
  3167                                  ;	Message Queue Helper Routines
  3168                                  ;
  3169                                  ;	PutMessage
  3170                                  ;	GetMessage
  3171                                  ;
  3172                                  ;=======================================================================================================================
  3173                                  ;-----------------------------------------------------------------------------------------------------------------------
  3174                                  ;
  3175                                  ;	Routine:	PutMessage
  3176                                  ;
  3177                                  ;	Description:	This routine adda a message to the message queue.
  3178                                  ;
  3179                                  ;	In:		ECX	hi-order data word
  3180                                  ;			EDX	lo-order data word
  3181                                  ;
  3182                                  ;	Out:		CY	0 = success
  3183                                  ;				1 = fail: queue is full
  3184                                  ;
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  PutMessage		push	ds						;save non-volatile regs
  3187                                  			push	ESELMQ						;load task message queue selector ...
  3188                                  			pop	ds						;... into data segment register
  3189                                  			mov	eax,[MQTail]					;tail ptr
  3190                                  			cmp	dword [eax],0					;is queue full?
  3191                                  			stc							;assume failure
  3192                                  			jne	.20						;yes, cannot store
  3193                                  			mov	[eax],edx					;store lo-order data
  3194                                  			mov	[eax+4],ecx					;store hi-order data
  3195                                  			add	eax,8						;next queue element adr
  3196                                  			and	eax,03fch					;at end of queue?
  3197                                  			jnz	.10						;no, skip ahead
  3198                                  			mov	al,8						;reset to top of queue
  3199                                  .10			mov	[MQTail],eax					;save new tail ptr
  3200                                  			clc							;indicate success
  3201                                  .20			pop	ds						;restore non-volatile regs
  3202                                  			ret							;return
  3203                                  ;-----------------------------------------------------------------------------------------------------------------------
  3204                                  ;
  3205                                  ;	Routine:	GetMessage
  3206                                  ;
  3207                                  ;	Description:	This routine reads and removes a message from the message queue.
  3208                                  ;
  3209                                  ;	Out:		EAX	lo-order message data
  3210                                  ;			EDX	hi-order message data
  3211                                  ;
  3212                                  ;			CY	0 = message read
  3213                                  ;				1 = no message to read
  3214                                  ;
  3215                                  ;-----------------------------------------------------------------------------------------------------------------------
  3216                                  GetMessage		push	ebx						;save non-volatile regs
  3217                                  			push	ecx						;
  3218                                  			push	ds						;
  3219                                  			push	ESELMQ						;load message queue selector ...
  3220                                  			pop	ds						;... into data segment register
  3221                                  			mov	ebx,[MQHead]					;head ptr
  3222                                  			mov	eax,[ebx]					;lo-order 32 bits
  3223                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  3224                                  			or	eax,edx						;is queue empty?
  3225                                  			stc							;assume queue is emtpy
  3226                                  			jz	.20						;yes, skip ahead
  3227                                  			xor	ecx,ecx						;store zero
  3228                                  			mov	[ebx],ecx					;... in lo-order dword
  3229                                  			mov	[ebx+4],ecx					;... in hi-order dword
  3230                                  			add	ebx,8						;next queue element
  3231                                  			and	ebx,03fch					;at end of queue?
  3232                                  			jnz	.10						;no, skip ahead
  3233                                  			mov	bl,8						;reset to 1st entry
  3234                                  .10			mov	[MQHead],ebx					;save new head ptr
  3235                                  			clc							;indicate message read
  3236                                  .20			pop	ds						;restore non-volatile regs
  3237                                  			pop	ecx						;
  3238                                  			pop	ebx						;
  3239                                  			ret							;return
  3240                                  ;=======================================================================================================================
  3241                                  ;
  3242                                  ;	Memory-Mapped Video Routines
  3243                                  ;
  3244                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  3245                                  ;
  3246                                  ;	ClearConsoleScreen
  3247                                  ;	ScrollConsoleRow
  3248                                  ;	SetConsoleChar
  3249                                  ;
  3250                                  ;=======================================================================================================================
  3251                                  ;-----------------------------------------------------------------------------------------------------------------------
  3252                                  ;
  3253                                  ;	Routine:	ClearConsoleScreen
  3254                                  ;
  3255                                  ;	Description:	This routine clears the console (CGA) screen.
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  3259                                  			push	edi						;
  3260                                  			push	ds						;
  3261                                  			push	es						;
  3262                                  			push	ESELDAT						;load OS Data selector ...
  3263                                  			pop	ds						;... into DS register
  3264                                  			push	ESELCGA						;load CGA selector ...
  3265                                  			pop	es						;... into ES register
  3266                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  3267                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  3268                                  			xor	edi,edi						;target offset
  3269                                  			cld							;forward strings
  3270                                  			rep	stosd						;reset screen body
  3271                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  3272                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  3273                                  			rep	stosd						;reset OIA line
  3274                                  			xor	al,al						;zero register
  3275                                  			mov	[wbConsoleRow],al				;reset console row
  3276                                  			mov	[wbConsoleColumn],al				;reset console column
  3277                                  			call	PlaceCursor					;place cursor at current position
  3278                                  			pop	es						;restore non-volatile regs
  3279                                  			pop	ds						;
  3280                                  			pop	edi						;
  3281                                  			pop	ecx						;
  3282                                  			ret							;return
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;	Routine:	ScrollConsoleRow
  3286                                  ;
  3287                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  3288                                  ;
  3289                                  ;-----------------------------------------------------------------------------------------------------------------------
  3290                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  3291                                  			push	esi						;
  3292                                  			push	edi						;
  3293                                  			push	ds						;
  3294                                  			push	es						;
  3295                                  			push	ESELCGA						;load CGA video selector ...
  3296                                  			pop	ds						;... into DS
  3297                                  			push	ESELCGA						;load CGA video selector ...
  3298                                  			pop	es						;... into ES
  3299                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  3300                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  3301                                  			xor	edi,edi						;edi = target (line 1)
  3302                                  			cld							;forward strings
  3303                                  			rep	movsd						;move 24 lines up
  3304                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  3305                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  3306                                  			rep	stosd						;clear bottom row
  3307                                  			pop	es						;restore non-volatile regs
  3308                                  			pop	ds						;
  3309                                  			pop	edi						;
  3310                                  			pop	esi						;
  3311                                  			pop	ecx						;
  3312                                  			ret							;return
  3313                                  ;-----------------------------------------------------------------------------------------------------------------------
  3314                                  ;
  3315                                  ;	Routine:	SetConsoleString
  3316                                  ;
  3317                                  ;	Description:	This routine outputs a sequence of ASCII character at the given row and column.
  3318                                  ;
  3319                                  ;	In:		ESI	source offset (DS:)
  3320                                  ;			CL	column
  3321                                  ;			CH	row
  3322                                  ;			ES	CGA selector
  3323                                  ;
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  SetConsoleString	push	esi						;save non-volatile regs
  3326                                  			cld							;forward strings
  3327                                  .10			lodsb							;next ASCII character
  3328                                  			test	al,al						;end of string?
  3329                                  			jz	.20						;yes, branch
  3330                                  			call	SetConsoleChar					;store character
  3331                                  			jmp	.10						;continue
  3332                                  .20			pop	esi						;restore non-volatile regs
  3333                                  			ret							;return
  3334                                  ;-----------------------------------------------------------------------------------------------------------------------
  3335                                  ;
  3336                                  ;	Routine:	SetConsoleChar
  3337                                  ;
  3338                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  3339                                  ;
  3340                                  ;	In:		AL	ASCII character
  3341                                  ;			CL	column
  3342                                  ;			CH	row
  3343                                  ;			ES	CGA selector
  3344                                  ;
  3345                                  ;	Out:		EAX	last target address written (ES:)
  3346                                  ;			CL	column + 1
  3347                                  ;
  3348                                  ;-----------------------------------------------------------------------------------------------------------------------
  3349                                  SetConsoleChar		mov	dl,al						;ASCII character
  3350                                  			movzx	eax,ch						;row
  3351                                  			mov	ah,ECONCOLS					;cols/row
  3352                                  			mul	ah						;row * cols/row
  3353                                  			add	al,cl						;add column
  3354                                  			adc	ah,0						;handle carry
  3355                                  			shl	eax,1						;screen offset
  3356                                  			mov	[es:eax],dl					;store character
  3357                                  			inc	cl						;next column
  3358                                  			ret							;return
  3359                                  ;=======================================================================================================================
  3360                                  ;
  3361                                  ;	Input/Output Routines
  3362                                  ;
  3363                                  ;	These routines read and/or write directly to ports.
  3364                                  ;
  3365                                  ;	PlaceCursor
  3366                                  ;	PutPrimaryEndOfInt
  3367                                  ;	PutSecondaryEndOfInt
  3368                                  ;	ResetSystem
  3369                                  ;	SetKeyboardLamps
  3370                                  ;	WaitForKeyInBuffer
  3371                                  ;	WaitForKeyOutBuffer
  3372                                  ;
  3373                                  ;=======================================================================================================================
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;	Routine:	PlaceCursor
  3377                                  ;
  3378                                  ;	Description:	This routine positions the cursor on the console.
  3379                                  ;
  3380                                  ;	In:		DS	OS data selector
  3381                                  ;
  3382                                  ;-----------------------------------------------------------------------------------------------------------------------
  3383                                  PlaceCursor		push	ecx						;save non-volatile regs
  3384                                  			mov	al,[wbConsoleRow]				;al = row
  3385                                  			mov	ah,ECONCOLS					;ah = cols/row
  3386                                  			mul	ah						;row offset
  3387                                  			add	al,[wbConsoleColumn]				;add column
  3388                                  			adc	ah,0						;add overflow
  3389                                  			mov	ecx,eax						;screen offset
  3390                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  3391                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  3392                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  3393                                  			out	dx,al						;select register
  3394                                  			inc	edx						;data port
  3395                                  			mov	al,ch						;hi-order cursor loc
  3396                                  			out	dx,al						;store hi-order loc
  3397                                  			dec	edx						;register select port
  3398                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  3399                                  			out	dx,al						;select register
  3400                                  			inc	edx						;data port
  3401                                  			mov	al,cl						;lo-order cursor loc
  3402                                  			out	dx,al						;store lo-order loc
  3403                                  			pop	ecx						;restore non-volatile regs
  3404                                  			ret							;return
  3405                                  ;-----------------------------------------------------------------------------------------------------------------------
  3406                                  ;
  3407                                  ;	Routine:	PutPrimaryEndOfInt
  3408                                  ;
  3409                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  3413                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3414                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  3415                                  			ret							;return
  3416                                  ;-----------------------------------------------------------------------------------------------------------------------
  3417                                  ;
  3418                                  ;	Routine:	PutSecondaryEndOfInt
  3419                                  ;
  3420                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3421                                  ;
  3422                                  ;-----------------------------------------------------------------------------------------------------------------------
  3423                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  3424                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3425                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  3426                                  			ret							;return
  3427                                  ;-----------------------------------------------------------------------------------------------------------------------
  3428                                  ;
  3429                                  ;	Routine:	ResetSystem
  3430                                  ;
  3431                                  ;	Description:	This routine restarts the system using the 8042 controller.
  3432                                  ;
  3433                                  ;	Out:		N/A	This routine does not return.
  3434                                  ;
  3435                                  ;-----------------------------------------------------------------------------------------------------------------------
  3436                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  3437                                  			loop	$						;clear interrupts
  3438                                  			mov	al,EKEYBCMDRESET				;mask out bit zero
  3439                                  			out	EKEYBPORTSTAT,al				;drive bit zero low
  3440                                  .10			sti							;enable maskable interrupts
  3441                                  			hlt							;halt until interrupt
  3442                                  			jmp	.10						;repeat until reset kicks in
  3443                                  ;-----------------------------------------------------------------------------------------------------------------------
  3444                                  ;
  3445                                  ;	Routine:	SetKeyboardLamps
  3446                                  ;
  3447                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  3448                                  ;
  3449                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3450                                  ;
  3451                                  ;-----------------------------------------------------------------------------------------------------------------------
  3452                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  3453                                  			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  3454                                  			out	EKEYBPORTDATA,al				;send command to 8042
  3455                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3456                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  3457                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  3458                                  			mov	al,bh						;set/reset lamps value
  3459                                  			out	EKEYBPORTDATA,al				;send lamps value
  3460                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3461                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  3462                                  			ret							;return
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464                                  ;
  3465                                  ;	Routine:	WaitForKeyInBuffer
  3466                                  ;
  3467                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3468                                  ;
  3469                                  ;	Out:		ZF	1 = Input buffer ready
  3470                                  ;				0 = Input buffer not ready after timeout
  3471                                  ;
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3474                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  3475                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  3476                                  			test	al,EKEYBBITIN					;is input buffer still full?
  3477                                  			loopnz	.10						;yes, repeat till timeout
  3478                                  			pop	ecx						;restore non-volatile regs
  3479                                  			ret							;return
  3480                                  ;-----------------------------------------------------------------------------------------------------------------------
  3481                                  ;
  3482                                  ;	Routine:	WaitForKeyOutBuffer
  3483                                  ;
  3484                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3485                                  ;
  3486                                  ;	Out:		ZF	1 = Output buffer has data from controller
  3487                                  ;				0 = Output buffer empty after timeout
  3488                                  ;
  3489                                  ;-----------------------------------------------------------------------------------------------------------------------
  3490                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3491                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  3492                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  3493                                  			test	al,EKEYBBITOUT					;output buffer status bit
  3494                                  			loopz	.10						;loop until output buffer bit
  3495                                  			pop	ecx						;restore non-volatile regs
  3496                                  			ret							;return
  3497                                  ;-----------------------------------------------------------------------------------------------------------------------
  3498                                  ;
  3499                                  ;	End of the Kernel Function Library
  3500                                  ;
  3501                                  ;-----------------------------------------------------------------------------------------------------------------------
  3502                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  3503                                  			db	055h,0AAh					;end of segment
  3504                                  ;=======================================================================================================================
  3505                                  ;
  3506                                  ;	Console Task
  3507                                  ;
  3508                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3509                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3510                                  ;	screen and responds to user commands.
  3511                                  ;
  3512                                  ;=======================================================================================================================
  3513                                  ;-----------------------------------------------------------------------------------------------------------------------
  3514                                  ;
  3515                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3516                                  ;
  3517                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3518                                  ;
  3519                                  ;-----------------------------------------------------------------------------------------------------------------------
  3520                                  section			constack						;console task stack
  3521                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  3522                                  ;-----------------------------------------------------------------------------------------------------------------------
  3523                                  ;
  3524                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3525                                  ;
  3526                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3527                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3528                                  ;	16 descriptors. Six are initially defined.
  3529                                  ;
  3530                                  ;-----------------------------------------------------------------------------------------------------------------------
  3531                                  section			conldt							;console local descriptors
  3532                                  			dq	004093004780007Fh				;04 TSS alias
  3533                                  			dq	004093004700007Fh				;0C LDT alias
  3534                                  			dq	00409300400006FFh				;14 stack
  3535                                  			dq	00CF93000000FFFFh				;1C data
  3536                                  			dq	00409B0050000FFFh				;24 code
  3537                                  			dq	00409300480007FFh				;2C message queue
  3538                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3539                                  ;-----------------------------------------------------------------------------------------------------------------------
  3540                                  ;
  3541                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3542                                  ;
  3543                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3544                                  ;	segment. CS to console code.
  3545                                  ;
  3546                                  ;-----------------------------------------------------------------------------------------------------------------------
  3547                                  section			contss							;console task state segment
  3548                                  			dd	0						;00 back-link tss
  3549                                  			dd	0700h						;04 esp ring 0
  3550                                  			dd	0014h						;08 ss ring 0
  3551                                  			dd	0700h						;0C esp ring 1
  3552                                  			dd	0014h						;10 es ring 1
  3553                                  			dd	0700h						;14 esp ring 2
  3554                                  			dd	0014h						;18 ss ring 2
  3555                                  			dd	0						;1C cr ring 3
  3556                                  			dd	0						;20 eip
  3557                                  			dd	0200h						;24 eflags
  3558                                  			dd	0						;28 eax
  3559                                  			dd	0						;2C ecx
  3560                                  			dd	0						;30 edx
  3561                                  			dd	0						;34 ebx
  3562                                  			dd	0700h						;38 esp ring 3
  3563                                  			dd	0						;3C ebp
  3564                                  			dd	0						;40 esi
  3565                                  			dd	0						;44 edi
  3566                                  			dd	001Ch						;48 es
  3567                                  			dd	0024h						;4C cs
  3568                                  			dd	0014h						;50 ss ring 3
  3569                                  			dd	001Ch						;54 ds
  3570                                  			dd	0						;58 fs
  3571                                  			dd	0						;5c gs
  3572                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  3573                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3574                                  ;-----------------------------------------------------------------------------------------------------------------------
  3575                                  ;
  3576                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3577                                  ;
  3578                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3579                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3580                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3581                                  ;	event.
  3582                                  ;
  3583                                  ;-----------------------------------------------------------------------------------------------------------------------
  3584                                  section			conmque							;console message queue
  3585                                  			dd	8						;head pointer
  3586                                  			dd	8						;tail pointer
  3587                                  			times	510 dd 0					;queue elements
  3588                                  ;-----------------------------------------------------------------------------------------------------------------------
  3589                                  ;
  3590                                  ;	Console Code								@disk: 008400	@mem: 005000
  3591                                  ;
  3592                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3593                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3594                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3595                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3596                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3597                                  ;	board input, echoing to the console screen and responding to user commands.
  3598                                  ;
  3599                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3600                                  ;
  3601                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3602                                  ;				|  Real Mode Interrupt Vectors			|
  3603                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3604                                  ;				|  Reserved BIOS Memory Area			|
  3605                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3606                                  ;				|  Shared Kernel Memory Area			|
  3607                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3608                                  ;				|  Global Descriptor Table (GDT)		|
  3609                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3610                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3611                                  ;			002000	+-----------------------------------------------+
  3612                                  ;				|  Interrupt Handlers				|
  3613                                  ;				|  Kernel Function Library			|
  3614                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3615                                  ;				|  Console Task Stack Area			|
  3616                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3617                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3618                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3619                                  ;				|  Console Task Task State Segment (TSS)	|
  3620                                  ;			004800	+-----------------------------------------------+
  3621                                  ;				|  Console Task Message Queue			|
  3622                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3623                                  ;				|  Console Task Code				|
  3624                                  ;				|  Console Task Constants			|
  3625                                  ;			006000	+===============================================+
  3626                                  ;
  3627                                  ;-----------------------------------------------------------------------------------------------------------------------
  3628                                  section			concode	vstart=05000h					;labels relative to 5000h
  3629                                  ConCode			call	ConInitializeData				;initialize console variables
  3630                                  
  3631                                  			clearConsoleScreen					;clear the console screen
  3632                                  			putConsoleString czTitle				;display startup message
  3633                                  .10			putConsoleString czPrompt				;display input prompt
  3634                                  			placeCursor						;set CRT cursor location
  3635                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3636                                  			putConsoleString czNewLine				;newline
  3637                                  
  3638                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3639                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  3640                                  			mov	ebx,wzConsoleToken				;token buffer
  3641                                  			call	ConTakeToken					;handle console input
  3642                                  			mov	edx,wzConsoleToken				;token buffer
  3643                                  			call	ConDetermineCommand				;determine command number
  3644                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3645                                  			jb	.20						;yes, branch
  3646                                  
  3647                                  			putConsoleString czUnknownCommand			;display error message
  3648                                  
  3649                                  			jmp	.10						;next command
  3650                                  .20			shl	eax,2						;index into jump table
  3651                                  			mov	edx,tConJmpTbl					;jump table base address
  3652                                  			mov	eax,[edx+eax]					;command handler routine address
  3653                                  			call	eax						;call command handler
  3654                                  			jmp	.10						;next command
  3655                                  ;-----------------------------------------------------------------------------------------------------------------------
  3656                                  ;
  3657                                  ;	Routine:	ConInitializeData
  3658                                  ;
  3659                                  ;	Description:	This routine initializes console task variables.
  3660                                  ;
  3661                                  ;-----------------------------------------------------------------------------------------------------------------------
  3662                                  ConInitializeData	push	ecx						;save non-volatile regs
  3663                                  			push	edi						;
  3664                                  			push	es						;
  3665                                  ;
  3666                                  ;	Initialize console work areas
  3667                                  ;
  3668                                  			push	ESELDAT						;load OS data selector ...
  3669                                  			pop	es						;... into extra segment register
  3670                                  			mov	edi,ECONDATA					;OS console data address
  3671                                  			xor	al,al						;initialization value
  3672                                  			mov	ecx,ECONDATALEN					;size of OS console data
  3673                                  			cld							;forward strings
  3674                                  			rep	stosb						;initialize data
  3675                                  ;
  3676                                  ;	Restore and return
  3677                                  ;
  3678                                  			pop	es						;restore non-volatile regs
  3679                                  			pop	edi						;
  3680                                  			pop	ecx						;
  3681                                  			ret							;return
  3682                                  ;-----------------------------------------------------------------------------------------------------------------------
  3683                                  ;
  3684                                  ;	Routine:	ConTakeToken
  3685                                  ;
  3686                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3687                                  ;
  3688                                  ;	In:		DS:EDX	source buffer address
  3689                                  ;			DS:EBX	target buffer address
  3690                                  ;
  3691                                  ;	Out:		DS:EDX	source buffer address
  3692                                  ;			DS:EBX	target buffer address
  3693                                  ;
  3694                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3695                                  ;
  3696                                  ;-----------------------------------------------------------------------------------------------------------------------
  3697                                  ConTakeToken		push	esi						;save non-volatile regs
  3698                                  			push	edi						;
  3699                                  			mov	esi,edx						;source buffer address
  3700                                  			mov	edi,ebx						;target buffer address
  3701                                  			cld							;forward strings
  3702                                  .10			lodsb							;load byte
  3703                                  			cmp	al,EASCIISPACE					;space?
  3704                                  			je	.10						;yes, continue
  3705                                  			test	al,al						;end of line?
  3706                                  			jz	.40						;yes, branch
  3707                                  .20			stosb							;store byte
  3708                                  			lodsb							;load byte
  3709                                  			test	al,al						;end of line?
  3710                                  			jz	.40						;no, continue
  3711                                  			cmp	al,EASCIISPACE					;space?
  3712                                  			jne	.20						;no, continue
  3713                                  .30			lodsb							;load byte
  3714                                  			cmp	al,EASCIISPACE					;space?
  3715                                  			je	.30						;yes, continue
  3716                                  			dec	esi						;pre-position
  3717                                  .40			mov	byte [edi],0					;terminate buffer
  3718                                  			mov	edi,edx						;source buffer address
  3719                                  .50			lodsb							;remaining byte
  3720                                  			stosb							;move to front of buffer
  3721                                  			test	al,al						;end of line?
  3722                                  			jnz	.50						;no, continue
  3723                                  			pop	edi						;restore non-volatile regs
  3724                                  			pop	esi						;
  3725                                  			ret							;return
  3726                                  ;-----------------------------------------------------------------------------------------------------------------------
  3727                                  ;
  3728                                  ;	Routine:	ConDetermineCommand
  3729                                  ;
  3730                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3731                                  ;
  3732                                  ;	input:		DS:EDX	command address
  3733                                  ;
  3734                                  ;	output:		EAX	>=0	= command nbr
  3735                                  ;				0	= unknown command
  3736                                  ;
  3737                                  ;-----------------------------------------------------------------------------------------------------------------------
  3738                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  3739                                  			push	ecx						;
  3740                                  			push	esi						;
  3741                                  			push	edi						;
  3742                                  
  3743                                  			upperCaseString						;upper-case string at EDX
  3744                                  
  3745                                  			mov	esi,tConCmdTbl					;commands table
  3746                                  			xor	edi,edi						;intialize command number
  3747                                  			cld							;forward strings
  3748                                  .10			lodsb							;command length
  3749                                  			movzx	ecx,al						;command length
  3750                                  			jecxz	.20						;branch if end of table
  3751                                  			mov	ebx,esi						;table entry address
  3752                                  			add	esi,ecx						;next table entry address
  3753                                  
  3754                                  			compareMemory						;compare byte arrays at EDX, EBX
  3755                                  
  3756                                  			jecxz	.20						;branch if equal
  3757                                  			inc	edi						;increment command nbr
  3758                                  			jmp	.10						;repeat
  3759                                  .20			mov	eax,edi						;command number
  3760                                  			pop	edi						;restore non-volatile regs
  3761                                  			pop	esi						;
  3762                                  			pop	ecx						;
  3763                                  			pop	ebx						;
  3764                                  			ret							;return
  3765                                  ;-----------------------------------------------------------------------------------------------------------------------
  3766                                  ;
  3767                                  ;	Routine:	ConClear
  3768                                  ;
  3769                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3770                                  ;
  3771                                  ;-----------------------------------------------------------------------------------------------------------------------
  3772                                  ConClear		clearConsoleScreen					;clear console screen
  3773                                  			ret							;return
  3774                                  ;-----------------------------------------------------------------------------------------------------------------------
  3775                                  ;
  3776                                  ;	Routine:	ConExit
  3777                                  ;
  3778                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3779                                  ;
  3780                                  ;-----------------------------------------------------------------------------------------------------------------------
  3781                                  ConExit			resetSystem						;issue system reset
  3782                                  			ret							;return
  3783                                  ;-----------------------------------------------------------------------------------------------------------------------
  3784                                  ;
  3785                                  ;	Routine:	ConInt6
  3786                                  ;
  3787                                  ;	Description:	This routine issues an interrupt 6 to exercise the interrupt handler.
  3788                                  ;
  3789                                  ;-----------------------------------------------------------------------------------------------------------------------
  3790                                  ConInt6			ud2							;raise bad opcode exception
  3791                                  			ret							;return (not executed)
  3792                                  ;-----------------------------------------------------------------------------------------------------------------------
  3793                                  ;
  3794                                  ;	Routine:	ConVersion
  3795                                  ;
  3796                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3797                                  ;
  3798                                  ;-----------------------------------------------------------------------------------------------------------------------
  3799                                  ConVersion		putConsoleString czTitle				;display version message
  3800                                  			ret							;return
  3801                                  ;-----------------------------------------------------------------------------------------------------------------------
  3802                                  ;
  3803                                  ;	Tables
  3804                                  ;
  3805                                  ;-----------------------------------------------------------------------------------------------------------------------
  3806                                  										;---------------------------------------
  3807                                  										;  Command Jump Table
  3808                                  										;---------------------------------------
  3809                                  tConJmpTbl		equ	$						;command jump table
  3810                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  3811                                  			dd	ConVersion	- ConCode			;version command routine offset
  3812                                  			dd	ConClear	- ConCode			;clear command routine offset
  3813                                  			dd	ConExit		- ConCode			;exit command routine offset
  3814                                  			dd	ConInt6		- ConCode			;int6 command routine offset
  3815                                  			dd	ConExit		- ConCode			;quit command routine offset
  3816                                  			dd	ConClear	- ConCode			;cls command routine offset
  3817                                  			dd	ConVersion	- ConCode			;ver command routine offset
  3818                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3819                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3820                                  										;---------------------------------------
  3821                                  										;  Command Name Table
  3822                                  										;---------------------------------------
  3823                                  tConCmdTbl		equ	$						;command name table
  3824                                  			db	9,"SHUTDOWN",0					;shutdown command
  3825                                  			db	8,"VERSION",0					;version command
  3826                                  			db	6,"CLEAR",0					;clear command
  3827                                  			db	5,"EXIT",0					;exit command
  3828                                  			db	5,"INT6",0					;int6 command
  3829                                  			db	5,"QUIT",0					;quit command
  3830                                  			db	4,"CLS",0					;cls command
  3831                                  			db	4,"VER",0					;ver command
  3832                                  			db	0						;end of table
  3833                                  ;-----------------------------------------------------------------------------------------------------------------------
  3834                                  ;
  3835                                  ;	Constants
  3836                                  ;
  3837                                  ;-----------------------------------------------------------------------------------------------------------------------
  3838                                  czNewLine		db	13,10,0						;new line string
  3839                                  czPrompt		db	":",0						;prompt string
  3840                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3841                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3842                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  3843                                  			db	055h,0AAh					;end of section
  3844                                  %endif
  3845                                  %ifdef BUILDDISK
  3846                                  ;-----------------------------------------------------------------------------------------------------------------------
  3847                                  ;
  3848                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3849                                  ;
  3850                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3851                                  ;
  3852                                  ;-----------------------------------------------------------------------------------------------------------------------
  3853                                  section			unused							;unused disk space
  3854                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3855                                  %endif
  3856                                  ;=======================================================================================================================
  3857                                  ;
  3858                                  ;	End of Program Code
  3859                                  ;
  3860                                  ;=======================================================================================================================
