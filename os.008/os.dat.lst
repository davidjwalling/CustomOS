     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.008
     6                                  ;
     7                                  ;       Description:    In this sample program, an "int6" command is added to generate an invalid opcode interrupt.
     8                                  ;                       The interrupt handler displays the contents of registers at the time of the interrupt.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   294                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   295                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   296                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   297                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   298                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   299                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   300                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Firmware-Defined Values
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   309                                  ;
   310                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   311                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   315                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   316                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   317                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   318                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   319                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   320                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   321                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   322                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   323                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   324                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       Standards-Based Values
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;
   332                                  ;       ASCII                                                                   EASCII...
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   336                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   337                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   338                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   339                                  EASCIISPACE             equ     020h                                            ;space
   340                                  EASCIIUPPERA            equ     041h                                            ;'A'
   341                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   342                                  EASCIILOWERA            equ     061h                                            ;'a'
   343                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   344                                  EASCIITILDE             equ     07Eh                                            ;'~'
   345                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   346                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   347                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   348                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   349                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   350                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   351                                  EASCIICASE              equ     00100000b                                       ;case bit
   352                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Operating System Values
   356                                  ;
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  ;
   360                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   361                                  ;
   362                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   363                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   364                                  ;
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   367                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   368                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   369                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   370                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   371                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   372                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;       Console Constants                                                       ECON...
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ECONCOLS                equ     80                                              ;columns per row
   377                                  ECONROWS                equ     24                                              ;console rows
   378                                  ECONOIAROW              equ     24                                              ;operator information area row
   379                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   380                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   381                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   382                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   383                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   388                                  EGDTCGA                 equ     020h                                            ;cga video selector
   389                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   390                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   391                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   392                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   393                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   394                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   395                                  ;-----------------------------------------------------------------------------------------------------------------------
   396                                  ;       Keyboard Flags                                                          EKEYF...
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   399                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   400                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   401                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   402                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   403                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   404                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   405                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   406                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   407                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   408                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Kernel Constants                                                        EKRN...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   413                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   414                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   415                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;       Message Identifiers                                                     EMSG...
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   424                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   425                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   426                                  ;=======================================================================================================================
   427                                  ;
   428                                  ;       Structures
   429                                  ;
   430                                  ;=======================================================================================================================
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ;
   433                                  ;       MQUEUE
   434                                  ;
   435                                  ;       The MQUEUE structure maps memory used for a message queue.
   436                                  ;
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  struc                   MQUEUE
   439 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   440 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   441 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   442                                  endstruc
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;
   445                                  ;       OSDATA
   446                                  ;
   447                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   448                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   449                                  ;
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  struc                   OSDATA
   452 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   453 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   454 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   455 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   456 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   457 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   458 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   459 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   460 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   461 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   462 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   463 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   464 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   465 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   466 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   467 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   468 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   469 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   470 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   471 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   472 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   473 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   474 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   475 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   476 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   477 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   478 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   479 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   480 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   481 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   482 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   483 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   484 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   485 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   486 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   487 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   488 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   489 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   490 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   491 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   492 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   493 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   494 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   495 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   496 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   497 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   498 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   499 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   500 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   501 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   502 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   503 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   504 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   505 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   506 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   507 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   508 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   509 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   510 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   511 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   512 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   513 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   514 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   515 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   516 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   517 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   518 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   519 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   520 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   521 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   522 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   523 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   524 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   525 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   526 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   527 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   528 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   529 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   530 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   531 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   532 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   533 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   534 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   535 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   536 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   537 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   538 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   539 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   540 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   541 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   542 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   543 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   544 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   545 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   546 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   547 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   548 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   549 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   550 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   551 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   552 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ;
   555                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   556                                  ;
   557                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   558                                  ;
   559                                  ;-----------------------------------------------------------------------------------------------------------------------
   560                                  ECONDATA                equ     ($)
   561 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   562 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   563 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   564 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   565 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   566 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   567 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   568 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   569 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   570 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   571 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   572 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   573 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   574 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   575                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  ;
   578                                  ;       End of OS Variables
   579                                  ;
   580                                  ;-----------------------------------------------------------------------------------------------------------------------
   581                                  endstruc
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  ;
   584                                  ;       Macros
   585                                  ;
   586                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   587                                  ;
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  %macro                  mint    1
   590                                  _%1                     equ     ($-$$) / EX86DESCLEN
   591                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   592                                  %endmacro
   593                                  %macro                  mtrap   1
   594                                  _%1                     equ     ($-$$) / EX86DESCLEN
   595                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   596                                  %endmacro
   597                                  %macro                  menter  1
   598                                  ?%1                     equ     ($-$$)
   599                                  %endmacro
   600                                  %macro                  tsvce   1
   601                                  e%1                     equ     ($-tsvc)/4
   602                                                          dd      %1
   603                                  %endmacro
   604                                  %ifdef BUILDBOOT
   605                                  ;=======================================================================================================================
   606                                  ;
   607                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   608                                  ;
   609                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   610                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   611                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   612                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   613                                  ;
   614                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   615                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   616                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   617                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   618                                  ;       immediately followed by a disk parameter table.
   619                                  ;
   620                                  ;=======================================================================================================================
   621                                                          cpu     8086                                            ;assume minimal CPU
   622                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   623                                                          bits    16                                              ;16-bit code at power-up
   624                                  %ifdef BUILDPREP
   625                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   626                                  %else
   627 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   628                                  %endif
   629                                  ;-----------------------------------------------------------------------------------------------------------------------
   630                                  ;
   631                                  ;       Disk Parameter Table
   632                                  ;
   633                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   634                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   635                                  ;
   636                                  ;-----------------------------------------------------------------------------------------------------------------------
   637 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   638 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   639 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   640 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   641 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   642 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   643 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   644 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   645 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   646                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   647 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   648 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   649 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   650                                  ;
   651                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   652                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   653                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   654                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   655                                  ;       given several possible starting values for CS:IP.
   656                                  ;
   657                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   658 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   659                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   660 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   661 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   662 00000025 B104                                            mov     cl,4                                            ;shift count
   663 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   664 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   665 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   666                                  ;
   667                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   668                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   669                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   670                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   671                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   672                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   673                                  ;
   674 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   675 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   676 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   677 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   678 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   679                                  ;
   680                                  ;       Our boot addressability is now set up according to the following diagram.
   681                                  ;
   682                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   683                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   684                                  ;                               |  256 = 100h bytes                             |
   685                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   686                                  ;                               |  Boot Sector (vstart=0100h)                   |
   687                                  ;                               |  1 sector = 512 = 200h bytes                  |
   688                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   689                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   690                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   691                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   692                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   693                                  ;                               |  2 sectors = 1024 = 400h bytes
   694                                  ;                       009400  +-----------------------------------------------+ DS:1900
   695                                  ;
   696                                  ;       On entry, DL indicates the drive being booted from.
   697                                  ;
   698 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   699                                  ;
   700                                  ;       Compute directory i/o buffer address.
   701                                  ;
   702 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   703 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   704 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   705 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   706                                  ;
   707                                  ;       Compute segment where os.com will be loaded.
   708                                  ;
   709 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   710 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   711 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   712 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   713                                  ;
   714                                  ;       Set the video mode to 80 column, 25 row, text.
   715                                  ;
   716 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   717 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   718                                  ;
   719                                  ;       Write a message to the console so we know we have our addressability established.
   720                                  ;
   721 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   722 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   723                                  ;
   724                                  ;       Initialize the number of directory sectors to search.
   725                                  ;
   726 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   727 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   728                                  ;
   729                                  ;       Compute number of directory sectors and initialize overhead count.
   730                                  ;
   731 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   732 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   733 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   734 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   735                                  ;
   736                                  ;       Compute directory entries per sector.
   737                                  ;
   738 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   739 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   740 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   741                                  ;
   742                                  ;       Compute first logical directory sector and update overhead count.
   743                                  ;
   744 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   745 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   746 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   747 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   748 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   749 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   750                                  ;
   751                                  ;       Read directory sector.
   752                                  ;
   753 0000008E B001                    .30                     mov     al,1                                            ;sector count
   754 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   755 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   756 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   757                                  ;
   758                                  ;       Setup variables to search this directory sector.
   759                                  ;
   760 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   761 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   762 000000A1 7603                                            jna     .40                                             ;no, continue
   763 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   764 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   765 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   766 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   767                                  ;
   768                                  ;       Loop through directory sectors searching for kernel program.
   769                                  ;
   770 000000B1 56                      .50                     push    si                                              ;save kernel name address
   771 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   772 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   773 000000B6 FC                                              cld                                                     ;forward strings
   774 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   775 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   776 000000BA 5E                                              pop     si                                              ;restore kernel name address
   777 000000BB 7418                                            je      .60                                             ;exit loop if found
   778 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   779 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   780 000000C2 75ED                                            jnz     .50                                             ;next entry
   781                                  ;
   782                                  ;       Repeat search if we are not at the end of the directory.
   783                                  ;
   784 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   785 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   786 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   787 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   788 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   789                                  ;
   790                                  ;       If we find the kernel program in the directory, read the FAT.
   791                                  ;
   792 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   793 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   794 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   795 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   796 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   797 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   798                                  ;
   799                                  ;       Get the starting cluster of the kernel program and target address.
   800                                  ;
   801 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   802 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   803                                  ;
   804                                  ;       Read each program cluster into RAM.
   805                                  ;
   806 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   807 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   808 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   809 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   810 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   811 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   812 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   813 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   814 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   815                                  ;
   816                                  ;       Update buffer pointer for next cluster.
   817                                  ;
   818 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   819 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   820 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   821 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   822 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   823                                  ;
   824                                  ;       Compute next cluster number.
   825                                  ;
   826 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   827 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   828 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   829 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   830 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   831 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   832 00000120 83E701                                          and     di,1                                            ;get low bit
   833 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   834 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   835 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   836                                  ;
   837                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   838                                  ;
   839 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   840 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   841 00000130 B104                                            mov     cl,4                                            ;shift count
   842 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   843 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   844 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   845 0000013A 75B2                                            jne     .70                                             ;no, continue
   846                                  ;
   847                                  ;       Transfer control to the operating system program.
   848                                  ;
   849 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   850 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   851 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   852                                  ;
   853                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   854                                  ;
   855 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   856 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   857 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   858 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   859 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   860 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   861 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   862 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   863 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   864 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   865                                  ;
   866                                  ;       Try maxtries times to read sector.
   867                                  ;
   868 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   869 00000160 53                      .10                     push    bx                                              ;save buffer address
   870 00000161 51                                              push    cx                                              ;save retry count
   871 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   872 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   873 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   874 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   875 0000016F 59                                              pop     cx                                              ;restore retry count
   876 00000170 5B                                              pop     bx                                              ;restore buffer address
   877 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   878 00000173 E2EB                                            loop    .10                                             ;retry
   879                                  ;
   880                                  ;       Handle disk error: convert to ASCII and store in error string.
   881                                  ;
   882 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   883 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   884 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   885 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   886 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   887 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   888 00000183 7203                                            jb      .20                                             ;continue if numeral
   889 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   890 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   891 0000018A 7203                                            jb      .30                                             ;continue if numeral
   892 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   893 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   894 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   895 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   896                                  ;
   897                                  ;       Wait for a key press.
   898                                  ;
   899 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   900 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   901 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   902 0000019E FB                                              sti                                                     ;enable maskable interrupts
   903 0000019F F4                                              hlt                                                     ;wait for interrupt
   904 000001A0 EBF6                                            jmp     .10                                             ;repeat
   905                                  ;
   906                                  ;       Reset the system.
   907                                  ;
   908 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   909 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   910 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   911 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   912 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   913                                  ;
   914                                  ;       Display text message.
   915                                  ;
   916 000001AA FC                      BootPrint               cld                                                     ;forward strings
   917 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   918 000001AC 84C0                                            test    al,al                                           ;end of string?
   919 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   920 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   921 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   922 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   923 000001B6 C3                      BootReturn              ret                                                     ;return
   924                                  ;-----------------------------------------------------------------------------------------------------------------------
   925                                  ;
   926                                  ;       Constants
   927                                  ;
   928                                  ;-----------------------------------------------------------------------------------------------------------------------
   929 000001B7 90                                              align   2
   930 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   931 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   931 000001C3 4F4D               
   932 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   932 000001CE 530D0A00           
   933 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   933 000001DB 7220               
   934 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   935 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   935 000001E9 6700               
   936                                  ;-----------------------------------------------------------------------------------------------------------------------
   937                                  ;
   938                                  ;       Work Areas
   939                                  ;
   940                                  ;-----------------------------------------------------------------------------------------------------------------------
   941 000001EB 90                                              align   2
   942 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   943 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   944 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   945 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   946 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   947                                  wwReadCountCommand      equ     $                                               ;read count and command
   948 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   949 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   950                                  wwDriveHead             equ     $                                               ;drive, head (word)
   951 000001F8 00                      wbDrive                 db      0                                               ;drive
   952 000001F9 00                      wbHead                  db      0                                               ;head
   953                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   954 000001FA 00                                              db      0                                               ;sector
   955 000001FB 00                      wbTrack                 db      0                                               ;track
   956 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   957 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   958                                  %endif
   959                                  %ifdef BUILDPREP
   960                                  ;=======================================================================================================================
   961                                  ;
   962                                  ;       Diskette Preparation Code
   963                                  ;
   964                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   965                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   966                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   967                                  ;
   968                                  ;=======================================================================================================================
   969                                  ;
   970                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   971                                  ;
   972                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   973                                                          call    BootPrint                                       ;display message
   974                                  ;
   975                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   976                                  ;
   977                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   978                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   979                                                          jnz     .20                                             ;continue if key pressed
   980                                                          sti                                                     ;enable interrupts
   981                                                          hlt                                                     ;wait for interrupt
   982                                                          jmp     .10                                             ;repeat
   983                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   984                                                          je      .30                                             ;yes, branch
   985                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   986                                                          jne     .10                                             ;no, repeat
   987                                                          jmp     .120                                            ;yes, exit program
   988                                  ;
   989                                  ;       Display writing-sector message and patch the JMP instruction.
   990                                  ;
   991                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   992                                                          call    BootPrint                                       ;display message
   993                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   994                                                          mov     ax,01Bh                                         ;address past disk parameter table
   995                                                          mov     [bx],ax                                         ;update the JMP instruction
   996                                  ;
   997                                  ;       Try to read the boot sector.
   998                                  ;
   999                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1000                                  .40                     push    cx                                              ;save remaining tries
  1001                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1002                                                          mov     dx,0                                            ;head zero, drive zero
  1003                                                          mov     cx,1                                            ;track zero, sector one
  1004                                                          mov     al,1                                            ;one sector
  1005                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1006                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1007                                                          pop     cx                                              ;restore remaining retries
  1008                                                          jnc     .50                                             ;skip ahead if successful
  1009                                                          loop    .40                                             ;try again
  1010                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1011                                                          jmp     .70                                             ;branch to error routine
  1012                                  ;
  1013                                  ;       Copy diskette parms from input buffer to output buffer.
  1014                                  ;
  1015                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1016                                                          add     si,11                                           ;skip over JMP and system ID
  1017                                                          mov     di,Boot                                         ;output buffer address
  1018                                                          add     di,11                                           ;skip over JMP and system ID
  1019                                                          mov     cx,19                                           ;length of diskette parameters
  1020                                                          cld                                                     ;forward string copies
  1021                                                          rep     movsb                                           ;copy diskette parameters
  1022                                  ;
  1023                                  ;       Try to write boot sector to diskette.
  1024                                  ;
  1025                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1026                                  .60                     push    cx                                              ;save remaining tries
  1027                                                          mov     bx,Boot                                         ;output buffer address
  1028                                                          mov     dx,0                                            ;head zero, drive zero
  1029                                                          mov     cx,1                                            ;track zero, sector one
  1030                                                          mov     al,1                                            ;one sector
  1031                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1032                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1033                                                          pop     cx                                              ;restore remaining retries
  1034                                                          jnc     .100                                            ;skip ahead if successful
  1035                                                          loop    .60                                             ;try again
  1036                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1037                                  ;
  1038                                  ;       Convert the error code to ASCII and display the error message.
  1039                                  ;
  1040                                  .70                     push    ax                                              ;save error code
  1041                                                          mov     al,ah                                           ;copy error code
  1042                                                          mov     ah,0                                            ;AX = error code
  1043                                                          mov     dl,10h                                          ;hexadecimal divisor
  1044                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1045                                                          or      ax,03030h                                       ;add ASCII zone digits
  1046                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1047                                                          jb      .80                                             ;yes, continue
  1048                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1049                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1050                                                          jb      .90                                             ;yes, continue
  1051                                                          add     al,7                                            ;no, make ASCII
  1052                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1053                                                          call    BootPrint                                       ;write error message
  1054                                                          pop     ax                                              ;restore error code
  1055                                  ;
  1056                                  ;       Display the completion message.
  1057                                  ;
  1058                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1059                                                          mov     al,ah                                           ;BIOS return code
  1060                                                          cmp     al,0                                            ;success?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1063                                                          cmp     al,1                                            ;disk parameter error?
  1064                                                          je      .110                                            ;yes, continue
  1065                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1066                                                          cmp     al,2                                            ;address mark not found?
  1067                                                          je      .110                                            ;yes, continue
  1068                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1069                                                          cmp     al,3                                            ;protected disk?
  1070                                                          je      .110                                            ;yes, continue
  1071                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1072                                                          cmp     al,6                                            ;diskette removed?
  1073                                                          je      .110                                            ;yes, continue
  1074                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1075                                                          cmp     al,80H                                          ;drive timed out?
  1076                                                          je      .110                                            ;yes, continue
  1077                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1078                                  .110                    call    BootPrint                                       ;display result message
  1079                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1080                                                          int     021h                                            ;terminate DOS program
  1081                                                          ret                                                     ;return (should not execute)
  1082                                  ;-----------------------------------------------------------------------------------------------------------------------
  1083                                  ;
  1084                                  ;       Diskette Preparation Messages
  1085                                  ;
  1086                                  ;-----------------------------------------------------------------------------------------------------------------------
  1087                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1088                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1089                                                          db      13,10
  1090                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1091                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1092                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1093                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1094                                                          db      13,10,0
  1095                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1096                                                          db      13,10,0
  1097                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1098                                                          db      13,10,0
  1099                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1100                                                          db      13,10,0
  1101                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1102                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1103                                                          db      13,10,0
  1104                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1105                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1106                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1107                                                          db      13,10,"and retry."
  1108                                                          db      13,10,0
  1109                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1110                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1111                                                          db      13,10,"using another diskette."
  1112                                                          db      13,10,0
  1113                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1114                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1115                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1116                                                          db      13,10,0
  1117                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1118                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1119                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1120                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1121                                                          db      13,10,"is properly inserted in the diskette drive."
  1122                                                          db      13,10,0
  1123                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1124                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1125                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1126                                                          db      13,10,0
  1127                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1128                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1129                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1130                                                          db      13,10,0
  1131                                  wcPrepInBuf             equ     $
  1132                                  %endif
  1133                                  %ifdef BUILDDISK
  1134                                  ;=======================================================================================================================
  1135                                  ;
  1136                                  ;       File Allocation Tables
  1137                                  ;
  1138                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1139                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1140                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1141                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1142                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1143                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1144                                  ;       the last cluster in the chain.
  1145                                  ;
  1146                                  ;       Every three bytes encode two FAT entries as follows:
  1147                                  ;
  1148                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1149                                  ;
  1150                                  ;=======================================================================================================================
  1151                                  ;-----------------------------------------------------------------------------------------------------------------------
  1152                                  ;
  1153                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1154                                  ;
  1155                                  ;-----------------------------------------------------------------------------------------------------------------------
  1156                                  section                 fat1                                                    ;first copy of FAT
  1157                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1158                                                          db      005h,060h,000h, 007h,080h,000h
  1159                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1160                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1161                                                          db      011h,020h,001h, 013h,040h,001h
  1162                                                          db      015h,060h,001h, 017h,080h,001h
  1163                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1164                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1165                                                          db      021h,020h,002h, 023h,040h,002h
  1166                                                          db      025h,060h,002h, 027h,080h,002h
  1167                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1168                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170                                  ;
  1171                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1172                                  ;
  1173                                  ;-----------------------------------------------------------------------------------------------------------------------
  1174                                  section                 fat2                                                    ;second copy of FAT
  1175                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1176                                                          db      005h,060h,000h, 007h,080h,000h
  1177                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1178                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1179                                                          db      011h,020h,001h, 013h,040h,001h
  1180                                                          db      015h,060h,001h, 017h,080h,001h
  1181                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1182                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1183                                                          db      021h,020h,002h, 023h,040h,002h
  1184                                                          db      025h,060h,002h, 027h,080h,002h
  1185                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1186                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  ;
  1189                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1190                                  ;
  1191                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1192                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1193                                  ;       copy.
  1194                                  ;
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  section                 dir                                                     ;diskette directory
  1197                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1198                                                          db      020h                                            ;attribute (archive bit set)
  1199                                                          times   10 db 0                                         ;unused
  1200                                                          dw      0h                                              ;time
  1201                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1202                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1203                                                          dw      2                                               ;first cluster
  1204                                                          dd      05400h                                          ;file size
  1205                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1206                                  %endif
  1207                                  %ifdef BUILDCOM
  1208                                  ;=======================================================================================================================
  1209                                  ;
  1210                                  ;       OS.COM
  1211                                  ;
  1212                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1213                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1214                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1215                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1216                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1217                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1218                                  ;
  1219                                  ;       Our loader addressability is set up according to the following diagram.
  1220                                  ;
  1221                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1222                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1223                                  ;                               |  256 = 100h bytes                             |
  1224                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1225                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1226                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1227                                  ;                       007e00  +-----------------------------------------------+
  1228                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1229                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1230                                  ;                               |                                               |
  1231                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1232                                  ;                               |                                               |
  1233                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1234                                  ;                               |  Loader Code                                  |
  1235                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1236                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1237                                  ;
  1238                                  ;=======================================================================================================================
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                  ;
  1241                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1242                                  ;
  1243                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1244                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1245                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1246                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1247                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1248                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1249                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1250                                  ;       registers.
  1251                                  ;
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                                          cpu     8086                                            ;assume minimal CPU
  1254                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1255                                                          bits    16                                              ;this is 16-bit code
  1256                                  Loader                  push    cs                                              ;use the code segment
  1257                                                          pop     ds                                              ;...as our data segment
  1258                                                          push    cs                                              ;use the code segment
  1259                                                          pop     es                                              ;...as our extra segment
  1260                                  ;
  1261                                  ;       Write a message to the console so we know we have our addressability established.
  1262                                  ;
  1263                                                          mov     si,czStartingMsg                                ;starting message
  1264                                                          call    PutTTYString                                    ;display loader message
  1265                                  ;
  1266                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1267                                  ;
  1268                                                          call    GetCPUType                                      ;AL = cpu type
  1269                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1270                                                          cmp     al,3                                            ;80386+?
  1271                                                          jb      LoaderExit                                      ;no, exit with error message
  1272                                                          cpu     386                                             ;allow 80386 instructions
  1273                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1274                                                          call    PutTTYString                                    ;display message
  1275                                  ;
  1276                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1277                                  ;
  1278                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1279                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1280                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1281                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1282                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1283                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1284                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1285                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1286                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1287                                                          call    PutTTYString                                    ;display message
  1288                                  ;
  1289                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1290                                  ;
  1291                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1292                                                          pop     es                                              ;... as target segment
  1293                                                          xor     di,di                                           ;ES:DI = target address
  1294                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1295                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1296                                                          cld                                                     ;forward strings
  1297                                                          rep     movsb                                           ;copy kernel image
  1298                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1299                                                          call    PutTTYString                                    ;display message
  1300                                  ;
  1301                                  ;       Switch to protected mode.
  1302                                  ;
  1303                                                          xor     si,si                                           ;ES:SI = gdt addr
  1304                                                          mov     ss,si                                           ;protected mode ss
  1305                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1306                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1307                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1308                                                          mov     dx,001Fh                                        ;outer delay loop count
  1309                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1310                                                          loop    $                                               ;wait out pending interrupts
  1311                                                          dec     dx                                              ;restore outer loop count
  1312                                                          jnz     .10                                             ;continue outer loop
  1313                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1314                                  ;
  1315                                  ;       Enable hardware and maskable interrupts.
  1316                                  ;
  1317                                                          xor     al,al                                           ;enable all registers code
  1318                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1319                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1320                                                          sti                                                     ;enable maskable interrupts
  1321                                  ;
  1322                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1323                                  ;
  1324                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1325                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1326                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328                                  ;
  1329                                  ;       Routine:        LoaderExit
  1330                                  ;
  1331                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1332                                  ;
  1333                                  ;       In:             DS:SI   string address
  1334                                  ;
  1335                                  ;-----------------------------------------------------------------------------------------------------------------------
  1336                                  LoaderExit              call    PutTTYString                                    ;display error message
  1337                                  ;
  1338                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1339                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1340                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1341                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1342                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1343                                  ;
  1344                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1345                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1346                                                          jnz     .40                                             ;exit if key pressed
  1347                                                          sti                                                     ;enable maskable interrupts
  1348                                                          hlt                                                     ;wait for interrupt
  1349                                                          jmp     .30                                             ;repeat until keypress
  1350                                  ;
  1351                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1352                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1353                                  ;       HLT until the system resets.
  1354                                  ;
  1355                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1356                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1357                                  .50                     sti                                                     ;enable maskable interrupts
  1358                                                          hlt                                                     ;stop until reset, int, nmi
  1359                                                          jmp     .50                                             ;loop until restart kicks in
  1360                                  ;-----------------------------------------------------------------------------------------------------------------------
  1361                                  ;
  1362                                  ;       Routine:        GetCPUType
  1363                                  ;
  1364                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1365                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1366                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1367                                  ;
  1368                                  ;       Out:            AX      0 = 808x, v20, etc.
  1369                                  ;                               1 = 80186
  1370                                  ;                               2 = 80286
  1371                                  ;                               3 = 80386
  1372                                  ;
  1373                                  ;-----------------------------------------------------------------------------------------------------------------------
  1374                                  GetCPUType              mov     al,1                                            ;AL = 1
  1375                                                          mov     cl,32                                           ;shift count
  1376                                                          shr     al,cl                                           ;try a 32-bit shift
  1377                                                          or      al,al                                           ;did the shift happen?
  1378                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1379                                                          cpu     186
  1380                                                          push    sp                                              ;save stack pointer
  1381                                                          pop     cx                                              ;...into cx
  1382                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1383                                                          jne     .10                                             ;yes, cpu is 80186
  1384                                                          cpu     286
  1385                                                          inc     ax                                              ;AX = 2
  1386                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1387                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1388                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1389                                                          jz      .10                                             ;yes, cpu is 80286
  1390                                                          inc     ax                                              ;AX = 3
  1391                                  .10                     ret                                                     ;return
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  ;
  1394                                  ;       Routine:        PutTTYString
  1395                                  ;
  1396                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1397                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1398                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1399                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1400                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1401                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1402                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1403                                  ;                       to LODSB is not needed.
  1404                                  ;
  1405                                  ;       In:             DS:SI   address of string
  1406                                  ;
  1407                                  ;       Out:            DF      0
  1408                                  ;                       ZF      1
  1409                                  ;                       AL      0
  1410                                  ;
  1411                                  ;-----------------------------------------------------------------------------------------------------------------------
  1412                                  PutTTYString            cld                                                     ;forward strings
  1413                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1414                                                          test    al,al                                           ;end of string?
  1415                                                          jz      .20                                             ;... yes, exit our loop
  1416                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1417                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1418                                                          jmp     .10                                             ;repeat until done
  1419                                  .20                     ret                                                     ;return
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;       Loader Data
  1423                                  ;
  1424                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1425                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1426                                  ;
  1427                                  ;-----------------------------------------------------------------------------------------------------------------------
  1428                                                          align   2
  1429                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1430                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1431                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1432                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1433                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1434                                                          db      "Please press any key to restart the computer.",13,10,0
  1435                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1436                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1437                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1438                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1439                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1440                                  ;=======================================================================================================================
  1441                                  ;
  1442                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1443                                  ;
  1444                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1445                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1446                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1447                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1448                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1449                                  ;
  1450                                  ;=======================================================================================================================
  1451                                  ;=======================================================================================================================
  1452                                  ;
  1453                                  ;       Kernel Tables
  1454                                  ;
  1455                                  ;=======================================================================================================================
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  ;
  1458                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1459                                  ;
  1460                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1461                                  ;       first descriptor must be all nulls.
  1462                                  ;
  1463                                  ;       6   5         4         3         2         1         0
  1464                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1465                                  ;       ----------------------------------------------------------------
  1466                                  ;       h......hffffmmmma......ab......................bn..............n
  1467                                  ;
  1468                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1469                                  ;               ffff                                                            flags
  1470                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1471                                  ;                       a......a                                                access
  1472                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1473                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1474                                  ;
  1475                                  ;       00000000                                                                all areas have base addresses below 2^24
  1476                                  ;               0...                                                            single-byte size granularity
  1477                                  ;               1...                                                            4-kilobyte size granularity
  1478                                  ;               .0..                                                            16-bit default for code segments
  1479                                  ;               .1..                                                            32-bit default for code segments
  1480                                  ;               ..0.                                                            intel-reserved; should be zero
  1481                                  ;               ...0                                                            available for operating system use
  1482                                  ;                   0000                                                        segment is less than 2^16 in size
  1483                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1484                                  ;                       1.......                                                segment is present in memory
  1485                                  ;                       .00.....                                                segment is of privilege level 0
  1486                                  ;                       ...0....                                                segment is of system or gate type
  1487                                  ;                       ...00010                                                local decriptor table (LDT)
  1488                                  ;                       ...01001                                                task state segment (TSS) available
  1489                                  ;                       ...01011                                                task state segment (TSS) busy
  1490                                  ;                       ...10...                                                data segment
  1491                                  ;                       ...10011                                                writable data (accessed)
  1492                                  ;                       ...11...                                                code segment
  1493                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1494                                  ;
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496                                  section                 gdt                                                     ;global descriptor table
  1497                                                          dq      0000000000000000h                               ;00 required null selector
  1498                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1499                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1500                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1501                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1502                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1503                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1504                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1505                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1506                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1507                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1508                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1509                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1510                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1511                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1512                                  ;-----------------------------------------------------------------------------------------------------------------------
  1513                                  ;
  1514                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1515                                  ;
  1516                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1517                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1518                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1519                                  ;
  1520                                  ;       6   5         4         3         2         1         0
  1521                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1522                                  ;       ----------------------------------------------------------------
  1523                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1524                                  ;
  1525                                  ;       h...h   high-order offset (bits 16-31)
  1526                                  ;       P       present (0=unused interrupt)
  1527                                  ;       zz      descriptor privilege level
  1528                                  ;       S       storage segment (must be zero for IDT)
  1529                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1530                                  ;       S...S   handling code selector in GDT
  1531                                  ;       l...l   lo-order offset (bits 0-15)
  1532                                  ;
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  section                 idt                                                     ;interrupt descriptor table
  1535                                                          mint    dividebyzero                                    ;00 divide by zero
  1536                                                          mint    singlestep                                      ;01 single step
  1537                                                          mint    nmi                                             ;02 non-maskable
  1538                                                          mint    break                                           ;03 break
  1539                                                          mint    into                                            ;04 into
  1540                                                          mint    bounds                                          ;05 bounds
  1541                                                          mint    badopcode                                       ;06 bad op code
  1542                                                          mint    nocoproc                                        ;07 no coprocessor
  1543                                                          mint    doublefault                                     ;08 double-fault
  1544                                                          mint    operand                                         ;09 operand
  1545                                                          mint    badtss                                          ;0a bad TSS
  1546                                                          mint    notpresent                                      ;0b not-present
  1547                                                          mint    stacklimit                                      ;0c stack limit
  1548                                                          mint    protection                                      ;0d general protection fault
  1549                                                          mint    int14                                           ;0e (reserved)
  1550                                                          mint    int15                                           ;0f (reserved)
  1551                                                          mint    coproccalc                                      ;10 (reserved)
  1552                                                          mint    int17                                           ;11 (reserved)
  1553                                                          mint    int18                                           ;12 (reserved)
  1554                                                          mint    int19                                           ;13 (reserved)
  1555                                                          mint    int20                                           ;14 (reserved)
  1556                                                          mint    int21                                           ;15 (reserved)
  1557                                                          mint    int22                                           ;16 (reserved)
  1558                                                          mint    int23                                           ;17 (reserved)
  1559                                                          mint    int24                                           ;18 (reserved)
  1560                                                          mint    int25                                           ;19 (reserved)
  1561                                                          mint    int26                                           ;1a (reserved)
  1562                                                          mint    int27                                           ;1b (reserved)
  1563                                                          mint    int28                                           ;1c (reserved)
  1564                                                          mint    int29                                           ;1d (reserved)
  1565                                                          mint    int30                                           ;1e (reserved)
  1566                                                          mint    int31                                           ;1f (reserved)
  1567                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1568                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1569                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1570                                                          mtrap   com2                                            ;23 IRQ3 com2
  1571                                                          mtrap   com1                                            ;24 IRQ4 com1
  1572                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1573                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1574                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1575                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1576                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1577                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1578                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1579                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1580                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1581                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1582                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1583                                                          mtrap   svc                                             ;30 OS services
  1584                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1585                                  ;=======================================================================================================================
  1586                                  ;
  1587                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1588                                  ;
  1589                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1590                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1591                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1592                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1593                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1594                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1595                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1596                                  ;
  1597                                  ;=======================================================================================================================
  1598                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1599                                                          cpu     386                                             ;allow 80386 instructions
  1600                                                          bits    32                                              ;this is 32-bit code
  1601                                  ;=======================================================================================================================
  1602                                  ;
  1603                                  ;       CPU Interrupt Handlers
  1604                                  ;
  1605                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1606                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1607                                  ;
  1608                                  ;=======================================================================================================================
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT0    Divide By Zero
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  dividebyzero                                    ;divide by zero
  1615                                                          push    0                                               ;store interrupt nbr
  1616                                                          push    czIntDivideByZero                               ;store message offset
  1617                                                          jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT1    Single Step
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  singlestep                                      ;single step
  1624                                                          push    1                                               ;store interrupt nbr
  1625                                                          push    czIntSingleStep                                 ;store message offset
  1626                                                          jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT2    Non-Maskable Interrupt
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  nmi                                             ;non-maskable
  1633                                                          push    2                                               ;store interrupt nbr
  1634                                                          push    czIntNonMaskable                                ;store message offset
  1635                                                          jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT3    Break
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  break                                           ;break
  1642                                                          push    3                                               ;store interrupt nbr
  1643                                                          push    czIntBreak                                      ;store message offset
  1644                                                          jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT4    Into
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  into                                            ;into
  1651                                                          push    4                                               ;store interrupt nbr
  1652                                                          push    czIntInto                                       ;store message offset
  1653                                                          jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT5    Bounds
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  bounds                                          ;bounds
  1660                                                          push    5                                               ;store interrupt nbr
  1661                                                          push    czIntBounds                                     ;store message offset
  1662                                                          jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT6    Bad Operation Code
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  badopcode                                       ;bad opcode interrupt
  1669                                                          push    6                                               ;store interrupt nbr
  1670                                                          push    czIntBadOpCode                                  ;store message offset
  1671                                                          jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT7    No Coprocessor
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1678                                                          push    7                                               ;store interrupt nbr
  1679                                                          push    czIntNoCoprocessor                              ;store message offset
  1680                                                          jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT8    Double Fault
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  doublefault                                     ;doublefault interrupt
  1687                                                          push    8                                               ;store interrupt nbr
  1688                                                          push    czIntDoubleFault                                ;store message offset
  1689                                                          jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT9    Operand
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  operand                                         ;operand interrupt
  1696                                                          push    9                                               ;store interrupt nbr
  1697                                                          push    czIntOperand                                    ;store message offset
  1698                                                          jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT10   Bad Task State Segment
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  badtss                                          ;bad TSS interrupt
  1705                                                          push    10                                              ;store interrupt nbr
  1706                                                          push    czIntBadTSS                                     ;store message offset
  1707                                                          jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT11   Not Present
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  notpresent                                      ;not present interrupt
  1714                                                          push    11                                              ;store interrupt nbr
  1715                                                          push    czIntNotPresent                                 ;store message offset
  1716                                                          jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT12   Stack Limit
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  stacklimit                                      ;stack limit interrupt
  1723                                                          push    12                                              ;store interrupt nbr
  1724                                                          push    czIntStackLimit                                 ;store message offset
  1725                                                          jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT13   General Protection Fault
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  protection                                      ;protection fault interrupt
  1732                                                          push    13                                              ;store interrupt nbr
  1733                                                          push    czIntProtection                                 ;store message offset
  1734                                                          jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT14   Reserved
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  int14                                           ;(reserved)
  1741                                                          push    14                                              ;store interrupt nbr
  1742                                                          push    czIntReserved                                   ;store message offset
  1743                                                          jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT15   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int15                                           ;(reserved)
  1750                                                          push    15                                              ;store interrupt nbr
  1751                                                          push    czIntReserved                                   ;store message offset
  1752                                                          jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT16   Coprocessor Calculation
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  coproccalc                                      ;coprocessor calculation
  1759                                                          push    16                                              ;store interrupt nbr
  1760                                                          push    czIntCoprocessorCalc                            ;store message offset
  1761                                                          jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT17   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int17                                           ;(reserved)
  1768                                                          push    17                                              ;store interrupt nbr
  1769                                                          push    czIntReserved                                   ;store message offset
  1770                                                          jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT18   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int18                                           ;(reserved)
  1777                                                          push    18                                              ;store interrupt nbr
  1778                                                          push    czIntReserved                                   ;store message offset
  1779                                                          jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT19   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int19                                           ;(reserved)
  1786                                                          push    19                                              ;store interrupt nbr
  1787                                                          push    czIntReserved                                   ;store message offset
  1788                                                          jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT20   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int20                                           ;(reserved)
  1795                                                          push    20                                              ;store interrupt nbr
  1796                                                          push    czIntReserved                                   ;store message offset
  1797                                                          jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT21   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int21                                           ;(reserved)
  1804                                                          push    21                                              ;store interrupt nbr
  1805                                                          push    czIntReserved                                   ;store message offset
  1806                                                          jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT22   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int22                                           ;(reserved)
  1813                                                          push    22                                              ;store interrupt nbr
  1814                                                          push    czIntReserved                                   ;store message offset
  1815                                                          jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT23   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int23                                           ;(reserved)
  1822                                                          push    23                                              ;store interrupt nbr
  1823                                                          push    czIntReserved                                   ;store message offset
  1824                                                          jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT24   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int24                                           ;(reserved)
  1831                                                          push    24                                              ;store interrupt nbr
  1832                                                          push    czIntReserved                                   ;store message offset
  1833                                                          jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT25   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int25                                           ;(reserved)
  1840                                                          push    25                                              ;store interrupt nbr
  1841                                                          push    czIntReserved                                   ;store message offset
  1842                                                          jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT26   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int26                                           ;(reserved)
  1849                                                          push    26                                              ;store interrupt nbr
  1850                                                          push    czIntReserved                                   ;store message offset
  1851                                                          jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT27   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int27                                           ;(reserved)
  1858                                                          push    27                                              ;store interrupt nbr
  1859                                                          push    czIntReserved                                   ;store message offset
  1860                                                          jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       INT28   Reserved
  1864                                  ;
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                                          menter  int28                                           ;(reserved)
  1867                                                          push    28                                              ;store interrupt nbr
  1868                                                          push    czIntReserved                                   ;store message offset
  1869                                                          jmp     ReportInterrupt                                 ;report interrupt
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;       INT29   Reserved
  1873                                  ;
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                                          menter  int29                                           ;(reserved)
  1876                                                          push    29                                              ;store interrupt nbr
  1877                                                          push    czIntReserved                                   ;store message offset
  1878                                                          jmp     ReportInterrupt                                 ;report interrupt
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  ;
  1881                                  ;       INT30   Reserved
  1882                                  ;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                                          menter  int30                                           ;(reserved)
  1885                                                          push    30                                              ;store interrupt nbr
  1886                                                          push    czIntReserved                                   ;store message offset
  1887                                                          jmp     ReportInterrupt                                 ;report interrupt
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  ;
  1890                                  ;       INT31   Reserved
  1891                                  ;
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                                          menter  int31                                           ;(reserved)
  1894                                                          push    31                                              ;store interrupt nbr
  1895                                                          push    czIntReserved                                   ;store message offset
  1896                                                          jmp     ReportInterrupt                                 ;report interrupt
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;       Routine:        ReportInterrupt
  1900                                  ;
  1901                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1902                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1903                                  ;
  1904                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1905                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1906                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1907                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1908                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1909                                  ;
  1910                                  ;       Out:            N/A             This routine does not exit.
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1914                                                          push    es                                              ;save ES at time of interrupt
  1915                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1916                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  1917                                  ;
  1918                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1919                                  ;
  1920                                  ;                       [EBP+60]        EFLAGS
  1921                                  ;                       [EBP+56]        CS
  1922                                  ;                       [EBP+52]        EIP
  1923                                  ;                       [EBP+48]        EIP hi-order
  1924                                  ;                       [EBP+44]        interrupt number (0-31)
  1925                                  ;                       [EBP+40]        error message address
  1926                                  ;                       [EBP+36]        DS
  1927                                  ;                       [EBP+32]        ES
  1928                                  ;                       [EBP+28]        EAX
  1929                                  ;                       [EBP+24]        ECX
  1930                                  ;                       [EBP+20]        EDX
  1931                                  ;                       [EBP+16]        EBX
  1932                                  ;                       [EBP+12]        ESP
  1933                                  ;                       [EBP+8]         EBP
  1934                                  ;                       [EBP+4]         ESI
  1935                                  ;                       [EBP+0]         EDI
  1936                                  ;
  1937                                                          push    cs                                              ;load code selector ...
  1938                                                          pop     ds                                              ;... into DS
  1939                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1940                                                          pop     es                                              ;... into ES
  1941                                  ;
  1942                                  ;       Display the interrupt report boundary box
  1943                                  ;
  1944                                                          mov     cl,13                                           ;column
  1945                                                          mov     ch,6                                            ;row
  1946                                                          mov     dl,50                                           ;width
  1947                                                          mov     dh,8                                            ;height
  1948                                                          mov     bh,07h                                          ;attribute
  1949                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1950                                  ;
  1951                                  ;       Display the report header
  1952                                  ;
  1953                                                          mov     cl,15                                           ;column
  1954                                                          mov     ch,7                                            ;row
  1955                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1956                                                          call    SetConsoleString                                ;draw text string
  1957                                  ;
  1958                                  ;       Display the interrupt description label
  1959                                  ;
  1960                                                          mov     cl,15                                           ;column
  1961                                                          mov     ch,8                                            ;row
  1962                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1963                                                          call    SetConsoleString                                ;draw text string
  1964                                  ;
  1965                                  ;       Display the interrupt number
  1966                                  ;
  1967                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1968                                                          mov     cl,26                                           ;column
  1969                                                          mov     ch,8                                            ;row
  1970                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1971                                  ;
  1972                                  ;       Display the interrupt name
  1973                                  ;
  1974                                                          mov     cl,29                                           ;column
  1975                                                          mov     ch,8                                            ;row
  1976                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1977                                                          call    SetConsoleString                                ;display interrupt description
  1978                                  ;
  1979                                  ;       Display the register values header
  1980                                  ;
  1981                                                          mov     cl,15                                           ;column
  1982                                                          mov     ch,10                                           ;row
  1983                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1984                                                          call    SetConsoleString                                ;draw text string
  1985                                  ;
  1986                                  ;       Display the EAX register label and value
  1987                                  ;
  1988                                                          mov     cl,15                                           ;column
  1989                                                          mov     ch,11                                           ;row
  1990                                                          mov     esi,czIntEAX                                    ;register EAX label
  1991                                                          call    SetConsoleString                                ;draw label
  1992                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1993                                                          mov     cl,19                                           ;column
  1994                                                          mov     ch,11                                           ;row
  1995                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1996                                  ;
  1997                                  ;       Display the ECX register label and value
  1998                                  ;
  1999                                                          mov     cl,15                                           ;column
  2000                                                          mov     ch,12                                           ;row
  2001                                                          mov     esi,czIntECX                                    ;label
  2002                                                          call    SetConsoleString                                ;draw label
  2003                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2004                                                          mov     cl,19                                           ;column
  2005                                                          mov     ch,12                                           ;row
  2006                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2007                                  ;
  2008                                  ;       Display the EDX register label and value
  2009                                  ;
  2010                                                          mov     cl,15                                           ;column
  2011                                                          mov     ch,13                                           ;row
  2012                                                          mov     esi,czIntEDX                                    ;label
  2013                                                          call    SetConsoleString                                ;draw label
  2014                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2015                                                          mov     cl,19                                           ;column
  2016                                                          mov     ch,13                                           ;row
  2017                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2018                                  ;
  2019                                  ;       Display the EBX register label and value
  2020                                  ;
  2021                                                          mov     cl,15                                           ;column
  2022                                                          mov     ch,14                                           ;row
  2023                                                          mov     esi,czIntEBX                                    ;label
  2024                                                          call    SetConsoleString                                ;draw label
  2025                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2026                                                          mov     cl,19                                           ;column
  2027                                                          mov     ch,14                                           ;row
  2028                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2029                                  ;
  2030                                  ;       Display the ESI register label and value
  2031                                  ;
  2032                                                          mov     cl,29                                           ;column
  2033                                                          mov     ch,11                                           ;row
  2034                                                          mov     esi,czIntESI                                    ;label
  2035                                                          call    SetConsoleString                                ;draw label
  2036                                                          mov     eax,[ebp+4]                                     ;ESI
  2037                                                          mov     cl,33                                           ;column
  2038                                                          mov     ch,11                                           ;row
  2039                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2040                                  ;
  2041                                  ;       Display the EDI register label and value
  2042                                  ;
  2043                                                          mov     cl,29                                           ;column
  2044                                                          mov     ch,12                                           ;row
  2045                                                          mov     esi,czIntEDI                                    ;label
  2046                                                          call    SetConsoleString                                ;draw label
  2047                                                          mov     eax,[ebp+0]                                     ;EDI
  2048                                                          mov     cl,33                                           ;column
  2049                                                          mov     ch,12                                           ;row
  2050                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2051                                  ;
  2052                                  ;       Display the EBP register label and value
  2053                                  ;
  2054                                                          mov     cl,29                                           ;column
  2055                                                          mov     ch,13                                           ;row
  2056                                                          mov     esi,czIntEBP                                    ;label
  2057                                                          call    SetConsoleString                                ;draw label
  2058                                                          mov     eax,[ebp+8]                                     ;EBP
  2059                                                          mov     cl,33                                           ;column
  2060                                                          mov     ch,13                                           ;row
  2061                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2062                                  ;
  2063                                  ;       Display the DS register label and value
  2064                                  ;
  2065                                                          mov     cl,42                                           ;column
  2066                                                          mov     ch,11                                           ;row
  2067                                                          mov     esi,czIntDS                                     ;label
  2068                                                          call    SetConsoleString                                ;draw label
  2069                                                          xor     eax,eax                                         ;zero register
  2070                                                          mov     ax,[ebp+36]                                     ;DS
  2071                                                          mov     cl,46                                           ;column
  2072                                                          mov     ch,11                                           ;row
  2073                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2074                                  ;
  2075                                  ;       Display the ES register label and value
  2076                                  ;
  2077                                                          mov     cl,42                                           ;column
  2078                                                          mov     ch,12                                           ;row
  2079                                                          mov     esi,czIntES                                     ;label
  2080                                                          call    SetConsoleString                                ;draw label
  2081                                                          xor     eax,eax                                         ;zero register
  2082                                                          mov     ax,[ebp+32]                                     ;ES
  2083                                                          mov     cl,46                                           ;column
  2084                                                          mov     ch,12                                           ;row
  2085                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2086                                  ;
  2087                                  ;       Display the SS register label and value
  2088                                  ;
  2089                                                          mov     cl,42                                           ;column
  2090                                                          mov     ch,13                                           ;row
  2091                                                          mov     esi,czIntSS                                     ;label
  2092                                                          call    SetConsoleString                                ;draw label
  2093                                                          xor     eax,eax                                         ;zero register
  2094                                                          mov     ax,ss                                           ;SS
  2095                                                          mov     cl,46                                           ;column
  2096                                                          mov     ch,13                                           ;row
  2097                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2098                                  ;
  2099                                  ;       Display the CS register lable and value
  2100                                  ;
  2101                                                          mov     cl,42                                           ;column
  2102                                                          mov     ch,14                                           ;row
  2103                                                          mov     esi,czIntCS                                     ;label
  2104                                                          call    SetConsoleString                                ;draw label
  2105                                                          xor     eax,eax                                         ;zero register
  2106                                                          mov     ax,[ebp+56]                                     ;CS
  2107                                                          mov     cl,46                                           ;column
  2108                                                          mov     ch,14                                           ;row
  2109                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2110                                  ;
  2111                                  ;       Display the EFLAGS register label and value
  2112                                  ;
  2113                                                          mov     cl,51                                           ;column
  2114                                                          mov     ch,11                                           ;row
  2115                                                          mov     esi,czIntEFLAGS                                 ;label
  2116                                                          call    SetConsoleString                                ;draw label
  2117                                                          mov     eax,[ebp+60]                                    ;EFLAGS
  2118                                                          mov     cl,55                                           ;column
  2119                                                          mov     ch,11                                           ;row
  2120                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2121                                  ;
  2122                                  ;       Display the ESP register label and value
  2123                                  ;
  2124                                                          mov     cl,51                                           ;column
  2125                                                          mov     ch,13                                           ;row
  2126                                                          mov     esi,czIntESP                                    ;label
  2127                                                          call    SetConsoleString                                ;draw label
  2128                                                          mov     eax,[ebp+12]                                    ;ESP
  2129                                                          mov     cl,55                                           ;column
  2130                                                          mov     ch,13                                           ;row
  2131                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2132                                  ;
  2133                                  ;       Display the EIP register label and value
  2134                                  ;
  2135                                                          mov     cl,51                                           ;column
  2136                                                          mov     ch,14                                           ;row
  2137                                                          mov     esi,czIntEIP                                    ;label
  2138                                                          call    SetConsoleString                                ;draw label
  2139                                                          mov     eax,[ebp+52]                                    ;EIP lo-order 32-bits
  2140                                                          mov     cl,55                                           ;column
  2141                                                          mov     ch,14                                           ;row
  2142                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2143                                  ;
  2144                                  ;       Halt and loop until reset
  2145                                  ;
  2146                                  .10                     sti                                                     ;enable maskable interrupts
  2147                                                          hlt                                                     ;halt processor
  2148                                                          jmp     .10                                             ;resume on interrupt
  2149                                  ;-----------------------------------------------------------------------------------------------------------------------
  2150                                  ;
  2151                                  ;       Processor Interrupt Name Strings
  2152                                  ;
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                  czIntDivideByZero       db      "Division by zero",0
  2155                                  czIntSingleStep         db      "Single step",0
  2156                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2157                                  czIntBreak              db      "Break",0
  2158                                  czIntInto               db      "Into",0
  2159                                  czIntBounds             db      "Bounds",0
  2160                                  czIntBadOpCode          db      "Bad Operation Code",0
  2161                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2162                                  czIntDoubleFault        db      "Double Fault",0
  2163                                  czIntOperand            db      "Operand",0
  2164                                  czIntBadTSS             db      "Bad Task State Segment",0
  2165                                  czIntNotPresent         db      "Not Present",0
  2166                                  czIntStackLimit         db      "Stack Limit",0
  2167                                  czIntProtection         db      "General Protection Fault",0
  2168                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2169                                  czIntReserved           db      "Reserved",0
  2170                                  ;-----------------------------------------------------------------------------------------------------------------------
  2171                                  ;
  2172                                  ;       Processor Interrupt Handling Strings
  2173                                  ;
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2176                                  czIntLabel              db      "Interrupt #",0
  2177                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2178                                  czIntEAX                db      "EAX:",0
  2179                                  czIntECX                db      "ECX:",0
  2180                                  czIntEDX                db      "EDX:",0
  2181                                  czIntEBX                db      "EBX:",0
  2182                                  czIntESI                db      "ESI:",0
  2183                                  czIntEDI                db      "EDI:",0
  2184                                  czIntEBP                db      "EBP:",0
  2185                                  czIntESP                db      "ESP:",0
  2186                                  czIntDS                 db      " DS:",0
  2187                                  czIntES                 db      " ES:",0
  2188                                  czIntSS                 db      " SS:",0
  2189                                  czIntCS                 db      " CS:",0
  2190                                  czIntEFLAGS             db      "FLG:",0
  2191                                  czIntEIP                db      "EIP:",0
  2192                                  ;-----------------------------------------------------------------------------------------------------------------------
  2193                                  ;
  2194                                  ;       Routine:        DrawTextDialogBox
  2195                                  ;
  2196                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2197                                  ;
  2198                                  ;       In:             CL      upper left column (0-79)
  2199                                  ;                       CH      upper left row (0-24)
  2200                                  ;                       DL      column width, excluding border
  2201                                  ;                       DH      row height, excluding border
  2202                                  ;                       BH      color attribute
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2206                                                          push    esi                                             ;
  2207                                                          push    edi                                             ;
  2208                                                          push    es                                              ;
  2209                                                          push    EGDTCGA                                         ;load CGA selector ...
  2210                                                          pop     es                                              ;... into ES
  2211                                  ;
  2212                                  ;       Compute target display offset
  2213                                  ;
  2214                                                          xor     eax,eax                                         ;zero register
  2215                                                          mov     al,ch                                           ;row
  2216                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2217                                                          mul     ah                                              ;row offset
  2218                                                          add     al,cl                                           ;add column
  2219                                                          adc     ah,0                                            ;add overflow
  2220                                                          add     al,cl                                           ;add column
  2221                                                          adc     ah,0                                            ;add overflow
  2222                                                          mov     edi,eax                                         ;target row offset
  2223                                  ;
  2224                                  ;       Display top border row
  2225                                  ;
  2226                                                          push    edi                                             ;save target row offset
  2227                                                          mov     ah,bh                                           ;attribute
  2228                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2229                                                          stosw                                                   ;display character and attribute
  2230                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2231                                                          xor     ecx,ecx                                         ;zero register
  2232                                                          mov     cl,dl                                           ;width, excluding border
  2233                                                          rep     stosw                                           ;display horizontal border
  2234                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2235                                                          stosw                                                   ;display character and attribute
  2236                                                          pop     edi                                             ;restore target row offset
  2237                                                          add     edi,ECONROWBYTES                                ;next row
  2238                                  ;
  2239                                  ;       Display dialog box body rows
  2240                                  ;
  2241                                                          xor     ecx,ecx                                         ;zero register
  2242                                                          mov     cl,dh                                           ;height, excluding border
  2243                                  .10                     push    ecx                                             ;save remaining rows
  2244                                                          push    edi                                             ;save target row offset
  2245                                                          mov     ah,bh                                           ;attribute
  2246                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2247                                                          stosw                                                   ;display character and attribute
  2248                                                          mov     al,EASCIISPACE                                  ;space
  2249                                                          xor     ecx,ecx                                         ;zero register
  2250                                                          mov     cl,dl                                           ;width, excluding border
  2251                                                          rep     stosw                                           ;display row
  2252                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2253                                                          stosw                                                   ;display character and attribute
  2254                                                          pop     edi                                             ;restore target row offset
  2255                                                          add     edi,ECONROWBYTES                                ;next row
  2256                                                          pop     ecx                                             ;remaining rows
  2257                                                          loop    .10                                             ;next row
  2258                                  ;
  2259                                  ;       Display bottom border row
  2260                                  ;
  2261                                                          push    edi                                             ;save target row offset
  2262                                                          mov     ah,bh                                           ;attribute
  2263                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2264                                                          stosw                                                   ;display character and attribute
  2265                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2266                                                          xor     ecx,ecx                                         ;zero register
  2267                                                          mov     cl,dl                                           ;width, excluding border
  2268                                                          rep     stosw                                           ;display horizontal border
  2269                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2270                                                          stosw                                                   ;display character and attribute
  2271                                                          pop     edi                                             ;restore target row offset
  2272                                                          add     edi,ECONROWBYTES                                ;next row
  2273                                  ;
  2274                                  ;       Restore and return
  2275                                  ;
  2276                                                          pop     es                                              ;restore non-volatile regs
  2277                                                          pop     edi                                             ;
  2278                                                          pop     esi                                             ;
  2279                                                          pop     ecx                                             ;
  2280                                                          ret                                                     ;return
  2281                                  ;=======================================================================================================================
  2282                                  ;
  2283                                  ;       Hardware Device Interupts
  2284                                  ;
  2285                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2286                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2287                                  ;       (BX=2028h).
  2288                                  ;
  2289                                  ;=======================================================================================================================
  2290                                  ;-----------------------------------------------------------------------------------------------------------------------
  2291                                  ;
  2292                                  ;       IRQ0    Clock Tick Interrupt
  2293                                  ;
  2294                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2295                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2296                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2297                                  ;
  2298                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2299                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2300                                  ;
  2301                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2302                                  ;       zero, the floppy disk motors are turned off.
  2303                                  ;
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                                          menter  clocktick                                       ;clock tick interrupt
  2306                                                          push    eax                                             ;save non-volatile regs
  2307                                                          push    edx                                             ;
  2308                                                          push    ds                                              ;
  2309                                  ;
  2310                                  ;       Update the clock tick count and the elapsed days as needed.
  2311                                  ;
  2312                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2313                                                          pop     ds                                              ;... into data segment register
  2314                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2315                                                          inc     eax                                             ;increment clock ticks
  2316                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2317                                                          jb      irq0.10                                         ;no, skip ahead
  2318                                                          inc     byte [wbClockDays]                              ;increment clock days
  2319                                                          xor     eax,eax                                         ;reset clock ticks
  2320                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2321                                  ;
  2322                                  ;       Decrement floppy disk motor timeout.
  2323                                  ;
  2324                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2325                                                          je      irq0.20                                         ;yes, skip ahead
  2326                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2327                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2328                                  ;
  2329                                  ;       Turn off the floppy disk motor if appropriate.
  2330                                  ;
  2331                                                          sti                                                     ;enable maskable interrupts
  2332                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2333                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2334                                                          in      al,dx                                           ;FDC main status byte
  2335                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2336                                                          jnz     irq0.15                                         ;wait while busy
  2337                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2338                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2339                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2340                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2341                                                          out     dx,al                                           ;turn motor off
  2342                                  ;
  2343                                  ;       Signal the end of the hardware interrupt.
  2344                                  ;
  2345                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2346                                  ;
  2347                                  ;       Restore and return.
  2348                                  ;
  2349                                                          pop     ds                                              ;restore modified regs
  2350                                                          pop     edx                                             ;
  2351                                                          pop     eax                                             ;
  2352                                                          iretd                                                   ;return
  2353                                  ;-----------------------------------------------------------------------------------------------------------------------
  2354                                  ;
  2355                                  ;       IRQ1    Keyboard Interrupt
  2356                                  ;
  2357                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2358                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2359                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2360                                  ;       ALL modified registers upon return.
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                                          menter  keyboard                                        ;keyboard interrrupt
  2364                                                          push    eax                                             ;save non-volatile regs
  2365                                                          push    ebx                                             ;
  2366                                                          push    ecx                                             ;
  2367                                                          push    esi                                             ;
  2368                                                          push    ds                                              ;
  2369                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2370                                                          pop     ds                                              ;... into data segment register
  2371                                                          xor     al,al                                           ;zero
  2372                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2373                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2374                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2375                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2376                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2377                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2378                                                          mov     al,' '                                          ;space
  2379                                                          mov     [wbConsoleChar],al                              ;set character to space
  2380                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2381                                                          not     al                                              ;controller timeout mask
  2382                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2383                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2384                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2385                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2386                                                          jz      irq1.140                                        ;yes, skip ahead
  2387                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2388                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2389                                                          mov     ah,al                                           ;copy scan code 0
  2390                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2391                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2392                                                          je      irq1.30                                         ;yes, set flag
  2393                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2394                                                          je      irq1.40                                         ;yes, reset flag
  2395                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2396                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2397                                                          je      irq1.30                                         ;yes, set flag
  2398                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2399                                                          je      irq1.40                                         ;yes, reset flag
  2400                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2401                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2402                                                          je      irq1.30                                         ;yes, set flag
  2403                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2404                                                          je      irq1.40                                         ;yes, reset flag
  2405                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2406                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2407                                                          je      irq1.30                                         ;yes, set flag
  2408                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2409                                                          je      irq1.40                                         ;yes, reset flag
  2410                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2411                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2412                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2413                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2414                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2415                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2416                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2417                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2418                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2419                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2420                                                          jne     irq1.70                                         ;no, skip ahead
  2421                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2422                                                          jz      irq1.140                                        ;yes, skip ahead
  2423                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2424                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2425                                                          mov     ah,al                                           ;copy scan code 1
  2426                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2427                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2428                                                          je      irq1.30                                         ;yes, set flag
  2429                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2430                                                          je      irq1.40                                         ;yes, reset flag
  2431                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2432                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2433                                                          je      irq1.30                                         ;yes, set flag
  2434                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2435                                                          je      irq1.40                                         ;yes, reset flag
  2436                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2437                                                          je      irq1.80                                         ;yes, skip ahead
  2438                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2439                                                          je      irq1.80                                         ;yes, skip ahead
  2440                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2441                                                          je      irq1.10                                         ;yes, continue
  2442                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2443                                                          jne     irq1.20                                         ;no, skip ahead
  2444                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2445                                                          jz      irq1.140                                        ;yes, skip ahead
  2446                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2447                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2448                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2449                                                          jz      irq1.140                                        ;yes, skip ahead
  2450                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2451                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2452                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2453                                  irq1.30                 or      bl,al                                           ;set shift flag
  2454                                                          jmp     irq1.60                                         ;skip ahead
  2455                                  irq1.40                 not     al                                              ;convert flag to mask
  2456                                                          and     bl,al                                           ;reset shift flag
  2457                                                          jmp     irq1.60                                         ;skip ahead
  2458                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2459                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2460                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2461                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2462                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2463                                                          jmp     irq1.150                                        ;finish keyboard handling
  2464                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2465                                                          jne     irq1.80                                         ;no continue
  2466                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2467                                                          jz      irq1.140                                        ;yes, skip ahead
  2468                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2469                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2470                                                          mov     ah,al                                           ;copy scan code 1
  2471                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2472                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2473                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2474                                                          jz      irq1.140                                        ;yes, skip ahead
  2475                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2476                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2477                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2478                                                          jz      irq1.140                                        ;yes, skip ahead
  2479                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2480                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2481                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2482                                                          jz      irq1.140                                        ;yes, skip ahead
  2483                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2484                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2485                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2486                                                          jz      irq1.140                                        ;yes, skip ahead
  2487                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2488                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2489                                                          jmp     irq1.150                                        ;continue
  2490                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2491                                                          test    ah,EKEYBUP                                      ;release code?
  2492                                                          jnz     irq1.130                                        ;yes, skip ahead
  2493                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2494                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2495                                                          jz      irq1.90                                         ;no, skip ahead
  2496                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2497                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2498                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2499                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2500                                                          jz      irq1.100                                        ;no skip ahead
  2501                                                          mov     cl,al                                           ;copy ASCII code
  2502                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2503                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2504                                                          jb      irq1.100                                        ;yes, skip ahead
  2505                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2506                                                          ja      irq1.100                                        ;yes, skip ahead
  2507                                                          xor     al,EASCIICASE                                   ;switch case
  2508                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2509                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2510                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2511                                                          jz      irq1.120                                        ;no, skip ahead
  2512                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2513                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2514                                                          or      edx,eax                                         ;msg id and codes
  2515                                                          xor     ecx,ecx                                         ;null param
  2516                                                          push    eax                                             ;save codes
  2517                                                          call    PutMessage                                      ;put message to console
  2518                                                          pop     eax                                             ;restore codes
  2519                                                          test    al,al                                           ;ASCII translation?
  2520                                                          jz      irq1.130                                        ;no, skip ahead
  2521                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2522                                                          and     eax,0FFFFh                                      ;clear high-order word
  2523                                                          or      edx,eax                                         ;msg id and codes
  2524                                                          xor     ecx,ecx                                         ;null param
  2525                                                          call    PutMessage                                      ;put message to console
  2526                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2527                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2528                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2529                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2530                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2531                                                          pop     ds                                              ;restore non-volatile regs
  2532                                                          pop     esi                                             ;
  2533                                                          pop     ecx                                             ;
  2534                                                          pop     ebx                                             ;
  2535                                                          pop     eax                                             ;
  2536                                                          iretd                                                   ;return
  2537                                  ;-----------------------------------------------------------------------------------------------------------------------
  2538                                  ;       Scan-Code to ASCII Translation Tables
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2541                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2542                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2543                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2544                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2545                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2546                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2547                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2548                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2549                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2550                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2551                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2552                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2553                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2554                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2555                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2556                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2557                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2558                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2559                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2560                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2561                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2562                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2563                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2564                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2565                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2566                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2567                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2568                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2569                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2570                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2571                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2572                                  ;-----------------------------------------------------------------------------------------------------------------------
  2573                                  ;
  2574                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2575                                  ;
  2576                                  ;-----------------------------------------------------------------------------------------------------------------------
  2577                                                          menter  iochannel                                       ;secondary 8259A cascade
  2578                                                          push    eax                                             ;save modified regs
  2579                                                          jmp     hwint                                           ;end interrupt and return
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581                                  ;
  2582                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2583                                  ;
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                                          menter  com2                                            ;serial port 2 interrupt
  2586                                                          push    eax                                             ;save modified regs
  2587                                                          jmp     hwint                                           ;end interrupt and return
  2588                                  ;-----------------------------------------------------------------------------------------------------------------------
  2589                                  ;
  2590                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2591                                  ;
  2592                                  ;-----------------------------------------------------------------------------------------------------------------------
  2593                                                          menter  com1                                            ;serial port 1 interrupt
  2594                                                          push    eax                                             ;save modified regs
  2595                                                          jmp     hwint                                           ;end interrupt and return
  2596                                  ;-----------------------------------------------------------------------------------------------------------------------
  2597                                  ;
  2598                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2599                                  ;
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2602                                                          push    eax                                             ;save modified regs
  2603                                                          jmp     hwint                                           ;end interrupt and return
  2604                                  ;-----------------------------------------------------------------------------------------------------------------------
  2605                                  ;
  2606                                  ;       IRQ6    Diskette Hardware Interrupt
  2607                                  ;
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                                          menter  diskette                                        ;floppy disk interrupt
  2610                                                          push    eax                                             ;save non-volatile regs
  2611                                                          push    ds                                              ;
  2612                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2613                                                          pop     ds                                              ;... into DS register
  2614                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2615                                                          or      al,10000000b                                    ;set IRQ flag
  2616                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2617                                                          pop     ds                                              ;restore non-volatile regs
  2618                                                          jmp     hwint                                           ;end primary PIC interrupt
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2625                                                          push    eax                                             ;save modified regs
  2626                                                          jmp     hwint                                           ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  rtclock                                         ;real-time clock interrupt
  2633                                                          push    eax                                             ;save modified regs
  2634                                                          jmp     hwwint                                          ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2641                                                          push    eax                                             ;save modified regs
  2642                                                          jmp     hwwint                                          ;end interrupt and return
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  ;
  2645                                  ;       IRQ10   Reserved Hardware Interrupt
  2646                                  ;
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                                          menter  irq10                                           ;reserved
  2649                                                          push    eax                                             ;save modified regs
  2650                                                          jmp     hwwint                                          ;end interrupt and return
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  ;
  2653                                  ;       IRQ11   Reserved Hardware Interrupt
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                                          menter  irq11                                           ;reserved
  2657                                                          push    eax                                             ;save modified regs
  2658                                                          jmp     hwwint                                          ;end interrupt and return
  2659                                  ;-----------------------------------------------------------------------------------------------------------------------
  2660                                  ;
  2661                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2662                                  ;
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2665                                                          push    eax                                             ;save modified regs
  2666                                                          jmp     hwwint                                          ;end interrupt and return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2670                                  ;
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                                          menter  coprocessor                                     ;coprocessor interrupt
  2673                                                          push    eax                                             ;save modified regs
  2674                                                          jmp     hwwint                                          ;end interrupt and return
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                  ;
  2677                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2678                                  ;
  2679                                  ;-----------------------------------------------------------------------------------------------------------------------
  2680                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2681                                                          push    eax                                             ;save modified regs
  2682                                                          jmp     hwwint                                          ;end interrupt and return
  2683                                  ;-----------------------------------------------------------------------------------------------------------------------
  2684                                  ;
  2685                                  ;       IRQ15   Reserved Hardware Interrupt
  2686                                  ;
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                                          menter  irq15                                           ;reserved
  2689                                                          push    eax                                             ;save modified regs
  2690                                                          jmp     hwwint                                          ;end interrupt and return
  2691                                  ;-----------------------------------------------------------------------------------------------------------------------
  2692                                  ;
  2693                                  ;       Exit from hardware interrupt
  2694                                  ;
  2695                                  ;-----------------------------------------------------------------------------------------------------------------------
  2696                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2697                                                          jmp     hwint90                                         ;skip ahead
  2698                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2699                                  hwint90                 pop     eax                                             ;restore modified regs
  2700                                                          iretd                                                   ;return from interrupt
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  ;
  2703                                  ;       INT 30h Operating System Software Service Interrupt
  2704                                  ;
  2705                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2706                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2707                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2708                                  ;       the entry address of the specific function from a table.
  2709                                  ;
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                                          menter  svc
  2712                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2713                                                          jae     svc90                                           ;yes, skip ahead
  2714                                                          movzx   eax,al                                          ;function
  2715                                                          shl     eax,2                                           ;offset into table
  2716                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2717                                  svc90                   iretd                                                   ;return from interrupt
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;       Service Request Table
  2721                                  ;
  2722                                  ;
  2723                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2724                                  ;
  2725                                  ;-----------------------------------------------------------------------------------------------------------------------
  2726                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2727                                                          tsvce   CompareMemory                                   ;compare memory
  2728                                                          tsvce   GetConsoleString                                ;get string input
  2729                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2730                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2731                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2732                                                          tsvce   UpperCaseString                                 ;upper-case string
  2733                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2734                                  ;-----------------------------------------------------------------------------------------------------------------------
  2735                                  ;
  2736                                  ;       Service Request Macros
  2737                                  ;
  2738                                  ;       These macros provide positional parameterization of service request calls.
  2739                                  ;
  2740                                  ;-----------------------------------------------------------------------------------------------------------------------
  2741                                  %macro                  clearConsoleScreen 0
  2742                                                          mov     al,eClearConsoleScreen                          ;function code
  2743                                                          int     _svc                                            ;invoke OS service
  2744                                  %endmacro
  2745                                  %macro                  compareMemory 0
  2746                                                          mov     al,eCompareMemory                               ;function code
  2747                                                          int     _svc                                            ;invoke OS service
  2748                                  %endmacro
  2749                                  %macro                  getConsoleString 4
  2750                                                          mov     edx,%1                                          ;buffer address
  2751                                                          mov     ecx,%2                                          ;max characters
  2752                                                          mov     bh,%3                                           ;echo indicator
  2753                                                          mov     bl,%4                                           ;terminator
  2754                                                          mov     al,eGetConsoleString                            ;function code
  2755                                                          int     _svc                                            ;invoke OS service
  2756                                  %endmacro
  2757                                  %macro                  placeCursor 0
  2758                                                          mov     al,ePlaceCursor                                 ;function code
  2759                                                          int     _svc                                            ;invoke OS service
  2760                                  %endmacro
  2761                                  %macro                  putConsoleString 1
  2762                                                          mov     edx,%1                                          ;string address
  2763                                                          mov     al,ePutConsoleString                            ;function code
  2764                                                          int     _svc                                            ;invoke OS service
  2765                                  %endmacro
  2766                                  %macro                  resetSystem 0
  2767                                                          mov     al,eResetSystem                                 ;function code
  2768                                                          int     _svc                                            ;invoke OS service
  2769                                  %endmacro
  2770                                  %macro                  upperCaseString 0
  2771                                                          mov     al,eUpperCaseString                             ;function code
  2772                                                          int     _svc                                            ;invoke OS service
  2773                                  %endmacro
  2774                                  ;=======================================================================================================================
  2775                                  ;
  2776                                  ;       Kernel Function Library
  2777                                  ;
  2778                                  ;=======================================================================================================================
  2779                                  ;=======================================================================================================================
  2780                                  ;
  2781                                  ;       String Helper Routines
  2782                                  ;
  2783                                  ;       CompareMemory
  2784                                  ;       UpperCaseString
  2785                                  ;
  2786                                  ;=======================================================================================================================
  2787                                  ;-----------------------------------------------------------------------------------------------------------------------
  2788                                  ;
  2789                                  ;       Routine:        CompareMemory
  2790                                  ;
  2791                                  ;       Description:    This routine compares two byte arrays.
  2792                                  ;
  2793                                  ;       In:             DS:EDX  first source address
  2794                                  ;                       DS:EBX  second source address
  2795                                  ;                       ECX     comparison length
  2796                                  ;
  2797                                  ;       Out:            EDX     first source address
  2798                                  ;                       EBX     second source address
  2799                                  ;                       ECX     0       array 1 = array 2
  2800                                  ;                               <0      array 1 < array 2
  2801                                  ;                               >0      array 1 > array 2
  2802                                  ;
  2803                                  ;-----------------------------------------------------------------------------------------------------------------------
  2804                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2805                                                          push    edi                                             ;
  2806                                                          push    es                                              ;
  2807                                                          push    ds                                              ;copy DS
  2808                                                          pop     es                                              ;... to ES
  2809                                                          mov     esi,edx                                         ;first source address
  2810                                                          mov     edi,ebx                                         ;second source address
  2811                                                          cld                                                     ;forward strings
  2812                                                          rep     cmpsb                                           ;compare bytes
  2813                                                          mov     al,0                                            ;default result
  2814                                                          jz      .10                                             ;branch if arrays equal
  2815                                                          mov     al,1                                            ;positive result
  2816                                                          jnc     .10                                             ;branch if target > source
  2817                                                          mov     al,-1                                           ;negative result
  2818                                  .10                     movsx   ecx,al                                          ;extend sign
  2819                                                          pop     es                                              ;restore non-volatile regs
  2820                                                          pop     edi                                             ;
  2821                                                          pop     esi                                             ;
  2822                                                          ret                                                     ;return
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  ;
  2825                                  ;       Routine:        UpperCaseString
  2826                                  ;
  2827                                  ;       Description:    This routine places all characters in the given string to upper case.
  2828                                  ;
  2829                                  ;       In:             DS:EDX  string address
  2830                                  ;
  2831                                  ;       Out:            EDX     string address
  2832                                  ;
  2833                                  ;-----------------------------------------------------------------------------------------------------------------------
  2834                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2835                                                          mov     esi,edx                                         ;string address
  2836                                                          cld                                                     ;forward strings
  2837                                  .10                     lodsb                                                   ;string character
  2838                                                          test    al,al                                           ;null?
  2839                                                          jz      .20                                             ;yes, skip ahead
  2840                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2841                                                          jb      .10                                             ;no, continue
  2842                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2843                                                          ja      .10                                             ;no, continue
  2844                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2845                                                          mov     [esi-1],al                                      ;upper character
  2846                                                          jmp     .10                                             ;continue
  2847                                  .20                     pop     esi                                             ;restore non-volatile regs
  2848                                                          ret                                                     ;return
  2849                                  ;=======================================================================================================================
  2850                                  ;
  2851                                  ;       Console Helper Routines
  2852                                  ;
  2853                                  ;       FirstConsoleColumn
  2854                                  ;       GetConsoleChar
  2855                                  ;       GetConsoleString
  2856                                  ;       NextConsoleColumn
  2857                                  ;       NextConsoleRow
  2858                                  ;       PreviousConsoleColumn
  2859                                  ;       PutConsoleChar
  2860                                  ;       PutConsoleHexByte
  2861                                  ;       PutConsoleHexDword
  2862                                  ;       PutConsoleHexWord
  2863                                  ;       PutConsoleOIAChar
  2864                                  ;       PutConsoleOIAShift
  2865                                  ;       PutConsoleString
  2866                                  ;       Yield
  2867                                  ;
  2868                                  ;=======================================================================================================================
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870                                  ;
  2871                                  ;       Routine:        FirstConsoleColumn
  2872                                  ;
  2873                                  ;       Description:    This routine resets the console column to start of the row.
  2874                                  ;
  2875                                  ;       In:             DS      OS data selector
  2876                                  ;
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2879                                                          mov     [wbConsoleColumn],al                            ;save column
  2880                                                          ret                                                     ;return
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  ;
  2883                                  ;       Routine:        GetConsoleChar
  2884                                  ;
  2885                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2886                                  ;
  2887                                  ;       Out:            AL      ASCII character code
  2888                                  ;                       AH      keyboard scan code
  2889                                  ;
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2892                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2893                                                          or      eax,eax                                         ;do we have a message?
  2894                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2895                                                          push    eax                                             ;save key codes
  2896                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2897                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2898                                                          pop     eax                                             ;restore key codes
  2899                                                          jne     GetConsoleChar                                  ;no, try again
  2900                                                          and     eax,0000ffffh                                   ;mask for key codes
  2901                                                          ret                                                     ;return
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       Routine:        GetConsoleString
  2905                                  ;
  2906                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2907                                  ;
  2908                                  ;       In:             DS:EDX  target buffer address
  2909                                  ;                       ECX     maximum number of characters to accept
  2910                                  ;                       BH      echo to terminal
  2911                                  ;                       BL      terminating character
  2912                                  ;
  2913                                  ;-----------------------------------------------------------------------------------------------------------------------
  2914                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2915                                                          push    esi                                             ;
  2916                                                          push    edi                                             ;
  2917                                                          push    es                                              ;
  2918                                                          push    ds                                              ;load data segment selector ...
  2919                                                          pop     es                                              ;... into extra segment register
  2920                                                          mov     edi,edx                                         ;edi = target buffer
  2921                                                          push    ecx                                             ;save maximum characters
  2922                                                          xor     al,al                                           ;zero register
  2923                                                          cld                                                     ;forward strings
  2924                                                          rep     stosb                                           ;zero fill buffer
  2925                                                          pop     ecx                                             ;maximum characters
  2926                                                          mov     edi,edx                                         ;edi = target buffer
  2927                                                          mov     esi,edx                                         ;esi = target buffer
  2928                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2929                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2930                                                          cmp     al,bl                                           ;is this the terminator?
  2931                                                          je      .50                                             ;yes, exit
  2932                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2933                                                          jne     .30                                             ;no, skip ahead
  2934                                                          cmp     esi,edi                                         ;at start of buffer?
  2935                                                          je      .20                                             ;yes, get next character
  2936                                                          dec     edi                                             ;backup target pointer
  2937                                                          mov     byte [edi],0                                    ;zero previous character
  2938                                                          inc     ecx                                             ;increment remaining chars
  2939                                                          test    bh,1                                            ;echo to console?
  2940                                                          jz      .20                                             ;no, get next character
  2941                                                          call    PreviousConsoleColumn                           ;backup console position
  2942                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2943                                                          call    PutConsoleChar                                  ;write space to console
  2944                                                          call    PlaceCursor                                     ;position the cursor
  2945                                                          jmp     .20                                             ;get next character
  2946                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2947                                                          jb      .20                                             ;no, get another character
  2948                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2949                                                          ja      .20                                             ;no, get another character
  2950                                                          stosb                                                   ;store character in buffer
  2951                                                          test    bh,1                                            ;echo to console?
  2952                                                          jz      .40                                             ;no, skip ahead
  2953                                                          call    PutConsoleChar                                  ;write character to console
  2954                                                          call    NextConsoleColumn                               ;advance console position
  2955                                                          call    PlaceCursor                                     ;position the cursor
  2956                                  .40                     dec     ecx                                             ;decrement remaining chars
  2957                                                          jmp     .10                                             ;next
  2958                                  .50                     xor     al,al                                           ;null
  2959                                                          stosb                                                   ;terminate buffer
  2960                                                          pop     es                                              ;restore non-volatile regs
  2961                                                          pop     edi                                             ;
  2962                                                          pop     esi                                             ;
  2963                                                          pop     ecx                                             ;
  2964                                                          ret                                                     ;return
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966                                  ;
  2967                                  ;       Routine:        NextConsoleColumn
  2968                                  ;
  2969                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2970                                  ;                       incremented if the end of the current row is reached.
  2971                                  ;
  2972                                  ;       In:             DS      OS data selector
  2973                                  ;
  2974                                  ;-----------------------------------------------------------------------------------------------------------------------
  2975                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2976                                                          inc     al                                              ;increment column
  2977                                                          mov     [wbConsoleColumn],al                            ;save column
  2978                                                          cmp     al,ECONCOLS                                     ;end of row?
  2979                                                          jb      .10                                             ;no, skip ahead
  2980                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2981                                                          call    NextConsoleRow                                  ;line feed to next row
  2982                                  .10                     ret                                                     ;return
  2983                                  ;-----------------------------------------------------------------------------------------------------------------------
  2984                                  ;
  2985                                  ;       Routine:        NextConsoleRow
  2986                                  ;
  2987                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2988                                  ;
  2989                                  ;       In:             DS      OS data selector
  2990                                  ;
  2991                                  ;-----------------------------------------------------------------------------------------------------------------------
  2992                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2993                                                          inc     al                                              ;increment row
  2994                                                          mov     [wbConsoleRow],al                               ;save row
  2995                                                          cmp     al,ECONROWS                                     ;end of screen?
  2996                                                          jb      .10                                             ;no, skip ahead
  2997                                                          call    ScrollConsoleRow                                ;scroll up one row
  2998                                                          mov     al,[wbConsoleRow]                               ;row
  2999                                                          dec     al                                              ;decrement row
  3000                                                          mov     [wbConsoleRow],al                               ;save row
  3001                                  .10                     ret                                                     ;return
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  ;
  3004                                  ;       Routine:        PreviousConsoleColumn
  3005                                  ;
  3006                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3007                                  ;                       the column is set to the last position in the row and the row is decremented.
  3008                                  ;
  3009                                  ;       In:             DS      OS data selector
  3010                                  ;
  3011                                  ;-----------------------------------------------------------------------------------------------------------------------
  3012                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3013                                                          or      al,al                                           ;start of row?
  3014                                                          jnz     .10                                             ;no, skip ahead
  3015                                                          mov     ah,[wbConsoleRow]                               ;current row
  3016                                                          or      ah,ah                                           ;top of screen?
  3017                                                          jz      .20                                             ;yes, exit with no change
  3018                                                          dec     ah                                              ;decrement row
  3019                                                          mov     [wbConsoleRow],ah                               ;save row
  3020                                                          mov     al,ECONCOLS                                     ;set maximum column
  3021                                  .10                     dec     al                                              ;decrement column
  3022                                                          mov     [wbConsoleColumn],al                            ;save column
  3023                                  .20                     ret                                                     ;return
  3024                                  ;-----------------------------------------------------------------------------------------------------------------------
  3025                                  ;
  3026                                  ;       Routine:        PutConsoleChar
  3027                                  ;
  3028                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3029                                  ;
  3030                                  ;       In:             AL      ASCII character
  3031                                  ;                       DS      OS data selector
  3032                                  ;
  3033                                  ;-----------------------------------------------------------------------------------------------------------------------
  3034                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3035                                                          push    es                                              ;
  3036                                                          push    EGDTCGA                                         ;load CGA selector ...
  3037                                                          pop     es                                              ;... into extra segment reg
  3038                                                          mov     cl,[wbConsoleColumn]                            ;column
  3039                                                          mov     ch,[wbConsoleRow]                               ;row
  3040                                                          call    SetConsoleChar                                  ;put character at row, column
  3041                                                          pop     es                                              ;restore non-volatile regs
  3042                                                          pop     ecx                                             ;
  3043                                                          ret                                                     ;return
  3044                                  ;-----------------------------------------------------------------------------------------------------------------------
  3045                                  ;
  3046                                  ;       Routine:        PutConsoleHexByte
  3047                                  ;
  3048                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3049                                  ;
  3050                                  ;       In:             AL      byte value
  3051                                  ;                       CL      column
  3052                                  ;                       CH      row
  3053                                  ;                       DS      OS data selector
  3054                                  ;                       ES      CGA selector
  3055                                  ;
  3056                                  ;-----------------------------------------------------------------------------------------------------------------------
  3057                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3058                                                          mov     bl,al                                           ;save byte value
  3059                                                          shr     al,4                                            ;hi-order nybble
  3060                                                          or      al,030h                                         ;apply ASCII zone
  3061                                                          cmp     al,03ah                                         ;numeric?
  3062                                                          jb      .10                                             ;yes, skip ahead
  3063                                                          add     al,7                                            ;add ASCII offset for alpha
  3064                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3065                                                          mov     al,bl                                           ;byte value
  3066                                                          and     al,0fh                                          ;lo-order nybble
  3067                                                          or      al,30h                                          ;apply ASCII zone
  3068                                                          cmp     al,03ah                                         ;numeric?
  3069                                                          jb      .20                                             ;yes, skip ahead
  3070                                                          add     al,7                                            ;add ASCII offset for alpha
  3071                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3072                                                          pop     ebx                                             ;restore non-volatile regs
  3073                                                          ret                                                     ;return
  3074                                  ;-----------------------------------------------------------------------------------------------------------------------
  3075                                  ;
  3076                                  ;       Routine:        PutConsoleHexDword
  3077                                  ;
  3078                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3079                                  ;
  3080                                  ;       In:             EAX     value
  3081                                  ;                       CL      column
  3082                                  ;                       CH      row
  3083                                  ;                       DS      OS data selector
  3084                                  ;                       ES      CGA selector
  3085                                  ;
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  PutConsoleHexDword      push    eax
  3088                                                          shr     eax,16
  3089                                                          call    PutConsoleHexWord
  3090                                                          pop     eax
  3091                                                          call    PutConsoleHexWord
  3092                                                          ret
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  ;
  3095                                  ;       Routine:        PutConsoleHexWord
  3096                                  ;
  3097                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3098                                  ;
  3099                                  ;       In:             EAX     value
  3100                                  ;                       CL      column
  3101                                  ;                       CH      row
  3102                                  ;                       DS      OS data selector
  3103                                  ;                       ES      CGA selector
  3104                                  ;
  3105                                  ;-----------------------------------------------------------------------------------------------------------------------
  3106                                  PutConsoleHexWord       push    eax
  3107                                                          shr     eax,8
  3108                                                          call    PutConsoleHexByte
  3109                                                          pop     eax
  3110                                                          call    PutConsoleHexByte
  3111                                                          ret
  3112                                  ;-----------------------------------------------------------------------------------------------------------------------
  3113                                  ;
  3114                                  ;       Routine:        PutConsoleOIAChar
  3115                                  ;
  3116                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3117                                  ;
  3118                                  ;       In:             DS      OS data selector
  3119                                  ;
  3120                                  ;-----------------------------------------------------------------------------------------------------------------------
  3121                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3122                                                          push    ecx                                             ;
  3123                                                          push    esi                                             ;
  3124                                                          push    ds                                              ;
  3125                                                          push    es                                              ;
  3126                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3127                                                          pop     ds                                              ;... into data segment register
  3128                                                          push    EGDTCGA                                         ;load CGA selector ...
  3129                                                          pop     es                                              ;... into extra segment register
  3130                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3131                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3132                                                          mov     bl,0                                            ;starting column
  3133                                                          mov     ecx,6                                           ;maximum scan codes
  3134                                  .10                     push    ecx                                             ;save remaining count
  3135                                                          mov     ecx,ebx                                         ;row, column
  3136                                                          lodsb                                                   ;read scan code
  3137                                                          or      al,al                                           ;scan code present?
  3138                                                          jz      .20                                             ;no, skip ahead
  3139                                                          call    PutConsoleHexByte                               ;display scan code
  3140                                                          jmp     .30                                             ;continue
  3141                                  .20                     mov     al,' '                                          ;ASCII space
  3142                                                          call    SetConsoleChar                                  ;display space
  3143                                                          mov     al,' '                                          ;ASCII space
  3144                                                          call    SetConsoleChar                                  ;display space
  3145                                  .30                     add     bl,2                                            ;next column (+2)
  3146                                                          pop     ecx                                             ;restore remaining
  3147                                                          loop    .10                                             ;next code
  3148                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3149                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3150                                                          jb      .40                                             ;no, skip ahead
  3151                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3152                                                          ja      .40                                             ;no, skip ahead
  3153                                                          mov     ch,bh                                           ;OIA row
  3154                                                          mov     cl,40                                           ;character display column
  3155                                                          call    SetConsoleChar                                  ;display ASCII character
  3156                                  .40                     pop     es                                              ;restore non-volatile regs
  3157                                                          pop     ds                                              ;
  3158                                                          pop     esi                                             ;
  3159                                                          pop     ecx                                             ;
  3160                                                          pop     ebx                                             ;
  3161                                                          ret                                                     ;return
  3162                                  ;-----------------------------------------------------------------------------------------------------------------------
  3163                                  ;
  3164                                  ;       Routine:        PutConsoleOIAShift
  3165                                  ;
  3166                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3167                                  ;
  3168                                  ;       In:             BL      shift flags
  3169                                  ;                       BH      lock flags
  3170                                  ;                       DS      OS data selector
  3171                                  ;
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3174                                                          push    es                                              ;
  3175                                                          push    EGDTCGA                                         ;load CGA selector ...
  3176                                                          pop     es                                              ;... into ES register
  3177                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3178                                                          mov     al,EASCIISPACE                                  ;space is default character
  3179                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3180                                                          jz      .10                                             ;no, skip ahead
  3181                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3182                                  .10                     mov     cl,14                                           ;indicator column
  3183                                                          call    SetConsoleChar                                  ;display ASCII character
  3184                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3185                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3186                                                          jz      .20                                             ;no, skip ahead
  3187                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3188                                  .20                     mov     cl,64                                           ;indicator column
  3189                                                          call    SetConsoleChar                                  ;display ASCII character
  3190                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3191                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3192                                                          jz      .30                                             ;no, skip ahead
  3193                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3194                                  .30                     mov     cl,15                                           ;indicator column
  3195                                                          call    SetConsoleChar                                  ;display ASCII character
  3196                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3197                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3198                                                          jz      .40                                             ;no, skip ahead
  3199                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3200                                  .40                     mov     cl,63                                           ;indicator column
  3201                                                          call    SetConsoleChar                                  ;display ASCII character
  3202                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3203                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3204                                                          jz      .50                                             ;no, skip ahead
  3205                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3206                                  .50                     mov     cl,16                                           ;indicator column
  3207                                                          call    SetConsoleChar                                  ;display ASCII character
  3208                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3209                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3210                                                          jz      .60                                             ;no, skip ahead
  3211                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3212                                  .60                     mov     cl,62                                           ;indicator column
  3213                                                          call    SetConsoleChar                                  ;display ASCII character
  3214                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3215                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3216                                                          jz      .70                                             ;no, skip ahead
  3217                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3218                                  .70                     mov     cl,78                                           ;indicator column
  3219                                                          call    SetConsoleChar                                  ;display ASCII character
  3220                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3221                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3222                                                          jz      .80                                             ;no, skip ahead
  3223                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3224                                  .80                     mov     cl,77                                           ;indicator column
  3225                                                          call    SetConsoleChar                                  ;display ASCII character
  3226                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3227                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3228                                                          jz      .90                                             ;no, skip ahead
  3229                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3230                                  .90                     mov     cl,76                                           ;indicator column
  3231                                                          call    SetConsoleChar                                  ;display ASCII character
  3232                                                          pop     es                                              ;restore non-volatile regs
  3233                                                          pop     ecx                                             ;
  3234                                                          ret                                                     ;return
  3235                                  ;-----------------------------------------------------------------------------------------------------------------------
  3236                                  ;
  3237                                  ;       Routine:        PutConsoleString
  3238                                  ;
  3239                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3240                                  ;                       console position as needed.
  3241                                  ;
  3242                                  ;       In:             EDX     source address
  3243                                  ;                       DS      OS data selector
  3244                                  ;
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3247                                                          mov     esi,edx                                         ;source address
  3248                                                          cld                                                     ;forward strings
  3249                                  .10                     lodsb                                                   ;ASCII character
  3250                                                          or      al,al                                           ;end of string?
  3251                                                          jz      .40                                             ;yes, skip ahead
  3252                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3253                                                          jne     .20                                             ;no, skip ahead
  3254                                                          call    FirstConsoleColumn                              ;move to start of row
  3255                                                          jmp     .10                                             ;next character
  3256                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3257                                                          jne     .30                                             ;no, skip ahead
  3258                                                          call    NextConsoleRow                                  ;move to next row
  3259                                                          jmp     .10                                             ;next character
  3260                                  .30                     call    PutConsoleChar                                  ;output character to console
  3261                                                          call    NextConsoleColumn                               ;advance to next column
  3262                                                          jmp     .10                                             ;next character
  3263                                  .40                     pop     esi                                             ;restore non-volatile regs
  3264                                                          ret                                                     ;return
  3265                                  ;-----------------------------------------------------------------------------------------------------------------------
  3266                                  ;
  3267                                  ;       Routine:        Yield
  3268                                  ;
  3269                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3270                                  ;
  3271                                  ;-----------------------------------------------------------------------------------------------------------------------
  3272                                  Yield                   sti                                                     ;enable maskagle interrupts
  3273                                                          hlt                                                     ;halt until external interrupt
  3274                                                          ret                                                     ;return
  3275                                  ;=======================================================================================================================
  3276                                  ;
  3277                                  ;       Message Queue Helper Routines
  3278                                  ;
  3279                                  ;       GetMessage
  3280                                  ;       PutMessage
  3281                                  ;
  3282                                  ;=======================================================================================================================
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;       Routine:        GetMessage
  3286                                  ;
  3287                                  ;       Description:    This routine reads and removes a message from the message queue.
  3288                                  ;
  3289                                  ;       Out:            EAX     lo-order message data
  3290                                  ;                       EDX     hi-order message data
  3291                                  ;
  3292                                  ;                       CY      0 = message read
  3293                                  ;                               1 = no message to read
  3294                                  ;
  3295                                  ;-----------------------------------------------------------------------------------------------------------------------
  3296                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3297                                                          push    ecx                                             ;
  3298                                                          push    ds                                              ;
  3299                                                          push    ELDTMQ                                          ;load message queue selector ...
  3300                                                          pop     ds                                              ;... into data segment register
  3301                                                          mov     ebx,[MQHead]                                    ;head ptr
  3302                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3303                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3304                                                          or      eax,edx                                         ;is queue empty?
  3305                                                          stc                                                     ;assume queue is emtpy
  3306                                                          jz      .20                                             ;yes, skip ahead
  3307                                                          xor     ecx,ecx                                         ;store zero
  3308                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3309                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3310                                                          add     ebx,8                                           ;next queue element
  3311                                                          and     ebx,03fch                                       ;at end of queue?
  3312                                                          jnz     .10                                             ;no, skip ahead
  3313                                                          mov     bl,8                                            ;reset to 1st entry
  3314                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3315                                                          clc                                                     ;indicate message read
  3316                                  .20                     pop     ds                                              ;restore non-volatile regs
  3317                                                          pop     ecx                                             ;
  3318                                                          pop     ebx                                             ;
  3319                                                          ret                                                     ;return
  3320                                  ;-----------------------------------------------------------------------------------------------------------------------
  3321                                  ;
  3322                                  ;       Routine:        PutMessage
  3323                                  ;
  3324                                  ;       Description:    This routine adda a message to the message queue.
  3325                                  ;
  3326                                  ;       In:             ECX     hi-order data word
  3327                                  ;                       EDX     lo-order data word
  3328                                  ;
  3329                                  ;       Out:            CY      0 = success
  3330                                  ;                               1 = fail: queue is full
  3331                                  ;
  3332                                  ;-----------------------------------------------------------------------------------------------------------------------
  3333                                  PutMessage              push    ds                                              ;save non-volatile regs
  3334                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3335                                                          pop     ds                                              ;... into data segment register
  3336                                                          mov     eax,[MQTail]                                    ;tail ptr
  3337                                                          cmp     dword [eax],0                                   ;is queue full?
  3338                                                          stc                                                     ;assume failure
  3339                                                          jne     .20                                             ;yes, cannot store
  3340                                                          mov     [eax],edx                                       ;store lo-order data
  3341                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3342                                                          add     eax,8                                           ;next queue element adr
  3343                                                          and     eax,03fch                                       ;at end of queue?
  3344                                                          jnz     .10                                             ;no, skip ahead
  3345                                                          mov     al,8                                            ;reset to top of queue
  3346                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3347                                                          clc                                                     ;indicate success
  3348                                  .20                     pop     ds                                              ;restore non-volatile regs
  3349                                                          ret                                                     ;return
  3350                                  ;=======================================================================================================================
  3351                                  ;
  3352                                  ;       Memory-Mapped Video Routines
  3353                                  ;
  3354                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3355                                  ;
  3356                                  ;       ClearConsoleScreen
  3357                                  ;       ScrollConsoleRow
  3358                                  ;       SetConsoleChar
  3359                                  ;       SetConsoleString
  3360                                  ;
  3361                                  ;=======================================================================================================================
  3362                                  ;-----------------------------------------------------------------------------------------------------------------------
  3363                                  ;
  3364                                  ;       Routine:        ClearConsoleScreen
  3365                                  ;
  3366                                  ;       Description:    This routine clears the console (CGA) screen.
  3367                                  ;
  3368                                  ;-----------------------------------------------------------------------------------------------------------------------
  3369                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3370                                                          push    edi                                             ;
  3371                                                          push    ds                                              ;
  3372                                                          push    es                                              ;
  3373                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  3374                                                          pop     ds                                              ;... into DS register
  3375                                                          push    EGDTCGA                                         ;load CGA selector ...
  3376                                                          pop     es                                              ;... into ES register
  3377                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  3378                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3379                                                          xor     edi,edi                                         ;target offset
  3380                                                          cld                                                     ;forward strings
  3381                                                          rep     stosd                                           ;reset screen body
  3382                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3383                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3384                                                          rep     stosd                                           ;reset OIA line
  3385                                                          xor     al,al                                           ;zero register
  3386                                                          mov     [wbConsoleRow],al                               ;reset console row
  3387                                                          mov     [wbConsoleColumn],al                            ;reset console column
  3388                                                          call    PlaceCursor                                     ;place cursor at current position
  3389                                                          pop     es                                              ;restore non-volatile regs
  3390                                                          pop     ds                                              ;
  3391                                                          pop     edi                                             ;
  3392                                                          pop     ecx                                             ;
  3393                                                          ret                                                     ;return
  3394                                  ;-----------------------------------------------------------------------------------------------------------------------
  3395                                  ;
  3396                                  ;       Routine:        ScrollConsoleRow
  3397                                  ;
  3398                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3399                                  ;
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3402                                                          push    esi                                             ;
  3403                                                          push    edi                                             ;
  3404                                                          push    ds                                              ;
  3405                                                          push    es                                              ;
  3406                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3407                                                          pop     ds                                              ;... into DS
  3408                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3409                                                          pop     es                                              ;... into ES
  3410                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3411                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3412                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3413                                                          cld                                                     ;forward strings
  3414                                                          rep     movsd                                           ;move 24 lines up
  3415                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3416                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3417                                                          rep     stosd                                           ;clear bottom row
  3418                                                          pop     es                                              ;restore non-volatile regs
  3419                                                          pop     ds                                              ;
  3420                                                          pop     edi                                             ;
  3421                                                          pop     esi                                             ;
  3422                                                          pop     ecx                                             ;
  3423                                                          ret                                                     ;return
  3424                                  ;-----------------------------------------------------------------------------------------------------------------------
  3425                                  ;
  3426                                  ;       Routine:        SetConsoleChar
  3427                                  ;
  3428                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3429                                  ;
  3430                                  ;       In:             AL      ASCII character
  3431                                  ;                       CL      column
  3432                                  ;                       CH      row
  3433                                  ;                       ES      CGA selector
  3434                                  ;
  3435                                  ;       Out:            EAX     last target address written (ES:)
  3436                                  ;                       CL      column + 1
  3437                                  ;
  3438                                  ;-----------------------------------------------------------------------------------------------------------------------
  3439                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3440                                                          movzx   eax,ch                                          ;row
  3441                                                          mov     ah,ECONCOLS                                     ;cols/row
  3442                                                          mul     ah                                              ;row * cols/row
  3443                                                          add     al,cl                                           ;add column
  3444                                                          adc     ah,0                                            ;handle carry
  3445                                                          shl     eax,1                                           ;screen offset
  3446                                                          mov     [es:eax],dl                                     ;store character
  3447                                                          inc     cl                                              ;next column
  3448                                                          ret                                                     ;return
  3449                                  ;-----------------------------------------------------------------------------------------------------------------------
  3450                                  ;
  3451                                  ;       Routine:        SetConsoleString
  3452                                  ;
  3453                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3454                                  ;
  3455                                  ;       In:             ESI     source offset (DS:)
  3456                                  ;                       CL      column
  3457                                  ;                       CH      row
  3458                                  ;                       ES      CGA selector
  3459                                  ;
  3460                                  ;-----------------------------------------------------------------------------------------------------------------------
  3461                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3462                                                          cld                                                     ;forward strings
  3463                                  .10                     lodsb                                                   ;next ASCII character
  3464                                                          test    al,al                                           ;end of string?
  3465                                                          jz      .20                                             ;yes, branch
  3466                                                          call    SetConsoleChar                                  ;store character
  3467                                                          jmp     .10                                             ;continue
  3468                                  .20                     pop     esi                                             ;restore non-volatile regs
  3469                                                          ret                                                     ;return
  3470                                  ;=======================================================================================================================
  3471                                  ;
  3472                                  ;       Input/Output Routines
  3473                                  ;
  3474                                  ;       These routines read and/or write directly to ports.
  3475                                  ;
  3476                                  ;       PlaceCursor
  3477                                  ;       PutPrimaryEndOfInt
  3478                                  ;       PutSecondaryEndOfInt
  3479                                  ;       ResetSystem
  3480                                  ;       SetKeyboardLamps
  3481                                  ;       WaitForKeyInBuffer
  3482                                  ;       WaitForKeyOutBuffer
  3483                                  ;
  3484                                  ;=======================================================================================================================
  3485                                  ;-----------------------------------------------------------------------------------------------------------------------
  3486                                  ;
  3487                                  ;       Routine:        PlaceCursor
  3488                                  ;
  3489                                  ;       Description:    This routine positions the cursor on the console.
  3490                                  ;
  3491                                  ;       In:             DS      OS data selector
  3492                                  ;
  3493                                  ;-----------------------------------------------------------------------------------------------------------------------
  3494                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3495                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3496                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3497                                                          mul     ah                                              ;row offset
  3498                                                          add     al,[wbConsoleColumn]                            ;add column
  3499                                                          adc     ah,0                                            ;add overflow
  3500                                                          mov     ecx,eax                                         ;screen offset
  3501                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3502                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3503                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3504                                                          out     dx,al                                           ;select register
  3505                                                          inc     edx                                             ;data port
  3506                                                          mov     al,ch                                           ;hi-order cursor loc
  3507                                                          out     dx,al                                           ;store hi-order loc
  3508                                                          dec     edx                                             ;register select port
  3509                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3510                                                          out     dx,al                                           ;select register
  3511                                                          inc     edx                                             ;data port
  3512                                                          mov     al,cl                                           ;lo-order cursor loc
  3513                                                          out     dx,al                                           ;store lo-order loc
  3514                                                          pop     ecx                                             ;restore non-volatile regs
  3515                                                          ret                                                     ;return
  3516                                  ;-----------------------------------------------------------------------------------------------------------------------
  3517                                  ;
  3518                                  ;       Routine:        PutPrimaryEndOfInt
  3519                                  ;
  3520                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3521                                  ;
  3522                                  ;-----------------------------------------------------------------------------------------------------------------------
  3523                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3524                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3525                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3526                                                          ret                                                     ;return
  3527                                  ;-----------------------------------------------------------------------------------------------------------------------
  3528                                  ;
  3529                                  ;       Routine:        PutSecondaryEndOfInt
  3530                                  ;
  3531                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3532                                  ;
  3533                                  ;-----------------------------------------------------------------------------------------------------------------------
  3534                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3535                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3536                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3537                                                          ret                                                     ;return
  3538                                  ;-----------------------------------------------------------------------------------------------------------------------
  3539                                  ;
  3540                                  ;       Routine:        ResetSystem
  3541                                  ;
  3542                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3543                                  ;
  3544                                  ;       Out:            N/A     This routine does not return.
  3545                                  ;
  3546                                  ;-----------------------------------------------------------------------------------------------------------------------
  3547                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3548                                                          loop    $                                               ;clear interrupts
  3549                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3550                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3551                                  .10                     sti                                                     ;enable maskable interrupts
  3552                                                          hlt                                                     ;halt until interrupt
  3553                                                          jmp     .10                                             ;repeat until reset kicks in
  3554                                  ;-----------------------------------------------------------------------------------------------------------------------
  3555                                  ;
  3556                                  ;       Routine:        SetKeyboardLamps
  3557                                  ;
  3558                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3559                                  ;
  3560                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3561                                  ;
  3562                                  ;-----------------------------------------------------------------------------------------------------------------------
  3563                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3564                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3565                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3566                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3567                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3568                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3569                                                          mov     al,bh                                           ;set/reset lamps value
  3570                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3571                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3572                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3573                                                          ret                                                     ;return
  3574                                  ;-----------------------------------------------------------------------------------------------------------------------
  3575                                  ;
  3576                                  ;       Routine:        WaitForKeyInBuffer
  3577                                  ;
  3578                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3579                                  ;
  3580                                  ;       Out:            ZF      1 = Input buffer ready
  3581                                  ;                               0 = Input buffer not ready after timeout
  3582                                  ;
  3583                                  ;-----------------------------------------------------------------------------------------------------------------------
  3584                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3585                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3586                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3587                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3588                                                          loopnz  .10                                             ;yes, repeat till timeout
  3589                                                          pop     ecx                                             ;restore non-volatile regs
  3590                                                          ret                                                     ;return
  3591                                  ;-----------------------------------------------------------------------------------------------------------------------
  3592                                  ;
  3593                                  ;       Routine:        WaitForKeyOutBuffer
  3594                                  ;
  3595                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3596                                  ;
  3597                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3598                                  ;                               0 = Output buffer empty after timeout
  3599                                  ;
  3600                                  ;-----------------------------------------------------------------------------------------------------------------------
  3601                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3602                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3603                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3604                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3605                                                          loopz   .10                                             ;loop until output buffer bit
  3606                                                          pop     ecx                                             ;restore non-volatile regs
  3607                                                          ret                                                     ;return
  3608                                  ;-----------------------------------------------------------------------------------------------------------------------
  3609                                  ;
  3610                                  ;       End of the Kernel Function Library
  3611                                  ;
  3612                                  ;-----------------------------------------------------------------------------------------------------------------------
  3613                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3614                                  ;=======================================================================================================================
  3615                                  ;
  3616                                  ;       Console Task
  3617                                  ;
  3618                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3619                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3620                                  ;       screen and responds to user commands.
  3621                                  ;
  3622                                  ;=======================================================================================================================
  3623                                  ;-----------------------------------------------------------------------------------------------------------------------
  3624                                  ;
  3625                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3626                                  ;
  3627                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3628                                  ;
  3629                                  ;-----------------------------------------------------------------------------------------------------------------------
  3630                                  section                 constack                                                ;console task stack
  3631                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3632                                  ;-----------------------------------------------------------------------------------------------------------------------
  3633                                  ;
  3634                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3635                                  ;
  3636                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3637                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3638                                  ;       16 descriptors. Six are initially defined.
  3639                                  ;
  3640                                  ;-----------------------------------------------------------------------------------------------------------------------
  3641                                  section                 conldt                                                  ;console local descriptors
  3642                                                          dq      004093004780007Fh                               ;04 TSS alias
  3643                                                          dq      004093004700007Fh                               ;0c LDT alias
  3644                                                          dq      00409300400006FFh                               ;14 stack
  3645                                                          dq      00CF93000000FFFFh                               ;1c data
  3646                                                          dq      00409B0050000FFFh                               ;24 code
  3647                                                          dq      00409300480007FFh                               ;2c message queue
  3648                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3649                                  ;-----------------------------------------------------------------------------------------------------------------------
  3650                                  ;
  3651                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3652                                  ;
  3653                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3654                                  ;       segment. CS to console code.
  3655                                  ;
  3656                                  ;-----------------------------------------------------------------------------------------------------------------------
  3657                                  section                 contss                                                  ;console task state segment
  3658                                                          dd      0                                               ;00 back-link tss
  3659                                                          dd      0700h                                           ;04 esp ring 0
  3660                                                          dd      0014h                                           ;08 ss ring 0
  3661                                                          dd      0700h                                           ;0c esp ring 1
  3662                                                          dd      0014h                                           ;10 es ring 1
  3663                                                          dd      0700h                                           ;14 esp ring 2
  3664                                                          dd      0014h                                           ;18 ss ring 2
  3665                                                          dd      0                                               ;1c cr ring 3
  3666                                                          dd      0                                               ;20 eip
  3667                                                          dd      0200h                                           ;24 eflags
  3668                                                          dd      0                                               ;28 eax
  3669                                                          dd      0                                               ;2c ecx
  3670                                                          dd      0                                               ;30 edx
  3671                                                          dd      0                                               ;34 ebx
  3672                                                          dd      0700h                                           ;38 esp ring 3
  3673                                                          dd      0                                               ;3c ebp
  3674                                                          dd      0                                               ;40 esi
  3675                                                          dd      0                                               ;44 edi
  3676                                                          dd      001Ch                                           ;48 es
  3677                                                          dd      0024h                                           ;4c cs
  3678                                                          dd      0014h                                           ;50 ss ring 3
  3679                                                          dd      001Ch                                           ;54 ds
  3680                                                          dd      0                                               ;58 fs
  3681                                                          dd      0                                               ;5c gs
  3682                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3683                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3684                                  ;-----------------------------------------------------------------------------------------------------------------------
  3685                                  ;
  3686                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3687                                  ;
  3688                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3689                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3690                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3691                                  ;       event.
  3692                                  ;
  3693                                  ;-----------------------------------------------------------------------------------------------------------------------
  3694                                  section                 conmque                                                 ;console message queue
  3695                                                          dd      8                                               ;head pointer
  3696                                                          dd      8                                               ;tail pointer
  3697                                                          times   510 dd 0                                        ;queue elements
  3698                                  ;-----------------------------------------------------------------------------------------------------------------------
  3699                                  ;
  3700                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3701                                  ;
  3702                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3703                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3704                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3705                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3706                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3707                                  ;       board input, echoing to the console screen and responding to user commands.
  3708                                  ;
  3709                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3710                                  ;
  3711                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3712                                  ;                               |  Real Mode Interrupt Vectors                  |
  3713                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3714                                  ;                               |  Reserved BIOS Memory Area                    |
  3715                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3716                                  ;                               |  Shared Kernel Memory Area                    |
  3717                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3718                                  ;                               |  Global Descriptor Table (GDT)                |
  3719                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3720                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3721                                  ;                       002000  +-----------------------------------------------+
  3722                                  ;                               |  Interrupt Handlers                           |
  3723                                  ;                               |  Kernel Function Library                      |
  3724                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3725                                  ;                               |  Console Task Stack Area                      |
  3726                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3727                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3728                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3729                                  ;                               |  Console Task Task State Segment (TSS)        |
  3730                                  ;                       004800  +-----------------------------------------------+
  3731                                  ;                               |  Console Task Message Queue                   |
  3732                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3733                                  ;                               |  Console Task Code                            |
  3734                                  ;                               |  Console Task Constants                       |
  3735                                  ;                       006000  +===============================================+
  3736                                  ;
  3737                                  ;-----------------------------------------------------------------------------------------------------------------------
  3738                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3739                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3740                                  
  3741                                                          clearConsoleScreen                                      ;clear the console screen
  3742                                                          putConsoleString czTitle                                ;display startup message
  3743                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3744                                                          placeCursor                                             ;set CRT cursor location
  3745                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3746                                                          putConsoleString czNewLine                              ;newline
  3747                                  
  3748                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3749                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3750                                                          call    ConTakeToken                                    ;handle console input
  3751                                                          mov     edx,wzConsoleToken                              ;token buffer
  3752                                                          call    ConDetermineCommand                             ;determine command number
  3753                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3754                                                          jb      .20                                             ;yes, branch
  3755                                  
  3756                                                          putConsoleString czUnknownCommand                       ;display error message
  3757                                  
  3758                                                          jmp     .10                                             ;next command
  3759                                  .20                     shl     eax,2                                           ;index into jump table
  3760                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3761                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3762                                                          call    eax                                             ;call command handler
  3763                                                          jmp     .10                                             ;next command
  3764                                  ;-----------------------------------------------------------------------------------------------------------------------
  3765                                  ;
  3766                                  ;       Routine:        ConInitializeData
  3767                                  ;
  3768                                  ;       Description:    This routine initializes console task variables.
  3769                                  ;
  3770                                  ;-----------------------------------------------------------------------------------------------------------------------
  3771                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3772                                                          push    edi                                             ;
  3773                                                          push    es                                              ;
  3774                                  ;
  3775                                  ;       Initialize console work areas.
  3776                                  ;
  3777                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3778                                                          pop     es                                              ;... into extra segment register
  3779                                                          mov     edi,ECONDATA                                    ;OS console data address
  3780                                                          xor     al,al                                           ;initialization value
  3781                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3782                                                          cld                                                     ;forward strings
  3783                                                          rep     stosb                                           ;initialize data
  3784                                  ;
  3785                                  ;       Restore and return.
  3786                                  ;
  3787                                                          pop     es                                              ;restore non-volatile regs
  3788                                                          pop     edi                                             ;
  3789                                                          pop     ecx                                             ;
  3790                                                          ret                                                     ;return
  3791                                  ;-----------------------------------------------------------------------------------------------------------------------
  3792                                  ;
  3793                                  ;       Routine:        ConTakeToken
  3794                                  ;
  3795                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3796                                  ;
  3797                                  ;       In:             DS:EDX  source buffer address
  3798                                  ;                       DS:EBX  target buffer address
  3799                                  ;
  3800                                  ;       Out:            DS:EDX  source buffer address
  3801                                  ;                       DS:EBX  target buffer address
  3802                                  ;
  3803                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3804                                  ;
  3805                                  ;-----------------------------------------------------------------------------------------------------------------------
  3806                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3807                                                          push    edi                                             ;
  3808                                                          push    es                                              ;
  3809                                                          push    ds                                              ;load data segment selector ...
  3810                                                          pop     es                                              ;... into extra segment reg
  3811                                                          mov     esi,edx                                         ;source buffer address
  3812                                                          mov     edi,ebx                                         ;target buffer address
  3813                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3814                                                          cld                                                     ;forward strings
  3815                                  .10                     lodsb                                                   ;load byte
  3816                                                          cmp     al,EASCIISPACE                                  ;space?
  3817                                                          je      .10                                             ;yes, continue
  3818                                                          test    al,al                                           ;end of line?
  3819                                                          jz      .40                                             ;yes, branch
  3820                                  .20                     stosb                                                   ;store byte
  3821                                                          lodsb                                                   ;load byte
  3822                                                          test    al,al                                           ;end of line?
  3823                                                          jz      .40                                             ;no, continue
  3824                                                          cmp     al,EASCIISPACE                                  ;space?
  3825                                                          jne     .20                                             ;no, continue
  3826                                  .30                     lodsb                                                   ;load byte
  3827                                                          cmp     al,EASCIISPACE                                  ;space?
  3828                                                          je      .30                                             ;yes, continue
  3829                                                          dec     esi                                             ;pre-position
  3830                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3831                                                          mov     edi,edx                                         ;source buffer address
  3832                                  .50                     lodsb                                                   ;remaining byte
  3833                                                          stosb                                                   ;move to front of buffer
  3834                                                          test    al,al                                           ;end of line?
  3835                                                          jnz     .50                                             ;no, continue
  3836                                                          pop     es                                              ;restore non-volatile regs
  3837                                                          pop     edi                                             ;
  3838                                                          pop     esi                                             ;
  3839                                                          ret                                                     ;return
  3840                                  ;-----------------------------------------------------------------------------------------------------------------------
  3841                                  ;
  3842                                  ;       Routine:        ConDetermineCommand
  3843                                  ;
  3844                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3845                                  ;
  3846                                  ;       input:          DS:EDX  command address
  3847                                  ;
  3848                                  ;       output:         EAX     >=0     = command nbr
  3849                                  ;                               0       = unknown command
  3850                                  ;
  3851                                  ;-----------------------------------------------------------------------------------------------------------------------
  3852                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3853                                                          push    ecx                                             ;
  3854                                                          push    esi                                             ;
  3855                                                          push    edi                                             ;
  3856                                  
  3857                                                          upperCaseString                                         ;upper-case string at EDX
  3858                                  
  3859                                                          mov     esi,tConCmdTbl                                  ;commands table
  3860                                                          xor     edi,edi                                         ;intialize command number
  3861                                                          cld                                                     ;forward strings
  3862                                  .10                     lodsb                                                   ;command length
  3863                                                          movzx   ecx,al                                          ;command length
  3864                                                          jecxz   .20                                             ;branch if end of table
  3865                                                          mov     ebx,esi                                         ;table entry address
  3866                                                          add     esi,ecx                                         ;next table entry address
  3867                                  
  3868                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3869                                  
  3870                                                          jecxz   .20                                             ;branch if equal
  3871                                                          inc     edi                                             ;increment command nbr
  3872                                                          jmp     .10                                             ;repeat
  3873                                  .20                     mov     eax,edi                                         ;command number
  3874                                                          pop     edi                                             ;restore non-volatile regs
  3875                                                          pop     esi                                             ;
  3876                                                          pop     ecx                                             ;
  3877                                                          pop     ebx                                             ;
  3878                                                          ret                                                     ;return
  3879                                  ;-----------------------------------------------------------------------------------------------------------------------
  3880                                  ;
  3881                                  ;       Routine:        ConClear
  3882                                  ;
  3883                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3884                                  ;
  3885                                  ;-----------------------------------------------------------------------------------------------------------------------
  3886                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3887                                                          ret                                                     ;return
  3888                                  ;-----------------------------------------------------------------------------------------------------------------------
  3889                                  ;
  3890                                  ;       Routine:        ConExit
  3891                                  ;
  3892                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3893                                  ;
  3894                                  ;-----------------------------------------------------------------------------------------------------------------------
  3895                                  ConExit                 resetSystem                                             ;issue system reset
  3896                                                          ret                                                     ;return
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898                                  ;
  3899                                  ;       Routine:        ConInt6
  3900                                  ;
  3901                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3902                                  ;
  3903                                  ;-----------------------------------------------------------------------------------------------------------------------
  3904                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3905                                                          ret                                                     ;return (not executed)
  3906                                  ;-----------------------------------------------------------------------------------------------------------------------
  3907                                  ;
  3908                                  ;       Routine:        ConVersion
  3909                                  ;
  3910                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3911                                  ;
  3912                                  ;-----------------------------------------------------------------------------------------------------------------------
  3913                                  ConVersion              putConsoleString czTitle                                ;display version message
  3914                                                          ret                                                     ;return
  3915                                  ;-----------------------------------------------------------------------------------------------------------------------
  3916                                  ;
  3917                                  ;       Tables
  3918                                  ;
  3919                                  ;-----------------------------------------------------------------------------------------------------------------------
  3920                                                                                                                  ;---------------------------------------
  3921                                                                                                                  ;  Command Jump Table
  3922                                                                                                                  ;---------------------------------------
  3923                                  tConJmpTbl              equ     $                                               ;command jump table
  3924                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3925                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  3926                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  3927                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3928                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  3929                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3930                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  3931                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  3932                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3933                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3934                                                                                                                  ;---------------------------------------
  3935                                                                                                                  ;  Command Name Table
  3936                                                                                                                  ;---------------------------------------
  3937                                  tConCmdTbl              equ     $                                               ;command name table
  3938                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3939                                                          db      8,"VERSION",0                                   ;version command
  3940                                                          db      6,"CLEAR",0                                     ;clear command
  3941                                                          db      5,"EXIT",0                                      ;exit command
  3942                                                          db      5,"INT6",0                                      ;int6 command
  3943                                                          db      5,"QUIT",0                                      ;quit command
  3944                                                          db      4,"CLS",0                                       ;cls command
  3945                                                          db      4,"VER",0                                       ;ver command
  3946                                                          db      0                                               ;end of table
  3947                                  ;-----------------------------------------------------------------------------------------------------------------------
  3948                                  ;
  3949                                  ;       Constants
  3950                                  ;
  3951                                  ;-----------------------------------------------------------------------------------------------------------------------
  3952                                  czNewLine               db      13,10,0                                         ;new line string
  3953                                  czPrompt                db      ":",0                                           ;prompt string
  3954                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3955                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3956                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3957                                  %endif
  3958                                  %ifdef BUILDDISK
  3959                                  ;-----------------------------------------------------------------------------------------------------------------------
  3960                                  ;
  3961                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3962                                  ;
  3963                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3964                                  ;
  3965                                  ;-----------------------------------------------------------------------------------------------------------------------
  3966                                  section                 unused                                                  ;unused disk space
  3967                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3968                                  %endif
  3969                                  ;=======================================================================================================================
  3970                                  ;
  3971                                  ;       End of Program Code
  3972                                  ;
  3973                                  ;=======================================================================================================================
