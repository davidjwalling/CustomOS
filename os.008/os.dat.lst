     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.008
     6                                  ;
     7                                  ;       Description:    In this sample program, an "int6" command is added to generate an invalid opcode interrupt.
     8                                  ;                       The interrupt handler displays the contents of registers at the time of the interrupt.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   294                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  ;
   297                                  ;       Firmware-Defined Values
   298                                  ;
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   303                                  ;
   304                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   305                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   309                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   310                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   311                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   312                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   313                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   314                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   315                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   316                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   317                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   318                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;
   321                                  ;       Standards-Based Values
   322                                  ;
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       ASCII                                                                   EASCII...
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   330                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   331                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   332                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   333                                  EASCIISPACE             equ     020h                                            ;space
   334                                  EASCIIUPPERA            equ     041h                                            ;'A'
   335                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   336                                  EASCIILOWERA            equ     061h                                            ;'a'
   337                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   338                                  EASCIITILDE             equ     07Eh                                            ;'~'
   339                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   340                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   341                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   342                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   343                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   344                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   345                                  EASCIICASE              equ     00100000b                                       ;case bit
   346                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       Operating System Values
   350                                  ;
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   355                                  ;
   356                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   357                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   361                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   362                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   363                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   364                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   365                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   366                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  ;       Console Constants                                                       ECON...
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ECONCOLS                equ     80                                              ;columns per row
   371                                  ECONROWS                equ     24                                              ;console rows
   372                                  ECONOIAROW              equ     24                                              ;operator information area row
   373                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   374                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   375                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   376                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   377                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   382                                  EGDTCGA                 equ     020h                                            ;cga video selector
   383                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   384                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   385                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   386                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   387                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   388                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ;       Keyboard Flags                                                          EKEYF...
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   393                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   394                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   395                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   396                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   397                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   398                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   399                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   400                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   401                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   402                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;       Kernel Constants                                                        EKRN...
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   407                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   408                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   409                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ;       Message Identifiers                                                     EMSG...
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   418                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   419                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   420                                  ;=======================================================================================================================
   421                                  ;
   422                                  ;       Structures
   423                                  ;
   424                                  ;=======================================================================================================================
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ;
   427                                  ;       MQUEUE
   428                                  ;
   429                                  ;       The MQUEUE structure maps memory used for a message queue.
   430                                  ;
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  struc                   MQUEUE
   433 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   434 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   435 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   436                                  endstruc
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;
   439                                  ;       OSDATA
   440                                  ;
   441                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   442                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   443                                  ;
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  struc                   OSDATA
   446 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   447 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   448 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   449 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   450 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   451 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   452 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   453 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   454 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   455 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   456 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   457 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   458 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   459 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   460 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   461 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   462 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   463 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   464 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   465 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   466 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   467 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   468 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   469 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   470 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   471 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   472 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   473 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   474 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   475 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   476 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   477 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   478 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   479 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   480 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   481 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   482 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   483 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   484 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   485 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   486 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   487 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   488 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   489 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   490 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   491 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   492 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   493 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   494 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   495 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   496 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   497 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   498 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   499 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   500 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   501 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   502 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   503 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   504 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   505 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   506 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   507 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   508 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   509 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   510 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   511 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   512 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   513 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   514 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   515 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   516 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   517 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   518 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   519 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   520 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   521 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   522 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   523 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   524 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   525 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   526 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   527 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   528 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   529 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   530 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   531 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   532 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   533 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   534 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   535 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   536 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   537 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   538 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   539 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   540 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   541 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   542 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   543 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   544 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   545 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   546 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   550                                  ;
   551                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   552                                  ;
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ECONDATA                equ     ($)
   555 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   556 00000804 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   557 00000808 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   558 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   559 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   560 000008AC <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   561 000008AD <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   562 000008AE <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   563 000008AF <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   564 000008B0 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   565 000008B1 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   566 000008B2 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   567 000008B3 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   568 000008B4 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   569 000008B5 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   570 000008B6 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   571 000008B7 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   572                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   573                                  ;-----------------------------------------------------------------------------------------------------------------------
   574                                  ;
   575                                  ;       End of OS Variables
   576                                  ;
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  endstruc
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  ;
   581                                  ;       Macros
   582                                  ;
   583                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   584                                  ;
   585                                  ;-----------------------------------------------------------------------------------------------------------------------
   586                                  %macro                  mint    1
   587                                  _%1                     equ     ($-$$) / EX86DESCLEN
   588                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   589                                  %endmacro
   590                                  %macro                  mtrap   1
   591                                  _%1                     equ     ($-$$) / EX86DESCLEN
   592                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   593                                  %endmacro
   594                                  %macro                  menter  1
   595                                  ?%1                     equ     ($-$$)
   596                                  %endmacro
   597                                  %macro                  tsvce   1
   598                                  e%1                     equ     ($-tsvc)/4
   599                                                          dd      %1
   600                                  %endmacro
   601                                  %ifdef BUILDBOOT
   602                                  ;=======================================================================================================================
   603                                  ;
   604                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   605                                  ;
   606                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   607                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   608                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   609                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   610                                  ;
   611                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   612                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   613                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   614                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   615                                  ;       immediately followed by a disk parameter table.
   616                                  ;
   617                                  ;=======================================================================================================================
   618                                                          cpu     8086                                            ;assume minimal CPU
   619                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   620                                                          bits    16                                              ;16-bit code at power-up
   621                                  %ifdef BUILDPREP
   622                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   623                                  %else
   624 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   625                                  %endif
   626                                  ;-----------------------------------------------------------------------------------------------------------------------
   627                                  ;
   628                                  ;       Disk Parameter Table
   629                                  ;
   630                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   631                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   632                                  ;
   633                                  ;-----------------------------------------------------------------------------------------------------------------------
   634 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   635 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   636 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   637 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   638 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   639 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   640 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   641 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   642 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   643                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   644 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   645 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   646 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   647                                  ;
   648                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   649                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   650                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   651                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   652                                  ;       given several possible starting values for CS:IP.
   653                                  ;
   654                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   655 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   656                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   657 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   658 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   659 00000025 B104                                            mov     cl,4                                            ;shift count
   660 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   661 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   662 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   663                                  ;
   664                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   665                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   666                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   667                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   668                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   669                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   670                                  ;
   671 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   672 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   673 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   674 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   675 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   676                                  ;
   677                                  ;       Our boot addressability is now set up according to the following diagram.
   678                                  ;
   679                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   680                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   681                                  ;                               |  256 = 100h bytes                             |
   682                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   683                                  ;                               |  Boot Sector (vstart=0100h)                   |
   684                                  ;                               |  1 sector = 512 = 200h bytes                  |
   685                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   686                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   687                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   688                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   689                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   690                                  ;                               |  2 sectors = 1024 = 400h bytes
   691                                  ;                       009400  +-----------------------------------------------+ DS:1900
   692                                  ;
   693                                  ;       On entry, DL indicates the drive being booted from.
   694                                  ;
   695 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   696                                  ;
   697                                  ;       Compute directory i/o buffer address.
   698                                  ;
   699 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   700 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   701 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   702 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   703                                  ;
   704                                  ;       Compute segment where os.com will be loaded.
   705                                  ;
   706 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   707 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   708 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   709 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   710                                  ;
   711                                  ;       Set the video mode to 80 column, 25 row, text.
   712                                  ;
   713 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   714 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   715                                  ;
   716                                  ;       Write a message to the console so we know we have our addressability established.
   717                                  ;
   718 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   719 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   720                                  ;
   721                                  ;       Initialize the number of directory sectors to search.
   722                                  ;
   723 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   724 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   725                                  ;
   726                                  ;       Compute number of directory sectors and initialize overhead count.
   727                                  ;
   728 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   729 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   730 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   731 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   732                                  ;
   733                                  ;       Compute directory entries per sector.
   734                                  ;
   735 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   736 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   737 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   738                                  ;
   739                                  ;       Compute first logical directory sector and update overhead count.
   740                                  ;
   741 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   742 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   743 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   744 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   745 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   746 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   747                                  ;
   748                                  ;       Read directory sector.
   749                                  ;
   750 0000008E B001                    .30                     mov     al,1                                            ;sector count
   751 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   752 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   753 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   754                                  ;
   755                                  ;       Setup variables to search this directory sector.
   756                                  ;
   757 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   758 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   759 000000A1 7603                                            jna     .40                                             ;no, continue
   760 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   761 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   762 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   763 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   764                                  ;
   765                                  ;       Loop through directory sectors searching for kernel program.
   766                                  ;
   767 000000B1 56                      .50                     push    si                                              ;save kernel name address
   768 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   769 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   770 000000B6 FC                                              cld                                                     ;forward strings
   771 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   772 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   773 000000BA 5E                                              pop     si                                              ;restore kernel name address
   774 000000BB 7418                                            je      .60                                             ;exit loop if found
   775 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   776 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   777 000000C2 75ED                                            jnz     .50                                             ;next entry
   778                                  ;
   779                                  ;       Repeat search if we are not at the end of the directory.
   780                                  ;
   781 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   782 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   783 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   784 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   785 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   786                                  ;
   787                                  ;       If we find the kernel program in the directory, read the FAT.
   788                                  ;
   789 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   790 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   791 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   792 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   793 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   794 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   795                                  ;
   796                                  ;       Get the starting cluster of the kernel program and target address.
   797                                  ;
   798 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   799 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   800                                  ;
   801                                  ;       Read each program cluster into RAM.
   802                                  ;
   803 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   804 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   805 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   806 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   807 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   808 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   809 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   810 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   811 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   812                                  ;
   813                                  ;       Update buffer pointer for next cluster.
   814                                  ;
   815 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   816 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   817 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   818 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   819 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   820                                  ;
   821                                  ;       Compute next cluster number.
   822                                  ;
   823 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   824 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   825 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   826 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   827 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   828 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   829 00000120 83E701                                          and     di,1                                            ;get low bit
   830 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   831 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   832 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   833                                  ;
   834                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   835                                  ;
   836 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   837 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   838 00000130 B104                                            mov     cl,4                                            ;shift count
   839 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   840 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   841 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   842 0000013A 75B2                                            jne     .70                                             ;no, continue
   843                                  ;
   844                                  ;       Transfer control to the operating system program.
   845                                  ;
   846 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   847 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   848 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   849                                  ;
   850                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   851                                  ;
   852 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   853 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   854 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   855 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   856 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   857 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   858 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   859 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   860 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   861 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   862                                  ;
   863                                  ;       Try maxtries times to read sector.
   864                                  ;
   865 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   866 00000160 53                      .10                     push    bx                                              ;save buffer address
   867 00000161 51                                              push    cx                                              ;save retry count
   868 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   869 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   870 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   871 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   872 0000016F 59                                              pop     cx                                              ;restore retry count
   873 00000170 5B                                              pop     bx                                              ;restore buffer address
   874 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   875 00000173 E2EB                                            loop    .10                                             ;retry
   876                                  ;
   877                                  ;       Handle disk error: convert to ASCII and store in error string.
   878                                  ;
   879 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   880 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   881 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   882 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   883 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   884 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   885 00000183 7203                                            jb      .20                                             ;continue if numeral
   886 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   887 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   888 0000018A 7203                                            jb      .30                                             ;continue if numeral
   889 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   890 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   891 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   892 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   893                                  ;
   894                                  ;       Wait for a key press.
   895                                  ;
   896 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   897 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   898 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   899 0000019E FB                                              sti                                                     ;enable maskable interrupts
   900 0000019F F4                                              hlt                                                     ;wait for interrupt
   901 000001A0 EBF6                                            jmp     .10                                             ;repeat
   902                                  ;
   903                                  ;       Reset the system.
   904                                  ;
   905 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   906 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   907 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   908 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   909 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   910                                  ;
   911                                  ;       Display text message.
   912                                  ;
   913 000001AA FC                      BootPrint               cld                                                     ;forward strings
   914 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   915 000001AC 84C0                                            test    al,al                                           ;end of string?
   916 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   917 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   918 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   919 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   920 000001B6 C3                      BootReturn              ret                                                     ;return
   921                                  ;-----------------------------------------------------------------------------------------------------------------------
   922                                  ;
   923                                  ;       Constants
   924                                  ;
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926 000001B7 90                                              align   2
   927 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   928 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   928 000001C3 4F4D               
   929 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   929 000001CE 530D0A00           
   930 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   930 000001DB 7220               
   931 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   932 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   932 000001E9 6700               
   933                                  ;-----------------------------------------------------------------------------------------------------------------------
   934                                  ;
   935                                  ;       Work Areas
   936                                  ;
   937                                  ;-----------------------------------------------------------------------------------------------------------------------
   938 000001EB 90                                              align   2
   939 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   940 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   941 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   942 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   943 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   944                                  wwReadCountCommand      equ     $                                               ;read count and command
   945 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   946 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   947                                  wwDriveHead             equ     $                                               ;drive, head (word)
   948 000001F8 00                      wbDrive                 db      0                                               ;drive
   949 000001F9 00                      wbHead                  db      0                                               ;head
   950                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   951 000001FA 00                                              db      0                                               ;sector
   952 000001FB 00                      wbTrack                 db      0                                               ;track
   953 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   954 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   955                                  %endif
   956                                  %ifdef BUILDPREP
   957                                  ;=======================================================================================================================
   958                                  ;
   959                                  ;       Diskette Preparation Code
   960                                  ;
   961                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   962                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   963                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   964                                  ;
   965                                  ;=======================================================================================================================
   966                                  ;
   967                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   968                                  ;
   969                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   970                                                          call    BootPrint                                       ;display message
   971                                  ;
   972                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   973                                  ;
   974                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   975                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   976                                                          jnz     .20                                             ;continue if key pressed
   977                                                          sti                                                     ;enable interrupts
   978                                                          hlt                                                     ;wait for interrupt
   979                                                          jmp     .10                                             ;repeat
   980                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   981                                                          je      .30                                             ;yes, branch
   982                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   983                                                          jne     .10                                             ;no, repeat
   984                                                          jmp     .120                                            ;yes, exit program
   985                                  ;
   986                                  ;       Display writing-sector message and patch the JMP instruction.
   987                                  ;
   988                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   989                                                          call    BootPrint                                       ;display message
   990                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   991                                                          mov     ax,01Bh                                         ;address past disk parameter table
   992                                                          mov     [bx],ax                                         ;update the JMP instruction
   993                                  ;
   994                                  ;       Try to read the boot sector.
   995                                  ;
   996                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   997                                  .40                     push    cx                                              ;save remaining tries
   998                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   999                                                          mov     dx,0                                            ;head zero, drive zero
  1000                                                          mov     cx,1                                            ;track zero, sector one
  1001                                                          mov     al,1                                            ;one sector
  1002                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1003                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1004                                                          pop     cx                                              ;restore remaining retries
  1005                                                          jnc     .50                                             ;skip ahead if successful
  1006                                                          loop    .40                                             ;try again
  1007                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1008                                                          jmp     .70                                             ;branch to error routine
  1009                                  ;
  1010                                  ;       Copy diskette parms from input buffer to output buffer.
  1011                                  ;
  1012                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1013                                                          add     si,11                                           ;skip over JMP and system ID
  1014                                                          mov     di,Boot                                         ;output buffer address
  1015                                                          add     di,11                                           ;skip over JMP and system ID
  1016                                                          mov     cx,19                                           ;length of diskette parameters
  1017                                                          cld                                                     ;forward string copies
  1018                                                          rep     movsb                                           ;copy diskette parameters
  1019                                  ;
  1020                                  ;       Try to write boot sector to diskette.
  1021                                  ;
  1022                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1023                                  .60                     push    cx                                              ;save remaining tries
  1024                                                          mov     bx,Boot                                         ;output buffer address
  1025                                                          mov     dx,0                                            ;head zero, drive zero
  1026                                                          mov     cx,1                                            ;track zero, sector one
  1027                                                          mov     al,1                                            ;one sector
  1028                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1029                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1030                                                          pop     cx                                              ;restore remaining retries
  1031                                                          jnc     .100                                            ;skip ahead if successful
  1032                                                          loop    .60                                             ;try again
  1033                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1034                                  ;
  1035                                  ;       Convert the error code to ASCII and display the error message.
  1036                                  ;
  1037                                  .70                     push    ax                                              ;save error code
  1038                                                          mov     al,ah                                           ;copy error code
  1039                                                          mov     ah,0                                            ;AX = error code
  1040                                                          mov     dl,10h                                          ;hexadecimal divisor
  1041                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1042                                                          or      ax,03030h                                       ;add ASCII zone digits
  1043                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1044                                                          jb      .80                                             ;yes, continue
  1045                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1046                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1047                                                          jb      .90                                             ;yes, continue
  1048                                                          add     al,7                                            ;no, make ASCII
  1049                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1050                                                          call    BootPrint                                       ;write error message
  1051                                                          pop     ax                                              ;restore error code
  1052                                  ;
  1053                                  ;       Display the completion message.
  1054                                  ;
  1055                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1056                                                          mov     al,ah                                           ;BIOS return code
  1057                                                          cmp     al,0                                            ;success?
  1058                                                          je      .110                                            ;yes, continue
  1059                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1060                                                          cmp     al,1                                            ;disk parameter error?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1063                                                          cmp     al,2                                            ;address mark not found?
  1064                                                          je      .110                                            ;yes, continue
  1065                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1066                                                          cmp     al,3                                            ;protected disk?
  1067                                                          je      .110                                            ;yes, continue
  1068                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1069                                                          cmp     al,6                                            ;diskette removed?
  1070                                                          je      .110                                            ;yes, continue
  1071                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1072                                                          cmp     al,80H                                          ;drive timed out?
  1073                                                          je      .110                                            ;yes, continue
  1074                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1075                                  .110                    call    BootPrint                                       ;display result message
  1076                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1077                                                          int     021h                                            ;terminate DOS program
  1078                                                          ret                                                     ;return (should not execute)
  1079                                  ;-----------------------------------------------------------------------------------------------------------------------
  1080                                  ;
  1081                                  ;       Diskette Preparation Messages
  1082                                  ;
  1083                                  ;-----------------------------------------------------------------------------------------------------------------------
  1084                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1085                                                          db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1086                                                          db      13,10
  1087                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1088                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1089                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1090                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1091                                                          db      13,10,0
  1092                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1093                                                          db      13,10,0
  1094                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1095                                                          db      13,10,0
  1096                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1097                                                          db      13,10,0
  1098                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1099                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1100                                                          db      13,10,0
  1101                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1102                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1103                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1104                                                          db      13,10,"and retry."
  1105                                                          db      13,10,0
  1106                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1107                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1108                                                          db      13,10,"using another diskette."
  1109                                                          db      13,10,0
  1110                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1111                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1112                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1113                                                          db      13,10,0
  1114                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1115                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1116                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1117                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1118                                                          db      13,10,"is properly inserted in the diskette drive."
  1119                                                          db      13,10,0
  1120                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1121                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1122                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1123                                                          db      13,10,0
  1124                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1125                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1126                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1127                                                          db      13,10,0
  1128                                  wcPrepInBuf             equ     $
  1129                                  %endif
  1130                                  %ifdef BUILDDISK
  1131                                  ;=======================================================================================================================
  1132                                  ;
  1133                                  ;       File Allocation Tables
  1134                                  ;
  1135                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1136                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1137                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1138                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1139                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1140                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1141                                  ;       the last cluster in the chain.
  1142                                  ;
  1143                                  ;       Every three bytes encode two FAT entries as follows:
  1144                                  ;
  1145                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1146                                  ;
  1147                                  ;=======================================================================================================================
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                  ;
  1150                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1151                                  ;
  1152                                  ;-----------------------------------------------------------------------------------------------------------------------
  1153                                  section                 fat1                                                    ;first copy of FAT
  1154                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1155                                                          db      005h,060h,000h, 007h,080h,000h
  1156                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1157                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1158                                                          db      011h,020h,001h, 013h,040h,001h
  1159                                                          db      015h,060h,001h, 017h,080h,001h
  1160                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1161                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1162                                                          db      021h,020h,002h, 023h,040h,002h
  1163                                                          db      025h,060h,002h, 027h,080h,002h
  1164                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1165                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1166                                  ;-----------------------------------------------------------------------------------------------------------------------
  1167                                  ;
  1168                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1169                                  ;
  1170                                  ;-----------------------------------------------------------------------------------------------------------------------
  1171                                  section                 fat2                                                    ;second copy of FAT
  1172                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1173                                                          db      005h,060h,000h, 007h,080h,000h
  1174                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1175                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1176                                                          db      011h,020h,001h, 013h,040h,001h
  1177                                                          db      015h,060h,001h, 017h,080h,001h
  1178                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1179                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1180                                                          db      021h,020h,002h, 023h,040h,002h
  1181                                                          db      025h,060h,002h, 027h,080h,002h
  1182                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1183                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1184                                  ;-----------------------------------------------------------------------------------------------------------------------
  1185                                  ;
  1186                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1187                                  ;
  1188                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1189                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1190                                  ;       copy.
  1191                                  ;
  1192                                  ;-----------------------------------------------------------------------------------------------------------------------
  1193                                  section                 dir                                                     ;diskette directory
  1194                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1195                                                          db      020h                                            ;attribute (archive bit set)
  1196                                                          times   10 db 0                                         ;unused
  1197                                                          dw      0h                                              ;time
  1198                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1199                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1200                                                          dw      2                                               ;first cluster
  1201                                                          dd      05400h                                          ;file size
  1202                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1203                                  %endif
  1204                                  %ifdef BUILDCOM
  1205                                  ;=======================================================================================================================
  1206                                  ;
  1207                                  ;       OS.COM
  1208                                  ;
  1209                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1210                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1211                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1212                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1213                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1214                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1215                                  ;
  1216                                  ;       Our loader addressability is set up according to the following diagram.
  1217                                  ;
  1218                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1219                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1220                                  ;                               |  256 = 100h bytes                             |
  1221                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1222                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1223                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1224                                  ;                       007e00  +-----------------------------------------------+
  1225                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1226                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1227                                  ;                               |                                               |
  1228                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1229                                  ;                               |                                               |
  1230                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1231                                  ;                               |  Loader Code                                  |
  1232                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1233                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1234                                  ;
  1235                                  ;=======================================================================================================================
  1236                                  ;-----------------------------------------------------------------------------------------------------------------------
  1237                                  ;
  1238                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1239                                  ;
  1240                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1241                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1242                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1243                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1244                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1245                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1246                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1247                                  ;       registers.
  1248                                  ;
  1249                                  ;-----------------------------------------------------------------------------------------------------------------------
  1250                                                          cpu     8086                                            ;assume minimal CPU
  1251                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1252                                                          bits    16                                              ;this is 16-bit code
  1253                                  Loader                  push    cs                                              ;use the code segment
  1254                                                          pop     ds                                              ;...as our data segment
  1255                                                          push    cs                                              ;use the code segment
  1256                                                          pop     es                                              ;...as our extra segment
  1257                                  ;
  1258                                  ;       Write a message to the console so we know we have our addressability established.
  1259                                  ;
  1260                                                          mov     si,czStartingMsg                                ;starting message
  1261                                                          call    PutTTYString                                    ;display loader message
  1262                                  ;
  1263                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1264                                  ;
  1265                                                          call    GetCPUType                                      ;AL = cpu type
  1266                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1267                                                          cmp     al,3                                            ;80386+?
  1268                                                          jb      LoaderExit                                      ;no, exit with error message
  1269                                                          cpu     386                                             ;allow 80386 instructions
  1270                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1271                                                          call    PutTTYString                                    ;display message
  1272                                  ;
  1273                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1274                                  ;
  1275                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1276                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1277                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1278                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1279                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1280                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1281                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1282                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1283                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1284                                                          call    PutTTYString                                    ;display message
  1285                                  ;
  1286                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1287                                  ;
  1288                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1289                                                          pop     es                                              ;... as target segment
  1290                                                          xor     di,di                                           ;ES:DI = target address
  1291                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1292                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1293                                                          cld                                                     ;forward strings
  1294                                                          rep     movsb                                           ;copy kernel image
  1295                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1296                                                          call    PutTTYString                                    ;display message
  1297                                  ;
  1298                                  ;       Switch to protected mode.
  1299                                  ;
  1300                                                          xor     si,si                                           ;ES:SI = gdt addr
  1301                                                          mov     ss,si                                           ;protected mode ss
  1302                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1303                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1304                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1305                                                          mov     dx,001Fh                                        ;outer delay loop count
  1306                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1307                                                          loop    $                                               ;wait out pending interrupts
  1308                                                          dec     dx                                              ;restore outer loop count
  1309                                                          jnz     .10                                             ;continue outer loop
  1310                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1311                                  ;
  1312                                  ;       Enable hardware and maskable interrupts.
  1313                                  ;
  1314                                                          xor     al,al                                           ;enable all registers code
  1315                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1316                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1317                                                          sti                                                     ;enable maskable interrupts
  1318                                  ;
  1319                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1320                                  ;
  1321                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1322                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1323                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1324                                  ;-----------------------------------------------------------------------------------------------------------------------
  1325                                  ;
  1326                                  ;       Routine:        LoaderExit
  1327                                  ;
  1328                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1329                                  ;
  1330                                  ;       In:             DS:SI   string address
  1331                                  ;
  1332                                  ;-----------------------------------------------------------------------------------------------------------------------
  1333                                  LoaderExit              call    PutTTYString                                    ;display error message
  1334                                  ;
  1335                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1336                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1337                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1338                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1339                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1340                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1341                                  ;
  1342                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1343                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1344                                                          jnz     .40                                             ;exit if key pressed
  1345                                                          sti                                                     ;enable maskable interrupts
  1346                                                          hlt                                                     ;wait for interrupt
  1347                                                          jmp     .30                                             ;repeat until keypress
  1348                                  ;
  1349                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1350                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1351                                  ;       HLT until the system resets.
  1352                                  ;
  1353                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1354                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1355                                  .50                     sti                                                     ;enable maskable interrupts
  1356                                                          hlt                                                     ;stop until reset, int, nmi
  1357                                                          jmp     .50                                             ;loop until restart kicks in
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;
  1360                                  ;       Routine:        GetCPUType
  1361                                  ;
  1362                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1363                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1364                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1365                                  ;
  1366                                  ;       Out:            AX      0 = 808x, v20, etc.
  1367                                  ;                               1 = 80186
  1368                                  ;                               2 = 80286
  1369                                  ;                               3 = 80386
  1370                                  ;
  1371                                  ;-----------------------------------------------------------------------------------------------------------------------
  1372                                  GetCPUType              mov     al,1                                            ;AL = 1
  1373                                                          mov     cl,32                                           ;shift count
  1374                                                          shr     al,cl                                           ;try a 32-bit shift
  1375                                                          or      al,al                                           ;did the shift happen?
  1376                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1377                                                          cpu     186
  1378                                                          push    sp                                              ;save stack pointer
  1379                                                          pop     cx                                              ;...into cx
  1380                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1381                                                          jne     .10                                             ;yes, cpu is 80186
  1382                                                          cpu     286
  1383                                                          inc     ax                                              ;AX = 2
  1384                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1385                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1386                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1387                                                          jz      .10                                             ;yes, cpu is 80286
  1388                                                          inc     ax                                              ;AX = 3
  1389                                  .10                     ret                                                     ;return
  1390                                  ;-----------------------------------------------------------------------------------------------------------------------
  1391                                  ;
  1392                                  ;       Routine:        PutTTYString
  1393                                  ;
  1394                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1395                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1396                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1397                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1398                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1399                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1400                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1401                                  ;                       to LODSB is not needed.
  1402                                  ;
  1403                                  ;       In:             DS:SI   address of string
  1404                                  ;
  1405                                  ;       Out:            DF      0
  1406                                  ;                       ZF      1
  1407                                  ;                       AL      0
  1408                                  ;
  1409                                  ;-----------------------------------------------------------------------------------------------------------------------
  1410                                  PutTTYString            cld                                                     ;forward strings
  1411                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1412                                                          test    al,al                                           ;end of string?
  1413                                                          jz      .20                                             ;... yes, exit our loop
  1414                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1415                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1416                                                          jmp     .10                                             ;repeat until done
  1417                                  .20                     ret                                                     ;return
  1418                                  ;-----------------------------------------------------------------------------------------------------------------------
  1419                                  ;
  1420                                  ;       Loader Data
  1421                                  ;
  1422                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1423                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1424                                  ;
  1425                                  ;-----------------------------------------------------------------------------------------------------------------------
  1426                                                          align   2
  1427                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1428                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1429                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1430                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1431                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1432                                                          db      "Please press any key to restart the computer.",13,10,0
  1433                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1434                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1435                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1436                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1437                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1438                                  ;=======================================================================================================================
  1439                                  ;
  1440                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1441                                  ;
  1442                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1443                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1444                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1445                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1446                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1447                                  ;
  1448                                  ;=======================================================================================================================
  1449                                  ;=======================================================================================================================
  1450                                  ;
  1451                                  ;       Kernel Tables
  1452                                  ;
  1453                                  ;=======================================================================================================================
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  ;
  1456                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1457                                  ;
  1458                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1459                                  ;       first descriptor must be all nulls.
  1460                                  ;
  1461                                  ;       6   5         4         3         2         1         0
  1462                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1463                                  ;       ----------------------------------------------------------------
  1464                                  ;       h......hffffmmmma......ab......................bn..............n
  1465                                  ;
  1466                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1467                                  ;               ffff                                                            flags
  1468                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1469                                  ;                       a......a                                                access
  1470                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1471                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1472                                  ;
  1473                                  ;       00000000                                                                all areas have base addresses below 2^24
  1474                                  ;               0...                                                            single-byte size granularity
  1475                                  ;               1...                                                            4-kilobyte size granularity
  1476                                  ;               .0..                                                            16-bit default for code segments
  1477                                  ;               .1..                                                            32-bit default for code segments
  1478                                  ;               ..0.                                                            intel-reserved; should be zero
  1479                                  ;               ...0                                                            available for operating system use
  1480                                  ;                   0000                                                        segment is less than 2^16 in size
  1481                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1482                                  ;                       1.......                                                segment is present in memory
  1483                                  ;                       .00.....                                                segment is of privilege level 0
  1484                                  ;                       ...0....                                                segment is of system or gate type
  1485                                  ;                       ...00010                                                local decriptor table (LDT)
  1486                                  ;                       ...01001                                                task state segment (TSS) available
  1487                                  ;                       ...01011                                                task state segment (TSS) busy
  1488                                  ;                       ...10...                                                data segment
  1489                                  ;                       ...10011                                                writable data (accessed)
  1490                                  ;                       ...11...                                                code segment
  1491                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1492                                  ;
  1493                                  ;-----------------------------------------------------------------------------------------------------------------------
  1494                                  section                 gdt                                                     ;global descriptor table
  1495                                                          dq      0000000000000000h                               ;00 required null selector
  1496                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1497                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1498                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1499                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1500                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1501                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1502                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1503                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1504                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1505                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1506                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1507                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1508                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1509                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                  ;
  1512                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1513                                  ;
  1514                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1515                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1516                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1517                                  ;
  1518                                  ;       6   5         4         3         2         1         0
  1519                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1520                                  ;       ----------------------------------------------------------------
  1521                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1522                                  ;
  1523                                  ;       h...h   high-order offset (bits 16-31)
  1524                                  ;       P       present (0=unused interrupt)
  1525                                  ;       zz      descriptor privilege level
  1526                                  ;       S       storage segment (must be zero for IDT)
  1527                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1528                                  ;       S...S   handling code selector in GDT
  1529                                  ;       l...l   lo-order offset (bits 0-15)
  1530                                  ;
  1531                                  ;-----------------------------------------------------------------------------------------------------------------------
  1532                                  section                 idt                                                     ;interrupt descriptor table
  1533                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1534                                                          mtrap   singlestep                                      ;01 single step
  1535                                                          mtrap   nmi                                             ;02 non-maskable
  1536                                                          mtrap   break                                           ;03 break
  1537                                                          mtrap   into                                            ;04 into
  1538                                                          mtrap   bounds                                          ;05 bounds
  1539                                                          mtrap   badopcode                                       ;06 bad op code
  1540                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1541                                                          mtrap   doublefault                                     ;08 double-fault
  1542                                                          mtrap   operand                                         ;09 operand
  1543                                                          mtrap   badtss                                          ;0a bad TSS
  1544                                                          mtrap   notpresent                                      ;0b not-present
  1545                                                          mtrap   stacklimit                                      ;0c stack limit
  1546                                                          mtrap   protection                                      ;0d general protection fault
  1547                                                          mtrap   int14                                           ;0e (reserved)
  1548                                                          mtrap   int15                                           ;0f (reserved)
  1549                                                          mtrap   coproccalc                                      ;10 (reserved)
  1550                                                          mtrap   int17                                           ;11 (reserved)
  1551                                                          mtrap   int18                                           ;12 (reserved)
  1552                                                          mtrap   int19                                           ;13 (reserved)
  1553                                                          mtrap   int20                                           ;14 (reserved)
  1554                                                          mtrap   int21                                           ;15 (reserved)
  1555                                                          mtrap   int22                                           ;16 (reserved)
  1556                                                          mtrap   int23                                           ;17 (reserved)
  1557                                                          mtrap   int24                                           ;18 (reserved)
  1558                                                          mtrap   int25                                           ;19 (reserved)
  1559                                                          mtrap   int26                                           ;1a (reserved)
  1560                                                          mtrap   int27                                           ;1b (reserved)
  1561                                                          mtrap   int28                                           ;1c (reserved)
  1562                                                          mtrap   int29                                           ;1d (reserved)
  1563                                                          mtrap   int30                                           ;1e (reserved)
  1564                                                          mtrap   int31                                           ;1f (reserved)
  1565                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1566                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1567                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1568                                                          mint    com2                                            ;23 IRQ3 com2
  1569                                                          mint    com1                                            ;24 IRQ4 com1
  1570                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1571                                                          mint    diskette                                        ;26 IRQ6 diskette
  1572                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1573                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1574                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1575                                                          mint    irq10                                           ;2a IRQA (reserved)
  1576                                                          mint    irq11                                           ;2b IRQB (reserved)
  1577                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1578                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1579                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1580                                                          mint    irq15                                           ;2f IRQF (reserved)
  1581                                                          mtrap   svc                                             ;30 OS services
  1582                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1583                                  ;=======================================================================================================================
  1584                                  ;
  1585                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1586                                  ;
  1587                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1588                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1589                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1590                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1591                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1592                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1593                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1594                                  ;
  1595                                  ;=======================================================================================================================
  1596                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1597                                                          cpu     386                                             ;allow 80386 instructions
  1598                                                          bits    32                                              ;this is 32-bit code
  1599                                  ;=======================================================================================================================
  1600                                  ;
  1601                                  ;       CPU Interrupt Handlers
  1602                                  ;
  1603                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1604                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1605                                  ;
  1606                                  ;=======================================================================================================================
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  ;
  1609                                  ;       INT0    Divide By Zero
  1610                                  ;
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                                          menter  dividebyzero                                    ;divide by zero
  1613                                                          push    0                                               ;store interrupt nbr
  1614                                                          push    czIntDivideByZero                               ;store message offset
  1615                                                          jmp     ReportInterrupt                                 ;report interrupt
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  ;
  1618                                  ;       INT1    Single Step
  1619                                  ;
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                                          menter  singlestep                                      ;single step
  1622                                                          push    1                                               ;store interrupt nbr
  1623                                                          push    czIntSingleStep                                 ;store message offset
  1624                                                          jmp     ReportInterrupt                                 ;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT2    Non-Maskable Interrupt
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  nmi                                             ;non-maskable
  1631                                                          push    2                                               ;store interrupt nbr
  1632                                                          push    czIntNonMaskable                                ;store message offset
  1633                                                          jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT3    Break
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  break                                           ;break
  1640                                                          push    3                                               ;store interrupt nbr
  1641                                                          push    czIntBreak                                      ;store message offset
  1642                                                          jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT4    Into
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  into                                            ;into
  1649                                                          push    4                                               ;store interrupt nbr
  1650                                                          push    czIntInto                                       ;store message offset
  1651                                                          jmp     ReportInterrupt                                 ;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;       INT5    Bounds
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                                          menter  bounds                                          ;bounds
  1658                                                          push    5                                               ;store interrupt nbr
  1659                                                          push    czIntBounds                                     ;store message offset
  1660                                                          jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT6    Bad Operation Code
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  badopcode                                       ;bad opcode interrupt
  1667                                                          push    6                                               ;store interrupt nbr
  1668                                                          push    czIntBadOpCode                                  ;store message offset
  1669                                                          jmp     ReportInterrupt                                 ;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;       INT7    No Coprocessor
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1676                                                          push    7                                               ;store interrupt nbr
  1677                                                          push    czIntNoCoprocessor                              ;store message offset
  1678                                                          jmp     ReportInterrupt                                 ;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;       INT8    Double Fault
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                                          menter  doublefault                                     ;doublefault interrupt
  1685                                                          push    8                                               ;store interrupt nbr
  1686                                                          push    czIntDoubleFault                                ;store message offset
  1687                                                          jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT9    Operand
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  operand                                         ;operand interrupt
  1694                                                          push    9                                               ;store interrupt nbr
  1695                                                          push    czIntOperand                                    ;store message offset
  1696                                                          jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT10   Bad Task State Segment
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  badtss                                          ;bad TSS interrupt
  1703                                                          push    10                                              ;store interrupt nbr
  1704                                                          push    czIntBadTSS                                     ;store message offset
  1705                                                          jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT11   Not Present
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  notpresent                                      ;not present interrupt
  1712                                                          push    11                                              ;store interrupt nbr
  1713                                                          push    czIntNotPresent                                 ;store message offset
  1714                                                          jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT12   Stack Limit
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  stacklimit                                      ;stack limit interrupt
  1721                                                          push    12                                              ;store interrupt nbr
  1722                                                          push    czIntStackLimit                                 ;store message offset
  1723                                                          jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT13   General Protection Fault
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  protection                                      ;protection fault interrupt
  1730                                                          push    13                                              ;store interrupt nbr
  1731                                                          push    czIntProtection                                 ;store message offset
  1732                                                          jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT14   Reserved
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  int14                                           ;(reserved)
  1739                                                          push    14                                              ;store interrupt nbr
  1740                                                          push    czIntReserved                                   ;store message offset
  1741                                                          jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT15   Reserved
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  int15                                           ;(reserved)
  1748                                                          push    15                                              ;store interrupt nbr
  1749                                                          push    czIntReserved                                   ;store message offset
  1750                                                          jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT16   Coprocessor Calculation
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  coproccalc                                      ;coprocessor calculation
  1757                                                          push    16                                              ;store interrupt nbr
  1758                                                          push    czIntCoprocessorCalc                            ;store message offset
  1759                                                          jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT17   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int17                                           ;(reserved)
  1766                                                          push    17                                              ;store interrupt nbr
  1767                                                          push    czIntReserved                                   ;store message offset
  1768                                                          jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT18   Reserved
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  int18                                           ;(reserved)
  1775                                                          push    18                                              ;store interrupt nbr
  1776                                                          push    czIntReserved                                   ;store message offset
  1777                                                          jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT19   Reserved
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  int19                                           ;(reserved)
  1784                                                          push    19                                              ;store interrupt nbr
  1785                                                          push    czIntReserved                                   ;store message offset
  1786                                                          jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT20   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int20                                           ;(reserved)
  1793                                                          push    20                                              ;store interrupt nbr
  1794                                                          push    czIntReserved                                   ;store message offset
  1795                                                          jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT21   Reserved
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  int21                                           ;(reserved)
  1802                                                          push    21                                              ;store interrupt nbr
  1803                                                          push    czIntReserved                                   ;store message offset
  1804                                                          jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT22   Reserved
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  int22                                           ;(reserved)
  1811                                                          push    22                                              ;store interrupt nbr
  1812                                                          push    czIntReserved                                   ;store message offset
  1813                                                          jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT23   Reserved
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  int23                                           ;(reserved)
  1820                                                          push    23                                              ;store interrupt nbr
  1821                                                          push    czIntReserved                                   ;store message offset
  1822                                                          jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT24   Reserved
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  int24                                           ;(reserved)
  1829                                                          push    24                                              ;store interrupt nbr
  1830                                                          push    czIntReserved                                   ;store message offset
  1831                                                          jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT25   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int25                                           ;(reserved)
  1838                                                          push    25                                              ;store interrupt nbr
  1839                                                          push    czIntReserved                                   ;store message offset
  1840                                                          jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT26   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int26                                           ;(reserved)
  1847                                                          push    26                                              ;store interrupt nbr
  1848                                                          push    czIntReserved                                   ;store message offset
  1849                                                          jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT27   Reserved
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  int27                                           ;(reserved)
  1856                                                          push    27                                              ;store interrupt nbr
  1857                                                          push    czIntReserved                                   ;store message offset
  1858                                                          jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT28   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int28                                           ;(reserved)
  1865                                                          push    28                                              ;store interrupt nbr
  1866                                                          push    czIntReserved                                   ;store message offset
  1867                                                          jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       INT29   Reserved
  1871                                  ;
  1872                                  ;-----------------------------------------------------------------------------------------------------------------------
  1873                                                          menter  int29                                           ;(reserved)
  1874                                                          push    29                                              ;store interrupt nbr
  1875                                                          push    czIntReserved                                   ;store message offset
  1876                                                          jmp     ReportInterrupt                                 ;report interrupt
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                  ;
  1879                                  ;       INT30   Reserved
  1880                                  ;
  1881                                  ;-----------------------------------------------------------------------------------------------------------------------
  1882                                                          menter  int30                                           ;(reserved)
  1883                                                          push    30                                              ;store interrupt nbr
  1884                                                          push    czIntReserved                                   ;store message offset
  1885                                                          jmp     ReportInterrupt                                 ;report interrupt
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  ;
  1888                                  ;       INT31   Reserved
  1889                                  ;
  1890                                  ;-----------------------------------------------------------------------------------------------------------------------
  1891                                                          menter  int31                                           ;(reserved)
  1892                                                          push    31                                              ;store interrupt nbr
  1893                                                          push    czIntReserved                                   ;store message offset
  1894                                                          jmp     ReportInterrupt                                 ;report interrupt
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  ;
  1897                                  ;       Routine:        ReportInterrupt
  1898                                  ;
  1899                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1900                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1901                                  ;
  1902                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1903                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1904                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1905                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1906                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1907                                  ;
  1908                                  ;       Out:            N/A             This routine does not exit.
  1909                                  ;
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1912                                                          push    es                                              ;save ES at time of interrupt
  1913                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1914                                                          mov     ebp,esp                                         ;EBP --> [EDI]
  1915                                  ;
  1916                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1917                                  ;
  1918                                  ;                       [EBP+56]        EFLAGS
  1919                                  ;                       [EBP+52]        CS
  1920                                  ;                       [EBP+48]        EIP
  1921                                  ;                       [EBP+44]        interrupt number (0-31)
  1922                                  ;                       [EBP+40]        error message address
  1923                                  ;                       [EBP+36]        DS
  1924                                  ;                       [EBP+32]        ES
  1925                                  ;                       [EBP+28]        EAX
  1926                                  ;                       [EBP+24]        ECX
  1927                                  ;                       [EBP+20]        EDX
  1928                                  ;                       [EBP+16]        EBX
  1929                                  ;                       [EBP+12]        ESP
  1930                                  ;                       [EBP+8]         EBP
  1931                                  ;                       [EBP+4]         ESI
  1932                                  ;                       [EBP+0]         EDI
  1933                                  ;
  1934                                                          push    cs                                              ;load code selector ...
  1935                                                          pop     ds                                              ;... into DS
  1936                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1937                                                          pop     es                                              ;... into ES
  1938                                  ;
  1939                                  ;       Display the interrupt report boundary box
  1940                                  ;
  1941                                                          mov     cl,13                                           ;column
  1942                                                          mov     ch,6                                            ;row
  1943                                                          mov     dl,50                                           ;width
  1944                                                          mov     dh,8                                            ;height
  1945                                                          mov     bh,07h                                          ;attribute
  1946                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1947                                  ;
  1948                                  ;       Display the report header
  1949                                  ;
  1950                                                          mov     cl,15                                           ;column
  1951                                                          mov     ch,7                                            ;row
  1952                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1953                                                          call    SetConsoleString                                ;draw text string
  1954                                  ;
  1955                                  ;       Display the interrupt description label
  1956                                  ;
  1957                                                          mov     cl,15                                           ;column
  1958                                                          mov     ch,8                                            ;row
  1959                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1960                                                          call    SetConsoleString                                ;draw text string
  1961                                  ;
  1962                                  ;       Display the interrupt number
  1963                                  ;
  1964                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1965                                                          mov     cl,26                                           ;column
  1966                                                          mov     ch,8                                            ;row
  1967                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1968                                  ;
  1969                                  ;       Display the interrupt name
  1970                                  ;
  1971                                                          mov     cl,29                                           ;column
  1972                                                          mov     ch,8                                            ;row
  1973                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1974                                                          call    SetConsoleString                                ;display interrupt description
  1975                                  ;
  1976                                  ;       Display the register values header
  1977                                  ;
  1978                                                          mov     cl,15                                           ;column
  1979                                                          mov     ch,10                                           ;row
  1980                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1981                                                          call    SetConsoleString                                ;draw text string
  1982                                  ;
  1983                                  ;       Display the EAX register label and value
  1984                                  ;
  1985                                                          mov     cl,15                                           ;column
  1986                                                          mov     ch,11                                           ;row
  1987                                                          mov     esi,czIntEAX                                    ;register EAX label
  1988                                                          call    SetConsoleString                                ;draw label
  1989                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1990                                                          mov     cl,19                                           ;column
  1991                                                          mov     ch,11                                           ;row
  1992                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1993                                  ;
  1994                                  ;       Display the ECX register label and value
  1995                                  ;
  1996                                                          mov     cl,15                                           ;column
  1997                                                          mov     ch,12                                           ;row
  1998                                                          mov     esi,czIntECX                                    ;label
  1999                                                          call    SetConsoleString                                ;draw label
  2000                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2001                                                          mov     cl,19                                           ;column
  2002                                                          mov     ch,12                                           ;row
  2003                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2004                                  ;
  2005                                  ;       Display the EDX register label and value
  2006                                  ;
  2007                                                          mov     cl,15                                           ;column
  2008                                                          mov     ch,13                                           ;row
  2009                                                          mov     esi,czIntEDX                                    ;label
  2010                                                          call    SetConsoleString                                ;draw label
  2011                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2012                                                          mov     cl,19                                           ;column
  2013                                                          mov     ch,13                                           ;row
  2014                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2015                                  ;
  2016                                  ;       Display the EBX register label and value
  2017                                  ;
  2018                                                          mov     cl,15                                           ;column
  2019                                                          mov     ch,14                                           ;row
  2020                                                          mov     esi,czIntEBX                                    ;label
  2021                                                          call    SetConsoleString                                ;draw label
  2022                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2023                                                          mov     cl,19                                           ;column
  2024                                                          mov     ch,14                                           ;row
  2025                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2026                                  ;
  2027                                  ;       Display the ESI register label and value
  2028                                  ;
  2029                                                          mov     cl,29                                           ;column
  2030                                                          mov     ch,11                                           ;row
  2031                                                          mov     esi,czIntESI                                    ;label
  2032                                                          call    SetConsoleString                                ;draw label
  2033                                                          mov     eax,[ebp+4]                                     ;ESI
  2034                                                          mov     cl,33                                           ;column
  2035                                                          mov     ch,11                                           ;row
  2036                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2037                                  ;
  2038                                  ;       Display the EDI register label and value
  2039                                  ;
  2040                                                          mov     cl,29                                           ;column
  2041                                                          mov     ch,12                                           ;row
  2042                                                          mov     esi,czIntEDI                                    ;label
  2043                                                          call    SetConsoleString                                ;draw label
  2044                                                          mov     eax,[ebp+0]                                     ;EDI
  2045                                                          mov     cl,33                                           ;column
  2046                                                          mov     ch,12                                           ;row
  2047                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2048                                  ;
  2049                                  ;       Display the EBP register label and value
  2050                                  ;
  2051                                                          mov     cl,29                                           ;column
  2052                                                          mov     ch,13                                           ;row
  2053                                                          mov     esi,czIntEBP                                    ;label
  2054                                                          call    SetConsoleString                                ;draw label
  2055                                                          mov     eax,[ebp+8]                                     ;EBP
  2056                                                          mov     cl,33                                           ;column
  2057                                                          mov     ch,13                                           ;row
  2058                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2059                                  ;
  2060                                  ;       Display the DS register label and value
  2061                                  ;
  2062                                                          mov     cl,42                                           ;column
  2063                                                          mov     ch,11                                           ;row
  2064                                                          mov     esi,czIntDS                                     ;label
  2065                                                          call    SetConsoleString                                ;draw label
  2066                                                          xor     eax,eax                                         ;zero register
  2067                                                          mov     ax,[ebp+36]                                     ;DS
  2068                                                          mov     cl,46                                           ;column
  2069                                                          mov     ch,11                                           ;row
  2070                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2071                                  ;
  2072                                  ;       Display the ES register label and value
  2073                                  ;
  2074                                                          mov     cl,42                                           ;column
  2075                                                          mov     ch,12                                           ;row
  2076                                                          mov     esi,czIntES                                     ;label
  2077                                                          call    SetConsoleString                                ;draw label
  2078                                                          xor     eax,eax                                         ;zero register
  2079                                                          mov     ax,[ebp+32]                                     ;ES
  2080                                                          mov     cl,46                                           ;column
  2081                                                          mov     ch,12                                           ;row
  2082                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2083                                  ;
  2084                                  ;       Display the SS register label and value
  2085                                  ;
  2086                                                          mov     cl,42                                           ;column
  2087                                                          mov     ch,13                                           ;row
  2088                                                          mov     esi,czIntSS                                     ;label
  2089                                                          call    SetConsoleString                                ;draw label
  2090                                                          xor     eax,eax                                         ;zero register
  2091                                                          mov     ax,ss                                           ;SS
  2092                                                          mov     cl,46                                           ;column
  2093                                                          mov     ch,13                                           ;row
  2094                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2095                                  ;
  2096                                  ;       Display the CS register lable and value
  2097                                  ;
  2098                                                          mov     cl,42                                           ;column
  2099                                                          mov     ch,14                                           ;row
  2100                                                          mov     esi,czIntCS                                     ;label
  2101                                                          call    SetConsoleString                                ;draw label
  2102                                                          xor     eax,eax                                         ;zero register
  2103                                                          mov     ax,[ebp+52]                                     ;CS
  2104                                                          mov     cl,46                                           ;column
  2105                                                          mov     ch,14                                           ;row
  2106                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2107                                  ;
  2108                                  ;       Display the EFLAGS register label and value
  2109                                  ;
  2110                                                          mov     cl,51                                           ;column
  2111                                                          mov     ch,11                                           ;row
  2112                                                          mov     esi,czIntEFLAGS                                 ;label
  2113                                                          call    SetConsoleString                                ;draw label
  2114                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2115                                                          mov     cl,55                                           ;column
  2116                                                          mov     ch,11                                           ;row
  2117                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2118                                  ;
  2119                                  ;       Display the ESP register label and value
  2120                                  ;
  2121                                                          mov     cl,51                                           ;column
  2122                                                          mov     ch,13                                           ;row
  2123                                                          mov     esi,czIntESP                                    ;label
  2124                                                          call    SetConsoleString                                ;draw label
  2125                                                          mov     eax,[ebp+12]                                    ;ESP
  2126                                                          mov     cl,55                                           ;column
  2127                                                          mov     ch,13                                           ;row
  2128                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2129                                  ;
  2130                                  ;       Display the EIP register label and value
  2131                                  ;
  2132                                                          mov     cl,51                                           ;column
  2133                                                          mov     ch,14                                           ;row
  2134                                                          mov     esi,czIntEIP                                    ;label
  2135                                                          call    SetConsoleString                                ;draw label
  2136                                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2137                                                          mov     cl,55                                           ;column
  2138                                                          mov     ch,14                                           ;row
  2139                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2140                                  ;
  2141                                  ;       Halt and loop until reset
  2142                                  ;
  2143                                  .10                     sti                                                     ;enable maskable interrupts
  2144                                                          hlt                                                     ;halt processor
  2145                                                          jmp     .10                                             ;resume on interrupt
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                  ;
  2148                                  ;       Processor Interrupt Name Strings
  2149                                  ;
  2150                                  ;-----------------------------------------------------------------------------------------------------------------------
  2151                                  czIntDivideByZero       db      "Division by zero",0
  2152                                  czIntSingleStep         db      "Single step",0
  2153                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2154                                  czIntBreak              db      "Break",0
  2155                                  czIntInto               db      "Into",0
  2156                                  czIntBounds             db      "Bounds",0
  2157                                  czIntBadOpCode          db      "Bad Operation Code",0
  2158                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2159                                  czIntDoubleFault        db      "Double Fault",0
  2160                                  czIntOperand            db      "Operand",0
  2161                                  czIntBadTSS             db      "Bad Task State Segment",0
  2162                                  czIntNotPresent         db      "Not Present",0
  2163                                  czIntStackLimit         db      "Stack Limit",0
  2164                                  czIntProtection         db      "General Protection Fault",0
  2165                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2166                                  czIntReserved           db      "Reserved",0
  2167                                  ;-----------------------------------------------------------------------------------------------------------------------
  2168                                  ;
  2169                                  ;       Processor Interrupt Handling Strings
  2170                                  ;
  2171                                  ;-----------------------------------------------------------------------------------------------------------------------
  2172                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2173                                  czIntLabel              db      "Interrupt #",0
  2174                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2175                                  czIntEAX                db      "EAX:",0
  2176                                  czIntECX                db      "ECX:",0
  2177                                  czIntEDX                db      "EDX:",0
  2178                                  czIntEBX                db      "EBX:",0
  2179                                  czIntESI                db      "ESI:",0
  2180                                  czIntEDI                db      "EDI:",0
  2181                                  czIntEBP                db      "EBP:",0
  2182                                  czIntESP                db      "ESP:",0
  2183                                  czIntDS                 db      " DS:",0
  2184                                  czIntES                 db      " ES:",0
  2185                                  czIntSS                 db      " SS:",0
  2186                                  czIntCS                 db      " CS:",0
  2187                                  czIntEFLAGS             db      "FLG:",0
  2188                                  czIntEIP                db      "EIP:",0
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190                                  ;
  2191                                  ;       Routine:        DrawTextDialogBox
  2192                                  ;
  2193                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2194                                  ;
  2195                                  ;       In:             CL      upper left column (0-79)
  2196                                  ;                       CH      upper left row (0-24)
  2197                                  ;                       DL      column width, excluding border
  2198                                  ;                       DH      row height, excluding border
  2199                                  ;                       BH      color attribute
  2200                                  ;
  2201                                  ;-----------------------------------------------------------------------------------------------------------------------
  2202                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2203                                                          push    esi                                             ;
  2204                                                          push    edi                                             ;
  2205                                                          push    es                                              ;
  2206                                                          push    EGDTCGA                                         ;load CGA selector ...
  2207                                                          pop     es                                              ;... into ES
  2208                                  ;
  2209                                  ;       Compute target display offset
  2210                                  ;
  2211                                                          xor     eax,eax                                         ;zero register
  2212                                                          mov     al,ch                                           ;row
  2213                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2214                                                          mul     ah                                              ;row offset
  2215                                                          add     al,cl                                           ;add column
  2216                                                          adc     ah,0                                            ;add overflow
  2217                                                          add     al,cl                                           ;add column
  2218                                                          adc     ah,0                                            ;add overflow
  2219                                                          mov     edi,eax                                         ;target row offset
  2220                                  ;
  2221                                  ;       Display top border row
  2222                                  ;
  2223                                                          push    edi                                             ;save target row offset
  2224                                                          mov     ah,bh                                           ;attribute
  2225                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2226                                                          stosw                                                   ;display character and attribute
  2227                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2228                                                          xor     ecx,ecx                                         ;zero register
  2229                                                          mov     cl,dl                                           ;width, excluding border
  2230                                                          rep     stosw                                           ;display horizontal border
  2231                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2232                                                          stosw                                                   ;display character and attribute
  2233                                                          pop     edi                                             ;restore target row offset
  2234                                                          add     edi,ECONROWBYTES                                ;next row
  2235                                  ;
  2236                                  ;       Display dialog box body rows
  2237                                  ;
  2238                                                          xor     ecx,ecx                                         ;zero register
  2239                                                          mov     cl,dh                                           ;height, excluding border
  2240                                  .10                     push    ecx                                             ;save remaining rows
  2241                                                          push    edi                                             ;save target row offset
  2242                                                          mov     ah,bh                                           ;attribute
  2243                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2244                                                          stosw                                                   ;display character and attribute
  2245                                                          mov     al,EASCIISPACE                                  ;space
  2246                                                          xor     ecx,ecx                                         ;zero register
  2247                                                          mov     cl,dl                                           ;width, excluding border
  2248                                                          rep     stosw                                           ;display row
  2249                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2250                                                          stosw                                                   ;display character and attribute
  2251                                                          pop     edi                                             ;restore target row offset
  2252                                                          add     edi,ECONROWBYTES                                ;next row
  2253                                                          pop     ecx                                             ;remaining rows
  2254                                                          loop    .10                                             ;next row
  2255                                  ;
  2256                                  ;       Display bottom border row
  2257                                  ;
  2258                                                          push    edi                                             ;save target row offset
  2259                                                          mov     ah,bh                                           ;attribute
  2260                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2261                                                          stosw                                                   ;display character and attribute
  2262                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2263                                                          xor     ecx,ecx                                         ;zero register
  2264                                                          mov     cl,dl                                           ;width, excluding border
  2265                                                          rep     stosw                                           ;display horizontal border
  2266                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2267                                                          stosw                                                   ;display character and attribute
  2268                                                          pop     edi                                             ;restore target row offset
  2269                                                          add     edi,ECONROWBYTES                                ;next row
  2270                                  ;
  2271                                  ;       Restore and return
  2272                                  ;
  2273                                                          pop     es                                              ;restore non-volatile regs
  2274                                                          pop     edi                                             ;
  2275                                                          pop     esi                                             ;
  2276                                                          pop     ecx                                             ;
  2277                                                          ret                                                     ;return
  2278                                  ;=======================================================================================================================
  2279                                  ;
  2280                                  ;       Hardware Device Interupts
  2281                                  ;
  2282                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2283                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2284                                  ;       (BX=2028h).
  2285                                  ;
  2286                                  ;=======================================================================================================================
  2287                                  ;-----------------------------------------------------------------------------------------------------------------------
  2288                                  ;
  2289                                  ;       IRQ0    Clock Tick Interrupt
  2290                                  ;
  2291                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2292                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2293                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2294                                  ;
  2295                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2296                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2297                                  ;
  2298                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2299                                  ;       zero, the floppy disk motors are turned off.
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                                          menter  clocktick                                       ;clock tick interrupt
  2303                                                          push    eax                                             ;save non-volatile regs
  2304                                                          push    edx                                             ;
  2305                                                          push    ds                                              ;
  2306                                  ;
  2307                                  ;       End the interrupt.
  2308                                  ;
  2309                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2310                                  ;
  2311                                  ;       Update the clock tick count and the elapsed days as needed.
  2312                                  ;
  2313                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2314                                                          pop     ds                                              ;... into data segment register
  2315                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2316                                                          inc     eax                                             ;increment clock ticks
  2317                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2318                                                          jb      irq0.10                                         ;no, skip ahead
  2319                                                          inc     byte [wbClockDays]                              ;increment clock days
  2320                                                          xor     eax,eax                                         ;reset clock ticks
  2321                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2322                                  ;
  2323                                  ;       Decrement floppy disk motor timeout.
  2324                                  ;
  2325                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2326                                                          je      irq0.20                                         ;yes, skip ahead
  2327                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2328                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2329                                  ;
  2330                                  ;       Turn off the floppy disk motor if appropriate.
  2331                                  ;
  2332                                                          sti                                                     ;enable maskable interrupts
  2333                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2334                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2335                                                          in      al,dx                                           ;FDC main status byte
  2336                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2337                                                          jnz     irq0.15                                         ;wait while busy
  2338                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2339                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2340                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2341                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2342                                                          out     dx,al                                           ;turn motor off
  2343                                  ;
  2344                                  ;       Enable maskable interrupts.
  2345                                  ;
  2346                                  irq0.20                 sti                                                     ;enable maskable interrupts
  2347                                  ;
  2348                                  ;       Restore and return.
  2349                                  ;
  2350                                                          pop     ds                                              ;restore modified regs
  2351                                                          pop     edx                                             ;
  2352                                                          pop     eax                                             ;
  2353                                                          iretd                                                   ;return
  2354                                  ;-----------------------------------------------------------------------------------------------------------------------
  2355                                  ;
  2356                                  ;       IRQ1    Keyboard Interrupt
  2357                                  ;
  2358                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2359                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2360                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2361                                  ;       ALL modified registers upon return.
  2362                                  ;
  2363                                  ;-----------------------------------------------------------------------------------------------------------------------
  2364                                                          menter  keyboard                                        ;keyboard interrrupt
  2365                                                          push    eax                                             ;save non-volatile regs
  2366                                                          push    ebx                                             ;
  2367                                                          push    ecx                                             ;
  2368                                                          push    esi                                             ;
  2369                                                          push    ds                                              ;
  2370                                  ;
  2371                                  ;       End the interrupt.
  2372                                  ;
  2373                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2374                                  ;
  2375                                  ;       Handle keyboard scan-codes.
  2376                                  ;
  2377                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2378                                                          pop     ds                                              ;... into data segment register
  2379                                                          xor     al,al                                           ;zero
  2380                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2381                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2382                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2383                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2384                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2385                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2386                                                          mov     al,' '                                          ;space
  2387                                                          mov     [wbConsoleChar],al                              ;set character to space
  2388                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2389                                                          not     al                                              ;controller timeout mask
  2390                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2391                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2392                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2393                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2394                                                          jz      irq1.140                                        ;yes, skip ahead
  2395                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2396                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2397                                                          mov     ah,al                                           ;copy scan code 0
  2398                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2399                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2400                                                          je      irq1.30                                         ;yes, set flag
  2401                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2402                                                          je      irq1.40                                         ;yes, reset flag
  2403                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2404                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2405                                                          je      irq1.30                                         ;yes, set flag
  2406                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2407                                                          je      irq1.40                                         ;yes, reset flag
  2408                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2409                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2410                                                          je      irq1.30                                         ;yes, set flag
  2411                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2412                                                          je      irq1.40                                         ;yes, reset flag
  2413                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2414                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2415                                                          je      irq1.30                                         ;yes, set flag
  2416                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2417                                                          je      irq1.40                                         ;yes, reset flag
  2418                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2419                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2420                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2421                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2422                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2423                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2424                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2425                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2426                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2427                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2428                                                          jne     irq1.70                                         ;no, skip ahead
  2429                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2430                                                          jz      irq1.140                                        ;yes, skip ahead
  2431                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2432                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2433                                                          mov     ah,al                                           ;copy scan code 1
  2434                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2435                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2436                                                          je      irq1.30                                         ;yes, set flag
  2437                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2438                                                          je      irq1.40                                         ;yes, reset flag
  2439                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2440                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2441                                                          je      irq1.30                                         ;yes, set flag
  2442                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2443                                                          je      irq1.40                                         ;yes, reset flag
  2444                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2445                                                          je      irq1.80                                         ;yes, skip ahead
  2446                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2447                                                          je      irq1.80                                         ;yes, skip ahead
  2448                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2449                                                          je      irq1.10                                         ;yes, continue
  2450                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2451                                                          jne     irq1.20                                         ;no, skip ahead
  2452                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2453                                                          jz      irq1.140                                        ;yes, skip ahead
  2454                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2455                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2456                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2457                                                          jz      irq1.140                                        ;yes, skip ahead
  2458                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2459                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2460                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2461                                  irq1.30                 or      bl,al                                           ;set shift flag
  2462                                                          jmp     irq1.60                                         ;skip ahead
  2463                                  irq1.40                 not     al                                              ;convert flag to mask
  2464                                                          and     bl,al                                           ;reset shift flag
  2465                                                          jmp     irq1.60                                         ;skip ahead
  2466                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2467                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2468                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2469                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2470                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2471                                                          jmp     irq1.150                                        ;finish keyboard handling
  2472                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2473                                                          jne     irq1.80                                         ;no continue
  2474                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2475                                                          jz      irq1.140                                        ;yes, skip ahead
  2476                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2477                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2478                                                          mov     ah,al                                           ;copy scan code 1
  2479                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2480                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2481                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2482                                                          jz      irq1.140                                        ;yes, skip ahead
  2483                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2484                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2485                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2486                                                          jz      irq1.140                                        ;yes, skip ahead
  2487                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2488                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2489                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2490                                                          jz      irq1.140                                        ;yes, skip ahead
  2491                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2492                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2493                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2494                                                          jz      irq1.140                                        ;yes, skip ahead
  2495                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2496                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2497                                                          jmp     irq1.150                                        ;continue
  2498                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2499                                                          test    ah,EKEYBUP                                      ;release code?
  2500                                                          jnz     irq1.130                                        ;yes, skip ahead
  2501                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2502                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2503                                                          jz      irq1.90                                         ;no, skip ahead
  2504                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2505                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2506                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2507                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2508                                                          jz      irq1.100                                        ;no skip ahead
  2509                                                          mov     cl,al                                           ;copy ASCII code
  2510                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2511                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2512                                                          jb      irq1.100                                        ;yes, skip ahead
  2513                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2514                                                          ja      irq1.100                                        ;yes, skip ahead
  2515                                                          xor     al,EASCIICASE                                   ;switch case
  2516                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2517                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2518                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2519                                                          jz      irq1.120                                        ;no, skip ahead
  2520                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2521                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2522                                                          or      edx,eax                                         ;msg id and codes
  2523                                                          xor     ecx,ecx                                         ;null param
  2524                                                          push    eax                                             ;save codes
  2525                                                          call    PutMessage                                      ;put message to console
  2526                                                          pop     eax                                             ;restore codes
  2527                                                          test    al,al                                           ;ASCII translation?
  2528                                                          jz      irq1.130                                        ;no, skip ahead
  2529                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2530                                                          and     eax,0FFFFh                                      ;clear high-order word
  2531                                                          or      edx,eax                                         ;msg id and codes
  2532                                                          xor     ecx,ecx                                         ;null param
  2533                                                          call    PutMessage                                      ;put message to console
  2534                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2535                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2536                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2537                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2538                                  ;
  2539                                  ;       Enable maskable interrupts.
  2540                                  ;
  2541                                                          sti                                                     ;enable maskable interrupts
  2542                                  ;
  2543                                  ;       Restore and return.
  2544                                  ;
  2545                                                          pop     ds                                              ;restore non-volatile regs
  2546                                                          pop     esi                                             ;
  2547                                                          pop     ecx                                             ;
  2548                                                          pop     ebx                                             ;
  2549                                                          pop     eax                                             ;
  2550                                                          iretd                                                   ;return
  2551                                  ;-----------------------------------------------------------------------------------------------------------------------
  2552                                  ;       Scan-Code to ASCII Translation Tables
  2553                                  ;-----------------------------------------------------------------------------------------------------------------------
  2554                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2555                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2556                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2557                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2558                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2559                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2560                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2561                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2562                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2563                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2564                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2565                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2566                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2567                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2568                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2569                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2570                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2571                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2572                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2573                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2574                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2575                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2576                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2577                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2578                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2579                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2580                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2581                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2582                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2583                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2584                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2585                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2586                                  ;-----------------------------------------------------------------------------------------------------------------------
  2587                                  ;
  2588                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2589                                  ;
  2590                                  ;-----------------------------------------------------------------------------------------------------------------------
  2591                                                          menter  iochannel                                       ;secondary 8259A cascade
  2592                                                          push    eax                                             ;save modified regs
  2593                                                          jmp     hwint                                           ;end interrupt and return
  2594                                  ;-----------------------------------------------------------------------------------------------------------------------
  2595                                  ;
  2596                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2597                                  ;
  2598                                  ;-----------------------------------------------------------------------------------------------------------------------
  2599                                                          menter  com2                                            ;serial port 2 interrupt
  2600                                                          push    eax                                             ;save modified regs
  2601                                                          jmp     hwint                                           ;end interrupt and return
  2602                                  ;-----------------------------------------------------------------------------------------------------------------------
  2603                                  ;
  2604                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2605                                  ;
  2606                                  ;-----------------------------------------------------------------------------------------------------------------------
  2607                                                          menter  com1                                            ;serial port 1 interrupt
  2608                                                          push    eax                                             ;save modified regs
  2609                                                          jmp     hwint                                           ;end interrupt and return
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  ;
  2612                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2613                                  ;
  2614                                  ;-----------------------------------------------------------------------------------------------------------------------
  2615                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2616                                                          push    eax                                             ;save modified regs
  2617                                                          jmp     hwint                                           ;end interrupt and return
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                  ;
  2620                                  ;       IRQ6    Diskette Hardware Interrupt
  2621                                  ;
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                                          menter  diskette                                        ;floppy disk interrupt
  2624                                                          push    eax                                             ;save non-volatile regs
  2625                                                          push    ds                                              ;
  2626                                                          call    PutPrimaryEndOfInt                              ;end the interrupt
  2627                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2628                                                          pop     ds                                              ;... into DS register
  2629                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2630                                                          or      al,10000000b                                    ;set IRQ flag
  2631                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2632                                                          sti                                                     ;enable maskable interrupts
  2633                                                          pop     ds                                              ;restore non-volatile regs
  2634                                                          pop     eax                                             ;
  2635                                                          iretd                                                   ;return from interrupt
  2636                                  ;-----------------------------------------------------------------------------------------------------------------------
  2637                                  ;
  2638                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2639                                  ;
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2642                                                          push    eax                                             ;save modified regs
  2643                                                          jmp     hwint                                           ;end interrupt and return
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                  ;
  2646                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2647                                  ;
  2648                                  ;-----------------------------------------------------------------------------------------------------------------------
  2649                                                          menter  rtclock                                         ;real-time clock interrupt
  2650                                                          push    eax                                             ;save modified regs
  2651                                                          jmp     hwwint                                          ;end interrupt and return
  2652                                  ;-----------------------------------------------------------------------------------------------------------------------
  2653                                  ;
  2654                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2655                                  ;
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2658                                                          push    eax                                             ;save modified regs
  2659                                                          jmp     hwwint                                          ;end interrupt and return
  2660                                  ;-----------------------------------------------------------------------------------------------------------------------
  2661                                  ;
  2662                                  ;       IRQ10   Reserved Hardware Interrupt
  2663                                  ;
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                                          menter  irq10                                           ;reserved
  2666                                                          push    eax                                             ;save modified regs
  2667                                                          jmp     hwwint                                          ;end interrupt and return
  2668                                  ;-----------------------------------------------------------------------------------------------------------------------
  2669                                  ;
  2670                                  ;       IRQ11   Reserved Hardware Interrupt
  2671                                  ;
  2672                                  ;-----------------------------------------------------------------------------------------------------------------------
  2673                                                          menter  irq11                                           ;reserved
  2674                                                          push    eax                                             ;save modified regs
  2675                                                          jmp     hwwint                                          ;end interrupt and return
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  ;
  2678                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2679                                  ;
  2680                                  ;-----------------------------------------------------------------------------------------------------------------------
  2681                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2682                                                          push    eax                                             ;save modified regs
  2683                                                          jmp     hwwint                                          ;end interrupt and return
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  ;
  2686                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2687                                  ;
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                                          menter  coprocessor                                     ;coprocessor interrupt
  2690                                                          push    eax                                             ;save modified regs
  2691                                                          jmp     hwwint                                          ;end interrupt and return
  2692                                  ;-----------------------------------------------------------------------------------------------------------------------
  2693                                  ;
  2694                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2695                                  ;
  2696                                  ;-----------------------------------------------------------------------------------------------------------------------
  2697                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2698                                                          push    eax                                             ;save modified regs
  2699                                                          jmp     hwwint                                          ;end interrupt and return
  2700                                  ;-----------------------------------------------------------------------------------------------------------------------
  2701                                  ;
  2702                                  ;       IRQ15   Reserved Hardware Interrupt
  2703                                  ;
  2704                                  ;-----------------------------------------------------------------------------------------------------------------------
  2705                                                          menter  irq15                                           ;reserved
  2706                                                          push    eax                                             ;save modified regs
  2707                                                          jmp     hwwint                                          ;end interrupt and return
  2708                                  ;-----------------------------------------------------------------------------------------------------------------------
  2709                                  ;
  2710                                  ;       Exit from hardware interrupt
  2711                                  ;
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2714                                                          jmp     hwint90                                         ;skip ahead
  2715                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2716                                  hwint90                 sti                                                     ;enable maskable interrupts
  2717                                                          pop     eax                                             ;restore modified regs
  2718                                                          iretd                                                   ;return from interrupt
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  ;
  2721                                  ;       INT 30h Operating System Software Service Interrupt
  2722                                  ;
  2723                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2724                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2725                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2726                                  ;       the entry address of the specific function from a table.
  2727                                  ;
  2728                                  ;-----------------------------------------------------------------------------------------------------------------------
  2729                                                          menter  svc
  2730                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2731                                                          jae     svc90                                           ;yes, skip ahead
  2732                                                          movzx   eax,al                                          ;function
  2733                                                          shl     eax,2                                           ;offset into table
  2734                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2735                                  svc90                   iretd                                                   ;return from interrupt
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  ;
  2738                                  ;       Service Request Table
  2739                                  ;
  2740                                  ;
  2741                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2742                                  ;
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  tsvc                    tsvce   CompareMemory                                   ;compare memory
  2745                                                          tsvce   GetConsoleString                                ;get string input
  2746                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2747                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2748                                                          tsvce   UpperCaseString                                 ;upper-case string
  2749                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2750                                  ;-----------------------------------------------------------------------------------------------------------------------
  2751                                  ;
  2752                                  ;       Service Request Macros
  2753                                  ;
  2754                                  ;       These macros provide positional parameterization of service request calls.
  2755                                  ;
  2756                                  ;-----------------------------------------------------------------------------------------------------------------------
  2757                                  %macro                  compareMemory 0
  2758                                                          mov     al,eCompareMemory                               ;function code
  2759                                                          int     _svc                                            ;invoke OS service
  2760                                  %endmacro
  2761                                  %macro                  getConsoleString 0
  2762                                                          mov     al,eGetConsoleString                            ;function code
  2763                                                          int     _svc                                            ;invoke OS service
  2764                                  %endmacro
  2765                                  %macro                  placeCursor 0
  2766                                                          mov     al,ePlaceCursor                                 ;function code
  2767                                                          int     _svc                                            ;invoke OS service
  2768                                  %endmacro
  2769                                  %macro                  resetSystem 0
  2770                                                          mov     al,eResetSystem                                 ;function code
  2771                                                          int     _svc                                            ;invoke OS service
  2772                                  %endmacro
  2773                                  %macro                  upperCaseString 0
  2774                                                          mov     al,eUpperCaseString                             ;function code
  2775                                                          int     _svc                                            ;invoke OS service
  2776                                  %endmacro
  2777                                  ;=======================================================================================================================
  2778                                  ;
  2779                                  ;       Kernel Function Library
  2780                                  ;
  2781                                  ;=======================================================================================================================
  2782                                  ;=======================================================================================================================
  2783                                  ;
  2784                                  ;       String Helper Routines
  2785                                  ;
  2786                                  ;       CompareMemory
  2787                                  ;       UpperCaseString
  2788                                  ;
  2789                                  ;=======================================================================================================================
  2790                                  ;-----------------------------------------------------------------------------------------------------------------------
  2791                                  ;
  2792                                  ;       Routine:        CompareMemory
  2793                                  ;
  2794                                  ;       Description:    This routine compares two byte arrays.
  2795                                  ;
  2796                                  ;       In:             DS:EDX  first source address
  2797                                  ;                       DS:EBX  second source address
  2798                                  ;                       ECX     comparison length
  2799                                  ;
  2800                                  ;       Out:            EDX     first source address
  2801                                  ;                       EBX     second source address
  2802                                  ;                       ECX     0       array 1 = array 2
  2803                                  ;                               <0      array 1 < array 2
  2804                                  ;                               >0      array 1 > array 2
  2805                                  ;
  2806                                  ;-----------------------------------------------------------------------------------------------------------------------
  2807                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2808                                                          push    edi                                             ;
  2809                                                          push    es                                              ;
  2810                                                          push    ds                                              ;copy DS
  2811                                                          pop     es                                              ;... to ES
  2812                                                          mov     esi,edx                                         ;first source address
  2813                                                          mov     edi,ebx                                         ;second source address
  2814                                                          cld                                                     ;forward strings
  2815                                                          rep     cmpsb                                           ;compare bytes
  2816                                                          mov     al,0                                            ;default result
  2817                                                          jz      .10                                             ;branch if arrays equal
  2818                                                          mov     al,1                                            ;positive result
  2819                                                          jnc     .10                                             ;branch if target > source
  2820                                                          mov     al,-1                                           ;negative result
  2821                                  .10                     movsx   ecx,al                                          ;extend sign
  2822                                                          pop     es                                              ;restore non-volatile regs
  2823                                                          pop     edi                                             ;
  2824                                                          pop     esi                                             ;
  2825                                                          ret                                                     ;return
  2826                                  ;-----------------------------------------------------------------------------------------------------------------------
  2827                                  ;
  2828                                  ;       Routine:        UpperCaseString
  2829                                  ;
  2830                                  ;       Description:    This routine places all characters in the given string to upper case.
  2831                                  ;
  2832                                  ;       In:             DS:EDX  string address
  2833                                  ;
  2834                                  ;       Out:            EDX     string address
  2835                                  ;
  2836                                  ;-----------------------------------------------------------------------------------------------------------------------
  2837                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2838                                                          mov     esi,edx                                         ;string address
  2839                                                          cld                                                     ;forward strings
  2840                                  .10                     lodsb                                                   ;string character
  2841                                                          test    al,al                                           ;null?
  2842                                                          jz      .20                                             ;yes, skip ahead
  2843                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2844                                                          jb      .10                                             ;no, continue
  2845                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2846                                                          ja      .10                                             ;no, continue
  2847                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2848                                                          mov     [esi-1],al                                      ;upper character
  2849                                                          jmp     .10                                             ;continue
  2850                                  .20                     pop     esi                                             ;restore non-volatile regs
  2851                                                          ret                                                     ;return
  2852                                  ;=======================================================================================================================
  2853                                  ;
  2854                                  ;       Console Helper Routines
  2855                                  ;
  2856                                  ;       GetConsoleChar
  2857                                  ;       GetConsoleString
  2858                                  ;       NextConsoleColumn
  2859                                  ;       PreviousConsoleColumn
  2860                                  ;       PutConsoleChar
  2861                                  ;       PutConsoleHexByte
  2862                                  ;       PutConsoleHexDword
  2863                                  ;       PutConsoleHexWord
  2864                                  ;       PutConsoleOIAChar
  2865                                  ;       PutConsoleOIAShift
  2866                                  ;       Yield
  2867                                  ;
  2868                                  ;=======================================================================================================================
  2869                                  ;-----------------------------------------------------------------------------------------------------------------------
  2870                                  ;
  2871                                  ;       Routine:        GetConsoleChar
  2872                                  ;
  2873                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2874                                  ;
  2875                                  ;       Out:            AL      ASCII character code
  2876                                  ;                       AH      keyboard scan code
  2877                                  ;
  2878                                  ;-----------------------------------------------------------------------------------------------------------------------
  2879                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2880                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2881                                                          or      eax,eax                                         ;do we have a message?
  2882                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2883                                                          push    eax                                             ;save key codes
  2884                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2885                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2886                                                          pop     eax                                             ;restore key codes
  2887                                                          jne     GetConsoleChar                                  ;no, try again
  2888                                                          and     eax,0000ffffh                                   ;mask for key codes
  2889                                                          ret                                                     ;return
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                  ;
  2892                                  ;       Routine:        GetConsoleString
  2893                                  ;
  2894                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2895                                  ;
  2896                                  ;       In:             DS:EDX  target buffer address
  2897                                  ;                       ECX     maximum number of characters to accept
  2898                                  ;                       BH      echo to terminal
  2899                                  ;                       BL      terminating character
  2900                                  ;
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2903                                                          push    esi                                             ;
  2904                                                          push    edi                                             ;
  2905                                                          push    es                                              ;
  2906                                                          push    ds                                              ;load data segment selector ...
  2907                                                          pop     es                                              ;... into extra segment register
  2908                                                          mov     edi,edx                                         ;edi = target buffer
  2909                                                          push    ecx                                             ;save maximum characters
  2910                                                          xor     al,al                                           ;zero register
  2911                                                          cld                                                     ;forward strings
  2912                                                          rep     stosb                                           ;zero fill buffer
  2913                                                          pop     ecx                                             ;maximum characters
  2914                                                          mov     edi,edx                                         ;edi = target buffer
  2915                                                          mov     esi,edx                                         ;esi = target buffer
  2916                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2917                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2918                                                          cmp     al,bl                                           ;is this the terminator?
  2919                                                          je      .50                                             ;yes, exit
  2920                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2921                                                          jne     .30                                             ;no, skip ahead
  2922                                                          cmp     esi,edi                                         ;at start of buffer?
  2923                                                          je      .20                                             ;yes, get next character
  2924                                                          dec     edi                                             ;backup target pointer
  2925                                                          mov     byte [edi],0                                    ;zero previous character
  2926                                                          inc     ecx                                             ;increment remaining chars
  2927                                                          test    bh,1                                            ;echo to console?
  2928                                                          jz      .20                                             ;no, get next character
  2929                                                          call    PreviousConsoleColumn                           ;backup console position
  2930                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2931                                                          call    PutConsoleChar                                  ;write space to console
  2932                                                          call    PlaceCursor                                     ;position the cursor
  2933                                                          jmp     .20                                             ;get next character
  2934                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2935                                                          jb      .20                                             ;no, get another character
  2936                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2937                                                          ja      .20                                             ;no, get another character
  2938                                                          stosb                                                   ;store character in buffer
  2939                                                          test    bh,1                                            ;echo to console?
  2940                                                          jz      .40                                             ;no, skip ahead
  2941                                                          call    PutConsoleChar                                  ;write character to console
  2942                                                          call    NextConsoleColumn                               ;advance console position
  2943                                                          call    PlaceCursor                                     ;position the cursor
  2944                                  .40                     dec     ecx                                             ;decrement remaining chars
  2945                                                          jmp     .10                                             ;next
  2946                                  .50                     xor     al,al                                           ;null
  2947                                                          stosb                                                   ;terminate buffer
  2948                                                          pop     es                                              ;restore non-volatile regs
  2949                                                          pop     edi                                             ;
  2950                                                          pop     esi                                             ;
  2951                                                          pop     ecx                                             ;
  2952                                                          ret                                                     ;return
  2953                                  ;-----------------------------------------------------------------------------------------------------------------------
  2954                                  ;
  2955                                  ;       Routine:        NextConsoleColumn
  2956                                  ;
  2957                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2958                                  ;                       incremented if the end of the current row is reached.
  2959                                  ;
  2960                                  ;       In:             DS      OS data selector
  2961                                  ;
  2962                                  ;-----------------------------------------------------------------------------------------------------------------------
  2963                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2964                                                          cmp     al,ECONCOLS-1                                   ;end of row?
  2965                                                          jnb     .10
  2966                                                          inc     al
  2967                                                          mov     [wbConsoleColumn],al
  2968                                  .10                     ret                                                     ;return
  2969                                  ;-----------------------------------------------------------------------------------------------------------------------
  2970                                  ;
  2971                                  ;       Routine:        PreviousConsoleColumn
  2972                                  ;
  2973                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2974                                  ;                       the column is set to the last position in the row and the row is decremented.
  2975                                  ;
  2976                                  ;       In:             DS      OS data selector
  2977                                  ;
  2978                                  ;-----------------------------------------------------------------------------------------------------------------------
  2979                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2980                                                          or      al,al                                           ;start of row?
  2981                                                          jz      .10
  2982                                                          dec     al
  2983                                                          mov     [wbConsoleColumn],al
  2984                                  .10                     ret                                                     ;return
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;       Routine:        PutConsoleChar
  2988                                  ;
  2989                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2990                                  ;
  2991                                  ;       In:             AL      ASCII character
  2992                                  ;                       DS      OS data selector
  2993                                  ;
  2994                                  ;-----------------------------------------------------------------------------------------------------------------------
  2995                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2996                                                          push    es                                              ;
  2997                                                          push    EGDTCGA                                         ;load CGA selector ...
  2998                                                          pop     es                                              ;... into extra segment reg
  2999                                                          mov     cl,[wbConsoleColumn]                            ;column
  3000                                                          mov     ch,[wbConsoleRow]                               ;row
  3001                                                          call    SetConsoleChar                                  ;put character at row, column
  3002                                                          pop     es                                              ;restore non-volatile regs
  3003                                                          pop     ecx                                             ;
  3004                                                          ret                                                     ;return
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  ;
  3007                                  ;       Routine:        PutConsoleHexByte
  3008                                  ;
  3009                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3010                                  ;
  3011                                  ;       In:             AL      byte value
  3012                                  ;                       CL      column
  3013                                  ;                       CH      row
  3014                                  ;                       DS      OS data selector
  3015                                  ;                       ES      CGA selector
  3016                                  ;
  3017                                  ;-----------------------------------------------------------------------------------------------------------------------
  3018                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  3019                                                          shr     al,4                                            ;hi-order nybble
  3020                                                          call    .10                                             ;make ASCII and store
  3021                                                          pop     eax                                             ;byte value
  3022                                                          and     al,0Fh                                          ;lo-order nybble
  3023                                  .10                     or      al,030h                                         ;apply ASCII zone
  3024                                                          cmp     al,03Ah                                         ;numeric?
  3025                                                          jb      .20                                             ;yes, skip ahead
  3026                                                          add     al,7                                            ;add ASCII offset for alpha
  3027                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3028                                                          ret                                                     ;return
  3029                                  ;-----------------------------------------------------------------------------------------------------------------------
  3030                                  ;
  3031                                  ;       Routine:        PutConsoleHexDword
  3032                                  ;
  3033                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3034                                  ;
  3035                                  ;       In:             EAX     value
  3036                                  ;                       CL      column
  3037                                  ;                       CH      row
  3038                                  ;                       DS      OS data selector
  3039                                  ;                       ES      CGA selector
  3040                                  ;
  3041                                  ;-----------------------------------------------------------------------------------------------------------------------
  3042                                  PutConsoleHexDword      push    eax
  3043                                                          shr     eax,16
  3044                                                          call    PutConsoleHexWord
  3045                                                          pop     eax
  3046                                                          call    PutConsoleHexWord
  3047                                                          ret
  3048                                  ;-----------------------------------------------------------------------------------------------------------------------
  3049                                  ;
  3050                                  ;       Routine:        PutConsoleHexWord
  3051                                  ;
  3052                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3053                                  ;
  3054                                  ;       In:             EAX     value
  3055                                  ;                       CL      column
  3056                                  ;                       CH      row
  3057                                  ;                       DS      OS data selector
  3058                                  ;                       ES      CGA selector
  3059                                  ;
  3060                                  ;-----------------------------------------------------------------------------------------------------------------------
  3061                                  PutConsoleHexWord       push    eax
  3062                                                          shr     eax,8
  3063                                                          call    PutConsoleHexByte
  3064                                                          pop     eax
  3065                                                          call    PutConsoleHexByte
  3066                                                          ret
  3067                                  ;-----------------------------------------------------------------------------------------------------------------------
  3068                                  ;
  3069                                  ;       Routine:        PutConsoleOIAChar
  3070                                  ;
  3071                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3072                                  ;
  3073                                  ;       In:             DS      OS data selector
  3074                                  ;
  3075                                  ;-----------------------------------------------------------------------------------------------------------------------
  3076                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3077                                                          push    ecx                                             ;
  3078                                                          push    esi                                             ;
  3079                                                          push    ds                                              ;
  3080                                                          push    es                                              ;
  3081                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3082                                                          pop     ds                                              ;... into data segment register
  3083                                                          push    EGDTCGA                                         ;load CGA selector ...
  3084                                                          pop     es                                              ;... into extra segment register
  3085                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3086                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3087                                                          mov     bl,0                                            ;starting column
  3088                                                          mov     ecx,6                                           ;maximum scan codes
  3089                                  .10                     push    ecx                                             ;save remaining count
  3090                                                          mov     ecx,ebx                                         ;row, column
  3091                                                          lodsb                                                   ;read scan code
  3092                                                          or      al,al                                           ;scan code present?
  3093                                                          jz      .20                                             ;no, skip ahead
  3094                                                          call    PutConsoleHexByte                               ;display scan code
  3095                                                          jmp     .30                                             ;continue
  3096                                  .20                     mov     al,' '                                          ;ASCII space
  3097                                                          call    SetConsoleChar                                  ;display space
  3098                                                          mov     al,' '                                          ;ASCII space
  3099                                                          call    SetConsoleChar                                  ;display space
  3100                                  .30                     add     bl,2                                            ;next column (+2)
  3101                                                          pop     ecx                                             ;restore remaining
  3102                                                          loop    .10                                             ;next code
  3103                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3104                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3105                                                          jb      .40                                             ;no, skip ahead
  3106                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3107                                                          ja      .40                                             ;no, skip ahead
  3108                                                          mov     ch,bh                                           ;OIA row
  3109                                                          mov     cl,40                                           ;character display column
  3110                                                          call    SetConsoleChar                                  ;display ASCII character
  3111                                  .40                     pop     es                                              ;restore non-volatile regs
  3112                                                          pop     ds                                              ;
  3113                                                          pop     esi                                             ;
  3114                                                          pop     ecx                                             ;
  3115                                                          pop     ebx                                             ;
  3116                                                          ret                                                     ;return
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118                                  ;
  3119                                  ;       Routine:        PutConsoleOIAShift
  3120                                  ;
  3121                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3122                                  ;
  3123                                  ;       In:             BL      shift flags
  3124                                  ;                       BH      lock flags
  3125                                  ;                       DS      OS data selector
  3126                                  ;
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3129                                                          push    es                                              ;
  3130                                                          push    EGDTCGA                                         ;load CGA selector ...
  3131                                                          pop     es                                              ;... into ES register
  3132                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3133                                                          mov     al,EASCIISPACE                                  ;space is default character
  3134                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3135                                                          jz      .10                                             ;no, skip ahead
  3136                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3137                                  .10                     mov     cl,14                                           ;indicator column
  3138                                                          call    SetConsoleChar                                  ;display ASCII character
  3139                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3140                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3141                                                          jz      .20                                             ;no, skip ahead
  3142                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3143                                  .20                     mov     cl,64                                           ;indicator column
  3144                                                          call    SetConsoleChar                                  ;display ASCII character
  3145                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3146                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3147                                                          jz      .30                                             ;no, skip ahead
  3148                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3149                                  .30                     mov     cl,15                                           ;indicator column
  3150                                                          call    SetConsoleChar                                  ;display ASCII character
  3151                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3152                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3153                                                          jz      .40                                             ;no, skip ahead
  3154                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3155                                  .40                     mov     cl,63                                           ;indicator column
  3156                                                          call    SetConsoleChar                                  ;display ASCII character
  3157                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3158                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3159                                                          jz      .50                                             ;no, skip ahead
  3160                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3161                                  .50                     mov     cl,16                                           ;indicator column
  3162                                                          call    SetConsoleChar                                  ;display ASCII character
  3163                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3164                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3165                                                          jz      .60                                             ;no, skip ahead
  3166                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3167                                  .60                     mov     cl,62                                           ;indicator column
  3168                                                          call    SetConsoleChar                                  ;display ASCII character
  3169                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3170                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3171                                                          jz      .70                                             ;no, skip ahead
  3172                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3173                                  .70                     mov     cl,78                                           ;indicator column
  3174                                                          call    SetConsoleChar                                  ;display ASCII character
  3175                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3176                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3177                                                          jz      .80                                             ;no, skip ahead
  3178                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3179                                  .80                     mov     cl,77                                           ;indicator column
  3180                                                          call    SetConsoleChar                                  ;display ASCII character
  3181                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3182                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3183                                                          jz      .90                                             ;no, skip ahead
  3184                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3185                                  .90                     mov     cl,76                                           ;indicator column
  3186                                                          call    SetConsoleChar                                  ;display ASCII character
  3187                                                          pop     es                                              ;restore non-volatile regs
  3188                                                          pop     ecx                                             ;
  3189                                                          ret                                                     ;return
  3190                                  ;-----------------------------------------------------------------------------------------------------------------------
  3191                                  ;
  3192                                  ;       Routine:        Yield
  3193                                  ;
  3194                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3195                                  ;
  3196                                  ;-----------------------------------------------------------------------------------------------------------------------
  3197                                  Yield                   sti                                                     ;enable maskagle interrupts
  3198                                                          hlt                                                     ;halt until external interrupt
  3199                                                          ret                                                     ;return
  3200                                  ;=======================================================================================================================
  3201                                  ;
  3202                                  ;       Message Queue Helper Routines
  3203                                  ;
  3204                                  ;       GetMessage
  3205                                  ;       PutMessage
  3206                                  ;
  3207                                  ;=======================================================================================================================
  3208                                  ;-----------------------------------------------------------------------------------------------------------------------
  3209                                  ;
  3210                                  ;       Routine:        GetMessage
  3211                                  ;
  3212                                  ;       Description:    This routine reads and removes a message from the message queue.
  3213                                  ;
  3214                                  ;       Out:            EAX     lo-order message data
  3215                                  ;                       EDX     hi-order message data
  3216                                  ;
  3217                                  ;                       CY      0 = message read
  3218                                  ;                               1 = no message to read
  3219                                  ;
  3220                                  ;-----------------------------------------------------------------------------------------------------------------------
  3221                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3222                                                          push    ecx                                             ;
  3223                                                          push    ds                                              ;
  3224                                                          push    ELDTMQ                                          ;load message queue selector ...
  3225                                                          pop     ds                                              ;... into data segment register
  3226                                                          mov     ebx,[MQHead]                                    ;head ptr
  3227                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3228                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3229                                                          or      eax,edx                                         ;is queue empty?
  3230                                                          stc                                                     ;assume queue is emtpy
  3231                                                          jz      .20                                             ;yes, skip ahead
  3232                                                          xor     ecx,ecx                                         ;store zero
  3233                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3234                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3235                                                          add     ebx,8                                           ;next queue element
  3236                                                          and     ebx,03FCh                                       ;at end of queue?
  3237                                                          jnz     .10                                             ;no, skip ahead
  3238                                                          mov     bl,8                                            ;reset to 1st entry
  3239                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3240                                                          clc                                                     ;indicate message read
  3241                                  .20                     pop     ds                                              ;restore non-volatile regs
  3242                                                          pop     ecx                                             ;
  3243                                                          pop     ebx                                             ;
  3244                                                          ret                                                     ;return
  3245                                  ;-----------------------------------------------------------------------------------------------------------------------
  3246                                  ;
  3247                                  ;       Routine:        PutMessage
  3248                                  ;
  3249                                  ;       Description:    This routine adda a message to the message queue.
  3250                                  ;
  3251                                  ;       In:             ECX     hi-order data word
  3252                                  ;                       EDX     lo-order data word
  3253                                  ;
  3254                                  ;       Out:            CY      0 = success
  3255                                  ;                               1 = fail: queue is full
  3256                                  ;
  3257                                  ;-----------------------------------------------------------------------------------------------------------------------
  3258                                  PutMessage              push    ds                                              ;save non-volatile regs
  3259                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3260                                                          pop     ds                                              ;... into data segment register
  3261                                                          mov     eax,[MQTail]                                    ;tail ptr
  3262                                                          cmp     dword [eax],0                                   ;is queue full?
  3263                                                          stc                                                     ;assume failure
  3264                                                          jne     .20                                             ;yes, cannot store
  3265                                                          mov     [eax],edx                                       ;store lo-order data
  3266                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3267                                                          add     eax,8                                           ;next queue element adr
  3268                                                          and     eax,03FCh                                       ;at end of queue?
  3269                                                          jnz     .10                                             ;no, skip ahead
  3270                                                          mov     al,8                                            ;reset to top of queue
  3271                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3272                                                          clc                                                     ;indicate success
  3273                                  .20                     pop     ds                                              ;restore non-volatile regs
  3274                                                          ret                                                     ;return
  3275                                  ;=======================================================================================================================
  3276                                  ;
  3277                                  ;       Memory-Mapped Video Routines
  3278                                  ;
  3279                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3280                                  ;
  3281                                  ;       SetConsoleChar
  3282                                  ;       SetConsoleString
  3283                                  ;
  3284                                  ;=======================================================================================================================
  3285                                  ;-----------------------------------------------------------------------------------------------------------------------
  3286                                  ;
  3287                                  ;       Routine:        SetConsoleChar
  3288                                  ;
  3289                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3290                                  ;
  3291                                  ;       In:             AL      ASCII character
  3292                                  ;                       CL      column
  3293                                  ;                       CH      row
  3294                                  ;                       ES      CGA selector
  3295                                  ;
  3296                                  ;       Out:            EAX     last target address written (ES:)
  3297                                  ;                       CL      column + 1
  3298                                  ;
  3299                                  ;-----------------------------------------------------------------------------------------------------------------------
  3300                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3301                                                          movzx   eax,ch                                          ;row
  3302                                                          mov     ah,ECONCOLS                                     ;cols/row
  3303                                                          mul     ah                                              ;row * cols/row
  3304                                                          add     al,cl                                           ;add column
  3305                                                          adc     ah,0                                            ;handle carry
  3306                                                          shl     eax,1                                           ;screen offset
  3307                                                          mov     [es:eax],dl                                     ;store character
  3308                                                          inc     cl                                              ;next column
  3309                                                          ret                                                     ;return
  3310                                  ;-----------------------------------------------------------------------------------------------------------------------
  3311                                  ;
  3312                                  ;       Routine:        SetConsoleString
  3313                                  ;
  3314                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3315                                  ;
  3316                                  ;       In:             ESI     source offset (DS:)
  3317                                  ;                       CL      column
  3318                                  ;                       CH      row
  3319                                  ;                       ES      CGA selector
  3320                                  ;
  3321                                  ;-----------------------------------------------------------------------------------------------------------------------
  3322                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3323                                                          cld                                                     ;forward strings
  3324                                  .10                     lodsb                                                   ;next ASCII character
  3325                                                          test    al,al                                           ;end of string?
  3326                                                          jz      .20                                             ;yes, branch
  3327                                                          call    SetConsoleChar                                  ;store character
  3328                                                          jmp     .10                                             ;continue
  3329                                  .20                     pop     esi                                             ;restore non-volatile regs
  3330                                                          ret                                                     ;return
  3331                                  ;=======================================================================================================================
  3332                                  ;
  3333                                  ;       Input/Output Routines
  3334                                  ;
  3335                                  ;       These routines read and/or write directly to ports.
  3336                                  ;
  3337                                  ;       PlaceCursor
  3338                                  ;       PutPrimaryEndOfInt
  3339                                  ;       PutSecondaryEndOfInt
  3340                                  ;       ResetSystem
  3341                                  ;       SetKeyboardLamps
  3342                                  ;       WaitForKeyInBuffer
  3343                                  ;       WaitForKeyOutBuffer
  3344                                  ;
  3345                                  ;=======================================================================================================================
  3346                                  ;-----------------------------------------------------------------------------------------------------------------------
  3347                                  ;
  3348                                  ;       Routine:        PlaceCursor
  3349                                  ;
  3350                                  ;       Description:    This routine positions the cursor on the console.
  3351                                  ;
  3352                                  ;       In:             DS      OS data selector
  3353                                  ;
  3354                                  ;-----------------------------------------------------------------------------------------------------------------------
  3355                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3356                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3357                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3358                                                          mul     ah                                              ;row offset
  3359                                                          add     al,[wbConsoleColumn]                            ;add column
  3360                                                          adc     ah,0                                            ;add overflow
  3361                                                          mov     ecx,eax                                         ;screen offset
  3362                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3363                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3364                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3365                                                          out     dx,al                                           ;select register
  3366                                                          inc     edx                                             ;data port
  3367                                                          mov     al,ch                                           ;hi-order cursor loc
  3368                                                          out     dx,al                                           ;store hi-order loc
  3369                                                          dec     edx                                             ;register select port
  3370                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3371                                                          out     dx,al                                           ;select register
  3372                                                          inc     edx                                             ;data port
  3373                                                          mov     al,cl                                           ;lo-order cursor loc
  3374                                                          out     dx,al                                           ;store lo-order loc
  3375                                                          pop     ecx                                             ;restore non-volatile regs
  3376                                                          ret                                                     ;return
  3377                                  ;-----------------------------------------------------------------------------------------------------------------------
  3378                                  ;
  3379                                  ;       Routine:        PutPrimaryEndOfInt
  3380                                  ;
  3381                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3382                                  ;
  3383                                  ;-----------------------------------------------------------------------------------------------------------------------
  3384                                  PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3385                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3386                                                          ret                                                     ;return
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ;
  3389                                  ;       Routine:        PutSecondaryEndOfInt
  3390                                  ;
  3391                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3392                                  ;
  3393                                  ;-----------------------------------------------------------------------------------------------------------------------
  3394                                  PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3395                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3396                                                          ret                                                     ;return
  3397                                  ;-----------------------------------------------------------------------------------------------------------------------
  3398                                  ;
  3399                                  ;       Routine:        ResetSystem
  3400                                  ;
  3401                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3402                                  ;
  3403                                  ;       Out:            N/A     This routine does not return.
  3404                                  ;
  3405                                  ;-----------------------------------------------------------------------------------------------------------------------
  3406                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3407                                                          loop    $                                               ;clear interrupts
  3408                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3409                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3410                                  .10                     sti                                                     ;enable maskable interrupts
  3411                                                          hlt                                                     ;halt until interrupt
  3412                                                          jmp     .10                                             ;repeat until reset kicks in
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414                                  ;
  3415                                  ;       Routine:        SetKeyboardLamps
  3416                                  ;
  3417                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3418                                  ;
  3419                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3420                                  ;
  3421                                  ;-----------------------------------------------------------------------------------------------------------------------
  3422                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3423                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3424                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3425                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3426                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3427                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3428                                                          mov     al,bh                                           ;set/reset lamps value
  3429                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3430                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3431                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3432                                                          ret                                                     ;return
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  ;
  3435                                  ;       Routine:        WaitForKeyInBuffer
  3436                                  ;
  3437                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3438                                  ;
  3439                                  ;       Out:            ZF      1 = Input buffer ready
  3440                                  ;                               0 = Input buffer not ready after timeout
  3441                                  ;
  3442                                  ;-----------------------------------------------------------------------------------------------------------------------
  3443                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3444                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3445                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3446                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3447                                                          loopnz  .10                                             ;yes, repeat till timeout
  3448                                                          pop     ecx                                             ;restore non-volatile regs
  3449                                                          ret                                                     ;return
  3450                                  ;-----------------------------------------------------------------------------------------------------------------------
  3451                                  ;
  3452                                  ;       Routine:        WaitForKeyOutBuffer
  3453                                  ;
  3454                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3455                                  ;
  3456                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3457                                  ;                               0 = Output buffer empty after timeout
  3458                                  ;
  3459                                  ;-----------------------------------------------------------------------------------------------------------------------
  3460                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3461                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3462                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3463                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3464                                                          loopz   .10                                             ;loop until output buffer bit
  3465                                                          pop     ecx                                             ;restore non-volatile regs
  3466                                                          ret                                                     ;return
  3467                                  ;-----------------------------------------------------------------------------------------------------------------------
  3468                                  ;
  3469                                  ;       End of the Kernel Function Library
  3470                                  ;
  3471                                  ;-----------------------------------------------------------------------------------------------------------------------
  3472                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3473                                  ;=======================================================================================================================
  3474                                  ;
  3475                                  ;       Console Task
  3476                                  ;
  3477                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3478                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3479                                  ;       screen and responds to user commands.
  3480                                  ;
  3481                                  ;=======================================================================================================================
  3482                                  ;-----------------------------------------------------------------------------------------------------------------------
  3483                                  ;
  3484                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3485                                  ;
  3486                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3487                                  ;
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                  section                 constack                                                ;console task stack
  3490                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3491                                  ;-----------------------------------------------------------------------------------------------------------------------
  3492                                  ;
  3493                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3494                                  ;
  3495                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3496                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3497                                  ;       16 descriptors. Six are initially defined.
  3498                                  ;
  3499                                  ;-----------------------------------------------------------------------------------------------------------------------
  3500                                  section                 conldt                                                  ;console local descriptors
  3501                                                          dq      004093004780007Fh                               ;04 TSS alias
  3502                                                          dq      004093004700007Fh                               ;0c LDT alias
  3503                                                          dq      00409300400006FFh                               ;14 stack
  3504                                                          dq      00CF93000000FFFFh                               ;1c data
  3505                                                          dq      00409B0050000FFFh                               ;24 code
  3506                                                          dq      00409300480007FFh                               ;2c message queue
  3507                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3508                                  ;-----------------------------------------------------------------------------------------------------------------------
  3509                                  ;
  3510                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3511                                  ;
  3512                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3513                                  ;       segment. CS to console code.
  3514                                  ;
  3515                                  ;-----------------------------------------------------------------------------------------------------------------------
  3516                                  section                 contss                                                  ;console task state segment
  3517                                                          dd      0                                               ;00 back-link tss
  3518                                                          dd      0700h                                           ;04 esp ring 0
  3519                                                          dd      0014h                                           ;08 ss ring 0
  3520                                                          dd      0700h                                           ;0c esp ring 1
  3521                                                          dd      0014h                                           ;10 es ring 1
  3522                                                          dd      0700h                                           ;14 esp ring 2
  3523                                                          dd      0014h                                           ;18 ss ring 2
  3524                                                          dd      0                                               ;1c cr ring 3
  3525                                                          dd      0                                               ;20 eip
  3526                                                          dd      0200h                                           ;24 eflags
  3527                                                          dd      0                                               ;28 eax
  3528                                                          dd      0                                               ;2c ecx
  3529                                                          dd      0                                               ;30 edx
  3530                                                          dd      0                                               ;34 ebx
  3531                                                          dd      0700h                                           ;38 esp ring 3
  3532                                                          dd      0                                               ;3c ebp
  3533                                                          dd      0                                               ;40 esi
  3534                                                          dd      0                                               ;44 edi
  3535                                                          dd      001Ch                                           ;48 es
  3536                                                          dd      0024h                                           ;4c cs
  3537                                                          dd      0014h                                           ;50 ss ring 3
  3538                                                          dd      001Ch                                           ;54 ds
  3539                                                          dd      0                                               ;58 fs
  3540                                                          dd      0                                               ;5c gs
  3541                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3542                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3543                                  ;-----------------------------------------------------------------------------------------------------------------------
  3544                                  ;
  3545                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3546                                  ;
  3547                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3548                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3549                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3550                                  ;       event.
  3551                                  ;
  3552                                  ;-----------------------------------------------------------------------------------------------------------------------
  3553                                  section                 conmque                                                 ;console message queue
  3554                                                          dd      8                                               ;head pointer
  3555                                                          dd      8                                               ;tail pointer
  3556                                                          times   510 dd 0                                        ;queue elements
  3557                                  ;-----------------------------------------------------------------------------------------------------------------------
  3558                                  ;
  3559                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3560                                  ;
  3561                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3562                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3563                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3564                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3565                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3566                                  ;       board input, echoing to the console screen and responding to user commands.
  3567                                  ;
  3568                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3569                                  ;
  3570                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3571                                  ;                               |  Real Mode Interrupt Vectors                  |
  3572                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3573                                  ;                               |  Reserved BIOS Memory Area                    |
  3574                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3575                                  ;                               |  Shared Kernel Memory Area                    |
  3576                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3577                                  ;                               |  Global Descriptor Table (GDT)                |
  3578                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3579                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3580                                  ;                       002000  +-----------------------------------------------+
  3581                                  ;                               |  Interrupt Handlers                           |
  3582                                  ;                               |  Kernel Function Library                      |
  3583                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3584                                  ;                               |  Console Task Stack Area                      |
  3585                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3586                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3587                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3588                                  ;                               |  Console Task Task State Segment (TSS)        |
  3589                                  ;                       004800  +-----------------------------------------------+
  3590                                  ;                               |  Console Task Message Queue                   |
  3591                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3592                                  ;                               |  Console Task Code                            |
  3593                                  ;                               |  Console Task Constants                       |
  3594                                  ;                       006000  +===============================================+
  3595                                  ;
  3596                                  ;-----------------------------------------------------------------------------------------------------------------------
  3597                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3598                                  ;
  3599                                  ;       Initialize console work areas to low values.
  3600                                  ;
  3601                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  3602                                                          xor     al,al                                           ;initialization value
  3603                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3604                                                          cld                                                     ;forward strings
  3605                                                          rep     stosb                                           ;initialize data
  3606                                  ;
  3607                                  ;       Initialize the active panel variables.
  3608                                  ;
  3609                                                          mov     eax,czPnlCon001                                 ;initial console panel
  3610                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  3611                                  ;
  3612                                  ;       Address the console screen memory.
  3613                                  ;
  3614                                                          push    EGDTCGA                                         ;load CGA video selector...
  3615                                                          pop     es                                              ;...into extra segment reg
  3616                                  ;
  3617                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  3618                                  ;
  3619                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  3620                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3621                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3622                                                          rep     stosd                                           ;reset OIA
  3623                                  ;
  3624                                  ;       Clear the console rows. (This is done after every attention key).
  3625                                  ;
  3626                                  .20                     xor     edi,edi                                         ;target offset
  3627                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  3628                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  3629                                                          rep     stosd                                           ;reset screen body
  3630                                  ;
  3631                                  ;       Reset the input field input address, row and column.
  3632                                  ;
  3633                                                          xor     eax,eax                                         ;zero register
  3634                                                          mov     [wdConsoleField],eax                            ;zero field addr
  3635                                                          mov     [wdConsoleInput],eax                            ;zero input addr
  3636                                                          mov     [wbConsoleRow],al                               ;zero console row
  3637                                                          mov     [wbConsoleColumn],al                            ;zero console column
  3638                                  ;
  3639                                  ;       Load the field address from the panel. Exit loop if address is null.
  3640                                  ;
  3641                                                          mov     ebx,[wdConsolePanel]                            ;first field template addr
  3642                                  .30                     mov     esi,[ebx]                                       ;field value addr
  3643                                                          test    esi,esi                                         ;end of panel?
  3644                                                          jz      .70                                             ;yes, exit loop
  3645                                  ;
  3646                                  ;       Load the field row, column, color and length.
  3647                                  ;
  3648                                                          mov     ch,[ebx+4]                                      ;row
  3649                                                          mov     cl,[ebx+5]                                      ;column
  3650                                                          mov     dh,[ebx+6]                                      ;color
  3651                                                          mov     dl,[ebx+7]                                      ;length
  3652                                  ;
  3653                                  ;       Test the row high-bit for input field indication.
  3654                                  ;
  3655                                                          test    ch,080h                                         ;input field?
  3656                                                          jz      .40                                             ;no, branch
  3657                                                          and     ch,07Fh                                         ;clear input field indicator
  3658                                  ;
  3659                                  ;       Save the row and column if this is the first input field.
  3660                                  ;
  3661                                                          mov     al,[wbConsoleRow]                               ;console row
  3662                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  3663                                                          jnz     .40                                             ;yes, branch
  3664                                                          mov     [wdConsoleField],ebx                            ;save field template addr
  3665                                                          mov     [wdConsoleInput],esi                            ;update console input buffer
  3666                                                          mov     [wbConsoleRow],ch                               ;update console row
  3667                                                          mov     [wbConsoleColumn],cl                            ;update console column
  3668                                  ;
  3669                                  ;       Clear input field contents.
  3670                                  ;
  3671                                                          push    ecx                                             ;save row, col
  3672                                                          push    es                                              ;save CGA segment
  3673                                                          push    ds                                              ;load OS data ...
  3674                                                          pop     es                                              ;... into extra segment reg
  3675                                                          mov     edi,esi                                         ;target is field data addr
  3676                                                          xor     al,al                                           ;fill byte is NUL
  3677                                                          movzx   ecx,dl                                          ;field length
  3678                                                          rep     stosb                                           ;fill field with fill byte
  3679                                                          pop     es                                              ;restore CGA segment
  3680                                                          pop     ecx                                             ;restore row, col
  3681                                  ;
  3682                                  ;       Compute the target offset.
  3683                                  ;
  3684                                  .40                     movzx   eax,ch                                          ;row
  3685                                                          mov     ah,ECONCOLS                                     ;columns per row
  3686                                                          mul     ah                                              ;row offset
  3687                                                          add     al,cl                                           ;add column
  3688                                                          adc     ah,0                                            ;handle overflow
  3689                                                          shl     eax,1                                           ;two-bytes per column
  3690                                                          mov     edi,eax                                         ;target offset
  3691                                  ;
  3692                                  ;       Display the field contents.
  3693                                  ;
  3694                                                          movzx   ecx,dl                                          ;length
  3695                                                          mov     ah,dh                                           ;color
  3696                                  .50                     lodsb                                                   ;field character
  3697                                                          test    al,al                                           ;end of value?
  3698                                                          jz      .60                                             ;yes, branch
  3699                                                          stosw                                                   ;store character and color
  3700                                                          loop    .50                                             ;next character
  3701                                  .60                     add     ebx,8                                           ;next field addr
  3702                                                          jmp     short .30                                       ;next field
  3703                                  ;
  3704                                  ;       Place the cursor at the input field.
  3705                                  ;
  3706                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  3707                                                          mov     al,[wbConsoleColumn]                            ;field column
  3708                                                          placeCursor                                             ;position the cursor
  3709                                  ;
  3710                                  ;       Get command.
  3711                                  ;
  3712                                                          mov     esi,[wdConsoleField]                            ;input field template addr
  3713                                                          mov     edx,[wdConsoleInput]                            ;target buffer addr
  3714                                                          xor     ecx,ecx                                         ;zero register
  3715                                                          mov     cl,[esi+7]                                      ;maximum chars to accept
  3716                                                          mov     bh,1                                            ;echo to terminal
  3717                                                          mov     bl,13                                           ;terminating character
  3718                                                          getConsoleString                                        ;accept keyboard input
  3719                                  ;
  3720                                  ;       Take the first token entered.
  3721                                  ;
  3722                                                          mov     edx,[wdConsoleInput]                            ;console input buffer addr
  3723                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3724                                                          call    ConTakeToken                                    ;take first command token
  3725                                  ;
  3726                                  ;       Evaluate token
  3727                                  ;
  3728                                                          mov     edx,wzConsoleToken                              ;token buffer
  3729                                                          call    ConDetermineCommand                             ;determine if this is a command
  3730                                                          cmp     eax,ECONJMPTBLCNT                               ;command number in range?
  3731                                                          jnb     .80                                             ;no, branch
  3732                                                          shl     eax,2                                           ;convert number to array offset
  3733                                                          mov     edx,tConJmpTbl                                  ;command handler address table base
  3734                                                          mov     eax,[edx+eax]                                   ;command handler address
  3735                                                          call    eax                                             ;handler command
  3736                                  ;
  3737                                  ;       Refresh Panel.
  3738                                  ;
  3739                                  .80                      jmp     .20                                            ;refresh panel
  3740                                  ;-----------------------------------------------------------------------------------------------------------------------
  3741                                  ;
  3742                                  ;       Routine:        ConTakeToken
  3743                                  ;
  3744                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3745                                  ;
  3746                                  ;       In:             DS:EDX  source buffer address
  3747                                  ;                       DS:EBX  target buffer address
  3748                                  ;
  3749                                  ;       Out:            DS:EDX  source buffer address
  3750                                  ;                       DS:EBX  target buffer address
  3751                                  ;
  3752                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3753                                  ;
  3754                                  ;-----------------------------------------------------------------------------------------------------------------------
  3755                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3756                                                          push    edi                                             ;
  3757                                                          push    es                                              ;
  3758                                                          push    ds                                              ;load data segment selector ...
  3759                                                          pop     es                                              ;... into extra segment reg
  3760                                                          mov     esi,edx                                         ;source buffer address
  3761                                                          mov     edi,ebx                                         ;target buffer address
  3762                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3763                                                          cld                                                     ;forward strings
  3764                                  .10                     lodsb                                                   ;load byte
  3765                                                          cmp     al,EASCIISPACE                                  ;space?
  3766                                                          je      .10                                             ;yes, continue
  3767                                                          test    al,al                                           ;end of line?
  3768                                                          jz      .40                                             ;yes, branch
  3769                                  .20                     stosb                                                   ;store byte
  3770                                                          lodsb                                                   ;load byte
  3771                                                          test    al,al                                           ;end of line?
  3772                                                          jz      .40                                             ;no, continue
  3773                                                          cmp     al,EASCIISPACE                                  ;space?
  3774                                                          jne     .20                                             ;no, continue
  3775                                  .30                     lodsb                                                   ;load byte
  3776                                                          cmp     al,EASCIISPACE                                  ;space?
  3777                                                          je      .30                                             ;yes, continue
  3778                                                          dec     esi                                             ;pre-position
  3779                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3780                                                          mov     edi,edx                                         ;source buffer address
  3781                                  .50                     lodsb                                                   ;remaining byte
  3782                                                          stosb                                                   ;move to front of buffer
  3783                                                          test    al,al                                           ;end of line?
  3784                                                          jnz     .50                                             ;no, continue
  3785                                                          pop     es                                              ;restore non-volatile regs
  3786                                                          pop     edi                                             ;
  3787                                                          pop     esi                                             ;
  3788                                                          ret                                                     ;return
  3789                                  ;-----------------------------------------------------------------------------------------------------------------------
  3790                                  ;
  3791                                  ;       Routine:        ConDetermineCommand
  3792                                  ;
  3793                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3794                                  ;
  3795                                  ;       input:          DS:EDX  command address
  3796                                  ;
  3797                                  ;       output:         EAX     >=0     = command nbr
  3798                                  ;                               0       = unknown command
  3799                                  ;
  3800                                  ;-----------------------------------------------------------------------------------------------------------------------
  3801                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3802                                                          push    ecx                                             ;
  3803                                                          push    esi                                             ;
  3804                                                          push    edi                                             ;
  3805                                                          upperCaseString                                         ;upper-case string at EDX
  3806                                                          mov     esi,tConCmdTbl                                  ;commands table
  3807                                                          xor     edi,edi                                         ;intialize command number
  3808                                                          cld                                                     ;forward strings
  3809                                  .10                     lodsb                                                   ;command length
  3810                                                          movzx   ecx,al                                          ;command length
  3811                                                          jecxz   .20                                             ;branch if end of table
  3812                                                          mov     ebx,esi                                         ;table entry address
  3813                                                          add     esi,ecx                                         ;next table entry address
  3814                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3815                                                          jecxz   .20                                             ;branch if equal
  3816                                                          inc     edi                                             ;increment command nbr
  3817                                                          jmp     .10                                             ;repeat
  3818                                  .20                     mov     eax,edi                                         ;command number
  3819                                                          pop     edi                                             ;restore non-volatile regs
  3820                                                          pop     esi                                             ;
  3821                                                          pop     ecx                                             ;
  3822                                                          pop     ebx                                             ;
  3823                                                          ret                                                     ;return
  3824                                  ;-----------------------------------------------------------------------------------------------------------------------
  3825                                  ;
  3826                                  ;       Routine:        ConExit
  3827                                  ;
  3828                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3829                                  ;
  3830                                  ;-----------------------------------------------------------------------------------------------------------------------
  3831                                  ConExit                 resetSystem                                             ;issue system reset
  3832                                                          ret                                                     ;return
  3833                                  ;-----------------------------------------------------------------------------------------------------------------------
  3834                                  ;
  3835                                  ;       Routine:        ConInt6
  3836                                  ;
  3837                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3838                                  ;
  3839                                  ;-----------------------------------------------------------------------------------------------------------------------
  3840                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3841                                                          ret                                                     ;return (not executed)
  3842                                  ;-----------------------------------------------------------------------------------------------------------------------
  3843                                  ;
  3844                                  ;       Constants
  3845                                  ;
  3846                                  ;-----------------------------------------------------------------------------------------------------------------------
  3847                                  ;-----------------------------------------------------------------------------------------------------------------------
  3848                                  ;
  3849                                  ;       Panels
  3850                                  ;
  3851                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  3852                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  3853                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  3854                                  ;
  3855                                  ;-----------------------------------------------------------------------------------------------------------------------
  3856                                  czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  3857                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  3858                                                          dd      czFldTitleCon001
  3859                                                          db      00,30,07h,20
  3860                                                          dd      czFldDatTmCon001
  3861                                                          db      00,63,02h,17
  3862                                                          dd      czFldPrmptCon001
  3863                                                          db      23,00,07h,01
  3864                                                          dd      wzConsoleInBuffer
  3865                                                          db      128+23,01,07h,79
  3866                                                          dd      0                                               ;end of panel
  3867                                  ;-----------------------------------------------------------------------------------------------------------------------
  3868                                  ;
  3869                                  ;       Tables
  3870                                  ;
  3871                                  ;-----------------------------------------------------------------------------------------------------------------------
  3872                                                                                                                  ;---------------------------------------
  3873                                                                                                                  ;  Command Jump Table
  3874                                                                                                                  ;---------------------------------------
  3875                                  tConJmpTbl              equ     $                                               ;command jump table
  3876                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3877                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3878                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  3879                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3880                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3881                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3882                                                                                                                  ;---------------------------------------
  3883                                                                                                                  ;  Command Name Table
  3884                                                                                                                  ;---------------------------------------
  3885                                  tConCmdTbl              equ     $                                               ;command name table
  3886                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3887                                                          db      5,"EXIT",0                                      ;exit command
  3888                                                          db      5,"INT6",0                                      ;int6 command
  3889                                                          db      5,"QUIT",0                                      ;quit command
  3890                                                          db      0                                               ;end of table
  3891                                  ;-----------------------------------------------------------------------------------------------------------------------
  3892                                  ;
  3893                                  ;       Strings
  3894                                  ;
  3895                                  ;-----------------------------------------------------------------------------------------------------------------------
  3896                                  czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  3897                                  czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  3898                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  3899                                  czFldPrmptCon001        db      ":"                                             ;command prompt
  3900                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3901                                  %endif
  3902                                  %ifdef BUILDDISK
  3903                                  ;-----------------------------------------------------------------------------------------------------------------------
  3904                                  ;
  3905                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3906                                  ;
  3907                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3908                                  ;
  3909                                  ;-----------------------------------------------------------------------------------------------------------------------
  3910                                  section                 unused                                                  ;unused disk space
  3911                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3912                                  %endif
  3913                                  ;=======================================================================================================================
  3914                                  ;
  3915                                  ;       End of Program Code
  3916                                  ;
  3917                                  ;=======================================================================================================================
