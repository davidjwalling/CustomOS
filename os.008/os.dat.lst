     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.008
     6                                  ;
     7                                  ;       Description:    In this sample program, an "int6" command is added to generate an invalid opcode interrupt.
     8                                  ;                       The interrupt handler displays the contents of registers at the time of the interrupt.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   331                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   332                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   333                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   334                                  EASCIISPACE             equ     020h                                            ;space
   335                                  EASCIIUPPERA            equ     041h                                            ;'A'
   336                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   337                                  EASCIILOWERA            equ     061h                                            ;'a'
   338                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   339                                  EASCIITILDE             equ     07Eh                                            ;'~'
   340                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   341                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   342                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   343                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   344                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   345                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   346                                  EASCIICASE              equ     00100000b                                       ;case bit
   347                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  ;
   350                                  ;       Operating System Values
   351                                  ;
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   356                                  ;
   357                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   358                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   359                                  ;
   360                                  ;-----------------------------------------------------------------------------------------------------------------------
   361                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   362                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   363                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   364                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   365                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   366                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   367                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   368                                  ;-----------------------------------------------------------------------------------------------------------------------
   369                                  ;       Console Constants                                                       ECON...
   370                                  ;-----------------------------------------------------------------------------------------------------------------------
   371                                  ECONCOLS                equ     80                                              ;columns per row
   372                                  ECONROWS                equ     24                                              ;console rows
   373                                  ECONOIAROW              equ     24                                              ;operator information area row
   374                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   375                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   376                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   377                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   378                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   379                                  ;-----------------------------------------------------------------------------------------------------------------------
   380                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   381                                  ;-----------------------------------------------------------------------------------------------------------------------
   382                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   383                                  EGDTCGA                 equ     020h                                            ;cga video selector
   384                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   385                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   386                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   387                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   388                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   389                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   390                                  ;-----------------------------------------------------------------------------------------------------------------------
   391                                  ;       Keyboard Flags                                                          EKEYF...
   392                                  ;-----------------------------------------------------------------------------------------------------------------------
   393                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   394                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   395                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   396                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   397                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   398                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   399                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   400                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   401                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   402                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   403                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;       Kernel Constants                                                        EKRN...
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   408                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   409                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   410                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   413                                  ;-----------------------------------------------------------------------------------------------------------------------
   414                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   415                                  ;-----------------------------------------------------------------------------------------------------------------------
   416                                  ;       Message Identifiers                                                     EMSG...
   417                                  ;-----------------------------------------------------------------------------------------------------------------------
   418                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   419                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   420                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   421                                  ;=======================================================================================================================
   422                                  ;
   423                                  ;       Structures
   424                                  ;
   425                                  ;=======================================================================================================================
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  ;
   428                                  ;       MQUEUE
   429                                  ;
   430                                  ;       The MQUEUE structure maps memory used for a message queue.
   431                                  ;
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  struc                   MQUEUE
   434 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   435 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   436 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   437                                  endstruc
   438                                  ;-----------------------------------------------------------------------------------------------------------------------
   439                                  ;
   440                                  ;       OSDATA
   441                                  ;
   442                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   443                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   444                                  ;
   445                                  ;-----------------------------------------------------------------------------------------------------------------------
   446                                  struc                   OSDATA
   447 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   448 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   449 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   450 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   451 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   452 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   453 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   454 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   455 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   456 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   457 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   458 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   459 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   460 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   461 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   462 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   463 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   464 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   465 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   466 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   467 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   468 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   469 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   470 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   471 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   472 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   473 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   474 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   475 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   476 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   477 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   478 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   479 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   480 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   481 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   482 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   483 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   484 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   485 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   486 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   487 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   488 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   489 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   490 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   491 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   492 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   493 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   494 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   495 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   496 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   497 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   498 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   499 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   500 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   501 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   502 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   503 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   504 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   505 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   506 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   507 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   508 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   509 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   510 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   511 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   512 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   513 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   514 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   515 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   516 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   517 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   518 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   519 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   520 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   521 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   522 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   523 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   524 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   525 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   526 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   527 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   528 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   529 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   530 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   531 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   532 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   533 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   534 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   535 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   536 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   537 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   538 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   539 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   540 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   541 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   542 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   543 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   544 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   545 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   546 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   547 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  ;
   550                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   551                                  ;
   552                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   553                                  ;
   554                                  ;-----------------------------------------------------------------------------------------------------------------------
   555                                  ECONDATA                equ     ($)
   556 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   557 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   558 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   559 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   560 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   561 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   562 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   563 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   564 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   565 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   566 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   567 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   568 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   569 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   570                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  ;
   573                                  ;       End of OS Variables
   574                                  ;
   575                                  ;-----------------------------------------------------------------------------------------------------------------------
   576                                  endstruc
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  ;
   579                                  ;       Macros
   580                                  ;
   581                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   582                                  ;
   583                                  ;-----------------------------------------------------------------------------------------------------------------------
   584                                  %macro                  mint    1
   585                                  _%1                     equ     ($-$$) / EX86DESCLEN
   586                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   587                                  %endmacro
   588                                  %macro                  mtrap   1
   589                                  _%1                     equ     ($-$$) / EX86DESCLEN
   590                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   591                                  %endmacro
   592                                  %macro                  menter  1
   593                                  ?%1                     equ     ($-$$)
   594                                  %endmacro
   595                                  %macro                  tsvce   1
   596                                  e%1                     equ     ($-tsvc)/4
   597                                                          dd      %1
   598                                  %endmacro
   599                                  %ifdef BUILDBOOT
   600                                  ;=======================================================================================================================
   601                                  ;
   602                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   603                                  ;
   604                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   605                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   606                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   607                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   608                                  ;
   609                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   610                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   611                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   612                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   613                                  ;       immediately followed by a disk parameter table.
   614                                  ;
   615                                  ;=======================================================================================================================
   616                                                          cpu     8086                                            ;assume minimal CPU
   617                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   618                                                          bits    16                                              ;16-bit code at power-up
   619                                  %ifdef BUILDPREP
   620                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   621                                  %else
   622 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   623                                  %endif
   624                                  ;-----------------------------------------------------------------------------------------------------------------------
   625                                  ;
   626                                  ;       Disk Parameter Table
   627                                  ;
   628                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   629                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   630                                  ;
   631                                  ;-----------------------------------------------------------------------------------------------------------------------
   632 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   633 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   634 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   635 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   636 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   637 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   638 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   639 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   640 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   641                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   642 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   643 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   644 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   645                                  ;
   646                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   647                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   648                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   649                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   650                                  ;       given several possible starting values for CS:IP.
   651                                  ;
   652                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   653 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   654                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   655 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   656 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   657 00000025 B104                                            mov     cl,4                                            ;shift count
   658 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   659 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   660 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   661                                  ;
   662                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   663                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   664                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   665                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   666                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   667                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   668                                  ;
   669 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   670 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   671 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   672 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   673 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   674                                  ;
   675                                  ;       Our boot addressability is now set up according to the following diagram.
   676                                  ;
   677                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   678                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   679                                  ;                               |  256 = 100h bytes                             |
   680                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   681                                  ;                               |  Boot Sector (vstart=0100h)                   |
   682                                  ;                               |  1 sector = 512 = 200h bytes                  |
   683                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   684                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   685                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   686                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   687                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   688                                  ;                               |  2 sectors = 1024 = 400h bytes
   689                                  ;                       009400  +-----------------------------------------------+ DS:1900
   690                                  ;
   691                                  ;       On entry, DL indicates the drive being booted from.
   692                                  ;
   693 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   694                                  ;
   695                                  ;       Compute directory i/o buffer address.
   696                                  ;
   697 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   698 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   699 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   700 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   701                                  ;
   702                                  ;       Compute segment where os.com will be loaded.
   703                                  ;
   704 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   705 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   706 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   707 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   708                                  ;
   709                                  ;       Set the video mode to 80 column, 25 row, text.
   710                                  ;
   711 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   712 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   713                                  ;
   714                                  ;       Write a message to the console so we know we have our addressability established.
   715                                  ;
   716 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   717 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   718                                  ;
   719                                  ;       Initialize the number of directory sectors to search.
   720                                  ;
   721 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   722 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   723                                  ;
   724                                  ;       Compute number of directory sectors and initialize overhead count.
   725                                  ;
   726 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   727 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   728 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   729 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   730                                  ;
   731                                  ;       Compute directory entries per sector.
   732                                  ;
   733 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   734 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   735 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   736                                  ;
   737                                  ;       Compute first logical directory sector and update overhead count.
   738                                  ;
   739 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   740 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   741 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   742 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   743 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   744 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   745                                  ;
   746                                  ;       Read directory sector.
   747                                  ;
   748 0000008E B001                    .30                     mov     al,1                                            ;sector count
   749 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   750 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   751 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   752                                  ;
   753                                  ;       Setup variables to search this directory sector.
   754                                  ;
   755 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   756 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   757 000000A1 7603                                            jna     .40                                             ;no, continue
   758 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   759 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   760 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   761 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   762                                  ;
   763                                  ;       Loop through directory sectors searching for kernel program.
   764                                  ;
   765 000000B1 56                      .50                     push    si                                              ;save kernel name address
   766 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   767 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   768 000000B6 FC                                              cld                                                     ;forward strings
   769 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   770 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   771 000000BA 5E                                              pop     si                                              ;restore kernel name address
   772 000000BB 7418                                            je      .60                                             ;exit loop if found
   773 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   774 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   775 000000C2 75ED                                            jnz     .50                                             ;next entry
   776                                  ;
   777                                  ;       Repeat search if we are not at the end of the directory.
   778                                  ;
   779 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   780 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   781 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   782 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   783 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   784                                  ;
   785                                  ;       If we find the kernel program in the directory, read the FAT.
   786                                  ;
   787 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   788 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   789 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   790 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   791 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   792 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   793                                  ;
   794                                  ;       Get the starting cluster of the kernel program and target address.
   795                                  ;
   796 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   797 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   798                                  ;
   799                                  ;       Read each program cluster into RAM.
   800                                  ;
   801 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   802 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   803 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   804 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   805 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   806 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   807 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   808 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   809 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   810                                  ;
   811                                  ;       Update buffer pointer for next cluster.
   812                                  ;
   813 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   814 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   815 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   816 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   817 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   818                                  ;
   819                                  ;       Compute next cluster number.
   820                                  ;
   821 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   822 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   823 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   824 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   825 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   826 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   827 00000120 83E701                                          and     di,1                                            ;get low bit
   828 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   829 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   830 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   831                                  ;
   832                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   833                                  ;
   834 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   835 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   836 00000130 B104                                            mov     cl,4                                            ;shift count
   837 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   838 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   839 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   840 0000013A 75B2                                            jne     .70                                             ;no, continue
   841                                  ;
   842                                  ;       Transfer control to the operating system program.
   843                                  ;
   844 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   845 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   846 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   847                                  ;
   848                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   849                                  ;
   850 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   851 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   852 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   853 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   854 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   855 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   856 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   857 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   858 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   859 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   860                                  ;
   861                                  ;       Try maxtries times to read sector.
   862                                  ;
   863 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   864 00000160 53                      .10                     push    bx                                              ;save buffer address
   865 00000161 51                                              push    cx                                              ;save retry count
   866 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   867 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   868 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   869 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   870 0000016F 59                                              pop     cx                                              ;restore retry count
   871 00000170 5B                                              pop     bx                                              ;restore buffer address
   872 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   873 00000173 E2EB                                            loop    .10                                             ;retry
   874                                  ;
   875                                  ;       Handle disk error: convert to ASCII and store in error string.
   876                                  ;
   877 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   878 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   879 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   880 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   881 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   882 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   883 00000183 7203                                            jb      .20                                             ;continue if numeral
   884 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   885 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   886 0000018A 7203                                            jb      .30                                             ;continue if numeral
   887 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   888 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   889 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   890 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   891                                  ;
   892                                  ;       Wait for a key press.
   893                                  ;
   894 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   895 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   896 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   897 0000019E FB                                              sti                                                     ;enable maskable interrupts
   898 0000019F F4                                              hlt                                                     ;wait for interrupt
   899 000001A0 EBF6                                            jmp     .10                                             ;repeat
   900                                  ;
   901                                  ;       Reset the system.
   902                                  ;
   903 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   904 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   905 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   906 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   907 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   908                                  ;
   909                                  ;       Display text message.
   910                                  ;
   911 000001AA FC                      BootPrint               cld                                                     ;forward strings
   912 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   913 000001AC 84C0                                            test    al,al                                           ;end of string?
   914 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   915 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   916 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   917 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   918 000001B6 C3                      BootReturn              ret                                                     ;return
   919                                  ;-----------------------------------------------------------------------------------------------------------------------
   920                                  ;
   921                                  ;       Constants
   922                                  ;
   923                                  ;-----------------------------------------------------------------------------------------------------------------------
   924 000001B7 90                                              align   2
   925 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   926 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   926 000001C3 4F4D               
   927 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   927 000001CE 530D0A00           
   928 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   928 000001DB 7220               
   929 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   930 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   930 000001E9 6700               
   931                                  ;-----------------------------------------------------------------------------------------------------------------------
   932                                  ;
   933                                  ;       Work Areas
   934                                  ;
   935                                  ;-----------------------------------------------------------------------------------------------------------------------
   936 000001EB 90                                              align   2
   937 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   938 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   939 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   940 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   941 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   942                                  wwReadCountCommand      equ     $                                               ;read count and command
   943 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   944 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   945                                  wwDriveHead             equ     $                                               ;drive, head (word)
   946 000001F8 00                      wbDrive                 db      0                                               ;drive
   947 000001F9 00                      wbHead                  db      0                                               ;head
   948                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   949 000001FA 00                                              db      0                                               ;sector
   950 000001FB 00                      wbTrack                 db      0                                               ;track
   951 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   952 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   953                                  %endif
   954                                  %ifdef BUILDPREP
   955                                  ;=======================================================================================================================
   956                                  ;
   957                                  ;       Diskette Preparation Code
   958                                  ;
   959                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   960                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   961                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   962                                  ;
   963                                  ;=======================================================================================================================
   964                                  ;
   965                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   966                                  ;
   967                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   968                                                          call    BootPrint                                       ;display message
   969                                  ;
   970                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   971                                  ;
   972                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   973                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   974                                                          jnz     .20                                             ;continue if key pressed
   975                                                          sti                                                     ;enable interrupts
   976                                                          hlt                                                     ;wait for interrupt
   977                                                          jmp     .10                                             ;repeat
   978                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   979                                                          je      .30                                             ;yes, branch
   980                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   981                                                          jne     .10                                             ;no, repeat
   982                                                          jmp     .120                                            ;yes, exit program
   983                                  ;
   984                                  ;       Display writing-sector message and patch the JMP instruction.
   985                                  ;
   986                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   987                                                          call    BootPrint                                       ;display message
   988                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   989                                                          mov     ax,01Bh                                         ;address past disk parameter table
   990                                                          mov     [bx],ax                                         ;update the JMP instruction
   991                                  ;
   992                                  ;       Try to read the boot sector.
   993                                  ;
   994                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   995                                  .40                     push    cx                                              ;save remaining tries
   996                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   997                                                          mov     dx,0                                            ;head zero, drive zero
   998                                                          mov     cx,1                                            ;track zero, sector one
   999                                                          mov     ax,0201h                                        ;read one sector
  1000                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1001                                                          pop     cx                                              ;restore remaining retries
  1002                                                          jnc     .50                                             ;skip ahead if successful
  1003                                                          loop    .40                                             ;try again
  1004                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1005                                                          jmp     .70                                             ;branch to error routine
  1006                                  ;
  1007                                  ;       Copy diskette parms from input buffer to output buffer.
  1008                                  ;
  1009                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1010                                                          add     si,11                                           ;skip over JMP and system ID
  1011                                                          mov     di,Boot                                         ;output buffer address
  1012                                                          add     di,11                                           ;skip over JMP and system ID
  1013                                                          mov     cx,19                                           ;length of diskette parameters
  1014                                                          cld                                                     ;forward string copies
  1015                                                          rep     movsb                                           ;copy diskette parameters
  1016                                  ;
  1017                                  ;       Try to write boot sector to diskette.
  1018                                  ;
  1019                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1020                                  .60                     push    cx                                              ;save remaining tries
  1021                                                          mov     bx,Boot                                         ;output buffer address
  1022                                                          mov     dx,0                                            ;head zero, drive zero
  1023                                                          mov     cx,1                                            ;track zero, sector one
  1024                                                          mov     ax,0301h                                        ;write one sector
  1025                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1026                                                          pop     cx                                              ;restore remaining retries
  1027                                                          jnc     .100                                            ;skip ahead if successful
  1028                                                          loop    .60                                             ;try again
  1029                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1030                                  ;
  1031                                  ;       Convert the error code to ASCII and display the error message.
  1032                                  ;
  1033                                  .70                     push    ax                                              ;save error code
  1034                                                          mov     al,ah                                           ;copy error code
  1035                                                          mov     ah,0                                            ;AX = error code
  1036                                                          mov     dl,10h                                          ;hexadecimal divisor
  1037                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1038                                                          or      ax,03030h                                       ;add ASCII zone digits
  1039                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1040                                                          jb      .80                                             ;yes, continue
  1041                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1042                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1043                                                          jb      .90                                             ;yes, continue
  1044                                                          add     al,7                                            ;no, make ASCII
  1045                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1046                                                          call    BootPrint                                       ;write error message
  1047                                                          pop     ax                                              ;restore error code
  1048                                  ;
  1049                                  ;       Display the completion message.
  1050                                  ;
  1051                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1052                                                          mov     al,ah                                           ;BIOS return code
  1053                                                          cmp     al,0                                            ;success?
  1054                                                          je      .110                                            ;yes, continue
  1055                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1056                                                          cmp     al,1                                            ;disk parameter error?
  1057                                                          je      .110                                            ;yes, continue
  1058                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1059                                                          cmp     al,2                                            ;address mark not found?
  1060                                                          je      .110                                            ;yes, continue
  1061                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1062                                                          cmp     al,3                                            ;protected disk?
  1063                                                          je      .110                                            ;yes, continue
  1064                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1065                                                          cmp     al,6                                            ;diskette removed?
  1066                                                          je      .110                                            ;yes, continue
  1067                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1068                                                          cmp     al,80H                                          ;drive timed out?
  1069                                                          je      .110                                            ;yes, continue
  1070                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1071                                  .110                    call    BootPrint                                       ;display result message
  1072                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1073                                                          int     021h                                            ;terminate DOS program
  1074                                                          ret                                                     ;return (should not execute)
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076                                  ;
  1077                                  ;       Diskette Preparation Messages
  1078                                  ;
  1079                                  ;-----------------------------------------------------------------------------------------------------------------------
  1080                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1081                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1082                                                          db      13,10
  1083                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1084                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1085                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1086                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1087                                                          db      13,10,0
  1088                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1089                                                          db      13,10,0
  1090                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1091                                                          db      13,10,0
  1092                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1093                                                          db      13,10,0
  1094                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1095                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1096                                                          db      13,10,0
  1097                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1098                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1099                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1100                                                          db      13,10,"and retry."
  1101                                                          db      13,10,0
  1102                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1103                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1104                                                          db      13,10,"using another diskette."
  1105                                                          db      13,10,0
  1106                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1107                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1108                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1109                                                          db      13,10,0
  1110                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1111                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1112                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1113                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1114                                                          db      13,10,"is properly inserted in the diskette drive."
  1115                                                          db      13,10,0
  1116                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1117                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1118                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1119                                                          db      13,10,0
  1120                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1121                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1122                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1123                                                          db      13,10,0
  1124                                  wcPrepInBuf             equ     $
  1125                                  %endif
  1126                                  %ifdef BUILDDISK
  1127                                  ;=======================================================================================================================
  1128                                  ;
  1129                                  ;       File Allocation Tables
  1130                                  ;
  1131                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1132                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1133                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1134                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1135                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1136                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1137                                  ;       the last cluster in the chain.
  1138                                  ;
  1139                                  ;       Every three bytes encode two FAT entries as follows:
  1140                                  ;
  1141                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1142                                  ;
  1143                                  ;=======================================================================================================================
  1144                                  ;-----------------------------------------------------------------------------------------------------------------------
  1145                                  ;
  1146                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1147                                  ;
  1148                                  ;-----------------------------------------------------------------------------------------------------------------------
  1149                                  section                 fat1                                                    ;first copy of FAT
  1150                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1151                                                          db      005h,060h,000h, 007h,080h,000h
  1152                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1153                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1154                                                          db      011h,020h,001h, 013h,040h,001h
  1155                                                          db      015h,060h,001h, 017h,080h,001h
  1156                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1157                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1158                                                          db      021h,020h,002h, 023h,040h,002h
  1159                                                          db      025h,060h,002h, 027h,080h,002h
  1160                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1161                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1162                                  ;-----------------------------------------------------------------------------------------------------------------------
  1163                                  ;
  1164                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1165                                  ;
  1166                                  ;-----------------------------------------------------------------------------------------------------------------------
  1167                                  section                 fat2                                                    ;second copy of FAT
  1168                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1169                                                          db      005h,060h,000h, 007h,080h,000h
  1170                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1171                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1172                                                          db      011h,020h,001h, 013h,040h,001h
  1173                                                          db      015h,060h,001h, 017h,080h,001h
  1174                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1175                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1176                                                          db      021h,020h,002h, 023h,040h,002h
  1177                                                          db      025h,060h,002h, 027h,080h,002h
  1178                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1179                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1180                                  ;-----------------------------------------------------------------------------------------------------------------------
  1181                                  ;
  1182                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1183                                  ;
  1184                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1185                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1186                                  ;       copy.
  1187                                  ;
  1188                                  ;-----------------------------------------------------------------------------------------------------------------------
  1189                                  section                 dir                                                     ;diskette directory
  1190                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1191                                                          db      020h                                            ;attribute (archive bit set)
  1192                                                          times   10 db 0                                         ;unused
  1193                                                          dw      0h                                              ;time
  1194                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1195                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1196                                                          dw      2                                               ;first cluster
  1197                                                          dd      05400h                                          ;file size
  1198                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1199                                  %endif
  1200                                  %ifdef BUILDCOM
  1201                                  ;=======================================================================================================================
  1202                                  ;
  1203                                  ;       OS.COM
  1204                                  ;
  1205                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1206                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1207                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1208                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1209                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1210                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1211                                  ;
  1212                                  ;       Our loader addressability is set up according to the following diagram.
  1213                                  ;
  1214                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1215                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1216                                  ;                               |  256 = 100h bytes                             |
  1217                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1218                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1219                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1220                                  ;                       007e00  +-----------------------------------------------+
  1221                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1222                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1223                                  ;                               |                                               |
  1224                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1225                                  ;                               |                                               |
  1226                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1227                                  ;                               |  Loader Code                                  |
  1228                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1229                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1230                                  ;
  1231                                  ;=======================================================================================================================
  1232                                  ;-----------------------------------------------------------------------------------------------------------------------
  1233                                  ;
  1234                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1235                                  ;
  1236                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1237                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1238                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1239                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1240                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1241                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1242                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1243                                  ;       registers.
  1244                                  ;
  1245                                  ;-----------------------------------------------------------------------------------------------------------------------
  1246                                                          cpu     8086                                            ;assume minimal CPU
  1247                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1248                                                          bits    16                                              ;this is 16-bit code
  1249                                  Loader                  push    cs                                              ;use the code segment
  1250                                                          pop     ds                                              ;...as our data segment
  1251                                                          push    cs                                              ;use the code segment
  1252                                                          pop     es                                              ;...as our extra segment
  1253                                  ;
  1254                                  ;       Write a message to the console so we know we have our addressability established.
  1255                                  ;
  1256                                                          mov     si,czStartingMsg                                ;starting message
  1257                                                          call    PutTTYString                                    ;display loader message
  1258                                  ;
  1259                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1260                                  ;
  1261                                                          call    GetCPUType                                      ;AL = cpu type
  1262                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1263                                                          cmp     al,3                                            ;80386+?
  1264                                                          jb      LoaderExit                                      ;no, exit with error message
  1265                                                          cpu     386                                             ;allow 80386 instructions
  1266                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1267                                                          call    PutTTYString                                    ;display message
  1268                                  ;
  1269                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1270                                  ;
  1271                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1272                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1273                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1274                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1275                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1276                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1277                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1278                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1279                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1280                                                          call    PutTTYString                                    ;display message
  1281                                  ;
  1282                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1283                                  ;
  1284                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1285                                                          pop     es                                              ;... as target segment
  1286                                                          xor     di,di                                           ;ES:DI = target address
  1287                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1288                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1289                                                          cld                                                     ;forward strings
  1290                                                          rep     movsb                                           ;copy kernel image
  1291                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1292                                                          call    PutTTYString                                    ;display message
  1293                                  ;
  1294                                  ;       Switch to protected mode.
  1295                                  ;
  1296                                                          xor     si,si                                           ;ES:SI = gdt addr
  1297                                                          mov     ss,si                                           ;protected mode ss
  1298                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1299                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1300                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1301                                                          mov     dx,001Fh                                        ;outer delay loop count
  1302                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1303                                                          loop    $                                               ;wait out pending interrupts
  1304                                                          dec     dx                                              ;restore outer loop count
  1305                                                          jnz     .10                                             ;continue outer loop
  1306                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1307                                  ;
  1308                                  ;       Enable hardware and maskable interrupts.
  1309                                  ;
  1310                                                          xor     al,al                                           ;enable all registers code
  1311                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1312                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1313                                                          sti                                                     ;enable maskable interrupts
  1314                                  ;
  1315                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1316                                  ;
  1317                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1318                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1319                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1320                                  ;-----------------------------------------------------------------------------------------------------------------------
  1321                                  ;
  1322                                  ;       Routine:        LoaderExit
  1323                                  ;
  1324                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1325                                  ;
  1326                                  ;       In:             DS:SI   string address
  1327                                  ;
  1328                                  ;-----------------------------------------------------------------------------------------------------------------------
  1329                                  LoaderExit              call    PutTTYString                                    ;display error message
  1330                                  ;
  1331                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1332                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1333                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1334                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1335                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1336                                  ;
  1337                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1338                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1339                                                          jnz     .40                                             ;exit if key pressed
  1340                                                          sti                                                     ;enable maskable interrupts
  1341                                                          hlt                                                     ;wait for interrupt
  1342                                                          jmp     .30                                             ;repeat until keypress
  1343                                  ;
  1344                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1345                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1346                                  ;       HLT until the system resets.
  1347                                  ;
  1348                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1349                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1350                                  .50                     sti                                                     ;enable maskable interrupts
  1351                                                          hlt                                                     ;stop until reset, int, nmi
  1352                                                          jmp     .50                                             ;loop until restart kicks in
  1353                                  ;-----------------------------------------------------------------------------------------------------------------------
  1354                                  ;
  1355                                  ;       Routine:        GetCPUType
  1356                                  ;
  1357                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1358                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1359                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1360                                  ;
  1361                                  ;       Out:            AX      0 = 808x, v20, etc.
  1362                                  ;                               1 = 80186
  1363                                  ;                               2 = 80286
  1364                                  ;                               3 = 80386
  1365                                  ;
  1366                                  ;-----------------------------------------------------------------------------------------------------------------------
  1367                                  GetCPUType              mov     al,1                                            ;AL = 1
  1368                                                          mov     cl,32                                           ;shift count
  1369                                                          shr     al,cl                                           ;try a 32-bit shift
  1370                                                          or      al,al                                           ;did the shift happen?
  1371                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1372                                                          cpu     186
  1373                                                          push    sp                                              ;save stack pointer
  1374                                                          pop     cx                                              ;...into cx
  1375                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1376                                                          jne     .10                                             ;yes, cpu is 80186
  1377                                                          cpu     286
  1378                                                          inc     ax                                              ;AX = 2
  1379                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1380                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1381                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1382                                                          jz      .10                                             ;yes, cpu is 80286
  1383                                                          inc     ax                                              ;AX = 3
  1384                                  .10                     ret                                                     ;return
  1385                                  ;-----------------------------------------------------------------------------------------------------------------------
  1386                                  ;
  1387                                  ;       Routine:        PutTTYString
  1388                                  ;
  1389                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1390                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1391                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1392                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1393                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1394                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1395                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1396                                  ;                       to LODSB is not needed.
  1397                                  ;
  1398                                  ;       In:             DS:SI   address of string
  1399                                  ;
  1400                                  ;       Out:            DF      0
  1401                                  ;                       ZF      1
  1402                                  ;                       AL      0
  1403                                  ;
  1404                                  ;-----------------------------------------------------------------------------------------------------------------------
  1405                                  PutTTYString            cld                                                     ;forward strings
  1406                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1407                                                          test    al,al                                           ;end of string?
  1408                                                          jz      .20                                             ;... yes, exit our loop
  1409                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1410                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1411                                                          jmp     .10                                             ;repeat until done
  1412                                  .20                     ret                                                     ;return
  1413                                  ;-----------------------------------------------------------------------------------------------------------------------
  1414                                  ;
  1415                                  ;       Loader Data
  1416                                  ;
  1417                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1418                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1419                                  ;
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                                          align   2
  1422                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1423                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1424                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1425                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1426                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1427                                                          db      "Please press any key to restart the computer.",13,10,0
  1428                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1429                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1430                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1431                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1432                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1433                                  ;=======================================================================================================================
  1434                                  ;
  1435                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1436                                  ;
  1437                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1438                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1439                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1440                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1441                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1442                                  ;
  1443                                  ;=======================================================================================================================
  1444                                  ;=======================================================================================================================
  1445                                  ;
  1446                                  ;       Kernel Tables
  1447                                  ;
  1448                                  ;=======================================================================================================================
  1449                                  ;-----------------------------------------------------------------------------------------------------------------------
  1450                                  ;
  1451                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1452                                  ;
  1453                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1454                                  ;       first descriptor must be all nulls.
  1455                                  ;
  1456                                  ;       6   5         4         3         2         1         0
  1457                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1458                                  ;       ----------------------------------------------------------------
  1459                                  ;       h......hffffmmmma......ab......................bn..............n
  1460                                  ;       00000000                        all areas have base addresses below 2^24
  1461                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1462                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1463                                  ;                   1001                present, ring-0, selector
  1464                                  ;
  1465                                  ;       h...h   hi-order base address (bits 24-31)
  1466                                  ;       ffff    flags
  1467                                  ;       mmmm    hi-order limit (bits 16-19)
  1468                                  ;       a...a   access
  1469                                  ;       b...b   lo-order base address (bits 0-23)
  1470                                  ;       n...n   lo-order limit (bits 0-15)
  1471                                  ;
  1472                                  ;-----------------------------------------------------------------------------------------------------------------------
  1473                                  section                 gdt                                                     ;global descriptor table
  1474                                                          dq      0000000000000000h                               ;00 required null selector
  1475                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1476                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1477                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1478                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1479                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1480                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1481                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1482                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1483                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1484                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1485                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1486                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1487                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1488                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  ;
  1491                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1492                                  ;
  1493                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1494                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1495                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1496                                  ;
  1497                                  ;       6   5         4         3         2         1         0
  1498                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1499                                  ;       ----------------------------------------------------------------
  1500                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1501                                  ;
  1502                                  ;       h...h   high-order offset (bits 16-31)
  1503                                  ;       P       present (0=unused interrupt)
  1504                                  ;       zz      descriptor privilege level
  1505                                  ;       S       storage segment (must be zero for IDT)
  1506                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1507                                  ;       S...S   handling code selector in GDT
  1508                                  ;       l...l   lo-order offset (bits 0-15)
  1509                                  ;
  1510                                  ;-----------------------------------------------------------------------------------------------------------------------
  1511                                  section                 idt                                                     ;interrupt descriptor table
  1512                                                          mint    dividebyzero                                    ;00 divide by zero
  1513                                                          mint    singlestep                                      ;01 single step
  1514                                                          mint    nmi                                             ;02 non-maskable
  1515                                                          mint    break                                           ;03 break
  1516                                                          mint    into                                            ;04 into
  1517                                                          mint    bounds                                          ;05 bounds
  1518                                                          mint    badopcode                                       ;06 bad op code
  1519                                                          mint    nocoproc                                        ;07 no coprocessor
  1520                                                          mint    doublefault                                     ;08 double-fault
  1521                                                          mint    operand                                         ;09 operand
  1522                                                          mint    badtss                                          ;0a bad TSS
  1523                                                          mint    notpresent                                      ;0b not-present
  1524                                                          mint    stacklimit                                      ;0c stack limit
  1525                                                          mint    protection                                      ;0d general protection fault
  1526                                                          mint    int14                                           ;0e (reserved)
  1527                                                          mint    int15                                           ;0f (reserved)
  1528                                                          mint    coproccalc                                      ;10 (reserved)
  1529                                                          mint    int17                                           ;11 (reserved)
  1530                                                          mint    int18                                           ;12 (reserved)
  1531                                                          mint    int19                                           ;13 (reserved)
  1532                                                          mint    int20                                           ;14 (reserved)
  1533                                                          mint    int21                                           ;15 (reserved)
  1534                                                          mint    int22                                           ;16 (reserved)
  1535                                                          mint    int23                                           ;17 (reserved)
  1536                                                          mint    int24                                           ;18 (reserved)
  1537                                                          mint    int25                                           ;19 (reserved)
  1538                                                          mint    int26                                           ;1a (reserved)
  1539                                                          mint    int27                                           ;1b (reserved)
  1540                                                          mint    int28                                           ;1c (reserved)
  1541                                                          mint    int29                                           ;1d (reserved)
  1542                                                          mint    int30                                           ;1e (reserved)
  1543                                                          mint    int31                                           ;1f (reserved)
  1544                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1545                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1546                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1547                                                          mtrap   com2                                            ;23 IRQ3 com2
  1548                                                          mtrap   com1                                            ;24 IRQ4 com1
  1549                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1550                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1551                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1552                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1553                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1554                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1555                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1556                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1557                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1558                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1559                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1560                                                          mtrap   svc                                             ;30 OS services
  1561                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1562                                  ;=======================================================================================================================
  1563                                  ;
  1564                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1565                                  ;
  1566                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1567                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1568                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1569                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1570                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1571                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1572                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1573                                  ;
  1574                                  ;=======================================================================================================================
  1575                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1576                                                          cpu     386                                             ;allow 80386 instructions
  1577                                                          bits    32                                              ;this is 32-bit code
  1578                                  ;=======================================================================================================================
  1579                                  ;
  1580                                  ;       CPU Interrupt Handlers
  1581                                  ;
  1582                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1583                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1584                                  ;
  1585                                  ;=======================================================================================================================
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                  ;
  1588                                  ;       INT0    Divide By Zero
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                                          menter  dividebyzero                                    ;divide by zero
  1592                                                          push    0                                               ;store interrupt nbr
  1593                                                          push    czIntDivideByZero                               ;store message offset
  1594                                                          jmp     ReportInterrupt                                 ;report interrupt
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                  ;
  1597                                  ;       INT1    Single Step
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                                          menter  singlestep                                      ;single step
  1601                                                          push    1                                               ;store interrupt nbr
  1602                                                          push    czIntSingleStep                                 ;store message offset
  1603                                                          jmp     ReportInterrupt                                 ;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;       INT2    Non-Maskable Interrupt
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                                          menter  nmi                                             ;non-maskable
  1610                                                          push    2                                               ;store interrupt nbr
  1611                                                          push    czIntNonMaskable                                ;store message offset
  1612                                                          jmp     ReportInterrupt                                 ;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;       INT3    Break
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                                          menter  break                                           ;break
  1619                                                          push    3                                               ;store interrupt nbr
  1620                                                          push    czIntBreak                                      ;store message offset
  1621                                                          jmp     ReportInterrupt                                 ;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;       INT4    Into
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                                          menter  into                                            ;into
  1628                                                          push    4                                               ;store interrupt nbr
  1629                                                          push    czIntInto                                       ;store message offset
  1630                                                          jmp     ReportInterrupt                                 ;report interrupt
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;       INT5    Bounds
  1634                                  ;
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                                          menter  bounds                                          ;bounds
  1637                                                          push    5                                               ;store interrupt nbr
  1638                                                          push    czIntBounds                                     ;store message offset
  1639                                                          jmp     ReportInterrupt                                 ;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;       INT6    Bad Operation Code
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                                          menter  badopcode                                       ;bad opcode interrupt
  1646                                                          push    6                                               ;store interrupt nbr
  1647                                                          push    czIntBadOpCode                                  ;store message offset
  1648                                                          jmp     ReportInterrupt                                 ;report interrupt
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;       INT7    No Coprocessor
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1655                                                          push    7                                               ;store interrupt nbr
  1656                                                          push    czIntNoCoprocessor                              ;store message offset
  1657                                                          jmp     ReportInterrupt                                 ;report interrupt
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  ;
  1660                                  ;       INT8    Double Fault
  1661                                  ;
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                                          menter  doublefault                                     ;doublefault interrupt
  1664                                                          push    8                                               ;store interrupt nbr
  1665                                                          push    czIntDoubleFault                                ;store message offset
  1666                                                          jmp     ReportInterrupt                                 ;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;       INT9    Operand
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                                          menter  operand                                         ;operand interrupt
  1673                                                          push    9                                               ;store interrupt nbr
  1674                                                          push    czIntOperand                                    ;store message offset
  1675                                                          jmp     ReportInterrupt                                 ;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;       INT10   Bad Task State Segment
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                                          menter  badtss                                          ;bad TSS interrupt
  1682                                                          push    10                                              ;store interrupt nbr
  1683                                                          push    czIntBadTSS                                     ;store message offset
  1684                                                          jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT11   Not Present
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  notpresent                                      ;not present interrupt
  1691                                                          push    11                                              ;store interrupt nbr
  1692                                                          push    czIntNotPresent                                 ;store message offset
  1693                                                          jmp     ReportInterrupt                                 ;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;       INT12   Stack Limit
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                                          menter  stacklimit                                      ;stack limit interrupt
  1700                                                          push    12                                              ;store interrupt nbr
  1701                                                          push    czIntStackLimit                                 ;store message offset
  1702                                                          jmp     ReportInterrupt                                 ;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;       INT13   General Protection Fault
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                                          menter  protection                                      ;protection fault interrupt
  1709                                                          push    13                                              ;store interrupt nbr
  1710                                                          push    czIntProtection                                 ;store message offset
  1711                                                          jmp     ReportInterrupt                                 ;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;       INT14   Reserved
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                                          menter  int14                                           ;(reserved)
  1718                                                          push    14                                              ;store interrupt nbr
  1719                                                          push    czIntReserved                                   ;store message offset
  1720                                                          jmp     ReportInterrupt                                 ;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;       INT15   Reserved
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                                          menter  int15                                           ;(reserved)
  1727                                                          push    15                                              ;store interrupt nbr
  1728                                                          push    czIntReserved                                   ;store message offset
  1729                                                          jmp     ReportInterrupt                                 ;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;       INT16   Coprocessor Calculation
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                                          menter  coproccalc                                      ;coprocessor calculation
  1736                                                          push    16                                              ;store interrupt nbr
  1737                                                          push    czIntCoprocessorCalc                            ;store message offset
  1738                                                          jmp     ReportInterrupt                                 ;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;       INT17   Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                                          menter  int17                                           ;(reserved)
  1745                                                          push    17                                              ;store interrupt nbr
  1746                                                          push    czIntReserved                                   ;store message offset
  1747                                                          jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT18   Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  int18                                           ;(reserved)
  1754                                                          push    18                                              ;store interrupt nbr
  1755                                                          push    czIntReserved                                   ;store message offset
  1756                                                          jmp     ReportInterrupt                                 ;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;       INT19   Reserved
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                                          menter  int19                                           ;(reserved)
  1763                                                          push    19                                              ;store interrupt nbr
  1764                                                          push    czIntReserved                                   ;store message offset
  1765                                                          jmp     ReportInterrupt                                 ;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;       INT20   Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                                          menter  int20                                           ;(reserved)
  1772                                                          push    20                                              ;store interrupt nbr
  1773                                                          push    czIntReserved                                   ;store message offset
  1774                                                          jmp     ReportInterrupt                                 ;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;       INT21   Reserved
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                                          menter  int21                                           ;(reserved)
  1781                                                          push    21                                              ;store interrupt nbr
  1782                                                          push    czIntReserved                                   ;store message offset
  1783                                                          jmp     ReportInterrupt                                 ;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;       INT22   Reserved
  1787                                  ;
  1788                                  ;-----------------------------------------------------------------------------------------------------------------------
  1789                                                          menter  int22                                           ;(reserved)
  1790                                                          push    22                                              ;store interrupt nbr
  1791                                                          push    czIntReserved                                   ;store message offset
  1792                                                          jmp     ReportInterrupt                                 ;report interrupt
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;
  1795                                  ;       INT23   Reserved
  1796                                  ;
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                                          menter  int23                                           ;(reserved)
  1799                                                          push    23                                              ;store interrupt nbr
  1800                                                          push    czIntReserved                                   ;store message offset
  1801                                                          jmp     ReportInterrupt                                 ;report interrupt
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  ;
  1804                                  ;       INT24   Reserved
  1805                                  ;
  1806                                  ;-----------------------------------------------------------------------------------------------------------------------
  1807                                                          menter  int24                                           ;(reserved)
  1808                                                          push    24                                              ;store interrupt nbr
  1809                                                          push    czIntReserved                                   ;store message offset
  1810                                                          jmp     ReportInterrupt                                 ;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       INT25   Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                                          menter  int25                                           ;(reserved)
  1817                                                          push    25                                              ;store interrupt nbr
  1818                                                          push    czIntReserved                                   ;store message offset
  1819                                                          jmp     ReportInterrupt                                 ;report interrupt
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                  ;
  1822                                  ;       INT26   Reserved
  1823                                  ;
  1824                                  ;-----------------------------------------------------------------------------------------------------------------------
  1825                                                          menter  int26                                           ;(reserved)
  1826                                                          push    26                                              ;store interrupt nbr
  1827                                                          push    czIntReserved                                   ;store message offset
  1828                                                          jmp     ReportInterrupt                                 ;report interrupt
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                  ;
  1831                                  ;       INT27   Reserved
  1832                                  ;
  1833                                  ;-----------------------------------------------------------------------------------------------------------------------
  1834                                                          menter  int27                                           ;(reserved)
  1835                                                          push    27                                              ;store interrupt nbr
  1836                                                          push    czIntReserved                                   ;store message offset
  1837                                                          jmp     ReportInterrupt                                 ;report interrupt
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                  ;
  1840                                  ;       INT28   Reserved
  1841                                  ;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                                          menter  int28                                           ;(reserved)
  1844                                                          push    28                                              ;store interrupt nbr
  1845                                                          push    czIntReserved                                   ;store message offset
  1846                                                          jmp     ReportInterrupt                                 ;report interrupt
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                  ;
  1849                                  ;       INT29   Reserved
  1850                                  ;
  1851                                  ;-----------------------------------------------------------------------------------------------------------------------
  1852                                                          menter  int29                                           ;(reserved)
  1853                                                          push    29                                              ;store interrupt nbr
  1854                                                          push    czIntReserved                                   ;store message offset
  1855                                                          jmp     ReportInterrupt                                 ;report interrupt
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  ;
  1858                                  ;       INT30   Reserved
  1859                                  ;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                                          menter  int30                                           ;(reserved)
  1862                                                          push    30                                              ;store interrupt nbr
  1863                                                          push    czIntReserved                                   ;store message offset
  1864                                                          jmp     ReportInterrupt                                 ;report interrupt
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                  ;
  1867                                  ;       INT31   Reserved
  1868                                  ;
  1869                                  ;-----------------------------------------------------------------------------------------------------------------------
  1870                                                          menter  int31                                           ;(reserved)
  1871                                                          push    31                                              ;store interrupt nbr
  1872                                                          push    czIntReserved                                   ;store message offset
  1873                                                          jmp     ReportInterrupt                                 ;report interrupt
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                  ;
  1876                                  ;       Routine:        ReportInterrupt
  1877                                  ;
  1878                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1879                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1880                                  ;
  1881                                  ;       In:             [esp+16]        eflags                                  stored by interrupt call
  1882                                  ;                       [esp+12]        cs                                      stored by interrupt call
  1883                                  ;                       [esp+8]         eip                                     stored by interrupt call
  1884                                  ;                       [esp+4]         interrupt number (0-31)                 stored by push instruction
  1885                                  ;                       [esp+0]         error message address                   stored by push instructions
  1886                                  ;
  1887                                  ;       Out:            N/A             This routine does not exit.
  1888                                  ;
  1889                                  ;-----------------------------------------------------------------------------------------------------------------------
  1890                                  ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1891                                                          push    es                                              ;save ES at time of interrupt
  1892                                                          pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1893                                                          mov     ebp,esp                                         ;ebp --> [EDI]
  1894                                  ;
  1895                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1896                                  ;
  1897                                  ;                       [ebp+56]        eflags
  1898                                  ;                       [ebp+52]        cs
  1899                                  ;                       [ebp+48]        eip
  1900                                  ;                       [ebp+44]        interrupt number (0-31)
  1901                                  ;                       [ebp+40]        error message address
  1902                                  ;                       [ebp+36]        ds
  1903                                  ;                       [ebp+32]        es
  1904                                  ;                       [ebp+28]        eax
  1905                                  ;                       [ebp+24]        ecx
  1906                                  ;                       [ebp+20]        edx
  1907                                  ;                       [ebp+16]        ebx
  1908                                  ;                       [ebp+12]        esp
  1909                                  ;                       [ebp+8]         ebp
  1910                                  ;                       [ebp+4]         esi
  1911                                  ;                       [ebp+0]         edi
  1912                                  ;
  1913                                                          push    cs                                              ;load code selector ...
  1914                                                          pop     ds                                              ;... into DS
  1915                                                          push    EGDTCGA                                         ;load CGA memory selector ...
  1916                                                          pop     es                                              ;... into ES
  1917                                  ;
  1918                                  ;       Display the interrupt report boundary box
  1919                                  ;
  1920                                                          mov     cl,13                                           ;column
  1921                                                          mov     ch,6                                            ;row
  1922                                                          mov     dl,50                                           ;width
  1923                                                          mov     dh,8                                            ;height
  1924                                                          mov     bh,07h                                          ;attribute
  1925                                                          call    DrawTextDialogBox                               ;draw text dialog box
  1926                                  ;
  1927                                  ;       Display the report header
  1928                                  ;
  1929                                                          mov     cl,15                                           ;column
  1930                                                          mov     ch,7                                            ;row
  1931                                                          mov     esi,czIntHeader                                 ;interrupt message header
  1932                                                          call    SetConsoleString                                ;draw text string
  1933                                  ;
  1934                                  ;       Display the interrupt description label
  1935                                  ;
  1936                                                          mov     cl,15                                           ;column
  1937                                                          mov     ch,8                                            ;row
  1938                                                          mov     esi,czIntLabel                                  ;interrupt message description lead
  1939                                                          call    SetConsoleString                                ;draw text string
  1940                                  ;
  1941                                  ;       Display the interrupt number
  1942                                  ;
  1943                                                          mov     eax,[ebp+44]                                    ;interrupt number
  1944                                                          mov     cl,26                                           ;column
  1945                                                          mov     ch,8                                            ;row
  1946                                                          call    PutConsoleHexByte                               ;draw ASCII hex byte
  1947                                  ;
  1948                                  ;       Display the interrupt name
  1949                                  ;
  1950                                                          mov     cl,29                                           ;column
  1951                                                          mov     ch,8                                            ;row
  1952                                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1953                                                          call    SetConsoleString                                ;display interrupt description
  1954                                  ;
  1955                                  ;       Display the register values header
  1956                                  ;
  1957                                                          mov     cl,15                                           ;column
  1958                                                          mov     ch,10                                           ;row
  1959                                                          mov     esi,czIntRegsHeader                             ;interrupt registers header
  1960                                                          call    SetConsoleString                                ;draw text string
  1961                                  ;
  1962                                  ;       Display the EAX register label and value
  1963                                  ;
  1964                                                          mov     cl,15                                           ;column
  1965                                                          mov     ch,11                                           ;row
  1966                                                          mov     esi,czIntEAX                                    ;register EAX label
  1967                                                          call    SetConsoleString                                ;draw label
  1968                                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1969                                                          mov     cl,19                                           ;column
  1970                                                          mov     ch,11                                           ;row
  1971                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1972                                  ;
  1973                                  ;       Display the ECX register label and value
  1974                                  ;
  1975                                                          mov     cl,15                                           ;column
  1976                                                          mov     ch,12                                           ;row
  1977                                                          mov     esi,czIntECX                                    ;label
  1978                                                          call    SetConsoleString                                ;draw label
  1979                                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  1980                                                          mov     cl,19                                           ;column
  1981                                                          mov     ch,12                                           ;row
  1982                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1983                                  ;
  1984                                  ;       Display the EDX register label and value
  1985                                  ;
  1986                                                          mov     cl,15                                           ;column
  1987                                                          mov     ch,13                                           ;row
  1988                                                          mov     esi,czIntEDX                                    ;label
  1989                                                          call    SetConsoleString                                ;draw label
  1990                                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  1991                                                          mov     cl,19                                           ;column
  1992                                                          mov     ch,13                                           ;row
  1993                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1994                                  ;
  1995                                  ;       Display the EBX register label and value
  1996                                  ;
  1997                                                          mov     cl,15                                           ;column
  1998                                                          mov     ch,14                                           ;row
  1999                                                          mov     esi,czIntEBX                                    ;label
  2000                                                          call    SetConsoleString                                ;draw label
  2001                                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2002                                                          mov     cl,19                                           ;column
  2003                                                          mov     ch,14                                           ;row
  2004                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2005                                  ;
  2006                                  ;       Display the ESI register label and value
  2007                                  ;
  2008                                                          mov     cl,29                                           ;column
  2009                                                          mov     ch,11                                           ;row
  2010                                                          mov     esi,czIntESI                                    ;label
  2011                                                          call    SetConsoleString                                ;draw label
  2012                                                          mov     eax,[ebp+4]                                     ;ESI
  2013                                                          mov     cl,33                                           ;column
  2014                                                          mov     ch,11                                           ;row
  2015                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2016                                  ;
  2017                                  ;       Display the EDI register label and value
  2018                                  ;
  2019                                                          mov     cl,29                                           ;column
  2020                                                          mov     ch,12                                           ;row
  2021                                                          mov     esi,czIntEDI                                    ;label
  2022                                                          call    SetConsoleString                                ;draw label
  2023                                                          mov     eax,[ebp+0]                                     ;EDI
  2024                                                          mov     cl,33                                           ;column
  2025                                                          mov     ch,12                                           ;row
  2026                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2027                                  ;
  2028                                  ;       Display the EBP register label and value
  2029                                  ;
  2030                                                          mov     cl,29                                           ;column
  2031                                                          mov     ch,13                                           ;row
  2032                                                          mov     esi,czIntEBP                                    ;label
  2033                                                          call    SetConsoleString                                ;draw label
  2034                                                          mov     eax,[ebp+8]                                     ;EBP
  2035                                                          mov     cl,33                                           ;column
  2036                                                          mov     ch,13                                           ;row
  2037                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2038                                  ;
  2039                                  ;       Display the DS register label and value
  2040                                  ;
  2041                                                          mov     cl,42                                           ;column
  2042                                                          mov     ch,11                                           ;row
  2043                                                          mov     esi,czIntDS                                     ;label
  2044                                                          call    SetConsoleString                                ;draw label
  2045                                                          xor     eax,eax                                         ;zero register
  2046                                                          mov     ax,[ebp+36]                                     ;DS
  2047                                                          mov     cl,46                                           ;column
  2048                                                          mov     ch,11                                           ;row
  2049                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2050                                  ;
  2051                                  ;       Display the ES register label and value
  2052                                  ;
  2053                                                          mov     cl,42                                           ;column
  2054                                                          mov     ch,12                                           ;row
  2055                                                          mov     esi,czIntES                                     ;label
  2056                                                          call    SetConsoleString                                ;draw label
  2057                                                          xor     eax,eax                                         ;zero register
  2058                                                          mov     ax,[ebp+32]                                     ;ES
  2059                                                          mov     cl,46                                           ;column
  2060                                                          mov     ch,12                                           ;row
  2061                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2062                                  ;
  2063                                  ;       Display the SS register label and value
  2064                                  ;
  2065                                                          mov     cl,42                                           ;column
  2066                                                          mov     ch,13                                           ;row
  2067                                                          mov     esi,czIntSS                                     ;label
  2068                                                          call    SetConsoleString                                ;draw label
  2069                                                          xor     eax,eax                                         ;zero register
  2070                                                          mov     ax,ss                                           ;SS
  2071                                                          mov     cl,46                                           ;column
  2072                                                          mov     ch,13                                           ;row
  2073                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2074                                  ;
  2075                                  ;       Display the CS register lable and value
  2076                                  ;
  2077                                                          mov     cl,42                                           ;column
  2078                                                          mov     ch,14                                           ;row
  2079                                                          mov     esi,czIntCS                                     ;label
  2080                                                          call    SetConsoleString                                ;draw label
  2081                                                          xor     eax,eax                                         ;zero register
  2082                                                          mov     ax,[ebp+52]                                     ;CS
  2083                                                          mov     cl,46                                           ;column
  2084                                                          mov     ch,14                                           ;row
  2085                                                          call    PutConsoleHexWord                               ;draw ASCII hex word
  2086                                  ;
  2087                                  ;       Display the EFLAGS register label and value
  2088                                  ;
  2089                                                          mov     cl,51                                           ;column
  2090                                                          mov     ch,11                                           ;row
  2091                                                          mov     esi,czIntEFLAGS                                 ;label
  2092                                                          call    SetConsoleString                                ;draw label
  2093                                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2094                                                          mov     cl,55                                           ;column
  2095                                                          mov     ch,11                                           ;row
  2096                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2097                                  ;
  2098                                  ;       Display the ESP register label and value
  2099                                  ;
  2100                                                          mov     cl,51                                           ;column
  2101                                                          mov     ch,13                                           ;row
  2102                                                          mov     esi,czIntESP                                    ;label
  2103                                                          call    SetConsoleString                                ;draw label
  2104                                                          mov     eax,[ebp+12]                                    ;ESP
  2105                                                          mov     cl,55                                           ;column
  2106                                                          mov     ch,13                                           ;row
  2107                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2108                                  ;
  2109                                  ;       Display the EIP register label and value
  2110                                  ;
  2111                                                          mov     cl,51                                           ;column
  2112                                                          mov     ch,14                                           ;row
  2113                                                          mov     esi,czIntEIP                                    ;label
  2114                                                          call    SetConsoleString                                ;draw label
  2115                                                          mov     eax,[ebp+48]                                    ;EIP
  2116                                                          mov     cl,55                                           ;column
  2117                                                          mov     ch,14                                           ;row
  2118                                                          call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2119                                  ;
  2120                                  ;       Halt and loop until reset
  2121                                  ;
  2122                                  .10                     sti                                                     ;enable maskable interrupts
  2123                                                          hlt                                                     ;halt processor
  2124                                                          jmp     .10                                             ;resume on interrupt
  2125                                  ;-----------------------------------------------------------------------------------------------------------------------
  2126                                  ;
  2127                                  ;       Processor Interrupt Name Strings
  2128                                  ;
  2129                                  ;-----------------------------------------------------------------------------------------------------------------------
  2130                                  czIntDivideByZero       db      "Division by zero",0
  2131                                  czIntSingleStep         db      "Single step",0
  2132                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  2133                                  czIntBreak              db      "Break",0
  2134                                  czIntInto               db      "Into",0
  2135                                  czIntBounds             db      "Bounds",0
  2136                                  czIntBadOpCode          db      "Bad Operation Code",0
  2137                                  czIntNoCoprocessor      db      "No Coprocessor",0
  2138                                  czIntDoubleFault        db      "Double Fault",0
  2139                                  czIntOperand            db      "Operand",0
  2140                                  czIntBadTSS             db      "Bad Task State Segment",0
  2141                                  czIntNotPresent         db      "Not Present",0
  2142                                  czIntStackLimit         db      "Stack Limit",0
  2143                                  czIntProtection         db      "General Protection Fault",0
  2144                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2145                                  czIntReserved           db      "Reserved",0
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                  ;
  2148                                  ;       Processor Interrupt Handling Strings
  2149                                  ;
  2150                                  ;-----------------------------------------------------------------------------------------------------------------------
  2151                                  czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2152                                  czIntLabel              db      "Interrupt #",0
  2153                                  czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2154                                  czIntEAX                db      "EAX:",0
  2155                                  czIntECX                db      "ECX:",0
  2156                                  czIntEDX                db      "EDX:",0
  2157                                  czIntEBX                db      "EBX:",0
  2158                                  czIntESI                db      "ESI:",0
  2159                                  czIntEDI                db      "EDI:",0
  2160                                  czIntEBP                db      "EBP:",0
  2161                                  czIntESP                db      "ESP:",0
  2162                                  czIntDS                 db      " DS:",0
  2163                                  czIntES                 db      " ES:",0
  2164                                  czIntSS                 db      " SS:",0
  2165                                  czIntCS                 db      " CS:",0
  2166                                  czIntEFLAGS             db      "FLG:",0
  2167                                  czIntEIP                db      "EIP:",0
  2168                                  ;-----------------------------------------------------------------------------------------------------------------------
  2169                                  ;
  2170                                  ;       Routine:        DrawTextDialogBox
  2171                                  ;
  2172                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2173                                  ;
  2174                                  ;       In:             CL      upper left column (0-79)
  2175                                  ;                       CH      upper left row (0-24)
  2176                                  ;                       DL      column width, excluding border
  2177                                  ;                       DH      row height, excluding border
  2178                                  ;                       BH      color attribute
  2179                                  ;
  2180                                  ;-----------------------------------------------------------------------------------------------------------------------
  2181                                  DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2182                                                          push    esi                                             ;
  2183                                                          push    edi                                             ;
  2184                                                          push    es                                              ;
  2185                                                          push    EGDTCGA                                         ;load CGA selector ...
  2186                                                          pop     es                                              ;... into ES
  2187                                  ;
  2188                                  ;       Compute target display offset
  2189                                  ;
  2190                                                          xor     eax,eax                                         ;zero register
  2191                                                          mov     al,ch                                           ;row
  2192                                                          mov     ah,ECONROWBYTES                                 ;mulitplicand
  2193                                                          mul     ah                                              ;row offset
  2194                                                          add     al,cl                                           ;add column
  2195                                                          adc     ah,0                                            ;add overflow
  2196                                                          add     al,cl                                           ;add column
  2197                                                          adc     ah,0                                            ;add overflow
  2198                                                          mov     edi,eax                                         ;target row offset
  2199                                  ;
  2200                                  ;       Display top border row
  2201                                  ;
  2202                                                          push    edi                                             ;save target row offset
  2203                                                          mov     ah,bh                                           ;attribute
  2204                                                          mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2205                                                          stosw                                                   ;display character and attribute
  2206                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2207                                                          xor     ecx,ecx                                         ;zero register
  2208                                                          mov     cl,dl                                           ;width, excluding border
  2209                                                          rep     stosw                                           ;display horizontal border
  2210                                                          mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2211                                                          stosw                                                   ;display character and attribute
  2212                                                          pop     edi                                             ;restore target row offset
  2213                                                          add     edi,ECONROWBYTES                                ;next row
  2214                                  ;
  2215                                  ;       Display dialog box body rows
  2216                                  ;
  2217                                                          xor     ecx,ecx                                         ;zero register
  2218                                                          mov     cl,dh                                           ;height, excluding border
  2219                                  .10                     push    ecx                                             ;save remaining rows
  2220                                                          push    edi                                             ;save target row offset
  2221                                                          mov     ah,bh                                           ;attribute
  2222                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2223                                                          stosw                                                   ;display character and attribute
  2224                                                          mov     al,EASCIISPACE                                  ;space
  2225                                                          xor     ecx,ecx                                         ;zero register
  2226                                                          mov     cl,dl                                           ;width, excluding border
  2227                                                          rep     stosw                                           ;display row
  2228                                                          mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2229                                                          stosw                                                   ;display character and attribute
  2230                                                          pop     edi                                             ;restore target row offset
  2231                                                          add     edi,ECONROWBYTES                                ;next row
  2232                                                          pop     ecx                                             ;remaining rows
  2233                                                          loop    .10                                             ;next row
  2234                                  ;
  2235                                  ;       Display bottom border row
  2236                                  ;
  2237                                                          push    edi                                             ;save target row offset
  2238                                                          mov     ah,bh                                           ;attribute
  2239                                                          mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2240                                                          stosw                                                   ;display character and attribute
  2241                                                          mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2242                                                          xor     ecx,ecx                                         ;zero register
  2243                                                          mov     cl,dl                                           ;width, excluding border
  2244                                                          rep     stosw                                           ;display horizontal border
  2245                                                          mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2246                                                          stosw                                                   ;display character and attribute
  2247                                                          pop     edi                                             ;restore target row offset
  2248                                                          add     edi,ECONROWBYTES                                ;next row
  2249                                  ;
  2250                                  ;       Restore and return
  2251                                  ;
  2252                                                          pop     es                                              ;restore non-volatile regs
  2253                                                          pop     edi                                             ;
  2254                                                          pop     esi                                             ;
  2255                                                          pop     ecx                                             ;
  2256                                                          ret                                                     ;return
  2257                                  ;=======================================================================================================================
  2258                                  ;
  2259                                  ;       Hardware Device Interupts
  2260                                  ;
  2261                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2262                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2263                                  ;       (BX=2028h).
  2264                                  ;
  2265                                  ;=======================================================================================================================
  2266                                  ;-----------------------------------------------------------------------------------------------------------------------
  2267                                  ;
  2268                                  ;       IRQ0    Clock Tick Interrupt
  2269                                  ;
  2270                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2271                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2272                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2273                                  ;
  2274                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2275                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2276                                  ;
  2277                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2278                                  ;       zero, the floppy disk motors are turned off.
  2279                                  ;
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                                          menter  clocktick                                       ;clock tick interrupt
  2282                                                          push    eax                                             ;save modified regs
  2283                                                          push    edx                                             ;
  2284                                                          push    ds                                              ;
  2285                                  ;
  2286                                  ;       Update the clock tick count and the elapsed days as needed.
  2287                                  ;
  2288                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2289                                                          pop     ds                                              ;... into data segment register
  2290                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2291                                                          inc     eax                                             ;increment clock ticks
  2292                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2293                                                          jb      irq0.10                                         ;no, skip ahead
  2294                                                          inc     byte [wbClockDays]                              ;increment clock days
  2295                                                          xor     eax,eax                                         ;reset clock ticks
  2296                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2297                                  ;
  2298                                  ;       Decrement floppy disk motor timeout.
  2299                                  ;
  2300                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2301                                                          je      irq0.20                                         ;yes, skip ahead
  2302                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2303                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  2304                                  ;
  2305                                  ;       Turn off the floppy disk motor if appropriate.
  2306                                  ;
  2307                                                          sti                                                     ;enable maskable interrupts
  2308                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2309                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2310                                                          in      al,dx                                           ;FDC main status byte
  2311                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2312                                                          jnz     irq0.15                                         ;wait while busy
  2313                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2314                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  2315                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  2316                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2317                                                          out     dx,al                                           ;turn motor off
  2318                                  ;
  2319                                  ;       Signal the end of the hardware interrupt.
  2320                                  ;
  2321                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2322                                  ;
  2323                                  ;       Restore and return.
  2324                                  ;
  2325                                                          pop     ds                                              ;restore modified regs
  2326                                                          pop     edx                                             ;
  2327                                                          pop     eax                                             ;
  2328                                                          iretd                                                   ;return
  2329                                  ;-----------------------------------------------------------------------------------------------------------------------
  2330                                  ;
  2331                                  ;       IRQ1    Keyboard Interrupt
  2332                                  ;
  2333                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2334                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2335                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2336                                  ;       ALL modified registers upon return.
  2337                                  ;
  2338                                  ;-----------------------------------------------------------------------------------------------------------------------
  2339                                                          menter  keyboard                                        ;keyboard interrrupt
  2340                                                          push    eax                                             ;save non-volatile regs
  2341                                                          push    ebx                                             ;
  2342                                                          push    ecx                                             ;
  2343                                                          push    esi                                             ;
  2344                                                          push    ds                                              ;
  2345                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2346                                                          pop     ds                                              ;... into data segment register
  2347                                                          xor     al,al                                           ;zero
  2348                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2349                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2350                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2351                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2352                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2353                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2354                                                          mov     al,' '                                          ;space
  2355                                                          mov     [wbConsoleChar],al                              ;set character to space
  2356                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2357                                                          not     al                                              ;controller timeout mask
  2358                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2359                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2360                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2361                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2362                                                          jz      irq1.140                                        ;yes, skip ahead
  2363                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2364                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2365                                                          mov     ah,al                                           ;copy scan code 0
  2366                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2367                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2368                                                          je      irq1.30                                         ;yes, set flag
  2369                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2370                                                          je      irq1.40                                         ;yes, reset flag
  2371                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2372                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2373                                                          je      irq1.30                                         ;yes, set flag
  2374                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2375                                                          je      irq1.40                                         ;yes, reset flag
  2376                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2377                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2378                                                          je      irq1.30                                         ;yes, set flag
  2379                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2380                                                          je      irq1.40                                         ;yes, reset flag
  2381                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2382                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2383                                                          je      irq1.30                                         ;yes, set flag
  2384                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2385                                                          je      irq1.40                                         ;yes, reset flag
  2386                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2387                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2388                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2389                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2390                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2391                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2392                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2393                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2394                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2395                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2396                                                          jne     irq1.70                                         ;no, skip ahead
  2397                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2398                                                          jz      irq1.140                                        ;yes, skip ahead
  2399                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2400                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2401                                                          mov     ah,al                                           ;copy scan code 1
  2402                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2403                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2404                                                          je      irq1.30                                         ;yes, set flag
  2405                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2406                                                          je      irq1.40                                         ;yes, reset flag
  2407                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2408                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2409                                                          je      irq1.30                                         ;yes, set flag
  2410                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2411                                                          je      irq1.40                                         ;yes, reset flag
  2412                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2413                                                          je      irq1.80                                         ;yes, skip ahead
  2414                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2415                                                          je      irq1.80                                         ;yes, skip ahead
  2416                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2417                                                          je      irq1.10                                         ;yes, continue
  2418                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2419                                                          jne     irq1.20                                         ;no, skip ahead
  2420                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2421                                                          jz      irq1.140                                        ;yes, skip ahead
  2422                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2423                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2424                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2425                                                          jz      irq1.140                                        ;yes, skip ahead
  2426                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2427                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2428                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2429                                  irq1.30                 or      bl,al                                           ;set shift flag
  2430                                                          jmp     irq1.60                                         ;skip ahead
  2431                                  irq1.40                 not     al                                              ;convert flag to mask
  2432                                                          and     bl,al                                           ;reset shift flag
  2433                                                          jmp     irq1.60                                         ;skip ahead
  2434                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2435                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2436                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2437                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2438                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2439                                                          jmp     irq1.150                                        ;finish keyboard handling
  2440                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2441                                                          jne     irq1.80                                         ;no continue
  2442                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2443                                                          jz      irq1.140                                        ;yes, skip ahead
  2444                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2445                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2446                                                          mov     ah,al                                           ;copy scan code 1
  2447                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2448                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2449                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2450                                                          jz      irq1.140                                        ;yes, skip ahead
  2451                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2452                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2453                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2454                                                          jz      irq1.140                                        ;yes, skip ahead
  2455                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2456                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2457                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2458                                                          jz      irq1.140                                        ;yes, skip ahead
  2459                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2460                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2461                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2462                                                          jz      irq1.140                                        ;yes, skip ahead
  2463                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2464                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2465                                                          jmp     irq1.150                                        ;continue
  2466                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2467                                                          test    ah,EKEYBUP                                      ;release code?
  2468                                                          jnz     irq1.130                                        ;yes, skip ahead
  2469                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2470                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2471                                                          jz      irq1.90                                         ;no, skip ahead
  2472                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2473                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2474                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2475                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2476                                                          jz      irq1.100                                        ;no skip ahead
  2477                                                          mov     cl,al                                           ;copy ASCII code
  2478                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2479                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2480                                                          jb      irq1.100                                        ;yes, skip ahead
  2481                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2482                                                          ja      irq1.100                                        ;yes, skip ahead
  2483                                                          xor     al,EASCIICASE                                   ;switch case
  2484                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2485                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2486                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2487                                                          jz      irq1.120                                        ;no, skip ahead
  2488                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2489                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2490                                                          or      edx,eax                                         ;msg id and codes
  2491                                                          xor     ecx,ecx                                         ;null param
  2492                                                          push    eax                                             ;save codes
  2493                                                          call    PutMessage                                      ;put message to console
  2494                                                          pop     eax                                             ;restore codes
  2495                                                          test    al,al                                           ;ASCII translation?
  2496                                                          jz      irq1.130                                        ;no, skip ahead
  2497                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2498                                                          and     eax,0FFFFh                                      ;clear high-order word
  2499                                                          or      edx,eax                                         ;msg id and codes
  2500                                                          xor     ecx,ecx                                         ;null param
  2501                                                          call    PutMessage                                      ;put message to console
  2502                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2503                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2504                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2505                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2506                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2507                                                          pop     ds                                              ;restore non-volatile regs
  2508                                                          pop     esi                                             ;
  2509                                                          pop     ecx                                             ;
  2510                                                          pop     ebx                                             ;
  2511                                                          pop     eax                                             ;
  2512                                                          iretd                                                   ;return
  2513                                  ;-----------------------------------------------------------------------------------------------------------------------
  2514                                  ;       Scan-Code to ASCII Translation Tables
  2515                                  ;-----------------------------------------------------------------------------------------------------------------------
  2516                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2517                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2518                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2519                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2520                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2521                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2522                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2523                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2524                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2525                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2526                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2527                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2528                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2529                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2530                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2531                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2532                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2533                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2534                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2535                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2536                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2537                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2538                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2539                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2540                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2541                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2542                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2543                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2544                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2545                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2546                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2547                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2548                                  ;-----------------------------------------------------------------------------------------------------------------------
  2549                                  ;
  2550                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2551                                  ;
  2552                                  ;-----------------------------------------------------------------------------------------------------------------------
  2553                                                          menter  iochannel                                       ;secondary 8259A cascade
  2554                                                          push    eax                                             ;save modified regs
  2555                                                          jmp     hwint                                           ;end interrupt and return
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557                                  ;
  2558                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2559                                  ;
  2560                                  ;-----------------------------------------------------------------------------------------------------------------------
  2561                                                          menter  com2                                            ;serial port 2 interrupt
  2562                                                          push    eax                                             ;save modified regs
  2563                                                          jmp     hwint                                           ;end interrupt and return
  2564                                  ;-----------------------------------------------------------------------------------------------------------------------
  2565                                  ;
  2566                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2567                                  ;
  2568                                  ;-----------------------------------------------------------------------------------------------------------------------
  2569                                                          menter  com1                                            ;serial port 1 interrupt
  2570                                                          push    eax                                             ;save modified regs
  2571                                                          jmp     hwint                                           ;end interrupt and return
  2572                                  ;-----------------------------------------------------------------------------------------------------------------------
  2573                                  ;
  2574                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2575                                  ;
  2576                                  ;-----------------------------------------------------------------------------------------------------------------------
  2577                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2578                                                          push    eax                                             ;save modified regs
  2579                                                          jmp     hwint                                           ;end interrupt and return
  2580                                  ;-----------------------------------------------------------------------------------------------------------------------
  2581                                  ;
  2582                                  ;       IRQ6    Diskette Hardware Interrupt
  2583                                  ;
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                                          menter  diskette                                        ;floppy disk interrupt
  2586                                                          push    eax                                             ;save non-volatile regs
  2587                                                          push    ds                                              ;
  2588                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2589                                                          pop     ds                                              ;... into DS register
  2590                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2591                                                          or      al,10000000b                                    ;set IRQ flag
  2592                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2593                                                          pop     ds                                              ;restore non-volatile regs
  2594                                                          jmp     hwint                                           ;end primary PIC interrupt
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2601                                                          push    eax                                             ;save modified regs
  2602                                                          jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  rtclock                                         ;real-time clock interrupt
  2609                                                          push    eax                                             ;save modified regs
  2610                                                          jmp     hwwint                                          ;end interrupt and return
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  ;
  2613                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2614                                  ;
  2615                                  ;-----------------------------------------------------------------------------------------------------------------------
  2616                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2617                                                          push    eax                                             ;save modified regs
  2618                                                          jmp     hwwint                                          ;end interrupt and return
  2619                                  ;-----------------------------------------------------------------------------------------------------------------------
  2620                                  ;
  2621                                  ;       IRQ10   Reserved Hardware Interrupt
  2622                                  ;
  2623                                  ;-----------------------------------------------------------------------------------------------------------------------
  2624                                                          menter  irq10                                           ;reserved
  2625                                                          push    eax                                             ;save modified regs
  2626                                                          jmp     hwwint                                          ;end interrupt and return
  2627                                  ;-----------------------------------------------------------------------------------------------------------------------
  2628                                  ;
  2629                                  ;       IRQ11   Reserved Hardware Interrupt
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                                          menter  irq11                                           ;reserved
  2633                                                          push    eax                                             ;save modified regs
  2634                                                          jmp     hwwint                                          ;end interrupt and return
  2635                                  ;-----------------------------------------------------------------------------------------------------------------------
  2636                                  ;
  2637                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2638                                  ;
  2639                                  ;-----------------------------------------------------------------------------------------------------------------------
  2640                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2641                                                          push    eax                                             ;save modified regs
  2642                                                          jmp     hwwint                                          ;end interrupt and return
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  ;
  2645                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2646                                  ;
  2647                                  ;-----------------------------------------------------------------------------------------------------------------------
  2648                                                          menter  coprocessor                                     ;coprocessor interrupt
  2649                                                          push    eax                                             ;save modified regs
  2650                                                          jmp     hwwint                                          ;end interrupt and return
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  ;
  2653                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2657                                                          push    eax                                             ;save modified regs
  2658                                                          jmp     hwwint                                          ;end interrupt and return
  2659                                  ;-----------------------------------------------------------------------------------------------------------------------
  2660                                  ;
  2661                                  ;       IRQ15   Reserved Hardware Interrupt
  2662                                  ;
  2663                                  ;-----------------------------------------------------------------------------------------------------------------------
  2664                                                          menter  irq15                                           ;reserved
  2665                                                          push    eax                                             ;save modified regs
  2666                                                          jmp     hwwint                                          ;end interrupt and return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       Exit from hardware interrupt
  2670                                  ;
  2671                                  ;-----------------------------------------------------------------------------------------------------------------------
  2672                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2673                                                          jmp     hwint90                                         ;skip ahead
  2674                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2675                                  hwint90                 pop     eax                                             ;restore modified regs
  2676                                                          iretd                                                   ;return from interrupt
  2677                                  ;-----------------------------------------------------------------------------------------------------------------------
  2678                                  ;
  2679                                  ;       INT 30h Operating System Software Service Interrupt
  2680                                  ;
  2681                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2682                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2683                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2684                                  ;       the entry address of the specific function from a table.
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  svc
  2688                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2689                                                          jae     svc90                                           ;yes, skip ahead
  2690                                                          movzx   eax,al                                          ;function
  2691                                                          shl     eax,2                                           ;offset into table
  2692                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2693                                  svc90                   iretd                                                   ;return from interrupt
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;       Service Request Table
  2697                                  ;
  2698                                  ;
  2699                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2700                                  ;
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2703                                                          tsvce   CompareMemory                                   ;compare memory
  2704                                                          tsvce   GetConsoleString                                ;get string input
  2705                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2706                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2707                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2708                                                          tsvce   UpperCaseString                                 ;upper-case string
  2709                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2710                                  ;-----------------------------------------------------------------------------------------------------------------------
  2711                                  ;
  2712                                  ;       Service Request Macros
  2713                                  ;
  2714                                  ;       These macros provide positional parameterization of service request calls.
  2715                                  ;
  2716                                  ;-----------------------------------------------------------------------------------------------------------------------
  2717                                  %macro                  clearConsoleScreen 0
  2718                                                          mov     al,eClearConsoleScreen                          ;function code
  2719                                                          int     _svc                                            ;invoke OS service
  2720                                  %endmacro
  2721                                  %macro                  compareMemory 0
  2722                                                          mov     al,eCompareMemory                               ;function code
  2723                                                          int     _svc                                            ;invoke OS service
  2724                                  %endmacro
  2725                                  %macro                  getConsoleString 4
  2726                                                          mov     edx,%1                                          ;buffer address
  2727                                                          mov     ecx,%2                                          ;max characters
  2728                                                          mov     bh,%3                                           ;echo indicator
  2729                                                          mov     bl,%4                                           ;terminator
  2730                                                          mov     al,eGetConsoleString                            ;function code
  2731                                                          int     _svc                                            ;invoke OS service
  2732                                  %endmacro
  2733                                  %macro                  placeCursor 0
  2734                                                          mov     al,ePlaceCursor                                 ;function code
  2735                                                          int     _svc                                            ;invoke OS service
  2736                                  %endmacro
  2737                                  %macro                  putConsoleString 1
  2738                                                          mov     edx,%1                                          ;string address
  2739                                                          mov     al,ePutConsoleString                            ;function code
  2740                                                          int     _svc                                            ;invoke OS service
  2741                                  %endmacro
  2742                                  %macro                  resetSystem 0
  2743                                                          mov     al,eResetSystem                                 ;function code
  2744                                                          int     _svc                                            ;invoke OS service
  2745                                  %endmacro
  2746                                  %macro                  upperCaseString 0
  2747                                                          mov     al,eUpperCaseString                             ;function code
  2748                                                          int     _svc                                            ;invoke OS service
  2749                                  %endmacro
  2750                                  ;=======================================================================================================================
  2751                                  ;
  2752                                  ;       Kernel Function Library
  2753                                  ;
  2754                                  ;=======================================================================================================================
  2755                                  ;=======================================================================================================================
  2756                                  ;
  2757                                  ;       String Helper Routines
  2758                                  ;
  2759                                  ;       CompareMemory
  2760                                  ;       UpperCaseString
  2761                                  ;
  2762                                  ;=======================================================================================================================
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;       Routine:        CompareMemory
  2766                                  ;
  2767                                  ;       Description:    This routine compares two byte arrays.
  2768                                  ;
  2769                                  ;       In:             DS:EDX  first source address
  2770                                  ;                       DS:EBX  second source address
  2771                                  ;                       ECX     comparison length
  2772                                  ;
  2773                                  ;       Out:            EDX     first source address
  2774                                  ;                       EBX     second source address
  2775                                  ;                       ECX     0       array 1 = array 2
  2776                                  ;                               <0      array 1 < array 2
  2777                                  ;                               >0      array 1 > array 2
  2778                                  ;
  2779                                  ;-----------------------------------------------------------------------------------------------------------------------
  2780                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2781                                                          push    edi                                             ;
  2782                                                          push    es                                              ;
  2783                                                          push    ds                                              ;copy DS
  2784                                                          pop     es                                              ;... to ES
  2785                                                          mov     esi,edx                                         ;first source address
  2786                                                          mov     edi,ebx                                         ;second source address
  2787                                                          cld                                                     ;forward strings
  2788                                                          rep     cmpsb                                           ;compare bytes
  2789                                                          mov     al,0                                            ;default result
  2790                                                          jz      .10                                             ;branch if arrays equal
  2791                                                          mov     al,1                                            ;positive result
  2792                                                          jnc     .10                                             ;branch if target > source
  2793                                                          mov     al,-1                                           ;negative result
  2794                                  .10                     movsx   ecx,al                                          ;extend sign
  2795                                                          pop     es                                              ;restore non-volatile regs
  2796                                                          pop     edi                                             ;
  2797                                                          pop     esi                                             ;
  2798                                                          ret                                                     ;return
  2799                                  ;-----------------------------------------------------------------------------------------------------------------------
  2800                                  ;
  2801                                  ;       Routine:        UpperCaseString
  2802                                  ;
  2803                                  ;       Description:    This routine places all characters in the given string to upper case.
  2804                                  ;
  2805                                  ;       In:             DS:EDX  string address
  2806                                  ;
  2807                                  ;       Out:            EDX     string address
  2808                                  ;
  2809                                  ;-----------------------------------------------------------------------------------------------------------------------
  2810                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2811                                                          mov     esi,edx                                         ;string address
  2812                                                          cld                                                     ;forward strings
  2813                                  .10                     lodsb                                                   ;string character
  2814                                                          test    al,al                                           ;null?
  2815                                                          jz      .20                                             ;yes, skip ahead
  2816                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2817                                                          jb      .10                                             ;no, continue
  2818                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2819                                                          ja      .10                                             ;no, continue
  2820                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2821                                                          mov     [esi-1],al                                      ;upper character
  2822                                                          jmp     .10                                             ;continue
  2823                                  .20                     pop     esi                                             ;restore non-volatile regs
  2824                                                          ret                                                     ;return
  2825                                  ;=======================================================================================================================
  2826                                  ;
  2827                                  ;       Console Helper Routines
  2828                                  ;
  2829                                  ;       FirstConsoleColumn
  2830                                  ;       GetConsoleChar
  2831                                  ;       GetConsoleString
  2832                                  ;       NextConsoleColumn
  2833                                  ;       NextConsoleRow
  2834                                  ;       PreviousConsoleColumn
  2835                                  ;       PutConsoleChar
  2836                                  ;       PutConsoleHexByte
  2837                                  ;       PutConsoleHexDword
  2838                                  ;       PutConsoleHexWord
  2839                                  ;       PutConsoleOIAChar
  2840                                  ;       PutConsoleOIAShift
  2841                                  ;       PutConsoleString
  2842                                  ;       Yield
  2843                                  ;
  2844                                  ;=======================================================================================================================
  2845                                  ;-----------------------------------------------------------------------------------------------------------------------
  2846                                  ;
  2847                                  ;       Routine:        FirstConsoleColumn
  2848                                  ;
  2849                                  ;       Description:    This routine resets the console column to start of the row.
  2850                                  ;
  2851                                  ;       In:             DS      OS data selector
  2852                                  ;
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2855                                                          mov     [wbConsoleColumn],al                            ;save column
  2856                                                          ret                                                     ;return
  2857                                  ;-----------------------------------------------------------------------------------------------------------------------
  2858                                  ;
  2859                                  ;       Routine:        GetConsoleChar
  2860                                  ;
  2861                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2862                                  ;
  2863                                  ;       Out:            AL      ASCII character code
  2864                                  ;                       AH      keyboard scan code
  2865                                  ;
  2866                                  ;-----------------------------------------------------------------------------------------------------------------------
  2867                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2868                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2869                                                          or      eax,eax                                         ;do we have a message?
  2870                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2871                                                          push    eax                                             ;save key codes
  2872                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2873                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2874                                                          pop     eax                                             ;restore key codes
  2875                                                          jne     GetConsoleChar                                  ;no, try again
  2876                                                          and     eax,0000ffffh                                   ;mask for key codes
  2877                                                          ret                                                     ;return
  2878                                  ;-----------------------------------------------------------------------------------------------------------------------
  2879                                  ;
  2880                                  ;       Routine:        GetConsoleString
  2881                                  ;
  2882                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2883                                  ;
  2884                                  ;       In:             DS:EDX  target buffer address
  2885                                  ;                       ECX     maximum number of characters to accept
  2886                                  ;                       BH      echo to terminal
  2887                                  ;                       BL      terminating character
  2888                                  ;
  2889                                  ;-----------------------------------------------------------------------------------------------------------------------
  2890                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2891                                                          push    esi                                             ;
  2892                                                          push    edi                                             ;
  2893                                                          push    es                                              ;
  2894                                                          push    ds                                              ;load data segment selector ...
  2895                                                          pop     es                                              ;... into extra segment register
  2896                                                          mov     edi,edx                                         ;edi = target buffer
  2897                                                          push    ecx                                             ;save maximum characters
  2898                                                          xor     al,al                                           ;zero register
  2899                                                          cld                                                     ;forward strings
  2900                                                          rep     stosb                                           ;zero fill buffer
  2901                                                          pop     ecx                                             ;maximum characters
  2902                                                          mov     edi,edx                                         ;edi = target buffer
  2903                                                          mov     esi,edx                                         ;esi = target buffer
  2904                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2905                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2906                                                          cmp     al,bl                                           ;is this the terminator?
  2907                                                          je      .50                                             ;yes, exit
  2908                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2909                                                          jne     .30                                             ;no, skip ahead
  2910                                                          cmp     esi,edi                                         ;at start of buffer?
  2911                                                          je      .20                                             ;yes, get next character
  2912                                                          dec     edi                                             ;backup target pointer
  2913                                                          mov     byte [edi],0                                    ;zero previous character
  2914                                                          inc     ecx                                             ;increment remaining chars
  2915                                                          test    bh,1                                            ;echo to console?
  2916                                                          jz      .20                                             ;no, get next character
  2917                                                          call    PreviousConsoleColumn                           ;backup console position
  2918                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2919                                                          call    PutConsoleChar                                  ;write space to console
  2920                                                          call    PlaceCursor                                     ;position the cursor
  2921                                                          jmp     .20                                             ;get next character
  2922                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2923                                                          jb      .20                                             ;no, get another character
  2924                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2925                                                          ja      .20                                             ;no, get another character
  2926                                                          stosb                                                   ;store character in buffer
  2927                                                          test    bh,1                                            ;echo to console?
  2928                                                          jz      .40                                             ;no, skip ahead
  2929                                                          call    PutConsoleChar                                  ;write character to console
  2930                                                          call    NextConsoleColumn                               ;advance console position
  2931                                                          call    PlaceCursor                                     ;position the cursor
  2932                                  .40                     dec     ecx                                             ;decrement remaining chars
  2933                                                          jmp     .10                                             ;next
  2934                                  .50                     xor     al,al                                           ;null
  2935                                                          stosb                                                   ;terminate buffer
  2936                                                          pop     es                                              ;restore non-volatile regs
  2937                                                          pop     edi                                             ;
  2938                                                          pop     esi                                             ;
  2939                                                          pop     ecx                                             ;
  2940                                                          ret                                                     ;return
  2941                                  ;-----------------------------------------------------------------------------------------------------------------------
  2942                                  ;
  2943                                  ;       Routine:        NextConsoleColumn
  2944                                  ;
  2945                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2946                                  ;                       incremented if the end of the current row is reached.
  2947                                  ;
  2948                                  ;       In:             DS      OS data selector
  2949                                  ;
  2950                                  ;-----------------------------------------------------------------------------------------------------------------------
  2951                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2952                                                          inc     al                                              ;increment column
  2953                                                          mov     [wbConsoleColumn],al                            ;save column
  2954                                                          cmp     al,ECONCOLS                                     ;end of row?
  2955                                                          jb      .10                                             ;no, skip ahead
  2956                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2957                                                          call    NextConsoleRow                                  ;line feed to next row
  2958                                  .10                     ret                                                     ;return
  2959                                  ;-----------------------------------------------------------------------------------------------------------------------
  2960                                  ;
  2961                                  ;       Routine:        NextConsoleRow
  2962                                  ;
  2963                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2964                                  ;
  2965                                  ;       In:             DS      OS data selector
  2966                                  ;
  2967                                  ;-----------------------------------------------------------------------------------------------------------------------
  2968                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2969                                                          inc     al                                              ;increment row
  2970                                                          mov     [wbConsoleRow],al                               ;save row
  2971                                                          cmp     al,ECONROWS                                     ;end of screen?
  2972                                                          jb      .10                                             ;no, skip ahead
  2973                                                          call    ScrollConsoleRow                                ;scroll up one row
  2974                                                          mov     al,[wbConsoleRow]                               ;row
  2975                                                          dec     al                                              ;decrement row
  2976                                                          mov     [wbConsoleRow],al                               ;save row
  2977                                  .10                     ret                                                     ;return
  2978                                  ;-----------------------------------------------------------------------------------------------------------------------
  2979                                  ;
  2980                                  ;       Routine:        PreviousConsoleColumn
  2981                                  ;
  2982                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2983                                  ;                       the column is set to the last position in the row and the row is decremented.
  2984                                  ;
  2985                                  ;       In:             DS      OS data selector
  2986                                  ;
  2987                                  ;-----------------------------------------------------------------------------------------------------------------------
  2988                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2989                                                          or      al,al                                           ;start of row?
  2990                                                          jnz     .10                                             ;no, skip ahead
  2991                                                          mov     ah,[wbConsoleRow]                               ;current row
  2992                                                          or      ah,ah                                           ;top of screen?
  2993                                                          jz      .20                                             ;yes, exit with no change
  2994                                                          dec     ah                                              ;decrement row
  2995                                                          mov     [wbConsoleRow],ah                               ;save row
  2996                                                          mov     al,ECONCOLS                                     ;set maximum column
  2997                                  .10                     dec     al                                              ;decrement column
  2998                                                          mov     [wbConsoleColumn],al                            ;save column
  2999                                  .20                     ret                                                     ;return
  3000                                  ;-----------------------------------------------------------------------------------------------------------------------
  3001                                  ;
  3002                                  ;       Routine:        PutConsoleChar
  3003                                  ;
  3004                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3005                                  ;
  3006                                  ;       In:             AL      ASCII character
  3007                                  ;                       DS      OS data selector
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3011                                                          push    es                                              ;
  3012                                                          push    EGDTCGA                                         ;load CGA selector ...
  3013                                                          pop     es                                              ;... into extra segment reg
  3014                                                          mov     cl,[wbConsoleColumn]                            ;column
  3015                                                          mov     ch,[wbConsoleRow]                               ;row
  3016                                                          call    SetConsoleChar                                  ;put character at row, column
  3017                                                          pop     es                                              ;restore non-volatile regs
  3018                                                          pop     ecx                                             ;
  3019                                                          ret                                                     ;return
  3020                                  ;-----------------------------------------------------------------------------------------------------------------------
  3021                                  ;
  3022                                  ;       Routine:        PutConsoleHexByte
  3023                                  ;
  3024                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3025                                  ;
  3026                                  ;       In:             AL      byte value
  3027                                  ;                       CL      column
  3028                                  ;                       CH      row
  3029                                  ;                       DS      OS data selector
  3030                                  ;                       ES      CGA selector
  3031                                  ;
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  3034                                                          mov     bl,al                                           ;save byte value
  3035                                                          shr     al,4                                            ;hi-order nybble
  3036                                                          or      al,030h                                         ;apply ASCII zone
  3037                                                          cmp     al,03ah                                         ;numeric?
  3038                                                          jb      .10                                             ;yes, skip ahead
  3039                                                          add     al,7                                            ;add ASCII offset for alpha
  3040                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  3041                                                          mov     al,bl                                           ;byte value
  3042                                                          and     al,0fh                                          ;lo-order nybble
  3043                                                          or      al,30h                                          ;apply ASCII zone
  3044                                                          cmp     al,03ah                                         ;numeric?
  3045                                                          jb      .20                                             ;yes, skip ahead
  3046                                                          add     al,7                                            ;add ASCII offset for alpha
  3047                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  3048                                                          pop     ebx                                             ;restore non-volatile regs
  3049                                                          ret                                                     ;return
  3050                                  ;-----------------------------------------------------------------------------------------------------------------------
  3051                                  ;
  3052                                  ;       Routine:        PutConsoleHexDword
  3053                                  ;
  3054                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3055                                  ;
  3056                                  ;       In:             EAX     value
  3057                                  ;                       CL      column
  3058                                  ;                       CH      row
  3059                                  ;                       DS      OS data selector
  3060                                  ;                       ES      CGA selector
  3061                                  ;
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063                                  PutConsoleHexDword      push    eax
  3064                                                          shr     eax,16
  3065                                                          call    PutConsoleHexWord
  3066                                                          pop     eax
  3067                                                          call    PutConsoleHexWord
  3068                                                          ret
  3069                                  ;-----------------------------------------------------------------------------------------------------------------------
  3070                                  ;
  3071                                  ;       Routine:        PutConsoleHexWord
  3072                                  ;
  3073                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3074                                  ;
  3075                                  ;       In:             EAX     value
  3076                                  ;                       CL      column
  3077                                  ;                       CH      row
  3078                                  ;                       DS      OS data selector
  3079                                  ;                       ES      CGA selector
  3080                                  ;
  3081                                  ;-----------------------------------------------------------------------------------------------------------------------
  3082                                  PutConsoleHexWord       push    eax
  3083                                                          shr     eax,8
  3084                                                          call    PutConsoleHexByte
  3085                                                          pop     eax
  3086                                                          call    PutConsoleHexByte
  3087                                                          ret
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  ;
  3090                                  ;       Routine:        PutConsoleOIAChar
  3091                                  ;
  3092                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3093                                  ;
  3094                                  ;       In:             DS      OS data selector
  3095                                  ;
  3096                                  ;-----------------------------------------------------------------------------------------------------------------------
  3097                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3098                                                          push    ecx                                             ;
  3099                                                          push    esi                                             ;
  3100                                                          push    ds                                              ;
  3101                                                          push    es                                              ;
  3102                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3103                                                          pop     ds                                              ;... into data segment register
  3104                                                          push    EGDTCGA                                         ;load CGA selector ...
  3105                                                          pop     es                                              ;... into extra segment register
  3106                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  3107                                                          mov     bh,ECONOIAROW                                   ;OIA row
  3108                                                          mov     bl,0                                            ;starting column
  3109                                                          mov     ecx,6                                           ;maximum scan codes
  3110                                  .10                     push    ecx                                             ;save remaining count
  3111                                                          mov     ecx,ebx                                         ;row, column
  3112                                                          lodsb                                                   ;read scan code
  3113                                                          or      al,al                                           ;scan code present?
  3114                                                          jz      .20                                             ;no, skip ahead
  3115                                                          call    PutConsoleHexByte                               ;display scan code
  3116                                                          jmp     .30                                             ;continue
  3117                                  .20                     mov     al,' '                                          ;ASCII space
  3118                                                          call    SetConsoleChar                                  ;display space
  3119                                                          mov     al,' '                                          ;ASCII space
  3120                                                          call    SetConsoleChar                                  ;display space
  3121                                  .30                     add     bl,2                                            ;next column (+2)
  3122                                                          pop     ecx                                             ;restore remaining
  3123                                                          loop    .10                                             ;next code
  3124                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  3125                                                          cmp     al,32                                           ;printable? (lower-bounds)
  3126                                                          jb      .40                                             ;no, skip ahead
  3127                                                          cmp     al,126                                          ;printable? (upper-bounds)
  3128                                                          ja      .40                                             ;no, skip ahead
  3129                                                          mov     ch,bh                                           ;OIA row
  3130                                                          mov     cl,40                                           ;character display column
  3131                                                          call    SetConsoleChar                                  ;display ASCII character
  3132                                  .40                     pop     es                                              ;restore non-volatile regs
  3133                                                          pop     ds                                              ;
  3134                                                          pop     esi                                             ;
  3135                                                          pop     ecx                                             ;
  3136                                                          pop     ebx                                             ;
  3137                                                          ret                                                     ;return
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;       Routine:        PutConsoleOIAShift
  3141                                  ;
  3142                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3143                                  ;
  3144                                  ;       In:             BL      shift flags
  3145                                  ;                       BH      lock flags
  3146                                  ;                       DS      OS data selector
  3147                                  ;
  3148                                  ;-----------------------------------------------------------------------------------------------------------------------
  3149                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3150                                                          push    es                                              ;
  3151                                                          push    EGDTCGA                                         ;load CGA selector ...
  3152                                                          pop     es                                              ;... into ES register
  3153                                                          mov     ch,ECONOIAROW                                   ;OIA row
  3154                                                          mov     al,EASCIISPACE                                  ;space is default character
  3155                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3156                                                          jz      .10                                             ;no, skip ahead
  3157                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3158                                  .10                     mov     cl,14                                           ;indicator column
  3159                                                          call    SetConsoleChar                                  ;display ASCII character
  3160                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3161                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3162                                                          jz      .20                                             ;no, skip ahead
  3163                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3164                                  .20                     mov     cl,64                                           ;indicator column
  3165                                                          call    SetConsoleChar                                  ;display ASCII character
  3166                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3167                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3168                                                          jz      .30                                             ;no, skip ahead
  3169                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3170                                  .30                     mov     cl,15                                           ;indicator column
  3171                                                          call    SetConsoleChar                                  ;display ASCII character
  3172                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3173                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3174                                                          jz      .40                                             ;no, skip ahead
  3175                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3176                                  .40                     mov     cl,63                                           ;indicator column
  3177                                                          call    SetConsoleChar                                  ;display ASCII character
  3178                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3179                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3180                                                          jz      .50                                             ;no, skip ahead
  3181                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3182                                  .50                     mov     cl,16                                           ;indicator column
  3183                                                          call    SetConsoleChar                                  ;display ASCII character
  3184                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3185                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3186                                                          jz      .60                                             ;no, skip ahead
  3187                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  3188                                  .60                     mov     cl,62                                           ;indicator column
  3189                                                          call    SetConsoleChar                                  ;display ASCII character
  3190                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3191                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3192                                                          jz      .70                                             ;no, skip ahead
  3193                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  3194                                  .70                     mov     cl,78                                           ;indicator column
  3195                                                          call    SetConsoleChar                                  ;display ASCII character
  3196                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3197                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3198                                                          jz      .80                                             ;no, skip ahead
  3199                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  3200                                  .80                     mov     cl,77                                           ;indicator column
  3201                                                          call    SetConsoleChar                                  ;display ASCII character
  3202                                                          mov     al,EASCIISPACE                                  ;ASCII space
  3203                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3204                                                          jz      .90                                             ;no, skip ahead
  3205                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  3206                                  .90                     mov     cl,76                                           ;indicator column
  3207                                                          call    SetConsoleChar                                  ;display ASCII character
  3208                                                          pop     es                                              ;restore non-volatile regs
  3209                                                          pop     ecx                                             ;
  3210                                                          ret                                                     ;return
  3211                                  ;-----------------------------------------------------------------------------------------------------------------------
  3212                                  ;
  3213                                  ;       Routine:        PutConsoleString
  3214                                  ;
  3215                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3216                                  ;                       console position as needed.
  3217                                  ;
  3218                                  ;       In:             EDX     source address
  3219                                  ;                       DS      OS data selector
  3220                                  ;
  3221                                  ;-----------------------------------------------------------------------------------------------------------------------
  3222                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  3223                                                          mov     esi,edx                                         ;source address
  3224                                                          cld                                                     ;forward strings
  3225                                  .10                     lodsb                                                   ;ASCII character
  3226                                                          or      al,al                                           ;end of string?
  3227                                                          jz      .40                                             ;yes, skip ahead
  3228                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  3229                                                          jne     .20                                             ;no, skip ahead
  3230                                                          call    FirstConsoleColumn                              ;move to start of row
  3231                                                          jmp     .10                                             ;next character
  3232                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3233                                                          jne     .30                                             ;no, skip ahead
  3234                                                          call    NextConsoleRow                                  ;move to next row
  3235                                                          jmp     .10                                             ;next character
  3236                                  .30                     call    PutConsoleChar                                  ;output character to console
  3237                                                          call    NextConsoleColumn                               ;advance to next column
  3238                                                          jmp     .10                                             ;next character
  3239                                  .40                     pop     esi                                             ;restore non-volatile regs
  3240                                                          ret                                                     ;return
  3241                                  ;-----------------------------------------------------------------------------------------------------------------------
  3242                                  ;
  3243                                  ;       Routine:        Yield
  3244                                  ;
  3245                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3246                                  ;
  3247                                  ;-----------------------------------------------------------------------------------------------------------------------
  3248                                  Yield                   sti                                                     ;enable maskagle interrupts
  3249                                                          hlt                                                     ;halt until external interrupt
  3250                                                          ret                                                     ;return
  3251                                  ;=======================================================================================================================
  3252                                  ;
  3253                                  ;       Message Queue Helper Routines
  3254                                  ;
  3255                                  ;       GetMessage
  3256                                  ;       PutMessage
  3257                                  ;
  3258                                  ;=======================================================================================================================
  3259                                  ;-----------------------------------------------------------------------------------------------------------------------
  3260                                  ;
  3261                                  ;       Routine:        GetMessage
  3262                                  ;
  3263                                  ;       Description:    This routine reads and removes a message from the message queue.
  3264                                  ;
  3265                                  ;       Out:            EAX     lo-order message data
  3266                                  ;                       EDX     hi-order message data
  3267                                  ;
  3268                                  ;                       CY      0 = message read
  3269                                  ;                               1 = no message to read
  3270                                  ;
  3271                                  ;-----------------------------------------------------------------------------------------------------------------------
  3272                                  GetMessage              push    ebx                                             ;save non-volatile regs
  3273                                                          push    ecx                                             ;
  3274                                                          push    ds                                              ;
  3275                                                          push    ELDTMQ                                          ;load message queue selector ...
  3276                                                          pop     ds                                              ;... into data segment register
  3277                                                          mov     ebx,[MQHead]                                    ;head ptr
  3278                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  3279                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3280                                                          or      eax,edx                                         ;is queue empty?
  3281                                                          stc                                                     ;assume queue is emtpy
  3282                                                          jz      .20                                             ;yes, skip ahead
  3283                                                          xor     ecx,ecx                                         ;store zero
  3284                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  3285                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3286                                                          add     ebx,8                                           ;next queue element
  3287                                                          and     ebx,03fch                                       ;at end of queue?
  3288                                                          jnz     .10                                             ;no, skip ahead
  3289                                                          mov     bl,8                                            ;reset to 1st entry
  3290                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3291                                                          clc                                                     ;indicate message read
  3292                                  .20                     pop     ds                                              ;restore non-volatile regs
  3293                                                          pop     ecx                                             ;
  3294                                                          pop     ebx                                             ;
  3295                                                          ret                                                     ;return
  3296                                  ;-----------------------------------------------------------------------------------------------------------------------
  3297                                  ;
  3298                                  ;       Routine:        PutMessage
  3299                                  ;
  3300                                  ;       Description:    This routine adda a message to the message queue.
  3301                                  ;
  3302                                  ;       In:             ECX     hi-order data word
  3303                                  ;                       EDX     lo-order data word
  3304                                  ;
  3305                                  ;       Out:            CY      0 = success
  3306                                  ;                               1 = fail: queue is full
  3307                                  ;
  3308                                  ;-----------------------------------------------------------------------------------------------------------------------
  3309                                  PutMessage              push    ds                                              ;save non-volatile regs
  3310                                                          push    ELDTMQ                                          ;load task message queue selector ...
  3311                                                          pop     ds                                              ;... into data segment register
  3312                                                          mov     eax,[MQTail]                                    ;tail ptr
  3313                                                          cmp     dword [eax],0                                   ;is queue full?
  3314                                                          stc                                                     ;assume failure
  3315                                                          jne     .20                                             ;yes, cannot store
  3316                                                          mov     [eax],edx                                       ;store lo-order data
  3317                                                          mov     [eax+4],ecx                                     ;store hi-order data
  3318                                                          add     eax,8                                           ;next queue element adr
  3319                                                          and     eax,03fch                                       ;at end of queue?
  3320                                                          jnz     .10                                             ;no, skip ahead
  3321                                                          mov     al,8                                            ;reset to top of queue
  3322                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3323                                                          clc                                                     ;indicate success
  3324                                  .20                     pop     ds                                              ;restore non-volatile regs
  3325                                                          ret                                                     ;return
  3326                                  ;=======================================================================================================================
  3327                                  ;
  3328                                  ;       Memory-Mapped Video Routines
  3329                                  ;
  3330                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3331                                  ;
  3332                                  ;       ClearConsoleScreen
  3333                                  ;       ScrollConsoleRow
  3334                                  ;       SetConsoleChar
  3335                                  ;       SetConsoleString
  3336                                  ;
  3337                                  ;=======================================================================================================================
  3338                                  ;-----------------------------------------------------------------------------------------------------------------------
  3339                                  ;
  3340                                  ;       Routine:        ClearConsoleScreen
  3341                                  ;
  3342                                  ;       Description:    This routine clears the console (CGA) screen.
  3343                                  ;
  3344                                  ;-----------------------------------------------------------------------------------------------------------------------
  3345                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3346                                                          push    edi                                             ;
  3347                                                          push    ds                                              ;
  3348                                                          push    es                                              ;
  3349                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  3350                                                          pop     ds                                              ;... into DS register
  3351                                                          push    EGDTCGA                                         ;load CGA selector ...
  3352                                                          pop     es                                              ;... into ES register
  3353                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  3354                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3355                                                          xor     edi,edi                                         ;target offset
  3356                                                          cld                                                     ;forward strings
  3357                                                          rep     stosd                                           ;reset screen body
  3358                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3359                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3360                                                          rep     stosd                                           ;reset OIA line
  3361                                                          xor     al,al                                           ;zero register
  3362                                                          mov     [wbConsoleRow],al                               ;reset console row
  3363                                                          mov     [wbConsoleColumn],al                            ;reset console column
  3364                                                          call    PlaceCursor                                     ;place cursor at current position
  3365                                                          pop     es                                              ;restore non-volatile regs
  3366                                                          pop     ds                                              ;
  3367                                                          pop     edi                                             ;
  3368                                                          pop     ecx                                             ;
  3369                                                          ret                                                     ;return
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  ;
  3372                                  ;       Routine:        ScrollConsoleRow
  3373                                  ;
  3374                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3375                                  ;
  3376                                  ;-----------------------------------------------------------------------------------------------------------------------
  3377                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3378                                                          push    esi                                             ;
  3379                                                          push    edi                                             ;
  3380                                                          push    ds                                              ;
  3381                                                          push    es                                              ;
  3382                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3383                                                          pop     ds                                              ;... into DS
  3384                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3385                                                          pop     es                                              ;... into ES
  3386                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3387                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3388                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3389                                                          cld                                                     ;forward strings
  3390                                                          rep     movsd                                           ;move 24 lines up
  3391                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3392                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3393                                                          rep     stosd                                           ;clear bottom row
  3394                                                          pop     es                                              ;restore non-volatile regs
  3395                                                          pop     ds                                              ;
  3396                                                          pop     edi                                             ;
  3397                                                          pop     esi                                             ;
  3398                                                          pop     ecx                                             ;
  3399                                                          ret                                                     ;return
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ;
  3402                                  ;       Routine:        SetConsoleChar
  3403                                  ;
  3404                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3405                                  ;
  3406                                  ;       In:             AL      ASCII character
  3407                                  ;                       CL      column
  3408                                  ;                       CH      row
  3409                                  ;                       ES      CGA selector
  3410                                  ;
  3411                                  ;       Out:            EAX     last target address written (ES:)
  3412                                  ;                       CL      column + 1
  3413                                  ;
  3414                                  ;-----------------------------------------------------------------------------------------------------------------------
  3415                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3416                                                          movzx   eax,ch                                          ;row
  3417                                                          mov     ah,ECONCOLS                                     ;cols/row
  3418                                                          mul     ah                                              ;row * cols/row
  3419                                                          add     al,cl                                           ;add column
  3420                                                          adc     ah,0                                            ;handle carry
  3421                                                          shl     eax,1                                           ;screen offset
  3422                                                          mov     [es:eax],dl                                     ;store character
  3423                                                          inc     cl                                              ;next column
  3424                                                          ret                                                     ;return
  3425                                  ;-----------------------------------------------------------------------------------------------------------------------
  3426                                  ;
  3427                                  ;       Routine:        SetConsoleString
  3428                                  ;
  3429                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3430                                  ;
  3431                                  ;       In:             ESI     source offset (DS:)
  3432                                  ;                       CL      column
  3433                                  ;                       CH      row
  3434                                  ;                       ES      CGA selector
  3435                                  ;
  3436                                  ;-----------------------------------------------------------------------------------------------------------------------
  3437                                  SetConsoleString        push    esi                                             ;save non-volatile regs
  3438                                                          cld                                                     ;forward strings
  3439                                  .10                     lodsb                                                   ;next ASCII character
  3440                                                          test    al,al                                           ;end of string?
  3441                                                          jz      .20                                             ;yes, branch
  3442                                                          call    SetConsoleChar                                  ;store character
  3443                                                          jmp     .10                                             ;continue
  3444                                  .20                     pop     esi                                             ;restore non-volatile regs
  3445                                                          ret                                                     ;return
  3446                                  ;=======================================================================================================================
  3447                                  ;
  3448                                  ;       Input/Output Routines
  3449                                  ;
  3450                                  ;       These routines read and/or write directly to ports.
  3451                                  ;
  3452                                  ;       PlaceCursor
  3453                                  ;       PutPrimaryEndOfInt
  3454                                  ;       PutSecondaryEndOfInt
  3455                                  ;       ResetSystem
  3456                                  ;       SetKeyboardLamps
  3457                                  ;       WaitForKeyInBuffer
  3458                                  ;       WaitForKeyOutBuffer
  3459                                  ;
  3460                                  ;=======================================================================================================================
  3461                                  ;-----------------------------------------------------------------------------------------------------------------------
  3462                                  ;
  3463                                  ;       Routine:        PlaceCursor
  3464                                  ;
  3465                                  ;       Description:    This routine positions the cursor on the console.
  3466                                  ;
  3467                                  ;       In:             DS      OS data selector
  3468                                  ;
  3469                                  ;-----------------------------------------------------------------------------------------------------------------------
  3470                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3471                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3472                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3473                                                          mul     ah                                              ;row offset
  3474                                                          add     al,[wbConsoleColumn]                            ;add column
  3475                                                          adc     ah,0                                            ;add overflow
  3476                                                          mov     ecx,eax                                         ;screen offset
  3477                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3478                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3479                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3480                                                          out     dx,al                                           ;select register
  3481                                                          inc     edx                                             ;data port
  3482                                                          mov     al,ch                                           ;hi-order cursor loc
  3483                                                          out     dx,al                                           ;store hi-order loc
  3484                                                          dec     edx                                             ;register select port
  3485                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3486                                                          out     dx,al                                           ;select register
  3487                                                          inc     edx                                             ;data port
  3488                                                          mov     al,cl                                           ;lo-order cursor loc
  3489                                                          out     dx,al                                           ;store lo-order loc
  3490                                                          pop     ecx                                             ;restore non-volatile regs
  3491                                                          ret                                                     ;return
  3492                                  ;-----------------------------------------------------------------------------------------------------------------------
  3493                                  ;
  3494                                  ;       Routine:        PutPrimaryEndOfInt
  3495                                  ;
  3496                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3497                                  ;
  3498                                  ;-----------------------------------------------------------------------------------------------------------------------
  3499                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3500                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3501                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3502                                                          ret                                                     ;return
  3503                                  ;-----------------------------------------------------------------------------------------------------------------------
  3504                                  ;
  3505                                  ;       Routine:        PutSecondaryEndOfInt
  3506                                  ;
  3507                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3508                                  ;
  3509                                  ;-----------------------------------------------------------------------------------------------------------------------
  3510                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3511                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3512                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3513                                                          ret                                                     ;return
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  ;
  3516                                  ;       Routine:        ResetSystem
  3517                                  ;
  3518                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3519                                  ;
  3520                                  ;       Out:            N/A     This routine does not return.
  3521                                  ;
  3522                                  ;-----------------------------------------------------------------------------------------------------------------------
  3523                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3524                                                          loop    $                                               ;clear interrupts
  3525                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3526                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3527                                  .10                     sti                                                     ;enable maskable interrupts
  3528                                                          hlt                                                     ;halt until interrupt
  3529                                                          jmp     .10                                             ;repeat until reset kicks in
  3530                                  ;-----------------------------------------------------------------------------------------------------------------------
  3531                                  ;
  3532                                  ;       Routine:        SetKeyboardLamps
  3533                                  ;
  3534                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3535                                  ;
  3536                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3537                                  ;
  3538                                  ;-----------------------------------------------------------------------------------------------------------------------
  3539                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3540                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3541                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3542                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3543                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3544                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3545                                                          mov     al,bh                                           ;set/reset lamps value
  3546                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3547                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3548                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3549                                                          ret                                                     ;return
  3550                                  ;-----------------------------------------------------------------------------------------------------------------------
  3551                                  ;
  3552                                  ;       Routine:        WaitForKeyInBuffer
  3553                                  ;
  3554                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3555                                  ;
  3556                                  ;       Out:            ZF      1 = Input buffer ready
  3557                                  ;                               0 = Input buffer not ready after timeout
  3558                                  ;
  3559                                  ;-----------------------------------------------------------------------------------------------------------------------
  3560                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3561                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3562                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3563                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3564                                                          loopnz  .10                                             ;yes, repeat till timeout
  3565                                                          pop     ecx                                             ;restore non-volatile regs
  3566                                                          ret                                                     ;return
  3567                                  ;-----------------------------------------------------------------------------------------------------------------------
  3568                                  ;
  3569                                  ;       Routine:        WaitForKeyOutBuffer
  3570                                  ;
  3571                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3572                                  ;
  3573                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3574                                  ;                               0 = Output buffer empty after timeout
  3575                                  ;
  3576                                  ;-----------------------------------------------------------------------------------------------------------------------
  3577                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3578                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3579                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3580                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3581                                                          loopz   .10                                             ;loop until output buffer bit
  3582                                                          pop     ecx                                             ;restore non-volatile regs
  3583                                                          ret                                                     ;return
  3584                                  ;-----------------------------------------------------------------------------------------------------------------------
  3585                                  ;
  3586                                  ;       End of the Kernel Function Library
  3587                                  ;
  3588                                  ;-----------------------------------------------------------------------------------------------------------------------
  3589                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3590                                  ;=======================================================================================================================
  3591                                  ;
  3592                                  ;       Console Task
  3593                                  ;
  3594                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3595                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3596                                  ;       screen and responds to user commands.
  3597                                  ;
  3598                                  ;=======================================================================================================================
  3599                                  ;-----------------------------------------------------------------------------------------------------------------------
  3600                                  ;
  3601                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3602                                  ;
  3603                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3604                                  ;
  3605                                  ;-----------------------------------------------------------------------------------------------------------------------
  3606                                  section                 constack                                                ;console task stack
  3607                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3608                                  ;-----------------------------------------------------------------------------------------------------------------------
  3609                                  ;
  3610                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3611                                  ;
  3612                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3613                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3614                                  ;       16 descriptors. Six are initially defined.
  3615                                  ;
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617                                  section                 conldt                                                  ;console local descriptors
  3618                                                          dq      004093004780007Fh                               ;04 TSS alias
  3619                                                          dq      004093004700007Fh                               ;0c LDT alias
  3620                                                          dq      00409300400006FFh                               ;14 stack
  3621                                                          dq      00CF93000000FFFFh                               ;1c data
  3622                                                          dq      00409B0050000FFFh                               ;24 code
  3623                                                          dq      00409300480007FFh                               ;2c message queue
  3624                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3625                                  ;-----------------------------------------------------------------------------------------------------------------------
  3626                                  ;
  3627                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3628                                  ;
  3629                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3630                                  ;       segment. CS to console code.
  3631                                  ;
  3632                                  ;-----------------------------------------------------------------------------------------------------------------------
  3633                                  section                 contss                                                  ;console task state segment
  3634                                                          dd      0                                               ;00 back-link tss
  3635                                                          dd      0700h                                           ;04 esp ring 0
  3636                                                          dd      0014h                                           ;08 ss ring 0
  3637                                                          dd      0700h                                           ;0c esp ring 1
  3638                                                          dd      0014h                                           ;10 es ring 1
  3639                                                          dd      0700h                                           ;14 esp ring 2
  3640                                                          dd      0014h                                           ;18 ss ring 2
  3641                                                          dd      0                                               ;1c cr ring 3
  3642                                                          dd      0                                               ;20 eip
  3643                                                          dd      0200h                                           ;24 eflags
  3644                                                          dd      0                                               ;28 eax
  3645                                                          dd      0                                               ;2c ecx
  3646                                                          dd      0                                               ;30 edx
  3647                                                          dd      0                                               ;34 ebx
  3648                                                          dd      0700h                                           ;38 esp ring 3
  3649                                                          dd      0                                               ;3c ebp
  3650                                                          dd      0                                               ;40 esi
  3651                                                          dd      0                                               ;44 edi
  3652                                                          dd      001Ch                                           ;48 es
  3653                                                          dd      0024h                                           ;4c cs
  3654                                                          dd      0014h                                           ;50 ss ring 3
  3655                                                          dd      001Ch                                           ;54 ds
  3656                                                          dd      0                                               ;58 fs
  3657                                                          dd      0                                               ;5c gs
  3658                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3659                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3660                                  ;-----------------------------------------------------------------------------------------------------------------------
  3661                                  ;
  3662                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3663                                  ;
  3664                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3665                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3666                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3667                                  ;       event.
  3668                                  ;
  3669                                  ;-----------------------------------------------------------------------------------------------------------------------
  3670                                  section                 conmque                                                 ;console message queue
  3671                                                          dd      8                                               ;head pointer
  3672                                                          dd      8                                               ;tail pointer
  3673                                                          times   510 dd 0                                        ;queue elements
  3674                                  ;-----------------------------------------------------------------------------------------------------------------------
  3675                                  ;
  3676                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3677                                  ;
  3678                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3679                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3680                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3681                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3682                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3683                                  ;       board input, echoing to the console screen and responding to user commands.
  3684                                  ;
  3685                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3686                                  ;
  3687                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3688                                  ;                               |  Real Mode Interrupt Vectors                  |
  3689                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3690                                  ;                               |  Reserved BIOS Memory Area                    |
  3691                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3692                                  ;                               |  Shared Kernel Memory Area                    |
  3693                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3694                                  ;                               |  Global Descriptor Table (GDT)                |
  3695                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3696                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3697                                  ;                       002000  +-----------------------------------------------+
  3698                                  ;                               |  Interrupt Handlers                           |
  3699                                  ;                               |  Kernel Function Library                      |
  3700                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3701                                  ;                               |  Console Task Stack Area                      |
  3702                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3703                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3704                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3705                                  ;                               |  Console Task Task State Segment (TSS)        |
  3706                                  ;                       004800  +-----------------------------------------------+
  3707                                  ;                               |  Console Task Message Queue                   |
  3708                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3709                                  ;                               |  Console Task Code                            |
  3710                                  ;                               |  Console Task Constants                       |
  3711                                  ;                       006000  +===============================================+
  3712                                  ;
  3713                                  ;-----------------------------------------------------------------------------------------------------------------------
  3714                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3715                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3716                                  
  3717                                                          clearConsoleScreen                                      ;clear the console screen
  3718                                                          putConsoleString czTitle                                ;display startup message
  3719                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3720                                                          placeCursor                                             ;set CRT cursor location
  3721                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3722                                                          putConsoleString czNewLine                              ;newline
  3723                                  
  3724                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3725                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3726                                                          call    ConTakeToken                                    ;handle console input
  3727                                                          mov     edx,wzConsoleToken                              ;token buffer
  3728                                                          call    ConDetermineCommand                             ;determine command number
  3729                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3730                                                          jb      .20                                             ;yes, branch
  3731                                  
  3732                                                          putConsoleString czUnknownCommand                       ;display error message
  3733                                  
  3734                                                          jmp     .10                                             ;next command
  3735                                  .20                     shl     eax,2                                           ;index into jump table
  3736                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3737                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3738                                                          call    eax                                             ;call command handler
  3739                                                          jmp     .10                                             ;next command
  3740                                  ;-----------------------------------------------------------------------------------------------------------------------
  3741                                  ;
  3742                                  ;       Routine:        ConInitializeData
  3743                                  ;
  3744                                  ;       Description:    This routine initializes console task variables.
  3745                                  ;
  3746                                  ;-----------------------------------------------------------------------------------------------------------------------
  3747                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3748                                                          push    edi                                             ;
  3749                                                          push    es                                              ;
  3750                                  ;
  3751                                  ;       Initialize console work areas.
  3752                                  ;
  3753                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3754                                                          pop     es                                              ;... into extra segment register
  3755                                                          mov     edi,ECONDATA                                    ;OS console data address
  3756                                                          xor     al,al                                           ;initialization value
  3757                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3758                                                          cld                                                     ;forward strings
  3759                                                          rep     stosb                                           ;initialize data
  3760                                  ;
  3761                                  ;       Restore and return.
  3762                                  ;
  3763                                                          pop     es                                              ;restore non-volatile regs
  3764                                                          pop     edi                                             ;
  3765                                                          pop     ecx                                             ;
  3766                                                          ret                                                     ;return
  3767                                  ;-----------------------------------------------------------------------------------------------------------------------
  3768                                  ;
  3769                                  ;       Routine:        ConTakeToken
  3770                                  ;
  3771                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3772                                  ;
  3773                                  ;       In:             DS:EDX  source buffer address
  3774                                  ;                       DS:EBX  target buffer address
  3775                                  ;
  3776                                  ;       Out:            DS:EDX  source buffer address
  3777                                  ;                       DS:EBX  target buffer address
  3778                                  ;
  3779                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3780                                  ;
  3781                                  ;-----------------------------------------------------------------------------------------------------------------------
  3782                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3783                                                          push    edi                                             ;
  3784                                                          push    es                                              ;
  3785                                                          push    ds                                              ;load data segment selector ...
  3786                                                          pop     es                                              ;... into extra segment reg
  3787                                                          mov     esi,edx                                         ;source buffer address
  3788                                                          mov     edi,ebx                                         ;target buffer address
  3789                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3790                                                          cld                                                     ;forward strings
  3791                                  .10                     lodsb                                                   ;load byte
  3792                                                          cmp     al,EASCIISPACE                                  ;space?
  3793                                                          je      .10                                             ;yes, continue
  3794                                                          test    al,al                                           ;end of line?
  3795                                                          jz      .40                                             ;yes, branch
  3796                                  .20                     stosb                                                   ;store byte
  3797                                                          lodsb                                                   ;load byte
  3798                                                          test    al,al                                           ;end of line?
  3799                                                          jz      .40                                             ;no, continue
  3800                                                          cmp     al,EASCIISPACE                                  ;space?
  3801                                                          jne     .20                                             ;no, continue
  3802                                  .30                     lodsb                                                   ;load byte
  3803                                                          cmp     al,EASCIISPACE                                  ;space?
  3804                                                          je      .30                                             ;yes, continue
  3805                                                          dec     esi                                             ;pre-position
  3806                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3807                                                          mov     edi,edx                                         ;source buffer address
  3808                                  .50                     lodsb                                                   ;remaining byte
  3809                                                          stosb                                                   ;move to front of buffer
  3810                                                          test    al,al                                           ;end of line?
  3811                                                          jnz     .50                                             ;no, continue
  3812                                                          pop     es                                              ;restore non-volatile regs
  3813                                                          pop     edi                                             ;
  3814                                                          pop     esi                                             ;
  3815                                                          ret                                                     ;return
  3816                                  ;-----------------------------------------------------------------------------------------------------------------------
  3817                                  ;
  3818                                  ;       Routine:        ConDetermineCommand
  3819                                  ;
  3820                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3821                                  ;
  3822                                  ;       input:          DS:EDX  command address
  3823                                  ;
  3824                                  ;       output:         EAX     >=0     = command nbr
  3825                                  ;                               0       = unknown command
  3826                                  ;
  3827                                  ;-----------------------------------------------------------------------------------------------------------------------
  3828                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3829                                                          push    ecx                                             ;
  3830                                                          push    esi                                             ;
  3831                                                          push    edi                                             ;
  3832                                  
  3833                                                          upperCaseString                                         ;upper-case string at EDX
  3834                                  
  3835                                                          mov     esi,tConCmdTbl                                  ;commands table
  3836                                                          xor     edi,edi                                         ;intialize command number
  3837                                                          cld                                                     ;forward strings
  3838                                  .10                     lodsb                                                   ;command length
  3839                                                          movzx   ecx,al                                          ;command length
  3840                                                          jecxz   .20                                             ;branch if end of table
  3841                                                          mov     ebx,esi                                         ;table entry address
  3842                                                          add     esi,ecx                                         ;next table entry address
  3843                                  
  3844                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3845                                  
  3846                                                          jecxz   .20                                             ;branch if equal
  3847                                                          inc     edi                                             ;increment command nbr
  3848                                                          jmp     .10                                             ;repeat
  3849                                  .20                     mov     eax,edi                                         ;command number
  3850                                                          pop     edi                                             ;restore non-volatile regs
  3851                                                          pop     esi                                             ;
  3852                                                          pop     ecx                                             ;
  3853                                                          pop     ebx                                             ;
  3854                                                          ret                                                     ;return
  3855                                  ;-----------------------------------------------------------------------------------------------------------------------
  3856                                  ;
  3857                                  ;       Routine:        ConClear
  3858                                  ;
  3859                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3860                                  ;
  3861                                  ;-----------------------------------------------------------------------------------------------------------------------
  3862                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3863                                                          ret                                                     ;return
  3864                                  ;-----------------------------------------------------------------------------------------------------------------------
  3865                                  ;
  3866                                  ;       Routine:        ConExit
  3867                                  ;
  3868                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3869                                  ;
  3870                                  ;-----------------------------------------------------------------------------------------------------------------------
  3871                                  ConExit                 resetSystem                                             ;issue system reset
  3872                                                          ret                                                     ;return
  3873                                  ;-----------------------------------------------------------------------------------------------------------------------
  3874                                  ;
  3875                                  ;       Routine:        ConInt6
  3876                                  ;
  3877                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3878                                  ;
  3879                                  ;-----------------------------------------------------------------------------------------------------------------------
  3880                                  ConInt6                 ud2                                                     ;raise bad opcode exception
  3881                                                          ret                                                     ;return (not executed)
  3882                                  ;-----------------------------------------------------------------------------------------------------------------------
  3883                                  ;
  3884                                  ;       Routine:        ConVersion
  3885                                  ;
  3886                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3887                                  ;
  3888                                  ;-----------------------------------------------------------------------------------------------------------------------
  3889                                  ConVersion              putConsoleString czTitle                                ;display version message
  3890                                                          ret                                                     ;return
  3891                                  ;-----------------------------------------------------------------------------------------------------------------------
  3892                                  ;
  3893                                  ;       Tables
  3894                                  ;
  3895                                  ;-----------------------------------------------------------------------------------------------------------------------
  3896                                                                                                                  ;---------------------------------------
  3897                                                                                                                  ;  Command Jump Table
  3898                                                                                                                  ;---------------------------------------
  3899                                  tConJmpTbl              equ     $                                               ;command jump table
  3900                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3901                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  3902                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  3903                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3904                                                          dd      ConInt6         - ConCode                       ;int6 command routine offset
  3905                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3906                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  3907                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  3908                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3909                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3910                                                                                                                  ;---------------------------------------
  3911                                                                                                                  ;  Command Name Table
  3912                                                                                                                  ;---------------------------------------
  3913                                  tConCmdTbl              equ     $                                               ;command name table
  3914                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3915                                                          db      8,"VERSION",0                                   ;version command
  3916                                                          db      6,"CLEAR",0                                     ;clear command
  3917                                                          db      5,"EXIT",0                                      ;exit command
  3918                                                          db      5,"INT6",0                                      ;int6 command
  3919                                                          db      5,"QUIT",0                                      ;quit command
  3920                                                          db      4,"CLS",0                                       ;cls command
  3921                                                          db      4,"VER",0                                       ;ver command
  3922                                                          db      0                                               ;end of table
  3923                                  ;-----------------------------------------------------------------------------------------------------------------------
  3924                                  ;
  3925                                  ;       Constants
  3926                                  ;
  3927                                  ;-----------------------------------------------------------------------------------------------------------------------
  3928                                  czNewLine               db      13,10,0                                         ;new line string
  3929                                  czPrompt                db      ":",0                                           ;prompt string
  3930                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3931                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3932                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3933                                  %endif
  3934                                  %ifdef BUILDDISK
  3935                                  ;-----------------------------------------------------------------------------------------------------------------------
  3936                                  ;
  3937                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3938                                  ;
  3939                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3940                                  ;
  3941                                  ;-----------------------------------------------------------------------------------------------------------------------
  3942                                  section                 unused                                                  ;unused disk space
  3943                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3944                                  %endif
  3945                                  ;=======================================================================================================================
  3946                                  ;
  3947                                  ;       End of Program Code
  3948                                  ;
  3949                                  ;=======================================================================================================================
