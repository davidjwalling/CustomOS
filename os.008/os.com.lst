     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.008
     6                                  ;
     7                                  ;       Description:    In this sample program, an "int6" command is added to generate an invalid opcode interrupt.
     8                                  ;                       The interrupt handler displays the contents of registers at the time of the interrupt.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   294                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   295                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   296                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   297                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   298                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   299                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   300                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Firmware-Defined Values
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   309                                  ;
   310                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   311                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   315                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   316                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   317                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   318                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   319                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   320                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   321                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   322                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   323                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   324                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       Standards-Based Values
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;
   332                                  ;       ASCII                                                                   EASCII...
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   336                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   337                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   338                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   339                                  EASCIISPACE             equ     020h                                            ;space
   340                                  EASCIIUPPERA            equ     041h                                            ;'A'
   341                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   342                                  EASCIILOWERA            equ     061h                                            ;'a'
   343                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   344                                  EASCIITILDE             equ     07Eh                                            ;'~'
   345                                  EASCIIBORDSGLVERT       equ     0B3h                                            ;vertical single border
   346                                  EASCIIBORDSGLUPRRGT     equ     0BFh                                            ;upper-right single border
   347                                  EASCIIBORDSGLLWRLFT     equ     0C0h                                            ;lower-left single border
   348                                  EASCIIBORDSGLHORZ       equ     0C4h                                            ;horizontal single border
   349                                  EASCIIBORDSGLLWRRGT     equ     0D9h                                            ;lower-right single border
   350                                  EASCIIBORDSGLUPRLFT     equ     0DAh                                            ;upper-left single border
   351                                  EASCIICASE              equ     00100000b                                       ;case bit
   352                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  ;
   355                                  ;       Operating System Values
   356                                  ;
   357                                  ;-----------------------------------------------------------------------------------------------------------------------
   358                                  ;-----------------------------------------------------------------------------------------------------------------------
   359                                  ;
   360                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   361                                  ;
   362                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   363                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   364                                  ;
   365                                  ;-----------------------------------------------------------------------------------------------------------------------
   366                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   367                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   368                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   369                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   370                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   371                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   372                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;       Console Constants                                                       ECON...
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  ECONCOLS                equ     80                                              ;columns per row
   377                                  ECONROWS                equ     24                                              ;console rows
   378                                  ECONOIAROW              equ     24                                              ;operator information area row
   379                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   380                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   381                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   382                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   383                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   388                                  EGDTCGA                 equ     020h                                            ;cga video selector
   389                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   390                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   391                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   392                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   393                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   394                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   395                                  ;-----------------------------------------------------------------------------------------------------------------------
   396                                  ;       Keyboard Flags                                                          EKEYF...
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   399                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   400                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   401                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   402                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   403                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   404                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   405                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   406                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   407                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   408                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Kernel Constants                                                        EKRN...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   413                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   414                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   415                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   418                                  ;-----------------------------------------------------------------------------------------------------------------------
   419                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;       Message Identifiers                                                     EMSG...
   422                                  ;-----------------------------------------------------------------------------------------------------------------------
   423                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   424                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   425                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   426                                  ;=======================================================================================================================
   427                                  ;
   428                                  ;       Structures
   429                                  ;
   430                                  ;=======================================================================================================================
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ;
   433                                  ;       MQUEUE
   434                                  ;
   435                                  ;       The MQUEUE structure maps memory used for a message queue.
   436                                  ;
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  struc                   MQUEUE
   439 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   440 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   441 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   442                                  endstruc
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ;
   445                                  ;       OSDATA
   446                                  ;
   447                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   448                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   449                                  ;
   450                                  ;-----------------------------------------------------------------------------------------------------------------------
   451                                  struc                   OSDATA
   452 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   453 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   454 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   455 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   456 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   457 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   458 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   459 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   460 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   461 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   462 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   463 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   464 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   465 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   466 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   467 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   468 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   469 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   470 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   471 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   472 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   473 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   474 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   475 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   476 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   477 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   478 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   479 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   480 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   481 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   482 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   483 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   484 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   485 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   486 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   487 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   488 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   489 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   490 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   491 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   492 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   493 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   494 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   495 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   496 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   497 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   498 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   499 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   500 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   501 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   502 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   503 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   504 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   505 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   506 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   507 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   508 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   509 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   510 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   511 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   512 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   513 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   514 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   515 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   516 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   517 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   518 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   519 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   520 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   521 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   522 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   523 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   524 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   525 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   526 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   527 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   528 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   529 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   530 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   531 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   532 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   533 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   534 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   535 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   536 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   537 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   538 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   539 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   540 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   541 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   542 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   543 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   544 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   545 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   546 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   547 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   548 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   549 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   550 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   551 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   552 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ;
   555                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   556                                  ;
   557                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   558                                  ;
   559                                  ;-----------------------------------------------------------------------------------------------------------------------
   560                                  ECONDATA                equ     ($)
   561 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   562 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   563 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   564 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   565 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   566 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   567 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   568 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   569 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   570 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   571 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   572 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   573 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   574 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   575                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  ;
   578                                  ;       End of OS Variables
   579                                  ;
   580                                  ;-----------------------------------------------------------------------------------------------------------------------
   581                                  endstruc
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  ;
   584                                  ;       Macros
   585                                  ;
   586                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   587                                  ;
   588                                  ;-----------------------------------------------------------------------------------------------------------------------
   589                                  %macro                  mint    1
   590                                  _%1                     equ     ($-$$) / EX86DESCLEN
   591                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   592                                  %endmacro
   593                                  %macro                  mtrap   1
   594                                  _%1                     equ     ($-$$) / EX86DESCLEN
   595                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   596                                  %endmacro
   597                                  %macro                  menter  1
   598                                  ?%1                     equ     ($-$$)
   599                                  %endmacro
   600                                  %macro                  tsvce   1
   601                                  e%1                     equ     ($-tsvc)/4
   602                                                          dd      %1
   603                                  %endmacro
   604                                  %ifdef BUILDBOOT
   605                                  ;=======================================================================================================================
   606                                  ;
   607                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   608                                  ;
   609                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   610                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   611                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   612                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   613                                  ;
   614                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   615                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   616                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   617                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   618                                  ;       immediately followed by a disk parameter table.
   619                                  ;
   620                                  ;=======================================================================================================================
   621                                                          cpu     8086                                            ;assume minimal CPU
   622                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   623                                                          bits    16                                              ;16-bit code at power-up
   624                                  %ifdef BUILDPREP
   625                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   626                                  %else
   627                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   628                                  %endif
   629                                  ;-----------------------------------------------------------------------------------------------------------------------
   630                                  ;
   631                                  ;       Disk Parameter Table
   632                                  ;
   633                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   634                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   635                                  ;
   636                                  ;-----------------------------------------------------------------------------------------------------------------------
   637                                                          db      "CustomOS"                                      ;eight-byte label
   638                                  cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   639                                  cbClusterSectors        db      1                                               ;sectors per cluster
   640                                  cwReservedSectors       dw      1                                               ;reserved sectors
   641                                  cbFatCount              db      2                                               ;file allocation table copies
   642                                  cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   643                                  cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   644                                  cbDiskType              db      0F0h                                            ;1.44MB
   645                                  cwFatSectors            dw      9                                               ;sectors per FAT copy
   646                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   647                                  cwTrackSectors          dw      18                                              ;sectors per track (as word)
   648                                  cwDiskSides             dw      2                                               ;sides per disk
   649                                  cwSpecialSectors        dw      0                                               ;special sectors
   650                                  ;
   651                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   652                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   653                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   654                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   655                                  ;       given several possible starting values for CS:IP.
   656                                  ;
   657                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   658                                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   659                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   660                                  .20                     pop     ax                                              ;AX =      7c21     c21    21
   661                                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   662                                                          mov     cl,4                                            ;shift count
   663                                                          shr     ax,cl                                           ;AX =       7c0      c0     0
   664                                                          mov     bx,cs                                           ;BX =         0     700   7c0
   665                                                          add     bx,ax                                           ;BX =       7c0     7c0   7c0
   666                                  ;
   667                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   668                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   669                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   670                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   671                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   672                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   673                                  ;
   674                                                          sub     bx,16                                           ;BX = 07b0
   675                                                          mov     ds,bx                                           ;DS = 07b0 = psp
   676                                                          mov     es,bx                                           ;ES = 07b0 = psp
   677                                                          mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   678                                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   679                                  ;
   680                                  ;       Our boot addressability is now set up according to the following diagram.
   681                                  ;
   682                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   683                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   684                                  ;                               |  256 = 100h bytes                             |
   685                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   686                                  ;                               |  Boot Sector (vstart=0100h)                   |
   687                                  ;                               |  1 sector = 512 = 200h bytes                  |
   688                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   689                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   690                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   691                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   692                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   693                                  ;                               |  2 sectors = 1024 = 400h bytes
   694                                  ;                       009400  +-----------------------------------------------+ DS:1900
   695                                  ;
   696                                  ;       On entry, DL indicates the drive being booted from.
   697                                  ;
   698                                                          mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   699                                  ;
   700                                  ;       Compute directory i/o buffer address.
   701                                  ;
   702                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   703                                                          mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   704                                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   705                                                          mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   706                                  ;
   707                                  ;       Compute segment where os.com will be loaded.
   708                                  ;
   709                                                          shr     ax,cl                                           ;AX = 0150
   710                                                          add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   711                                                          sub     ax,16                                           ;AX = 08f0
   712                                                          mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   713                                  ;
   714                                  ;       Set the video mode to 80 column, 25 row, text.
   715                                  ;
   716                                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   717                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   718                                  ;
   719                                  ;       Write a message to the console so we know we have our addressability established.
   720                                  ;
   721                                                          mov     si,czLoadMsg                                    ;loading message
   722                                                          call    BootPrint                                       ;display loader message
   723                                  ;
   724                                  ;       Initialize the number of directory sectors to search.
   725                                  ;
   726                                                          mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   727                                                          mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   728                                  ;
   729                                  ;       Compute number of directory sectors and initialize overhead count.
   730                                  ;
   731                                                          mov     cx,ax                                           ;CX = 00e0 = 224 entries
   732                                                          mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   733                                                          div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   734                                                          mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   735                                  ;
   736                                  ;       Compute directory entries per sector.
   737                                  ;
   738                                                          xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   739                                                          div     cx                                              ;AX = 0010 = entries per dir sector
   740                                                          mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   741                                  ;
   742                                  ;       Compute first logical directory sector and update overhead count.
   743                                  ;
   744                                                          mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   745                                                          mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   746                                                          add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   747                                                          add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   748                                                          mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   749                                                          add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   750                                  ;
   751                                  ;       Read directory sector.
   752                                  ;
   753                                  .30                     mov     al,1                                            ;sector count
   754                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 01
   755                                                          mov     bx,[wwDirBuffer]                                ;BX = 1500
   756                                                          call    ReadSector                                      ;read sector into es:bx
   757                                  ;
   758                                  ;       Setup variables to search this directory sector.
   759                                  ;
   760                                                          mov     ax,[wwEntriesLeft]                              ;directory entries to search
   761                                                          cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   762                                                          jna     .40                                             ;no, continue
   763                                                          mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   764                                  .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   765                                                          mov     si,cbKernelProgram                              ;program name
   766                                                          mov     di,[wwDirBuffer]                                ;DI = 1500
   767                                  ;
   768                                  ;       Loop through directory sectors searching for kernel program.
   769                                  ;
   770                                  .50                     push    si                                              ;save kernel name address
   771                                                          push    di                                              ;save dir i/o buffer address
   772                                                          mov     cx,11                                           ;length of 8+3 name
   773                                                          cld                                                     ;forward strings
   774                                                          repe    cmpsb                                           ;compare entry name
   775                                                          pop     di                                              ;restore dir i/o buffer address
   776                                                          pop     si                                              ;restore kernel name address
   777                                                          je      .60                                             ;exit loop if found
   778                                                          add     di,[cwEntryLen]                                 ;point to next dir entry
   779                                                          dec     ax                                              ;decrement remaining entries
   780                                                          jnz     .50                                             ;next entry
   781                                  ;
   782                                  ;       Repeat search if we are not at the end of the directory.
   783                                  ;
   784                                                          inc     word [wwLogicalSector]                          ;increment logical sector
   785                                                          cmp     word [wwEntriesLeft],0                          ;done with directory?
   786                                                          jne     .30                                             ;no, get next sector
   787                                                          mov     si,czNoKernel                                   ;missing kernel message
   788                                                          jmp     BootExit                                        ;display message and exit
   789                                  ;
   790                                  ;       If we find the kernel program in the directory, read the FAT.
   791                                  ;
   792                                  .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   793                                                          mov     [wwLogicalSector],ax                            ;start past boot sector
   794                                                          mov     ax,[cwFatSectors]                               ;AX = 0009
   795                                                          mov     [wbReadCount],al                                ;[wbReadCount] = 09
   796                                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   797                                                          call    ReadSector                                      ;read FAT into buffer
   798                                  ;
   799                                  ;       Get the starting cluster of the kernel program and target address.
   800                                  ;
   801                                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   802                                                          les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   803                                  ;
   804                                  ;       Read each program cluster into RAM.
   805                                  ;
   806                                  .70                     push    ax                                              ;save cluster nbr
   807                                                          sub     ax,2                                            ;AX = cluster nbr base 0
   808                                                          mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   809                                                          mov     [wbReadCount],cl                                ;save sectors to read
   810                                                          xor     ch,ch                                           ;CX = sectors per cluster
   811                                                          mul     cx                                              ;DX:AX = logical cluster sector
   812                                                          add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   813                                                          mov     [wwLogicalSector],ax                            ;save logical sector nbr
   814                                                          call    ReadSector                                      ;read sectors into ES:BX
   815                                  ;
   816                                  ;       Update buffer pointer for next cluster.
   817                                  ;
   818                                                          mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   819                                                          xor     ah,ah                                           ;AX = sectors per cluster
   820                                                          mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   821                                                          add     bx,ax                                           ;BX = next cluster target address
   822                                                          pop     ax                                              ;AX = restore cluster nbr
   823                                  ;
   824                                  ;       Compute next cluster number.
   825                                  ;
   826                                                          mov     cx,ax                                           ;CX = cluster nbr
   827                                                          mov     di,ax                                           ;DI = cluster nbr
   828                                                          shr     ax,1                                            ;AX = cluster/2
   829                                                          mov     dx,ax                                           ;DX = cluster/2
   830                                                          add     ax,dx                                           ;AX = 2*(cluster/2)
   831                                                          add     ax,dx                                           ;AX = 3*(cluster/2)
   832                                                          and     di,1                                            ;get low bit
   833                                                          add     di,ax                                           ;add one if cluster is odd
   834                                                          add     di,EBOOTFATBASE                                 ;add FAT buffer address
   835                                                          mov     ax,[di]                                         ;get cluster bytes
   836                                  ;
   837                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   838                                  ;
   839                                                          test    cl,1                                            ;is cluster odd?
   840                                                          jz      .80                                             ;no, skip ahead
   841                                                          mov     cl,4                                            ;shift count
   842                                                          shr     ax,cl                                           ;shift nybble low
   843                                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   844                                                          cmp     ax,0FFFh                                        ;end of chain?
   845                                                          jne     .70                                             ;no, continue
   846                                  ;
   847                                  ;       Transfer control to the operating system program.
   848                                  ;
   849                                                          db      0EAh                                            ;jmp seg:offset
   850                                  wwLoadOffset            dw      0100h                                           ;kernel entry offset
   851                                  wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   852                                  ;
   853                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   854                                  ;
   855                                  ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   856                                                          mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   857                                                          mov     cx,ax                                           ;CX = sectors per cylinder
   858                                                          mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   859                                                          div     cx                                              ;AX = cylinder; DX = cyl sector
   860                                                          mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   861                                                          mov     ax,dx                                           ;AX = cyl sector
   862                                                          div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   863                                                          inc     ah                                              ;AH = sector (1,2,3,...)
   864                                                          mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   865                                  ;
   866                                  ;       Try maxtries times to read sector.
   867                                  ;
   868                                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   869                                  .10                     push    bx                                              ;save buffer address
   870                                                          push    cx                                              ;save retry count
   871                                                          mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   872                                                          mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   873                                                          mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   874                                                          int     EBIOSINTDISKETTE                                ;read sector
   875                                                          pop     cx                                              ;restore retry count
   876                                                          pop     bx                                              ;restore buffer address
   877                                                          jnc     BootReturn                                      ;skip ahead if done
   878                                                          loop    .10                                             ;retry
   879                                  ;
   880                                  ;       Handle disk error: convert to ASCII and store in error string.
   881                                  ;
   882                                                          mov     al,ah                                           ;AL = bios error code
   883                                                          xor     ah,ah                                           ;AX = bios error code
   884                                                          mov     dl,16                                           ;divisor for base 16
   885                                                          div     dl                                              ;AL = hi order, AH = lo order
   886                                                          or      ax,03030h                                       ;apply ASCII zone bits
   887                                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   888                                                          jb      .20                                             ;continue if numeral
   889                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   890                                  .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   891                                                          jb      .30                                             ;continue if numeral
   892                                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   893                                  .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   894                                                          mov     si,czErrorMsg                                   ;error message address
   895                                  BootExit                call    BootPrint                                       ;display messge to console
   896                                  ;
   897                                  ;       Wait for a key press.
   898                                  ;
   899                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   900                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   901                                                          jnz     .20                                             ;continue if key pressed
   902                                                          sti                                                     ;enable maskable interrupts
   903                                                          hlt                                                     ;wait for interrupt
   904                                                          jmp     .10                                             ;repeat
   905                                  ;
   906                                  ;       Reset the system.
   907                                  ;
   908                                  .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   909                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   910                                  .30                     sti                                                     ;enable maskable interrupts
   911                                                          hlt                                                     ;stop until reset, int, nmi
   912                                                          jmp     .30                                             ;loop until restart kicks in
   913                                  ;
   914                                  ;       Display text message.
   915                                  ;
   916                                  BootPrint               cld                                                     ;forward strings
   917                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
   918                                                          test    al,al                                           ;end of string?
   919                                                          jz      BootReturn                                      ;... yes, exit our loop
   920                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   921                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   922                                                          jmp     .10                                             ;repeat until done
   923                                  BootReturn              ret                                                     ;return
   924                                  ;-----------------------------------------------------------------------------------------------------------------------
   925                                  ;
   926                                  ;       Constants
   927                                  ;
   928                                  ;-----------------------------------------------------------------------------------------------------------------------
   929                                                          align   2
   930                                  cwEntryLen              dw      32                                              ;length of directory entry
   931                                  cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   932                                  czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   933                                  czErrorMsg              db      "Disk error "                                   ;error message
   934                                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   935                                  czNoKernel              db      "OS missing",0                                  ;missing kernel message
   936                                  ;-----------------------------------------------------------------------------------------------------------------------
   937                                  ;
   938                                  ;       Work Areas
   939                                  ;
   940                                  ;-----------------------------------------------------------------------------------------------------------------------
   941                                                          align   2
   942                                  wwDirBuffer             dw      0                                               ;directory i/o buffer address
   943                                  wwEntriesLeft           dw      0                                               ;directory entries to search
   944                                  wwOverhead              dw      0                                               ;overhead sectors
   945                                  wwSectorEntries         dw      0                                               ;directory entries per sector
   946                                  wwLogicalSector         dw      0                                               ;current logical sector
   947                                  wwReadCountCommand      equ     $                                               ;read count and command
   948                                  wbReadCount             db      0                                               ;sectors to read
   949                                  cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   950                                  wwDriveHead             equ     $                                               ;drive, head (word)
   951                                  wbDrive                 db      0                                               ;drive
   952                                  wbHead                  db      0                                               ;head
   953                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   954                                                          db      0                                               ;sector
   955                                  wbTrack                 db      0                                               ;track
   956                                                          times   510-($-$$) db 0h                                ;zero fill to end of sector
   957                                                          db      055h,0AAh                                       ;end of sector signature
   958                                  %endif
   959                                  %ifdef BUILDPREP
   960                                  ;=======================================================================================================================
   961                                  ;
   962                                  ;       Diskette Preparation Code
   963                                  ;
   964                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   965                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   966                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   967                                  ;
   968                                  ;=======================================================================================================================
   969                                  ;
   970                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   971                                  ;
   972                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   973                                                          call    BootPrint                                       ;display message
   974                                  ;
   975                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   976                                  ;
   977                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   978                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   979                                                          jnz     .20                                             ;continue if key pressed
   980                                                          sti                                                     ;enable interrupts
   981                                                          hlt                                                     ;wait for interrupt
   982                                                          jmp     .10                                             ;repeat
   983                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   984                                                          je      .30                                             ;yes, branch
   985                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   986                                                          jne     .10                                             ;no, repeat
   987                                                          jmp     .120                                            ;yes, exit program
   988                                  ;
   989                                  ;       Display writing-sector message and patch the JMP instruction.
   990                                  ;
   991                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   992                                                          call    BootPrint                                       ;display message
   993                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   994                                                          mov     ax,01Bh                                         ;address past disk parameter table
   995                                                          mov     [bx],ax                                         ;update the JMP instruction
   996                                  ;
   997                                  ;       Try to read the boot sector.
   998                                  ;
   999                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1000                                  .40                     push    cx                                              ;save remaining tries
  1001                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
  1002                                                          mov     dx,0                                            ;head zero, drive zero
  1003                                                          mov     cx,1                                            ;track zero, sector one
  1004                                                          mov     al,1                                            ;one sector
  1005                                                          mov     ah,EBIOSFNREADSECTOR                            ;read function
  1006                                                          int     EBIOSINTDISKETTE                                ;attempt the read
  1007                                                          pop     cx                                              ;restore remaining retries
  1008                                                          jnc     .50                                             ;skip ahead if successful
  1009                                                          loop    .40                                             ;try again
  1010                                                          mov     si,czPrepMsg20                                  ;read-error message address
  1011                                                          jmp     .70                                             ;branch to error routine
  1012                                  ;
  1013                                  ;       Copy diskette parms from input buffer to output buffer.
  1014                                  ;
  1015                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1016                                                          add     si,11                                           ;skip over JMP and system ID
  1017                                                          mov     di,Boot                                         ;output buffer address
  1018                                                          add     di,11                                           ;skip over JMP and system ID
  1019                                                          mov     cx,19                                           ;length of diskette parameters
  1020                                                          cld                                                     ;forward string copies
  1021                                                          rep     movsb                                           ;copy diskette parameters
  1022                                  ;
  1023                                  ;       Try to write boot sector to diskette.
  1024                                  ;
  1025                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1026                                  .60                     push    cx                                              ;save remaining tries
  1027                                                          mov     bx,Boot                                         ;output buffer address
  1028                                                          mov     dx,0                                            ;head zero, drive zero
  1029                                                          mov     cx,1                                            ;track zero, sector one
  1030                                                          mov     al,1                                            ;one sector
  1031                                                          mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1032                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1033                                                          pop     cx                                              ;restore remaining retries
  1034                                                          jnc     .100                                            ;skip ahead if successful
  1035                                                          loop    .60                                             ;try again
  1036                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1037                                  ;
  1038                                  ;       Convert the error code to ASCII and display the error message.
  1039                                  ;
  1040                                  .70                     push    ax                                              ;save error code
  1041                                                          mov     al,ah                                           ;copy error code
  1042                                                          mov     ah,0                                            ;AX = error code
  1043                                                          mov     dl,10h                                          ;hexadecimal divisor
  1044                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1045                                                          or      ax,03030h                                       ;add ASCII zone digits
  1046                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1047                                                          jb      .80                                             ;yes, continue
  1048                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1049                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1050                                                          jb      .90                                             ;yes, continue
  1051                                                          add     al,7                                            ;no, make ASCII
  1052                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1053                                                          call    BootPrint                                       ;write error message
  1054                                                          pop     ax                                              ;restore error code
  1055                                  ;
  1056                                  ;       Display the completion message.
  1057                                  ;
  1058                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1059                                                          mov     al,ah                                           ;BIOS return code
  1060                                                          cmp     al,0                                            ;success?
  1061                                                          je      .110                                            ;yes, continue
  1062                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1063                                                          cmp     al,1                                            ;disk parameter error?
  1064                                                          je      .110                                            ;yes, continue
  1065                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1066                                                          cmp     al,2                                            ;address mark not found?
  1067                                                          je      .110                                            ;yes, continue
  1068                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1069                                                          cmp     al,3                                            ;protected disk?
  1070                                                          je      .110                                            ;yes, continue
  1071                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1072                                                          cmp     al,6                                            ;diskette removed?
  1073                                                          je      .110                                            ;yes, continue
  1074                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1075                                                          cmp     al,80H                                          ;drive timed out?
  1076                                                          je      .110                                            ;yes, continue
  1077                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1078                                  .110                    call    BootPrint                                       ;display result message
  1079                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1080                                                          int     021h                                            ;terminate DOS program
  1081                                                          ret                                                     ;return (should not execute)
  1082                                  ;-----------------------------------------------------------------------------------------------------------------------
  1083                                  ;
  1084                                  ;       Diskette Preparation Messages
  1085                                  ;
  1086                                  ;-----------------------------------------------------------------------------------------------------------------------
  1087                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1088                                                          db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1089                                                          db      13,10
  1090                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1091                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1092                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1093                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1094                                                          db      13,10,0
  1095                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1096                                                          db      13,10,0
  1097                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1098                                                          db      13,10,0
  1099                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1100                                                          db      13,10,0
  1101                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1102                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1103                                                          db      13,10,0
  1104                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1105                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1106                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1107                                                          db      13,10,"and retry."
  1108                                                          db      13,10,0
  1109                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1110                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1111                                                          db      13,10,"using another diskette."
  1112                                                          db      13,10,0
  1113                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1114                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1115                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1116                                                          db      13,10,0
  1117                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1118                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1119                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1120                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1121                                                          db      13,10,"is properly inserted in the diskette drive."
  1122                                                          db      13,10,0
  1123                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1124                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1125                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1126                                                          db      13,10,0
  1127                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1128                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1129                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1130                                                          db      13,10,0
  1131                                  wcPrepInBuf             equ     $
  1132                                  %endif
  1133                                  %ifdef BUILDDISK
  1134                                  ;=======================================================================================================================
  1135                                  ;
  1136                                  ;       File Allocation Tables
  1137                                  ;
  1138                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1139                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1140                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1141                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1142                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1143                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1144                                  ;       the last cluster in the chain.
  1145                                  ;
  1146                                  ;       Every three bytes encode two FAT entries as follows:
  1147                                  ;
  1148                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1149                                  ;
  1150                                  ;=======================================================================================================================
  1151                                  ;-----------------------------------------------------------------------------------------------------------------------
  1152                                  ;
  1153                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1154                                  ;
  1155                                  ;-----------------------------------------------------------------------------------------------------------------------
  1156                                  section                 fat1                                                    ;first copy of FAT
  1157                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1158                                                          db      005h,060h,000h, 007h,080h,000h
  1159                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1160                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1161                                                          db      011h,020h,001h, 013h,040h,001h
  1162                                                          db      015h,060h,001h, 017h,080h,001h
  1163                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1164                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1165                                                          db      021h,020h,002h, 023h,040h,002h
  1166                                                          db      025h,060h,002h, 027h,080h,002h
  1167                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1168                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1169                                  ;-----------------------------------------------------------------------------------------------------------------------
  1170                                  ;
  1171                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1172                                  ;
  1173                                  ;-----------------------------------------------------------------------------------------------------------------------
  1174                                  section                 fat2                                                    ;second copy of FAT
  1175                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1176                                                          db      005h,060h,000h, 007h,080h,000h
  1177                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1178                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1179                                                          db      011h,020h,001h, 013h,040h,001h
  1180                                                          db      015h,060h,001h, 017h,080h,001h
  1181                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1182                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1183                                                          db      021h,020h,002h, 023h,040h,002h
  1184                                                          db      025h,060h,002h, 027h,080h,002h
  1185                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1186                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1187                                  ;-----------------------------------------------------------------------------------------------------------------------
  1188                                  ;
  1189                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1190                                  ;
  1191                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1192                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1193                                  ;       copy.
  1194                                  ;
  1195                                  ;-----------------------------------------------------------------------------------------------------------------------
  1196                                  section                 dir                                                     ;diskette directory
  1197                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1198                                                          db      020h                                            ;attribute (archive bit set)
  1199                                                          times   10 db 0                                         ;unused
  1200                                                          dw      0h                                              ;time
  1201                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1202                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1203                                                          dw      2                                               ;first cluster
  1204                                                          dd      05400h                                          ;file size
  1205                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1206                                  %endif
  1207                                  %ifdef BUILDCOM
  1208                                  ;=======================================================================================================================
  1209                                  ;
  1210                                  ;       OS.COM
  1211                                  ;
  1212                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1213                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1214                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1215                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1216                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1217                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1218                                  ;
  1219                                  ;       Our loader addressability is set up according to the following diagram.
  1220                                  ;
  1221                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1222                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1223                                  ;                               |  256 = 100h bytes                             |
  1224                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1225                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1226                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1227                                  ;                       007e00  +-----------------------------------------------+
  1228                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1229                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1230                                  ;                               |                                               |
  1231                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1232                                  ;                               |                                               |
  1233                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1234                                  ;                               |  Loader Code                                  |
  1235                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1236                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1237                                  ;
  1238                                  ;=======================================================================================================================
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                  ;
  1241                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1242                                  ;
  1243                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1244                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1245                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1246                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1247                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1248                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1249                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1250                                  ;       registers.
  1251                                  ;
  1252                                  ;-----------------------------------------------------------------------------------------------------------------------
  1253                                                          cpu     8086                                            ;assume minimal CPU
  1254                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1255                                                          bits    16                                              ;this is 16-bit code
  1256 00000000 0E                      Loader                  push    cs                                              ;use the code segment
  1257 00000001 1F                                              pop     ds                                              ;...as our data segment
  1258 00000002 0E                                              push    cs                                              ;use the code segment
  1259 00000003 07                                              pop     es                                              ;...as our extra segment
  1260                                  ;
  1261                                  ;       Write a message to the console so we know we have our addressability established.
  1262                                  ;
  1263 00000004 BE[5B01]                                        mov     si,czStartingMsg                                ;starting message
  1264 00000007 E8A600                                          call    PutTTYString                                    ;display loader message
  1265                                  ;
  1266                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1267                                  ;
  1268 0000000A E88300                                          call    GetCPUType                                      ;AL = cpu type
  1269 0000000D BE[C800]                                        mov     si,czCPUErrorMsg                                ;loader error message
  1270 00000010 3C03                                            cmp     al,3                                            ;80386+?
  1271 00000012 7267                                            jb      LoaderExit                                      ;no, exit with error message
  1272                                                          cpu     386                                             ;allow 80386 instructions
  1273 00000014 BE[3301]                                        mov     si,czCPUOKMsg                                   ;cpu ok message
  1274 00000017 E89600                                          call    PutTTYString                                    ;display message
  1275                                  ;
  1276                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1277                                  ;
  1278 0000001A BE0005                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1279 0000001D 8CC8                                            mov     ax,cs                                           ;AX:SI = gdt source
  1280 0000001F C1C004                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1281 00000022 88C1                                            mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1282 00000024 24F0                                            and     al,0F0h                                         ;AL = phys addr bits 11-0
  1283 00000026 80E10F                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1284 00000029 894432                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1285 0000002C 884C34                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1286 0000002F BE[3C01]                                        mov     si,czGDTOKMsg                                   ;GDT prepared message
  1287 00000032 E87B00                                          call    PutTTYString                                    ;display message
  1288                                  ;
  1289                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1290                                  ;
  1291 00000035 680001                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1292 00000038 07                                              pop     es                                              ;... as target segment
  1293 00000039 31FF                                            xor     di,di                                           ;ES:DI = target address
  1294 0000003B BE0005                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1295 0000003E B90050                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1296 00000041 FC                                              cld                                                     ;forward strings
  1297 00000042 F3A4                                            rep     movsb                                           ;copy kernel image
  1298 00000044 BE[4B01]                                        mov     si,czKernelLoadedMsg                            ;kernel moved message
  1299 00000047 E86600                                          call    PutTTYString                                    ;display message
  1300                                  ;
  1301                                  ;       Switch to protected mode.
  1302                                  ;
  1303 0000004A 31F6                                            xor     si,si                                           ;ES:SI = gdt addr
  1304 0000004C 8ED6                                            mov     ss,si                                           ;protected mode ss
  1305 0000004E BC0010                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1306 00000051 B489                                            mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1307 00000053 BB2820                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1308 00000056 BA1F00                                          mov     dx,001Fh                                        ;outer delay loop count
  1309 00000059 B9FFFF                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1310 0000005C E2FE                                            loop    $                                               ;wait out pending interrupts
  1311 0000005E 4A                                              dec     dx                                              ;restore outer loop count
  1312 0000005F 75F8                                            jnz     .10                                             ;continue outer loop
  1313 00000061 CD15                                            int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1314                                  ;
  1315                                  ;       Enable hardware and maskable interrupts.
  1316                                  ;
  1317 00000063 30C0                                            xor     al,al                                           ;enable all registers code
  1318 00000065 E621                                            out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1319 00000067 E6A1                                            out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1320 00000069 FB                                              sti                                                     ;enable maskable interrupts
  1321                                  ;
  1322                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1323                                  ;
  1324 0000006A 2E0F001E[C000]                                  ltr     [cs:cwLoaderTSS]                                ;load task register
  1325 00000070 2E0F0016[BE00]                                  lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1326 00000076 EA00006800                                      jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1327                                  ;-----------------------------------------------------------------------------------------------------------------------
  1328                                  ;
  1329                                  ;       Routine:        LoaderExit
  1330                                  ;
  1331                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1332                                  ;
  1333                                  ;       In:             DS:SI   string address
  1334                                  ;
  1335                                  ;-----------------------------------------------------------------------------------------------------------------------
  1336 0000007B E83200                  LoaderExit              call    PutTTYString                                    ;display error message
  1337                                  ;
  1338                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1339                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1340                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1341                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1342                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1343                                  ;
  1344 0000007E B401                    .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1345 00000080 CD16                                            int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1346 00000082 7504                                            jnz     .40                                             ;exit if key pressed
  1347 00000084 FB                                              sti                                                     ;enable maskable interrupts
  1348 00000085 F4                                              hlt                                                     ;wait for interrupt
  1349 00000086 EBF6                                            jmp     .30                                             ;repeat until keypress
  1350                                  ;
  1351                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1352                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1353                                  ;       HLT until the system resets.
  1354                                  ;
  1355 00000088 B0FE                    .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1356 0000008A E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1357 0000008C FB                      .50                     sti                                                     ;enable maskable interrupts
  1358 0000008D F4                                              hlt                                                     ;stop until reset, int, nmi
  1359 0000008E EBFC                                            jmp     .50                                             ;loop until restart kicks in
  1360                                  ;-----------------------------------------------------------------------------------------------------------------------
  1361                                  ;
  1362                                  ;       Routine:        GetCPUType
  1363                                  ;
  1364                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1365                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1366                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1367                                  ;
  1368                                  ;       Out:            AX      0 = 808x, v20, etc.
  1369                                  ;                               1 = 80186
  1370                                  ;                               2 = 80286
  1371                                  ;                               3 = 80386
  1372                                  ;
  1373                                  ;-----------------------------------------------------------------------------------------------------------------------
  1374 00000090 B001                    GetCPUType              mov     al,1                                            ;AL = 1
  1375 00000092 B120                                            mov     cl,32                                           ;shift count
  1376 00000094 D2E8                                            shr     al,cl                                           ;try a 32-bit shift
  1377 00000096 08C0                                            or      al,al                                           ;did the shift happen?
  1378 00000098 7415                                            jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1379                                                          cpu     186
  1380 0000009A 54                                              push    sp                                              ;save stack pointer
  1381 0000009B 59                                              pop     cx                                              ;...into cx
  1382 0000009C 39E1                                            cmp     cx,sp                                           ;did sp decrement before push?
  1383 0000009E 750F                                            jne     .10                                             ;yes, cpu is 80186
  1384                                                          cpu     286
  1385 000000A0 40                                              inc     ax                                              ;AX = 2
  1386 000000A1 0F0106[C200]                                    sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1387 000000A6 8A0E[C700]                                      mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1388 000000AA FEC1                                            inc     cl                                              ;was hi-byte of GDTR 0xff?
  1389 000000AC 7401                                            jz      .10                                             ;yes, cpu is 80286
  1390 000000AE 40                                              inc     ax                                              ;AX = 3
  1391 000000AF C3                      .10                     ret                                                     ;return
  1392                                  ;-----------------------------------------------------------------------------------------------------------------------
  1393                                  ;
  1394                                  ;       Routine:        PutTTYString
  1395                                  ;
  1396                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1397                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1398                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1399                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1400                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1401                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1402                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1403                                  ;                       to LODSB is not needed.
  1404                                  ;
  1405                                  ;       In:             DS:SI   address of string
  1406                                  ;
  1407                                  ;       Out:            DF      0
  1408                                  ;                       ZF      1
  1409                                  ;                       AL      0
  1410                                  ;
  1411                                  ;-----------------------------------------------------------------------------------------------------------------------
  1412 000000B0 FC                      PutTTYString            cld                                                     ;forward strings
  1413 000000B1 AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1414 000000B2 84C0                                            test    al,al                                           ;end of string?
  1415 000000B4 7406                                            jz      .20                                             ;... yes, exit our loop
  1416 000000B6 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1417 000000B8 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1418 000000BA EBF5                                            jmp     .10                                             ;repeat until done
  1419 000000BC C3                      .20                     ret                                                     ;return
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  ;
  1422                                  ;       Loader Data
  1423                                  ;
  1424                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1425                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1426                                  ;
  1427                                  ;-----------------------------------------------------------------------------------------------------------------------
  1428 000000BD 90                                              align   2
  1429 000000BE 5000                    cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1430 000000C0 5800                    cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1431 000000C2 00<rept>                cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1432 000000C7 00                      cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1433 000000C8 546865206F70657261-     czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1433 000000D1 74696E672073797374-
  1433 000000DA 656D20726571756972-
  1433 000000E3 657320616E20693338-
  1433 000000EC 36206F72206C617465-
  1433 000000F5 722070726F63657373-
  1433 000000FE 6F722E0D0A         
  1434 00000103 506C65617365207072-                             db      "Please press any key to restart the computer.",13,10,0
  1434 0000010C 65737320616E79206B-
  1434 00000115 657920746F20726573-
  1434 0000011E 746172742074686520-
  1434 00000127 636F6D70757465722E-
  1434 00000130 0D0A00             
  1435 00000133 435055204F4B0D0A00      czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1436 0000013C 474454207072657061-     czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1436 00000145 7265640D0A00       
  1437 0000014B 4B65726E656C206C6F-     czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1437 00000154 616465640D0A00     
  1438 0000015B 5374617274696E6720-     czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1438 00000164 4F530D0A00         
  1439 00000169 00<rept>                                        times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1440                                  ;=======================================================================================================================
  1441                                  ;
  1442                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1443                                  ;
  1444                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1445                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1446                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1447                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1448                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1449                                  ;
  1450                                  ;=======================================================================================================================
  1451                                  ;=======================================================================================================================
  1452                                  ;
  1453                                  ;       Kernel Tables
  1454                                  ;
  1455                                  ;=======================================================================================================================
  1456                                  ;-----------------------------------------------------------------------------------------------------------------------
  1457                                  ;
  1458                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1459                                  ;
  1460                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1461                                  ;       first descriptor must be all nulls.
  1462                                  ;
  1463                                  ;       6   5         4         3         2         1         0
  1464                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1465                                  ;       ----------------------------------------------------------------
  1466                                  ;       h......hffffmmmma......ab......................bn..............n
  1467                                  ;
  1468                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1469                                  ;               ffff                                                            flags
  1470                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1471                                  ;                       a......a                                                access
  1472                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1473                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1474                                  ;
  1475                                  ;       00000000                                                                all areas have base addresses below 2^24
  1476                                  ;               0...                                                            single-byte size granularity
  1477                                  ;               1...                                                            4-kilobyte size granularity
  1478                                  ;               .0..                                                            16-bit default for code segments
  1479                                  ;               .1..                                                            32-bit default for code segments
  1480                                  ;               ..0.                                                            intel-reserved; should be zero
  1481                                  ;               ...0                                                            available for operating system use
  1482                                  ;                   0000                                                        segment is less than 2^16 in size
  1483                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1484                                  ;                       1.......                                                segment is present in memory
  1485                                  ;                       .00.....                                                segment is of privilege level 0
  1486                                  ;                       ...0....                                                segment is of system or gate type
  1487                                  ;                       ...00010                                                local decriptor table (LDT)
  1488                                  ;                       ...01001                                                task state segment (TSS) available
  1489                                  ;                       ...01011                                                task state segment (TSS) busy
  1490                                  ;                       ...10...                                                data segment
  1491                                  ;                       ...10011                                                writable data (accessed)
  1492                                  ;                       ...11...                                                code segment
  1493                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1494                                  ;
  1495                                  ;-----------------------------------------------------------------------------------------------------------------------
  1496                                  section                 gdt                                                     ;global descriptor table
  1497 00000000 0000000000000000                                dq      0000000000000000h                               ;00 required null selector
  1498 00000008 FF07001000934000                                dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1499 00000010 FF07001800934000                                dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1500 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1501 00000020 FF0F00800B934000                                dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1502 00000028 FF0F000000934000                                dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1503 00000030 FFFF0000009B0000                                dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1504 00000038 FFFF0000FF9B0000                                dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1505 00000040 FFFF000400934000                                dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1506 00000048 FF1F0020009B4000                                dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1507 00000050 7F00000F00824000                                dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1508 00000058 7F00800F00894000                                dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1509 00000060 7F00004700824000                                dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1510 00000068 7F00804700894000                                dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1511 00000070 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1512                                  ;-----------------------------------------------------------------------------------------------------------------------
  1513                                  ;
  1514                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1515                                  ;
  1516                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1517                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1518                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1519                                  ;
  1520                                  ;       6   5         4         3         2         1         0
  1521                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1522                                  ;       ----------------------------------------------------------------
  1523                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1524                                  ;
  1525                                  ;       h...h   high-order offset (bits 16-31)
  1526                                  ;       P       present (0=unused interrupt)
  1527                                  ;       zz      descriptor privilege level
  1528                                  ;       S       storage segment (must be zero for IDT)
  1529                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1530                                  ;       S...S   handling code selector in GDT
  1531                                  ;       l...l   lo-order offset (bits 0-15)
  1532                                  ;
  1533                                  ;-----------------------------------------------------------------------------------------------------------------------
  1534                                  section                 idt                                                     ;interrupt descriptor table
  1535                                                          mint    dividebyzero                                    ;00 divide by zero
  1535                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1535 00000000 00004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1536                                                          mint    singlestep                                      ;01 single step
  1536                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1536 00000008 0C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1537                                                          mint    nmi                                             ;02 non-maskable
  1537                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1537 00000010 18004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1538                                                          mint    break                                           ;03 break
  1538                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1538 00000018 24004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1539                                                          mint    into                                            ;04 into
  1539                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1539 00000020 30004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1540                                                          mint    bounds                                          ;05 bounds
  1540                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1540 00000028 3C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1541                                                          mint    badopcode                                       ;06 bad op code
  1541                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1541 00000030 48004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1542                                                          mint    nocoproc                                        ;07 no coprocessor
  1542                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1542 00000038 54004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1543                                                          mint    doublefault                                     ;08 double-fault
  1543                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1543 00000040 60004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1544                                                          mint    operand                                         ;09 operand
  1544                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1544 00000048 6C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1545                                                          mint    badtss                                          ;0a bad TSS
  1545                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1545 00000050 78004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1546                                                          mint    notpresent                                      ;0b not-present
  1546                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1546 00000058 84004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1547                                                          mint    stacklimit                                      ;0c stack limit
  1547                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1547 00000060 90004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1548                                                          mint    protection                                      ;0d general protection fault
  1548                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1548 00000068 9C004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1549                                                          mint    int14                                           ;0e (reserved)
  1549                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1549 00000070 A8004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1550                                                          mint    int15                                           ;0f (reserved)
  1550                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1550 00000078 B4004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1551                                                          mint    coproccalc                                      ;10 (reserved)
  1551                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1551 00000080 C0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1552                                                          mint    int17                                           ;11 (reserved)
  1552                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1552 00000088 CC004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1553                                                          mint    int18                                           ;12 (reserved)
  1553                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1553 00000090 D5004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1554                                                          mint    int19                                           ;13 (reserved)
  1554                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1554 00000098 DE004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1555                                                          mint    int20                                           ;14 (reserved)
  1555                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1555 000000A0 E7004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1556                                                          mint    int21                                           ;15 (reserved)
  1556                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1556 000000A8 F0004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1557                                                          mint    int22                                           ;16 (reserved)
  1557                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1557 000000B0 F9004800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1558                                                          mint    int23                                           ;17 (reserved)
  1558                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1558 000000B8 02014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1559                                                          mint    int24                                           ;18 (reserved)
  1559                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1559 000000C0 0B014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1560                                                          mint    int25                                           ;19 (reserved)
  1560                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1560 000000C8 14014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1561                                                          mint    int26                                           ;1a (reserved)
  1561                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1561 000000D0 1D014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1562                                                          mint    int27                                           ;1b (reserved)
  1562                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1562 000000D8 26014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1563                                                          mint    int28                                           ;1c (reserved)
  1563                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1563 000000E0 2F014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1564                                                          mint    int29                                           ;1d (reserved)
  1564                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1564 000000E8 38014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1565                                                          mint    int30                                           ;1e (reserved)
  1565                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1565 000000F0 41014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1566                                                          mint    int31                                           ;1f (reserved)
  1566                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1566 000000F8 4A014800008E0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1567                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1567                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1567 00000100 31054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1568                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1568                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1568 00000108 81054800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1569                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1569                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1569 00000110 DC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1570                                                          mtrap   com2                                            ;23 IRQ3 com2
  1570                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1570 00000118 DF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1571                                                          mtrap   com1                                            ;24 IRQ4 com1
  1571                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1571 00000120 E2084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1572                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1572                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1572 00000128 E5084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1573                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1573                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1573 00000130 E8084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1574                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1574                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1574 00000138 FC084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1575                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1575                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1575 00000140 FF084800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1576                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1576                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1576 00000148 02094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1577                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1577                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1577 00000150 05094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1578                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1578                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1578 00000158 08094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1579                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1579                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1579 00000160 0B094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1580                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1580                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1580 00000168 0E094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1581                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1581                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1581 00000170 11094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1582                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1582                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1582 00000178 14094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1583                                                          mtrap   svc                                             ;30 OS services
  1583                              <1> _%1 equ ($-$$) / EX86DESCLEN
  1583 00000180 25094800008F0000    <1>  dq ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
  1584 00000188 00<rept>                                        times   2048-($-$$) db 0h                               ;zero fill to end of section
  1585                                  ;=======================================================================================================================
  1586                                  ;
  1587                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1588                                  ;
  1589                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1590                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1591                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1592                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1593                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1594                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1595                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1596                                  ;
  1597                                  ;=======================================================================================================================
  1598                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1599                                                          cpu     386                                             ;allow 80386 instructions
  1600                                                          bits    32                                              ;this is 32-bit code
  1601                                  ;=======================================================================================================================
  1602                                  ;
  1603                                  ;       CPU Interrupt Handlers
  1604                                  ;
  1605                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1606                                  ;       of these interrupts is expanded here to display the contents of registers at the time of the interrupt.
  1607                                  ;
  1608                                  ;=======================================================================================================================
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;       INT0    Divide By Zero
  1612                                  ;
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                                          menter  dividebyzero                                    ;divide by zero
  1614                              <1> ?%1 equ ($-$$)
  1615 00000000 6A00                                            push    0                                               ;store interrupt nbr
  1616 00000002 68[29030000]                                    push    czIntDivideByZero                               ;store message offset
  1617 00000007 E947010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  ;
  1620                                  ;       INT1    Single Step
  1621                                  ;
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                                          menter  singlestep                                      ;single step
  1623                              <1> ?%1 equ ($-$$)
  1624 0000000C 6A01                                            push    1                                               ;store interrupt nbr
  1625 0000000E 68[3A030000]                                    push    czIntSingleStep                                 ;store message offset
  1626 00000013 E93B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1627                                  ;-----------------------------------------------------------------------------------------------------------------------
  1628                                  ;
  1629                                  ;       INT2    Non-Maskable Interrupt
  1630                                  ;
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                                          menter  nmi                                             ;non-maskable
  1632                              <1> ?%1 equ ($-$$)
  1633 00000018 6A02                                            push    2                                               ;store interrupt nbr
  1634 0000001A 68[46030000]                                    push    czIntNonMaskable                                ;store message offset
  1635 0000001F E92F010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT3    Break
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  break                                           ;break
  1641                              <1> ?%1 equ ($-$$)
  1642 00000024 6A03                                            push    3                                               ;store interrupt nbr
  1643 00000026 68[5D030000]                                    push    czIntBreak                                      ;store message offset
  1644 0000002B E923010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1645                                  ;-----------------------------------------------------------------------------------------------------------------------
  1646                                  ;
  1647                                  ;       INT4    Into
  1648                                  ;
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                                          menter  into                                            ;into
  1650                              <1> ?%1 equ ($-$$)
  1651 00000030 6A04                                            push    4                                               ;store interrupt nbr
  1652 00000032 68[63030000]                                    push    czIntInto                                       ;store message offset
  1653 00000037 E917010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                  ;
  1656                                  ;       INT5    Bounds
  1657                                  ;
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                                          menter  bounds                                          ;bounds
  1659                              <1> ?%1 equ ($-$$)
  1660 0000003C 6A05                                            push    5                                               ;store interrupt nbr
  1661 0000003E 68[68030000]                                    push    czIntBounds                                     ;store message offset
  1662 00000043 E90B010000                                      jmp     ReportInterrupt                                 ;report interrupt
  1663                                  ;-----------------------------------------------------------------------------------------------------------------------
  1664                                  ;
  1665                                  ;       INT6    Bad Operation Code
  1666                                  ;
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                                          menter  badopcode                                       ;bad opcode interrupt
  1668                              <1> ?%1 equ ($-$$)
  1669 00000048 6A06                                            push    6                                               ;store interrupt nbr
  1670 0000004A 68[6F030000]                                    push    czIntBadOpCode                                  ;store message offset
  1671 0000004F E9FF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1672                                  ;-----------------------------------------------------------------------------------------------------------------------
  1673                                  ;
  1674                                  ;       INT7    No Coprocessor
  1675                                  ;
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1677                              <1> ?%1 equ ($-$$)
  1678 00000054 6A07                                            push    7                                               ;store interrupt nbr
  1679 00000056 68[82030000]                                    push    czIntNoCoprocessor                              ;store message offset
  1680 0000005B E9F3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1681                                  ;-----------------------------------------------------------------------------------------------------------------------
  1682                                  ;
  1683                                  ;       INT8    Double Fault
  1684                                  ;
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                                          menter  doublefault                                     ;doublefault interrupt
  1686                              <1> ?%1 equ ($-$$)
  1687 00000060 6A08                                            push    8                                               ;store interrupt nbr
  1688 00000062 68[91030000]                                    push    czIntDoubleFault                                ;store message offset
  1689 00000067 E9E7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1690                                  ;-----------------------------------------------------------------------------------------------------------------------
  1691                                  ;
  1692                                  ;       INT9    Operand
  1693                                  ;
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                                          menter  operand                                         ;operand interrupt
  1695                              <1> ?%1 equ ($-$$)
  1696 0000006C 6A09                                            push    9                                               ;store interrupt nbr
  1697 0000006E 68[9E030000]                                    push    czIntOperand                                    ;store message offset
  1698 00000073 E9DB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT10   Bad Task State Segment
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  badtss                                          ;bad TSS interrupt
  1704                              <1> ?%1 equ ($-$$)
  1705 00000078 6A0A                                            push    10                                              ;store interrupt nbr
  1706 0000007A 68[A6030000]                                    push    czIntBadTSS                                     ;store message offset
  1707 0000007F E9CF000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1708                                  ;-----------------------------------------------------------------------------------------------------------------------
  1709                                  ;
  1710                                  ;       INT11   Not Present
  1711                                  ;
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                                          menter  notpresent                                      ;not present interrupt
  1713                              <1> ?%1 equ ($-$$)
  1714 00000084 6A0B                                            push    11                                              ;store interrupt nbr
  1715 00000086 68[BD030000]                                    push    czIntNotPresent                                 ;store message offset
  1716 0000008B E9C3000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                  ;
  1719                                  ;       INT12   Stack Limit
  1720                                  ;
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                                          menter  stacklimit                                      ;stack limit interrupt
  1722                              <1> ?%1 equ ($-$$)
  1723 00000090 6A0C                                            push    12                                              ;store interrupt nbr
  1724 00000092 68[C9030000]                                    push    czIntStackLimit                                 ;store message offset
  1725 00000097 E9B7000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1726                                  ;-----------------------------------------------------------------------------------------------------------------------
  1727                                  ;
  1728                                  ;       INT13   General Protection Fault
  1729                                  ;
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                                          menter  protection                                      ;protection fault interrupt
  1731                              <1> ?%1 equ ($-$$)
  1732 0000009C 6A0D                                            push    13                                              ;store interrupt nbr
  1733 0000009E 68[D5030000]                                    push    czIntProtection                                 ;store message offset
  1734 000000A3 E9AB000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1735                                  ;-----------------------------------------------------------------------------------------------------------------------
  1736                                  ;
  1737                                  ;       INT14   Reserved
  1738                                  ;
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                                          menter  int14                                           ;(reserved)
  1740                              <1> ?%1 equ ($-$$)
  1741 000000A8 6A0E                                            push    14                                              ;store interrupt nbr
  1742 000000AA 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1743 000000AF E99F000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1744                                  ;-----------------------------------------------------------------------------------------------------------------------
  1745                                  ;
  1746                                  ;       INT15   Reserved
  1747                                  ;
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                                          menter  int15                                           ;(reserved)
  1749                              <1> ?%1 equ ($-$$)
  1750 000000B4 6A0F                                            push    15                                              ;store interrupt nbr
  1751 000000B6 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1752 000000BB E993000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1753                                  ;-----------------------------------------------------------------------------------------------------------------------
  1754                                  ;
  1755                                  ;       INT16   Coprocessor Calculation
  1756                                  ;
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                                          menter  coproccalc                                      ;coprocessor calculation
  1758                              <1> ?%1 equ ($-$$)
  1759 000000C0 6A10                                            push    16                                              ;store interrupt nbr
  1760 000000C2 68[EE030000]                                    push    czIntCoprocessorCalc                            ;store message offset
  1761 000000C7 E987000000                                      jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT17   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int17                                           ;(reserved)
  1767                              <1> ?%1 equ ($-$$)
  1768 000000CC 6A11                                            push    17                                              ;store interrupt nbr
  1769 000000CE 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1770 000000D3 EB7E                                            jmp     ReportInterrupt                                 ;report interrupt
  1771                                  ;-----------------------------------------------------------------------------------------------------------------------
  1772                                  ;
  1773                                  ;       INT18   Reserved
  1774                                  ;
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                                          menter  int18                                           ;(reserved)
  1776                              <1> ?%1 equ ($-$$)
  1777 000000D5 6A12                                            push    18                                              ;store interrupt nbr
  1778 000000D7 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1779 000000DC EB75                                            jmp     ReportInterrupt                                 ;report interrupt
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                  ;
  1782                                  ;       INT19   Reserved
  1783                                  ;
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                                          menter  int19                                           ;(reserved)
  1785                              <1> ?%1 equ ($-$$)
  1786 000000DE 6A13                                            push    19                                              ;store interrupt nbr
  1787 000000E0 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1788 000000E5 EB6C                                            jmp     ReportInterrupt                                 ;report interrupt
  1789                                  ;-----------------------------------------------------------------------------------------------------------------------
  1790                                  ;
  1791                                  ;       INT20   Reserved
  1792                                  ;
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                                          menter  int20                                           ;(reserved)
  1794                              <1> ?%1 equ ($-$$)
  1795 000000E7 6A14                                            push    20                                              ;store interrupt nbr
  1796 000000E9 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1797 000000EE EB63                                            jmp     ReportInterrupt                                 ;report interrupt
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;       INT21   Reserved
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                                          menter  int21                                           ;(reserved)
  1803                              <1> ?%1 equ ($-$$)
  1804 000000F0 6A15                                            push    21                                              ;store interrupt nbr
  1805 000000F2 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1806 000000F7 EB5A                                            jmp     ReportInterrupt                                 ;report interrupt
  1807                                  ;-----------------------------------------------------------------------------------------------------------------------
  1808                                  ;
  1809                                  ;       INT22   Reserved
  1810                                  ;
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                                          menter  int22                                           ;(reserved)
  1812                              <1> ?%1 equ ($-$$)
  1813 000000F9 6A16                                            push    22                                              ;store interrupt nbr
  1814 000000FB 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1815 00000100 EB51                                            jmp     ReportInterrupt                                 ;report interrupt
  1816                                  ;-----------------------------------------------------------------------------------------------------------------------
  1817                                  ;
  1818                                  ;       INT23   Reserved
  1819                                  ;
  1820                                  ;-----------------------------------------------------------------------------------------------------------------------
  1821                                                          menter  int23                                           ;(reserved)
  1821                              <1> ?%1 equ ($-$$)
  1822 00000102 6A17                                            push    23                                              ;store interrupt nbr
  1823 00000104 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1824 00000109 EB48                                            jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       INT24   Reserved
  1828                                  ;
  1829                                  ;-----------------------------------------------------------------------------------------------------------------------
  1830                                                          menter  int24                                           ;(reserved)
  1830                              <1> ?%1 equ ($-$$)
  1831 0000010B 6A18                                            push    24                                              ;store interrupt nbr
  1832 0000010D 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1833 00000112 EB3F                                            jmp     ReportInterrupt                                 ;report interrupt
  1834                                  ;-----------------------------------------------------------------------------------------------------------------------
  1835                                  ;
  1836                                  ;       INT25   Reserved
  1837                                  ;
  1838                                  ;-----------------------------------------------------------------------------------------------------------------------
  1839                                                          menter  int25                                           ;(reserved)
  1839                              <1> ?%1 equ ($-$$)
  1840 00000114 6A19                                            push    25                                              ;store interrupt nbr
  1841 00000116 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1842 0000011B EB36                                            jmp     ReportInterrupt                                 ;report interrupt
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       INT26   Reserved
  1846                                  ;
  1847                                  ;-----------------------------------------------------------------------------------------------------------------------
  1848                                                          menter  int26                                           ;(reserved)
  1848                              <1> ?%1 equ ($-$$)
  1849 0000011D 6A1A                                            push    26                                              ;store interrupt nbr
  1850 0000011F 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1851 00000124 EB2D                                            jmp     ReportInterrupt                                 ;report interrupt
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;       INT27   Reserved
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                                          menter  int27                                           ;(reserved)
  1857                              <1> ?%1 equ ($-$$)
  1858 00000126 6A1B                                            push    27                                              ;store interrupt nbr
  1859 00000128 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1860 0000012D EB24                                            jmp     ReportInterrupt                                 ;report interrupt
  1861                                  ;-----------------------------------------------------------------------------------------------------------------------
  1862                                  ;
  1863                                  ;       INT28   Reserved
  1864                                  ;
  1865                                  ;-----------------------------------------------------------------------------------------------------------------------
  1866                                                          menter  int28                                           ;(reserved)
  1866                              <1> ?%1 equ ($-$$)
  1867 0000012F 6A1C                                            push    28                                              ;store interrupt nbr
  1868 00000131 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1869 00000136 EB1B                                            jmp     ReportInterrupt                                 ;report interrupt
  1870                                  ;-----------------------------------------------------------------------------------------------------------------------
  1871                                  ;
  1872                                  ;       INT29   Reserved
  1873                                  ;
  1874                                  ;-----------------------------------------------------------------------------------------------------------------------
  1875                                                          menter  int29                                           ;(reserved)
  1875                              <1> ?%1 equ ($-$$)
  1876 00000138 6A1D                                            push    29                                              ;store interrupt nbr
  1877 0000013A 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1878 0000013F EB12                                            jmp     ReportInterrupt                                 ;report interrupt
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  ;
  1881                                  ;       INT30   Reserved
  1882                                  ;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                                          menter  int30                                           ;(reserved)
  1884                              <1> ?%1 equ ($-$$)
  1885 00000141 6A1E                                            push    30                                              ;store interrupt nbr
  1886 00000143 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1887 00000148 EB09                                            jmp     ReportInterrupt                                 ;report interrupt
  1888                                  ;-----------------------------------------------------------------------------------------------------------------------
  1889                                  ;
  1890                                  ;       INT31   Reserved
  1891                                  ;
  1892                                  ;-----------------------------------------------------------------------------------------------------------------------
  1893                                                          menter  int31                                           ;(reserved)
  1893                              <1> ?%1 equ ($-$$)
  1894 0000014A 6A1F                                            push    31                                              ;store interrupt nbr
  1895 0000014C 68[06040000]                                    push    czIntReserved                                   ;store message offset
  1896 00000151 EB00                                            jmp     ReportInterrupt                                 ;report interrupt
  1897                                  ;-----------------------------------------------------------------------------------------------------------------------
  1898                                  ;
  1899                                  ;       Routine:        ReportInterrupt
  1900                                  ;
  1901                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1902                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1903                                  ;
  1904                                  ;       In:             [ESP+16]        EFLAGS                                  stored by interrupt call
  1905                                  ;                       [ESP+12]        CS                                      stored by interrupt call
  1906                                  ;                       [ESP+8]         EIP                                     stored by interrupt call
  1907                                  ;                       [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1908                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1909                                  ;
  1910                                  ;       Out:            N/A             This routine does not exit.
  1911                                  ;
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913 00000153 1E                      ReportInterrupt         push    ds                                              ;save DS at time of interrupt
  1914 00000154 06                                              push    es                                              ;save ES at time of interrupt
  1915 00000155 60                                              pushad                                                  ;save EAX,ECX,EDX,EBX,EBP,ESP,ESI,EDI
  1916 00000156 89E5                                            mov     ebp,esp                                         ;EBP --> [EDI]
  1917                                  ;
  1918                                  ;       Addressability to registers at the time of the interrupt is now established as:
  1919                                  ;
  1920                                  ;                       [EBP+56]        EFLAGS
  1921                                  ;                       [EBP+52]        CS
  1922                                  ;                       [EBP+48]        EIP
  1923                                  ;                       [EBP+44]        interrupt number (0-31)
  1924                                  ;                       [EBP+40]        error message address
  1925                                  ;                       [EBP+36]        DS
  1926                                  ;                       [EBP+32]        ES
  1927                                  ;                       [EBP+28]        EAX
  1928                                  ;                       [EBP+24]        ECX
  1929                                  ;                       [EBP+20]        EDX
  1930                                  ;                       [EBP+16]        EBX
  1931                                  ;                       [EBP+12]        ESP
  1932                                  ;                       [EBP+8]         EBP
  1933                                  ;                       [EBP+4]         ESI
  1934                                  ;                       [EBP+0]         EDI
  1935                                  ;
  1936 00000158 0E                                              push    cs                                              ;load code selector ...
  1937 00000159 1F                                              pop     ds                                              ;... into DS
  1938 0000015A 6A20                                            push    EGDTCGA                                         ;load CGA memory selector ...
  1939 0000015C 07                                              pop     es                                              ;... into ES
  1940                                  ;
  1941                                  ;       Display the interrupt report boundary box
  1942                                  ;
  1943 0000015D B10D                                            mov     cl,13                                           ;column
  1944 0000015F B506                                            mov     ch,6                                            ;row
  1945 00000161 B232                                            mov     dl,50                                           ;width
  1946 00000163 B608                                            mov     dh,8                                            ;height
  1947 00000165 B707                                            mov     bh,07h                                          ;attribute
  1948 00000167 E84C030000                                      call    DrawTextDialogBox                               ;draw text dialog box
  1949                                  ;
  1950                                  ;       Display the report header
  1951                                  ;
  1952 0000016C B10F                                            mov     cl,15                                           ;column
  1953 0000016E B507                                            mov     ch,7                                            ;row
  1954 00000170 BE[0F040000]                                    mov     esi,czIntHeader                                 ;interrupt message header
  1955 00000175 E8560B0000                                      call    SetConsoleString                                ;draw text string
  1956                                  ;
  1957                                  ;       Display the interrupt description label
  1958                                  ;
  1959 0000017A B10F                                            mov     cl,15                                           ;column
  1960 0000017C B508                                            mov     ch,8                                            ;row
  1961 0000017E BE[3E040000]                                    mov     esi,czIntLabel                                  ;interrupt message description lead
  1962 00000183 E8480B0000                                      call    SetConsoleString                                ;draw text string
  1963                                  ;
  1964                                  ;       Display the interrupt number
  1965                                  ;
  1966 00000188 8B452C                                          mov     eax,[ebp+44]                                    ;interrupt number
  1967 0000018B B11A                                            mov     cl,26                                           ;column
  1968 0000018D B508                                            mov     ch,8                                            ;row
  1969 0000018F E806090000                                      call    PutConsoleHexByte                               ;draw ASCII hex byte
  1970                                  ;
  1971                                  ;       Display the interrupt name
  1972                                  ;
  1973 00000194 B11D                                            mov     cl,29                                           ;column
  1974 00000196 B508                                            mov     ch,8                                            ;row
  1975 00000198 8B7528                                          mov     esi,[ebp+40]                                    ;interrupt-specific message
  1976 0000019B E8300B0000                                      call    SetConsoleString                                ;display interrupt description
  1977                                  ;
  1978                                  ;       Display the register values header
  1979                                  ;
  1980 000001A0 B10F                                            mov     cl,15                                           ;column
  1981 000001A2 B50A                                            mov     ch,10                                           ;row
  1982 000001A4 BE[4A040000]                                    mov     esi,czIntRegsHeader                             ;interrupt registers header
  1983 000001A9 E8220B0000                                      call    SetConsoleString                                ;draw text string
  1984                                  ;
  1985                                  ;       Display the EAX register label and value
  1986                                  ;
  1987 000001AE B10F                                            mov     cl,15                                           ;column
  1988 000001B0 B50B                                            mov     ch,11                                           ;row
  1989 000001B2 BE[72040000]                                    mov     esi,czIntEAX                                    ;register EAX label
  1990 000001B7 E8140B0000                                      call    SetConsoleString                                ;draw label
  1991 000001BC 8B451C                                          mov     eax,[ebp+28]                                    ;EAX value at interrupt
  1992 000001BF B113                                            mov     cl,19                                           ;column
  1993 000001C1 B50B                                            mov     ch,11                                           ;row
  1994 000001C3 E8EC080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  1995                                  ;
  1996                                  ;       Display the ECX register label and value
  1997                                  ;
  1998 000001C8 B10F                                            mov     cl,15                                           ;column
  1999 000001CA B50C                                            mov     ch,12                                           ;row
  2000 000001CC BE[77040000]                                    mov     esi,czIntECX                                    ;label
  2001 000001D1 E8FA0A0000                                      call    SetConsoleString                                ;draw label
  2002 000001D6 8B4518                                          mov     eax,[ebp+24]                                    ;ECX value at interrupt
  2003 000001D9 B113                                            mov     cl,19                                           ;column
  2004 000001DB B50C                                            mov     ch,12                                           ;row
  2005 000001DD E8D2080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2006                                  ;
  2007                                  ;       Display the EDX register label and value
  2008                                  ;
  2009 000001E2 B10F                                            mov     cl,15                                           ;column
  2010 000001E4 B50D                                            mov     ch,13                                           ;row
  2011 000001E6 BE[7C040000]                                    mov     esi,czIntEDX                                    ;label
  2012 000001EB E8E00A0000                                      call    SetConsoleString                                ;draw label
  2013 000001F0 8B4514                                          mov     eax,[ebp+20]                                    ;EDX value at interrupt
  2014 000001F3 B113                                            mov     cl,19                                           ;column
  2015 000001F5 B50D                                            mov     ch,13                                           ;row
  2016 000001F7 E8B8080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2017                                  ;
  2018                                  ;       Display the EBX register label and value
  2019                                  ;
  2020 000001FC B10F                                            mov     cl,15                                           ;column
  2021 000001FE B50E                                            mov     ch,14                                           ;row
  2022 00000200 BE[81040000]                                    mov     esi,czIntEBX                                    ;label
  2023 00000205 E8C60A0000                                      call    SetConsoleString                                ;draw label
  2024 0000020A 8B4510                                          mov     eax,[ebp+16]                                    ;EBX value at interrupt
  2025 0000020D B113                                            mov     cl,19                                           ;column
  2026 0000020F B50E                                            mov     ch,14                                           ;row
  2027 00000211 E89E080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2028                                  ;
  2029                                  ;       Display the ESI register label and value
  2030                                  ;
  2031 00000216 B11D                                            mov     cl,29                                           ;column
  2032 00000218 B50B                                            mov     ch,11                                           ;row
  2033 0000021A BE[86040000]                                    mov     esi,czIntESI                                    ;label
  2034 0000021F E8AC0A0000                                      call    SetConsoleString                                ;draw label
  2035 00000224 8B4504                                          mov     eax,[ebp+4]                                     ;ESI
  2036 00000227 B121                                            mov     cl,33                                           ;column
  2037 00000229 B50B                                            mov     ch,11                                           ;row
  2038 0000022B E884080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2039                                  ;
  2040                                  ;       Display the EDI register label and value
  2041                                  ;
  2042 00000230 B11D                                            mov     cl,29                                           ;column
  2043 00000232 B50C                                            mov     ch,12                                           ;row
  2044 00000234 BE[8B040000]                                    mov     esi,czIntEDI                                    ;label
  2045 00000239 E8920A0000                                      call    SetConsoleString                                ;draw label
  2046 0000023E 8B4500                                          mov     eax,[ebp+0]                                     ;EDI
  2047 00000241 B121                                            mov     cl,33                                           ;column
  2048 00000243 B50C                                            mov     ch,12                                           ;row
  2049 00000245 E86A080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2050                                  ;
  2051                                  ;       Display the EBP register label and value
  2052                                  ;
  2053 0000024A B11D                                            mov     cl,29                                           ;column
  2054 0000024C B50D                                            mov     ch,13                                           ;row
  2055 0000024E BE[90040000]                                    mov     esi,czIntEBP                                    ;label
  2056 00000253 E8780A0000                                      call    SetConsoleString                                ;draw label
  2057 00000258 8B4508                                          mov     eax,[ebp+8]                                     ;EBP
  2058 0000025B B121                                            mov     cl,33                                           ;column
  2059 0000025D B50D                                            mov     ch,13                                           ;row
  2060 0000025F E850080000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2061                                  ;
  2062                                  ;       Display the DS register label and value
  2063                                  ;
  2064 00000264 B12A                                            mov     cl,42                                           ;column
  2065 00000266 B50B                                            mov     ch,11                                           ;row
  2066 00000268 BE[9A040000]                                    mov     esi,czIntDS                                     ;label
  2067 0000026D E85E0A0000                                      call    SetConsoleString                                ;draw label
  2068 00000272 31C0                                            xor     eax,eax                                         ;zero register
  2069 00000274 668B4524                                        mov     ax,[ebp+36]                                     ;DS
  2070 00000278 B12E                                            mov     cl,46                                           ;column
  2071 0000027A B50B                                            mov     ch,11                                           ;row
  2072 0000027C E843080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2073                                  ;
  2074                                  ;       Display the ES register label and value
  2075                                  ;
  2076 00000281 B12A                                            mov     cl,42                                           ;column
  2077 00000283 B50C                                            mov     ch,12                                           ;row
  2078 00000285 BE[9F040000]                                    mov     esi,czIntES                                     ;label
  2079 0000028A E8410A0000                                      call    SetConsoleString                                ;draw label
  2080 0000028F 31C0                                            xor     eax,eax                                         ;zero register
  2081 00000291 668B4520                                        mov     ax,[ebp+32]                                     ;ES
  2082 00000295 B12E                                            mov     cl,46                                           ;column
  2083 00000297 B50C                                            mov     ch,12                                           ;row
  2084 00000299 E826080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2085                                  ;
  2086                                  ;       Display the SS register label and value
  2087                                  ;
  2088 0000029E B12A                                            mov     cl,42                                           ;column
  2089 000002A0 B50D                                            mov     ch,13                                           ;row
  2090 000002A2 BE[A4040000]                                    mov     esi,czIntSS                                     ;label
  2091 000002A7 E8240A0000                                      call    SetConsoleString                                ;draw label
  2092 000002AC 31C0                                            xor     eax,eax                                         ;zero register
  2093 000002AE 668CD0                                          mov     ax,ss                                           ;SS
  2094 000002B1 B12E                                            mov     cl,46                                           ;column
  2095 000002B3 B50D                                            mov     ch,13                                           ;row
  2096 000002B5 E80A080000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2097                                  ;
  2098                                  ;       Display the CS register lable and value
  2099                                  ;
  2100 000002BA B12A                                            mov     cl,42                                           ;column
  2101 000002BC B50E                                            mov     ch,14                                           ;row
  2102 000002BE BE[A9040000]                                    mov     esi,czIntCS                                     ;label
  2103 000002C3 E8080A0000                                      call    SetConsoleString                                ;draw label
  2104 000002C8 31C0                                            xor     eax,eax                                         ;zero register
  2105 000002CA 668B4534                                        mov     ax,[ebp+52]                                     ;CS
  2106 000002CE B12E                                            mov     cl,46                                           ;column
  2107 000002D0 B50E                                            mov     ch,14                                           ;row
  2108 000002D2 E8ED070000                                      call    PutConsoleHexWord                               ;draw ASCII hex word
  2109                                  ;
  2110                                  ;       Display the EFLAGS register label and value
  2111                                  ;
  2112 000002D7 B133                                            mov     cl,51                                           ;column
  2113 000002D9 B50B                                            mov     ch,11                                           ;row
  2114 000002DB BE[AE040000]                                    mov     esi,czIntEFLAGS                                 ;label
  2115 000002E0 E8EB090000                                      call    SetConsoleString                                ;draw label
  2116 000002E5 8B4538                                          mov     eax,[ebp+56]                                    ;EFLAGS
  2117 000002E8 B137                                            mov     cl,55                                           ;column
  2118 000002EA B50B                                            mov     ch,11                                           ;row
  2119 000002EC E8C3070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2120                                  ;
  2121                                  ;       Display the ESP register label and value
  2122                                  ;
  2123 000002F1 B133                                            mov     cl,51                                           ;column
  2124 000002F3 B50D                                            mov     ch,13                                           ;row
  2125 000002F5 BE[95040000]                                    mov     esi,czIntESP                                    ;label
  2126 000002FA E8D1090000                                      call    SetConsoleString                                ;draw label
  2127 000002FF 8B450C                                          mov     eax,[ebp+12]                                    ;ESP
  2128 00000302 B137                                            mov     cl,55                                           ;column
  2129 00000304 B50D                                            mov     ch,13                                           ;row
  2130 00000306 E8A9070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2131                                  ;
  2132                                  ;       Display the EIP register label and value
  2133                                  ;
  2134 0000030B B133                                            mov     cl,51                                           ;column
  2135 0000030D B50E                                            mov     ch,14                                           ;row
  2136 0000030F BE[B3040000]                                    mov     esi,czIntEIP                                    ;label
  2137 00000314 E8B7090000                                      call    SetConsoleString                                ;draw label
  2138 00000319 8B4530                                          mov     eax,[ebp+48]                                    ;EIP lo-order 32-bits
  2139 0000031C B137                                            mov     cl,55                                           ;column
  2140 0000031E B50E                                            mov     ch,14                                           ;row
  2141 00000320 E88F070000                                      call    PutConsoleHexDword                              ;draw ASCII hex doubleword
  2142                                  ;
  2143                                  ;       Halt and loop until reset
  2144                                  ;
  2145 00000325 FB                      .10                     sti                                                     ;enable maskable interrupts
  2146 00000326 F4                                              hlt                                                     ;halt processor
  2147 00000327 EBFC                                            jmp     .10                                             ;resume on interrupt
  2148                                  ;-----------------------------------------------------------------------------------------------------------------------
  2149                                  ;
  2150                                  ;       Processor Interrupt Name Strings
  2151                                  ;
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153 00000329 4469766973696F6E20-     czIntDivideByZero       db      "Division by zero",0
  2153 00000332 6279207A65726F00   
  2154 0000033A 53696E676C65207374-     czIntSingleStep         db      "Single step",0
  2154 00000343 657000             
  2155 00000346 4E6F6E2D6D61736B61-     czIntNonMaskable        db      "Non-maskable interrupt",0
  2155 0000034F 626C6520696E746572-
  2155 00000358 7275707400         
  2156 0000035D 427265616B00            czIntBreak              db      "Break",0
  2157 00000363 496E746F00              czIntInto               db      "Into",0
  2158 00000368 426F756E647300          czIntBounds             db      "Bounds",0
  2159 0000036F 426164204F70657261-     czIntBadOpCode          db      "Bad Operation Code",0
  2159 00000378 74696F6E20436F6465-
  2159 00000381 00                 
  2160 00000382 4E6F20436F70726F63-     czIntNoCoprocessor      db      "No Coprocessor",0
  2160 0000038B 6573736F7200       
  2161 00000391 446F75626C65204661-     czIntDoubleFault        db      "Double Fault",0
  2161 0000039A 756C7400           
  2162 0000039E 4F706572616E6400        czIntOperand            db      "Operand",0
  2163 000003A6 426164205461736B20-     czIntBadTSS             db      "Bad Task State Segment",0
  2163 000003AF 537461746520536567-
  2163 000003B8 6D656E7400         
  2164 000003BD 4E6F74205072657365-     czIntNotPresent         db      "Not Present",0
  2164 000003C6 6E7400             
  2165 000003C9 537461636B204C696D-     czIntStackLimit         db      "Stack Limit",0
  2165 000003D2 697400             
  2166 000003D5 47656E6572616C2050-     czIntProtection         db      "General Protection Fault",0
  2166 000003DE 726F74656374696F6E-
  2166 000003E7 204661756C7400     
  2167 000003EE 436F70726F63657373-     czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  2167 000003F7 6F722043616C63756C-
  2167 00000400 6174696F6E00       
  2168 00000406 526573657276656400      czIntReserved           db      "Reserved",0
  2169                                  ;-----------------------------------------------------------------------------------------------------------------------
  2170                                  ;
  2171                                  ;       Processor Interrupt Handling Strings
  2172                                  ;
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174 0000040F 416E20756E68616E64-     czIntHeader             db      "An unhandled processor interrupt has occurred:",0
  2174 00000418 6C65642070726F6365-
  2174 00000421 73736F7220696E7465-
  2174 0000042A 727275707420686173-
  2174 00000433 206F63637572726564-
  2174 0000043C 3A00               
  2175 0000043E 496E74657272757074-     czIntLabel              db      "Interrupt #",0
  2175 00000447 202300             
  2176 0000044A 526567697374657273-     czIntRegsHeader         db      "Registers at the time of the interrupt:",0
  2176 00000453 206174207468652074-
  2176 0000045C 696D65206F66207468-
  2176 00000465 6520696E7465727275-
  2176 0000046E 70743A00           
  2177 00000472 4541583A00              czIntEAX                db      "EAX:",0
  2178 00000477 4543583A00              czIntECX                db      "ECX:",0
  2179 0000047C 4544583A00              czIntEDX                db      "EDX:",0
  2180 00000481 4542583A00              czIntEBX                db      "EBX:",0
  2181 00000486 4553493A00              czIntESI                db      "ESI:",0
  2182 0000048B 4544493A00              czIntEDI                db      "EDI:",0
  2183 00000490 4542503A00              czIntEBP                db      "EBP:",0
  2184 00000495 4553503A00              czIntESP                db      "ESP:",0
  2185 0000049A 2044533A00              czIntDS                 db      " DS:",0
  2186 0000049F 2045533A00              czIntES                 db      " ES:",0
  2187 000004A4 2053533A00              czIntSS                 db      " SS:",0
  2188 000004A9 2043533A00              czIntCS                 db      " CS:",0
  2189 000004AE 464C473A00              czIntEFLAGS             db      "FLG:",0
  2190 000004B3 4549503A00              czIntEIP                db      "EIP:",0
  2191                                  ;-----------------------------------------------------------------------------------------------------------------------
  2192                                  ;
  2193                                  ;       Routine:        DrawTextDialogBox
  2194                                  ;
  2195                                  ;       Description:    This routine opens a text-mode dialog box with an ASCII border.
  2196                                  ;
  2197                                  ;       In:             CL      upper left column (0-79)
  2198                                  ;                       CH      upper left row (0-24)
  2199                                  ;                       DL      column width, excluding border
  2200                                  ;                       DH      row height, excluding border
  2201                                  ;                       BH      color attribute
  2202                                  ;
  2203                                  ;-----------------------------------------------------------------------------------------------------------------------
  2204 000004B8 51                      DrawTextDialogBox       push    ecx                                             ;save non-volatile regs
  2205 000004B9 56                                              push    esi                                             ;
  2206 000004BA 57                                              push    edi                                             ;
  2207 000004BB 06                                              push    es                                              ;
  2208 000004BC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  2209 000004BE 07                                              pop     es                                              ;... into ES
  2210                                  ;
  2211                                  ;       Compute target display offset
  2212                                  ;
  2213 000004BF 31C0                                            xor     eax,eax                                         ;zero register
  2214 000004C1 88E8                                            mov     al,ch                                           ;row
  2215 000004C3 B4A0                                            mov     ah,ECONROWBYTES                                 ;mulitplicand
  2216 000004C5 F6E4                                            mul     ah                                              ;row offset
  2217 000004C7 00C8                                            add     al,cl                                           ;add column
  2218 000004C9 80D400                                          adc     ah,0                                            ;add overflow
  2219 000004CC 00C8                                            add     al,cl                                           ;add column
  2220 000004CE 80D400                                          adc     ah,0                                            ;add overflow
  2221 000004D1 89C7                                            mov     edi,eax                                         ;target row offset
  2222                                  ;
  2223                                  ;       Display top border row
  2224                                  ;
  2225 000004D3 57                                              push    edi                                             ;save target row offset
  2226 000004D4 88FC                                            mov     ah,bh                                           ;attribute
  2227 000004D6 B0DA                                            mov     al,EASCIIBORDSGLUPRLFT                          ;upper-left single border
  2228 000004D8 66AB                                            stosw                                                   ;display character and attribute
  2229 000004DA B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2230 000004DC 31C9                                            xor     ecx,ecx                                         ;zero register
  2231 000004DE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2232 000004E0 F366AB                                          rep     stosw                                           ;display horizontal border
  2233 000004E3 B0BF                                            mov     al,EASCIIBORDSGLUPRRGT                          ;upper-right single border
  2234 000004E5 66AB                                            stosw                                                   ;display character and attribute
  2235 000004E7 5F                                              pop     edi                                             ;restore target row offset
  2236 000004E8 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2237                                  ;
  2238                                  ;       Display dialog box body rows
  2239                                  ;
  2240 000004EE 31C9                                            xor     ecx,ecx                                         ;zero register
  2241 000004F0 88F1                                            mov     cl,dh                                           ;height, excluding border
  2242 000004F2 51                      .10                     push    ecx                                             ;save remaining rows
  2243 000004F3 57                                              push    edi                                             ;save target row offset
  2244 000004F4 88FC                                            mov     ah,bh                                           ;attribute
  2245 000004F6 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2246 000004F8 66AB                                            stosw                                                   ;display character and attribute
  2247 000004FA B020                                            mov     al,EASCIISPACE                                  ;space
  2248 000004FC 31C9                                            xor     ecx,ecx                                         ;zero register
  2249 000004FE 88D1                                            mov     cl,dl                                           ;width, excluding border
  2250 00000500 F366AB                                          rep     stosw                                           ;display row
  2251 00000503 B0B3                                            mov     al,EASCIIBORDSGLVERT                            ;vertical single border
  2252 00000505 66AB                                            stosw                                                   ;display character and attribute
  2253 00000507 5F                                              pop     edi                                             ;restore target row offset
  2254 00000508 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2255 0000050E 59                                              pop     ecx                                             ;remaining rows
  2256 0000050F E2E1                                            loop    .10                                             ;next row
  2257                                  ;
  2258                                  ;       Display bottom border row
  2259                                  ;
  2260 00000511 57                                              push    edi                                             ;save target row offset
  2261 00000512 88FC                                            mov     ah,bh                                           ;attribute
  2262 00000514 B0C0                                            mov     al,EASCIIBORDSGLLWRLFT                          ;lower-left single border
  2263 00000516 66AB                                            stosw                                                   ;display character and attribute
  2264 00000518 B0C4                                            mov     al,EASCIIBORDSGLHORZ                            ;horizontal single border
  2265 0000051A 31C9                                            xor     ecx,ecx                                         ;zero register
  2266 0000051C 88D1                                            mov     cl,dl                                           ;width, excluding border
  2267 0000051E F366AB                                          rep     stosw                                           ;display horizontal border
  2268 00000521 B0D9                                            mov     al,EASCIIBORDSGLLWRRGT                          ;lower-right single border
  2269 00000523 66AB                                            stosw                                                   ;display character and attribute
  2270 00000525 5F                                              pop     edi                                             ;restore target row offset
  2271 00000526 81C7A0000000                                    add     edi,ECONROWBYTES                                ;next row
  2272                                  ;
  2273                                  ;       Restore and return
  2274                                  ;
  2275 0000052C 07                                              pop     es                                              ;restore non-volatile regs
  2276 0000052D 5F                                              pop     edi                                             ;
  2277 0000052E 5E                                              pop     esi                                             ;
  2278 0000052F 59                                              pop     ecx                                             ;
  2279 00000530 C3                                              ret                                                     ;return
  2280                                  ;=======================================================================================================================
  2281                                  ;
  2282                                  ;       Hardware Device Interupts
  2283                                  ;
  2284                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  2285                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  2286                                  ;       (BX=2028h).
  2287                                  ;
  2288                                  ;=======================================================================================================================
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                  ;
  2291                                  ;       IRQ0    Clock Tick Interrupt
  2292                                  ;
  2293                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  2294                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  2295                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  2296                                  ;
  2297                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  2298                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  2299                                  ;
  2300                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  2301                                  ;       zero, the floppy disk motors are turned off.
  2302                                  ;
  2303                                  ;-----------------------------------------------------------------------------------------------------------------------
  2304                                                          menter  clocktick                                       ;clock tick interrupt
  2304                              <1> ?%1 equ ($-$$)
  2305 00000531 50                                              push    eax                                             ;save non-volatile regs
  2306 00000532 52                                              push    edx                                             ;
  2307 00000533 1E                                              push    ds                                              ;
  2308                                  ;
  2309                                  ;       Update the clock tick count and the elapsed days as needed.
  2310                                  ;
  2311 00000534 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2312 00000536 1F                                              pop     ds                                              ;... into data segment register
  2313 00000537 A16C040000                                      mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  2314 0000053C 40                                              inc     eax                                             ;increment clock ticks
  2315 0000053D 3DB0001800                                      cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  2316 00000542 7208                                            jb      irq0.10                                         ;no, skip ahead
  2317 00000544 FE0570040000                                    inc     byte [wbClockDays]                              ;increment clock days
  2318 0000054A 31C0                                            xor     eax,eax                                         ;reset clock ticks
  2319 0000054C A36C040000              irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  2320                                  ;
  2321                                  ;       Decrement floppy disk motor timeout.
  2322                                  ;
  2323 00000551 803D4004000000                                  cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  2324 00000558 741E                                            je      irq0.20                                         ;yes, skip ahead
  2325 0000055A FE0D40040000                                    dec     byte [wbFDCMotor]                               ;decrement motor timeout
  2326 00000560 7516                                            jnz     irq0.20                                         ;skip ahead if non-zero
  2327                                  ;
  2328                                  ;       Turn off the floppy disk motor if appropriate.
  2329                                  ;
  2330 00000562 FB                                              sti                                                     ;enable maskable interrupts
  2331 00000563 B603                    irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  2332 00000565 B2F4                                            mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  2333 00000567 EC                                              in      al,dx                                           ;FDC main status byte
  2334 00000568 A810                                            test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  2335 0000056A 75F7                                            jnz     irq0.15                                         ;wait while busy
  2336 0000056C B00C                                            mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  2337 0000056E A23F040000                                      mov     byte [wbFDCControl],al                          ;save motor-off setting
  2338 00000573 B603                                            mov     dh,EFDCPORTHI                                   ;FDC port hi
  2339 00000575 B2F2                                            mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  2340 00000577 EE                                              out     dx,al                                           ;turn motor off
  2341                                  ;
  2342                                  ;       Signal the end of the hardware interrupt.
  2343                                  ;
  2344 00000578 E88D070000              irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2345                                  ;
  2346                                  ;       Restore and return.
  2347                                  ;
  2348 0000057D 1F                                              pop     ds                                              ;restore modified regs
  2349 0000057E 5A                                              pop     edx                                             ;
  2350 0000057F 58                                              pop     eax                                             ;
  2351 00000580 CF                                              iretd                                                   ;return
  2352                                  ;-----------------------------------------------------------------------------------------------------------------------
  2353                                  ;
  2354                                  ;       IRQ1    Keyboard Interrupt
  2355                                  ;
  2356                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2357                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2358                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2359                                  ;       ALL modified registers upon return.
  2360                                  ;
  2361                                  ;-----------------------------------------------------------------------------------------------------------------------
  2362                                                          menter  keyboard                                        ;keyboard interrrupt
  2362                              <1> ?%1 equ ($-$$)
  2363 00000581 50                                              push    eax                                             ;save non-volatile regs
  2364 00000582 53                                              push    ebx                                             ;
  2365 00000583 51                                              push    ecx                                             ;
  2366 00000584 56                                              push    esi                                             ;
  2367 00000585 1E                                              push    ds                                              ;
  2368 00000586 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2369 00000588 1F                                              pop     ds                                              ;... into data segment register
  2370 00000589 30C0                                            xor     al,al                                           ;zero
  2371 0000058B A205080000                                      mov     [wbConsoleScan0],al                             ;clear scan code 0
  2372 00000590 A206080000                                      mov     [wbConsoleScan1],al                             ;clear scan code 1
  2373 00000595 A207080000                                      mov     [wbConsoleScan2],al                             ;clear scan code 2
  2374 0000059A A208080000                                      mov     [wbConsoleScan3],al                             ;clear scan code 3
  2375 0000059F A209080000                                      mov     [wbConsoleScan4],al                             ;clear scan code 4
  2376 000005A4 A20A080000                                      mov     [wbConsoleScan5],al                             ;clear scan code 5
  2377 000005A9 B020                                            mov     al,' '                                          ;space
  2378 000005AB A20B080000                                      mov     [wbConsoleChar],al                              ;set character to space
  2379 000005B0 B080                                            mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2380 000005B2 F6D0                                            not     al                                              ;controller timeout mask
  2381 000005B4 200504080000                                    and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2382 000005BA 8A1D02080000                                    mov     bl,[wbConsoleShift]                             ;shift flags
  2383 000005C0 8A3D03080000                                    mov     bh,[wbConsoleLock]                              ;lock flags
  2384 000005C6 E889070000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2385 000005CB 0F84F3010000                                    jz      irq1.140                                        ;yes, skip ahead
  2386 000005D1 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 0
  2387 000005D3 A205080000                                      mov     [wbConsoleScan0],al                             ;save scan code 0
  2388 000005D8 88C4                                            mov     ah,al                                           ;copy scan code 0
  2389 000005DA B002                                            mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2390 000005DC 80FC2A                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2391 000005DF 0F84E0000000                                    je      irq1.30                                         ;yes, set flag
  2392 000005E5 80FCAA                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2393 000005E8 0F84DB000000                                    je      irq1.40                                         ;yes, reset flag
  2394 000005EE B010                                            mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2395 000005F0 80FC36                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2396 000005F3 0F84CC000000                                    je      irq1.30                                         ;yes, set flag
  2397 000005F9 80FCB6                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2398 000005FC 0F84C7000000                                    je      irq1.40                                         ;yes, reset flag
  2399 00000602 B001                                            mov     al,EKEYFCTRLLEFT                                ;left control flag
  2400 00000604 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2401 00000607 0F84B8000000                                    je      irq1.30                                         ;yes, set flag
  2402 0000060D 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2403 00000610 0F84B3000000                                    je      irq1.40                                         ;yes, reset flag
  2404 00000616 B004                                            mov     al,EKEYFALTLEFT                                 ;left alt flag
  2405 00000618 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2406 0000061B 0F84A4000000                                    je      irq1.30                                         ;yes, set flag
  2407 00000621 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2408 00000624 0F849F000000                                    je      irq1.40                                         ;yes, reset flag
  2409 0000062A B004                                            mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2410 0000062C 80FC3A                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2411 0000062F 0F849A000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2412 00000635 B002                                            mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2413 00000637 80FC45                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2414 0000063A 0F848F000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2415 00000640 B001                                            mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2416 00000642 80FC46                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2417 00000645 0F8484000000                                    je      irq1.50                                         ;yes, toggle lamps and flags
  2418 0000064B 80FCE0                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2419 0000064E 0F8598000000                                    jne     irq1.70                                         ;no, skip ahead
  2420 00000654 E8FB060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2421 00000659 0F8465010000                                    jz      irq1.140                                        ;yes, skip ahead
  2422 0000065F E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2423 00000661 A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2424 00000666 88C4                                            mov     ah,al                                           ;copy scan code 1
  2425 00000668 B008                                            mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2426 0000066A 80FC1D                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2427 0000066D 7456                                            je      irq1.30                                         ;yes, set flag
  2428 0000066F 80FC9D                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2429 00000672 7455                                            je      irq1.40                                         ;yes, reset flag
  2430 00000674 B020                                            mov     al,EKEYFALTRIGHT                                ;right alt flag
  2431 00000676 80FC38                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2432 00000679 744A                                            je      irq1.30                                         ;yes, set flag
  2433 0000067B 80FCB8                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2434 0000067E 7449                                            je      irq1.40                                         ;yes, reset flag
  2435 00000680 80FC35                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2436 00000683 0F84CB000000                                    je      irq1.80                                         ;yes, skip ahead
  2437 00000689 80FCB5                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2438 0000068C 0F84C2000000                                    je      irq1.80                                         ;yes, skip ahead
  2439 00000692 80FC2A                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2440 00000695 7405                                            je      irq1.10                                         ;yes, continue
  2441 00000697 80FCB7                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2442 0000069A 7524                                            jne     irq1.20                                         ;no, skip ahead
  2443 0000069C E8B3060000              irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2444 000006A1 0F841D010000                                    jz      irq1.140                                        ;yes, skip ahead
  2445 000006A7 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2446 000006A9 A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2447 000006AE E8A1060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2448 000006B3 0F840B010000                                    jz      irq1.140                                        ;yes, skip ahead
  2449 000006B9 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2450 000006BB A208080000                                      mov     [wbConsoleScan3],al                             ;read scan code 3
  2451 000006C0 E907010000              irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2452 000006C5 08C3                    irq1.30                 or      bl,al                                           ;set shift flag
  2453 000006C7 EB0D                                            jmp     irq1.60                                         ;skip ahead
  2454 000006C9 F6D0                    irq1.40                 not     al                                              ;convert flag to mask
  2455 000006CB 20C3                                            and     bl,al                                           ;reset shift flag
  2456 000006CD EB07                                            jmp     irq1.60                                         ;skip ahead
  2457 000006CF 30C7                    irq1.50                 xor     bh,al                                           ;toggle lock flag
  2458 000006D1 E84F060000                                      call    SetKeyboardLamps                                ;update keyboard lamps
  2459 000006D6 881D02080000            irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2460 000006DC 883D03080000                                    mov     [wbConsoleLock],bh                              ;save lock flags
  2461 000006E2 E845040000                                      call    PutConsoleOIAShift                              ;update OIA indicators
  2462 000006E7 E9E0000000                                      jmp     irq1.150                                        ;finish keyboard handling
  2463 000006EC 80FCE1                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2464 000006EF 7563                                            jne     irq1.80                                         ;no continue
  2465 000006F1 E85E060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2466 000006F6 0F84C8000000                                    jz      irq1.140                                        ;yes, skip ahead
  2467 000006FC E460                                            in      al,EKEYBPORTDATA                                ;read scan code 1
  2468 000006FE A206080000                                      mov     [wbConsoleScan1],al                             ;save scan code 1
  2469 00000703 88C4                                            mov     ah,al                                           ;copy scan code 1
  2470 00000705 80FC1D                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2471 00000708 0F85BE000000                                    jne     irq1.150                                        ;no, finish keyboard handling
  2472 0000070E E841060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2473 00000713 0F84AB000000                                    jz      irq1.140                                        ;yes, skip ahead
  2474 00000719 E460                                            in      al,EKEYBPORTDATA                                ;read scan code 2
  2475 0000071B A207080000                                      mov     [wbConsoleScan2],al                             ;save scan code 2
  2476 00000720 E82F060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2477 00000725 0F8499000000                                    jz      irq1.140                                        ;yes, skip ahead
  2478 0000072B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 3
  2479 0000072D A208080000                                      mov     [wbConsoleScan3],al                             ;save scan code 3
  2480 00000732 E81D060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2481 00000737 0F8487000000                                    jz      irq1.140                                        ;yes, skip ahead
  2482 0000073D E460                                            in      al,EKEYBPORTDATA                                ;read scan code 4
  2483 0000073F A209080000                                      mov     [wbConsoleScan4],al                             ;save scan code 4
  2484 00000744 E80B060000                                      call    WaitForKeyOutBuffer                             ;controller timeout?
  2485 00000749 7479                                            jz      irq1.140                                        ;yes, skip ahead
  2486 0000074B E460                                            in      al,EKEYBPORTDATA                                ;read scan code 5
  2487 0000074D A20A080000                                      mov     [wbConsoleScan5],al                             ;save scan code 5
  2488 00000752 EB78                                            jmp     irq1.150                                        ;continue
  2489 00000754 30C0                    irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2490 00000756 F6C480                                          test    ah,EKEYBUP                                      ;release code?
  2491 00000759 7567                                            jnz     irq1.130                                        ;yes, skip ahead
  2492 0000075B BE[DC070000]                                    mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2493 00000760 F6C312                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2494 00000763 7405                                            jz      irq1.90                                         ;no, skip ahead
  2495 00000765 BE[5C080000]                                    mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2496 0000076A 0FB6CC                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2497 0000076D 2E8A0431                                        mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2498 00000771 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2499 00000774 7411                                            jz      irq1.100                                        ;no skip ahead
  2500 00000776 88C1                                            mov     cl,al                                           ;copy ASCII code
  2501 00000778 80E1DF                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2502 0000077B 80F941                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2503 0000077E 7207                                            jb      irq1.100                                        ;yes, skip ahead
  2504 00000780 80F95A                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2505 00000783 7702                                            ja      irq1.100                                        ;yes, skip ahead
  2506 00000785 3420                                            xor     al,EASCIICASE                                   ;switch case
  2507 00000787 A20B080000              irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2508 0000078C BA00000041              irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2509 00000791 F6C480                                          test    ah,EKEYBUP                                      ;release scan-code?
  2510 00000794 7405                                            jz      irq1.120                                        ;no, skip ahead
  2511 00000796 BA00000141                                      mov     edx,EMSGKEYUP                                   ;key-up event
  2512 0000079B 25FFFF0000              irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2513 000007A0 09C2                                            or      edx,eax                                         ;msg id and codes
  2514 000007A2 31C9                                            xor     ecx,ecx                                         ;null param
  2515 000007A4 50                                              push    eax                                             ;save codes
  2516 000007A5 E881040000                                      call    PutMessage                                      ;put message to console
  2517 000007AA 58                                              pop     eax                                             ;restore codes
  2518 000007AB 84C0                                            test    al,al                                           ;ASCII translation?
  2519 000007AD 7413                                            jz      irq1.130                                        ;no, skip ahead
  2520 000007AF BA00000241                                      mov     edx,EMSGKEYCHAR                                 ;key-character event
  2521 000007B4 25FFFF0000                                      and     eax,0FFFFh                                      ;clear high-order word
  2522 000007B9 09C2                                            or      edx,eax                                         ;msg id and codes
  2523 000007BB 31C9                                            xor     ecx,ecx                                         ;null param
  2524 000007BD E869040000                                      call    PutMessage                                      ;put message to console
  2525 000007C2 EB08                    irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2526 000007C4 B080                    irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2527 000007C6 080504080000                                    or      [wbConsoleStatus],al                            ;set controller timeout flag
  2528 000007CC E803030000              irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2529 000007D1 E834050000                                      call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2530 000007D6 1F                                              pop     ds                                              ;restore non-volatile regs
  2531 000007D7 5E                                              pop     esi                                             ;
  2532 000007D8 59                                              pop     ecx                                             ;
  2533 000007D9 5B                                              pop     ebx                                             ;
  2534 000007DA 58                                              pop     eax                                             ;
  2535 000007DB CF                                              iretd                                                   ;return
  2536                                  ;-----------------------------------------------------------------------------------------------------------------------
  2537                                  ;       Scan-Code to ASCII Translation Tables
  2538                                  ;-----------------------------------------------------------------------------------------------------------------------
  2539 000007DC 001B313233343536        tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2540 000007E4 373839302D3D0809                                db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2541 000007EC 7177657274797569                                db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2542 000007F4 6F705B5D0D006173                                db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2543 000007FC 646667686A6B6C3B                                db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2544 00000804 2760005C7A786376                                db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2545 0000080C 626E6D2C2E2F002A                                db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2546 00000814 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2547 0000081C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2548 00000824 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2549 0000082C 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2550 00000834 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2551 0000083C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2552 00000844 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2553 0000084C 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2554 00000854 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2555 0000085C 001B21402324255E        tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2556 00000864 262A28295F2B0800                                db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2557 0000086C 5157455254595549                                db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2558 00000874 4F507B7D0D004153                                db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2559 0000087C 444647484A4B4C3A                                db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2560 00000884 227E007C5A584356                                db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2561 0000088C 424E4D3C3E3F002A                                db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2562 00000894 0020000000000000                                db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2563 0000089C 0000000000000037                                db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2564 000008A4 38392D3435362B31                                db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2565 000008AC 3233302E00000000                                db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2566 000008B4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2567 000008BC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2568 000008C4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2569 000008CC 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2570 000008D4 0000000000000000                                db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2571                                  ;-----------------------------------------------------------------------------------------------------------------------
  2572                                  ;
  2573                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2574                                  ;
  2575                                  ;-----------------------------------------------------------------------------------------------------------------------
  2576                                                          menter  iochannel                                       ;secondary 8259A cascade
  2576                              <1> ?%1 equ ($-$$)
  2577 000008DC 50                                              push    eax                                             ;save modified regs
  2578 000008DD EB3F                                            jmp     hwint                                           ;end interrupt and return
  2579                                  ;-----------------------------------------------------------------------------------------------------------------------
  2580                                  ;
  2581                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2582                                  ;
  2583                                  ;-----------------------------------------------------------------------------------------------------------------------
  2584                                                          menter  com2                                            ;serial port 2 interrupt
  2584                              <1> ?%1 equ ($-$$)
  2585 000008DF 50                                              push    eax                                             ;save modified regs
  2586 000008E0 EB3C                                            jmp     hwint                                           ;end interrupt and return
  2587                                  ;-----------------------------------------------------------------------------------------------------------------------
  2588                                  ;
  2589                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2590                                  ;
  2591                                  ;-----------------------------------------------------------------------------------------------------------------------
  2592                                                          menter  com1                                            ;serial port 1 interrupt
  2592                              <1> ?%1 equ ($-$$)
  2593 000008E2 50                                              push    eax                                             ;save modified regs
  2594 000008E3 EB39                                            jmp     hwint                                           ;end interrupt and return
  2595                                  ;-----------------------------------------------------------------------------------------------------------------------
  2596                                  ;
  2597                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2598                                  ;
  2599                                  ;-----------------------------------------------------------------------------------------------------------------------
  2600                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2600                              <1> ?%1 equ ($-$$)
  2601 000008E5 50                                              push    eax                                             ;save modified regs
  2602 000008E6 EB36                                            jmp     hwint                                           ;end interrupt and return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       IRQ6    Diskette Hardware Interrupt
  2606                                  ;
  2607                                  ;-----------------------------------------------------------------------------------------------------------------------
  2608                                                          menter  diskette                                        ;floppy disk interrupt
  2608                              <1> ?%1 equ ($-$$)
  2609 000008E8 50                                              push    eax                                             ;save non-volatile regs
  2610 000008E9 1E                                              push    ds                                              ;
  2611 000008EA 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  2612 000008EC 1F                                              pop     ds                                              ;... into DS register
  2613 000008ED A03E040000                                      mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2614 000008F2 0C80                                            or      al,10000000b                                    ;set IRQ flag
  2615 000008F4 A23E040000                                      mov     [wbFDCStatus],al                                ;update FDC calibration status
  2616 000008F9 1F                                              pop     ds                                              ;restore non-volatile regs
  2617 000008FA EB22                                            jmp     hwint                                           ;end primary PIC interrupt
  2618                                  ;-----------------------------------------------------------------------------------------------------------------------
  2619                                  ;
  2620                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2621                                  ;
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2623                              <1> ?%1 equ ($-$$)
  2624 000008FC 50                                              push    eax                                             ;save modified regs
  2625 000008FD EB1F                                            jmp     hwint                                           ;end interrupt and return
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2629                                  ;
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                                          menter  rtclock                                         ;real-time clock interrupt
  2631                              <1> ?%1 equ ($-$$)
  2632 000008FF 50                                              push    eax                                             ;save modified regs
  2633 00000900 EB15                                            jmp     hwwint                                          ;end interrupt and return
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  ;
  2636                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2637                                  ;
  2638                                  ;-----------------------------------------------------------------------------------------------------------------------
  2639                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2639                              <1> ?%1 equ ($-$$)
  2640 00000902 50                                              push    eax                                             ;save modified regs
  2641 00000903 EB12                                            jmp     hwwint                                          ;end interrupt and return
  2642                                  ;-----------------------------------------------------------------------------------------------------------------------
  2643                                  ;
  2644                                  ;       IRQ10   Reserved Hardware Interrupt
  2645                                  ;
  2646                                  ;-----------------------------------------------------------------------------------------------------------------------
  2647                                                          menter  irq10                                           ;reserved
  2647                              <1> ?%1 equ ($-$$)
  2648 00000905 50                                              push    eax                                             ;save modified regs
  2649 00000906 EB0F                                            jmp     hwwint                                          ;end interrupt and return
  2650                                  ;-----------------------------------------------------------------------------------------------------------------------
  2651                                  ;
  2652                                  ;       IRQ11   Reserved Hardware Interrupt
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                                          menter  irq11                                           ;reserved
  2655                              <1> ?%1 equ ($-$$)
  2656 00000908 50                                              push    eax                                             ;save modified regs
  2657 00000909 EB0C                                            jmp     hwwint                                          ;end interrupt and return
  2658                                  ;-----------------------------------------------------------------------------------------------------------------------
  2659                                  ;
  2660                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2663                              <1> ?%1 equ ($-$$)
  2664 0000090B 50                                              push    eax                                             ;save modified regs
  2665 0000090C EB09                                            jmp     hwwint                                          ;end interrupt and return
  2666                                  ;-----------------------------------------------------------------------------------------------------------------------
  2667                                  ;
  2668                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2669                                  ;
  2670                                  ;-----------------------------------------------------------------------------------------------------------------------
  2671                                                          menter  coprocessor                                     ;coprocessor interrupt
  2671                              <1> ?%1 equ ($-$$)
  2672 0000090E 50                                              push    eax                                             ;save modified regs
  2673 0000090F EB06                                            jmp     hwwint                                          ;end interrupt and return
  2674                                  ;-----------------------------------------------------------------------------------------------------------------------
  2675                                  ;
  2676                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2677                                  ;
  2678                                  ;-----------------------------------------------------------------------------------------------------------------------
  2679                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2679                              <1> ?%1 equ ($-$$)
  2680 00000911 50                                              push    eax                                             ;save modified regs
  2681 00000912 EB03                                            jmp     hwwint                                          ;end interrupt and return
  2682                                  ;-----------------------------------------------------------------------------------------------------------------------
  2683                                  ;
  2684                                  ;       IRQ15   Reserved Hardware Interrupt
  2685                                  ;
  2686                                  ;-----------------------------------------------------------------------------------------------------------------------
  2687                                                          menter  irq15                                           ;reserved
  2687                              <1> ?%1 equ ($-$$)
  2688 00000914 50                                              push    eax                                             ;save modified regs
  2689 00000915 EB00                                            jmp     hwwint                                          ;end interrupt and return
  2690                                  ;-----------------------------------------------------------------------------------------------------------------------
  2691                                  ;
  2692                                  ;       Exit from hardware interrupt
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695 00000917 E8F4030000              hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2696 0000091C EB05                                            jmp     hwint90                                         ;skip ahead
  2697 0000091E E8E7030000              hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2698 00000923 58                      hwint90                 pop     eax                                             ;restore modified regs
  2699 00000924 CF                                              iretd                                                   ;return from interrupt
  2700                                  ;-----------------------------------------------------------------------------------------------------------------------
  2701                                  ;
  2702                                  ;       INT 30h Operating System Software Service Interrupt
  2703                                  ;
  2704                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2705                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2706                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2707                                  ;       the entry address of the specific function from a table.
  2708                                  ;
  2709                                  ;-----------------------------------------------------------------------------------------------------------------------
  2710                                                          menter  svc
  2710                              <1> ?%1 equ ($-$$)
  2711 00000925 3C07                                            cmp     al,maxtsvc                                      ;is our function out of range?
  2712 00000927 730D                                            jae     svc90                                           ;yes, skip ahead
  2713 00000929 0FB6C0                                          movzx   eax,al                                          ;function
  2714 0000092C C1E002                                          shl     eax,2                                           ;offset into table
  2715 0000092F 2EFF90[37090000]                                call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2716 00000936 CF                      svc90                   iretd                                                   ;return from interrupt
  2717                                  ;-----------------------------------------------------------------------------------------------------------------------
  2718                                  ;
  2719                                  ;       Service Request Table
  2720                                  ;
  2721                                  ;
  2722                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2723                                  ;
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2725                              <1> tsvc :
  2725                              <1> e%1 equ ($-tsvc)/4
  2725 00000937 [530C0000]          <1>  dd %1
  2726                                                          tsvce   CompareMemory                                   ;compare memory
  2726                              <1> e%1 equ ($-tsvc)/4
  2726 0000093B [53090000]          <1>  dd %1
  2727                                                          tsvce   GetConsoleString                                ;get string input
  2727                              <1> e%1 equ ($-tsvc)/4
  2727 0000093F [B4090000]          <1>  dd %1
  2728                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2728                              <1> e%1 equ ($-tsvc)/4
  2728 00000943 [E00C0000]          <1>  dd %1
  2729                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2729                              <1> e%1 equ ($-tsvc)/4
  2729 00000947 [C60B0000]          <1>  dd %1
  2730                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2730                              <1> e%1 equ ($-tsvc)/4
  2730 0000094B [160D0000]          <1>  dd %1
  2731                                                          tsvce   UpperCaseString                                 ;upper-case string
  2731                              <1> e%1 equ ($-tsvc)/4
  2731 0000094F [70090000]          <1>  dd %1
  2732                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2733                                  ;-----------------------------------------------------------------------------------------------------------------------
  2734                                  ;
  2735                                  ;       Service Request Macros
  2736                                  ;
  2737                                  ;       These macros provide positional parameterization of service request calls.
  2738                                  ;
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  %macro                  clearConsoleScreen 0
  2741                                                          mov     al,eClearConsoleScreen                          ;function code
  2742                                                          int     _svc                                            ;invoke OS service
  2743                                  %endmacro
  2744                                  %macro                  compareMemory 0
  2745                                                          mov     al,eCompareMemory                               ;function code
  2746                                                          int     _svc                                            ;invoke OS service
  2747                                  %endmacro
  2748                                  %macro                  getConsoleString 4
  2749                                                          mov     edx,%1                                          ;buffer address
  2750                                                          mov     ecx,%2                                          ;max characters
  2751                                                          mov     bh,%3                                           ;echo indicator
  2752                                                          mov     bl,%4                                           ;terminator
  2753                                                          mov     al,eGetConsoleString                            ;function code
  2754                                                          int     _svc                                            ;invoke OS service
  2755                                  %endmacro
  2756                                  %macro                  placeCursor 0
  2757                                                          mov     al,ePlaceCursor                                 ;function code
  2758                                                          int     _svc                                            ;invoke OS service
  2759                                  %endmacro
  2760                                  %macro                  putConsoleString 1
  2761                                                          mov     edx,%1                                          ;string address
  2762                                                          mov     al,ePutConsoleString                            ;function code
  2763                                                          int     _svc                                            ;invoke OS service
  2764                                  %endmacro
  2765                                  %macro                  resetSystem 0
  2766                                                          mov     al,eResetSystem                                 ;function code
  2767                                                          int     _svc                                            ;invoke OS service
  2768                                  %endmacro
  2769                                  %macro                  upperCaseString 0
  2770                                                          mov     al,eUpperCaseString                             ;function code
  2771                                                          int     _svc                                            ;invoke OS service
  2772                                  %endmacro
  2773                                  ;=======================================================================================================================
  2774                                  ;
  2775                                  ;       Kernel Function Library
  2776                                  ;
  2777                                  ;=======================================================================================================================
  2778                                  ;=======================================================================================================================
  2779                                  ;
  2780                                  ;       String Helper Routines
  2781                                  ;
  2782                                  ;       CompareMemory
  2783                                  ;       UpperCaseString
  2784                                  ;
  2785                                  ;=======================================================================================================================
  2786                                  ;-----------------------------------------------------------------------------------------------------------------------
  2787                                  ;
  2788                                  ;       Routine:        CompareMemory
  2789                                  ;
  2790                                  ;       Description:    This routine compares two byte arrays.
  2791                                  ;
  2792                                  ;       In:             DS:EDX  first source address
  2793                                  ;                       DS:EBX  second source address
  2794                                  ;                       ECX     comparison length
  2795                                  ;
  2796                                  ;       Out:            EDX     first source address
  2797                                  ;                       EBX     second source address
  2798                                  ;                       ECX     0       array 1 = array 2
  2799                                  ;                               <0      array 1 < array 2
  2800                                  ;                               >0      array 1 > array 2
  2801                                  ;
  2802                                  ;-----------------------------------------------------------------------------------------------------------------------
  2803 00000953 56                      CompareMemory           push    esi                                             ;save non-volatile regs
  2804 00000954 57                                              push    edi                                             ;
  2805 00000955 06                                              push    es                                              ;
  2806 00000956 1E                                              push    ds                                              ;copy DS
  2807 00000957 07                                              pop     es                                              ;... to ES
  2808 00000958 89D6                                            mov     esi,edx                                         ;first source address
  2809 0000095A 89DF                                            mov     edi,ebx                                         ;second source address
  2810 0000095C FC                                              cld                                                     ;forward strings
  2811 0000095D F3A6                                            rep     cmpsb                                           ;compare bytes
  2812 0000095F B000                                            mov     al,0                                            ;default result
  2813 00000961 7406                                            jz      .10                                             ;branch if arrays equal
  2814 00000963 B001                                            mov     al,1                                            ;positive result
  2815 00000965 7302                                            jnc     .10                                             ;branch if target > source
  2816 00000967 B0FF                                            mov     al,-1                                           ;negative result
  2817 00000969 0FBEC8                  .10                     movsx   ecx,al                                          ;extend sign
  2818 0000096C 07                                              pop     es                                              ;restore non-volatile regs
  2819 0000096D 5F                                              pop     edi                                             ;
  2820 0000096E 5E                                              pop     esi                                             ;
  2821 0000096F C3                                              ret                                                     ;return
  2822                                  ;-----------------------------------------------------------------------------------------------------------------------
  2823                                  ;
  2824                                  ;       Routine:        UpperCaseString
  2825                                  ;
  2826                                  ;       Description:    This routine places all characters in the given string to upper case.
  2827                                  ;
  2828                                  ;       In:             DS:EDX  string address
  2829                                  ;
  2830                                  ;       Out:            EDX     string address
  2831                                  ;
  2832                                  ;-----------------------------------------------------------------------------------------------------------------------
  2833 00000970 56                      UpperCaseString         push    esi                                             ;save non-volatile regs
  2834 00000971 89D6                                            mov     esi,edx                                         ;string address
  2835 00000973 FC                                              cld                                                     ;forward strings
  2836 00000974 AC                      .10                     lodsb                                                   ;string character
  2837 00000975 84C0                                            test    al,al                                           ;null?
  2838 00000977 740F                                            jz      .20                                             ;yes, skip ahead
  2839 00000979 3C61                                            cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2840 0000097B 72F7                                            jb      .10                                             ;no, continue
  2841 0000097D 3C7A                                            cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2842 0000097F 77F3                                            ja      .10                                             ;no, continue
  2843 00000981 24DF                                            and     al,EASCIICASEMASK                               ;mask for upper case
  2844 00000983 8846FF                                          mov     [esi-1],al                                      ;upper character
  2845 00000986 EBEC                                            jmp     .10                                             ;continue
  2846 00000988 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  2847 00000989 C3                                              ret                                                     ;return
  2848                                  ;=======================================================================================================================
  2849                                  ;
  2850                                  ;       Console Helper Routines
  2851                                  ;
  2852                                  ;       FirstConsoleColumn
  2853                                  ;       GetConsoleChar
  2854                                  ;       GetConsoleString
  2855                                  ;       NextConsoleColumn
  2856                                  ;       NextConsoleRow
  2857                                  ;       PreviousConsoleColumn
  2858                                  ;       PutConsoleChar
  2859                                  ;       PutConsoleHexByte
  2860                                  ;       PutConsoleHexDword
  2861                                  ;       PutConsoleHexWord
  2862                                  ;       PutConsoleOIAChar
  2863                                  ;       PutConsoleOIAShift
  2864                                  ;       PutConsoleString
  2865                                  ;       Yield
  2866                                  ;
  2867                                  ;=======================================================================================================================
  2868                                  ;-----------------------------------------------------------------------------------------------------------------------
  2869                                  ;
  2870                                  ;       Routine:        FirstConsoleColumn
  2871                                  ;
  2872                                  ;       Description:    This routine resets the console column to start of the row.
  2873                                  ;
  2874                                  ;       In:             DS      OS data selector
  2875                                  ;
  2876                                  ;-----------------------------------------------------------------------------------------------------------------------
  2877 0000098A 30C0                    FirstConsoleColumn      xor     al,al                                           ;zero column
  2878 0000098C A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2879 00000991 C3                                              ret                                                     ;return
  2880                                  ;-----------------------------------------------------------------------------------------------------------------------
  2881                                  ;
  2882                                  ;       Routine:        GetConsoleChar
  2883                                  ;
  2884                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2885                                  ;
  2886                                  ;       Out:            AL      ASCII character code
  2887                                  ;                       AH      keyboard scan code
  2888                                  ;
  2889                                  ;-----------------------------------------------------------------------------------------------------------------------
  2890 00000992 E85C020000              GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2891 00000997 E85A020000              GetConsoleChar          call    GetMessage                                      ;get the next message
  2892 0000099C 09C0                                            or      eax,eax                                         ;do we have a message?
  2893 0000099E 74F2                                            jz      GetConsoleChar.10                               ;no, skip ahead
  2894 000009A0 50                                              push    eax                                             ;save key codes
  2895 000009A1 250000FFFF                                      and     eax,0FFFF0000h                                  ;mask for message type
  2896 000009A6 3D00000241                                      cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2897 000009AB 58                                              pop     eax                                             ;restore key codes
  2898 000009AC 75E9                                            jne     GetConsoleChar                                  ;no, try again
  2899 000009AE 25FFFF0000                                      and     eax,0000ffffh                                   ;mask for key codes
  2900 000009B3 C3                                              ret                                                     ;return
  2901                                  ;-----------------------------------------------------------------------------------------------------------------------
  2902                                  ;
  2903                                  ;       Routine:        GetConsoleString
  2904                                  ;
  2905                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2906                                  ;
  2907                                  ;       In:             DS:EDX  target buffer address
  2908                                  ;                       ECX     maximum number of characters to accept
  2909                                  ;                       BH      echo to terminal
  2910                                  ;                       BL      terminating character
  2911                                  ;
  2912                                  ;-----------------------------------------------------------------------------------------------------------------------
  2913 000009B4 51                      GetConsoleString        push    ecx                                             ;save non-volatile regs
  2914 000009B5 56                                              push    esi                                             ;
  2915 000009B6 57                                              push    edi                                             ;
  2916 000009B7 06                                              push    es                                              ;
  2917 000009B8 1E                                              push    ds                                              ;load data segment selector ...
  2918 000009B9 07                                              pop     es                                              ;... into extra segment register
  2919 000009BA 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2920 000009BC 51                                              push    ecx                                             ;save maximum characters
  2921 000009BD 30C0                                            xor     al,al                                           ;zero register
  2922 000009BF FC                                              cld                                                     ;forward strings
  2923 000009C0 F3AA                                            rep     stosb                                           ;zero fill buffer
  2924 000009C2 59                                              pop     ecx                                             ;maximum characters
  2925 000009C3 89D7                                            mov     edi,edx                                         ;edi = target buffer
  2926 000009C5 89D6                                            mov     esi,edx                                         ;esi = target buffer
  2927 000009C7 E34E                    .10                     jecxz   .50                                             ;exit if max-length is zero
  2928 000009C9 E8C9FFFFFF              .20                     call    GetConsoleChar                                  ;al = next input char
  2929 000009CE 38D8                                            cmp     al,bl                                           ;is this the terminator?
  2930 000009D0 7445                                            je      .50                                             ;yes, exit
  2931 000009D2 3C08                                            cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2932 000009D4 7521                                            jne     .30                                             ;no, skip ahead
  2933 000009D6 39FE                                            cmp     esi,edi                                         ;at start of buffer?
  2934 000009D8 74EF                                            je      .20                                             ;yes, get next character
  2935 000009DA 4F                                              dec     edi                                             ;backup target pointer
  2936 000009DB C60700                                          mov     byte [edi],0                                    ;zero previous character
  2937 000009DE 41                                              inc     ecx                                             ;increment remaining chars
  2938 000009DF F6C701                                          test    bh,1                                            ;echo to console?
  2939 000009E2 74E5                                            jz      .20                                             ;no, get next character
  2940 000009E4 E873000000                                      call    PreviousConsoleColumn                           ;backup console position
  2941 000009E9 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  2942 000009EB E891000000                                      call    PutConsoleChar                                  ;write space to console
  2943 000009F0 E8EB020000                                      call    PlaceCursor                                     ;position the cursor
  2944 000009F5 EBD2                                            jmp     .20                                             ;get next character
  2945 000009F7 3C20                    .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2946 000009F9 72CE                                            jb      .20                                             ;no, get another character
  2947 000009FB 3C7E                                            cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2948 000009FD 77CA                                            ja      .20                                             ;no, get another character
  2949 000009FF AA                                              stosb                                                   ;store character in buffer
  2950 00000A00 F6C701                                          test    bh,1                                            ;echo to console?
  2951 00000A03 740F                                            jz      .40                                             ;no, skip ahead
  2952 00000A05 E877000000                                      call    PutConsoleChar                                  ;write character to console
  2953 00000A0A E810000000                                      call    NextConsoleColumn                               ;advance console position
  2954 00000A0F E8CC020000                                      call    PlaceCursor                                     ;position the cursor
  2955 00000A14 49                      .40                     dec     ecx                                             ;decrement remaining chars
  2956 00000A15 EBB0                                            jmp     .10                                             ;next
  2957 00000A17 30C0                    .50                     xor     al,al                                           ;null
  2958 00000A19 AA                                              stosb                                                   ;terminate buffer
  2959 00000A1A 07                                              pop     es                                              ;restore non-volatile regs
  2960 00000A1B 5F                                              pop     edi                                             ;
  2961 00000A1C 5E                                              pop     esi                                             ;
  2962 00000A1D 59                                              pop     ecx                                             ;
  2963 00000A1E C3                                              ret                                                     ;return
  2964                                  ;-----------------------------------------------------------------------------------------------------------------------
  2965                                  ;
  2966                                  ;       Routine:        NextConsoleColumn
  2967                                  ;
  2968                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2969                                  ;                       incremented if the end of the current row is reached.
  2970                                  ;
  2971                                  ;       In:             DS      OS data selector
  2972                                  ;
  2973                                  ;-----------------------------------------------------------------------------------------------------------------------
  2974 00000A1F A000080000              NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2975 00000A24 FEC0                                            inc     al                                              ;increment column
  2976 00000A26 A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  2977 00000A2B 3C50                                            cmp     al,ECONCOLS                                     ;end of row?
  2978 00000A2D 720A                                            jb      .10                                             ;no, skip ahead
  2979 00000A2F E856FFFFFF                                      call    FirstConsoleColumn                              ;reset column to start of row
  2980 00000A34 E801000000                                      call    NextConsoleRow                                  ;line feed to next row
  2981 00000A39 C3                      .10                     ret                                                     ;return
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983                                  ;
  2984                                  ;       Routine:        NextConsoleRow
  2985                                  ;
  2986                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2987                                  ;
  2988                                  ;       In:             DS      OS data selector
  2989                                  ;
  2990                                  ;-----------------------------------------------------------------------------------------------------------------------
  2991 00000A3A A001080000              NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2992 00000A3F FEC0                                            inc     al                                              ;increment row
  2993 00000A41 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  2994 00000A46 3C18                                            cmp     al,ECONROWS                                     ;end of screen?
  2995 00000A48 7211                                            jb      .10                                             ;no, skip ahead
  2996 00000A4A E83F020000                                      call    ScrollConsoleRow                                ;scroll up one row
  2997 00000A4F A001080000                                      mov     al,[wbConsoleRow]                               ;row
  2998 00000A54 FEC8                                            dec     al                                              ;decrement row
  2999 00000A56 A201080000                                      mov     [wbConsoleRow],al                               ;save row
  3000 00000A5B C3                      .10                     ret                                                     ;return
  3001                                  ;-----------------------------------------------------------------------------------------------------------------------
  3002                                  ;
  3003                                  ;       Routine:        PreviousConsoleColumn
  3004                                  ;
  3005                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  3006                                  ;                       the column is set to the last position in the row and the row is decremented.
  3007                                  ;
  3008                                  ;       In:             DS      OS data selector
  3009                                  ;
  3010                                  ;-----------------------------------------------------------------------------------------------------------------------
  3011 00000A5C A000080000              PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  3012 00000A61 08C0                                            or      al,al                                           ;start of row?
  3013 00000A63 7514                                            jnz     .10                                             ;no, skip ahead
  3014 00000A65 8A2501080000                                    mov     ah,[wbConsoleRow]                               ;current row
  3015 00000A6B 08E4                                            or      ah,ah                                           ;top of screen?
  3016 00000A6D 7411                                            jz      .20                                             ;yes, exit with no change
  3017 00000A6F FECC                                            dec     ah                                              ;decrement row
  3018 00000A71 882501080000                                    mov     [wbConsoleRow],ah                               ;save row
  3019 00000A77 B050                                            mov     al,ECONCOLS                                     ;set maximum column
  3020 00000A79 FEC8                    .10                     dec     al                                              ;decrement column
  3021 00000A7B A200080000                                      mov     [wbConsoleColumn],al                            ;save column
  3022 00000A80 C3                      .20                     ret                                                     ;return
  3023                                  ;-----------------------------------------------------------------------------------------------------------------------
  3024                                  ;
  3025                                  ;       Routine:        PutConsoleChar
  3026                                  ;
  3027                                  ;       Description:    This routine writes one ASCII character to the console screen.
  3028                                  ;
  3029                                  ;       In:             AL      ASCII character
  3030                                  ;                       DS      OS data selector
  3031                                  ;
  3032                                  ;-----------------------------------------------------------------------------------------------------------------------
  3033 00000A81 51                      PutConsoleChar          push    ecx                                             ;save non-volatile regs
  3034 00000A82 06                                              push    es                                              ;
  3035 00000A83 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3036 00000A85 07                                              pop     es                                              ;... into extra segment reg
  3037 00000A86 8A0D00080000                                    mov     cl,[wbConsoleColumn]                            ;column
  3038 00000A8C 8A2D01080000                                    mov     ch,[wbConsoleRow]                               ;row
  3039 00000A92 E823020000                                      call    SetConsoleChar                                  ;put character at row, column
  3040 00000A97 07                                              pop     es                                              ;restore non-volatile regs
  3041 00000A98 59                                              pop     ecx                                             ;
  3042 00000A99 C3                                              ret                                                     ;return
  3043                                  ;-----------------------------------------------------------------------------------------------------------------------
  3044                                  ;
  3045                                  ;       Routine:        PutConsoleHexByte
  3046                                  ;
  3047                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  3048                                  ;
  3049                                  ;       In:             AL      byte value
  3050                                  ;                       CL      column
  3051                                  ;                       CH      row
  3052                                  ;                       DS      OS data selector
  3053                                  ;                       ES      CGA selector
  3054                                  ;
  3055                                  ;-----------------------------------------------------------------------------------------------------------------------
  3056 00000A9A 50                      PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  3057 00000A9B C0E804                                          shr     al,4                                            ;hi-order nybble
  3058 00000A9E E803000000                                      call    .10                                             ;make ASCII and store
  3059 00000AA3 58                                              pop     eax                                             ;byte value
  3060 00000AA4 240F                                            and     al,0Fh                                          ;lo-order nybble
  3061 00000AA6 0C30                    .10                     or      al,030h                                         ;apply ASCII zone
  3062 00000AA8 3C3A                                            cmp     al,03Ah                                         ;numeric?
  3063 00000AAA 7202                                            jb      .20                                             ;yes, skip ahead
  3064 00000AAC 0407                                            add     al,7                                            ;add ASCII offset for alpha
  3065 00000AAE E807020000              .20                     call    SetConsoleChar                                  ;display ASCII character
  3066 00000AB3 C3                                              ret                                                     ;return
  3067                                  ;-----------------------------------------------------------------------------------------------------------------------
  3068                                  ;
  3069                                  ;       Routine:        PutConsoleHexDword
  3070                                  ;
  3071                                  ;       Description:    This routine writes eight ASCII characters to the console representing a doubleword value.
  3072                                  ;
  3073                                  ;       In:             EAX     value
  3074                                  ;                       CL      column
  3075                                  ;                       CH      row
  3076                                  ;                       DS      OS data selector
  3077                                  ;                       ES      CGA selector
  3078                                  ;
  3079                                  ;-----------------------------------------------------------------------------------------------------------------------
  3080 00000AB4 50                      PutConsoleHexDword      push    eax
  3081 00000AB5 C1E810                                          shr     eax,16
  3082 00000AB8 E807000000                                      call    PutConsoleHexWord
  3083 00000ABD 58                                              pop     eax
  3084 00000ABE E801000000                                      call    PutConsoleHexWord
  3085 00000AC3 C3                                              ret
  3086                                  ;-----------------------------------------------------------------------------------------------------------------------
  3087                                  ;
  3088                                  ;       Routine:        PutConsoleHexWord
  3089                                  ;
  3090                                  ;       Description:    This routine writes four ASCII characters to the console representing a word value.
  3091                                  ;
  3092                                  ;       In:             EAX     value
  3093                                  ;                       CL      column
  3094                                  ;                       CH      row
  3095                                  ;                       DS      OS data selector
  3096                                  ;                       ES      CGA selector
  3097                                  ;
  3098                                  ;-----------------------------------------------------------------------------------------------------------------------
  3099 00000AC4 50                      PutConsoleHexWord       push    eax
  3100 00000AC5 C1E808                                          shr     eax,8
  3101 00000AC8 E8CDFFFFFF                                      call    PutConsoleHexByte
  3102 00000ACD 58                                              pop     eax
  3103 00000ACE E8C7FFFFFF                                      call    PutConsoleHexByte
  3104 00000AD3 C3                                              ret
  3105                                  ;-----------------------------------------------------------------------------------------------------------------------
  3106                                  ;
  3107                                  ;       Routine:        PutConsoleOIAChar
  3108                                  ;
  3109                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  3110                                  ;
  3111                                  ;       In:             DS      OS data selector
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114 00000AD4 53                      PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  3115 00000AD5 51                                              push    ecx                                             ;
  3116 00000AD6 56                                              push    esi                                             ;
  3117 00000AD7 1E                                              push    ds                                              ;
  3118 00000AD8 06                                              push    es                                              ;
  3119 00000AD9 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3120 00000ADB 1F                                              pop     ds                                              ;... into data segment register
  3121 00000ADC 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3122 00000ADE 07                                              pop     es                                              ;... into extra segment register
  3123 00000ADF BE05080000                                      mov     esi,wbConsoleScan0                              ;scan codes address
  3124 00000AE4 B718                                            mov     bh,ECONOIAROW                                   ;OIA row
  3125 00000AE6 B300                                            mov     bl,0                                            ;starting column
  3126 00000AE8 B906000000                                      mov     ecx,6                                           ;maximum scan codes
  3127 00000AED 51                      .10                     push    ecx                                             ;save remaining count
  3128 00000AEE 89D9                                            mov     ecx,ebx                                         ;row, column
  3129 00000AF0 AC                                              lodsb                                                   ;read scan code
  3130 00000AF1 08C0                                            or      al,al                                           ;scan code present?
  3131 00000AF3 7407                                            jz      .20                                             ;no, skip ahead
  3132 00000AF5 E8A0FFFFFF                                      call    PutConsoleHexByte                               ;display scan code
  3133 00000AFA EB0E                                            jmp     .30                                             ;continue
  3134 00000AFC B020                    .20                     mov     al,' '                                          ;ASCII space
  3135 00000AFE E8B7010000                                      call    SetConsoleChar                                  ;display space
  3136 00000B03 B020                                            mov     al,' '                                          ;ASCII space
  3137 00000B05 E8B0010000                                      call    SetConsoleChar                                  ;display space
  3138 00000B0A 80C302                  .30                     add     bl,2                                            ;next column (+2)
  3139 00000B0D 59                                              pop     ecx                                             ;restore remaining
  3140 00000B0E E2DD                                            loop    .10                                             ;next code
  3141 00000B10 A00B080000                                      mov     al,[wbConsoleChar]                              ;console ASCII character
  3142 00000B15 3C20                                            cmp     al,32                                           ;printable? (lower-bounds)
  3143 00000B17 720D                                            jb      .40                                             ;no, skip ahead
  3144 00000B19 3C7E                                            cmp     al,126                                          ;printable? (upper-bounds)
  3145 00000B1B 7709                                            ja      .40                                             ;no, skip ahead
  3146 00000B1D 88FD                                            mov     ch,bh                                           ;OIA row
  3147 00000B1F B128                                            mov     cl,40                                           ;character display column
  3148 00000B21 E894010000                                      call    SetConsoleChar                                  ;display ASCII character
  3149 00000B26 07                      .40                     pop     es                                              ;restore non-volatile regs
  3150 00000B27 1F                                              pop     ds                                              ;
  3151 00000B28 5E                                              pop     esi                                             ;
  3152 00000B29 59                                              pop     ecx                                             ;
  3153 00000B2A 5B                                              pop     ebx                                             ;
  3154 00000B2B C3                                              ret                                                     ;return
  3155                                  ;-----------------------------------------------------------------------------------------------------------------------
  3156                                  ;
  3157                                  ;       Routine:        PutConsoleOIAShift
  3158                                  ;
  3159                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  3160                                  ;
  3161                                  ;       In:             BL      shift flags
  3162                                  ;                       BH      lock flags
  3163                                  ;                       DS      OS data selector
  3164                                  ;
  3165                                  ;-----------------------------------------------------------------------------------------------------------------------
  3166 00000B2C 51                      PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  3167 00000B2D 06                                              push    es                                              ;
  3168 00000B2E 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3169 00000B30 07                                              pop     es                                              ;... into ES register
  3170 00000B31 B518                                            mov     ch,ECONOIAROW                                   ;OIA row
  3171 00000B33 B020                                            mov     al,EASCIISPACE                                  ;space is default character
  3172 00000B35 F6C302                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  3173 00000B38 7402                                            jz      .10                                             ;no, skip ahead
  3174 00000B3A B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3175 00000B3C B10E                    .10                     mov     cl,14                                           ;indicator column
  3176 00000B3E E877010000                                      call    SetConsoleChar                                  ;display ASCII character
  3177 00000B43 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3178 00000B45 F6C310                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  3179 00000B48 7402                                            jz      .20                                             ;no, skip ahead
  3180 00000B4A B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3181 00000B4C B140                    .20                     mov     cl,64                                           ;indicator column
  3182 00000B4E E867010000                                      call    SetConsoleChar                                  ;display ASCII character
  3183 00000B53 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3184 00000B55 F6C301                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  3185 00000B58 7402                                            jz      .30                                             ;no, skip ahead
  3186 00000B5A B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3187 00000B5C B10F                    .30                     mov     cl,15                                           ;indicator column
  3188 00000B5E E857010000                                      call    SetConsoleChar                                  ;display ASCII character
  3189 00000B63 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3190 00000B65 F6C308                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  3191 00000B68 7402                                            jz      .40                                             ;no, skip ahead
  3192 00000B6A B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3193 00000B6C B13F                    .40                     mov     cl,63                                           ;indicator column
  3194 00000B6E E847010000                                      call    SetConsoleChar                                  ;display ASCII character
  3195 00000B73 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3196 00000B75 F6C304                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  3197 00000B78 7402                                            jz      .50                                             ;no, skip ahead
  3198 00000B7A B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3199 00000B7C B110                    .50                     mov     cl,16                                           ;indicator column
  3200 00000B7E E837010000                                      call    SetConsoleChar                                  ;display ASCII character
  3201 00000B83 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3202 00000B85 F6C320                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  3203 00000B88 7402                                            jz      .60                                             ;no, skip ahead
  3204 00000B8A B041                                            mov     al,'A'                                          ;yes, indicate with 'A'
  3205 00000B8C B13E                    .60                     mov     cl,62                                           ;indicator column
  3206 00000B8E E827010000                                      call    SetConsoleChar                                  ;display ASCII character
  3207 00000B93 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3208 00000B95 F6C704                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  3209 00000B98 7402                                            jz      .70                                             ;no, skip ahead
  3210 00000B9A B043                                            mov     al,'C'                                          ;yes, indicate with 'C'
  3211 00000B9C B14E                    .70                     mov     cl,78                                           ;indicator column
  3212 00000B9E E817010000                                      call    SetConsoleChar                                  ;display ASCII character
  3213 00000BA3 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3214 00000BA5 F6C702                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  3215 00000BA8 7402                                            jz      .80                                             ;no, skip ahead
  3216 00000BAA B04E                                            mov     al,'N'                                          ;yes, indicate with 'N'
  3217 00000BAC B14D                    .80                     mov     cl,77                                           ;indicator column
  3218 00000BAE E807010000                                      call    SetConsoleChar                                  ;display ASCII character
  3219 00000BB3 B020                                            mov     al,EASCIISPACE                                  ;ASCII space
  3220 00000BB5 F6C701                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  3221 00000BB8 7402                                            jz      .90                                             ;no, skip ahead
  3222 00000BBA B053                                            mov     al,'S'                                          ;yes, indicate with 'S'
  3223 00000BBC B14C                    .90                     mov     cl,76                                           ;indicator column
  3224 00000BBE E8F7000000                                      call    SetConsoleChar                                  ;display ASCII character
  3225 00000BC3 07                                              pop     es                                              ;restore non-volatile regs
  3226 00000BC4 59                                              pop     ecx                                             ;
  3227 00000BC5 C3                                              ret                                                     ;return
  3228                                  ;-----------------------------------------------------------------------------------------------------------------------
  3229                                  ;
  3230                                  ;       Routine:        PutConsoleString
  3231                                  ;
  3232                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  3233                                  ;                       console position as needed.
  3234                                  ;
  3235                                  ;       In:             EDX     source address
  3236                                  ;                       DS      OS data selector
  3237                                  ;
  3238                                  ;-----------------------------------------------------------------------------------------------------------------------
  3239 00000BC6 56                      PutConsoleString        push    esi                                             ;save non-volatile regs
  3240 00000BC7 89D6                                            mov     esi,edx                                         ;source address
  3241 00000BC9 FC                                              cld                                                     ;forward strings
  3242 00000BCA AC                      .10                     lodsb                                                   ;ASCII character
  3243 00000BCB 08C0                                            or      al,al                                           ;end of string?
  3244 00000BCD 7422                                            jz      .40                                             ;yes, skip ahead
  3245 00000BCF 3C0D                                            cmp     al,EASCIIRETURN                                 ;carriage return?
  3246 00000BD1 7507                                            jne     .20                                             ;no, skip ahead
  3247 00000BD3 E8B2FDFFFF                                      call    FirstConsoleColumn                              ;move to start of row
  3248 00000BD8 EBF0                                            jmp     .10                                             ;next character
  3249 00000BDA 3C0A                    .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  3250 00000BDC 7507                                            jne     .30                                             ;no, skip ahead
  3251 00000BDE E857FEFFFF                                      call    NextConsoleRow                                  ;move to next row
  3252 00000BE3 EBE5                                            jmp     .10                                             ;next character
  3253 00000BE5 E897FEFFFF              .30                     call    PutConsoleChar                                  ;output character to console
  3254 00000BEA E830FEFFFF                                      call    NextConsoleColumn                               ;advance to next column
  3255 00000BEF EBD9                                            jmp     .10                                             ;next character
  3256 00000BF1 5E                      .40                     pop     esi                                             ;restore non-volatile regs
  3257 00000BF2 C3                                              ret                                                     ;return
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;       Routine:        Yield
  3261                                  ;
  3262                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  3263                                  ;
  3264                                  ;-----------------------------------------------------------------------------------------------------------------------
  3265 00000BF3 FB                      Yield                   sti                                                     ;enable maskagle interrupts
  3266 00000BF4 F4                                              hlt                                                     ;halt until external interrupt
  3267 00000BF5 C3                                              ret                                                     ;return
  3268                                  ;=======================================================================================================================
  3269                                  ;
  3270                                  ;       Message Queue Helper Routines
  3271                                  ;
  3272                                  ;       GetMessage
  3273                                  ;       PutMessage
  3274                                  ;
  3275                                  ;=======================================================================================================================
  3276                                  ;-----------------------------------------------------------------------------------------------------------------------
  3277                                  ;
  3278                                  ;       Routine:        GetMessage
  3279                                  ;
  3280                                  ;       Description:    This routine reads and removes a message from the message queue.
  3281                                  ;
  3282                                  ;       Out:            EAX     lo-order message data
  3283                                  ;                       EDX     hi-order message data
  3284                                  ;
  3285                                  ;                       CY      0 = message read
  3286                                  ;                               1 = no message to read
  3287                                  ;
  3288                                  ;-----------------------------------------------------------------------------------------------------------------------
  3289 00000BF6 53                      GetMessage              push    ebx                                             ;save non-volatile regs
  3290 00000BF7 51                                              push    ecx                                             ;
  3291 00000BF8 1E                                              push    ds                                              ;
  3292 00000BF9 6A2C                                            push    ELDTMQ                                          ;load message queue selector ...
  3293 00000BFB 1F                                              pop     ds                                              ;... into data segment register
  3294 00000BFC 8B1D00000000                                    mov     ebx,[MQHead]                                    ;head ptr
  3295 00000C02 8B03                                            mov     eax,[ebx]                                       ;lo-order 32 bits
  3296 00000C04 8B5304                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  3297 00000C07 09D0                                            or      eax,edx                                         ;is queue empty?
  3298 00000C09 F9                                              stc                                                     ;assume queue is emtpy
  3299 00000C0A 741B                                            jz      .20                                             ;yes, skip ahead
  3300 00000C0C 31C9                                            xor     ecx,ecx                                         ;store zero
  3301 00000C0E 890B                                            mov     [ebx],ecx                                       ;... in lo-order dword
  3302 00000C10 894B04                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  3303 00000C13 83C308                                          add     ebx,8                                           ;next queue element
  3304 00000C16 81E3FC030000                                    and     ebx,03FCh                                       ;at end of queue?
  3305 00000C1C 7502                                            jnz     .10                                             ;no, skip ahead
  3306 00000C1E B308                                            mov     bl,8                                            ;reset to 1st entry
  3307 00000C20 891D00000000            .10                     mov     [MQHead],ebx                                    ;save new head ptr
  3308 00000C26 F8                                              clc                                                     ;indicate message read
  3309 00000C27 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3310 00000C28 59                                              pop     ecx                                             ;
  3311 00000C29 5B                                              pop     ebx                                             ;
  3312 00000C2A C3                                              ret                                                     ;return
  3313                                  ;-----------------------------------------------------------------------------------------------------------------------
  3314                                  ;
  3315                                  ;       Routine:        PutMessage
  3316                                  ;
  3317                                  ;       Description:    This routine adda a message to the message queue.
  3318                                  ;
  3319                                  ;       In:             ECX     hi-order data word
  3320                                  ;                       EDX     lo-order data word
  3321                                  ;
  3322                                  ;       Out:            CY      0 = success
  3323                                  ;                               1 = fail: queue is full
  3324                                  ;
  3325                                  ;-----------------------------------------------------------------------------------------------------------------------
  3326 00000C2B 1E                      PutMessage              push    ds                                              ;save non-volatile regs
  3327 00000C2C 6A2C                                            push    ELDTMQ                                          ;load task message queue selector ...
  3328 00000C2E 1F                                              pop     ds                                              ;... into data segment register
  3329 00000C2F A104000000                                      mov     eax,[MQTail]                                    ;tail ptr
  3330 00000C34 833800                                          cmp     dword [eax],0                                   ;is queue full?
  3331 00000C37 F9                                              stc                                                     ;assume failure
  3332 00000C38 7517                                            jne     .20                                             ;yes, cannot store
  3333 00000C3A 8910                                            mov     [eax],edx                                       ;store lo-order data
  3334 00000C3C 894804                                          mov     [eax+4],ecx                                     ;store hi-order data
  3335 00000C3F 83C008                                          add     eax,8                                           ;next queue element adr
  3336 00000C42 25FC030000                                      and     eax,03FCh                                       ;at end of queue?
  3337 00000C47 7502                                            jnz     .10                                             ;no, skip ahead
  3338 00000C49 B008                                            mov     al,8                                            ;reset to top of queue
  3339 00000C4B A304000000              .10                     mov     [MQTail],eax                                    ;save new tail ptr
  3340 00000C50 F8                                              clc                                                     ;indicate success
  3341 00000C51 1F                      .20                     pop     ds                                              ;restore non-volatile regs
  3342 00000C52 C3                                              ret                                                     ;return
  3343                                  ;=======================================================================================================================
  3344                                  ;
  3345                                  ;       Memory-Mapped Video Routines
  3346                                  ;
  3347                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  3348                                  ;
  3349                                  ;       ClearConsoleScreen
  3350                                  ;       ScrollConsoleRow
  3351                                  ;       SetConsoleChar
  3352                                  ;       SetConsoleString
  3353                                  ;
  3354                                  ;=======================================================================================================================
  3355                                  ;-----------------------------------------------------------------------------------------------------------------------
  3356                                  ;
  3357                                  ;       Routine:        ClearConsoleScreen
  3358                                  ;
  3359                                  ;       Description:    This routine clears the console (CGA) screen.
  3360                                  ;
  3361                                  ;-----------------------------------------------------------------------------------------------------------------------
  3362 00000C53 51                      ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  3363 00000C54 57                                              push    edi                                             ;
  3364 00000C55 1E                                              push    ds                                              ;
  3365 00000C56 06                                              push    es                                              ;
  3366 00000C57 6A18                                            push    EGDTOSDATA                                      ;load OS Data selector ...
  3367 00000C59 1F                                              pop     ds                                              ;... into DS register
  3368 00000C5A 6A20                                            push    EGDTCGA                                         ;load CGA selector ...
  3369 00000C5C 07                                              pop     es                                              ;... into ES register
  3370 00000C5D B820072007                                      mov     eax,ECONCLEARDWORD                              ;initializtion value
  3371 00000C62 B9C0030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  3372 00000C67 31FF                                            xor     edi,edi                                         ;target offset
  3373 00000C69 FC                                              cld                                                     ;forward strings
  3374 00000C6A F3AB                                            rep     stosd                                           ;reset screen body
  3375 00000C6C B820702070                                      mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3376 00000C71 B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3377 00000C76 F3AB                                            rep     stosd                                           ;reset OIA line
  3378 00000C78 30C0                                            xor     al,al                                           ;zero register
  3379 00000C7A A201080000                                      mov     [wbConsoleRow],al                               ;reset console row
  3380 00000C7F A200080000                                      mov     [wbConsoleColumn],al                            ;reset console column
  3381 00000C84 E857000000                                      call    PlaceCursor                                     ;place cursor at current position
  3382 00000C89 07                                              pop     es                                              ;restore non-volatile regs
  3383 00000C8A 1F                                              pop     ds                                              ;
  3384 00000C8B 5F                                              pop     edi                                             ;
  3385 00000C8C 59                                              pop     ecx                                             ;
  3386 00000C8D C3                                              ret                                                     ;return
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ;
  3389                                  ;       Routine:        ScrollConsoleRow
  3390                                  ;
  3391                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  3392                                  ;
  3393                                  ;-----------------------------------------------------------------------------------------------------------------------
  3394 00000C8E 51                      ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3395 00000C8F 56                                              push    esi                                             ;
  3396 00000C90 57                                              push    edi                                             ;
  3397 00000C91 1E                                              push    ds                                              ;
  3398 00000C92 06                                              push    es                                              ;
  3399 00000C93 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3400 00000C95 1F                                              pop     ds                                              ;... into DS
  3401 00000C96 6A20                                            push    EGDTCGA                                         ;load CGA video selector ...
  3402 00000C98 07                                              pop     es                                              ;... into ES
  3403 00000C99 B998030000                                      mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3404 00000C9E BEA0000000                                      mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3405 00000CA3 31FF                                            xor     edi,edi                                         ;EDI = target (line 1)
  3406 00000CA5 FC                                              cld                                                     ;forward strings
  3407 00000CA6 F3A5                                            rep     movsd                                           ;move 24 lines up
  3408 00000CA8 B820072007                                      mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3409 00000CAD B928000000                                      mov     ecx,ECONROWDWORDS                               ;double-words per row
  3410 00000CB2 F3AB                                            rep     stosd                                           ;clear bottom row
  3411 00000CB4 07                                              pop     es                                              ;restore non-volatile regs
  3412 00000CB5 1F                                              pop     ds                                              ;
  3413 00000CB6 5F                                              pop     edi                                             ;
  3414 00000CB7 5E                                              pop     esi                                             ;
  3415 00000CB8 59                                              pop     ecx                                             ;
  3416 00000CB9 C3                                              ret                                                     ;return
  3417                                  ;-----------------------------------------------------------------------------------------------------------------------
  3418                                  ;
  3419                                  ;       Routine:        SetConsoleChar
  3420                                  ;
  3421                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3422                                  ;
  3423                                  ;       In:             AL      ASCII character
  3424                                  ;                       CL      column
  3425                                  ;                       CH      row
  3426                                  ;                       ES      CGA selector
  3427                                  ;
  3428                                  ;       Out:            EAX     last target address written (ES:)
  3429                                  ;                       CL      column + 1
  3430                                  ;
  3431                                  ;-----------------------------------------------------------------------------------------------------------------------
  3432 00000CBA 88C2                    SetConsoleChar          mov     dl,al                                           ;ASCII character
  3433 00000CBC 0FB6C5                                          movzx   eax,ch                                          ;row
  3434 00000CBF B450                                            mov     ah,ECONCOLS                                     ;cols/row
  3435 00000CC1 F6E4                                            mul     ah                                              ;row * cols/row
  3436 00000CC3 00C8                                            add     al,cl                                           ;add column
  3437 00000CC5 80D400                                          adc     ah,0                                            ;handle carry
  3438 00000CC8 D1E0                                            shl     eax,1                                           ;screen offset
  3439 00000CCA 268810                                          mov     [es:eax],dl                                     ;store character
  3440 00000CCD FEC1                                            inc     cl                                              ;next column
  3441 00000CCF C3                                              ret                                                     ;return
  3442                                  ;-----------------------------------------------------------------------------------------------------------------------
  3443                                  ;
  3444                                  ;       Routine:        SetConsoleString
  3445                                  ;
  3446                                  ;       Description:    This routine outputs a sequence of ASCII character at the given row and column.
  3447                                  ;
  3448                                  ;       In:             ESI     source offset (DS:)
  3449                                  ;                       CL      column
  3450                                  ;                       CH      row
  3451                                  ;                       ES      CGA selector
  3452                                  ;
  3453                                  ;-----------------------------------------------------------------------------------------------------------------------
  3454 00000CD0 56                      SetConsoleString        push    esi                                             ;save non-volatile regs
  3455 00000CD1 FC                                              cld                                                     ;forward strings
  3456 00000CD2 AC                      .10                     lodsb                                                   ;next ASCII character
  3457 00000CD3 84C0                                            test    al,al                                           ;end of string?
  3458 00000CD5 7407                                            jz      .20                                             ;yes, branch
  3459 00000CD7 E8DEFFFFFF                                      call    SetConsoleChar                                  ;store character
  3460 00000CDC EBF4                                            jmp     .10                                             ;continue
  3461 00000CDE 5E                      .20                     pop     esi                                             ;restore non-volatile regs
  3462 00000CDF C3                                              ret                                                     ;return
  3463                                  ;=======================================================================================================================
  3464                                  ;
  3465                                  ;       Input/Output Routines
  3466                                  ;
  3467                                  ;       These routines read and/or write directly to ports.
  3468                                  ;
  3469                                  ;       PlaceCursor
  3470                                  ;       PutPrimaryEndOfInt
  3471                                  ;       PutSecondaryEndOfInt
  3472                                  ;       ResetSystem
  3473                                  ;       SetKeyboardLamps
  3474                                  ;       WaitForKeyInBuffer
  3475                                  ;       WaitForKeyOutBuffer
  3476                                  ;
  3477                                  ;=======================================================================================================================
  3478                                  ;-----------------------------------------------------------------------------------------------------------------------
  3479                                  ;
  3480                                  ;       Routine:        PlaceCursor
  3481                                  ;
  3482                                  ;       Description:    This routine positions the cursor on the console.
  3483                                  ;
  3484                                  ;       In:             DS      OS data selector
  3485                                  ;
  3486                                  ;-----------------------------------------------------------------------------------------------------------------------
  3487 00000CE0 51                      PlaceCursor             push    ecx                                             ;save non-volatile regs
  3488 00000CE1 A001080000                                      mov     al,[wbConsoleRow]                               ;AL = row
  3489 00000CE6 B450                                            mov     ah,ECONCOLS                                     ;AH = cols/row
  3490 00000CE8 F6E4                                            mul     ah                                              ;row offset
  3491 00000CEA 020500080000                                    add     al,[wbConsoleColumn]                            ;add column
  3492 00000CF0 80D400                                          adc     ah,0                                            ;add overflow
  3493 00000CF3 89C1                                            mov     ecx,eax                                         ;screen offset
  3494 00000CF5 B2D4                                            mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3495 00000CF7 B603                                            mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3496 00000CF9 B00E                                            mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3497 00000CFB EE                                              out     dx,al                                           ;select register
  3498 00000CFC 42                                              inc     edx                                             ;data port
  3499 00000CFD 88E8                                            mov     al,ch                                           ;hi-order cursor loc
  3500 00000CFF EE                                              out     dx,al                                           ;store hi-order loc
  3501 00000D00 4A                                              dec     edx                                             ;register select port
  3502 00000D01 B00F                                            mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3503 00000D03 EE                                              out     dx,al                                           ;select register
  3504 00000D04 42                                              inc     edx                                             ;data port
  3505 00000D05 88C8                                            mov     al,cl                                           ;lo-order cursor loc
  3506 00000D07 EE                                              out     dx,al                                           ;store lo-order loc
  3507 00000D08 59                                              pop     ecx                                             ;restore non-volatile regs
  3508 00000D09 C3                                              ret                                                     ;return
  3509                                  ;-----------------------------------------------------------------------------------------------------------------------
  3510                                  ;
  3511                                  ;       Routine:        PutPrimaryEndOfInt
  3512                                  ;
  3513                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3514                                  ;
  3515                                  ;-----------------------------------------------------------------------------------------------------------------------
  3516 00000D0A FB                      PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3517 00000D0B B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3518 00000D0D E620                                            out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3519 00000D0F C3                                              ret                                                     ;return
  3520                                  ;-----------------------------------------------------------------------------------------------------------------------
  3521                                  ;
  3522                                  ;       Routine:        PutSecondaryEndOfInt
  3523                                  ;
  3524                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3525                                  ;
  3526                                  ;-----------------------------------------------------------------------------------------------------------------------
  3527 00000D10 FB                      PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3528 00000D11 B020                                            mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3529 00000D13 E6A0                                            out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3530 00000D15 C3                                              ret                                                     ;return
  3531                                  ;-----------------------------------------------------------------------------------------------------------------------
  3532                                  ;
  3533                                  ;       Routine:        ResetSystem
  3534                                  ;
  3535                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3536                                  ;
  3537                                  ;       Out:            N/A     This routine does not return.
  3538                                  ;
  3539                                  ;-----------------------------------------------------------------------------------------------------------------------
  3540 00000D16 B9FFFF1F00              ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3541 00000D1B E2FE                                            loop    $                                               ;clear interrupts
  3542 00000D1D B0FE                                            mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3543 00000D1F E664                                            out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3544 00000D21 FB                      .10                     sti                                                     ;enable maskable interrupts
  3545 00000D22 F4                                              hlt                                                     ;halt until interrupt
  3546 00000D23 EBFC                                            jmp     .10                                             ;repeat until reset kicks in
  3547                                  ;-----------------------------------------------------------------------------------------------------------------------
  3548                                  ;
  3549                                  ;       Routine:        SetKeyboardLamps
  3550                                  ;
  3551                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3552                                  ;
  3553                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3554                                  ;
  3555                                  ;-----------------------------------------------------------------------------------------------------------------------
  3556 00000D25 E81C000000              SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3557 00000D2A B0ED                                            mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3558 00000D2C E660                                            out     EKEYBPORTDATA,al                                ;send command to 8042
  3559 00000D2E E821000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3560 00000D33 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3561 00000D35 E80C000000                                      call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3562 00000D3A 88F8                                            mov     al,bh                                           ;set/reset lamps value
  3563 00000D3C E660                                            out     EKEYBPORTDATA,al                                ;send lamps value
  3564 00000D3E E811000000                                      call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3565 00000D43 E460                                            in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3566 00000D45 C3                                              ret                                                     ;return
  3567                                  ;-----------------------------------------------------------------------------------------------------------------------
  3568                                  ;
  3569                                  ;       Routine:        WaitForKeyInBuffer
  3570                                  ;
  3571                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3572                                  ;
  3573                                  ;       Out:            ZF      1 = Input buffer ready
  3574                                  ;                               0 = Input buffer not ready after timeout
  3575                                  ;
  3576                                  ;-----------------------------------------------------------------------------------------------------------------------
  3577 00000D46 51                      WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3578 00000D47 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3579 00000D4C E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3580 00000D4E A802                                            test    al,EKEYBBITIN                                   ;is input buffer still full?
  3581 00000D50 E0FA                                            loopnz  .10                                             ;yes, repeat till timeout
  3582 00000D52 59                                              pop     ecx                                             ;restore non-volatile regs
  3583 00000D53 C3                                              ret                                                     ;return
  3584                                  ;-----------------------------------------------------------------------------------------------------------------------
  3585                                  ;
  3586                                  ;       Routine:        WaitForKeyOutBuffer
  3587                                  ;
  3588                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3589                                  ;
  3590                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3591                                  ;                               0 = Output buffer empty after timeout
  3592                                  ;
  3593                                  ;-----------------------------------------------------------------------------------------------------------------------
  3594 00000D54 51                      WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3595 00000D55 B900000100                                      mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3596 00000D5A E464                    .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3597 00000D5C A801                                            test    al,EKEYBBITOUT                                  ;output buffer status bit
  3598 00000D5E E1FA                                            loopz   .10                                             ;loop until output buffer bit
  3599 00000D60 59                                              pop     ecx                                             ;restore non-volatile regs
  3600 00000D61 C3                                              ret                                                     ;return
  3601                                  ;-----------------------------------------------------------------------------------------------------------------------
  3602                                  ;
  3603                                  ;       End of the Kernel Function Library
  3604                                  ;
  3605                                  ;-----------------------------------------------------------------------------------------------------------------------
  3606 00000D62 00<rept>                                        times   8192-($-$$) db 0h                               ;zero fill to end of section
  3607                                  ;=======================================================================================================================
  3608                                  ;
  3609                                  ;       Console Task
  3610                                  ;
  3611                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3612                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3613                                  ;       screen and responds to user commands.
  3614                                  ;
  3615                                  ;=======================================================================================================================
  3616                                  ;-----------------------------------------------------------------------------------------------------------------------
  3617                                  ;
  3618                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3619                                  ;
  3620                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3621                                  ;
  3622                                  ;-----------------------------------------------------------------------------------------------------------------------
  3623                                  section                 constack                                                ;console task stack
  3624 00000000 00<rept>                                        times   1792-($-$$) db 0h                               ;zero fill to end of section
  3625                                  ;-----------------------------------------------------------------------------------------------------------------------
  3626                                  ;
  3627                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3628                                  ;
  3629                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3630                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3631                                  ;       16 descriptors. Six are initially defined.
  3632                                  ;
  3633                                  ;-----------------------------------------------------------------------------------------------------------------------
  3634                                  section                 conldt                                                  ;console local descriptors
  3635 00000000 7F00804700934000                                dq      004093004780007Fh                               ;04 TSS alias
  3636 00000008 7F00004700934000                                dq      004093004700007Fh                               ;0c LDT alias
  3637 00000010 FF06004000934000                                dq      00409300400006FFh                               ;14 stack
  3638 00000018 FFFF00000093CF00                                dq      00CF93000000FFFFh                               ;1c data
  3639 00000020 FF0F0050009B4000                                dq      00409B0050000FFFh                               ;24 code
  3640 00000028 FF07004800934000                                dq      00409300480007FFh                               ;2c message queue
  3641 00000030 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3642                                  ;-----------------------------------------------------------------------------------------------------------------------
  3643                                  ;
  3644                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3645                                  ;
  3646                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3647                                  ;       segment. CS to console code.
  3648                                  ;
  3649                                  ;-----------------------------------------------------------------------------------------------------------------------
  3650                                  section                 contss                                                  ;console task state segment
  3651 00000000 00000000                                        dd      0                                               ;00 back-link tss
  3652 00000004 00070000                                        dd      0700h                                           ;04 esp ring 0
  3653 00000008 14000000                                        dd      0014h                                           ;08 ss ring 0
  3654 0000000C 00070000                                        dd      0700h                                           ;0c esp ring 1
  3655 00000010 14000000                                        dd      0014h                                           ;10 es ring 1
  3656 00000014 00070000                                        dd      0700h                                           ;14 esp ring 2
  3657 00000018 14000000                                        dd      0014h                                           ;18 ss ring 2
  3658 0000001C 00000000                                        dd      0                                               ;1c cr ring 3
  3659 00000020 00000000                                        dd      0                                               ;20 eip
  3660 00000024 00020000                                        dd      0200h                                           ;24 eflags
  3661 00000028 00000000                                        dd      0                                               ;28 eax
  3662 0000002C 00000000                                        dd      0                                               ;2c ecx
  3663 00000030 00000000                                        dd      0                                               ;30 edx
  3664 00000034 00000000                                        dd      0                                               ;34 ebx
  3665 00000038 00070000                                        dd      0700h                                           ;38 esp ring 3
  3666 0000003C 00000000                                        dd      0                                               ;3c ebp
  3667 00000040 00000000                                        dd      0                                               ;40 esi
  3668 00000044 00000000                                        dd      0                                               ;44 edi
  3669 00000048 1C000000                                        dd      001Ch                                           ;48 es
  3670 0000004C 24000000                                        dd      0024h                                           ;4c cs
  3671 00000050 14000000                                        dd      0014h                                           ;50 ss ring 3
  3672 00000054 1C000000                                        dd      001Ch                                           ;54 ds
  3673 00000058 00000000                                        dd      0                                               ;58 fs
  3674 0000005C 00000000                                        dd      0                                               ;5c gs
  3675 00000060 60000000                                        dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3676 00000064 00<rept>                                        times   128-($-$$) db 0h                                ;zero fill to end of section
  3677                                  ;-----------------------------------------------------------------------------------------------------------------------
  3678                                  ;
  3679                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3680                                  ;
  3681                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3682                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3683                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3684                                  ;       event.
  3685                                  ;
  3686                                  ;-----------------------------------------------------------------------------------------------------------------------
  3687                                  section                 conmque                                                 ;console message queue
  3688 00000000 08000000                                        dd      8                                               ;head pointer
  3689 00000004 08000000                                        dd      8                                               ;tail pointer
  3690 00000008 00000000<rept>                                  times   510 dd 0                                        ;queue elements
  3691                                  ;-----------------------------------------------------------------------------------------------------------------------
  3692                                  ;
  3693                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3694                                  ;
  3695                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3696                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3697                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3698                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3699                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3700                                  ;       board input, echoing to the console screen and responding to user commands.
  3701                                  ;
  3702                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3703                                  ;
  3704                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3705                                  ;                               |  Real Mode Interrupt Vectors                  |
  3706                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3707                                  ;                               |  Reserved BIOS Memory Area                    |
  3708                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3709                                  ;                               |  Shared Kernel Memory Area                    |
  3710                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3711                                  ;                               |  Global Descriptor Table (GDT)                |
  3712                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3713                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3714                                  ;                       002000  +-----------------------------------------------+
  3715                                  ;                               |  Interrupt Handlers                           |
  3716                                  ;                               |  Kernel Function Library                      |
  3717                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3718                                  ;                               |  Console Task Stack Area                      |
  3719                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3720                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3721                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3722                                  ;                               |  Console Task Task State Segment (TSS)        |
  3723                                  ;                       004800  +-----------------------------------------------+
  3724                                  ;                               |  Console Task Message Queue                   |
  3725                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3726                                  ;                               |  Console Task Code                            |
  3727                                  ;                               |  Console Task Constants                       |
  3728                                  ;                       006000  +===============================================+
  3729                                  ;
  3730                                  ;-----------------------------------------------------------------------------------------------------------------------
  3731                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3732 00000000 E869000000              ConCode                 call    ConInitializeData                               ;initialize console variables
  3733                                                          clearConsoleScreen                                      ;clear the console screen
  3733 00000005 B000                <1>  mov al,eClearConsoleScreen
  3733 00000007 CD30                <1>  int _svc
  3734                                                          putConsoleString czTitle                                ;display startup message
  3734 00000009 BA[63010000]        <1>  mov edx,%1
  3734 0000000E B004                <1>  mov al,ePutConsoleString
  3734 00000010 CD30                <1>  int _svc
  3735                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3735                              <1> .10 :
  3735 00000012 BA[61010000]        <1>  mov edx,%1
  3735 00000017 B004                <1>  mov al,ePutConsoleString
  3735 00000019 CD30                <1>  int _svc
  3736                                                          placeCursor                                             ;set CRT cursor location
  3736 0000001B B003                <1>  mov al,ePlaceCursor
  3736 0000001D CD30                <1>  int _svc
  3737                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3737 0000001F BA0C080000          <1>  mov edx,%1
  3737 00000024 B94F000000          <1>  mov ecx,%2
  3737 00000029 B701                <1>  mov bh,%3
  3737 0000002B B30D                <1>  mov bl,%4
  3737 0000002D B002                <1>  mov al,eGetConsoleString
  3737 0000002F CD30                <1>  int _svc
  3738 00000031 E851000000                                      call    ConPutNewLine                                   ;newline
  3739 00000036 BA0C080000                                      mov     edx,wzConsoleInBuffer                           ;console input buffer
  3740 0000003B BB5C080000                                      mov     ebx,wzConsoleToken                              ;token buffer
  3741 00000040 E84C000000                                      call    ConTakeToken                                    ;handle console input
  3742 00000045 BA5C080000                                      mov     edx,wzConsoleToken                              ;token buffer
  3743 0000004A E877000000                                      call    ConDetermineCommand                             ;determine command number
  3744 0000004F 83F808                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3745 00000052 720B                                            jb      .20                                             ;yes, branch
  3746                                                          putConsoleString czUnknownCommand                       ;display error message
  3746 00000054 BA[81010000]        <1>  mov edx,%1
  3746 00000059 B004                <1>  mov al,ePutConsoleString
  3746 0000005B CD30                <1>  int _svc
  3747 0000005D EBB3                                            jmp     .10                                             ;next command
  3748 0000005F C1E002                  .20                     shl     eax,2                                           ;index into jump table
  3749 00000062 BA[07010000]                                    mov     edx,tConJmpTbl                                  ;jump table base address
  3750 00000067 8B0402                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3751 0000006A FFD0                                            call    eax                                             ;call command handler
  3752 0000006C EBA4                                            jmp     .10                                             ;next command
  3753                                  ;-----------------------------------------------------------------------------------------------------------------------
  3754                                  ;
  3755                                  ;       Routine:        ConInitializeData
  3756                                  ;
  3757                                  ;       Description:    This routine initializes console task variables.
  3758                                  ;
  3759                                  ;-----------------------------------------------------------------------------------------------------------------------
  3760 0000006E 51                      ConInitializeData       push    ecx                                             ;save non-volatile regs
  3761 0000006F 57                                              push    edi                                             ;
  3762 00000070 06                                              push    es                                              ;
  3763                                  ;
  3764                                  ;       Initialize console work areas.
  3765                                  ;
  3766 00000071 6A18                                            push    EGDTOSDATA                                      ;load OS data selector ...
  3767 00000073 07                                              pop     es                                              ;... into extra segment register
  3768 00000074 BF00080000                                      mov     edi,ECONDATA                                    ;OS console data address
  3769 00000079 30C0                                            xor     al,al                                           ;initialization value
  3770 0000007B B9AC000000                                      mov     ecx,ECONDATALEN                                 ;size of OS console data
  3771 00000080 FC                                              cld                                                     ;forward strings
  3772 00000081 F3AA                                            rep     stosb                                           ;initialize data
  3773                                  ;
  3774                                  ;       Restore and return.
  3775                                  ;
  3776 00000083 07                                              pop     es                                              ;restore non-volatile regs
  3777 00000084 5F                                              pop     edi                                             ;
  3778 00000085 59                                              pop     ecx                                             ;
  3779 00000086 C3                                              ret                                                     ;return
  3780                                  ;-----------------------------------------------------------------------------------------------------------------------
  3781                                  ;
  3782                                  ;       Routine:        ConPutNewLine
  3783                                  ;
  3784                                  ;       Description:    Write a new-line to the console.
  3785                                  ;
  3786                                  ;-----------------------------------------------------------------------------------------------------------------------
  3787                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  3787                              <1> ConPutNewLine :
  3787 00000087 BA[5E010000]        <1>  mov edx,%1
  3787 0000008C B004                <1>  mov al,ePutConsoleString
  3787 0000008E CD30                <1>  int _svc
  3788 00000090 C3                                              ret                                                     ;return
  3789                                  ;-----------------------------------------------------------------------------------------------------------------------
  3790                                  ;
  3791                                  ;       Routine:        ConTakeToken
  3792                                  ;
  3793                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3794                                  ;
  3795                                  ;       In:             DS:EDX  source buffer address
  3796                                  ;                       DS:EBX  target buffer address
  3797                                  ;
  3798                                  ;       Out:            DS:EDX  source buffer address
  3799                                  ;                       DS:EBX  target buffer address
  3800                                  ;
  3801                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3802                                  ;
  3803                                  ;-----------------------------------------------------------------------------------------------------------------------
  3804 00000091 56                      ConTakeToken            push    esi                                             ;save non-volatile regs
  3805 00000092 57                                              push    edi                                             ;
  3806 00000093 06                                              push    es                                              ;
  3807 00000094 1E                                              push    ds                                              ;load data segment selector ...
  3808 00000095 07                                              pop     es                                              ;... into extra segment reg
  3809 00000096 89D6                                            mov     esi,edx                                         ;source buffer address
  3810 00000098 89DF                                            mov     edi,ebx                                         ;target buffer address
  3811 0000009A C60700                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3812 0000009D FC                                              cld                                                     ;forward strings
  3813 0000009E AC                      .10                     lodsb                                                   ;load byte
  3814 0000009F 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3815 000000A1 74FB                                            je      .10                                             ;yes, continue
  3816 000000A3 84C0                                            test    al,al                                           ;end of line?
  3817 000000A5 7410                                            jz      .40                                             ;yes, branch
  3818 000000A7 AA                      .20                     stosb                                                   ;store byte
  3819 000000A8 AC                                              lodsb                                                   ;load byte
  3820 000000A9 84C0                                            test    al,al                                           ;end of line?
  3821 000000AB 740A                                            jz      .40                                             ;no, continue
  3822 000000AD 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3823 000000AF 75F6                                            jne     .20                                             ;no, continue
  3824 000000B1 AC                      .30                     lodsb                                                   ;load byte
  3825 000000B2 3C20                                            cmp     al,EASCIISPACE                                  ;space?
  3826 000000B4 74FB                                            je      .30                                             ;yes, continue
  3827 000000B6 4E                                              dec     esi                                             ;pre-position
  3828 000000B7 C60700                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3829 000000BA 89D7                                            mov     edi,edx                                         ;source buffer address
  3830 000000BC AC                      .50                     lodsb                                                   ;remaining byte
  3831 000000BD AA                                              stosb                                                   ;move to front of buffer
  3832 000000BE 84C0                                            test    al,al                                           ;end of line?
  3833 000000C0 75FA                                            jnz     .50                                             ;no, continue
  3834 000000C2 07                                              pop     es                                              ;restore non-volatile regs
  3835 000000C3 5F                                              pop     edi                                             ;
  3836 000000C4 5E                                              pop     esi                                             ;
  3837 000000C5 C3                                              ret                                                     ;return
  3838                                  ;-----------------------------------------------------------------------------------------------------------------------
  3839                                  ;
  3840                                  ;       Routine:        ConDetermineCommand
  3841                                  ;
  3842                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3843                                  ;
  3844                                  ;       input:          DS:EDX  command address
  3845                                  ;
  3846                                  ;       output:         EAX     >=0     = command nbr
  3847                                  ;                               0       = unknown command
  3848                                  ;
  3849                                  ;-----------------------------------------------------------------------------------------------------------------------
  3850 000000C6 53                      ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3851 000000C7 51                                              push    ecx                                             ;
  3852 000000C8 56                                              push    esi                                             ;
  3853 000000C9 57                                              push    edi                                             ;
  3854                                                          upperCaseString                                         ;upper-case string at EDX
  3854 000000CA B006                <1>  mov al,eUpperCaseString
  3854 000000CC CD30                <1>  int _svc
  3855 000000CE BE[27010000]                                    mov     esi,tConCmdTbl                                  ;commands table
  3856 000000D3 31FF                                            xor     edi,edi                                         ;intialize command number
  3857 000000D5 FC                                              cld                                                     ;forward strings
  3858 000000D6 AC                      .10                     lodsb                                                   ;command length
  3859 000000D7 0FB6C8                                          movzx   ecx,al                                          ;command length
  3860 000000DA E30D                                            jecxz   .20                                             ;branch if end of table
  3861 000000DC 89F3                                            mov     ebx,esi                                         ;table entry address
  3862 000000DE 01CE                                            add     esi,ecx                                         ;next table entry address
  3863                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3863 000000E0 B001                <1>  mov al,eCompareMemory
  3863 000000E2 CD30                <1>  int _svc
  3864 000000E4 E303                                            jecxz   .20                                             ;branch if equal
  3865 000000E6 47                                              inc     edi                                             ;increment command nbr
  3866 000000E7 EBED                                            jmp     .10                                             ;repeat
  3867 000000E9 89F8                    .20                     mov     eax,edi                                         ;command number
  3868 000000EB 5F                                              pop     edi                                             ;restore non-volatile regs
  3869 000000EC 5E                                              pop     esi                                             ;
  3870 000000ED 59                                              pop     ecx                                             ;
  3871 000000EE 5B                                              pop     ebx                                             ;
  3872 000000EF C3                                              ret                                                     ;return
  3873                                  ;-----------------------------------------------------------------------------------------------------------------------
  3874                                  ;
  3875                                  ;       Routine:        ConClear
  3876                                  ;
  3877                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3878                                  ;
  3879                                  ;-----------------------------------------------------------------------------------------------------------------------
  3880                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3880                              <1> ConClear :
  3880 000000F0 B000                <1>  mov al,eClearConsoleScreen
  3880 000000F2 CD30                <1>  int _svc
  3881 000000F4 C3                                              ret                                                     ;return
  3882                                  ;-----------------------------------------------------------------------------------------------------------------------
  3883                                  ;
  3884                                  ;       Routine:        ConExit
  3885                                  ;
  3886                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3887                                  ;
  3888                                  ;-----------------------------------------------------------------------------------------------------------------------
  3889                                  ConExit                 resetSystem                                             ;issue system reset
  3889                              <1> ConExit :
  3889 000000F5 B005                <1>  mov al,eResetSystem
  3889 000000F7 CD30                <1>  int _svc
  3890 000000F9 C3                                              ret                                                     ;return
  3891                                  ;-----------------------------------------------------------------------------------------------------------------------
  3892                                  ;
  3893                                  ;       Routine:        ConInt6
  3894                                  ;
  3895                                  ;       Description:    This routine issues an interrupt 6 to exercise the interrupt handler.
  3896                                  ;
  3897                                  ;-----------------------------------------------------------------------------------------------------------------------
  3898 000000FA 0F0B                    ConInt6                 ud2                                                     ;raise bad opcode exception
  3899 000000FC C3                                              ret                                                     ;return (not executed)
  3900                                  ;-----------------------------------------------------------------------------------------------------------------------
  3901                                  ;
  3902                                  ;       Routine:        ConVersion
  3903                                  ;
  3904                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3905                                  ;
  3906                                  ;-----------------------------------------------------------------------------------------------------------------------
  3907                                  ConVersion              putConsoleString czTitle                                ;display version message
  3907                              <1> ConVersion :
  3907 000000FD BA[63010000]        <1>  mov edx,%1
  3907 00000102 B004                <1>  mov al,ePutConsoleString
  3907 00000104 CD30                <1>  int _svc
  3908 00000106 C3                                              ret                                                     ;return
  3909                                  ;-----------------------------------------------------------------------------------------------------------------------
  3910                                  ;
  3911                                  ;       Tables
  3912                                  ;
  3913                                  ;-----------------------------------------------------------------------------------------------------------------------
  3914                                                                                                                  ;---------------------------------------
  3915                                                                                                                  ;  Command Jump Table
  3916                                                                                                                  ;---------------------------------------
  3917                                  tConJmpTbl              equ     $                                               ;command jump table
  3918 00000107 F5000000                                        dd      ConExit         - ConCode                       ;shutdown command routine offset
  3919 0000010B FD000000                                        dd      ConVersion      - ConCode                       ;version command routine offset
  3920 0000010F F0000000                                        dd      ConClear        - ConCode                       ;clear command routine offset
  3921 00000113 F5000000                                        dd      ConExit         - ConCode                       ;exit command routine offset
  3922 00000117 FA000000                                        dd      ConInt6         - ConCode                       ;int6 command routine offset
  3923 0000011B F5000000                                        dd      ConExit         - ConCode                       ;quit command routine offset
  3924 0000011F F0000000                                        dd      ConClear        - ConCode                       ;cls command routine offset
  3925 00000123 FD000000                                        dd      ConVersion      - ConCode                       ;ver command routine offset
  3926                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3927                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3928                                                                                                                  ;---------------------------------------
  3929                                                                                                                  ;  Command Name Table
  3930                                                                                                                  ;---------------------------------------
  3931                                  tConCmdTbl              equ     $                                               ;command name table
  3932 00000127 0953485554444F574E-                             db      9,"SHUTDOWN",0                                  ;shutdown command
  3932 00000130 00                 
  3933 00000131 0856455253494F4E00                              db      8,"VERSION",0                                   ;version command
  3934 0000013A 06434C45415200                                  db      6,"CLEAR",0                                     ;clear command
  3935 00000141 054558495400                                    db      5,"EXIT",0                                      ;exit command
  3936 00000147 05494E543600                                    db      5,"INT6",0                                      ;int6 command
  3937 0000014D 055155495400                                    db      5,"QUIT",0                                      ;quit command
  3938 00000153 04434C5300                                      db      4,"CLS",0                                       ;cls command
  3939 00000158 0456455200                                      db      4,"VER",0                                       ;ver command
  3940 0000015D 00                                              db      0                                               ;end of table
  3941                                  ;-----------------------------------------------------------------------------------------------------------------------
  3942                                  ;
  3943                                  ;       Constants
  3944                                  ;
  3945                                  ;-----------------------------------------------------------------------------------------------------------------------
  3946 0000015E 0D0A00                  czNewLine               db      13,10,0                                         ;new line string
  3947 00000161 3A00                    czPrompt                db      ":",0                                           ;prompt string
  3948 00000163 437573746F6D204F70-     czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3948 0000016C 65726174696E672053-
  3948 00000175 797374656D20312E30-
  3948 0000017E 0D0A00             
  3949 00000181 556E6B6E6F776E2063-     czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3949 0000018A 6F6D6D616E640D0A00 
  3950 00000193 00<rept>                                        times   4096-($-$$) db 0h                               ;zero fill to end of section
  3951                                  %endif
  3952                                  %ifdef BUILDDISK
  3953                                  ;-----------------------------------------------------------------------------------------------------------------------
  3954                                  ;
  3955                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3956                                  ;
  3957                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3958                                  ;
  3959                                  ;-----------------------------------------------------------------------------------------------------------------------
  3960                                  section                 unused                                                  ;unused disk space
  3961                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3962                                  %endif
  3963                                  ;=======================================================================================================================
  3964                                  ;
  3965                                  ;       End of Program Code
  3966                                  ;
  3967                                  ;=======================================================================================================================
