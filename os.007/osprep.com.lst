     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after each eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   294                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   295                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   296                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   297                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   298                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   299                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   300                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   301                                  ;-----------------------------------------------------------------------------------------------------------------------
   302                                  ;
   303                                  ;       Firmware-Defined Values
   304                                  ;
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  ;-----------------------------------------------------------------------------------------------------------------------
   307                                  ;
   308                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   309                                  ;
   310                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   311                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   315                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   316                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   317                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   318                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   319                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   320                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   321                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   322                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   323                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   324                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       Standards-Based Values
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  ;-----------------------------------------------------------------------------------------------------------------------
   331                                  ;
   332                                  ;       ASCII                                                                   EASCII...
   333                                  ;
   334                                  ;-----------------------------------------------------------------------------------------------------------------------
   335                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   336                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   337                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   338                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   339                                  EASCIISPACE             equ     020h                                            ;space
   340                                  EASCIIUPPERA            equ     041h                                            ;'A'
   341                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   342                                  EASCIILOWERA            equ     061h                                            ;'a'
   343                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   344                                  EASCIITILDE             equ     07Eh                                            ;'~'
   345                                  EASCIICASE              equ     00100000b                                       ;case bit
   346                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       Operating System Values
   350                                  ;
   351                                  ;-----------------------------------------------------------------------------------------------------------------------
   352                                  ;-----------------------------------------------------------------------------------------------------------------------
   353                                  ;
   354                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   355                                  ;
   356                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   357                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   358                                  ;
   359                                  ;-----------------------------------------------------------------------------------------------------------------------
   360                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   361                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   362                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   363                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   364                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   365                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   366                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   367                                  ;-----------------------------------------------------------------------------------------------------------------------
   368                                  ;       Console Constants                                                       ECON...
   369                                  ;-----------------------------------------------------------------------------------------------------------------------
   370                                  ECONCOLS                equ     80                                              ;columns per row
   371                                  ECONROWS                equ     24                                              ;console rows
   372                                  ECONOIAROW              equ     24                                              ;operator information area row
   373                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   374                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   375                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   376                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   377                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   378                                  ;-----------------------------------------------------------------------------------------------------------------------
   379                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   380                                  ;-----------------------------------------------------------------------------------------------------------------------
   381                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   382                                  EGDTCGA                 equ     020h                                            ;cga video selector
   383                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   384                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   385                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   386                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   387                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   388                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   389                                  ;-----------------------------------------------------------------------------------------------------------------------
   390                                  ;       Keyboard Flags                                                          EKEYF...
   391                                  ;-----------------------------------------------------------------------------------------------------------------------
   392                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   393                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   394                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   395                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   396                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   397                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   398                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   399                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   400                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   401                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   402                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   403                                  ;-----------------------------------------------------------------------------------------------------------------------
   404                                  ;       Kernel Constants                                                        EKRN...
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   407                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   408                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   409                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   412                                  ;-----------------------------------------------------------------------------------------------------------------------
   413                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   414                                  ;-----------------------------------------------------------------------------------------------------------------------
   415                                  ;       Message Identifiers                                                     EMSG...
   416                                  ;-----------------------------------------------------------------------------------------------------------------------
   417                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   418                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   419                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   420                                  ;=======================================================================================================================
   421                                  ;
   422                                  ;       Structures
   423                                  ;
   424                                  ;=======================================================================================================================
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  ;
   427                                  ;       MQUEUE
   428                                  ;
   429                                  ;       The MQUEUE structure maps memory used for a message queue.
   430                                  ;
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  struc                   MQUEUE
   433 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   434 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   435 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   436                                  endstruc
   437                                  ;-----------------------------------------------------------------------------------------------------------------------
   438                                  ;
   439                                  ;       OSDATA
   440                                  ;
   441                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   442                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   443                                  ;
   444                                  ;-----------------------------------------------------------------------------------------------------------------------
   445                                  struc                   OSDATA
   446 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   447 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   448 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   449 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   450 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   451 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   452 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   453 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   454 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   455 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   456 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   457 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   458 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   459 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   460 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   461 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   462 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   463 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   464 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   465 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   466 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   467 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   468 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   469 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   470 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   471 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   472 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   473 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   474 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   475 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   476 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   477 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   478 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   479 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   480 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   481 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   482 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   483 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   484 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   485 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   486 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   487 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   488 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   489 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   490 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   491 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   492 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   493 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   494 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   495 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   496 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   497 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   498 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   499 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   500 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   501 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   502 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   503 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   504 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   505 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   506 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   507 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   508 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   509 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   510 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   511 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   512 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   513 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   514 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   515 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   516 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   517 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   518 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   519 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   520 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   521 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   522 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   523 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   524 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   525 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   526 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   527 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   528 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   529 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   530 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   531 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   532 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   533 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   534 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   535 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   536 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   537 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   538 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   539 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   540 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   541 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   542 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   543 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   544 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   545 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   546 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ;
   549                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   550                                  ;
   551                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   552                                  ;
   553                                  ;-----------------------------------------------------------------------------------------------------------------------
   554                                  ECONDATA                equ     ($)
   555 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   556 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   557 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   558 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   559 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   560 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   561 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   562 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   563 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   564 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   565 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   566 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   567 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   568 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   569                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   570                                  ;-----------------------------------------------------------------------------------------------------------------------
   571                                  ;
   572                                  ;       End of OS Variables
   573                                  ;
   574                                  ;-----------------------------------------------------------------------------------------------------------------------
   575                                  endstruc
   576                                  ;-----------------------------------------------------------------------------------------------------------------------
   577                                  ;
   578                                  ;       Macros
   579                                  ;
   580                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   581                                  ;
   582                                  ;-----------------------------------------------------------------------------------------------------------------------
   583                                  %macro                  mint    1
   584                                  _%1                     equ     ($-$$) / EX86DESCLEN
   585                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   586                                  %endmacro
   587                                  %macro                  mtrap   1
   588                                  _%1                     equ     ($-$$) / EX86DESCLEN
   589                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   590                                  %endmacro
   591                                  %macro                  menter  1
   592                                  ?%1                     equ     ($-$$)
   593                                  %endmacro
   594                                  %macro                  tsvce   1
   595                                  e%1                     equ     ($-tsvc)/4
   596                                                          dd      %1
   597                                  %endmacro
   598                                  %ifdef BUILDBOOT
   599                                  ;=======================================================================================================================
   600                                  ;
   601                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   602                                  ;
   603                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   604                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   605                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   606                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   607                                  ;
   608                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   609                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   610                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   611                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   612                                  ;       immediately followed by a disk parameter table.
   613                                  ;
   614                                  ;=======================================================================================================================
   615                                                          cpu     8086                                            ;assume minimal CPU
   616                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   617                                                          bits    16                                              ;16-bit code at power-up
   618                                  %ifdef BUILDPREP
   619 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   620                                  %else
   621                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   622                                  %endif
   623                                  ;-----------------------------------------------------------------------------------------------------------------------
   624                                  ;
   625                                  ;       Disk Parameter Table
   626                                  ;
   627                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   628                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   629                                  ;
   630                                  ;-----------------------------------------------------------------------------------------------------------------------
   631 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   632 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   633 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   634 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   635 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   636 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   637 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   638 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   639 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   640                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   641 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   642 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   643 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   644                                  ;
   645                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   646                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   647                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   648                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   649                                  ;       given several possible starting values for CS:IP.
   650                                  ;
   651                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   652 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   653                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   654 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   655 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   656 00000025 B104                                            mov     cl,4                                            ;shift count
   657 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   658 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   659 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   660                                  ;
   661                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   662                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   663                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   664                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   665                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   666                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   667                                  ;
   668 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   669 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   670 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   671 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   672 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   673                                  ;
   674                                  ;       Our boot addressability is now set up according to the following diagram.
   675                                  ;
   676                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   677                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   678                                  ;                               |  256 = 100h bytes                             |
   679                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   680                                  ;                               |  Boot Sector (vstart=0100h)                   |
   681                                  ;                               |  1 sector = 512 = 200h bytes                  |
   682                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   683                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   684                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   685                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   686                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   687                                  ;                               |  2 sectors = 1024 = 400h bytes
   688                                  ;                       009400  +-----------------------------------------------+ DS:1900
   689                                  ;
   690                                  ;       On entry, DL indicates the drive being booted from.
   691                                  ;
   692 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   693                                  ;
   694                                  ;       Compute directory i/o buffer address.
   695                                  ;
   696 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   697 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   698 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   699 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   700                                  ;
   701                                  ;       Compute segment where os.com will be loaded.
   702                                  ;
   703 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   704 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   705 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   706 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   707                                  ;
   708                                  ;       Set the video mode to 80 column, 25 row, text.
   709                                  ;
   710 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   711 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   712                                  ;
   713                                  ;       Write a message to the console so we know we have our addressability established.
   714                                  ;
   715 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   716 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   717                                  ;
   718                                  ;       Initialize the number of directory sectors to search.
   719                                  ;
   720 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   721 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   722                                  ;
   723                                  ;       Compute number of directory sectors and initialize overhead count.
   724                                  ;
   725 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   726 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   727 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   728 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   729                                  ;
   730                                  ;       Compute directory entries per sector.
   731                                  ;
   732 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   733 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   734 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   735                                  ;
   736                                  ;       Compute first logical directory sector and update overhead count.
   737                                  ;
   738 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   739 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   740 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   741 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   742 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   743 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   744                                  ;
   745                                  ;       Read directory sector.
   746                                  ;
   747 0000008E B001                    .30                     mov     al,1                                            ;sector count
   748 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   749 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   750 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   751                                  ;
   752                                  ;       Setup variables to search this directory sector.
   753                                  ;
   754 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   755 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   756 000000A1 7603                                            jna     .40                                             ;no, continue
   757 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   758 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   759 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   760 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   761                                  ;
   762                                  ;       Loop through directory sectors searching for kernel program.
   763                                  ;
   764 000000B1 56                      .50                     push    si                                              ;save kernel name address
   765 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   766 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   767 000000B6 FC                                              cld                                                     ;forward strings
   768 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   769 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   770 000000BA 5E                                              pop     si                                              ;restore kernel name address
   771 000000BB 7418                                            je      .60                                             ;exit loop if found
   772 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   773 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   774 000000C2 75ED                                            jnz     .50                                             ;next entry
   775                                  ;
   776                                  ;       Repeat search if we are not at the end of the directory.
   777                                  ;
   778 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   779 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   780 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   781 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   782 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   783                                  ;
   784                                  ;       If we find the kernel program in the directory, read the FAT.
   785                                  ;
   786 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   787 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   788 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   789 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   790 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   791 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   792                                  ;
   793                                  ;       Get the starting cluster of the kernel program and target address.
   794                                  ;
   795 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   796 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   797                                  ;
   798                                  ;       Read each program cluster into RAM.
   799                                  ;
   800 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   801 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   802 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   803 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   804 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   805 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   806 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   807 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   808 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   809                                  ;
   810                                  ;       Update buffer pointer for next cluster.
   811                                  ;
   812 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   813 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   814 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   815 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   816 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   817                                  ;
   818                                  ;       Compute next cluster number.
   819                                  ;
   820 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   821 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   822 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   823 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   824 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   825 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   826 00000120 83E701                                          and     di,1                                            ;get low bit
   827 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   828 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   829 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   830                                  ;
   831                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   832                                  ;
   833 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   834 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   835 00000130 B104                                            mov     cl,4                                            ;shift count
   836 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   837 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   838 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   839 0000013A 75B2                                            jne     .70                                             ;no, continue
   840                                  ;
   841                                  ;       Transfer control to the operating system program.
   842                                  ;
   843 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   844 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   845 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   846                                  ;
   847                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   848                                  ;
   849 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   850 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   851 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   852 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   853 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   854 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   855 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   856 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   857 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   858 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   859                                  ;
   860                                  ;       Try maxtries times to read sector.
   861                                  ;
   862 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   863 00000160 53                      .10                     push    bx                                              ;save buffer address
   864 00000161 51                                              push    cx                                              ;save retry count
   865 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   866 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   867 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   868 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   869 0000016F 59                                              pop     cx                                              ;restore retry count
   870 00000170 5B                                              pop     bx                                              ;restore buffer address
   871 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   872 00000173 E2EB                                            loop    .10                                             ;retry
   873                                  ;
   874                                  ;       Handle disk error: convert to ASCII and store in error string.
   875                                  ;
   876 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   877 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   878 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   879 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   880 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   881 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   882 00000183 7203                                            jb      .20                                             ;continue if numeral
   883 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   884 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   885 0000018A 7203                                            jb      .30                                             ;continue if numeral
   886 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   887 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   888 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   889 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   890                                  ;
   891                                  ;       Wait for a key press.
   892                                  ;
   893 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   894 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   895 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   896 0000019E FB                                              sti                                                     ;enable maskable interrupts
   897 0000019F F4                                              hlt                                                     ;wait for interrupt
   898 000001A0 EBF6                                            jmp     .10                                             ;repeat
   899                                  ;
   900                                  ;       Reset the system.
   901                                  ;
   902 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   903 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   904 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   905 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   906 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   907                                  ;
   908                                  ;       Display text message.
   909                                  ;
   910 000001AA FC                      BootPrint               cld                                                     ;forward strings
   911 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   912 000001AC 84C0                                            test    al,al                                           ;end of string?
   913 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   914 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   915 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   916 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   917 000001B6 C3                      BootReturn              ret                                                     ;return
   918                                  ;-----------------------------------------------------------------------------------------------------------------------
   919                                  ;
   920                                  ;       Constants
   921                                  ;
   922                                  ;-----------------------------------------------------------------------------------------------------------------------
   923 000001B7 90                                              align   2
   924 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   925 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   925 000001C3 4F4D               
   926 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   926 000001CE 530D0A00           
   927 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   927 000001DB 7220               
   928 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   929 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   929 000001E9 6700               
   930                                  ;-----------------------------------------------------------------------------------------------------------------------
   931                                  ;
   932                                  ;       Work Areas
   933                                  ;
   934                                  ;-----------------------------------------------------------------------------------------------------------------------
   935 000001EB 90                                              align   2
   936 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   937 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   938 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   939 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   940 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   941                                  wwReadCountCommand      equ     $                                               ;read count and command
   942 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   943 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   944                                  wwDriveHead             equ     $                                               ;drive, head (word)
   945 000001F8 00                      wbDrive                 db      0                                               ;drive
   946 000001F9 00                      wbHead                  db      0                                               ;head
   947                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   948 000001FA 00                                              db      0                                               ;sector
   949 000001FB 00                      wbTrack                 db      0                                               ;track
   950 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   951 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   952                                  %endif
   953                                  %ifdef BUILDPREP
   954                                  ;=======================================================================================================================
   955                                  ;
   956                                  ;       Diskette Preparation Code
   957                                  ;
   958                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   959                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   960                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   961                                  ;
   962                                  ;=======================================================================================================================
   963                                  ;
   964                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   965                                  ;
   966 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   967 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   968                                  ;
   969                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   970                                  ;
   971 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   972 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   973 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   974 0000020C FB                                              sti                                                     ;enable interrupts
   975 0000020D F4                                              hlt                                                     ;wait for interrupt
   976 0000020E EBF6                                            jmp     .10                                             ;repeat
   977 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   978 00000212 7407                                            je      .30                                             ;yes, branch
   979 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   980 00000216 75EE                                            jne     .10                                             ;no, repeat
   981 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   982                                  ;
   983                                  ;       Display writing-sector message and patch the JMP instruction.
   984                                  ;
   985 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   986 0000021E E889FF                                          call    BootPrint                                       ;display message
   987 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   988 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   989 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   990                                  ;
   991                                  ;       Try to read the boot sector.
   992                                  ;
   993 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   994 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   995 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   996 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   997 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   998 00000236 B001                                            mov     al,1                                            ;one sector
   999 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
  1000 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
  1001 0000023C 59                                              pop     cx                                              ;restore remaining retries
  1002 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1003 0000023F E2EB                                            loop    .40                                             ;try again
  1004 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1005 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1006                                  ;
  1007                                  ;       Copy diskette parms from input buffer to output buffer.
  1008                                  ;
  1009 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1010 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1011 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1012 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1013 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1014 00000255 FC                                              cld                                                     ;forward string copies
  1015 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1016                                  ;
  1017                                  ;       Try to write boot sector to diskette.
  1018                                  ;
  1019 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1020 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1021 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1022 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1023 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1024 00000265 B001                                            mov     al,1                                            ;one sector
  1025 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1026 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1027 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1028 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1029 0000026E E2EB                                            loop    .60                                             ;try again
  1030 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1031                                  ;
  1032                                  ;       Convert the error code to ASCII and display the error message.
  1033                                  ;
  1034 00000273 50                      .70                     push    ax                                              ;save error code
  1035 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1036 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1037 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1038 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1039 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1040 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1041 00000282 7203                                            jb      .80                                             ;yes, continue
  1042 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1043 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1044 00000289 7202                                            jb      .90                                             ;yes, continue
  1045 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1046 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1047 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1048 00000293 58                                              pop     ax                                              ;restore error code
  1049                                  ;
  1050                                  ;       Display the completion message.
  1051                                  ;
  1052 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1053 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1054 00000299 3C00                                            cmp     al,0                                            ;success?
  1055 0000029B 7426                                            je      .110                                            ;yes, continue
  1056 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1057 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1058 000002A2 741F                                            je      .110                                            ;yes, continue
  1059 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1060 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1061 000002A9 7418                                            je      .110                                            ;yes, continue
  1062 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1063 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1064 000002B0 7411                                            je      .110                                            ;yes, continue
  1065 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1066 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1067 000002B7 740A                                            je      .110                                            ;yes, continue
  1068 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1069 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1070 000002BE 7403                                            je      .110                                            ;yes, continue
  1071 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1072 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1073 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1074 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1075 000002CB C3                                              ret                                                     ;return (should not execute)
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;       Diskette Preparation Messages
  1079                                  ;
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1081 000002D5 5320426F6F742D4469-
  1081 000002DE 736B65747465205072-
  1081 000002E7 657061726174696F6E-
  1081 000002F0 2050726F6772616D   
  1082 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2018 David J. Walling. All rights reserved."
  1082 00000301 687420284329203230-
  1082 0000030A 31302D323031382044-
  1082 00000313 61766964204A2E2057-
  1082 0000031C 616C6C696E672E2041-
  1082 00000325 6C6C20726967687473-
  1082 0000032E 207265736572766564-
  1082 00000337 2E                 
  1083 00000338 0D0A                                            db      13,10
  1084 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1084 00000343 6F6772616D206F7665-
  1084 0000034C 727772697465732074-
  1084 00000355 686520626F6F742073-
  1084 0000035E 6563746F72206F6620-
  1084 00000367 61206469736B657474-
  1084 00000370 652077697468207374-
  1084 00000379 617274757020636F64-
  1084 00000382 652074686174       
  1085 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1085 00000391 616420746865206F70-
  1085 0000039A 65726174696E672073-
  1085 000003A3 797374656D20696E74-
  1085 000003AC 6F206D656D6F727920-
  1085 000003B5 7768656E2074686520-
  1085 000003BE 636F6D707574657220-
  1085 000003C7 697320726573746172-
  1085 000003D0 7465642E           
  1086 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1086 000003DD 6565642C20706C6163-
  1086 000003E6 65206120666F726D61-
  1086 000003EF 74746564206469736B-
  1086 000003F8 6574746520696E746F-
  1086 00000401 20647269766520413A-
  1086 0000040A 20616E642070726573-
  1086 00000413 732074686520456E74-
  1086 0000041C 6572206B65792E     
  1087 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1087 0000042C 20746869732070726F-
  1087 00000435 6772616D2077697468-
  1087 0000043E 6F7574207072657061-
  1087 00000447 72696E672061206469-
  1087 00000450 736B657474652C2070-
  1087 00000459 726573732074686520-
  1087 00000462 457363617065206B65-
  1087 0000046B 792E               
  1088 0000046D 0D0A00                                          db      13,10,0
  1089 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1089 00000479 2074686520626F6F74-
  1089 00000482 20736563746F722074-
  1089 0000048B 6F2074686520646973-
  1089 00000494 6B65747465202E2E2E 
  1090 0000049D 0D0A00                                          db      13,10,0
  1091 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1091 000004A9 6F722D636F6465202E-
  1091 000004B2 2E2077617320726574-
  1091 000004BB 75726E65642066726F-
  1091 000004C4 6D207468652042494F-
  1091 000004CD 53207768696C652072-
  1091 000004D6 656164696E67206672-
  1091 000004DF 6F6D20746865206469-
  1091 000004E8 736B2E             
  1092 000004EB 0D0A00                                          db      13,10,0
  1093 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1093 000004F7 6F722D636F6465202E-
  1093 00000500 2E2077617320726574-
  1093 00000509 75726E65642066726F-
  1093 00000512 6D207468652042494F-
  1093 0000051B 53207768696C652077-
  1093 00000524 726974696E6720746F-
  1093 0000052D 20746865206469736B-
  1093 00000536 2E                 
  1094 00000537 0D0A00                                          db      13,10,0
  1095 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1095 00000543 742D736563746F7220-
  1095 0000054C 776173207772697474-
  1095 00000555 656E20746F20746865-
  1095 0000055E 206469736B65747465-
  1095 00000567 2E204265666F726520-
  1095 00000570 626F6F74696E672079-
  1095 00000579 6F757220636F6D7075-
  1095 00000582 7465722077697468   
  1096 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1096 00000593 736B657474652C206D-
  1096 0000059C 616B65207375726520-
  1096 000005A5 746861742074686520-
  1096 000005AE 66696C65204F532E43-
  1096 000005B7 4F4D20697320636F70-
  1096 000005C0 696564206F6E746F20-
  1096 000005C9 746865206469736B65-
  1096 000005D2 7474652E           
  1097 000005D6 0D0A00                                          db      13,10,0
  1098 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1098 000005E2 76616C696420446973-
  1098 000005EB 6B20506172616D6574-
  1098 000005F4 6572               
  1099 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1099 000005FF 20616E20696E746572-
  1099 00000608 6E616C206572726F72-
  1099 00000611 206361757365642062-
  1099 0000061A 7920616E20696E7661-
  1099 00000623 6C69642076616C7565-
  1099 0000062C 206265696E67207061-
  1099 00000635 7373656420746F2061-
  1099 0000063E 2073797374656D     
  1100 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1100 0000064E 6E2E20546865204F53-
  1100 00000657 424F4F542E434F4D20-
  1100 00000660 66696C65206D617920-
  1100 00000669 626520636F72727570-
  1100 00000672 742E20436F7079206F-
  1100 0000067B 7220646F776E6C6F61-
  1100 00000684 64207468652066696C-
  1100 0000068D 6520616761696E     
  1101 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1101 0000069D 72792E             
  1102 000006A0 0D0A00                                          db      13,10,0
  1103 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1103 000006AC 6472657373204D6172-
  1103 000006B5 6B204E6F7420466F75-
  1103 000006BE 6E64               
  1104 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1104 000006C9 726F7220696E646963-
  1104 000006D2 617465732061207068-
  1104 000006DB 79736963616C207072-
  1104 000006E4 6F626C656D20776974-
  1104 000006ED 682074686520666C6F-
  1104 000006F6 707079206469736B65-
  1104 000006FF 7474652E20506C6561-
  1104 00000708 7365207265747279   
  1105 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1105 00000719 6E6F74686572206469-
  1105 00000722 736B657474652E     
  1106 00000729 0D0A00                                          db      13,10,0
  1107 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1107 00000735 6F7465637465642044-
  1107 0000073E 69736B             
  1108 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1108 0000074A 726F72206973207573-
  1108 00000753 75616C6C7920636175-
  1108 0000075C 736564206279206174-
  1108 00000765 74656D7074696E6720-
  1108 0000076E 746F20777269746520-
  1108 00000777 746F20612077726974-
  1108 00000780 652D70726F74656374-
  1108 00000789 6564206469736B2E   
  1109 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1109 0000079A 686520277772697465-
  1109 000007A3 2D70726F7465637427-
  1109 000007AC 2073657474696E6720-
  1109 000007B5 6F6E20746865206469-
  1109 000007BE 736B206F7220726574-
  1109 000007C7 7279207573696E6720-
  1109 000007D0 7573696E6720616E6F-
  1109 000007D9 74686572206469736B-
  1109 000007E2 2E                 
  1110 000007E3 0D0A00                                          db      13,10,0
  1111 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1111 000007EF 736B65747465205265-
  1111 000007F8 6D6F766564         
  1112 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1112 00000806 726F72206D61792069-
  1112 0000080F 6E6469636174652074-
  1112 00000818 686174207468652066-
  1112 00000821 6C6F70707920646973-
  1112 0000082A 6B6574746520686173-
  1112 00000833 206265656E2072656D-
  1112 0000083C 6F7665642066726F6D-
  1112 00000845 20746865           
  1113 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1113 00000852 652064726976652E20-
  1113 0000085B 4F6E20736F6D652073-
  1113 00000864 797374656D732C2074-
  1113 0000086D 68697320636F646520-
  1113 00000876 6D617920616C736F20-
  1113 0000087F 6F6363757220696620-
  1113 00000888 746865206469736B65-
  1113 00000891 747465206973       
  1114 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1114 000008A0 70726F746563746564-
  1114 000008A9 2E2720506C65617365-
  1114 000008B2 207665726966792074-
  1114 000008BB 686174207468652064-
  1114 000008C4 69736B657474652069-
  1114 000008CD 73206E6F7420777269-
  1114 000008D6 74652D70726F746563-
  1114 000008DF 74656420616E64     
  1115 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1115 000008EF 65726C7920696E7365-
  1115 000008F8 7274656420696E2074-
  1115 00000901 6865206469736B6574-
  1115 0000090A 74652064726976652E 
  1116 00000913 0D0A00                                          db      13,10,0
  1117 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1117 0000091F 6976652054696D6564-
  1117 00000928 204F7574           
  1118 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1118 00000935 726F7220757375616C-
  1118 0000093E 6C7920696E64696361-
  1118 00000947 746573207468617420-
  1118 00000950 6E6F206469736B6574-
  1118 00000959 746520697320696E20-
  1118 00000962 746865206469736B65-
  1118 0000096B 747465206472697665-
  1118 00000974 2E20506C65617365   
  1119 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1119 00000985 726520746861742074-
  1119 0000098E 6865206469736B6574-
  1119 00000997 74652069732070726F-
  1119 000009A0 7065726C7920736561-
  1119 000009A9 74656420696E207468-
  1119 000009B2 652064726976652061-
  1119 000009BB 6E642072657472792E 
  1120 000009C4 0D0A00                                          db      13,10,0
  1121 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1121 000009D0 6B6E6F776E20457272-
  1121 000009D9 6F72               
  1122 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1122 000009E4 6F722D636F64652072-
  1122 000009ED 657475726E65642062-
  1122 000009F6 79207468652042494F-
  1122 000009FF 53206973206E6F7420-
  1122 00000A08 61207265636F676E69-
  1122 00000A11 7A6564206572726F72-
  1122 00000A1A 2E20506C6561736520-
  1122 00000A23 636F6E73756C74     
  1123 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1123 00000A33 6D7075746572277320-
  1123 00000A3C 746563686E6963616C-
  1123 00000A45 207265666572656E63-
  1123 00000A4E 6520666F7220612064-
  1123 00000A57 65736372697074696F-
  1123 00000A60 6E206F662074686973-
  1123 00000A69 206572726F7220636F-
  1123 00000A72 64652E             
  1124 00000A75 0D0A00                                          db      13,10,0
  1125                                  wcPrepInBuf             equ     $
  1126                                  %endif
  1127                                  %ifdef BUILDDISK
  1128                                  ;=======================================================================================================================
  1129                                  ;
  1130                                  ;       File Allocation Tables
  1131                                  ;
  1132                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1133                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1134                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1135                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1136                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1137                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1138                                  ;       the last cluster in the chain.
  1139                                  ;
  1140                                  ;       Every three bytes encode two FAT entries as follows:
  1141                                  ;
  1142                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1143                                  ;
  1144                                  ;=======================================================================================================================
  1145                                  ;-----------------------------------------------------------------------------------------------------------------------
  1146                                  ;
  1147                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1148                                  ;
  1149                                  ;-----------------------------------------------------------------------------------------------------------------------
  1150                                  section                 fat1                                                    ;first copy of FAT
  1151                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1152                                                          db      005h,060h,000h, 007h,080h,000h
  1153                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1154                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1155                                                          db      011h,020h,001h, 013h,040h,001h
  1156                                                          db      015h,060h,001h, 017h,080h,001h
  1157                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1158                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1159                                                          db      021h,020h,002h, 023h,040h,002h
  1160                                                          db      025h,060h,002h, 027h,080h,002h
  1161                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1162                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1163                                  ;-----------------------------------------------------------------------------------------------------------------------
  1164                                  ;
  1165                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1166                                  ;
  1167                                  ;-----------------------------------------------------------------------------------------------------------------------
  1168                                  section                 fat2                                                    ;second copy of FAT
  1169                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1170                                                          db      005h,060h,000h, 007h,080h,000h
  1171                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1172                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1173                                                          db      011h,020h,001h, 013h,040h,001h
  1174                                                          db      015h,060h,001h, 017h,080h,001h
  1175                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1176                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1177                                                          db      021h,020h,002h, 023h,040h,002h
  1178                                                          db      025h,060h,002h, 027h,080h,002h
  1179                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1180                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1181                                  ;-----------------------------------------------------------------------------------------------------------------------
  1182                                  ;
  1183                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1184                                  ;
  1185                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1186                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1187                                  ;       copy.
  1188                                  ;
  1189                                  ;-----------------------------------------------------------------------------------------------------------------------
  1190                                  section                 dir                                                     ;diskette directory
  1191                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1192                                                          db      020h                                            ;attribute (archive bit set)
  1193                                                          times   10 db 0                                         ;unused
  1194                                                          dw      0h                                              ;time
  1195                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1196                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1197                                                          dw      2                                               ;first cluster
  1198                                                          dd      05400h                                          ;file size
  1199                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1200                                  %endif
  1201                                  %ifdef BUILDCOM
  1202                                  ;=======================================================================================================================
  1203                                  ;
  1204                                  ;       OS.COM
  1205                                  ;
  1206                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1207                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1208                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1209                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1210                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1211                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1212                                  ;
  1213                                  ;       Our loader addressability is set up according to the following diagram.
  1214                                  ;
  1215                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1216                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1217                                  ;                               |  256 = 100h bytes                             |
  1218                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1219                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1220                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1221                                  ;                       007e00  +-----------------------------------------------+
  1222                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1223                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1224                                  ;                               |                                               |
  1225                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1226                                  ;                               |                                               |
  1227                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1228                                  ;                               |  Loader Code                                  |
  1229                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1230                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1231                                  ;
  1232                                  ;=======================================================================================================================
  1233                                  ;-----------------------------------------------------------------------------------------------------------------------
  1234                                  ;
  1235                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1236                                  ;
  1237                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1238                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1239                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1240                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1241                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1242                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1243                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1244                                  ;       registers.
  1245                                  ;
  1246                                  ;-----------------------------------------------------------------------------------------------------------------------
  1247                                                          cpu     8086                                            ;assume minimal CPU
  1248                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1249                                                          bits    16                                              ;this is 16-bit code
  1250                                  Loader                  push    cs                                              ;use the code segment
  1251                                                          pop     ds                                              ;...as our data segment
  1252                                                          push    cs                                              ;use the code segment
  1253                                                          pop     es                                              ;...as our extra segment
  1254                                  ;
  1255                                  ;       Write a message to the console so we know we have our addressability established.
  1256                                  ;
  1257                                                          mov     si,czStartingMsg                                ;starting message
  1258                                                          call    PutTTYString                                    ;display loader message
  1259                                  ;
  1260                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1261                                  ;
  1262                                                          call    GetCPUType                                      ;AL = cpu type
  1263                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1264                                                          cmp     al,3                                            ;80386+?
  1265                                                          jb      LoaderExit                                      ;no, exit with error message
  1266                                                          cpu     386                                             ;allow 80386 instructions
  1267                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1268                                                          call    PutTTYString                                    ;display message
  1269                                  ;
  1270                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1271                                  ;
  1272                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1273                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1274                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1275                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1276                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1277                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1278                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1279                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1280                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1281                                                          call    PutTTYString                                    ;display message
  1282                                  ;
  1283                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1284                                  ;
  1285                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1286                                                          pop     es                                              ;... as target segment
  1287                                                          xor     di,di                                           ;ES:DI = target address
  1288                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1289                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1290                                                          cld                                                     ;forward strings
  1291                                                          rep     movsb                                           ;copy kernel image
  1292                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1293                                                          call    PutTTYString                                    ;display message
  1294                                  ;
  1295                                  ;       Switch to protected mode.
  1296                                  ;
  1297                                                          xor     si,si                                           ;ES:SI = gdt addr
  1298                                                          mov     ss,si                                           ;protected mode ss
  1299                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1300                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1301                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1302                                                          mov     dx,001Fh                                        ;outer delay loop count
  1303                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1304                                                          loop    $                                               ;wait out pending interrupts
  1305                                                          dec     dx                                              ;restore outer loop count
  1306                                                          jnz     .10                                             ;continue outer loop
  1307                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1308                                  ;
  1309                                  ;       Enable hardware and maskable interrupts.
  1310                                  ;
  1311                                                          xor     al,al                                           ;enable all registers code
  1312                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1313                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1314                                                          sti                                                     ;enable maskable interrupts
  1315                                  ;
  1316                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1317                                  ;
  1318                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1319                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1320                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1321                                  ;-----------------------------------------------------------------------------------------------------------------------
  1322                                  ;
  1323                                  ;       Routine:        LoaderExit
  1324                                  ;
  1325                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1326                                  ;
  1327                                  ;       In:             DS:SI   string address
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  LoaderExit              call    PutTTYString                                    ;display error message
  1331                                  ;
  1332                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1333                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1334                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1335                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1336                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1337                                  ;
  1338                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1339                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1340                                                          jnz     .40                                             ;exit if key pressed
  1341                                                          sti                                                     ;enable maskable interrupts
  1342                                                          hlt                                                     ;wait for interrupt
  1343                                                          jmp     .30                                             ;repeat until keypress
  1344                                  ;
  1345                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1346                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1347                                  ;       HLT until the system resets.
  1348                                  ;
  1349                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1350                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1351                                  .50                     sti                                                     ;enable maskable interrupts
  1352                                                          hlt                                                     ;stop until reset, int, nmi
  1353                                                          jmp     .50                                             ;loop until restart kicks in
  1354                                  ;-----------------------------------------------------------------------------------------------------------------------
  1355                                  ;
  1356                                  ;       Routine:        GetCPUType
  1357                                  ;
  1358                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1359                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1360                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1361                                  ;
  1362                                  ;       Out:            AX      0 = 808x, v20, etc.
  1363                                  ;                               1 = 80186
  1364                                  ;                               2 = 80286
  1365                                  ;                               3 = 80386
  1366                                  ;
  1367                                  ;-----------------------------------------------------------------------------------------------------------------------
  1368                                  GetCPUType              mov     al,1                                            ;AL = 1
  1369                                                          mov     cl,32                                           ;shift count
  1370                                                          shr     al,cl                                           ;try a 32-bit shift
  1371                                                          or      al,al                                           ;did the shift happen?
  1372                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1373                                                          cpu     186
  1374                                                          push    sp                                              ;save stack pointer
  1375                                                          pop     cx                                              ;...into cx
  1376                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1377                                                          jne     .10                                             ;yes, cpu is 80186
  1378                                                          cpu     286
  1379                                                          inc     ax                                              ;AX = 2
  1380                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1381                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1382                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1383                                                          jz      .10                                             ;yes, cpu is 80286
  1384                                                          inc     ax                                              ;AX = 3
  1385                                  .10                     ret                                                     ;return
  1386                                  ;-----------------------------------------------------------------------------------------------------------------------
  1387                                  ;
  1388                                  ;       Routine:        PutTTYString
  1389                                  ;
  1390                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1391                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1392                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1393                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1394                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1395                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1396                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1397                                  ;                       to LODSB is not needed.
  1398                                  ;
  1399                                  ;       In:             DS:SI   address of string
  1400                                  ;
  1401                                  ;       Out:            DF      0
  1402                                  ;                       ZF      1
  1403                                  ;                       AL      0
  1404                                  ;
  1405                                  ;-----------------------------------------------------------------------------------------------------------------------
  1406                                  PutTTYString            cld                                                     ;forward strings
  1407                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1408                                                          test    al,al                                           ;end of string?
  1409                                                          jz      .20                                             ;... yes, exit our loop
  1410                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1411                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1412                                                          jmp     .10                                             ;repeat until done
  1413                                  .20                     ret                                                     ;return
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415                                  ;
  1416                                  ;       Loader Data
  1417                                  ;
  1418                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1419                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1420                                  ;
  1421                                  ;-----------------------------------------------------------------------------------------------------------------------
  1422                                                          align   2
  1423                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1424                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1425                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1426                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1427                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1428                                                          db      "Please press any key to restart the computer.",13,10,0
  1429                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1430                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1431                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1432                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1433                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1434                                  ;=======================================================================================================================
  1435                                  ;
  1436                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1437                                  ;
  1438                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1439                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1440                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1441                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1442                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1443                                  ;
  1444                                  ;=======================================================================================================================
  1445                                  ;=======================================================================================================================
  1446                                  ;
  1447                                  ;       Kernel Tables
  1448                                  ;
  1449                                  ;=======================================================================================================================
  1450                                  ;-----------------------------------------------------------------------------------------------------------------------
  1451                                  ;
  1452                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1453                                  ;
  1454                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1455                                  ;       first descriptor must be all nulls.
  1456                                  ;
  1457                                  ;       6   5         4         3         2         1         0
  1458                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1459                                  ;       ----------------------------------------------------------------
  1460                                  ;       h......hffffmmmma......ab......................bn..............n
  1461                                  ;
  1462                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1463                                  ;               ffff                                                            flags
  1464                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1465                                  ;                       a......a                                                access
  1466                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1467                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1468                                  ;
  1469                                  ;       00000000                                                                all areas have base addresses below 2^24
  1470                                  ;               0...                                                            single-byte size granularity
  1471                                  ;               1...                                                            4-kilobyte size granularity
  1472                                  ;               .0..                                                            16-bit default for code segments
  1473                                  ;               .1..                                                            32-bit default for code segments
  1474                                  ;               ..0.                                                            intel-reserved; should be zero
  1475                                  ;               ...0                                                            available for operating system use
  1476                                  ;                   0000                                                        segment is less than 2^16 in size
  1477                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1478                                  ;                       1.......                                                segment is present in memory
  1479                                  ;                       .00.....                                                segment is of privilege level 0
  1480                                  ;                       ...0....                                                segment is of system or gate type
  1481                                  ;                       ...00010                                                local decriptor table (LDT)
  1482                                  ;                       ...01001                                                task state segment (TSS) available
  1483                                  ;                       ...01011                                                task state segment (TSS) busy
  1484                                  ;                       ...10...                                                data segment
  1485                                  ;                       ...10011                                                writable data (accessed)
  1486                                  ;                       ...11...                                                code segment
  1487                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1488                                  ;
  1489                                  ;-----------------------------------------------------------------------------------------------------------------------
  1490                                  section                 gdt                                                     ;global descriptor table
  1491                                                          dq      0000000000000000h                               ;00 required null selector
  1492                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1493                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1494                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1495                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1496                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1497                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1498                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1499                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1500                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1501                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1502                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1503                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1504                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1505                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1506                                  ;-----------------------------------------------------------------------------------------------------------------------
  1507                                  ;
  1508                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1509                                  ;
  1510                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1511                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1512                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1513                                  ;
  1514                                  ;       6   5         4         3         2         1         0
  1515                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1516                                  ;       ----------------------------------------------------------------
  1517                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1518                                  ;
  1519                                  ;       h...h   high-order offset (bits 16-31)
  1520                                  ;       P       present (0=unused interrupt)
  1521                                  ;       zz      descriptor privilege level
  1522                                  ;       S       storage segment (must be zero for IDT)
  1523                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1524                                  ;       S...S   handling code selector in GDT
  1525                                  ;       l...l   lo-order offset (bits 0-15)
  1526                                  ;
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  section                 idt                                                     ;interrupt descriptor table
  1529                                                          mint    dividebyzero                                    ;00 divide by zero
  1530                                                          mint    singlestep                                      ;01 single step
  1531                                                          mint    nmi                                             ;02 non-maskable
  1532                                                          mint    break                                           ;03 break
  1533                                                          mint    into                                            ;04 into
  1534                                                          mint    bounds                                          ;05 bounds
  1535                                                          mint    badopcode                                       ;06 bad op code
  1536                                                          mint    nocoproc                                        ;07 no coprocessor
  1537                                                          mint    doublefault                                     ;08 double-fault
  1538                                                          mint    operand                                         ;09 operand
  1539                                                          mint    badtss                                          ;0a bad TSS
  1540                                                          mint    notpresent                                      ;0b not-present
  1541                                                          mint    stacklimit                                      ;0c stack limit
  1542                                                          mint    protection                                      ;0d general protection fault
  1543                                                          mint    int14                                           ;0e (reserved)
  1544                                                          mint    int15                                           ;0f (reserved)
  1545                                                          mint    coproccalc                                      ;10 (reserved)
  1546                                                          mint    int17                                           ;11 (reserved)
  1547                                                          mint    int18                                           ;12 (reserved)
  1548                                                          mint    int19                                           ;13 (reserved)
  1549                                                          mint    int20                                           ;14 (reserved)
  1550                                                          mint    int21                                           ;15 (reserved)
  1551                                                          mint    int22                                           ;16 (reserved)
  1552                                                          mint    int23                                           ;17 (reserved)
  1553                                                          mint    int24                                           ;18 (reserved)
  1554                                                          mint    int25                                           ;19 (reserved)
  1555                                                          mint    int26                                           ;1a (reserved)
  1556                                                          mint    int27                                           ;1b (reserved)
  1557                                                          mint    int28                                           ;1c (reserved)
  1558                                                          mint    int29                                           ;1d (reserved)
  1559                                                          mint    int30                                           ;1e (reserved)
  1560                                                          mint    int31                                           ;1f (reserved)
  1561                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1562                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1563                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1564                                                          mtrap   com2                                            ;23 IRQ3 com2
  1565                                                          mtrap   com1                                            ;24 IRQ4 com1
  1566                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1567                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1568                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1569                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1570                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1571                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1572                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1573                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1574                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1575                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1576                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1577                                                          mtrap   svc                                             ;30 OS services
  1578                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1579                                  ;=======================================================================================================================
  1580                                  ;
  1581                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1582                                  ;
  1583                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1584                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1585                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1586                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1587                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1588                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1589                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1590                                  ;
  1591                                  ;=======================================================================================================================
  1592                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1593                                                          cpu     386                                             ;allow 80386 instructions
  1594                                                          bits    32                                              ;this is 32-bit code
  1595                                  ;=======================================================================================================================
  1596                                  ;
  1597                                  ;       CPU Interrupt Handlers
  1598                                  ;
  1599                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1600                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1601                                  ;
  1602                                  ;=======================================================================================================================
  1603                                  ;-----------------------------------------------------------------------------------------------------------------------
  1604                                  ;
  1605                                  ;       INT0    Divide By Zero
  1606                                  ;
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                                          menter  dividebyzero                                    ;divide by zero
  1609                                                          push    0                                               ;store interrupt nbr
  1610                                                          push    czIntDivideByZero                               ;store message offset
  1611                                                          jmp     ReportInterrupt                                 ;report interrupt
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                  ;
  1614                                  ;       INT1    Single Step
  1615                                  ;
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                                          menter  singlestep                                      ;single step
  1618                                                          push    1                                               ;store interrupt nbr
  1619                                                          push    czIntSingleStep                                 ;store message offset
  1620                                                          jmp     ReportInterrupt                                 ;report interrupt
  1621                                  ;-----------------------------------------------------------------------------------------------------------------------
  1622                                  ;
  1623                                  ;       INT2    Non-Maskable Interrupt
  1624                                  ;
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                                          menter  nmi                                             ;non-maskable
  1627                                                          push    2                                               ;store interrupt nbr
  1628                                                          push    czIntNonMaskable                                ;store message offset
  1629                                                          jmp     ReportInterrupt                                 ;report interrupt
  1630                                  ;-----------------------------------------------------------------------------------------------------------------------
  1631                                  ;
  1632                                  ;       INT3    Break
  1633                                  ;
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                                          menter  break                                           ;break
  1636                                                          push    3                                               ;store interrupt nbr
  1637                                                          push    czIntBreak                                      ;store message offset
  1638                                                          jmp     ReportInterrupt                                 ;report interrupt
  1639                                  ;-----------------------------------------------------------------------------------------------------------------------
  1640                                  ;
  1641                                  ;       INT4    Into
  1642                                  ;
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                                          menter  into                                            ;into
  1645                                                          push    4                                               ;store interrupt nbr
  1646                                                          push    czIntInto                                       ;store message offset
  1647                                                          jmp     ReportInterrupt                                 ;report interrupt
  1648                                  ;-----------------------------------------------------------------------------------------------------------------------
  1649                                  ;
  1650                                  ;       INT5    Bounds
  1651                                  ;
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                                          menter  bounds                                          ;bounds
  1654                                                          push    5                                               ;store interrupt nbr
  1655                                                          push    czIntBounds                                     ;store message offset
  1656                                                          jmp     ReportInterrupt                                 ;report interrupt
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       INT6    Bad Operation Code
  1660                                  ;
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                                          menter  badopcode                                       ;bad opcode interrupt
  1663                                                          push    6                                               ;store interrupt nbr
  1664                                                          push    czIntBadOpCode                                  ;store message offset
  1665                                                          jmp     ReportInterrupt                                 ;report interrupt
  1666                                  ;-----------------------------------------------------------------------------------------------------------------------
  1667                                  ;
  1668                                  ;       INT7    No Coprocessor
  1669                                  ;
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1672                                                          push    7                                               ;store interrupt nbr
  1673                                                          push    czIntNoCoprocessor                              ;store message offset
  1674                                                          jmp     ReportInterrupt                                 ;report interrupt
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                  ;
  1677                                  ;       INT8    Double Fault
  1678                                  ;
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                                          menter  doublefault                                     ;doublefault interrupt
  1681                                                          push    8                                               ;store interrupt nbr
  1682                                                          push    czIntDoubleFault                                ;store message offset
  1683                                                          jmp     ReportInterrupt                                 ;report interrupt
  1684                                  ;-----------------------------------------------------------------------------------------------------------------------
  1685                                  ;
  1686                                  ;       INT9    Operand
  1687                                  ;
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                                          menter  operand                                         ;operand interrupt
  1690                                                          push    9                                               ;store interrupt nbr
  1691                                                          push    czIntOperand                                    ;store message offset
  1692                                                          jmp     ReportInterrupt                                 ;report interrupt
  1693                                  ;-----------------------------------------------------------------------------------------------------------------------
  1694                                  ;
  1695                                  ;       INT10   Bad Task State Segment
  1696                                  ;
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                                          menter  badtss                                          ;bad TSS interrupt
  1699                                                          push    10                                              ;store interrupt nbr
  1700                                                          push    czIntBadTSS                                     ;store message offset
  1701                                                          jmp     ReportInterrupt                                 ;report interrupt
  1702                                  ;-----------------------------------------------------------------------------------------------------------------------
  1703                                  ;
  1704                                  ;       INT11   Not Present
  1705                                  ;
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                                          menter  notpresent                                      ;not present interrupt
  1708                                                          push    11                                              ;store interrupt nbr
  1709                                                          push    czIntNotPresent                                 ;store message offset
  1710                                                          jmp     ReportInterrupt                                 ;report interrupt
  1711                                  ;-----------------------------------------------------------------------------------------------------------------------
  1712                                  ;
  1713                                  ;       INT12   Stack Limit
  1714                                  ;
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                                          menter  stacklimit                                      ;stack limit interrupt
  1717                                                          push    12                                              ;store interrupt nbr
  1718                                                          push    czIntStackLimit                                 ;store message offset
  1719                                                          jmp     ReportInterrupt                                 ;report interrupt
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                  ;
  1722                                  ;       INT13   General Protection Fault
  1723                                  ;
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                                          menter  protection                                      ;protection fault interrupt
  1726                                                          push    13                                              ;store interrupt nbr
  1727                                                          push    czIntProtection                                 ;store message offset
  1728                                                          jmp     ReportInterrupt                                 ;report interrupt
  1729                                  ;-----------------------------------------------------------------------------------------------------------------------
  1730                                  ;
  1731                                  ;       INT14   Reserved
  1732                                  ;
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                                          menter  int14                                           ;(reserved)
  1735                                                          push    14                                              ;store interrupt nbr
  1736                                                          push    czIntReserved                                   ;store message offset
  1737                                                          jmp     ReportInterrupt                                 ;report interrupt
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                  ;
  1740                                  ;       INT15   Reserved
  1741                                  ;
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                                          menter  int15                                           ;(reserved)
  1744                                                          push    15                                              ;store interrupt nbr
  1745                                                          push    czIntReserved                                   ;store message offset
  1746                                                          jmp     ReportInterrupt                                 ;report interrupt
  1747                                  ;-----------------------------------------------------------------------------------------------------------------------
  1748                                  ;
  1749                                  ;       INT16   Coprocessor Calculation
  1750                                  ;
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                                          menter  coproccalc                                      ;coprocessor calculation
  1753                                                          push    16                                              ;store interrupt nbr
  1754                                                          push    czIntCoprocessorCalc                            ;store message offset
  1755                                                          jmp     ReportInterrupt                                 ;report interrupt
  1756                                  ;-----------------------------------------------------------------------------------------------------------------------
  1757                                  ;
  1758                                  ;       INT17   Reserved
  1759                                  ;
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                                          menter  int17                                           ;(reserved)
  1762                                                          push    17                                              ;store interrupt nbr
  1763                                                          push    czIntReserved                                   ;store message offset
  1764                                                          jmp     ReportInterrupt                                 ;report interrupt
  1765                                  ;-----------------------------------------------------------------------------------------------------------------------
  1766                                  ;
  1767                                  ;       INT18   Reserved
  1768                                  ;
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                                          menter  int18                                           ;(reserved)
  1771                                                          push    18                                              ;store interrupt nbr
  1772                                                          push    czIntReserved                                   ;store message offset
  1773                                                          jmp     ReportInterrupt                                 ;report interrupt
  1774                                  ;-----------------------------------------------------------------------------------------------------------------------
  1775                                  ;
  1776                                  ;       INT19   Reserved
  1777                                  ;
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                                          menter  int19                                           ;(reserved)
  1780                                                          push    19                                              ;store interrupt nbr
  1781                                                          push    czIntReserved                                   ;store message offset
  1782                                                          jmp     ReportInterrupt                                 ;report interrupt
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT20   Reserved
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  int20                                           ;(reserved)
  1789                                                          push    20                                              ;store interrupt nbr
  1790                                                          push    czIntReserved                                   ;store message offset
  1791                                                          jmp     ReportInterrupt                                 ;report interrupt
  1792                                  ;-----------------------------------------------------------------------------------------------------------------------
  1793                                  ;
  1794                                  ;       INT21   Reserved
  1795                                  ;
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                                          menter  int21                                           ;(reserved)
  1798                                                          push    21                                              ;store interrupt nbr
  1799                                                          push    czIntReserved                                   ;store message offset
  1800                                                          jmp     ReportInterrupt                                 ;report interrupt
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                  ;
  1803                                  ;       INT22   Reserved
  1804                                  ;
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                                          menter  int22                                           ;(reserved)
  1807                                                          push    22                                              ;store interrupt nbr
  1808                                                          push    czIntReserved                                   ;store message offset
  1809                                                          jmp     ReportInterrupt                                 ;report interrupt
  1810                                  ;-----------------------------------------------------------------------------------------------------------------------
  1811                                  ;
  1812                                  ;       INT23   Reserved
  1813                                  ;
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                                          menter  int23                                           ;(reserved)
  1816                                                          push    23                                              ;store interrupt nbr
  1817                                                          push    czIntReserved                                   ;store message offset
  1818                                                          jmp     ReportInterrupt                                 ;report interrupt
  1819                                  ;-----------------------------------------------------------------------------------------------------------------------
  1820                                  ;
  1821                                  ;       INT24   Reserved
  1822                                  ;
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                                          menter  int24                                           ;(reserved)
  1825                                                          push    24                                              ;store interrupt nbr
  1826                                                          push    czIntReserved                                   ;store message offset
  1827                                                          jmp     ReportInterrupt                                 ;report interrupt
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;       INT25   Reserved
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                                          menter  int25                                           ;(reserved)
  1834                                                          push    25                                              ;store interrupt nbr
  1835                                                          push    czIntReserved                                   ;store message offset
  1836                                                          jmp     ReportInterrupt                                 ;report interrupt
  1837                                  ;-----------------------------------------------------------------------------------------------------------------------
  1838                                  ;
  1839                                  ;       INT26   Reserved
  1840                                  ;
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                                          menter  int26                                           ;(reserved)
  1843                                                          push    26                                              ;store interrupt nbr
  1844                                                          push    czIntReserved                                   ;store message offset
  1845                                                          jmp     ReportInterrupt                                 ;report interrupt
  1846                                  ;-----------------------------------------------------------------------------------------------------------------------
  1847                                  ;
  1848                                  ;       INT27   Reserved
  1849                                  ;
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                                          menter  int27                                           ;(reserved)
  1852                                                          push    27                                              ;store interrupt nbr
  1853                                                          push    czIntReserved                                   ;store message offset
  1854                                                          jmp     ReportInterrupt                                 ;report interrupt
  1855                                  ;-----------------------------------------------------------------------------------------------------------------------
  1856                                  ;
  1857                                  ;       INT28   Reserved
  1858                                  ;
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                                          menter  int28                                           ;(reserved)
  1861                                                          push    28                                              ;store interrupt nbr
  1862                                                          push    czIntReserved                                   ;store message offset
  1863                                                          jmp     ReportInterrupt                                 ;report interrupt
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  ;
  1866                                  ;       INT29   Reserved
  1867                                  ;
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                                          menter  int29                                           ;(reserved)
  1870                                                          push    29                                              ;store interrupt nbr
  1871                                                          push    czIntReserved                                   ;store message offset
  1872                                                          jmp     ReportInterrupt                                 ;report interrupt
  1873                                  ;-----------------------------------------------------------------------------------------------------------------------
  1874                                  ;
  1875                                  ;       INT30   Reserved
  1876                                  ;
  1877                                  ;-----------------------------------------------------------------------------------------------------------------------
  1878                                                          menter  int30                                           ;(reserved)
  1879                                                          push    30                                              ;store interrupt nbr
  1880                                                          push    czIntReserved                                   ;store message offset
  1881                                                          jmp     ReportInterrupt                                 ;report interrupt
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       INT31   Reserved
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                                          menter  int31                                           ;(reserved)
  1888                                                          push    31                                              ;store interrupt nbr
  1889                                                          push    czIntReserved                                   ;store message offset
  1890                                                          jmp     ReportInterrupt                                 ;report interrupt
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;       Routine:        ReportInterrupt
  1894                                  ;
  1895                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1896                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1897                                  ;
  1898                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1899                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1900                                  ;
  1901                                  ;-----------------------------------------------------------------------------------------------------------------------
  1902                                  ReportInterrupt         pop     eax                                             ;error message address
  1903                                                          pop     eax                                             ;interrupt number
  1904                                                          iretd                                                   ;return
  1905                                  ;-----------------------------------------------------------------------------------------------------------------------
  1906                                  ;
  1907                                  ;       Processor Interrupt Name Strings
  1908                                  ;
  1909                                  ;-----------------------------------------------------------------------------------------------------------------------
  1910                                  czIntDivideByZero       db      "Division by zero",0
  1911                                  czIntSingleStep         db      "Single step",0
  1912                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1913                                  czIntBreak              db      "Break",0
  1914                                  czIntInto               db      "Into",0
  1915                                  czIntBounds             db      "Bounds",0
  1916                                  czIntBadOpCode          db      "Bad Operation Code",0
  1917                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1918                                  czIntDoubleFault        db      "Double Fault",0
  1919                                  czIntOperand            db      "Operand",0
  1920                                  czIntBadTSS             db      "Bad Task State Segment",0
  1921                                  czIntNotPresent         db      "Not Present",0
  1922                                  czIntStackLimit         db      "Stack Limit",0
  1923                                  czIntProtection         db      "General Protection Fault",0
  1924                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1925                                  czIntReserved           db      "Reserved",0
  1926                                  ;=======================================================================================================================
  1927                                  ;
  1928                                  ;       Hardware Device Interupts
  1929                                  ;
  1930                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1931                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1932                                  ;       (BX=2028h).
  1933                                  ;
  1934                                  ;=======================================================================================================================
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  ;
  1937                                  ;       IRQ0    Clock Tick Interrupt
  1938                                  ;
  1939                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1940                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1941                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1942                                  ;
  1943                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1944                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1945                                  ;
  1946                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1947                                  ;       zero, the floppy disk motors are turned off.
  1948                                  ;
  1949                                  ;-----------------------------------------------------------------------------------------------------------------------
  1950                                                          menter  clocktick                                       ;clock tick interrupt
  1951                                                          push    eax                                             ;save non-volatile regs
  1952                                                          push    edx                                             ;
  1953                                                          push    ds                                              ;
  1954                                  ;
  1955                                  ;       Update the clock tick count and the elapsed days as needed.
  1956                                  ;
  1957                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1958                                                          pop     ds                                              ;... into data segment register
  1959                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1960                                                          inc     eax                                             ;increment clock ticks
  1961                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1962                                                          jb      irq0.10                                         ;no, skip ahead
  1963                                                          inc     byte [wbClockDays]                              ;increment clock days
  1964                                                          xor     eax,eax                                         ;reset clock ticks
  1965                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1966                                  ;
  1967                                  ;       Decrement floppy disk motor timeout.
  1968                                  ;
  1969                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1970                                                          je      irq0.20                                         ;yes, skip ahead
  1971                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1972                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1973                                  ;
  1974                                  ;       Turn off the floppy disk motor if appropriate.
  1975                                  ;
  1976                                                          sti                                                     ;enable maskable interrupts
  1977                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1978                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1979                                                          in      al,dx                                           ;FDC main status byte
  1980                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1981                                                          jnz     irq0.15                                         ;wait while busy
  1982                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1983                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1984                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1985                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1986                                                          out     dx,al                                           ;turn motor off
  1987                                  ;
  1988                                  ;       Signal the end of the hardware interrupt.
  1989                                  ;
  1990                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1991                                  ;
  1992                                  ;       Restore and return.
  1993                                  ;
  1994                                                          pop     ds                                              ;restore modified regs
  1995                                                          pop     edx                                             ;
  1996                                                          pop     eax                                             ;
  1997                                                          iretd                                                   ;return
  1998                                  ;-----------------------------------------------------------------------------------------------------------------------
  1999                                  ;
  2000                                  ;       IRQ1    Keyboard Interrupt
  2001                                  ;
  2002                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  2003                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  2004                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  2005                                  ;       ALL modified registers upon return.
  2006                                  ;
  2007                                  ;-----------------------------------------------------------------------------------------------------------------------
  2008                                                          menter  keyboard                                        ;keyboard interrrupt
  2009                                                          push    eax                                             ;save non-volatile regs
  2010                                                          push    ebx                                             ;
  2011                                                          push    ecx                                             ;
  2012                                                          push    esi                                             ;
  2013                                                          push    ds                                              ;
  2014                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2015                                                          pop     ds                                              ;... into data segment register
  2016                                                          xor     al,al                                           ;zero
  2017                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  2018                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  2019                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  2020                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  2021                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  2022                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2023                                                          mov     al,' '                                          ;space
  2024                                                          mov     [wbConsoleChar],al                              ;set character to space
  2025                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2026                                                          not     al                                              ;controller timeout mask
  2027                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2028                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2029                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2030                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2031                                                          jz      irq1.140                                        ;yes, skip ahead
  2032                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2033                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2034                                                          mov     ah,al                                           ;copy scan code 0
  2035                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2036                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2037                                                          je      irq1.30                                         ;yes, set flag
  2038                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2039                                                          je      irq1.40                                         ;yes, reset flag
  2040                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2041                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2042                                                          je      irq1.30                                         ;yes, set flag
  2043                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2044                                                          je      irq1.40                                         ;yes, reset flag
  2045                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2046                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2047                                                          je      irq1.30                                         ;yes, set flag
  2048                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2049                                                          je      irq1.40                                         ;yes, reset flag
  2050                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2051                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2052                                                          je      irq1.30                                         ;yes, set flag
  2053                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2054                                                          je      irq1.40                                         ;yes, reset flag
  2055                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2056                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2057                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2058                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2059                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2060                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2061                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2062                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2063                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2064                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2065                                                          jne     irq1.70                                         ;no, skip ahead
  2066                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2067                                                          jz      irq1.140                                        ;yes, skip ahead
  2068                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2069                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2070                                                          mov     ah,al                                           ;copy scan code 1
  2071                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2072                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2073                                                          je      irq1.30                                         ;yes, set flag
  2074                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2075                                                          je      irq1.40                                         ;yes, reset flag
  2076                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2077                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2078                                                          je      irq1.30                                         ;yes, set flag
  2079                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2080                                                          je      irq1.40                                         ;yes, reset flag
  2081                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2082                                                          je      irq1.80                                         ;yes, skip ahead
  2083                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2084                                                          je      irq1.80                                         ;yes, skip ahead
  2085                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2086                                                          je      irq1.10                                         ;yes, continue
  2087                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2088                                                          jne     irq1.20                                         ;no, skip ahead
  2089                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2090                                                          jz      irq1.140                                        ;yes, skip ahead
  2091                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2092                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2093                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2094                                                          jz      irq1.140                                        ;yes, skip ahead
  2095                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2096                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2097                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2098                                  irq1.30                 or      bl,al                                           ;set shift flag
  2099                                                          jmp     irq1.60                                         ;skip ahead
  2100                                  irq1.40                 not     al                                              ;convert flag to mask
  2101                                                          and     bl,al                                           ;reset shift flag
  2102                                                          jmp     irq1.60                                         ;skip ahead
  2103                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2104                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2105                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2106                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2107                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2108                                                          jmp     irq1.150                                        ;finish keyboard handling
  2109                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2110                                                          jne     irq1.80                                         ;no continue
  2111                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2112                                                          jz      irq1.140                                        ;yes, skip ahead
  2113                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2114                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2115                                                          mov     ah,al                                           ;copy scan code 1
  2116                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2117                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2118                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2119                                                          jz      irq1.140                                        ;yes, skip ahead
  2120                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2121                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2122                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2123                                                          jz      irq1.140                                        ;yes, skip ahead
  2124                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2125                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2126                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2127                                                          jz      irq1.140                                        ;yes, skip ahead
  2128                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2129                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2130                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2131                                                          jz      irq1.140                                        ;yes, skip ahead
  2132                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2133                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2134                                                          jmp     irq1.150                                        ;continue
  2135                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2136                                                          test    ah,EKEYBUP                                      ;release code?
  2137                                                          jnz     irq1.130                                        ;yes, skip ahead
  2138                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2139                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2140                                                          jz      irq1.90                                         ;no, skip ahead
  2141                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2142                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2143                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2144                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2145                                                          jz      irq1.100                                        ;no skip ahead
  2146                                                          mov     cl,al                                           ;copy ASCII code
  2147                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2148                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2149                                                          jb      irq1.100                                        ;yes, skip ahead
  2150                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2151                                                          ja      irq1.100                                        ;yes, skip ahead
  2152                                                          xor     al,EASCIICASE                                   ;switch case
  2153                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2154                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2155                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2156                                                          jz      irq1.120                                        ;no, skip ahead
  2157                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2158                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2159                                                          or      edx,eax                                         ;msg id and codes
  2160                                                          xor     ecx,ecx                                         ;null param
  2161                                                          push    eax                                             ;save codes
  2162                                                          call    PutMessage                                      ;put message to console
  2163                                                          pop     eax                                             ;restore codes
  2164                                                          test    al,al                                           ;ASCII translation?
  2165                                                          jz      irq1.130                                        ;no, skip ahead
  2166                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2167                                                          and     eax,0FFFFh                                      ;clear high-order word
  2168                                                          or      edx,eax                                         ;msg id and codes
  2169                                                          xor     ecx,ecx                                         ;null param
  2170                                                          call    PutMessage                                      ;put message to console
  2171                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2172                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2173                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2174                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2175                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2176                                                          pop     ds                                              ;restore non-volatile regs
  2177                                                          pop     esi                                             ;
  2178                                                          pop     ecx                                             ;
  2179                                                          pop     ebx                                             ;
  2180                                                          pop     eax                                             ;
  2181                                                          iretd                                                   ;return
  2182                                  ;-----------------------------------------------------------------------------------------------------------------------
  2183                                  ;       Scan-Code to ASCII Translation Tables
  2184                                  ;-----------------------------------------------------------------------------------------------------------------------
  2185                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2186                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2187                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2188                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2189                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2190                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2191                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2192                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2193                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2194                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2195                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2196                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2197                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2198                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2199                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2200                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2201                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2202                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2203                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2204                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2205                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2206                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2207                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2208                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2209                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2210                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2211                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2212                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2213                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2214                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2215                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2216                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  ;
  2219                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2220                                  ;
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                                          menter  iochannel                                       ;secondary 8259A cascade
  2223                                                          push    eax                                             ;save modified regs
  2224                                                          jmp     hwint                                           ;end interrupt and return
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  ;
  2227                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2228                                  ;
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                                          menter  com2                                            ;serial port 2 interrupt
  2231                                                          push    eax                                             ;save modified regs
  2232                                                          jmp     hwint                                           ;end interrupt and return
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  ;
  2235                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2236                                  ;
  2237                                  ;-----------------------------------------------------------------------------------------------------------------------
  2238                                                          menter  com1                                            ;serial port 1 interrupt
  2239                                                          push    eax                                             ;save modified regs
  2240                                                          jmp     hwint                                           ;end interrupt and return
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  ;
  2243                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2244                                  ;
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2247                                                          push    eax                                             ;save modified regs
  2248                                                          jmp     hwint                                           ;end interrupt and return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       IRQ6    Diskette Hardware Interrupt
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                                          menter  diskette                                        ;floppy disk interrupt
  2255                                                          push    eax                                             ;save non-volatile regs
  2256                                                          push    ds                                              ;
  2257                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2258                                                          pop     ds                                              ;... into DS register
  2259                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2260                                                          or      al,10000000b                                    ;set IRQ flag
  2261                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2262                                                          pop     ds                                              ;restore non-volatile regs
  2263                                                          jmp     hwint                                           ;end primary PIC interrupt
  2264                                  ;-----------------------------------------------------------------------------------------------------------------------
  2265                                  ;
  2266                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2267                                  ;
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2270                                                          push    eax                                             ;save modified regs
  2271                                                          jmp     hwint                                           ;end interrupt and return
  2272                                  ;-----------------------------------------------------------------------------------------------------------------------
  2273                                  ;
  2274                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2275                                  ;
  2276                                  ;-----------------------------------------------------------------------------------------------------------------------
  2277                                                          menter  rtclock                                         ;real-time clock interrupt
  2278                                                          push    eax                                             ;save modified regs
  2279                                                          jmp     hwwint                                          ;end interrupt and return
  2280                                  ;-----------------------------------------------------------------------------------------------------------------------
  2281                                  ;
  2282                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2283                                  ;
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2286                                                          push    eax                                             ;save modified regs
  2287                                                          jmp     hwwint                                          ;end interrupt and return
  2288                                  ;-----------------------------------------------------------------------------------------------------------------------
  2289                                  ;
  2290                                  ;       IRQ10   Reserved Hardware Interrupt
  2291                                  ;
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                                          menter  irq10                                           ;reserved
  2294                                                          push    eax                                             ;save modified regs
  2295                                                          jmp     hwwint                                          ;end interrupt and return
  2296                                  ;-----------------------------------------------------------------------------------------------------------------------
  2297                                  ;
  2298                                  ;       IRQ11   Reserved Hardware Interrupt
  2299                                  ;
  2300                                  ;-----------------------------------------------------------------------------------------------------------------------
  2301                                                          menter  irq11                                           ;reserved
  2302                                                          push    eax                                             ;save modified regs
  2303                                                          jmp     hwwint                                          ;end interrupt and return
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  ;
  2306                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2307                                  ;
  2308                                  ;-----------------------------------------------------------------------------------------------------------------------
  2309                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2310                                                          push    eax                                             ;save modified regs
  2311                                                          jmp     hwwint                                          ;end interrupt and return
  2312                                  ;-----------------------------------------------------------------------------------------------------------------------
  2313                                  ;
  2314                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2315                                  ;
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                                          menter  coprocessor                                     ;coprocessor interrupt
  2318                                                          push    eax                                             ;save modified regs
  2319                                                          jmp     hwwint                                          ;end interrupt and return
  2320                                  ;-----------------------------------------------------------------------------------------------------------------------
  2321                                  ;
  2322                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2323                                  ;
  2324                                  ;-----------------------------------------------------------------------------------------------------------------------
  2325                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2326                                                          push    eax                                             ;save modified regs
  2327                                                          jmp     hwwint                                          ;end interrupt and return
  2328                                  ;-----------------------------------------------------------------------------------------------------------------------
  2329                                  ;
  2330                                  ;       IRQ15   Reserved Hardware Interrupt
  2331                                  ;
  2332                                  ;-----------------------------------------------------------------------------------------------------------------------
  2333                                                          menter  irq15                                           ;reserved
  2334                                                          push    eax                                             ;save modified regs
  2335                                                          jmp     hwwint                                          ;end interrupt and return
  2336                                  ;-----------------------------------------------------------------------------------------------------------------------
  2337                                  ;
  2338                                  ;       Exit from hardware interrupt
  2339                                  ;
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2342                                                          jmp     hwint90                                         ;skip ahead
  2343                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2344                                  hwint90                 pop     eax                                             ;restore modified regs
  2345                                                          iretd                                                   ;return from interrupt
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       INT 30h Operating System Software Service Interrupt
  2349                                  ;
  2350                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2351                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2352                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2353                                  ;       the entry address of the specific function from a table.
  2354                                  ;
  2355                                  ;-----------------------------------------------------------------------------------------------------------------------
  2356                                                          menter  svc
  2357                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2358                                                          jae     svc90                                           ;yes, skip ahead
  2359                                                          movzx   eax,al                                          ;function
  2360                                                          shl     eax,2                                           ;offset into table
  2361                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2362                                  svc90                   iretd                                                   ;return from interrupt
  2363                                  ;-----------------------------------------------------------------------------------------------------------------------
  2364                                  ;
  2365                                  ;       Service Request Table
  2366                                  ;
  2367                                  ;
  2368                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2369                                  ;
  2370                                  ;-----------------------------------------------------------------------------------------------------------------------
  2371                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2372                                                          tsvce   CompareMemory                                   ;compare memory
  2373                                                          tsvce   GetConsoleString                                ;get string input
  2374                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2375                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2376                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2377                                                          tsvce   UpperCaseString                                 ;upper-case string
  2378                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2379                                  ;-----------------------------------------------------------------------------------------------------------------------
  2380                                  ;
  2381                                  ;       Service Request Macros
  2382                                  ;
  2383                                  ;       These macros provide positional parameterization of service request calls.
  2384                                  ;
  2385                                  ;-----------------------------------------------------------------------------------------------------------------------
  2386                                  %macro                  clearConsoleScreen 0
  2387                                                          mov     al,eClearConsoleScreen                          ;function code
  2388                                                          int     _svc                                            ;invoke OS service
  2389                                  %endmacro
  2390                                  %macro                  compareMemory 0
  2391                                                          mov     al,eCompareMemory                               ;function code
  2392                                                          int     _svc                                            ;invoke OS service
  2393                                  %endmacro
  2394                                  %macro                  getConsoleString 4
  2395                                                          mov     edx,%1                                          ;buffer address
  2396                                                          mov     ecx,%2                                          ;max characters
  2397                                                          mov     bh,%3                                           ;echo indicator
  2398                                                          mov     bl,%4                                           ;terminator
  2399                                                          mov     al,eGetConsoleString                            ;function code
  2400                                                          int     _svc                                            ;invoke OS service
  2401                                  %endmacro
  2402                                  %macro                  placeCursor 0
  2403                                                          mov     al,ePlaceCursor                                 ;function code
  2404                                                          int     _svc                                            ;invoke OS service
  2405                                  %endmacro
  2406                                  %macro                  putConsoleString 1
  2407                                                          mov     edx,%1                                          ;string address
  2408                                                          mov     al,ePutConsoleString                            ;function code
  2409                                                          int     _svc                                            ;invoke OS service
  2410                                  %endmacro
  2411                                  %macro                  resetSystem 0
  2412                                                          mov     al,eResetSystem                                 ;function code
  2413                                                          int     _svc                                            ;invoke OS service
  2414                                  %endmacro
  2415                                  %macro                  upperCaseString 0
  2416                                                          mov     al,eUpperCaseString                             ;function code
  2417                                                          int     _svc                                            ;invoke OS service
  2418                                  %endmacro
  2419                                  ;=======================================================================================================================
  2420                                  ;
  2421                                  ;       Kernel Function Library
  2422                                  ;
  2423                                  ;=======================================================================================================================
  2424                                  ;=======================================================================================================================
  2425                                  ;
  2426                                  ;       String Helper Routines
  2427                                  ;
  2428                                  ;       CompareMemory
  2429                                  ;       UpperCaseString
  2430                                  ;
  2431                                  ;=======================================================================================================================
  2432                                  ;-----------------------------------------------------------------------------------------------------------------------
  2433                                  ;
  2434                                  ;       Routine:        CompareMemory
  2435                                  ;
  2436                                  ;       Description:    This routine compares two byte arrays.
  2437                                  ;
  2438                                  ;       In:             DS:EDX  first source address
  2439                                  ;                       DS:EBX  second source address
  2440                                  ;                       ECX     comparison length
  2441                                  ;
  2442                                  ;       Out:            EDX     first source address
  2443                                  ;                       EBX     second source address
  2444                                  ;                       ECX     0       array 1 = array 2
  2445                                  ;                               <0      array 1 < array 2
  2446                                  ;                               >0      array 1 > array 2
  2447                                  ;
  2448                                  ;-----------------------------------------------------------------------------------------------------------------------
  2449                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2450                                                          push    edi                                             ;
  2451                                                          push    es                                              ;
  2452                                                          push    ds                                              ;copy DS
  2453                                                          pop     es                                              ;... to ES
  2454                                                          mov     esi,edx                                         ;first source address
  2455                                                          mov     edi,ebx                                         ;second source address
  2456                                                          cld                                                     ;forward strings
  2457                                                          rep     cmpsb                                           ;compare bytes
  2458                                                          mov     al,0                                            ;default result
  2459                                                          jz      .10                                             ;branch if arrays equal
  2460                                                          mov     al,1                                            ;positive result
  2461                                                          jnc     .10                                             ;branch if target > source
  2462                                                          mov     al,-1                                           ;negative result
  2463                                  .10                     movsx   ecx,al                                          ;extend sign
  2464                                                          pop     es                                              ;restore non-volatile regs
  2465                                                          pop     edi                                             ;
  2466                                                          pop     esi                                             ;
  2467                                                          ret                                                     ;return
  2468                                  ;-----------------------------------------------------------------------------------------------------------------------
  2469                                  ;
  2470                                  ;       Routine:        UpperCaseString
  2471                                  ;
  2472                                  ;       Description:    This routine places all characters in the given string to upper case.
  2473                                  ;
  2474                                  ;       In:             DS:EDX  string address
  2475                                  ;
  2476                                  ;       Out:            EDX     string address
  2477                                  ;
  2478                                  ;-----------------------------------------------------------------------------------------------------------------------
  2479                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2480                                                          mov     esi,edx                                         ;string address
  2481                                                          cld                                                     ;forward strings
  2482                                  .10                     lodsb                                                   ;string character
  2483                                                          test    al,al                                           ;null?
  2484                                                          jz      .20                                             ;yes, skip ahead
  2485                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2486                                                          jb      .10                                             ;no, continue
  2487                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2488                                                          ja      .10                                             ;no, continue
  2489                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2490                                                          mov     [esi-1],al                                      ;upper character
  2491                                                          jmp     .10                                             ;continue
  2492                                  .20                     pop     esi                                             ;restore non-volatile regs
  2493                                                          ret                                                     ;return
  2494                                  ;=======================================================================================================================
  2495                                  ;
  2496                                  ;       Console Helper Routines
  2497                                  ;
  2498                                  ;       FirstConsoleColumn
  2499                                  ;       GetConsoleChar
  2500                                  ;       GetConsoleString
  2501                                  ;       NextConsoleColumn
  2502                                  ;       NextConsoleRow
  2503                                  ;       PreviousConsoleColumn
  2504                                  ;       PutConsoleChar
  2505                                  ;       PutConsoleHexByte
  2506                                  ;       PutConsoleOIAChar
  2507                                  ;       PutConsoleOIAShift
  2508                                  ;       PutConsoleString
  2509                                  ;       Yield
  2510                                  ;
  2511                                  ;=======================================================================================================================
  2512                                  ;-----------------------------------------------------------------------------------------------------------------------
  2513                                  ;
  2514                                  ;       Routine:        FirstConsoleColumn
  2515                                  ;
  2516                                  ;       Description:    This routine resets the console column to start of the row.
  2517                                  ;
  2518                                  ;       In:             DS      OS data selector
  2519                                  ;
  2520                                  ;-----------------------------------------------------------------------------------------------------------------------
  2521                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2522                                                          mov     [wbConsoleColumn],al                            ;save column
  2523                                                          ret                                                     ;return
  2524                                  ;-----------------------------------------------------------------------------------------------------------------------
  2525                                  ;
  2526                                  ;       Routine:        GetConsoleChar
  2527                                  ;
  2528                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2529                                  ;
  2530                                  ;       Out:            AL      ASCII character code
  2531                                  ;                       AH      keyboard scan code
  2532                                  ;
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2535                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2536                                                          or      eax,eax                                         ;do we have a message?
  2537                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2538                                                          push    eax                                             ;save key codes
  2539                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2540                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2541                                                          pop     eax                                             ;restore key codes
  2542                                                          jne     GetConsoleChar                                  ;no, try again
  2543                                                          and     eax,0000ffffh                                   ;mask for key codes
  2544                                                          ret                                                     ;return
  2545                                  ;-----------------------------------------------------------------------------------------------------------------------
  2546                                  ;
  2547                                  ;       Routine:        GetConsoleString
  2548                                  ;
  2549                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2550                                  ;
  2551                                  ;       In:             DS:EDX  target buffer address
  2552                                  ;                       ECX     maximum number of characters to accept
  2553                                  ;                       BH      echo to terminal
  2554                                  ;                       BL      terminating character
  2555                                  ;
  2556                                  ;-----------------------------------------------------------------------------------------------------------------------
  2557                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2558                                                          push    esi                                             ;
  2559                                                          push    edi                                             ;
  2560                                                          push    es                                              ;
  2561                                                          push    ds                                              ;load data segment selector ...
  2562                                                          pop     es                                              ;... into extra segment register
  2563                                                          mov     edi,edx                                         ;edi = target buffer
  2564                                                          push    ecx                                             ;save maximum characters
  2565                                                          xor     al,al                                           ;zero register
  2566                                                          cld                                                     ;forward strings
  2567                                                          rep     stosb                                           ;zero fill buffer
  2568                                                          pop     ecx                                             ;maximum characters
  2569                                                          mov     edi,edx                                         ;edi = target buffer
  2570                                                          mov     esi,edx                                         ;esi = target buffer
  2571                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2572                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2573                                                          cmp     al,bl                                           ;is this the terminator?
  2574                                                          je      .50                                             ;yes, exit
  2575                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2576                                                          jne     .30                                             ;no, skip ahead
  2577                                                          cmp     esi,edi                                         ;at start of buffer?
  2578                                                          je      .20                                             ;yes, get next character
  2579                                                          dec     edi                                             ;backup target pointer
  2580                                                          mov     byte [edi],0                                    ;zero previous character
  2581                                                          inc     ecx                                             ;increment remaining chars
  2582                                                          test    bh,1                                            ;echo to console?
  2583                                                          jz      .20                                             ;no, get next character
  2584                                                          call    PreviousConsoleColumn                           ;backup console position
  2585                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2586                                                          call    PutConsoleChar                                  ;write space to console
  2587                                                          call    PlaceCursor                                     ;position the cursor
  2588                                                          jmp     .20                                             ;get next character
  2589                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2590                                                          jb      .20                                             ;no, get another character
  2591                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2592                                                          ja      .20                                             ;no, get another character
  2593                                                          stosb                                                   ;store character in buffer
  2594                                                          test    bh,1                                            ;echo to console?
  2595                                                          jz      .40                                             ;no, skip ahead
  2596                                                          call    PutConsoleChar                                  ;write character to console
  2597                                                          call    NextConsoleColumn                               ;advance console position
  2598                                                          call    PlaceCursor                                     ;position the cursor
  2599                                  .40                     dec     ecx                                             ;decrement remaining chars
  2600                                                          jmp     .10                                             ;next
  2601                                  .50                     xor     al,al                                           ;null
  2602                                                          stosb                                                   ;terminate buffer
  2603                                                          pop     es                                              ;restore non-volatile regs
  2604                                                          pop     edi                                             ;
  2605                                                          pop     esi                                             ;
  2606                                                          pop     ecx                                             ;
  2607                                                          ret                                                     ;return
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;       Routine:        NextConsoleColumn
  2611                                  ;
  2612                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2613                                  ;                       incremented if the end of the current row is reached.
  2614                                  ;
  2615                                  ;       In:             DS      OS data selector
  2616                                  ;
  2617                                  ;-----------------------------------------------------------------------------------------------------------------------
  2618                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2619                                                          inc     al                                              ;increment column
  2620                                                          mov     [wbConsoleColumn],al                            ;save column
  2621                                                          cmp     al,ECONCOLS                                     ;end of row?
  2622                                                          jb      .10                                             ;no, skip ahead
  2623                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2624                                                          call    NextConsoleRow                                  ;line feed to next row
  2625                                  .10                     ret                                                     ;return
  2626                                  ;-----------------------------------------------------------------------------------------------------------------------
  2627                                  ;
  2628                                  ;       Routine:        NextConsoleRow
  2629                                  ;
  2630                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2631                                  ;
  2632                                  ;       In:             DS      OS data selector
  2633                                  ;
  2634                                  ;-----------------------------------------------------------------------------------------------------------------------
  2635                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2636                                                          inc     al                                              ;increment row
  2637                                                          mov     [wbConsoleRow],al                               ;save row
  2638                                                          cmp     al,ECONROWS                                     ;end of screen?
  2639                                                          jb      .10                                             ;no, skip ahead
  2640                                                          call    ScrollConsoleRow                                ;scroll up one row
  2641                                                          mov     al,[wbConsoleRow]                               ;row
  2642                                                          dec     al                                              ;decrement row
  2643                                                          mov     [wbConsoleRow],al                               ;save row
  2644                                  .10                     ret                                                     ;return
  2645                                  ;-----------------------------------------------------------------------------------------------------------------------
  2646                                  ;
  2647                                  ;       Routine:        PreviousConsoleColumn
  2648                                  ;
  2649                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2650                                  ;                       the column is set to the last position in the row and the row is decremented.
  2651                                  ;
  2652                                  ;       In:             DS      OS data selector
  2653                                  ;
  2654                                  ;-----------------------------------------------------------------------------------------------------------------------
  2655                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2656                                                          or      al,al                                           ;start of row?
  2657                                                          jnz     .10                                             ;no, skip ahead
  2658                                                          mov     ah,[wbConsoleRow]                               ;current row
  2659                                                          or      ah,ah                                           ;top of screen?
  2660                                                          jz      .20                                             ;yes, exit with no change
  2661                                                          dec     ah                                              ;decrement row
  2662                                                          mov     [wbConsoleRow],ah                               ;save row
  2663                                                          mov     al,ECONCOLS                                     ;set maximum column
  2664                                  .10                     dec     al                                              ;decrement column
  2665                                                          mov     [wbConsoleColumn],al                            ;save column
  2666                                  .20                     ret                                                     ;return
  2667                                  ;-----------------------------------------------------------------------------------------------------------------------
  2668                                  ;
  2669                                  ;       Routine:        PutConsoleChar
  2670                                  ;
  2671                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2672                                  ;
  2673                                  ;       In:             AL      ASCII character
  2674                                  ;                       DS      OS data selector
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2678                                                          push    es                                              ;
  2679                                                          push    EGDTCGA                                         ;load CGA selector ...
  2680                                                          pop     es                                              ;... into extra segment reg
  2681                                                          mov     cl,[wbConsoleColumn]                            ;column
  2682                                                          mov     ch,[wbConsoleRow]                               ;row
  2683                                                          call    SetConsoleChar                                  ;put character at row, column
  2684                                                          pop     es                                              ;restore non-volatile regs
  2685                                                          pop     ecx                                             ;
  2686                                                          ret                                                     ;return
  2687                                  ;-----------------------------------------------------------------------------------------------------------------------
  2688                                  ;
  2689                                  ;       Routine:        PutConsoleHexByte
  2690                                  ;
  2691                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2692                                  ;
  2693                                  ;       In:             AL      byte value
  2694                                  ;                       CL      column
  2695                                  ;                       CH      row
  2696                                  ;                       DS      OS data selector
  2697                                  ;                       ES      CGA selector
  2698                                  ;
  2699                                  ;-----------------------------------------------------------------------------------------------------------------------
  2700                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2701                                                          shr     al,4                                            ;hi-order nybble
  2702                                                          call    .10                                             ;make ASCII and store
  2703                                                          pop     eax                                             ;byte value
  2704                                                          and     al,0Fh                                          ;lo-order nybble
  2705                                  .10                     or      al,030h                                         ;apply ASCII zone
  2706                                                          cmp     al,03Ah                                         ;numeric?
  2707                                                          jb      .20                                             ;yes, skip ahead
  2708                                                          add     al,7                                            ;add ASCII offset for alpha
  2709                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2710                                                          ret                                                     ;return
  2711                                  ;-----------------------------------------------------------------------------------------------------------------------
  2712                                  ;
  2713                                  ;       Routine:        PutConsoleOIAChar
  2714                                  ;
  2715                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2716                                  ;
  2717                                  ;       In:             DS      OS data selector
  2718                                  ;
  2719                                  ;-----------------------------------------------------------------------------------------------------------------------
  2720                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2721                                                          push    ecx                                             ;
  2722                                                          push    esi                                             ;
  2723                                                          push    ds                                              ;
  2724                                                          push    es                                              ;
  2725                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2726                                                          pop     ds                                              ;... into data segment register
  2727                                                          push    EGDTCGA                                         ;load CGA selector ...
  2728                                                          pop     es                                              ;... into extra segment register
  2729                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2730                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2731                                                          mov     bl,0                                            ;starting column
  2732                                                          mov     ecx,6                                           ;maximum scan codes
  2733                                  .10                     push    ecx                                             ;save remaining count
  2734                                                          mov     ecx,ebx                                         ;row, column
  2735                                                          lodsb                                                   ;read scan code
  2736                                                          or      al,al                                           ;scan code present?
  2737                                                          jz      .20                                             ;no, skip ahead
  2738                                                          call    PutConsoleHexByte                               ;display scan code
  2739                                                          jmp     .30                                             ;continue
  2740                                  .20                     mov     al,' '                                          ;ASCII space
  2741                                                          call    SetConsoleChar                                  ;display space
  2742                                                          mov     al,' '                                          ;ASCII space
  2743                                                          call    SetConsoleChar                                  ;display space
  2744                                  .30                     add     bl,2                                            ;next column (+2)
  2745                                                          pop     ecx                                             ;restore remaining
  2746                                                          loop    .10                                             ;next code
  2747                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2748                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2749                                                          jb      .40                                             ;no, skip ahead
  2750                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2751                                                          ja      .40                                             ;no, skip ahead
  2752                                                          mov     ch,bh                                           ;OIA row
  2753                                                          mov     cl,40                                           ;character display column
  2754                                                          call    SetConsoleChar                                  ;display ASCII character
  2755                                  .40                     pop     es                                              ;restore non-volatile regs
  2756                                                          pop     ds                                              ;
  2757                                                          pop     esi                                             ;
  2758                                                          pop     ecx                                             ;
  2759                                                          pop     ebx                                             ;
  2760                                                          ret                                                     ;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       Routine:        PutConsoleOIAShift
  2764                                  ;
  2765                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2766                                  ;
  2767                                  ;       In:             BL      shift flags
  2768                                  ;                       BH      lock flags
  2769                                  ;                       DS      OS data selector
  2770                                  ;
  2771                                  ;-----------------------------------------------------------------------------------------------------------------------
  2772                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2773                                                          push    es                                              ;
  2774                                                          push    EGDTCGA                                         ;load CGA selector ...
  2775                                                          pop     es                                              ;... into ES register
  2776                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2777                                                          mov     al,EASCIISPACE                                  ;space is default character
  2778                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2779                                                          jz      .10                                             ;no, skip ahead
  2780                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2781                                  .10                     mov     cl,14                                           ;indicator column
  2782                                                          call    SetConsoleChar                                  ;display ASCII character
  2783                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2784                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2785                                                          jz      .20                                             ;no, skip ahead
  2786                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2787                                  .20                     mov     cl,64                                           ;indicator column
  2788                                                          call    SetConsoleChar                                  ;display ASCII character
  2789                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2790                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2791                                                          jz      .30                                             ;no, skip ahead
  2792                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2793                                  .30                     mov     cl,15                                           ;indicator column
  2794                                                          call    SetConsoleChar                                  ;display ASCII character
  2795                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2796                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2797                                                          jz      .40                                             ;no, skip ahead
  2798                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2799                                  .40                     mov     cl,63                                           ;indicator column
  2800                                                          call    SetConsoleChar                                  ;display ASCII character
  2801                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2802                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2803                                                          jz      .50                                             ;no, skip ahead
  2804                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2805                                  .50                     mov     cl,16                                           ;indicator column
  2806                                                          call    SetConsoleChar                                  ;display ASCII character
  2807                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2808                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2809                                                          jz      .60                                             ;no, skip ahead
  2810                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2811                                  .60                     mov     cl,62                                           ;indicator column
  2812                                                          call    SetConsoleChar                                  ;display ASCII character
  2813                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2814                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2815                                                          jz      .70                                             ;no, skip ahead
  2816                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2817                                  .70                     mov     cl,78                                           ;indicator column
  2818                                                          call    SetConsoleChar                                  ;display ASCII character
  2819                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2820                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2821                                                          jz      .80                                             ;no, skip ahead
  2822                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2823                                  .80                     mov     cl,77                                           ;indicator column
  2824                                                          call    SetConsoleChar                                  ;display ASCII character
  2825                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2826                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2827                                                          jz      .90                                             ;no, skip ahead
  2828                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2829                                  .90                     mov     cl,76                                           ;indicator column
  2830                                                          call    SetConsoleChar                                  ;display ASCII character
  2831                                                          pop     es                                              ;restore non-volatile regs
  2832                                                          pop     ecx                                             ;
  2833                                                          ret                                                     ;return
  2834                                  ;-----------------------------------------------------------------------------------------------------------------------
  2835                                  ;
  2836                                  ;       Routine:        PutConsoleString
  2837                                  ;
  2838                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2839                                  ;                       console position as needed.
  2840                                  ;
  2841                                  ;       In:             EDX     source address
  2842                                  ;                       DS      OS data selector
  2843                                  ;
  2844                                  ;-----------------------------------------------------------------------------------------------------------------------
  2845                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2846                                                          mov     esi,edx                                         ;source address
  2847                                                          cld                                                     ;forward strings
  2848                                  .10                     lodsb                                                   ;ASCII character
  2849                                                          or      al,al                                           ;end of string?
  2850                                                          jz      .40                                             ;yes, skip ahead
  2851                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2852                                                          jne     .20                                             ;no, skip ahead
  2853                                                          call    FirstConsoleColumn                              ;move to start of row
  2854                                                          jmp     .10                                             ;next character
  2855                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2856                                                          jne     .30                                             ;no, skip ahead
  2857                                                          call    NextConsoleRow                                  ;move to next row
  2858                                                          jmp     .10                                             ;next character
  2859                                  .30                     call    PutConsoleChar                                  ;output character to console
  2860                                                          call    NextConsoleColumn                               ;advance to next column
  2861                                                          jmp     .10                                             ;next character
  2862                                  .40                     pop     esi                                             ;restore non-volatile regs
  2863                                                          ret                                                     ;return
  2864                                  ;-----------------------------------------------------------------------------------------------------------------------
  2865                                  ;
  2866                                  ;       Routine:        Yield
  2867                                  ;
  2868                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2869                                  ;
  2870                                  ;-----------------------------------------------------------------------------------------------------------------------
  2871                                  Yield                   sti                                                     ;enable maskagle interrupts
  2872                                                          hlt                                                     ;halt until external interrupt
  2873                                                          ret                                                     ;return
  2874                                  ;=======================================================================================================================
  2875                                  ;
  2876                                  ;       Message Queue Helper Routines
  2877                                  ;
  2878                                  ;       GetMessage
  2879                                  ;       PutMessage
  2880                                  ;
  2881                                  ;=======================================================================================================================
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;       Routine:        GetMessage
  2885                                  ;
  2886                                  ;       Description:    This routine reads and removes a message from the message queue.
  2887                                  ;
  2888                                  ;       Out:            EAX     lo-order message data
  2889                                  ;                       EDX     hi-order message data
  2890                                  ;
  2891                                  ;                       CY      0 = message read
  2892                                  ;                               1 = no message to read
  2893                                  ;
  2894                                  ;-----------------------------------------------------------------------------------------------------------------------
  2895                                  GetMessage              push    ebx                                             ;save non-volatile regs
  2896                                                          push    ecx                                             ;
  2897                                                          push    ds                                              ;
  2898                                                          push    ELDTMQ                                          ;load message queue selector ...
  2899                                                          pop     ds                                              ;... into data segment register
  2900                                                          mov     ebx,[MQHead]                                    ;head ptr
  2901                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  2902                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2903                                                          or      eax,edx                                         ;is queue empty?
  2904                                                          stc                                                     ;assume queue is emtpy
  2905                                                          jz      .20                                             ;yes, skip ahead
  2906                                                          xor     ecx,ecx                                         ;store zero
  2907                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  2908                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2909                                                          add     ebx,8                                           ;next queue element
  2910                                                          and     ebx,03FCh                                       ;at end of queue?
  2911                                                          jnz     .10                                             ;no, skip ahead
  2912                                                          mov     bl,8                                            ;reset to 1st entry
  2913                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2914                                                          clc                                                     ;indicate message read
  2915                                  .20                     pop     ds                                              ;restore non-volatile regs
  2916                                                          pop     ecx                                             ;
  2917                                                          pop     ebx                                             ;
  2918                                                          ret                                                     ;return
  2919                                  ;-----------------------------------------------------------------------------------------------------------------------
  2920                                  ;
  2921                                  ;       Routine:        PutMessage
  2922                                  ;
  2923                                  ;       Description:    This routine adda a message to the message queue.
  2924                                  ;
  2925                                  ;       In:             ECX     hi-order data word
  2926                                  ;                       EDX     lo-order data word
  2927                                  ;
  2928                                  ;       Out:            CY      0 = success
  2929                                  ;                               1 = fail: queue is full
  2930                                  ;
  2931                                  ;-----------------------------------------------------------------------------------------------------------------------
  2932                                  PutMessage              push    ds                                              ;save non-volatile regs
  2933                                                          push    ELDTMQ                                          ;load task message queue selector ...
  2934                                                          pop     ds                                              ;... into data segment register
  2935                                                          mov     eax,[MQTail]                                    ;tail ptr
  2936                                                          cmp     dword [eax],0                                   ;is queue full?
  2937                                                          stc                                                     ;assume failure
  2938                                                          jne     .20                                             ;yes, cannot store
  2939                                                          mov     [eax],edx                                       ;store lo-order data
  2940                                                          mov     [eax+4],ecx                                     ;store hi-order data
  2941                                                          add     eax,8                                           ;next queue element adr
  2942                                                          and     eax,03FCh                                       ;at end of queue?
  2943                                                          jnz     .10                                             ;no, skip ahead
  2944                                                          mov     al,8                                            ;reset to top of queue
  2945                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2946                                                          clc                                                     ;indicate success
  2947                                  .20                     pop     ds                                              ;restore non-volatile regs
  2948                                                          ret                                                     ;return
  2949                                  ;=======================================================================================================================
  2950                                  ;
  2951                                  ;       Memory-Mapped Video Routines
  2952                                  ;
  2953                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2954                                  ;
  2955                                  ;       ClearConsoleScreen
  2956                                  ;       ScrollConsoleRow
  2957                                  ;       SetConsoleChar
  2958                                  ;
  2959                                  ;=======================================================================================================================
  2960                                  ;-----------------------------------------------------------------------------------------------------------------------
  2961                                  ;
  2962                                  ;       Routine:        ClearConsoleScreen
  2963                                  ;
  2964                                  ;       Description:    This routine clears the console (CGA) screen.
  2965                                  ;
  2966                                  ;-----------------------------------------------------------------------------------------------------------------------
  2967                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2968                                                          push    edi                                             ;
  2969                                                          push    ds                                              ;
  2970                                                          push    es                                              ;
  2971                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2972                                                          pop     ds                                              ;... into DS register
  2973                                                          push    EGDTCGA                                         ;load CGA selector ...
  2974                                                          pop     es                                              ;... into ES register
  2975                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2976                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2977                                                          xor     edi,edi                                         ;target offset
  2978                                                          cld                                                     ;forward strings
  2979                                                          rep     stosd                                           ;reset screen body
  2980                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2981                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2982                                                          rep     stosd                                           ;reset OIA line
  2983                                                          xor     al,al                                           ;zero register
  2984                                                          mov     [wbConsoleRow],al                               ;reset console row
  2985                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2986                                                          call    PlaceCursor                                     ;place cursor at current position
  2987                                                          pop     es                                              ;restore non-volatile regs
  2988                                                          pop     ds                                              ;
  2989                                                          pop     edi                                             ;
  2990                                                          pop     ecx                                             ;
  2991                                                          ret                                                     ;return
  2992                                  ;-----------------------------------------------------------------------------------------------------------------------
  2993                                  ;
  2994                                  ;       Routine:        ScrollConsoleRow
  2995                                  ;
  2996                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2997                                  ;
  2998                                  ;-----------------------------------------------------------------------------------------------------------------------
  2999                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  3000                                                          push    esi                                             ;
  3001                                                          push    edi                                             ;
  3002                                                          push    ds                                              ;
  3003                                                          push    es                                              ;
  3004                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3005                                                          pop     ds                                              ;... into DS
  3006                                                          push    EGDTCGA                                         ;load CGA video selector ...
  3007                                                          pop     es                                              ;... into ES
  3008                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  3009                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  3010                                                          xor     edi,edi                                         ;EDI = target (line 1)
  3011                                                          cld                                                     ;forward strings
  3012                                                          rep     movsd                                           ;move 24 lines up
  3013                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  3014                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3015                                                          rep     stosd                                           ;clear bottom row
  3016                                                          pop     es                                              ;restore non-volatile regs
  3017                                                          pop     ds                                              ;
  3018                                                          pop     edi                                             ;
  3019                                                          pop     esi                                             ;
  3020                                                          pop     ecx                                             ;
  3021                                                          ret                                                     ;return
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ;
  3024                                  ;       Routine:        SetConsoleChar
  3025                                  ;
  3026                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3027                                  ;
  3028                                  ;       In:             AL      ASCII character
  3029                                  ;                       CL      column
  3030                                  ;                       CH      row
  3031                                  ;                       ES      CGA selector
  3032                                  ;
  3033                                  ;       Out:            EAX     last target address written (ES:)
  3034                                  ;                       CL      column + 1
  3035                                  ;
  3036                                  ;-----------------------------------------------------------------------------------------------------------------------
  3037                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3038                                                          movzx   eax,ch                                          ;row
  3039                                                          mov     ah,ECONCOLS                                     ;cols/row
  3040                                                          mul     ah                                              ;row * cols/row
  3041                                                          add     al,cl                                           ;add column
  3042                                                          adc     ah,0                                            ;handle carry
  3043                                                          shl     eax,1                                           ;screen offset
  3044                                                          mov     [es:eax],dl                                     ;store character
  3045                                                          inc     cl                                              ;next column
  3046                                                          ret                                                     ;return
  3047                                  ;=======================================================================================================================
  3048                                  ;
  3049                                  ;       Input/Output Routines
  3050                                  ;
  3051                                  ;       These routines read and/or write directly to ports.
  3052                                  ;
  3053                                  ;       PlaceCursor
  3054                                  ;       PutPrimaryEndOfInt
  3055                                  ;       PutSecondaryEndOfInt
  3056                                  ;       ResetSystem
  3057                                  ;       SetKeyboardLamps
  3058                                  ;       WaitForKeyInBuffer
  3059                                  ;       WaitForKeyOutBuffer
  3060                                  ;
  3061                                  ;=======================================================================================================================
  3062                                  ;-----------------------------------------------------------------------------------------------------------------------
  3063                                  ;
  3064                                  ;       Routine:        PlaceCursor
  3065                                  ;
  3066                                  ;       Description:    This routine positions the cursor on the console.
  3067                                  ;
  3068                                  ;       In:             DS      OS data selector
  3069                                  ;
  3070                                  ;-----------------------------------------------------------------------------------------------------------------------
  3071                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3072                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3073                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3074                                                          mul     ah                                              ;row offset
  3075                                                          add     al,[wbConsoleColumn]                            ;add column
  3076                                                          adc     ah,0                                            ;add overflow
  3077                                                          mov     ecx,eax                                         ;screen offset
  3078                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3079                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3080                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3081                                                          out     dx,al                                           ;select register
  3082                                                          inc     edx                                             ;data port
  3083                                                          mov     al,ch                                           ;hi-order cursor loc
  3084                                                          out     dx,al                                           ;store hi-order loc
  3085                                                          dec     edx                                             ;register select port
  3086                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3087                                                          out     dx,al                                           ;select register
  3088                                                          inc     edx                                             ;data port
  3089                                                          mov     al,cl                                           ;lo-order cursor loc
  3090                                                          out     dx,al                                           ;store lo-order loc
  3091                                                          pop     ecx                                             ;restore non-volatile regs
  3092                                                          ret                                                     ;return
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  ;
  3095                                  ;       Routine:        PutPrimaryEndOfInt
  3096                                  ;
  3097                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3098                                  ;
  3099                                  ;-----------------------------------------------------------------------------------------------------------------------
  3100                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3101                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3102                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3103                                                          ret                                                     ;return
  3104                                  ;-----------------------------------------------------------------------------------------------------------------------
  3105                                  ;
  3106                                  ;       Routine:        PutSecondaryEndOfInt
  3107                                  ;
  3108                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3109                                  ;
  3110                                  ;-----------------------------------------------------------------------------------------------------------------------
  3111                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3112                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3113                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3114                                                          ret                                                     ;return
  3115                                  ;-----------------------------------------------------------------------------------------------------------------------
  3116                                  ;
  3117                                  ;       Routine:        ResetSystem
  3118                                  ;
  3119                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3120                                  ;
  3121                                  ;       Out:            N/A     This routine does not return.
  3122                                  ;
  3123                                  ;-----------------------------------------------------------------------------------------------------------------------
  3124                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3125                                                          loop    $                                               ;clear interrupts
  3126                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3127                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3128                                  .10                     sti                                                     ;enable maskable interrupts
  3129                                                          hlt                                                     ;halt until interrupt
  3130                                                          jmp     .10                                             ;repeat until reset kicks in
  3131                                  ;-----------------------------------------------------------------------------------------------------------------------
  3132                                  ;
  3133                                  ;       Routine:        SetKeyboardLamps
  3134                                  ;
  3135                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3136                                  ;
  3137                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3138                                  ;
  3139                                  ;-----------------------------------------------------------------------------------------------------------------------
  3140                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3141                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3142                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3143                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3144                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3145                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3146                                                          mov     al,bh                                           ;set/reset lamps value
  3147                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3148                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3149                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3150                                                          ret                                                     ;return
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  ;
  3153                                  ;       Routine:        WaitForKeyInBuffer
  3154                                  ;
  3155                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3156                                  ;
  3157                                  ;       Out:            ZF      1 = Input buffer ready
  3158                                  ;                               0 = Input buffer not ready after timeout
  3159                                  ;
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3162                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3163                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3164                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3165                                                          loopnz  .10                                             ;yes, repeat till timeout
  3166                                                          pop     ecx                                             ;restore non-volatile regs
  3167                                                          ret                                                     ;return
  3168                                  ;-----------------------------------------------------------------------------------------------------------------------
  3169                                  ;
  3170                                  ;       Routine:        WaitForKeyOutBuffer
  3171                                  ;
  3172                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3173                                  ;
  3174                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3175                                  ;                               0 = Output buffer empty after timeout
  3176                                  ;
  3177                                  ;-----------------------------------------------------------------------------------------------------------------------
  3178                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3179                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3180                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3181                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3182                                                          loopz   .10                                             ;loop until output buffer bit
  3183                                                          pop     ecx                                             ;restore non-volatile regs
  3184                                                          ret                                                     ;return
  3185                                  ;-----------------------------------------------------------------------------------------------------------------------
  3186                                  ;
  3187                                  ;       End of the Kernel Function Library
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3191                                  ;=======================================================================================================================
  3192                                  ;
  3193                                  ;       Console Task
  3194                                  ;
  3195                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3196                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3197                                  ;       screen and responds to user commands.
  3198                                  ;
  3199                                  ;=======================================================================================================================
  3200                                  ;-----------------------------------------------------------------------------------------------------------------------
  3201                                  ;
  3202                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3203                                  ;
  3204                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3205                                  ;
  3206                                  ;-----------------------------------------------------------------------------------------------------------------------
  3207                                  section                 constack                                                ;console task stack
  3208                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  ;
  3211                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3212                                  ;
  3213                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3214                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3215                                  ;       16 descriptors. Six are initially defined.
  3216                                  ;
  3217                                  ;-----------------------------------------------------------------------------------------------------------------------
  3218                                  section                 conldt                                                  ;console local descriptors
  3219                                                          dq      004093004780007Fh                               ;04 TSS alias
  3220                                                          dq      004093004700007Fh                               ;0c LDT alias
  3221                                                          dq      00409300400006FFh                               ;14 stack
  3222                                                          dq      00CF93000000FFFFh                               ;1c data
  3223                                                          dq      00409B0050000FFFh                               ;24 code
  3224                                                          dq      00409300480007FFh                               ;2c message queue
  3225                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3226                                  ;-----------------------------------------------------------------------------------------------------------------------
  3227                                  ;
  3228                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3229                                  ;
  3230                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3231                                  ;       segment. CS to console code.
  3232                                  ;
  3233                                  ;-----------------------------------------------------------------------------------------------------------------------
  3234                                  section                 contss                                                  ;console task state segment
  3235                                                          dd      0                                               ;00 back-link tss
  3236                                                          dd      0700h                                           ;04 esp ring 0
  3237                                                          dd      0014h                                           ;08 ss ring 0
  3238                                                          dd      0700h                                           ;0c esp ring 1
  3239                                                          dd      0014h                                           ;10 es ring 1
  3240                                                          dd      0700h                                           ;14 esp ring 2
  3241                                                          dd      0014h                                           ;18 ss ring 2
  3242                                                          dd      0                                               ;1c cr ring 3
  3243                                                          dd      0                                               ;20 eip
  3244                                                          dd      0200h                                           ;24 eflags
  3245                                                          dd      0                                               ;28 eax
  3246                                                          dd      0                                               ;2c ecx
  3247                                                          dd      0                                               ;30 edx
  3248                                                          dd      0                                               ;34 ebx
  3249                                                          dd      0700h                                           ;38 esp ring 3
  3250                                                          dd      0                                               ;3c ebp
  3251                                                          dd      0                                               ;40 esi
  3252                                                          dd      0                                               ;44 edi
  3253                                                          dd      001Ch                                           ;48 es
  3254                                                          dd      0024h                                           ;4c cs
  3255                                                          dd      0014h                                           ;50 ss ring 3
  3256                                                          dd      001Ch                                           ;54 ds
  3257                                                          dd      0                                               ;58 fs
  3258                                                          dd      0                                               ;5c gs
  3259                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3260                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3261                                  ;-----------------------------------------------------------------------------------------------------------------------
  3262                                  ;
  3263                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3264                                  ;
  3265                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3266                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3267                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3268                                  ;       event.
  3269                                  ;
  3270                                  ;-----------------------------------------------------------------------------------------------------------------------
  3271                                  section                 conmque                                                 ;console message queue
  3272                                                          dd      8                                               ;head pointer
  3273                                                          dd      8                                               ;tail pointer
  3274                                                          times   510 dd 0                                        ;queue elements
  3275                                  ;-----------------------------------------------------------------------------------------------------------------------
  3276                                  ;
  3277                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3278                                  ;
  3279                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3280                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3281                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3282                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3283                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3284                                  ;       board input, echoing to the console screen and responding to user commands.
  3285                                  ;
  3286                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3287                                  ;
  3288                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3289                                  ;                               |  Real Mode Interrupt Vectors                  |
  3290                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3291                                  ;                               |  Reserved BIOS Memory Area                    |
  3292                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3293                                  ;                               |  Shared Kernel Memory Area                    |
  3294                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3295                                  ;                               |  Global Descriptor Table (GDT)                |
  3296                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3297                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3298                                  ;                       002000  +-----------------------------------------------+
  3299                                  ;                               |  Interrupt Handlers                           |
  3300                                  ;                               |  Kernel Function Library                      |
  3301                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3302                                  ;                               |  Console Task Stack Area                      |
  3303                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3304                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3305                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3306                                  ;                               |  Console Task Task State Segment (TSS)        |
  3307                                  ;                       004800  +-----------------------------------------------+
  3308                                  ;                               |  Console Task Message Queue                   |
  3309                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3310                                  ;                               |  Console Task Code                            |
  3311                                  ;                               |  Console Task Constants                       |
  3312                                  ;                       006000  +===============================================+
  3313                                  ;
  3314                                  ;-----------------------------------------------------------------------------------------------------------------------
  3315                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3316                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3317                                                          clearConsoleScreen                                      ;clear the console screen
  3318                                                          putConsoleString czTitle                                ;display startup message
  3319                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3320                                                          placeCursor                                             ;set CRT cursor location
  3321                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3322                                                          call    ConPutNewLine                                   ;newline
  3323                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3324                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3325                                                          call    ConTakeToken                                    ;handle console input
  3326                                                          mov     edx,wzConsoleToken                              ;token buffer
  3327                                                          call    ConDetermineCommand                             ;determine command number
  3328                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3329                                                          jb      .20                                             ;yes, branch
  3330                                                          putConsoleString czUnknownCommand                       ;display error message
  3331                                                          jmp     .10                                             ;next command
  3332                                  .20                     shl     eax,2                                           ;index into jump table
  3333                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3334                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3335                                                          call    eax                                             ;call command handler
  3336                                                          jmp     .10                                             ;next command
  3337                                  ;-----------------------------------------------------------------------------------------------------------------------
  3338                                  ;
  3339                                  ;       Routine:        ConInitializeData
  3340                                  ;
  3341                                  ;       Description:    This routine initializes console task variables.
  3342                                  ;
  3343                                  ;-----------------------------------------------------------------------------------------------------------------------
  3344                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3345                                                          push    edi                                             ;
  3346                                                          push    es                                              ;
  3347                                  ;
  3348                                  ;       Initialize console work areas.
  3349                                  ;
  3350                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3351                                                          pop     es                                              ;... into extra segment register
  3352                                                          mov     edi,ECONDATA                                    ;OS console data address
  3353                                                          xor     al,al                                           ;initialization value
  3354                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3355                                                          cld                                                     ;forward strings
  3356                                                          rep     stosb                                           ;initialize data
  3357                                  ;
  3358                                  ;       Restore and return.
  3359                                  ;
  3360                                                          pop     es                                              ;restore non-volatile regs
  3361                                                          pop     edi                                             ;
  3362                                                          pop     ecx                                             ;
  3363                                                          ret                                                     ;return
  3364                                  ;-----------------------------------------------------------------------------------------------------------------------
  3365                                  ;
  3366                                  ;       Routine:        ConPutNewLine
  3367                                  ;
  3368                                  ;       Description:    Write a new-line to the console.
  3369                                  ;
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  ConPutNewLine           putConsoleString czNewLine                              ;write value to console
  3372                                                          ret                                                     ;return
  3373                                  ;-----------------------------------------------------------------------------------------------------------------------
  3374                                  ;
  3375                                  ;       Routine:        ConTakeToken
  3376                                  ;
  3377                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3378                                  ;
  3379                                  ;       In:             DS:EDX  source buffer address
  3380                                  ;                       DS:EBX  target buffer address
  3381                                  ;
  3382                                  ;       Out:            DS:EDX  source buffer address
  3383                                  ;                       DS:EBX  target buffer address
  3384                                  ;
  3385                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3386                                  ;
  3387                                  ;-----------------------------------------------------------------------------------------------------------------------
  3388                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3389                                                          push    edi                                             ;
  3390                                                          push    es                                              ;
  3391                                                          push    ds                                              ;load data segment selector ...
  3392                                                          pop     es                                              ;... into extra segment reg
  3393                                                          mov     esi,edx                                         ;source buffer address
  3394                                                          mov     edi,ebx                                         ;target buffer address
  3395                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3396                                                          cld                                                     ;forward strings
  3397                                  .10                     lodsb                                                   ;load byte
  3398                                                          cmp     al,EASCIISPACE                                  ;space?
  3399                                                          je      .10                                             ;yes, continue
  3400                                                          test    al,al                                           ;end of line?
  3401                                                          jz      .40                                             ;yes, branch
  3402                                  .20                     stosb                                                   ;store byte
  3403                                                          lodsb                                                   ;load byte
  3404                                                          test    al,al                                           ;end of line?
  3405                                                          jz      .40                                             ;no, continue
  3406                                                          cmp     al,EASCIISPACE                                  ;space?
  3407                                                          jne     .20                                             ;no, continue
  3408                                  .30                     lodsb                                                   ;load byte
  3409                                                          cmp     al,EASCIISPACE                                  ;space?
  3410                                                          je      .30                                             ;yes, continue
  3411                                                          dec     esi                                             ;pre-position
  3412                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3413                                                          mov     edi,edx                                         ;source buffer address
  3414                                  .50                     lodsb                                                   ;remaining byte
  3415                                                          stosb                                                   ;move to front of buffer
  3416                                                          test    al,al                                           ;end of line?
  3417                                                          jnz     .50                                             ;no, continue
  3418                                                          pop     es                                              ;restore non-volatile regs
  3419                                                          pop     edi                                             ;
  3420                                                          pop     esi                                             ;
  3421                                                          ret                                                     ;return
  3422                                  ;-----------------------------------------------------------------------------------------------------------------------
  3423                                  ;
  3424                                  ;       Routine:        ConDetermineCommand
  3425                                  ;
  3426                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3427                                  ;
  3428                                  ;       input:          DS:EDX  command address
  3429                                  ;
  3430                                  ;       output:         EAX     >=0     = command nbr
  3431                                  ;                               0       = unknown command
  3432                                  ;
  3433                                  ;-----------------------------------------------------------------------------------------------------------------------
  3434                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3435                                                          push    ecx                                             ;
  3436                                                          push    esi                                             ;
  3437                                                          push    edi                                             ;
  3438                                                          upperCaseString                                         ;upper-case string at EDX
  3439                                                          mov     esi,tConCmdTbl                                  ;commands table
  3440                                                          xor     edi,edi                                         ;intialize command number
  3441                                                          cld                                                     ;forward strings
  3442                                  .10                     lodsb                                                   ;command length
  3443                                                          movzx   ecx,al                                          ;command length
  3444                                                          jecxz   .20                                             ;branch if end of table
  3445                                                          mov     ebx,esi                                         ;table entry address
  3446                                                          add     esi,ecx                                         ;next table entry address
  3447                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3448                                                          jecxz   .20                                             ;branch if equal
  3449                                                          inc     edi                                             ;increment command nbr
  3450                                                          jmp     .10                                             ;repeat
  3451                                  .20                     mov     eax,edi                                         ;command number
  3452                                                          pop     edi                                             ;restore non-volatile regs
  3453                                                          pop     esi                                             ;
  3454                                                          pop     ecx                                             ;
  3455                                                          pop     ebx                                             ;
  3456                                                          ret                                                     ;return
  3457                                  ;-----------------------------------------------------------------------------------------------------------------------
  3458                                  ;
  3459                                  ;       Routine:        ConClear
  3460                                  ;
  3461                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3462                                  ;
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3465                                                          ret                                                     ;return
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                  ;
  3468                                  ;       Routine:        ConExit
  3469                                  ;
  3470                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3471                                  ;
  3472                                  ;-----------------------------------------------------------------------------------------------------------------------
  3473                                  ConExit                 resetSystem                                             ;issue system reset
  3474                                                          ret                                                     ;return
  3475                                  ;-----------------------------------------------------------------------------------------------------------------------
  3476                                  ;
  3477                                  ;       Routine:        ConVersion
  3478                                  ;
  3479                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3480                                  ;
  3481                                  ;-----------------------------------------------------------------------------------------------------------------------
  3482                                  ConVersion              putConsoleString czTitle                                ;display version message
  3483                                                          ret                                                     ;return
  3484                                  ;-----------------------------------------------------------------------------------------------------------------------
  3485                                  ;
  3486                                  ;       Tables
  3487                                  ;
  3488                                  ;-----------------------------------------------------------------------------------------------------------------------
  3489                                                                                                                  ;---------------------------------------
  3490                                                                                                                  ;  Command Jump Table
  3491                                                                                                                  ;---------------------------------------
  3492                                  tConJmpTbl              equ     $                                               ;command jump table
  3493                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3494                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  3495                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  3496                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3497                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3498                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  3499                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  3500                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3501                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3502                                                                                                                  ;---------------------------------------
  3503                                                                                                                  ;  Command Name Table
  3504                                                                                                                  ;---------------------------------------
  3505                                  tConCmdTbl              equ     $                                               ;command name table
  3506                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3507                                                          db      8,"VERSION",0                                   ;version command
  3508                                                          db      6,"CLEAR",0                                     ;clear command
  3509                                                          db      5,"EXIT",0                                      ;exit command
  3510                                                          db      5,"QUIT",0                                      ;quit command
  3511                                                          db      4,"CLS",0                                       ;cls command
  3512                                                          db      4,"VER",0                                       ;ver command
  3513                                                          db      0                                               ;end of table
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  ;
  3516                                  ;       Constants
  3517                                  ;
  3518                                  ;-----------------------------------------------------------------------------------------------------------------------
  3519                                  czNewLine               db      13,10,0                                         ;new line string
  3520                                  czPrompt                db      ":",0                                           ;prompt string
  3521                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3522                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3523                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3524                                  %endif
  3525                                  %ifdef BUILDDISK
  3526                                  ;-----------------------------------------------------------------------------------------------------------------------
  3527                                  ;
  3528                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3529                                  ;
  3530                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3531                                  ;
  3532                                  ;-----------------------------------------------------------------------------------------------------------------------
  3533                                  section                 unused                                                  ;unused disk space
  3534                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3535                                  %endif
  3536                                  ;=======================================================================================================================
  3537                                  ;
  3538                                  ;       End of Program Code
  3539                                  ;
  3540                                  ;=======================================================================================================================
