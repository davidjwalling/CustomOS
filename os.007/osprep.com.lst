     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.007
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;			clear, exit, and ver.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Register EAX is preferred for returning a response/result value.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX and ECX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	x86 Descriptor Access Codes						EACC...
   190                                  ;
   191                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   192                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   193                                  ;
   194                                  ;	0.......	Segment is not present in memory (triggers int 11)
   195                                  ;	1.......	Segment is present in memory
   196                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   197                                  ;	...0....	Segment is a system segment
   198                                  ;	...00010		Local Descriptor Table
   199                                  ;	...00101		Task Gate
   200                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   201                                  ;	...01100		Call Gate (386)
   202                                  ;	...01110		Interrupt Gate (386)
   203                                  ;	...01111		Trap Gate (386)
   204                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   205                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   206                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EACCLDT			equ	10000010b					;local descriptor table
   210                                  EACCTASK		equ	10000101b					;task gate
   211                                  EACCTSS			equ	10001001b					;task-state segment
   212                                  EACCGATE		equ	10001100b					;call gate
   213                                  EACCINT			equ	10001110b					;interrupt gate
   214                                  EACCTRAP		equ	10001111b					;trap gate
   215                                  EACCDATA		equ	10010011b					;upward writable data
   216                                  EACCCODE		equ	10011011b					;non-conforming readable code
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ;
   219                                  ;	BIOS Interrupts and Functions						EBIOS...
   220                                  ;
   221                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   222                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   226                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   227                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   228                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   229                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   230                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   231                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	ASCII									EASC...
   235                                  ;
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   238                                  EASCIILINEFEED		equ	10						;ASCII line feed
   239                                  EASCIIRETURN		equ	13						;ASCII carriage return
   240                                  EASCIIESCAPE		equ	27						;ASCII escape
   241                                  EASCIISPACE		equ	32						;ASCII space
   242                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   243                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   244                                  EASCIILOWERA		equ	97						;ASCII 'a'
   245                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   246                                  EASCIITILDE		equ	126						;ASCII '~'
   247                                  EASCIICASE		equ	00100000b					;ASCII case bit
   248                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	Boot Sector and Loader Constants
   252                                  ;
   253                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   254                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   255                                  ;
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   258                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   259                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   260                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   261                                  EMAXTRIES		equ	5						;max read retries
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ESELDAT			equ	18h						;kernel data selector
   266                                  ESELCGA			equ	20h						;cga video selector
   267                                  ESELOSCODE		equ	48h						;os kernel selector
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;	LDT Selectors								ESEL...
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ESELMQ			equ	2Ch						;console task message queue
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;	Kernel Constants							EKRN...
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  EKRNDESLEN		equ	8						;size of descriptor
   276                                  EKRNADR			equ	1000h						;kernel base address
   277                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   278                                  ;-----------------------------------------------------------------------------------------------------------------------
   279                                  ;	Keyboard Flags
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  EKEYCTRLLEFT		equ	00000001b					;left control
   282                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   283                                  EKEYALTLEFT		equ	00000100b					;left alt
   284                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   285                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   286                                  EKEYSHIFT		equ	00010010b					;left or right shift
   287                                  EKEYALTRIGHT		equ	00100000b					;right alt
   288                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   289                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   290                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   291                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;	Console Constants							ECON...
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ECONCOLS		equ	80						;columns per row
   296                                  ECONROWS		equ	24						;console rows
   297                                  ECONOIAROW		equ	24						;operator information area row
   298                                  ECONCOLBYTES		equ	2						;bytes per column
   299                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   300                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   301                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   302                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;	Kernel Message Identifiers						EMSG...
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   307                                  EMSGKEYUP		equ	41010000h					;message: key-up
   308                                  EMSGKEYCHAR		equ	41020000h					;message: character
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;
   311                                  ;	Structures
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  ;
   316                                  ;	OSDATA
   317                                  ;
   318                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   319                                  ;	used by the BIOS.
   320                                  ;
   321                                  ;-----------------------------------------------------------------------------------------------------------------------
   322                                  struc			OSDATA
   323 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   324 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   325 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   326 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   327 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   328 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   329 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   330 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   331 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   332 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   333 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   334 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   335 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   336 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   337 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   338 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   339 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   340 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   341 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   342 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   343 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   344 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   345 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   346 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   347 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   348 00000449 <res 00000001>          			resb	1						;449 current video mode
   349 0000044A <res 00000002>          			resw	1						;44A screen columns
   350 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   351 0000044E <res 00000002>          			resw	1						;44E current video page offset
   352 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   353 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   354 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   355 00000462 <res 00000001>          			resb	1						;462 active display page number
   356 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   357 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   358 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   359 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   360 00000469 <res 00000003>          			resb	3						;469 vague
   361 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   362 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   363 00000471 <res 00000001>          			resb	1						;471 bios break flag
   364 00000472 <res 00000002>          			resw	1						;472 soft reset
   365 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   366 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   367 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   368 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   369 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   370 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   371 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   372 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   373 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   374 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   375 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   376 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   377 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   378 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   379 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   380 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   381 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   382 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   383 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   384 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   385 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   386 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   387 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   388 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   389 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   390 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   391 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   392 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   393 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   394 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   395 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   396 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   397 000004AC <res 00000008>          			resb	8						;4AC reserved
   398 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   399 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   400 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   401 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   402 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   403 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   404 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   405 000004CD <res 00000001>          			resb	1						;4CD unknown
   406 000004CE <res 00000002>          			resw	1						;4CE day counter
   407 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   408 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   409 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   410 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   411 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   412 00000505 <res 0000000A>          			resb	10						;505 POST work area
   413 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   414 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   415 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   416 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   417 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   418 0000051E <res 00000002>          			resw	1						;51E unknown
   419 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   420 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   421 00000530 <res 00000004>          			resb	4						;530 MODE command
   422 00000534 <res 000001CC>          			resb	460						;534 unused
   423 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   424                                  ;-----------------------------------------------------------------------------------------------------------------------
   425                                  ;
   426                                  ;	OS Variables								@disk: N/A	@mem: 000800
   427                                  ;
   428                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   429                                  ;	accessible by any kernel task or interrupt.
   430                                  ;
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ECONDATA		equ	($)
   433 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   434 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   435 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   436 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   437 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   438 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   439 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   440 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   441 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   442 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   443 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   444 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   445 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   446                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   447                                  endstruc
   448                                  ;-----------------------------------------------------------------------------------------------------------------------
   449                                  ;
   450                                  ;	MQUEUE
   451                                  ;
   452                                  ;	The MQUEUE structure maps memory used for a message queue.
   453                                  ;
   454                                  ;-----------------------------------------------------------------------------------------------------------------------
   455                                  struc			MQUEUE
   456 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   457 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   458 00000008 <res 000003F8>          MQData			resd	254						;message queue
   459                                  endstruc
   460                                  ;-----------------------------------------------------------------------------------------------------------------------
   461                                  ;
   462                                  ;	Macros
   463                                  ;
   464                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   465                                  ;
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  %macro			mint	1
   468                                  _%1			equ	($-$$) / EKRNDESLEN
   469                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   470                                  %endmacro
   471                                  %macro			mtrap	1
   472                                  _%1			equ	($-$$) / EKRNDESLEN
   473                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   474                                  %endmacro
   475                                  %macro			menter	1
   476                                  ?%1			equ	($-$$)
   477                                  %endmacro
   478                                  %macro			tsvce	1
   479                                  e%1			equ	($-tsvc)/4
   480                                  			dd	%1
   481                                  %endmacro
   482                                  %ifdef BUILDBOOT
   483                                  ;-----------------------------------------------------------------------------------------------------------------------
   484                                  ;
   485                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   486                                  ;
   487                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   488                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   489                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   490                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   491                                  ;
   492                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   493                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   494                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   495                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   496                                  ;	immediately followed by a disk parameter table.
   497                                  ;
   498                                  ;-----------------------------------------------------------------------------------------------------------------------
   499                                  			cpu	8086						;assume minimal CPU
   500                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   501                                  			bits	16						;16-bit code at power-up
   502                                  %ifdef BUILDPREP
   503 00000000 E9FD01                  Boot			jmp	word Prep					;jump to preparation code
   504                                  %else
   505                                  Boot			jmp	word Boot.10					;jump over parameter table
   506                                  %endif
   507                                  ;-----------------------------------------------------------------------------------------------------------------------
   508                                  ;
   509                                  ;	Disk Parameter Table
   510                                  ;
   511                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   512                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   513                                  ;
   514                                  ;-----------------------------------------------------------------------------------------------------------------------
   515 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   516 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   517 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   518 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   519 00000010 02                      cbFatCount		db	2						;file allocation table copies
   520 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   521 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   522 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   523 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   524                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   525 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   526 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   527 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   528                                  ;
   529                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   530                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   531                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   532                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   533                                  ;	given several possible starting values for CS:IP.
   534                                  ;
   535                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   536 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   537                                  .@20			equ	$-$$						;.@20 = 021h
   538 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   539 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   540 00000025 B104                    			mov	cl,4						;shift count
   541 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   542 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   543 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   544                                  ;
   545                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   546                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   547                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   548                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   549                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   550                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   551                                  ;
   552 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   553 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   554 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   555 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   556 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   557                                  ;
   558                                  ;	Our boot addressability is now set up according to the following diagram.
   559                                  ;
   560                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   561                                  ;				|  Unused (DOS Program Segment Prefix)		|
   562                                  ;			007c00	+-----------------------------------------------+ DS:0100
   563                                  ;				|  Boot Sector Code (vstart=100h)		|
   564                                  ;				|						|
   565                                  ;			007e00	+-----------------------------------------------+ DS:0300
   566                                  ;				|  Boot Stack					|
   567                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   568                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   569                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   570                                  ;				|						|
   571                                  ;			009100	+-----------------------------------------------+ DS:1600
   572                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   573                                  ;				|						|
   574                                  ;			009300	+-----------------------------------------------+ DS:1800
   575                                  ;
   576                                  ;	On entry, DL indicates the drive being booted from.
   577                                  ;
   578 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   579                                  ;
   580                                  ;	Compute directory i/o buffer address.
   581                                  ;
   582 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   583 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   584 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   585 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   586                                  ;
   587                                  ;	Compute segment where os.com will be loaded.
   588                                  ;
   589 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   590 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   591 0000004E 83E810                  			sub	ax,16						;AX = 0900
   592 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   593                                  ;
   594                                  ;	Write a message to the console so we know we have our addressability established.
   595                                  ;
   596 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   597 00000057 E84B01                  			call	BootPrint					;display loader message
   598                                  ;
   599                                  ;	Initialize the number of directory sectors to search.
   600                                  ;
   601 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   602 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   603                                  ;
   604                                  ;	Compute number of directory sectors and initialize overhead count.
   605                                  ;
   606 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   607 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   608 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   609 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   610                                  ;
   611                                  ;	Compute directory entries per sector.
   612                                  ;
   613 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   614 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   615 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   616                                  ;
   617                                  ;	Compute first logical directory sector and update overhead count.
   618                                  ;
   619 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   620 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   621 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   622 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   623 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   624 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   625                                  ;
   626                                  ;	Read directory sector.
   627                                  ;
   628 00000089 B001                    .30			mov	al,1						;sector count
   629 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   630 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   631 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   632                                  ;
   633                                  ;	Setup variables to search this directory sector.
   634                                  ;
   635 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   636 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   637 0000009C 7603                    			jna	.40						;no, continue
   638 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   639 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   640 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   641 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   642                                  ;
   643                                  ;	Loop through directory sectors searching for kernel program.
   644                                  ;
   645 000000AC 56                      .50			push	si						;save kernel name address
   646 000000AD 57                      			push	di						;save dir i/o buffer address
   647 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   648 000000B1 FC                      			cld							;forward strings
   649 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   650 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   651 000000B5 5E                      			pop	si						;restore kernel name address
   652 000000B6 7418                    			je	.60						;exit loop if found
   653 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   654 000000BC 48                      			dec	ax						;decrement remaining entries
   655 000000BD 75ED                    			jnz	.50						;next entry
   656                                  ;
   657                                  ;	Repeat search if we are not at the end of the directory.
   658                                  ;
   659 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   660 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   661 000000C8 75BF                    			jne	.30						;no, get next sector
   662 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   663 000000CD E9C000                  			jmp	BootExit					;display message and exit
   664                                  ;
   665                                  ;	If we find the kernel program in the directory, read the FAT.
   666                                  ;
   667 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   668 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   669 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   670 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   671 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0500
   672 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   673                                  ;
   674                                  ;	Get the starting cluster of the kernel program and target address.
   675                                  ;
   676 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   677 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   678                                  ;
   679                                  ;	Read each program cluster into RAM.
   680                                  ;
   681 000000E9 50                      .70			push	ax						;save cluster nbr
   682 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   683 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   684 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   685 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   686 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   687 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   688 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   689 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   690                                  ;
   691                                  ;	Update buffer pointer for next cluster.
   692                                  ;
   693 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   694 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   695 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   696 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   697 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   698                                  ;
   699                                  ;	Compute next cluster number.
   700                                  ;
   701 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   702 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   703 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   704 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   705 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   706 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   707 0000011B 83E701                  			and	di,1						;get low bit
   708 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   709 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   710 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   711                                  ;
   712                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   713                                  ;
   714 00000126 F6C101                  			test	cl,1						;is cluster odd?
   715 00000129 7404                    			jz	.80						;no, skip ahead
   716 0000012B B104                    			mov	cl,4						;shift count
   717 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   718 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   719 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   720 00000135 75B2                    			jne	.70						;no, continue
   721                                  ;
   722                                  ;	Transfer control to the operating system program.
   723                                  ;
   724 00000137 EA                      			db	0EAh						;jmp seg:offset
   725 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   726 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   727                                  ;
   728                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   729                                  ;
   730 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   731 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   732 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   733 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   734 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   735 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   736 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   737 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   738 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   739 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   740                                  ;
   741                                  ;	Try maxtries times to read sector.
   742                                  ;
   743 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   744 0000015B 53                      .10			push	bx						;save buffer address
   745 0000015C 51                      			push	cx						;save retry count
   746 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   747 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   748 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   749 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   750 0000016A 59                      			pop	cx						;restore retry count
   751 0000016B 5B                      			pop	bx						;restore buffer address
   752 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   753 0000016E E2EB                    			loop	.10						;retry
   754                                  ;
   755                                  ;	Handle disk error: convert to ASCII and store in error string.
   756                                  ;
   757 00000170 88E0                    			mov	al,ah						;AL = bios error code
   758 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   759 00000174 B210                    			mov	dl,16						;divisor for base 16
   760 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   761 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   762 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   763 0000017E 7203                    			jb	.20						;continue if numeral
   764 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   765 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   766 00000185 7203                    			jb	.30						;continue if numeral
   767 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   768 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   769 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   770 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   771 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   772 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   773 00000197 7504                    			jnz	.20						;continue if key pressed
   774 00000199 FB                      			sti							;enable interrupts
   775 0000019A F4                      			hlt							;wait for interrupt
   776 0000019B EBF6                    			jmp	.10						;repeat
   777 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   778 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   779 000001A1 FB                      .30			sti							;enable interrupts
   780 000001A2 F4                      			hlt							;stop until reset, int, nmi
   781 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   782                                  ;
   783                                  ;	Display text message.
   784                                  ;
   785 000001A5 FC                      BootPrint		cld							;forward strings
   786 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   787 000001A7 84C0                    			test	al,al						;end of string?
   788 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   789 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   790 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   791 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   792 000001B1 C3                      BootReturn		ret							;return to caller
   793                                  ;-----------------------------------------------------------------------------------------------------------------------
   794                                  ;
   795                                  ;	Constants
   796                                  ;
   797                                  ;-----------------------------------------------------------------------------------------------------------------------
   798                                  			align	2
   799 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   800 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   800 000001BD 4F4D               
   801 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   801 000001C8 2E2E0D0A00         
   802 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   802 000001D6 7220               
   803 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   804 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   804 000001E4 7373696E6700       
   805                                  ;-----------------------------------------------------------------------------------------------------------------------
   806                                  ;
   807                                  ;	Work Areas
   808                                  ;
   809                                  ;-----------------------------------------------------------------------------------------------------------------------
   810                                  			align	2
   811 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   812 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   813 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   814 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   815 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   816                                  wwReadCountCommand	equ	$						;read count and command
   817 000001F4 00                      wbReadCount		db	0						;sectors to read
   818 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   819                                  wwDriveHead		equ	$						;drive, head (word)
   820 000001F6 00                      wbDrive			db	0						;drive
   821 000001F7 00                      wbHead			db	0						;head
   822                                  wwSectorTrack		equ	$						;sector, track (word)
   823 000001F8 00                      			db	0						;sector
   824 000001F9 00                      wbTrack			db	0						;track
   825 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   826 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   827                                  %endif
   828                                  %ifdef BUILDPREP
   829                                  ;-----------------------------------------------------------------------------------------------------------------------
   830                                  ;
   831                                  ;	Diskette Preparation Code
   832                                  ;
   833                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   834                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   835                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838                                  ;
   839                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   840                                  ;
   841 00000200 BE[CA02]                Prep			mov	si,czPrepMsg10					;starting message address
   842 00000203 E89FFF                  			call	BootPrint					;display message
   843                                  ;
   844                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   845                                  ;
   846 00000206 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   847 00000208 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   848 0000020A 7504                    			jnz	.12						;continue if key pressed
   849 0000020C FB                      			sti							;enable interrupts
   850 0000020D F4                      			hlt							;wait for interrupt
   851 0000020E EBF6                    			jmp	.10						;repeat
   852 00000210 3C0D                    .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   853 00000212 7407                    			je	.15						;yes, branch
   854 00000214 3C1B                    			cmp	al,EASCIIESCAPE					;Escape key pressed?
   855 00000216 75EE                    			jne	.10						;no, repeat
   856 00000218 E9A900                  			jmp	.90						;yes, exit program
   857                                  ;
   858                                  ;	Display writing-sector message and patch the JMP instruction.
   859                                  ;
   860 0000021B BE[6E04]                .15			mov	si,czPrepMsg12					;writing-sector message address
   861 0000021E E884FF                  			call	BootPrint					;display message
   862 00000221 BB[0100]                			mov	bx,Boot+1					;address of JMP instruction operand
   863 00000224 B81B00                  			mov	ax,01Bh						;address past disk parameter table
   864 00000227 8907                    			mov	[bx],ax						;update the JMP instruction
   865                                  ;
   866                                  ;	Try to read the boot sector.
   867                                  ;
   868 00000229 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   869 0000022C 51                      .20			push	cx						;save remaining tries
   870 0000022D BB[760A]                			mov	bx,wcPrepInBuf					;input buffer address
   871 00000230 BA0000                  			mov	dx,0						;head zero, drive zero
   872 00000233 B90100                  			mov	cx,1						;track zero, sector one
   873 00000236 B80102                  			mov	ax,0201h					;read one sector
   874 00000239 CD13                    			int	EBIOSINTDISKETTE				;attempt the read
   875 0000023B 59                      			pop	cx						;restore remaining retries
   876 0000023C 7307                    			jnc	.30						;skip ahead if successful
   877 0000023E E2EC                    			loop	.20						;try again
   878 00000240 BE[9E04]                			mov	si,czPrepMsg20					;read-error message address
   879 00000243 EB2C                    			jmp	.50						;branch to error routine
   880                                  ;
   881                                  ;	Copy diskette parms from input buffer to output buffer.
   882                                  ;
   883 00000245 BE[760A]                .30			mov	si,wcPrepInBuf					;input buffer address
   884 00000248 83C60B                  			add	si,11						;skip over JMP and system ID
   885 0000024B BF[0000]                			mov	di,Boot						;output buffer address
   886 0000024E 83C70B                  			add	di,11						;skip over JMP and system ID
   887 00000251 B91300                  			mov	cx,19						;length of diskette parameters
   888 00000254 FC                      			cld							;forward string copies
   889 00000255 F3A4                    			rep	movsb						;copy diskette parameters
   890                                  ;
   891                                  ;	Try to write boot sector to diskette.
   892                                  ;
   893 00000257 B90500                  			mov	cx,EMAXTRIES					;try up to five times
   894 0000025A 51                      .40			push	cx						;save remaining tries
   895 0000025B BB[0000]                			mov	bx,Boot						;output buffer address
   896 0000025E BA0000                  			mov	dx,0						;head zero, drive zero
   897 00000261 B90100                  			mov	cx,1						;track zero, sector one
   898 00000264 B80103                  			mov	ax,0301h					;write one sector
   899 00000267 CD13                    			int	EBIOSINTDISKETTE				;attempt the write
   900 00000269 59                      			pop	cx						;restore remaining retries
   901 0000026A 7326                    			jnc	.80						;skip ahead if successful
   902 0000026C E2EC                    			loop	.40						;try again
   903 0000026E BE[EC04]                			mov	si,czPrepMsg30					;write-error message address
   904                                  ;
   905                                  ;	Convert the error code to ASCII and display the error message.
   906                                  ;
   907 00000271 50                      .50			push	ax						;save error code
   908 00000272 88E0                    			mov	al,ah						;copy error code
   909 00000274 B400                    			mov	ah,0						;AX = error code
   910 00000276 B210                    			mov	dl,10h						;hexadecimal divisor
   911 00000278 F6FA                    			idiv	dl						;AL = hi-order, AH = lo-order
   912 0000027A 0D3030                  			or	ax,3030h					;add ASCII zone digits
   913 0000027D 80FC3A                  			cmp	ah,3Ah						;AH ASCII numeral?
   914 00000280 7203                    			jb	.60						;yes, continue
   915 00000282 80C407                  			add	ah,7						;no, make ASCII 'A'-'F'
   916 00000285 3C3A                    .60			cmp	al,3Ah						;al ASCII numeral?
   917 00000287 7202                    			jb	.70						;yes, continue
   918 00000289 0407                    			add	al,7						;no, make ASCII
   919 0000028B 894411                  .70			mov	[si+17],ax					;put ASCII error code in message
   920 0000028E E814FF                  			call	BootPrint					;write error message
   921 00000291 58                      			pop	ax						;restore error code
   922                                  ;
   923                                  ;	Display the completion message.
   924                                  ;
   925 00000292 BE[3805]                .80			mov	si,czPrepMsgOK					;assume successful completion
   926 00000295 88E0                    			mov	al,ah						;BIOS return code
   927 00000297 3C00                    			cmp	al,0						;success?
   928 00000299 7426                    			je	.85						;yes, continue
   929 0000029B BE[D705]                			mov	si,czPrepMsgErr1				;disk parameter error message
   930 0000029E 3C01                    			cmp	al,1						;disk parameter error?
   931 000002A0 741F                    			je	.85						;yes, continue
   932 000002A2 BE[A106]                			mov	si,czPrepMsgErr2				;address mark not found message
   933 000002A5 3C02                    			cmp	al,2						;address mark not found?
   934 000002A7 7418                    			je	.85						;yes, continue
   935 000002A9 BE[2A07]                			mov	si,czPrepMsgErr3				;protected disk message
   936 000002AC 3C03                    			cmp	al,3						;protected disk?
   937 000002AE 7411                    			je	.85						;yes, continue
   938 000002B0 BE[E407]                			mov	si,czPrepMsgErr6				;diskette removed message
   939 000002B3 3C06                    			cmp	al,6						;diskette removed?
   940 000002B5 740A                    			je	.85						;yes, continue
   941 000002B7 BE[1409]                			mov	si,czPrepMsgErr80				;drive timed out message
   942 000002BA 3C80                    			cmp	al,80H						;drive timed out?
   943 000002BC 7403                    			je	.85						;yes, continue
   944 000002BE BE[C509]                			mov	si,czPrepMsgErrXX				;unknown error message
   945 000002C1 E8E1FE                  .85			call	BootPrint					;display result message
   946 000002C4 B8004C                  .90			mov	ax,4C00H					;terminate with zero result code
   947 000002C7 CD21                    			int	21h						;terminate DOS program
   948 000002C9 C3                      			ret							;return (should not execute)
   949                                  ;-----------------------------------------------------------------------------------------------------------------------
   950                                  ;
   951                                  ;	Diskette Preparation Messages
   952                                  ;
   953                                  ;-----------------------------------------------------------------------------------------------------------------------
   954 000002CA 0D0A437573746F6D4F-     czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   954 000002D3 5320426F6F742D4469-
   954 000002DC 736B65747465205072-
   954 000002E5 657061726174696F6E-
   954 000002EE 2050726F6772616D   
   955 000002F6 0D0A436F7079726967-     			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   955 000002FF 687420284329203230-
   955 00000308 31302D323031372044-
   955 00000311 61766964204A2E2057-
   955 0000031A 616C6C696E672E2041-
   955 00000323 6C6C20726967687473-
   955 0000032C 207265736572766564-
   955 00000335 2E                 
   956 00000336 0D0A                    			db	13,10
   957 00000338 0D0A54686973207072-     			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   957 00000341 6F6772616D206F7665-
   957 0000034A 727772697465732074-
   957 00000353 686520626F6F742073-
   957 0000035C 6563746F72206F6620-
   957 00000365 61206469736B657474-
   957 0000036E 652077697468207374-
   957 00000377 617274757020636F64-
   957 00000380 652074686174       
   958 00000386 0D0A77696C6C206C6F-     			db	13,10,"will load the operating system into memory when the computer is restarted."
   958 0000038F 616420746865206F70-
   958 00000398 65726174696E672073-
   958 000003A1 797374656D20696E74-
   958 000003AA 6F206D656D6F727920-
   958 000003B3 7768656E2074686520-
   958 000003BC 636F6D707574657220-
   958 000003C5 697320726573746172-
   958 000003CE 7465642E           
   959 000003D2 0D0A546F2070726F63-     			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   959 000003DB 6565642C20706C6163-
   959 000003E4 65206120666F726D61-
   959 000003ED 74746564206469736B-
   959 000003F6 6574746520696E746F-
   959 000003FF 20647269766520413A-
   959 00000408 20616E642070726573-
   959 00000411 732074686520456E74-
   959 0000041A 6572206B65792E     
   960 00000421 0D0A546F2065786974-     			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   960 0000042A 20746869732070726F-
   960 00000433 6772616D2077697468-
   960 0000043C 6F7574207072657061-
   960 00000445 72696E672061206469-
   960 0000044E 736B657474652C2070-
   960 00000457 726573732074686520-
   960 00000460 457363617065206B65-
   960 00000469 792E               
   961 0000046B 0D0A00                  			db	13,10,0
   962 0000046E 0D0A57726974696E67-     czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   962 00000477 2074686520626F6F74-
   962 00000480 20736563746F722074-
   962 00000489 6F2074686520646973-
   962 00000492 6B65747465202E2E2E 
   963 0000049B 0D0A00                  			db	13,10,0
   964 0000049E 0D0A54686520657272-     czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   964 000004A7 6F722D636F6465202E-
   964 000004B0 2E2077617320726574-
   964 000004B9 75726E65642066726F-
   964 000004C2 6D207468652042494F-
   964 000004CB 53207768696C652072-
   964 000004D4 656164696E67206672-
   964 000004DD 6F6D20746865206469-
   964 000004E6 736B2E             
   965 000004E9 0D0A00                  			db	13,10,0
   966 000004EC 0D0A54686520657272-     czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   966 000004F5 6F722D636F6465202E-
   966 000004FE 2E2077617320726574-
   966 00000507 75726E65642066726F-
   966 00000510 6D207468652042494F-
   966 00000519 53207768696C652077-
   966 00000522 726974696E6720746F-
   966 0000052B 20746865206469736B-
   966 00000534 2E                 
   967 00000535 0D0A00                  			db	13,10,0
   968 00000538 0D0A54686520626F6F-     czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   968 00000541 742D736563746F7220-
   968 0000054A 776173207772697474-
   968 00000553 656E20746F20746865-
   968 0000055C 206469736B65747465-
   968 00000565 2E204265666F726520-
   968 0000056E 626F6F74696E672079-
   968 00000577 6F757220636F6D7075-
   968 00000580 7465722077697468   
   969 00000588 0D0A74686973206469-     			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   969 00000591 736B657474652C206D-
   969 0000059A 616B65207375726520-
   969 000005A3 746861742074686520-
   969 000005AC 66696C65204F532E43-
   969 000005B5 4F4D20697320636F70-
   969 000005BE 696564206F6E746F20-
   969 000005C7 746865206469736B65-
   969 000005D0 7474652E           
   970 000005D4 0D0A00                  			db	13,10,0
   971 000005D7 0D0A2830312920496E-     czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   971 000005E0 76616C696420446973-
   971 000005E9 6B20506172616D6574-
   971 000005F2 6572               
   972 000005F4 0D0A54686973206973-     			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   972 000005FD 20616E20696E746572-
   972 00000606 6E616C206572726F72-
   972 0000060F 206361757365642062-
   972 00000618 7920616E20696E7661-
   972 00000621 6C69642076616C7565-
   972 0000062A 206265696E67207061-
   972 00000633 7373656420746F2061-
   972 0000063C 2073797374656D     
   973 00000643 0D0A66756E6374696F-     			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   973 0000064C 6E2E20546865204F53-
   973 00000655 424F4F542E434F4D20-
   973 0000065E 66696C65206D617920-
   973 00000667 626520636F72727570-
   973 00000670 742E20436F7079206F-
   973 00000679 7220646F776E6C6F61-
   973 00000682 64207468652066696C-
   973 0000068B 6520616761696E     
   974 00000692 0D0A616E6420726574-     			db	13,10,"and retry."
   974 0000069B 72792E             
   975 0000069E 0D0A00                  			db	13,10,0
   976 000006A1 0D0A28303229204164-     czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   976 000006AA 6472657373204D6172-
   976 000006B3 6B204E6F7420466F75-
   976 000006BC 6E64               
   977 000006BE 0D0A54686973206572-     			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   977 000006C7 726F7220696E646963-
   977 000006D0 617465732061207068-
   977 000006D9 79736963616C207072-
   977 000006E2 6F626C656D20776974-
   977 000006EB 682074686520666C6F-
   977 000006F4 707079206469736B65-
   977 000006FD 7474652E20506C6561-
   977 00000706 7365207265747279   
   978 0000070E 0D0A7573696E672061-     			db	13,10,"using another diskette."
   978 00000717 6E6F74686572206469-
   978 00000720 736B657474652E     
   979 00000727 0D0A00                  			db	13,10,0
   980 0000072A 0D0A28303329205072-     czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   980 00000733 6F7465637465642044-
   980 0000073C 69736B             
   981 0000073F 0D0A54686973206572-     			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   981 00000748 726F72206973207573-
   981 00000751 75616C6C7920636175-
   981 0000075A 736564206279206174-
   981 00000763 74656D7074696E6720-
   981 0000076C 746F20777269746520-
   981 00000775 746F20612077726974-
   981 0000077E 652D70726F74656374-
   981 00000787 6564206469736B2E   
   982 0000078F 0D0A436865636B2074-     			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   982 00000798 686520277772697465-
   982 000007A1 2D70726F7465637427-
   982 000007AA 2073657474696E6720-
   982 000007B3 6F6E20746865206469-
   982 000007BC 736B206F7220726574-
   982 000007C5 7279207573696E6720-
   982 000007CE 7573696E6720616E6F-
   982 000007D7 74686572206469736B-
   982 000007E0 2E                 
   983 000007E1 0D0A00                  			db	13,10,0
   984 000007E4 0D0A28303629204469-     czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   984 000007ED 736B65747465205265-
   984 000007F6 6D6F766564         
   985 000007FB 0D0A54686973206572-     			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   985 00000804 726F72206D61792069-
   985 0000080D 6E6469636174652074-
   985 00000816 686174207468652066-
   985 0000081F 6C6F70707920646973-
   985 00000828 6B6574746520686173-
   985 00000831 206265656E2072656D-
   985 0000083A 6F7665642066726F6D-
   985 00000843 20746865           
   986 00000847 0D0A6469736B657474-     			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   986 00000850 652064726976652E20-
   986 00000859 4F6E20736F6D652073-
   986 00000862 797374656D732C2074-
   986 0000086B 68697320636F646520-
   986 00000874 6D617920616C736F20-
   986 0000087D 6F6363757220696620-
   986 00000886 746865206469736B65-
   986 0000088F 747465206973       
   987 00000895 0D0A27777269746520-     			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   987 0000089E 70726F746563746564-
   987 000008A7 2E2720506C65617365-
   987 000008B0 207665726966792074-
   987 000008B9 686174207468652064-
   987 000008C2 69736B657474652069-
   987 000008CB 73206E6F7420777269-
   987 000008D4 74652D70726F746563-
   987 000008DD 74656420616E64     
   988 000008E4 0D0A69732070726F70-     			db	13,10,"is properly inserted in the diskette drive."
   988 000008ED 65726C7920696E7365-
   988 000008F6 7274656420696E2074-
   988 000008FF 6865206469736B6574-
   988 00000908 74652064726976652E 
   989 00000911 0D0A00                  			db	13,10,0
   990 00000914 0D0A28383029204472-     czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   990 0000091D 6976652054696D6564-
   990 00000926 204F7574           
   991 0000092A 0D0A54686973206572-     			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   991 00000933 726F7220757375616C-
   991 0000093C 6C7920696E64696361-
   991 00000945 746573207468617420-
   991 0000094E 6E6F206469736B6574-
   991 00000957 746520697320696E20-
   991 00000960 746865206469736B65-
   991 00000969 747465206472697665-
   991 00000972 2E20506C65617365   
   992 0000097A 0D0A6D616B65207375-     			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   992 00000983 726520746861742074-
   992 0000098C 6865206469736B6574-
   992 00000995 74652069732070726F-
   992 0000099E 7065726C7920736561-
   992 000009A7 74656420696E207468-
   992 000009B0 652064726976652061-
   992 000009B9 6E642072657472792E 
   993 000009C2 0D0A00                  			db	13,10,0
   994 000009C5 0D0A283F3F2920556E-     czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   994 000009CE 6B6E6F776E20457272-
   994 000009D7 6F72               
   995 000009D9 0D0A54686520657272-     			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   995 000009E2 6F722D636F64652072-
   995 000009EB 657475726E65642062-
   995 000009F4 79207468652042494F-
   995 000009FD 53206973206E6F7420-
   995 00000A06 61207265636F676E69-
   995 00000A0F 7A6564206572726F72-
   995 00000A18 2E20506C6561736520-
   995 00000A21 636F6E73756C74     
   996 00000A28 0D0A796F757220636F-     			db	13,10,"your computer's technical reference for a description of this error code."
   996 00000A31 6D7075746572277320-
   996 00000A3A 746563686E6963616C-
   996 00000A43 207265666572656E63-
   996 00000A4C 6520666F7220612064-
   996 00000A55 65736372697074696F-
   996 00000A5E 6E206F662074686973-
   996 00000A67 206572726F7220636F-
   996 00000A70 64652E             
   997 00000A73 0D0A00                  			db	13,10,0
   998                                  wcPrepInBuf		equ	$
   999                                  %endif
  1000                                  %ifdef BUILDDISK
  1001                                  ;-----------------------------------------------------------------------------------------------------------------------
  1002                                  ;
  1003                                  ;	File Allocation Tables
  1004                                  ;
  1005                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1006                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1007                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1008                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1009                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1010                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1011                                  ;	the last cluster in the chain.
  1012                                  ;
  1013                                  ;	Every three bytes encode two FAT entries as follows:
  1014                                  ;
  1015                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1016                                  ;
  1017                                  ;-----------------------------------------------------------------------------------------------------------------------
  1018                                  ;-----------------------------------------------------------------------------------------------------------------------
  1019                                  ;
  1020                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1021                                  ;
  1022                                  ;-----------------------------------------------------------------------------------------------------------------------
  1023                                  section			fat1							;first copy of FAT
  1024                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1025                                  			db	005h,060h,000h,	007h,080h,000h
  1026                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1027                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1028                                  			db	011h,020h,001h,	013h,040h,001h
  1029                                  			db	015h,060h,001h,	017h,080h,001h
  1030                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1031                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1032                                  			db	021h,020h,002h,	023h,040h,002h
  1033                                  			db	025h,060h,002h,	027h,080h,002h
  1034                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1035                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1036                                  ;-----------------------------------------------------------------------------------------------------------------------
  1037                                  ;
  1038                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1039                                  ;
  1040                                  ;-----------------------------------------------------------------------------------------------------------------------
  1041                                  section			fat2							;second copy of FAT
  1042                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1043                                  			db	005h,060h,000h,	007h,080h,000h
  1044                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1045                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1046                                  			db	011h,020h,001h,	013h,040h,001h
  1047                                  			db	015h,060h,001h,	017h,080h,001h
  1048                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1049                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1050                                  			db	021h,020h,002h,	023h,040h,002h
  1051                                  			db	025h,060h,002h,	027h,080h,002h
  1052                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1053                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1054                                  ;-----------------------------------------------------------------------------------------------------------------------
  1055                                  ;
  1056                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1057                                  ;
  1058                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1059                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1060                                  ;	copy.
  1061                                  ;
  1062                                  ;-----------------------------------------------------------------------------------------------------------------------
  1063                                  section			dir							;diskette directory
  1064                                  			db	"OS      COM"					;file name (must contain spaces)
  1065                                  			db	20h						;attribute (archive bit set)
  1066                                  			times	10 db 0;					;unused
  1067                                  			dw	0h						;time
  1068                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1069                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1070                                  			dw	2						;first cluster
  1071                                  			dd	5200h						;file size
  1072                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1073                                  %endif
  1074                                  %ifdef BUILDCOM
  1075                                  ;-----------------------------------------------------------------------------------------------------------------------
  1076                                  ;
  1077                                  ;	OS.COM
  1078                                  ;
  1079                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1080                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1081                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1082                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1083                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1084                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1085                                  ;
  1086                                  ;	Our loader addressability is set up according to the following diagram.
  1087                                  ;
  1088                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1089                                  ;				|  Boot Sector & Loader Stack Area		|
  1090                                  ;				|						|
  1091                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1092                                  ;
  1093                                  ;
  1094                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1095                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1096                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1097                                  ;				|  Loader Code					|
  1098                                  ;				|						|
  1099                                  ;			009300	+-----------------------------------------------+ CS:0200
  1100                                  ;
  1101                                  ;-----------------------------------------------------------------------------------------------------------------------
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                  ;
  1104                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1105                                  ;
  1106                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1107                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1108                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1109                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1110                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1111                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1112                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1113                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1114                                  ;	registers.
  1115                                  ;
  1116                                  ;-----------------------------------------------------------------------------------------------------------------------
  1117                                  			cpu	8086						;assume minimal CPU
  1118                                  section			loader	vstart=100h					;use .COM compatible addressing
  1119                                  			bits	16						;this is 16-bit code
  1120                                  Loader			push	cs						;use the code segment
  1121                                  			pop	ds						;...as our data segment
  1122                                  			push	cs						;use the code segment
  1123                                  			pop	es						;...as our extra segment
  1124                                  ;
  1125                                  ;	Write a message to the console so we know we have our addressability established.
  1126                                  ;
  1127                                  			mov	si,czStartingMsg				;starting message
  1128                                  			call	PutTTYString					;display loader message
  1129                                  ;
  1130                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1131                                  ;
  1132                                  			call	GetCPUType					;AL = cpu type
  1133                                  			mov	si,czCPUErrorMsg				;loader error message
  1134                                  			cmp	al,3						;80386+?
  1135                                  			jb	LoaderExit					;no, exit with error message
  1136                                  			cpu	386						;allow 80386 instructions
  1137                                  			mov	si,czCPUOKMsg					;cpu ok message
  1138                                  			call	PutTTYString					;display message
  1139                                  ;
  1140                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1141                                  ;
  1142                                  			mov	si,300h						;GDT offset
  1143                                  			mov	ax,cs						;AX:SI = gdt source
  1144                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1145                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1146                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1147                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1148                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1149                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1150                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1151                                  			call	PutTTYString					;display message
  1152                                  ;
  1153                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1154                                  ;
  1155                                  			push	EKRNSEG						;use kernel segment ...
  1156                                  			pop	es						;... as target segment
  1157                                  			xor	di,di						;ES:DI = target address
  1158                                  			mov	si,300h						;DS:SI = source address
  1159                                  			mov	cx,5000h					;CX = kernel size
  1160                                  			cld							;forward strings
  1161                                  			rep	movsb						;copy kernel image
  1162                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1163                                  			call	PutTTYString					;display message
  1164                                  ;
  1165                                  ;	Switch to protected mode.
  1166                                  ;
  1167                                  			xor	si,si						;ES:SI = gdt addr
  1168                                  			mov	ss,si						;protected mode ss
  1169                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1170                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1171                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1172                                  			mov	dx,001Fh					;outer delay loop count
  1173                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1174                                  			loop	$						;wait out pending interrupts
  1175                                  			dec	dx						;restore outer loop count
  1176                                  			jnz	.10						;continue outer loop
  1177                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1178                                  ;
  1179                                  ;	Enable hardware and maskable interrupts
  1180                                  ;
  1181                                  			xor	al,al						;enable all registers code
  1182                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1183                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1184                                  			sti							;enable maskable interrupts
  1185                                  ;
  1186                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1187                                  ;
  1188                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1189                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1190                                  			jmp	0058h:0						;jump to task state segment selector
  1191                                  ;-----------------------------------------------------------------------------------------------------------------------
  1192                                  ;
  1193                                  ;	Routine:	LoaderExit
  1194                                  ;
  1195                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1196                                  ;
  1197                                  ;	In:		DS:SI	string address
  1198                                  ;
  1199                                  ;-----------------------------------------------------------------------------------------------------------------------
  1200                                  LoaderExit		call	PutTTYString					;display error message
  1201                                  ;
  1202                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1203                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1204                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1205                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1206                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1207                                  ;
  1208                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1209                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1210                                  			jnz	.40						;exit if key pressed
  1211                                  			sti							;enable maskable interrupts
  1212                                  			hlt							;wait for interrupt
  1213                                  			jmp	.30						;repeat until keypress
  1214                                  ;
  1215                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1216                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1217                                  ;	HLT until the system resets.
  1218                                  ;
  1219                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1220                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1221                                  .50			sti							;enable maskable interrupts
  1222                                  			hlt							;stop until reset, int, nmi
  1223                                  			jmp	.50						;loop until restart kicks in
  1224                                  ;-----------------------------------------------------------------------------------------------------------------------
  1225                                  ;
  1226                                  ;	Routine:	GetCPUType
  1227                                  ;
  1228                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1229                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1230                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1231                                  ;
  1232                                  ;	Output:		AX	0 = 808x, v20, etc.
  1233                                  ;				1 = 80186
  1234                                  ;				2 = 80286
  1235                                  ;				3 = 80386
  1236                                  ;
  1237                                  ;-----------------------------------------------------------------------------------------------------------------------
  1238                                  GetCPUType		mov	al,1						;AL = 1
  1239                                  			mov	cl,32						;shift count
  1240                                  			shr	al,cl						;try a 32-bit shift
  1241                                  			or	al,al						;did the shift happen?
  1242                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1243                                  			cpu	186
  1244                                  			push	sp						;save stack pointer
  1245                                  			pop	cx						;...into cx
  1246                                  			cmp	cx,sp						;did sp decrement before push?
  1247                                  			jne	.10						;yes, cpu is 80186
  1248                                  			cpu	286
  1249                                  			inc	ax						;AX = 2
  1250                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1251                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1252                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1253                                  			jz	.10						;yes, cpu is 80286
  1254                                  			inc	ax						;AX = 3
  1255                                  .10			ret							;return to caller
  1256                                  ;-----------------------------------------------------------------------------------------------------------------------
  1257                                  ;
  1258                                  ;	Routine:	PutTTYString
  1259                                  ;
  1260                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1261                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1262                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1263                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1264                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1265                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1266                                  ;			registers and flags unless used to indicate return status.
  1267                                  ;
  1268                                  ;	In:		DS:SI	address of string
  1269                                  ;
  1270                                  ;-----------------------------------------------------------------------------------------------------------------------
  1271                                  PutTTYString		cld							;forward strings
  1272                                  			lodsb							;load next byte at DS:SI in AL
  1273                                  			test	al,al						;end of string?
  1274                                  			jz	.10						;... yes, exit our loop
  1275                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1276                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1277                                  			jmp	PutTTYString					;repeat until done
  1278                                  .10			ret							;return to caller
  1279                                  ;-----------------------------------------------------------------------------------------------------------------------
  1280                                  ;
  1281                                  ;	Loader Data
  1282                                  ;
  1283                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1284                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1285                                  ;
  1286                                  ;-----------------------------------------------------------------------------------------------------------------------
  1287                                  			align	2
  1288                                  cwLoaderTSS		dw	0068h						;TSS selector
  1289                                  cwLoaderLDT		dw	0060h						;LDT selector
  1290                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1291                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1292                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1293                                  			db	"or later processor.",13,10,
  1294                                  			db	"Please press any key to restart the "
  1295                                  			db	"computer.",13,10,0
  1296                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1297                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1298                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1299                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1300                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1301                                  			db	055h,0AAh					;end of sector signature
  1302                                  ;-----------------------------------------------------------------------------------------------------------------------
  1303                                  ;
  1304                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1305                                  ;
  1306                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1307                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1308                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1309                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1310                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1311                                  ;
  1312                                  ;-----------------------------------------------------------------------------------------------------------------------
  1313                                  ;-----------------------------------------------------------------------------------------------------------------------
  1314                                  ;
  1315                                  ;	Tables
  1316                                  ;
  1317                                  ;-----------------------------------------------------------------------------------------------------------------------
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1321                                  ;
  1322                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1323                                  ;	first descriptor must be all nulls.
  1324                                  ;
  1325                                  ;	6   5         4         3         2         1         0
  1326                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1327                                  ;	----------------------------------------------------------------
  1328                                  ;	h......hffffmmmma......ab......................bn..............n
  1329                                  ;	00000000			all areas have base addresses below 2^24
  1330                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1331                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1332                                  ;	            1001		present, ring-0, selector
  1333                                  ;
  1334                                  ;	h...h	hi-order base address (bits 24-31)
  1335                                  ;	ffff	flags
  1336                                  ;	mmmm	hi-order limit (bits 16-19)
  1337                                  ;	a...a	access
  1338                                  ;	b...b	lo-order base address (bits 0-23)
  1339                                  ;	n...n	lo-order limit (bits 0-15)
  1340                                  ;
  1341                                  ;-----------------------------------------------------------------------------------------------------------------------
  1342                                  section			gdt							;global descriptor table
  1343                                  			dq	0000000000000000h				;00 required null selector
  1344                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1345                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1346                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1347                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1348                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1349                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1350                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1351                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1352                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1353                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1354                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1355                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1356                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1357                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1358                                  ;-----------------------------------------------------------------------------------------------------------------------
  1359                                  ;
  1360                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1361                                  ;
  1362                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1363                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1364                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1365                                  ;
  1366                                  ;	6   5         4         3         2         1         0
  1367                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1368                                  ;	----------------------------------------------------------------
  1369                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1370                                  ;
  1371                                  ;	h...h	high-order offset (bits 16-31)
  1372                                  ;	P	present (0=unused interrupt)
  1373                                  ;	zz	descriptor privilege level
  1374                                  ;	S	storage segment (must be zero for IDT)
  1375                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1376                                  ;	S...S	handling code selector in GDT
  1377                                  ;	l...l	lo-order offset (bits 0-15)
  1378                                  ;
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  section			idt							;interrupt descriptor table
  1381                                  			mint	dividebyzero					;00 divide by zero
  1382                                  			mint	singlestep					;01 single step
  1383                                  			mint	nmi						;02 non-maskable
  1384                                  			mint	break						;03 break
  1385                                  			mint	into						;04 into
  1386                                  			mint	bounds						;05 bounds
  1387                                  			mint	badopcode					;06 bad op code
  1388                                  			mint	nocoproc					;07 no coprocessor
  1389                                  			mint	doublefault					;08 double-fault
  1390                                  			mint	operand						;09 operand
  1391                                  			mint	badtss						;0A bad TSS
  1392                                  			mint	notpresent					;0B not-present
  1393                                  			mint	stacklimit					;0C stack limit
  1394                                  			mint	protection					;0D general protection fault
  1395                                  			mint	int14						;0E (reserved)
  1396                                  			mint	int15						;0F (reserved)
  1397                                  			mint	coproccalc					;10 (reserved)
  1398                                  			mint	int17						;11 (reserved)
  1399                                  			mint	int18						;12 (reserved)
  1400                                  			mint	int19						;13 (reserved)
  1401                                  			mint	int20						;14 (reserved)
  1402                                  			mint	int21						;15 (reserved)
  1403                                  			mint	int22						;16 (reserved)
  1404                                  			mint	int23						;17 (reserved)
  1405                                  			mint	int24						;18 (reserved)
  1406                                  			mint	int25						;19 (reserved)
  1407                                  			mint	int26						;1A (reserved)
  1408                                  			mint	int27						;1B (reserved)
  1409                                  			mint	int28						;1C (reserved)
  1410                                  			mint	int29						;1D (reserved)
  1411                                  			mint	int30						;1E (reserved)
  1412                                  			mint	int31						;1F (reserved)
  1413                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1414                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1415                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1416                                  			mtrap	com2						;23 IRQ3 com2
  1417                                  			mtrap	com1						;24 IRQ4 com1
  1418                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1419                                  			mtrap	diskette					;26 IRQ6 diskette
  1420                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1421                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1422                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1423                                  			mtrap	irq10						;2A IRQA (reserved)
  1424                                  			mtrap	irq11						;2B IRQB (reserved)
  1425                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1426                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1427                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1428                                  			mtrap	irq15						;2F IRQF (reserved)
  1429                                  			mtrap	svc						;30 OS services
  1430                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1431                                  ;-----------------------------------------------------------------------------------------------------------------------
  1432                                  ;
  1433                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1434                                  ;
  1435                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1436                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1437                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1438                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1439                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1440                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1441                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1442                                  ;
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  section			kernel	vstart=0h					;data offsets relative to 0
  1445                                  			cpu	386						;allow 80386 instructions
  1446                                  			bits	32						;this is 32-bit code
  1447                                  ;-----------------------------------------------------------------------------------------------------------------------
  1448                                  ;
  1449                                  ;	CPU Interrupt Handlers
  1450                                  ;
  1451                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1452                                  ;
  1453                                  ;-----------------------------------------------------------------------------------------------------------------------
  1454                                  			menter	dividebyzero					;divide by zero
  1455                                  			push	0						;
  1456                                  			jmp	intcpu						;
  1457                                  
  1458                                  			menter	singlestep					;single step
  1459                                  			push	1						;
  1460                                  			jmp	intcpu						;
  1461                                  
  1462                                  			menter	nmi						;non-maskable
  1463                                  			push	2						;
  1464                                  			jmp	intcpu						;
  1465                                  
  1466                                  			menter	break						;break
  1467                                  			push	3						;
  1468                                  			jmp	intcpu						;
  1469                                  
  1470                                  			menter	into						;into
  1471                                  			push	4						;
  1472                                  			jmp	intcpu						;
  1473                                  
  1474                                  			menter	bounds						;bounds
  1475                                  			push	5						;
  1476                                  			jmp	intcpu						;
  1477                                  
  1478                                  			menter	badopcode					;bad opcode interrupt
  1479                                  			push	6						;
  1480                                  			jmp	intcpu						;
  1481                                  
  1482                                  			menter	nocoproc					;no coprocessor interrupt
  1483                                  			push	7						;
  1484                                  			jmp	intcpu						;
  1485                                  
  1486                                  			menter	doublefault					;doublefault interrupt
  1487                                  			push	8						;
  1488                                  			jmp	intcpu						;
  1489                                  
  1490                                  			menter	operand						;operand interrupt
  1491                                  			push	9						;
  1492                                  			jmp	intcpu						;
  1493                                  
  1494                                  			menter	badtss						;bad tss interrupt
  1495                                  			push	10						;
  1496                                  			jmp	intcpu						;
  1497                                  
  1498                                  			menter	notpresent					;not present interrupt
  1499                                  			push	11						;
  1500                                  			jmp	intcpu						;
  1501                                  
  1502                                  			menter	stacklimit					;stack limit interrupt
  1503                                  			push	12						;
  1504                                  			jmp	intcpu						;
  1505                                  
  1506                                  			menter	protection					;protection fault interrupt
  1507                                  			push	13						;
  1508                                  			jmp	intcpu						;
  1509                                  
  1510                                  			menter	int14						;(reserved)
  1511                                  			push	14						;
  1512                                  			jmp	intcpu						;
  1513                                  
  1514                                  			menter	int15						;(reserved)
  1515                                  			push	15						;
  1516                                  			jmp	intcpu						;
  1517                                  
  1518                                  			menter	coproccalc					;coprocessor calculation
  1519                                  			push	16						;
  1520                                  			jmp	intcpu						;
  1521                                  
  1522                                  			menter	int17						;(reserved)
  1523                                  			push	17						;
  1524                                  			jmp	intcpu						;
  1525                                  
  1526                                  			menter	int18						;(reserved)
  1527                                  			push	18						;
  1528                                  			jmp	intcpu						;
  1529                                  
  1530                                  			menter	int19						;(reserved)
  1531                                  			push	19						;
  1532                                  			jmp	intcpu						;
  1533                                  
  1534                                  			menter	int20						;(reserved)
  1535                                  			push	20						;
  1536                                  			jmp	intcpu						;
  1537                                  
  1538                                  			menter	int21						;(reserved)
  1539                                  			push	21						;
  1540                                  			jmp	intcpu						;
  1541                                  
  1542                                  			menter	int22						;(reserved)
  1543                                  			push	22						;
  1544                                  			jmp	intcpu						;
  1545                                  
  1546                                  			menter	int23						;(reserved)
  1547                                  			push	23						;
  1548                                  			jmp	intcpu						;
  1549                                  
  1550                                  			menter	int24						;(reserved)
  1551                                  			push	24						;
  1552                                  			jmp	intcpu						;
  1553                                  
  1554                                  			menter	int25						;(reserved)
  1555                                  			push	25						;
  1556                                  			jmp	intcpu						;
  1557                                  
  1558                                  			menter	int26						;(reserved)
  1559                                  			push	26						;
  1560                                  			jmp	intcpu						;
  1561                                  
  1562                                  			menter	int27						;(reserved)
  1563                                  			push	27						;
  1564                                  			jmp	intcpu						;
  1565                                  
  1566                                  			menter	int28						;(reserved)
  1567                                  			push	28						;
  1568                                  			jmp	intcpu						;
  1569                                  
  1570                                  			menter	int29						;(reserved)
  1571                                  			push	29						;
  1572                                  			jmp	intcpu						;
  1573                                  
  1574                                  			menter	int30						;(reserved)
  1575                                  			push	30						;
  1576                                  			jmp	intcpu						;
  1577                                  
  1578                                  			menter	int31						;(reserved)
  1579                                  			push	31						;
  1580                                  intcpu			pop	eax						;
  1581                                  			iretd
  1582                                  ;-----------------------------------------------------------------------------------------------------------------------
  1583                                  ;
  1584                                  ;	Hardware Device Interupts
  1585                                  ;
  1586                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1587                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1588                                  ;	(BX=2028h).
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  ;-----------------------------------------------------------------------------------------------------------------------
  1592                                  ;
  1593                                  ;	IRQ0	Clock Tick Interrupt
  1594                                  ;
  1595                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1596                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1597                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1598                                  ;
  1599                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1600                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1601                                  ;
  1602                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1603                                  ;	zero, the floppy disk motors are turned off.
  1604                                  ;
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                  			menter	clocktick					;clock tick interrupt
  1607                                  			push	eax						;save volatile regs
  1608                                  			push	edx						;
  1609                                  			push	ds						;
  1610                                  			push	ESELDAT						;load OS data selector ...
  1611                                  			pop	ds						;... into data segment register
  1612                                  
  1613                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1614                                  			inc	eax						;increment clock ticks
  1615                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1616                                  			jb	irq0.10						;no, skip ahead
  1617                                  			inc	byte [wbClockDays]				;increment clock days
  1618                                  			xor	eax,eax						;reset clock ticks
  1619                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1620                                  
  1621                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1622                                  			je	irq0.20						;yes, skip ahead
  1623                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1624                                  			jnz	irq0.20						;skip ahead if non-zero
  1625                                  
  1626                                  			sti							;enable maskable interrupts
  1627                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1628                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1629                                  			in	al,dx						;FDC main status byte
  1630                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1631                                  			jnz	irq0.15						;wait while busy
  1632                                  
  1633                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1634                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1635                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1636                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1637                                  			out	dx,al						;turn motor off
  1638                                  
  1639                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1640                                  			pop	ds						;restore volatile regs
  1641                                  			pop	edx						;
  1642                                  			pop	eax						;
  1643                                  			iretd							;return to caller
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  ;
  1646                                  ;	IRQ1	Keyboard Interrupt
  1647                                  ;
  1648                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1649                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1650                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1651                                  ;	ALL modified registers upon return.
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  			menter	keyboard					;keyboard interrrupt
  1655                                  			push	eax						;save volatile regs
  1656                                  			push	ebx						;
  1657                                  			push	ecx						;
  1658                                  			push	esi						;
  1659                                  			push	ds						;
  1660                                  			push	ESELDAT						;load OS data selector ...
  1661                                  			pop	ds						;... into data segment register
  1662                                  			xor	al,al						;zero
  1663                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1664                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1665                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1666                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1667                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1668                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1669                                  			mov	al,' '						;space
  1670                                  			mov	[wbConsoleChar],al				;set character to space
  1671                                  			mov	al,EKEYTIMEOUT					;controller timeout flag
  1672                                  			not	al						;controller timeout mask
  1673                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1674                                  			mov	bl,[wbConsoleShift]				;shift flags
  1675                                  			mov	bh,[wbConsoleLock]				;lock flags
  1676                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1677                                  			jz	irq1.140					;yes, skip ahead
  1678                                  			in	al,EKEYPORTDATA					;read scan code 0
  1679                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1680                                  			mov	ah,al						;copy scan code 0
  1681                                  			mov	al,EKEYSHIFTLEFT				;left shift flag
  1682                                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1683                                  			je	irq1.30						;yes, set flag
  1684                                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1685                                  			je	irq1.40						;yes, reset flag
  1686                                  			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1687                                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1688                                  			je	irq1.30						;yes, set flag
  1689                                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1690                                  			je	irq1.40						;yes, reset flag
  1691                                  			mov	al,EKEYCTRLLEFT					;left control flag
  1692                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1693                                  			je	irq1.30						;yes, set flag
  1694                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1695                                  			je	irq1.40						;yes, reset flag
  1696                                  			mov	al,EKEYALTLEFT					;left alt flag
  1697                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1698                                  			je	irq1.30						;yes, set flag
  1699                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1700                                  			je	irq1.40						;yes, reset flag
  1701                                  			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1702                                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1703                                  			je	irq1.50						;yes, toggle lamps and flags
  1704                                  			mov	al,EKEYLOCKNUM					;num-lock flag
  1705                                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1706                                  			je	irq1.50						;yes, toggle lamps and flags
  1707                                  			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1708                                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1709                                  			je	irq1.50						;yes, toggle lamps and flags
  1710                                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1711                                  			jne	irq1.70 					;no, skip ahead
  1712                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1713                                  			jz	irq1.140					;yes, skip ahead
  1714                                  			in	al,EKEYPORTDATA					;read scan code 1
  1715                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1716                                  			mov	ah,al						;copy scan code 1
  1717                                  			mov	al,EKEYCTRLRIGHT				;right control flag
  1718                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1719                                  			je	irq1.30						;yes, set flag
  1720                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1721                                  			je	irq1.40						;yes, reset flag
  1722                                  			mov	al,EKEYALTRIGHT					;right alt flag
  1723                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1724                                  			je	irq1.30						;yes, set flag
  1725                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1726                                  			je	irq1.40						;yes, reset flag
  1727                                  			cmp	ah,EKEYSLASH					;slash down code?
  1728                                  			je	irq1.80						;yes, skip ahead
  1729                                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1730                                  			je	irq1.80						;yes, skip ahead
  1731                                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1732                                  			je	irq1.10						;yes, continue
  1733                                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1734                                  			jne	irq1.20						;no, skip ahead
  1735                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1736                                  			jz	irq1.140					;yes, skip ahead
  1737                                  			in	al,EKEYPORTDATA					;read scan code 2
  1738                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1739                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1740                                  			jz	irq1.140					;yes, skip ahead
  1741                                  			in	al,EKEYPORTDATA					;read scan code 3
  1742                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1743                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1744                                  irq1.30			or	bl,al						;set shift flag
  1745                                  			jmp	irq1.60						;skip ahead
  1746                                  irq1.40			not	al						;convert flag to mask
  1747                                  			and	bl,al						;reset shift flag
  1748                                  			jmp	irq1.60						;skip ahead
  1749                                  irq1.50			xor	bh,al						;toggle lock flag
  1750                                  			call	SetKeyboardLamps				;update keyboard lamps
  1751                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1752                                  			mov	[wbConsoleLock],bh				;save lock flags
  1753                                  			call	PutConsoleOIAShift				;update OIA indicators
  1754                                  			jmp	irq1.150					;finish keyboard handling
  1755                                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1756                                  			jne	irq1.80						;no continue
  1757                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1758                                  			jz	irq1.140					;yes, skip ahead
  1759                                  			in	al,EKEYPORTDATA					;read scan code 1
  1760                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1761                                  			mov	ah,al						;copy scan code 1
  1762                                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1763                                  			jne	irq1.150					;no, finish keyboard handling
  1764                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1765                                  			jz	irq1.140					;yes, skip ahead
  1766                                  			in	al,EKEYPORTDATA					;read scan code 2
  1767                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1768                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1769                                  			jz	irq1.140					;yes, skip ahead
  1770                                  			in	al,EKEYPORTDATA					;read scan code 3
  1771                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1772                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1773                                  			jz	irq1.140					;yes, skip ahead
  1774                                  			in	al,EKEYPORTDATA					;read scan code 4
  1775                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1776                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1777                                  			jz	irq1.140					;yes, skip ahead
  1778                                  			in	al,EKEYPORTDATA					;read scan code 5
  1779                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1780                                  			jmp	irq1.150					;continue
  1781                                  irq1.80			xor	al,al						;assume no ASCII translation
  1782                                  			test	ah,EKEYUP					;release code?
  1783                                  			jnz	irq1.110					;yes, skip ahead
  1784                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  1785                                  			test	bl,EKEYSHIFT					;either shift key down?
  1786                                  			jz	irq1.90						;no, skip ahead
  1787                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  1788                                  irq1.90			movzx	ecx,ah						;scan code offset
  1789                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  1790                                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1791                                  			jz	irq1.100					;no skip ahead
  1792                                  			mov	cl,al						;copy ASCII code
  1793                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1794                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1795                                  			jb	irq1.100					;yes, skip ahead
  1796                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1797                                  			ja	irq1.100					;yes, skip ahead
  1798                                  			xor	al,EASCIICASE					;switch case
  1799                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1800                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1801                                  			test	ah,EKEYUP					;release scan-code?
  1802                                  			jz	irq1.120					;no, skip ahead
  1803                                  			mov	edx,EMSGKEYUP					;key-up event
  1804                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  1805                                  			or	edx,eax						;msg id and codes
  1806                                  			xor	ecx,ecx						;null param
  1807                                  			push	eax						;save codes
  1808                                  			call	PutMessage					;put message to console
  1809                                  			pop	eax						;restore codes
  1810                                  			or	al,al						;ASCII translation?
  1811                                  			jz	irq1.130					;no, skip ahead
  1812                                  			mov	edx,EMSGKEYCHAR					;key-character event
  1813                                  			and	eax,0FFFFh					;clear high-order word
  1814                                  			or	edx,eax						;msg id and codes
  1815                                  			xor	ecx,ecx						;null param
  1816                                  			call	PutMessage					;put message to console
  1817                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  1818                                  irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1819                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  1820                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  1821                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1822                                  			pop	ds						;restore volatile regs
  1823                                  			pop	esi						;
  1824                                  			pop	ecx						;
  1825                                  			pop	ebx						;
  1826                                  			pop	eax						;
  1827                                  			iretd							;return to caller
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;	Scan-Code to ASCII Translation Tables
  1830                                  ;-----------------------------------------------------------------------------------------------------------------------
  1831                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1832                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1833                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1834                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1835                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1836                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1837                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1838                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1839                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1840                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1841                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1842                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1843                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1844                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1845                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1846                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1847                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1848                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1849                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1850                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1851                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1852                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1853                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1854                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1855                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1856                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1857                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1858                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1859                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1860                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1861                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1862                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1863                                  
  1864                                  			menter	iochannel					;secondary 8259A cascade
  1865                                  			push	eax						;
  1866                                  			jmp	hwint						;
  1867                                  
  1868                                  			menter	com2						;serial port 2 interrupt
  1869                                  			push	eax						;
  1870                                  			jmp	hwint						;
  1871                                  
  1872                                  			menter	com1						;serial port 1 interrupt
  1873                                  			push	eax						;
  1874                                  			jmp	hwint						;
  1875                                  
  1876                                  			menter	lpt2						;parallel port 2 interrupt
  1877                                  			push	eax						;
  1878                                  			jmp	hwint						;
  1879                                  
  1880                                  			menter	diskette					;floppy disk interrupt
  1881                                  			push	eax						;save non-volatile regs
  1882                                  			push	ds						;
  1883                                  			push	ESELDAT						;load OS data selector ...
  1884                                  			pop	ds						;... into DS register
  1885                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1886                                  			or	al,10000000b					;set IRQ flag
  1887                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1888                                  			sti							;enable maskable interrupts
  1889                                  			mov	al,20h						;non-specific end-of-interrupt
  1890                                  			out	20h,al						;signal end of interrupt
  1891                                  			pop	ds						;restore non-volatile regs
  1892                                  			pop	eax						;
  1893                                  			iretd							;return from interrupt
  1894                                  
  1895                                  			menter	lpt1						;parallel port 1 interrupt
  1896                                  			push	eax						;
  1897                                  			jmp	hwint						;
  1898                                  
  1899                                  			menter	rtclock						;real-time clock interrupt
  1900                                  			push	eax						;
  1901                                  			jmp	hwwint						;
  1902                                  
  1903                                  			menter	retrace						;CGA vertical retrace interrupt
  1904                                  			push	eax						;
  1905                                  			jmp	hwwint						;
  1906                                  
  1907                                  			menter	irq10						;reserved
  1908                                  			push	eax						;
  1909                                  			jmp	hwwint						;
  1910                                  
  1911                                  			menter	irq11						;reserved
  1912                                  			push	eax						;
  1913                                  			jmp	hwwint						;
  1914                                  
  1915                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1916                                  			push	eax						;
  1917                                  			jmp	hwwint						;
  1918                                  
  1919                                  			menter	coprocessor					;coprocessor interrupt
  1920                                  			push	eax						;
  1921                                  			jmp	hwwint						;
  1922                                  
  1923                                  			menter	fixeddisk					;fixed disk interrupt
  1924                                  			push	eax						;
  1925                                  			jmp	hwwint						;
  1926                                  
  1927                                  			menter	irq15						;reserved
  1928                                  			push	eax						;save volatile reg
  1929                                  ;-----------------------------------------------------------------------------------------------------------------------
  1930                                  ;
  1931                                  ;	Exit from hardware interrupt
  1932                                  ;
  1933                                  ;-----------------------------------------------------------------------------------------------------------------------
  1934                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1935                                  			jmp	hwint90						;skip ahead
  1936                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1937                                  hwint90			pop	eax						;restore volatile reg
  1938                                  			iretd							;return from interrupt
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	INT 30h Operating System Software Service Interrupt
  1942                                  ;
  1943                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1944                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1945                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1946                                  ;	the entry address of the specific function from a table.
  1947                                  ;
  1948                                  ;-----------------------------------------------------------------------------------------------------------------------
  1949                                  			menter	svc
  1950                                  			cmp	al,maxtsvc					;is our function out of range?
  1951                                  			jae	svc90						;yes, skip ahead
  1952                                  			movzx	eax,al						;function
  1953                                  			shl	eax,2						;offset into table
  1954                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  1955                                  svc90			iretd							;return from interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;	Service Request Table
  1959                                  ;
  1960                                  ;
  1961                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1962                                  ;
  1963                                  ;-----------------------------------------------------------------------------------------------------------------------
  1964                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1965                                  			tsvce	GetConsoleString				;get string input
  1966                                  			tsvce	ClearConsoleScreen				;clear console screen
  1967                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1968                                  			tsvce	LeftTrimString					;left-trim string
  1969                                  			tsvce	RightTrimString					;right-trim string
  1970                                  			tsvce	UpperCaseString					;upper-case string
  1971                                  			tsvce	CompareStrings					;compare strings
  1972                                  			tsvce	ResetSystem					;reset system using 8042 chip
  1973                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1974                                  ;-----------------------------------------------------------------------------------------------------------------------
  1975                                  ;
  1976                                  ;	Service Request Macros
  1977                                  ;
  1978                                  ;	These macros provide positional parameterization of service request calls.
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  %macro			putConsoleString 1
  1982                                  			mov	edx,%1						;EDX = string address
  1983                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1984                                  			int	_svc						;invoke OS service
  1985                                  %endmacro
  1986                                  %macro			getConsoleString 4
  1987                                  			mov	edx,%1						;EDX = buffer address
  1988                                  			mov	ecx,%2						;ECX = max characters
  1989                                  			mov	bh,%3						;BH = echo indicator
  1990                                  			mov	bl,%4						;BL = terminator
  1991                                  			mov	al,eGetConsoleString				;AL = get string fn.
  1992                                  			int	_svc						;invoke OS service
  1993                                  %endmacro
  1994                                  %macro			clearConsoleScreen 0
  1995                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  1996                                  			int	_svc						;invoke OS service
  1997                                  %endmacro
  1998                                  %macro			placeCursor 0
  1999                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2000                                  			int	_svc						;invoke OS service
  2001                                  %endmacro
  2002                                  %macro			leftTrimString 0
  2003                                  			mov	al,eLeftTrimString				;al = left trim fn.
  2004                                  			int	_svc						;invoke OS service
  2005                                  %endmacro
  2006                                  %macro			rightTrimString 0
  2007                                  			mov	al,eRightTrimString				;AL = right trim fn.
  2008                                  			int	_svc						;invoke OS service
  2009                                  %endmacro
  2010                                  %macro			upperCaseString 0
  2011                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2012                                  			int	_svc						;invoke OS service
  2013                                  %endmacro
  2014                                  %macro			compareStrings 0
  2015                                  			mov	al,eCompareStrings				;AL = compare strings fn.
  2016                                  			int	_svc						;invoke OS service
  2017                                  %endmacro
  2018                                  %macro			resetSystem 0
  2019                                  			mov	al,eResetSystem					;AL = system reset fn.
  2020                                  			int	_svc						;invoke OS service
  2021                                  %endmacro
  2022                                  ;-----------------------------------------------------------------------------------------------------------------------
  2023                                  ;
  2024                                  ;	Kernel Function Library
  2025                                  ;
  2026                                  ;-----------------------------------------------------------------------------------------------------------------------
  2027                                  ;-----------------------------------------------------------------------------------------------------------------------
  2028                                  ;
  2029                                  ;	String Helper Routines
  2030                                  ;
  2031                                  ;	LeftTrimString
  2032                                  ;	RightTrimString
  2033                                  ;	GetStringLength
  2034                                  ;	UpperCaseString
  2035                                  ;	CompareStrings
  2036                                  ;
  2037                                  ;-----------------------------------------------------------------------------------------------------------------------
  2038                                  ;-----------------------------------------------------------------------------------------------------------------------
  2039                                  ;
  2040                                  ;	Routine:	LeftTrimString
  2041                                  ;
  2042                                  ;	Description:	Trim leading blanks from a given string.
  2043                                  ;
  2044                                  ;	In:		DX:EBX	string address
  2045                                  ;
  2046                                  ;	Out:		EAX	string address
  2047                                  ;
  2048                                  ;-----------------------------------------------------------------------------------------------------------------------
  2049                                  LeftTrimString		push	esi						;save volatile regs
  2050                                  			push	edi						;
  2051                                  			push	es						;
  2052                                  			push	ds						;store data selector ...
  2053                                  			pop	es						;... in extra segment
  2054                                  			mov	esi,ebx						;string address
  2055                                  			mov	edi,ebx						;string address
  2056                                  			cld							;forward strings
  2057                                  .10			lodsb							;string char
  2058                                  			cmp	al,EASCIISPACE					;space?
  2059                                  			je	.10						;yes, repeat
  2060                                  			dec	esi						;non-space char address
  2061                                  .20			lodsb							;non-space char
  2062                                  			stosb							;store in output
  2063                                  			or	al,al						;null?
  2064                                  			jnz	.20						;repeat until done
  2065                                  			mov	eax,ebx						;string address
  2066                                  			pop	es						;restore volatile regs
  2067                                  			pop	edi						;
  2068                                  			pop	esi						;
  2069                                  			ret							;return to caller
  2070                                  ;-----------------------------------------------------------------------------------------------------------------------
  2071                                  ;
  2072                                  ;	Routine:	RightTrimString
  2073                                  ;
  2074                                  ;	Description:	Trim trailing blanks from a given string.
  2075                                  ;
  2076                                  ;	In:		DS:EBX	string address
  2077                                  ;
  2078                                  ;	Out:		EAX	string address
  2079                                  ;
  2080                                  ;-----------------------------------------------------------------------------------------------------------------------
  2081                                  RightTrimString		push	edi						;save volatile regs
  2082                                  			push	es						;
  2083                                  			push	ds						;store data selector ...
  2084                                  			pop	es						;... in extra segment
  2085                                  			call	GetStringLength					;string length in eax
  2086                                  			mov	ecx,eax						;string length
  2087                                  			jecxz	.10						;skip ahead if no length
  2088                                  			mov	edi,ebx						;string address
  2089                                  			add	edi,ecx						;null address
  2090                                  			dec	edi						;last char address
  2091                                  			std							;backward strings
  2092                                  			mov	al,EASCIISPACE					;ascii space comparator
  2093                                  			repe	scasb						;search backward for non-space
  2094                                  			cld							;forward strings
  2095                                  			mov	byte [edi+2],0					;null-terminate string
  2096                                  .10			mov	eax,ebx						;string address
  2097                                  			pop	es						;restore volatile regs
  2098                                  			pop	edi						;
  2099                                  			ret							;return to caller
  2100                                  ;-----------------------------------------------------------------------------------------------------------------------
  2101                                  ;
  2102                                  ;	Routine:	GetStringLength
  2103                                  ;
  2104                                  ;	Description:	Return count of characters in string.
  2105                                  ;
  2106                                  ;	In:		DS:EBX	string address
  2107                                  ;
  2108                                  ;	Out:		EAX	length of string
  2109                                  ;
  2110                                  ;-----------------------------------------------------------------------------------------------------------------------
  2111                                  GetStringLength		push	ecx						;save volatile regs
  2112                                  			push	esi						;
  2113                                  			xor	eax,eax						;zero length
  2114                                  			mov	ecx,ebx						;string address
  2115                                  			jecxz	.20						;exit if no address
  2116                                  			mov	esi,ebx						;string address
  2117                                  			cld							;forward strings
  2118                                  .10			lodsb							;string char
  2119                                  			or	al,al						;null?
  2120                                  			jnz	.10						;no, repeat
  2121                                  			mov	eax,esi						;after-null address
  2122                                  			dec	eax						;null address
  2123                                  			sub	eax,ecx						;length of string
  2124                                  .20			pop	esi						;restore volatile regs
  2125                                  			pop	ecx						;
  2126                                  			ret							;return to caller
  2127                                  ;-----------------------------------------------------------------------------------------------------------------------
  2128                                  ;
  2129                                  ;	Routine:	UpperCaseString
  2130                                  ;
  2131                                  ;	Description:	Uppercase string
  2132                                  ;
  2133                                  ;	In:		DS:EBX	string address
  2134                                  ;
  2135                                  ;	Out:		EAX	string address
  2136                                  ;
  2137                                  ;-----------------------------------------------------------------------------------------------------------------------
  2138                                  UpperCaseString		push	esi						;save volatile regs
  2139                                  			mov	esi,ebx						;string address
  2140                                  .10			lodsb							;string character
  2141                                  			or	al,al						;null?
  2142                                  			jz	.20						;yes, skip ahead
  2143                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2144                                  			jb	.10						;no, continue
  2145                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2146                                  			ja	.10						;no, continue
  2147                                  			and	al,EASCIICASEMASK				;mask for upper case
  2148                                  			mov	[esi-1],al					;upper character
  2149                                  			jmp	.10						;continue
  2150                                  .20			mov	eax,ebx						;string address
  2151                                  			pop	esi						;restore volatile regs
  2152                                  			ret							;return to caller
  2153                                  ;-----------------------------------------------------------------------------------------------------------------------
  2154                                  ;
  2155                                  ;	Routine:	CompareStrings
  2156                                  ;
  2157                                  ;	Description:	Compare two strings.
  2158                                  ;
  2159                                  ;	In:		DS:EBX	string 1 address
  2160                                  ;			DS:EDX	string 2 address
  2161                                  ;
  2162                                  ;	Out:		EAX	0	strings are equal
  2163                                  ;				<0	string 1 < string 2
  2164                                  ;				>0	string 1 > string 2
  2165                                  ;
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167                                  CompareStrings		push	ecx						;save volatile regs
  2168                                  			push	esi						;
  2169                                  			push	edi						;
  2170                                  			push	es						;
  2171                                  			push	ds						;store data selector ...
  2172                                  			pop	es						;... into es register
  2173                                  			mov	edi,edx						;string 2 address
  2174                                  			mov	esi,ebx						;string 1 address
  2175                                  			xor	eax,eax						;prime result
  2176                                  .10			mov	cl,[esi]					;string 1 char
  2177                                  			cmpsb							;compare char
  2178                                  			jne	.20						;exit if not equal
  2179                                  			or	cl,cl						;end of strings?
  2180                                  			jnz	.10						;no, repeat
  2181                                  			jmp	.30						;yes, exit
  2182                                  .20			inc	eax						;+1 : assume string 1 > string 2
  2183                                  			jnc	.30						;exit if true
  2184                                  			neg	eax						;-1 : string 1 < string 2
  2185                                  .30			pop	es						;restore volatile regs
  2186                                  			pop	edi						;
  2187                                  			pop	esi						;
  2188                                  			pop	ecx						;
  2189                                  			ret							;return to caller
  2190                                  ;-----------------------------------------------------------------------------------------------------------------------
  2191                                  ;
  2192                                  ;	Console Helper Routines
  2193                                  ;
  2194                                  ;	PutConsoleString
  2195                                  ;	GetConsoleString
  2196                                  ;	GetConsoleChar
  2197                                  ;	Yield
  2198                                  ;	PreviousConsoleColumn
  2199                                  ;	NextConsoleColumn
  2200                                  ;	FirstConsoleColumn
  2201                                  ;	NextConsoleRow
  2202                                  ;	PutConsoleChar
  2203                                  ;	PutConsoleOIAShift
  2204                                  ;	PutConsoleOIAChar
  2205                                  ;	PutConsoleHexByte
  2206                                  ;
  2207                                  ;-----------------------------------------------------------------------------------------------------------------------
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                  ;
  2210                                  ;	Routine:	PutConsoleString
  2211                                  ;
  2212                                  ;	Description:	Write a sequence of ASCII characters to the console until null and update the console position
  2213                                  ;			as needed.
  2214                                  ;
  2215                                  ;	In:		EDX	source address
  2216                                  ;			DS	OS data selector
  2217                                  ;
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                  PutConsoleString	push	esi						;save volatile regs
  2220                                  			mov	esi,edx						;source address
  2221                                  			cld							;forward strings
  2222                                  .10			lodsb							;ASCII character
  2223                                  			or	al,al						;end of string?
  2224                                  			jz	.40						;yes, skip ahead
  2225                                  			cmp	al,EASCIIRETURN					;carriage return?
  2226                                  			jne	.20						;no, skip ahead
  2227                                  			call	FirstConsoleColumn				;move to start of row
  2228                                  			jmp	.10						;next character
  2229                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2230                                  			jne	.30						;no, skip ahead
  2231                                  			call	NextConsoleRow					;move to next row
  2232                                  			jmp	.10						;next character
  2233                                  .30			call	PutConsoleChar					;output character to console
  2234                                  			call	NextConsoleColumn				;advance to next column
  2235                                  			jmp	.10						;next character
  2236                                  .40			pop	esi						;restore volatile regs
  2237                                  			ret							;return to caller
  2238                                  ;-----------------------------------------------------------------------------------------------------------------------
  2239                                  ;
  2240                                  ;	Routine:	GetConsoleString
  2241                                  ;
  2242                                  ;	Description:	Accept keyboard input into a buffer.
  2243                                  ;
  2244                                  ;	Input:		ds:edx	target buffer address
  2245                                  ;			ecx	size of input buffer
  2246                                  ;			bh	echo to terminal
  2247                                  ;			bl	terminating character
  2248                                  ;
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  GetConsoleString	push	ecx						;save volatile regs
  2251                                  			push	esi						;
  2252                                  			push	edi						;
  2253                                  			push	es						;
  2254                                  			push	ds						;load data segment selector ...
  2255                                  			pop	es						;... into extra segment register
  2256                                  			mov	edi,edx						;edi = target buffer
  2257                                  			mov	esi,edx						;esi = target buffer
  2258                                  .10			jecxz	.50						;exit if max-length is zero
  2259                                  .20			call	GetConsoleChar					;al = next input char
  2260                                  			cmp	al,bl						;is this the terminator?
  2261                                  			je	.50						;yes, exit
  2262                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2263                                  			jne	.30						;no, skip ahead
  2264                                  			cmp	esi,edi						;at start of buffer?
  2265                                  			je	.20						;yes, get next character
  2266                                  			dec	edi						;backup target pointer
  2267                                  			mov	byte [edi],0					;zero previous character
  2268                                  			inc	ecx						;increment remaining chars
  2269                                  			test	bh,1						;echo to console?
  2270                                  			jz	.20						;no, get next character
  2271                                  			call	PreviousConsoleColumn				;backup console position
  2272                                  			mov	al,EASCIISPACE					;ASCII space
  2273                                  			call	PutConsoleChar					;write space to console
  2274                                  			call	PlaceCursor					;position the cursor
  2275                                  			jmp	.20						;get next character
  2276                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2277                                  			jb	.20						;no, get another character
  2278                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2279                                  			ja	.20						;no, get another character
  2280                                  			stosb							;store character in buffer
  2281                                  			test	bh,1						;echo to console?
  2282                                  			jz	.40						;no, skip ahead
  2283                                  			call	PutConsoleChar					;write character to console
  2284                                  			call	NextConsoleColumn				;advance console position
  2285                                  			call	PlaceCursor					;position the cursor
  2286                                  .40			dec	ecx						;decrement remaining chars
  2287                                  			jmp	.10						;next
  2288                                  .50			xor	al,al						;null
  2289                                  			stosb							;terminate buffer
  2290                                  			pop	es						;restore volatile regs
  2291                                  			pop	edi						;
  2292                                  			pop	esi						;
  2293                                  			pop	ecx						;
  2294                                  			ret							;return to caller
  2295                                  ;-----------------------------------------------------------------------------------------------------------------------
  2296                                  ;
  2297                                  ;	Routine:	GetConsoleChar
  2298                                  ;
  2299                                  ;	Description:	Wait for EMSGKEYCHAR message and return character code.
  2300                                  ;
  2301                                  ;	Output:		al	ASCII character code
  2302                                  ;			ah	keyboard scan code
  2303                                  ;
  2304                                  ;-----------------------------------------------------------------------------------------------------------------------
  2305                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2306                                  GetConsoleChar		call	GetMessage					;get the next message
  2307                                  			or	eax,eax						;do we have a message?
  2308                                  			jz	GetConsoleChar.10				;no, skip ahead
  2309                                  			push	eax						;save key codes
  2310                                  			and	eax,0FFFF0000h					;mask for message type
  2311                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2312                                  			pop	eax						;restore key codes
  2313                                  			jne	GetConsoleChar					;no, try again
  2314                                  			and	eax,0000ffffh					;mask for key codes
  2315                                  			ret							;return to caller
  2316                                  ;-----------------------------------------------------------------------------------------------------------------------
  2317                                  ;
  2318                                  ;	Routine:	Yield
  2319                                  ;
  2320                                  ;	Description:	Pass control to the next ready task or enter halt.
  2321                                  ;
  2322                                  ;-----------------------------------------------------------------------------------------------------------------------
  2323                                  Yield			sti							;enable maskagle interrupts
  2324                                  			hlt							;halt until external interrupt
  2325                                  			ret							;return to caller
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327                                  ;
  2328                                  ;	Routine:	PreviousConsoleColumn
  2329                                  ;
  2330                                  ;	Description:	Retreat the cursor one logical column. Wrap the logical position to the previous row if needed.
  2331                                  ;
  2332                                  ;	Input:		ds	OS data selector
  2333                                  ;
  2334                                  ;-----------------------------------------------------------------------------------------------------------------------
  2335                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2336                                  			or	al,al						;start of row?
  2337                                  			jnz	.10						;no, skip ahead
  2338                                  			mov	ah,[wbConsoleRow]				;current row
  2339                                  			or	ah,ah						;top of screen?
  2340                                  			jz	.20						;yes, exit with no change
  2341                                  			dec	ah						;decrement row
  2342                                  			mov	[wbConsoleRow],ah				;save row
  2343                                  			mov	al,ECONCOLS					;set maximum column
  2344                                  .10			dec	al						;decrement column
  2345                                  			mov	[wbConsoleColumn],al				;save column
  2346                                  .20			ret							;return to caller
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  ;
  2349                                  ;	Routine:	NextConsoleColumn
  2350                                  ;
  2351                                  ;	Description:	Advance the console position one column. Wrap the column and advance one row if needed.
  2352                                  ;
  2353                                  ;	In:		DS	OS data selector
  2354                                  ;
  2355                                  ;-----------------------------------------------------------------------------------------------------------------------
  2356                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2357                                  			inc	al						;increment column
  2358                                  			mov	[wbConsoleColumn],al				;save column
  2359                                  			cmp	al,ECONCOLS					;end of row?
  2360                                  			jb	.10						;no, skip ahead
  2361                                  			call	FirstConsoleColumn				;reset column to start of row
  2362                                  			call	NextConsoleRow					;line feed to next row
  2363                                  .10			ret							;return to caller
  2364                                  ;-----------------------------------------------------------------------------------------------------------------------
  2365                                  ;
  2366                                  ;	Routine:	FirstConsoleColumn
  2367                                  ;
  2368                                  ;	Description:	Reset the console column to start of the row.
  2369                                  ;
  2370                                  ;	In:		DS	OS data selector
  2371                                  ;
  2372                                  ;-----------------------------------------------------------------------------------------------------------------------
  2373                                  FirstConsoleColumn	xor	al,al						;zero column
  2374                                  			mov	[wbConsoleColumn],al				;save column
  2375                                  			ret							;return to caller
  2376                                  ;-----------------------------------------------------------------------------------------------------------------------
  2377                                  ;
  2378                                  ;	Routine:	NextConsoleRow
  2379                                  ;
  2380                                  ;	Description:	Advance the console position one line. Scroll the screen one row if needed.
  2381                                  ;
  2382                                  ;	In:		DS	OS data selector
  2383                                  ;
  2384                                  ;-----------------------------------------------------------------------------------------------------------------------
  2385                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2386                                  			inc	al						;increment row
  2387                                  			mov	[wbConsoleRow],al				;save row
  2388                                  			cmp	al,ECONROWS					;end of screen?
  2389                                  			jb	.10						;no, skip ahead
  2390                                  			call	ScrollConsoleRow				;scroll up one row
  2391                                  			mov	al,[wbConsoleRow]				;row
  2392                                  			dec	al						;decrement row
  2393                                  			mov	[wbConsoleRow],al				;save row
  2394                                  .10			ret							;return to caller
  2395                                  ;-----------------------------------------------------------------------------------------------------------------------
  2396                                  ;
  2397                                  ;	Routine:	PutConsoleChar
  2398                                  ;
  2399                                  ;	Description:	Write one ASCII character to the console screen.
  2400                                  ;
  2401                                  ;	In:		AL	ASCII character
  2402                                  ;			DS	OS data selector
  2403                                  ;
  2404                                  ;-----------------------------------------------------------------------------------------------------------------------
  2405                                  PutConsoleChar		push	ecx						;save volatile regs
  2406                                  			push	es						;
  2407                                  			push	ESELCGA						;load CGA selector ...
  2408                                  			pop	es						;... into extra segment reg
  2409                                  			mov	cl,[wbConsoleColumn]				;column
  2410                                  			mov	ch,[wbConsoleRow]				;row
  2411                                  			call	SetConsoleChar					;put character at row, column
  2412                                  			pop	es						;restore volatile regs
  2413                                  			pop	ecx						;
  2414                                  			ret							;return to caller
  2415                                  ;-----------------------------------------------------------------------------------------------------------------------
  2416                                  ;
  2417                                  ;	Routine:	PutConsoleOIAShift
  2418                                  ;
  2419                                  ;	Description:	Update the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2420                                  ;
  2421                                  ;	Input:		bl	shift flags
  2422                                  ;			bh	lock flags
  2423                                  ;			ds	OS data selector
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  PutConsoleOIAShift	push	ecx						;save volatile regs
  2427                                  			push	es						;
  2428                                  			push	ESELCGA						;load CGA selector ...
  2429                                  			pop	es						;... into ES register
  2430                                  			mov	ch,ECONOIAROW					;OIA row
  2431                                  			mov	al,EASCIISPACE					;space is default character
  2432                                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2433                                  			jz	.10						;no, skip ahead
  2434                                  			mov	al,'S'						;yes, indicate with 'S'
  2435                                  .10			mov	cl,14						;indicator column
  2436                                  			call	SetConsoleChar					;display ASCII character
  2437                                  			mov	al,EASCIISPACE					;ASCII space
  2438                                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2439                                  			jz	.20						;no, skip ahead
  2440                                  			mov	al,'S'						;yes, indicate with 'S'
  2441                                  .20			mov	cl,64						;indicator column
  2442                                  			call	SetConsoleChar					;display ASCII character
  2443                                  			mov	al,EASCIISPACE					;ASCII space
  2444                                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2445                                  			jz	.30						;no, skip ahead
  2446                                  			mov	al,'C'						;yes, indicate with 'C'
  2447                                  .30			mov	cl,15						;indicator column
  2448                                  			call	SetConsoleChar					;display ASCII character
  2449                                  			mov	al,EASCIISPACE					;ASCII space
  2450                                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2451                                  			jz	.40						;no, skip ahead
  2452                                  			mov	al,'C'						;yes, indicate with 'C'
  2453                                  .40			mov	cl,63						;indicator column
  2454                                  			call	SetConsoleChar					;display ASCII character
  2455                                  			mov	al,EASCIISPACE					;ASCII space
  2456                                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2457                                  			jz	.50						;no, skip ahead
  2458                                  			mov	al,'A'						;yes, indicate with 'A'
  2459                                  .50			mov	cl,16						;indicator column
  2460                                  			call	SetConsoleChar					;display ASCII character
  2461                                  			mov	al,EASCIISPACE					;ASCII space
  2462                                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2463                                  			jz	.60						;no, skip ahead
  2464                                  			mov	al,'A'						;yes, indicate with 'A'
  2465                                  .60			mov	cl,62						;indicator column
  2466                                  			call	SetConsoleChar					;display ASCII character
  2467                                  			mov	al,EASCIISPACE					;ASCII space
  2468                                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2469                                  			jz	.70						;no, skip ahead
  2470                                  			mov	al,'C'						;yes, indicate with 'C'
  2471                                  .70			mov	cl,78						;indicator column
  2472                                  			call	SetConsoleChar					;display ASCII character
  2473                                  			mov	al,EASCIISPACE					;ASCII space
  2474                                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2475                                  			jz	.80						;no, skip ahead
  2476                                  			mov	al,'N'						;yes, indicate with 'N'
  2477                                  .80			mov	cl,77						;indicator column
  2478                                  			call	SetConsoleChar					;display ASCII character
  2479                                  			mov	al,EASCIISPACE					;ASCII space
  2480                                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2481                                  			jz	.90						;no, skip ahead
  2482                                  			mov	al,'S'						;yes, indicate with 'S'
  2483                                  .90			mov	cl,76						;indicator column
  2484                                  			call	SetConsoleChar					;display ASCII character
  2485                                  			pop	es						;restore volatile regs
  2486                                  			pop	ecx						;
  2487                                  			ret							;return to caller
  2488                                  ;-----------------------------------------------------------------------------------------------------------------------
  2489                                  ;
  2490                                  ;	Routine:	PutConsoleOIAChar
  2491                                  ;
  2492                                  ;	Description:	Update the Operator Information Area (OIA).
  2493                                  ;
  2494                                  ;	In:		ds	OS data selector
  2495                                  ;
  2496                                  ;-----------------------------------------------------------------------------------------------------------------------
  2497                                  PutConsoleOIAChar	push	ebx						;save volatile regs
  2498                                  			push	ecx						;
  2499                                  			push	esi						;
  2500                                  			push	ds						;
  2501                                  			push	es						;
  2502                                  			push	ESELDAT						;load OS data selector ...
  2503                                  			pop	ds						;... into data segment register
  2504                                  			push	ESELCGA						;load CGA selector ...
  2505                                  			pop	es						;... into extra segment register
  2506                                  			mov	esi,wbConsoleScan0				;scan codes address
  2507                                  			mov	bh,ECONOIAROW					;OIA row
  2508                                  			mov	bl,0						;starting column
  2509                                  			mov	ecx,6						;maximum scan codes
  2510                                  .10			push	ecx						;save remaining count
  2511                                  			mov	ecx,ebx						;row, column
  2512                                  			lodsb							;read scan code
  2513                                  			or	al,al						;scan code present?
  2514                                  			jz	.20						;no, skip ahead
  2515                                  			call	PutConsoleHexByte				;display scan code
  2516                                  			jmp	.30						;continue
  2517                                  .20			mov	al,' '						;ASCII space
  2518                                  			call	SetConsoleChar					;display space
  2519                                  			inc	cl
  2520                                  			mov	al,' '						;ASCII space
  2521                                  			call	SetConsoleChar					;display space
  2522                                  .30			add	bl,2						;next column (+2)
  2523                                  			pop	ecx						;restore remaining
  2524                                  			loop	.10						;next code
  2525                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2526                                  			cmp	al,32						;printable? (lower-bounds)
  2527                                  			jb	.40						;no, skip ahead
  2528                                  			cmp	al,126						;printable? (upper-bounds)
  2529                                  			ja	.40						;no, skip ahead
  2530                                  			mov	ch,bh						;OIA row
  2531                                  			mov	cl,40						;character display column
  2532                                  			call	SetConsoleChar					;display ASCII character
  2533                                  .40			pop	es						;restore volatile regs
  2534                                  			pop	ds						;
  2535                                  			pop	esi						;
  2536                                  			pop	ecx						;
  2537                                  			pop	ebx						;
  2538                                  			ret							;return to caller
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;	Routine:	PutConsoleHexByte
  2542                                  ;
  2543                                  ;	Description:	Write two ASCII characters to the console screen representing the value of a byte.
  2544                                  ;
  2545                                  ;	In:		al	byte value
  2546                                  ;			ch	row
  2547                                  ;			cl	column
  2548                                  ;			ds	OS data selector
  2549                                  ;			es	CGA selector
  2550                                  ;
  2551                                  ;-----------------------------------------------------------------------------------------------------------------------
  2552                                  PutConsoleHexByte	push	ebx						;save volatile regs
  2553                                  			mov	bl,al						;save byte value
  2554                                  			shr	al,4						;hi-order nybble
  2555                                  			or	al,030h						;apply ASCII zone
  2556                                  			cmp	al,03ah						;numeric?
  2557                                  			jb	.10						;yes, skip ahead
  2558                                  			add	al,7						;add ASCII offset for alpha
  2559                                  .10			call	SetConsoleChar					;display ASCII character
  2560                                  			inc	cl						;increment column
  2561                                  			mov	al,bl						;byte value
  2562                                  			and	al,0fh						;lo-order nybble
  2563                                  			or	al,30h						;apply ASCII zone
  2564                                  			cmp	al,03ah						;numeric?
  2565                                  			jb	.20						;yes, skip ahead
  2566                                  			add	al,7						;add ASCII offset for alpha
  2567                                  .20			call	SetConsoleChar					;display ASCII character
  2568                                  			pop	ebx						;restore volatile regs
  2569                                  			ret							;return to caller
  2570                                  ;-----------------------------------------------------------------------------------------------------------------------
  2571                                  ;
  2572                                  ;	Message Queue Helper Routines
  2573                                  ;
  2574                                  ;	PutMessage
  2575                                  ;	GetMessage
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  ;
  2580                                  ;	Routine:	PutMessage
  2581                                  ;
  2582                                  ;	Description:	Add a message to the message queue.
  2583                                  ;
  2584                                  ;	Input:		ecx	hi-order data word
  2585                                  ;			edx	lo-order data word
  2586                                  ;
  2587                                  ;	Output:		CY	0 = success
  2588                                  ;				1 = fail: queue is full
  2589                                  ;
  2590                                  ;-----------------------------------------------------------------------------------------------------------------------
  2591                                  PutMessage		push	ds						;save volatile regs
  2592                                  			push	ESELMQ						;load task message queue selector ...
  2593                                  			pop	ds						;... into data segment register
  2594                                  			mov	eax,[MQTail]					;tail ptr
  2595                                  			cmp	dword [eax],0					;is queue full?
  2596                                  			stc							;assume failure
  2597                                  			jne	.20						;yes, cannot store
  2598                                  			mov	[eax],edx					;store lo-order data
  2599                                  			mov	[eax+4],ecx					;store hi-order data
  2600                                  			add	eax,8						;next queue element adr
  2601                                  			and	eax,03fch					;at end of queue?
  2602                                  			jnz	.10						;no, skip ahead
  2603                                  			mov	al,8						;reset to top of queue
  2604                                  .10			mov	[MQTail],eax					;save new tail ptr
  2605                                  			clc							;indicate success
  2606                                  .20			pop	ds						;restore volatile regs
  2607                                  			ret							;return to caller
  2608                                  ;-----------------------------------------------------------------------------------------------------------------------
  2609                                  ;
  2610                                  ;	Routine:	GetMessage
  2611                                  ;
  2612                                  ;	Description:	Read and remove a message from the message queue.
  2613                                  ;
  2614                                  ;	Output:		eax	lo-order message data
  2615                                  ;			edx	hi-order message data
  2616                                  ;
  2617                                  ;			CY	0 = message read
  2618                                  ;				1 = no message to read
  2619                                  ;
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                  GetMessage		push	ebx						;save volatile regs
  2622                                  			push	ecx						;
  2623                                  			push	ds						;
  2624                                  			push	ESELMQ						;load message queue selector ...
  2625                                  			pop	ds						;... into data segment register
  2626                                  			mov	ebx,[MQHead]					;head ptr
  2627                                  			mov	eax,[ebx]					;lo-order 32 bits
  2628                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2629                                  			or	eax,edx						;is queue empty?
  2630                                  			stc							;assume queue is emtpy
  2631                                  			jz	.20						;yes, skip ahead
  2632                                  			xor	ecx,ecx						;store zero
  2633                                  			mov	[ebx],ecx					;... in lo-order dword
  2634                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2635                                  			add	ebx,8						;next queue element
  2636                                  			and	ebx,03fch					;at end of queue?
  2637                                  			jnz	.10						;no, skip ahead
  2638                                  			mov	bl,8						;reset to 1st entry
  2639                                  .10			mov	[MQHead],ebx					;save new head ptr
  2640                                  			clc							;indicate message read
  2641                                  .20			pop	ds						;restore volatile regs
  2642                                  			pop	ecx						;
  2643                                  			pop	ebx						;
  2644                                  			ret							;return to caller
  2645                                  ;-----------------------------------------------------------------------------------------------------------------------
  2646                                  ;
  2647                                  ;	Memory-Mapped Video Routines
  2648                                  ;
  2649                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2650                                  ;
  2651                                  ;	ClearConsoleScreen
  2652                                  ;	ScrollConsoleRow
  2653                                  ;	SetConsoleChar
  2654                                  ;
  2655                                  ;-----------------------------------------------------------------------------------------------------------------------
  2656                                  ;-----------------------------------------------------------------------------------------------------------------------
  2657                                  ;
  2658                                  ;	Routine:	ClearConsoleScreen
  2659                                  ;
  2660                                  ;	Description:	Clear the console (CGA) screen.
  2661                                  ;
  2662                                  ;-----------------------------------------------------------------------------------------------------------------------
  2663                                  ClearConsoleScreen	push	ecx						;save volatile regs
  2664                                  			push	edi						;
  2665                                  			push	ds						;
  2666                                  			push	es						;
  2667                                  			push	ESELDAT						;load OS Data selector ...
  2668                                  			pop	ds						;... into DS register
  2669                                  			push	ESELCGA						;load CGA selector ...
  2670                                  			pop	es						;... into ES register
  2671                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2672                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2673                                  			xor	edi,edi						;target offset
  2674                                  			cld							;forward strings
  2675                                  			rep	stosd						;reset screen body
  2676                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2677                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2678                                  			rep	stosd						;reset OIA line
  2679                                  			xor	al,al						;zero register
  2680                                  			mov	[wbConsoleRow],al				;reset console row
  2681                                  			mov	[wbConsoleColumn],al				;reset console column
  2682                                  			call	PlaceCursor					;place cursor at current position
  2683                                  			pop	es						;restore volatile regs
  2684                                  			pop	ds						;
  2685                                  			pop	edi						;
  2686                                  			pop	ecx						;
  2687                                  			ret							;return to caller
  2688                                  ;-----------------------------------------------------------------------------------------------------------------------
  2689                                  ;
  2690                                  ;	Routine:	ScrollConsoleRow
  2691                                  ;
  2692                                  ;	Description:	Scroll console (text) screen up one row.
  2693                                  ;
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ScrollConsoleRow	push	ecx						;save volatile regs
  2696                                  			push	esi						;
  2697                                  			push	edi						;
  2698                                  			push	ds						;
  2699                                  			push	es						;
  2700                                  			push	ESELCGA						;load CGA video selector ...
  2701                                  			pop	ds						;... into DS
  2702                                  			push	ESELCGA						;load CGA video selector ...
  2703                                  			pop	es						;... into ES
  2704                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2705                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2706                                  			xor	edi,edi						;edi = target (line 1)
  2707                                  			cld							;forward strings
  2708                                  			rep	movsd						;move 24 lines up
  2709                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2710                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2711                                  			rep	stosd						;clear bottom row
  2712                                  			pop	es						;restore volatile regs
  2713                                  			pop	ds						;
  2714                                  			pop	edi						;
  2715                                  			pop	esi						;
  2716                                  			pop	ecx						;
  2717                                  			ret							;return to caller
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;	Routine:	SetConsoleChar
  2721                                  ;
  2722                                  ;	Description:	Output an ASCII character at the given row and column.
  2723                                  ;
  2724                                  ;	In:		AL	ASCII character
  2725                                  ;			CL	column
  2726                                  ;			CH	row
  2727                                  ;			ES	CGA selector
  2728                                  ;
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                  SetConsoleChar		mov	dl,al						;ASCII character
  2731                                  			movzx	eax,ch						;row
  2732                                  			mov	ah,ECONCOLS					;cols/row
  2733                                  			mul	ah						;row * cols/row
  2734                                  			add	al,cl						;add column
  2735                                  			adc	ah,0						;handle carry
  2736                                  			shl	eax,1						;screen offset
  2737                                  			mov	[es:eax],dl					;store character
  2738                                  			ret							;return to caller
  2739                                  ;-----------------------------------------------------------------------------------------------------------------------
  2740                                  ;
  2741                                  ;	Input/Output Routines
  2742                                  ;
  2743                                  ;	These routines read and/or write directly to ports.
  2744                                  ;
  2745                                  ;	PlaceCursor
  2746                                  ;	PutPrimaryEndOfInt
  2747                                  ;	PutSecondaryEndOfInt
  2748                                  ;	ResetSystem
  2749                                  ;	SetKeyboardLamps
  2750                                  ;	WaitForKeyInBuffer
  2751                                  ;	WaitForKeyOutBuffer
  2752                                  ;
  2753                                  ;-----------------------------------------------------------------------------------------------------------------------
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                  ;
  2756                                  ;	Routine:	PlaceCursor
  2757                                  ;
  2758                                  ;	Description:	Position the cursor on the console.
  2759                                  ;
  2760                                  ;	In:		DS	OS data selector
  2761                                  ;
  2762                                  ;-----------------------------------------------------------------------------------------------------------------------
  2763                                  PlaceCursor		push	ecx						;save volatile regs
  2764                                  			mov	al,[wbConsoleRow]				;al = row
  2765                                  			mov	ah,ECONCOLS					;ah = cols/row
  2766                                  			mul	ah						;row offset
  2767                                  			add	al,[wbConsoleColumn]				;add column
  2768                                  			adc	ah,0						;add overflow
  2769                                  			mov	ecx,eax						;screen offset
  2770                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2771                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2772                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2773                                  			out	dx,al						;select register
  2774                                  			inc	edx						;data port
  2775                                  			mov	al,ch						;hi-order cursor loc
  2776                                  			out	dx,al						;store hi-order loc
  2777                                  			dec	edx						;register select port
  2778                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2779                                  			out	dx,al						;select register
  2780                                  			inc	edx						;data port
  2781                                  			mov	al,cl						;lo-order cursor loc
  2782                                  			out	dx,al						;store lo-order loc
  2783                                  			pop	ecx						;restore volatile regs
  2784                                  			ret							;return to caller
  2785                                  ;-----------------------------------------------------------------------------------------------------------------------
  2786                                  ;
  2787                                  ;	Routine:	PutPrimaryEndOfInt
  2788                                  ;
  2789                                  ;	Description:	Send non-specific end-of-interrupt signal to the primary PIC.
  2790                                  ;
  2791                                  ;-----------------------------------------------------------------------------------------------------------------------
  2792                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2793                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2794                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2795                                  			ret							;return to caller
  2796                                  ;-----------------------------------------------------------------------------------------------------------------------
  2797                                  ;
  2798                                  ;	Routine:	PutSecondaryEndOfInt
  2799                                  ;
  2800                                  ;	Description:	Send non-specific end-of-interrupt signal to the secondary PIC.
  2801                                  ;
  2802                                  ;-----------------------------------------------------------------------------------------------------------------------
  2803                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2804                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2805                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2806                                  			ret							;return to caller
  2807                                  ;-----------------------------------------------------------------------------------------------------------------------
  2808                                  ;
  2809                                  ;	Routine:	ResetSystem
  2810                                  ;
  2811                                  ;	Description:	Restart the system using the 8042 controller
  2812                                  ;
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  2815                                  			loop	$						;clear interrupts
  2816                                  			mov	al,EKEYCMDRESET					;mask out bit zero
  2817                                  			out	EKEYPORTSTAT,al					;drive bit zero low
  2818                                  .10			sti							;enable maskable interrupts
  2819                                  			hlt							;halt until interrupt
  2820                                  			jmp	.10						;repeat until reset kicks in
  2821                                  ;-----------------------------------------------------------------------------------------------------------------------
  2822                                  ;
  2823                                  ;	Routine:	SetKeyboardLamps
  2824                                  ;
  2825                                  ;	Description:	Send the set/reset mode indicators command.
  2826                                  ;
  2827                                  ;	In:		bh	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2828                                  ;
  2829                                  ;-----------------------------------------------------------------------------------------------------------------------
  2830                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2831                                  			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2832                                  			out	EKEYPORTDATA,al					;send command to 8042
  2833                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2834                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2835                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  2836                                  			mov	al,bh						;set/reset lamps value
  2837                                  			out	EKEYPORTDATA,al					;send lamps value
  2838                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2839                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2840                                  			ret							;return to caller
  2841                                  ;-----------------------------------------------------------------------------------------------------------------------
  2842                                  ;
  2843                                  ;	Routine:	WaitForKeyInBuffer
  2844                                  ;
  2845                                  ;	Description:	Wait for keyboard input buffer to be ready for input.
  2846                                  ;
  2847                                  ;	Out:		ZF	1 = Input buffer ready
  2848                                  ;				0 = Input buffer not ready after timeout
  2849                                  ;
  2850                                  ;-----------------------------------------------------------------------------------------------------------------------
  2851                                  WaitForKeyInBuffer	push	ecx						;save volatile regs
  2852                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2853                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2854                                  			test	al,EKEYBITIN					;is input buffer still full?
  2855                                  			loopnz	.10						;yes, repeat till timeout
  2856                                  			pop	ecx						;restore volatile regs
  2857                                  			ret							;return to caller
  2858                                  ;-----------------------------------------------------------------------------------------------------------------------
  2859                                  ;
  2860                                  ;	Routine:	WaitForKeyOutBuffer
  2861                                  ;
  2862                                  ;	Description:	Wait for keyboard output buffer to have data to read.
  2863                                  ;
  2864                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2865                                  ;				1 = Output buffer empty after timeout
  2866                                  ;
  2867                                  ;-----------------------------------------------------------------------------------------------------------------------
  2868                                  WaitForKeyOutBuffer	push	ecx						;save volatile regs
  2869                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2870                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2871                                  			test	al,EKEYBITOUT					;output buffer status bit
  2872                                  			loopz	.10						;loop until output buffer bit
  2873                                  			pop	ecx						;restore volatile regs
  2874                                  			ret							;return to caller
  2875                                  ;-----------------------------------------------------------------------------------------------------------------------
  2876                                  ;
  2877                                  ;	End of the Kernel Function Library
  2878                                  ;
  2879                                  ;-----------------------------------------------------------------------------------------------------------------------
  2880                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2881                                  			db	055h,0AAh					;end of segment
  2882                                  ;-----------------------------------------------------------------------------------------------------------------------
  2883                                  ;
  2884                                  ;	Console Task
  2885                                  ;
  2886                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2887                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2888                                  ;	screen and responds to user commands.
  2889                                  ;
  2890                                  ;-----------------------------------------------------------------------------------------------------------------------
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2894                                  ;
  2895                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2896                                  ;
  2897                                  ;-----------------------------------------------------------------------------------------------------------------------
  2898                                  section			constack						;console task stack
  2899                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  2900                                  ;-----------------------------------------------------------------------------------------------------------------------
  2901                                  ;
  2902                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2903                                  ;
  2904                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2905                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2906                                  ;	16 descriptors. Six are initially defined.
  2907                                  ;
  2908                                  ;-----------------------------------------------------------------------------------------------------------------------
  2909                                  section			conldt							;console local descriptors
  2910                                  			dq	004093004780007Fh				;04 TSS alias
  2911                                  			dq	004093004700007Fh				;0C LDT alias
  2912                                  			dq	00409300400006FFh				;14 stack
  2913                                  			dq	00C093000000FFFFh				;1C data
  2914                                  			dq	00409B0050000FFFh				;24 code
  2915                                  			dq	00409300480007FFh				;2C message queue
  2916                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2917                                  ;-----------------------------------------------------------------------------------------------------------------------
  2918                                  ;
  2919                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2920                                  ;
  2921                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2922                                  ;	segment. CS to console code.
  2923                                  ;
  2924                                  ;-----------------------------------------------------------------------------------------------------------------------
  2925                                  section			contss							;console task state segment
  2926                                  			dd	0						;00 back-link tss
  2927                                  			dd	0700h						;04 esp ring 0
  2928                                  			dd	0014h						;08 ss ring 0
  2929                                  			dd	0700h						;0C esp ring 1
  2930                                  			dd	0014h						;10 es ring 1
  2931                                  			dd	0700h						;14 esp ring 2
  2932                                  			dd	0014h						;18 ss ring 2
  2933                                  			dd	0						;1C cr ring 3
  2934                                  			dd	0						;20 eip
  2935                                  			dd	0200h						;24 eflags
  2936                                  			dd	0						;28 eax
  2937                                  			dd	0						;2C ecx
  2938                                  			dd	0						;30 edx
  2939                                  			dd	0						;34 ebx
  2940                                  			dd	0700h						;38 esp ring 3
  2941                                  			dd	0						;3C ebp
  2942                                  			dd	0						;40 esi
  2943                                  			dd	0						;44 edi
  2944                                  			dd	001Ch						;48 es
  2945                                  			dd	0024h						;4C cs
  2946                                  			dd	0014h						;50 ss ring 3
  2947                                  			dd	001Ch						;54 ds
  2948                                  			dd	0						;58 fs
  2949                                  			dd	0						;5c gs
  2950                                  			dd	0050h						;60 ldt selector in gdt
  2951                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2952                                  ;-----------------------------------------------------------------------------------------------------------------------
  2953                                  ;
  2954                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2955                                  ;
  2956                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2957                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2958                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2959                                  ;	event.
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  section			conmque							;console message queue
  2963                                  			dd	8						;head pointer
  2964                                  			dd	8						;tail pointer
  2965                                  			times	510 dd 0					;queue elements
  2966                                  ;-----------------------------------------------------------------------------------------------------------------------
  2967                                  ;
  2968                                  ;	Console Code								@disk: 008400	@mem: 005000
  2969                                  ;
  2970                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2971                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2972                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2973                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2974                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2975                                  ;	board input, echoing to the console screen and responding to user commands.
  2976                                  ;
  2977                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2978                                  ;
  2979                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2980                                  ;				|  Real Mode Interrupt Vectors			|
  2981                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2982                                  ;				|  Reserved BIOS Memory Area			|
  2983                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2984                                  ;				|  Shared Kernel Memory Area			|
  2985                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2986                                  ;				|  Global Descriptor Table (GDT)		|
  2987                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2988                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2989                                  ;			002000	+-----------------------------------------------+
  2990                                  ;				|  Interrupt Handlers				|
  2991                                  ;				|  Kernel Function Library			|
  2992                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2993                                  ;				|  Console Task Stack Area			|
  2994                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2995                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2996                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2997                                  ;				|  Console Task Task State Segment (TSS)	|
  2998                                  ;			004800	+-----------------------------------------------+
  2999                                  ;				|  Console Task Message Queue			|
  3000                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3001                                  ;				|  Console Task Code				|
  3002                                  ;				|  Console Task Constants			|
  3003                                  ;			006000	+===============================================+
  3004                                  ;
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  section			concode	vstart=5000h					;labels relative to 5000h
  3007                                  ConCode			call	ConInitializeData				;initialize console variables
  3008                                  			clearConsoleScreen					;clear the console screen
  3009                                  			putConsoleString czTitle				;display startup message
  3010                                  .10			putConsoleString czPrompt				;display input prompt
  3011                                  			placeCursor						;set CRT cursor location
  3012                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3013                                  			putConsoleString czNewLine				;newline
  3014                                  			mov	ebx,wzConsoleInBuffer				;input buffer address
  3015                                  			call	ConParseCommand					;parse the command line
  3016                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3017                                  			jb	.20						;yes, branch
  3018                                  			putConsoleString czUnknownCommand			;display error message
  3019                                  			jmp	.10						;next command
  3020                                  .20			shl	eax,2						;index into jump table
  3021                                  			mov	edx,tConJmpTbl					;jump table base address
  3022                                  			mov	eax,[edx+eax]					;command handler routine address
  3023                                  			call	eax						;call command handler
  3024                                  			jmp	.10						;next command
  3025                                  ;-----------------------------------------------------------------------------------------------------------------------
  3026                                  ;
  3027                                  ;	Routine:	ConInitializeData
  3028                                  ;
  3029                                  ;	Description:	Initialize console variables used by the console task.
  3030                                  ;
  3031                                  ;-----------------------------------------------------------------------------------------------------------------------
  3032                                  ConInitializeData	push	ecx						;save volatile regs
  3033                                  			push	edi						;
  3034                                  			push	es						;
  3035                                  			push	ESELDAT						;load OS data selector ...
  3036                                  			pop	es						;... into extra segment register
  3037                                  			mov	edi,ECONDATA					;OS console data address
  3038                                  			xor	al,al						;initialization value
  3039                                  			mov	ecx,ECONDATALEN					;size of OS console data
  3040                                  			cld							;forward strings
  3041                                  			rep	stosb						;initialize data
  3042                                  			pop	es						;restore volatile regs
  3043                                  			pop	edi						;
  3044                                  			pop	ecx						;
  3045                                  			ret							;return to caller
  3046                                  ;-----------------------------------------------------------------------------------------------------------------------
  3047                                  ;
  3048                                  ;	Routine:	ConParseCommand
  3049                                  ;
  3050                                  ;	Description:	Parse console command
  3051                                  ;
  3052                                  ;	input:		ds:ebx	command address
  3053                                  ;
  3054                                  ;	output:		eax	command nbr
  3055                                  ;
  3056                                  ;-----------------------------------------------------------------------------------------------------------------------
  3057                                  ConParseCommand		push	esi						;save volatile regs
  3058                                  			push	edi						;
  3059                                  			leftTrimString						;left-trim string at ebx
  3060                                  			rightTrimString						;right-trim string at ebx
  3061                                  			upperCaseString						;upper-case string at ebx
  3062                                  			xor	edi,edi						;command nbr
  3063                                  			mov	esi,tConCmdTbl					;commands table
  3064                                  .10			cld							;forward strings
  3065                                  			lodsb							;command length (including null)
  3066                                  			or	al,al						;end of table?
  3067                                  			jz	.20						;yes, exit
  3068                                  			movzx	ecx,al						;length
  3069                                  			push	ecx						;save length
  3070                                  			mov	edx,esi						;command
  3071                                  			compareStrings						;compare strings at ebx,edx
  3072                                  			pop	ecx						;restore length
  3073                                  			or	eax,eax						;equal?
  3074                                  			jz	.20						;yes, exit
  3075                                  			inc	edi						;increment command nbr
  3076                                  			add	esi,ecx						;point to next command
  3077                                  			jmp	.10						;repeat
  3078                                  .20			mov	eax,edi						;command number
  3079                                  			pop	edi						;restore volatile regs
  3080                                  			pop	esi						;
  3081                                  			ret							;return to caller
  3082                                  ;-----------------------------------------------------------------------------------------------------------------------
  3083                                  ;
  3084                                  ;	Routine:	ConClearCommand
  3085                                  ;
  3086                                  ;	Description:	Handle the clear command
  3087                                  ;
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  ConClearCommand		clearConsoleScreen					;clear console screen
  3090                                  			ret							;return to caller
  3091                                  ;-----------------------------------------------------------------------------------------------------------------------
  3092                                  ;
  3093                                  ;	Routine:	ConExit
  3094                                  ;
  3095                                  ;	Description:	Handle the exit  command
  3096                                  ;
  3097                                  ;-----------------------------------------------------------------------------------------------------------------------
  3098                                  ConExit			resetSystem						;issue system reset
  3099                                  			ret							;return to caller
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  ;
  3102                                  ;	Routine:	ConVersion
  3103                                  ;
  3104                                  ;	Description:	Handle the ver (version) command
  3105                                  ;
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107                                  ConVersion		putConsoleString	czTitle				;display version message
  3108                                  			ret							;return to caller
  3109                                  ;;-----------------------------------------------------------------------------------------------------------------------
  3110                                  ;
  3111                                  ;	Tables
  3112                                  ;
  3113                                  ;-----------------------------------------------------------------------------------------------------------------------
  3114                                  tConJmpTbl		equ	$						;command jump table
  3115                                  			dd	ConClearCommand - ConCode			;clear command routine offset
  3116                                  			dd	ConExit - ConCode				;exit command routine offset
  3117                                  			dd	ConVersion - ConCode				;ver command routine offset
  3118                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3119                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3120                                  tConCmdTbl		equ	$						;command name table
  3121                                  			db	6,"CLEAR",0					;clear screen command
  3122                                  			db	5,"EXIT",0					;exit command
  3123                                  			db	4,"VER",0					;version command
  3124                                  			db	0						;end of table
  3125                                  ;-----------------------------------------------------------------------------------------------------------------------
  3126                                  ;
  3127                                  ;	Constants
  3128                                  ;
  3129                                  ;-----------------------------------------------------------------------------------------------------------------------
  3130                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3131                                  czPrompt		db	":",0						;prompt string
  3132                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3133                                  czNewLine		db	13,10,0						;new line string
  3134                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  3135                                  			db	055h,0AAh					;end of section
  3136                                  %endif
  3137                                  %ifdef BUILDDISK
  3138                                  ;-----------------------------------------------------------------------------------------------------------------------
  3139                                  ;
  3140                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3141                                  ;
  3142                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3143                                  ;
  3144                                  ;-----------------------------------------------------------------------------------------------------------------------
  3145                                  section			unused							;unused disk space
  3146                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3147                                  %endif
