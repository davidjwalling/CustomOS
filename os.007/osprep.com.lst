     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        January 1, 2019
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.03, Feb 7 2018
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2019 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Logical tabs are set after every eight columns.
    47                                  ;                       Tabs are simulated using SPACE characters.
    48                                  ;                       For comments that span an entire line, comment text begins in column 9.
    49                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    50                                  ;                       Assembly operands begin in column 33.
    51                                  ;                       Inline comments begin in column 81.
    52                                  ;                       Lines should not extend beyond column 120.
    53                                  ;
    54                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    55                                  ;                       However, ECX may be used as the sole parameter if a test for zero is required. EBX and EBP
    56                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    57                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    58                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    59                                  ;                       ouput buffers, respectively.
    60                                  ;
    61                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    62                                  ;                       Negative relative call or jump addresses usually, therefore, indicate reuse.
    63                                  ;
    64                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    65                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    66                                  ;                       Register names in comments are in upper case (EAX, EDI).
    67                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    68                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    69                                  ;                       register contents on entry and exit.
    70                                  ;
    71                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    72                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    73                                  ;                       The 2nd letter of the constant label indicates the storage type.
    74                                  ;
    75                                  ;                       cq......        constant quad-word (dq)
    76                                  ;                       cd......        constant double-word (dd)
    77                                  ;                       cw......        constant word (dw)
    78                                  ;                       cb......        constant byte (db)
    79                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    80                                  ;
    81                                  ;       Instructions:   32-bit instructions are generally favored.
    82                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    83                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    84                                  ;
    85                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    86                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    87                                  ;
    88                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    89                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    90                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    91                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    92                                  ;                       Octal literal values are avoided.
    93                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    94                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    95                                  ;
    96                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    97                                  ;                       Macro names describe an action and so DO begin with a verb.
    98                                  ;
    99                                  ;       Memory Use:     Operating system memory allocation is minimized.
   100                                  ;                       Buffers are kept to as small a size as practicable.
   101                                  ;                       Data and code intermingling is avoided wherever possible.
   102                                  ;
   103                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   104                                  ;                       Register names in source code are in lower case (eax, edx).
   105                                  ;
   106                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   107                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   108                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   109                                  ;
   110                                  ;       Routines:       Routine names are in mixed case and capitalized (GetYear, ReadRealTimeClock).
   111                                  ;                       Routine names begin with a verb (Get, Read, Load).
   112                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   113                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   114                                  ;                       function but begin with a leading underscore (_) character.
   115                                  ;
   116                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   117                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   118                                  ;
   119                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   120                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   121                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   122                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   123                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   124                                  ;
   125                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   126                                  ;                       The 2nd letter of the variable label indicates the storage type.
   127                                  ;
   128                                  ;                       wq......        variable quad-word (resq)
   129                                  ;                       wd......        variable double-word (resd)
   130                                  ;                       ww......        variable word (resw)
   131                                  ;                       wb......        variable byte (resb)
   132                                  ;                       ws......        writable structure
   133                                  ;
   134                                  ;-----------------------------------------------------------------------------------------------------------------------
   135                                  ;=======================================================================================================================
   136                                  ;
   137                                  ;       Equates
   138                                  ;
   139                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   140                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   141                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   142                                  ;       sets. Equates here are defined in the following groupings:
   143                                  ;
   144                                  ;       Hardware-Defined Values
   145                                  ;
   146                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   147                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   148                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   149                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   150                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   151                                  ;       EX86...         Intel x86 CPU architecture values
   152                                  ;
   153                                  ;       Firmware-Defined Values
   154                                  ;
   155                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   156                                  ;
   157                                  ;       Standards-Based Values
   158                                  ;
   159                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   160                                  ;
   161                                  ;       Operating System Values
   162                                  ;
   163                                  ;       EBOOT...        Boot sector and loader values
   164                                  ;       ECON...         Console values (dimensions and attributes)
   165                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   166                                  ;       EKEYF...        Keyboard status flags
   167                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   168                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   169                                  ;       EMSG...         Message identifers
   170                                  ;
   171                                  ;=======================================================================================================================
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  ;
   174                                  ;       Hardware-Defined Values
   175                                  ;
   176                                  ;-----------------------------------------------------------------------------------------------------------------------
   177                                  ;-----------------------------------------------------------------------------------------------------------------------
   178                                  ;
   179                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   180                                  ;
   181                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   182                                  ;       for CGA, EGA, VGA and compatible video modes.
   183                                  ;
   184                                  ;-----------------------------------------------------------------------------------------------------------------------
   185                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   186                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   187                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   188                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   189                                  ;-----------------------------------------------------------------------------------------------------------------------
   190                                  ;
   191                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   192                                  ;
   193                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   194                                  ;
   195                                  ;-----------------------------------------------------------------------------------------------------------------------
   196                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   197                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   198                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   199                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   200                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   201                                  ;-----------------------------------------------------------------------------------------------------------------------
   202                                  ;
   203                                  ;       8042 Keyboard Controller                                                EKEYB...
   204                                  ;
   205                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   206                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EKEYBPORTDATA           equ     060h                                            ;data port
   210                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   211                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   212                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   213                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   214                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   215                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   216                                                                                                                  ;---------------------------------------
   217                                                                                                                  ;       Keyboard Scan Codes
   218                                                                                                                  ;---------------------------------------
   219                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   220                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   221                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   222                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   223                                  EKEYBSLASH              equ     035h                                            ;slash
   224                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   225                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   226                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   227                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   228                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   229                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   230                                  EKEYBUP                 equ     080h                                            ;up
   231                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   232                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   233                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   234                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   235                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   236                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   237                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   238                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   239                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   240                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   241                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   242                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   243                                  ;-----------------------------------------------------------------------------------------------------------------------
   244                                  ;
   245                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   246                                  ;
   247                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   248                                  ;       external devices and signals a hardware interrupt to the CPU.
   249                                  ;
   250                                  ;-----------------------------------------------------------------------------------------------------------------------
   251                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   252                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   253                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   254                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   255                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  ;
   258                                  ;       8253 Programmable Interval Timer                                        EPIT...
   259                                  ;
   260                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   261                                  ;       approximately 18.2 times per second.
   262                                  ;
   263                                  ;-----------------------------------------------------------------------------------------------------------------------
   264                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   265                                  ;-----------------------------------------------------------------------------------------------------------------------
   266                                  ;
   267                                  ;       x86 CPU Architecture                                                    ;EX86...
   268                                  ;
   269                                  ;-----------------------------------------------------------------------------------------------------------------------
   270                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   271                                  ;-----------------------------------------------------------------------------------------------------------------------
   272                                  ;
   273                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   274                                  ;
   275                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   276                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   277                                  ;
   278                                  ;       0.......        Segment is not present in memory (triggers int 11)
   279                                  ;       1.......        Segment is present in memory
   280                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   281                                  ;       ...0....        Segment is a system segment
   282                                  ;       ...00010                Local Descriptor Table
   283                                  ;       ...00101                Task Gate
   284                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   285                                  ;       ...01100                Call Gate (386)
   286                                  ;       ...01110                Interrupt Gate (386)
   287                                  ;       ...01111                Trap Gate (386)
   288                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   289                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   290                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   291                                  ;
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   294                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   295                                  ;-----------------------------------------------------------------------------------------------------------------------
   296                                  ;
   297                                  ;       Firmware-Defined Values
   298                                  ;
   299                                  ;-----------------------------------------------------------------------------------------------------------------------
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;
   302                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   303                                  ;
   304                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   305                                  ;       BIOS interrupt supports several functions. The function code is typically passed in the AH register.
   306                                  ;
   307                                  ;-----------------------------------------------------------------------------------------------------------------------
   308                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   309                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   310                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   311                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   312                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   313                                  EBIOSFNREADSECTOR       equ     002h                                            ;diskette read sector function
   314                                  EBIOSFNWRITESECTOR      equ     003h                                            ;diskette write sector function
   315                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   316                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   317                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   318                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   319                                  ;-----------------------------------------------------------------------------------------------------------------------
   320                                  ;
   321                                  ;       Standards-Based Values
   322                                  ;
   323                                  ;-----------------------------------------------------------------------------------------------------------------------
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;
   326                                  ;       ASCII                                                                   EASCII...
   327                                  ;
   328                                  ;-----------------------------------------------------------------------------------------------------------------------
   329                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   330                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   331                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   332                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   333                                  EASCIISPACE             equ     020h                                            ;space
   334                                  EASCIIUPPERA            equ     041h                                            ;'A'
   335                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   336                                  EASCIILOWERA            equ     061h                                            ;'a'
   337                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   338                                  EASCIITILDE             equ     07Eh                                            ;'~'
   339                                  EASCIICASE              equ     00100000b                                       ;case bit
   340                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   341                                  ;-----------------------------------------------------------------------------------------------------------------------
   342                                  ;
   343                                  ;       Operating System Values
   344                                  ;
   345                                  ;-----------------------------------------------------------------------------------------------------------------------
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;
   348                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   349                                  ;
   350                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   351                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   352                                  ;
   353                                  ;-----------------------------------------------------------------------------------------------------------------------
   354                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   355                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   356                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   357                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   358                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   359                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   360                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   361                                  ;-----------------------------------------------------------------------------------------------------------------------
   362                                  ;       Console Constants                                                       ECON...
   363                                  ;-----------------------------------------------------------------------------------------------------------------------
   364                                  ECONCOLS                equ     80                                              ;columns per row
   365                                  ECONROWS                equ     24                                              ;console rows
   366                                  ECONOIAROW              equ     24                                              ;operator information area row
   367                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   368                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   369                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   370                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   371                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   372                                  ;-----------------------------------------------------------------------------------------------------------------------
   373                                  ;       Global Descriptor Table (GDT) Selectors                                 EGDT...
   374                                  ;-----------------------------------------------------------------------------------------------------------------------
   375                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   376                                  EGDTCGA                 equ     020h                                            ;cga video selector
   377                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   378                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   379                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   380                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   381                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   382                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   383                                  ;-----------------------------------------------------------------------------------------------------------------------
   384                                  ;       Keyboard Flags                                                          EKEYF...
   385                                  ;-----------------------------------------------------------------------------------------------------------------------
   386                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   387                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   388                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   389                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   390                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   391                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   392                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   393                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   394                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   395                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   396                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   397                                  ;-----------------------------------------------------------------------------------------------------------------------
   398                                  ;       Kernel Constants                                                        EKRN...
   399                                  ;-----------------------------------------------------------------------------------------------------------------------
   400                                  EKRNCODEBASE            equ     01000h                                          ;kernel base address (0000:1000)
   401                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   402                                  EKRNCODELEN             equ     05000h                                          ;kernel code size (1000h to 6000h)
   403                                  EKRNCODESRCADR          equ     0500h                                           ;kernel code offset to loader DS:
   404                                  ;-----------------------------------------------------------------------------------------------------------------------
   405                                  ;       Local Descriptor Table (LDT) Selectors                                  ELDT...
   406                                  ;-----------------------------------------------------------------------------------------------------------------------
   407                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   408                                  ;-----------------------------------------------------------------------------------------------------------------------
   409                                  ;       Message Identifiers                                                     EMSG...
   410                                  ;-----------------------------------------------------------------------------------------------------------------------
   411                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   412                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   413                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   414                                  ;=======================================================================================================================
   415                                  ;
   416                                  ;       Structures
   417                                  ;
   418                                  ;=======================================================================================================================
   419                                  ;-----------------------------------------------------------------------------------------------------------------------
   420                                  ;
   421                                  ;       MQUEUE
   422                                  ;
   423                                  ;       The MQUEUE structure maps memory used for a message queue.
   424                                  ;
   425                                  ;-----------------------------------------------------------------------------------------------------------------------
   426                                  struc                   MQUEUE
   427 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   428 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   429 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   430                                  endstruc
   431                                  ;-----------------------------------------------------------------------------------------------------------------------
   432                                  ;
   433                                  ;       OSDATA
   434                                  ;
   435                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   436                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   437                                  ;
   438                                  ;-----------------------------------------------------------------------------------------------------------------------
   439                                  struc                   OSDATA
   440 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   441 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   442 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   443 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   444 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   445 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   446 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   447 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   448 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   449 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   450 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   451 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   452 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   453 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   454 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   455 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   456 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   457 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   458 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   459 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   460 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   461 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   462 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   463 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   464 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   465 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   466 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   467 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   468 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   469 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   470 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   471 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   472 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   473 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   474 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   475 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   476 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   477 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   478 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   479 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   480 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   481 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   482 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   483 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   484 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   485 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   486 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   487 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   488 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   489 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   490 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   491 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   492 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   493 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   494 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   495 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   496 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   497 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   498 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   499 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   500 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   501 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   502 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   503 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   504 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   505 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   506 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   507 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   508 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   509 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   510 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   511 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   512 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   513 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   514 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   515 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   516 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   517 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   518 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   519 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   520 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   521 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   522 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   523 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   524 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   525 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   526 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   527 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   528 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   529 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   530 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   531 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   532 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   533 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   534 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   535 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   536 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   537 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   538 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   539 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   540 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   541                                  ;-----------------------------------------------------------------------------------------------------------------------
   542                                  ;
   543                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   544                                  ;
   545                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   546                                  ;
   547                                  ;-----------------------------------------------------------------------------------------------------------------------
   548                                  ECONDATA                equ     ($)
   549 00000800 <res 00000004>          wdConsolePanel          resd    1                                               ;console panel definition address
   550 00000804 <res 00000004>          wdConsoleField          resd    1                                               ;console field definition address
   551 00000808 <res 00000004>          wdConsoleInput          resd    1                                               ;console field input address
   552 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   553 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   554 000008AC <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   555 000008AD <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   556 000008AE <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   557 000008AF <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   558 000008B0 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   559 000008B1 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   560 000008B2 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   561 000008B3 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   562 000008B4 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   563 000008B5 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   564 000008B6 <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   565 000008B7 <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   566                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   567                                  ;-----------------------------------------------------------------------------------------------------------------------
   568                                  ;
   569                                  ;       End of OS Variables
   570                                  ;
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  endstruc
   573                                  ;-----------------------------------------------------------------------------------------------------------------------
   574                                  ;
   575                                  ;       Macros
   576                                  ;
   577                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   578                                  ;
   579                                  ;-----------------------------------------------------------------------------------------------------------------------
   580                                  %macro                  mint    1
   581                                  _%1                     equ     ($-$$) / EX86DESCLEN
   582                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   583                                  %endmacro
   584                                  %macro                  mtrap   1
   585                                  _%1                     equ     ($-$$) / EX86DESCLEN
   586                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   587                                  %endmacro
   588                                  %macro                  menter  1
   589                                  ?%1                     equ     ($-$$)
   590                                  %endmacro
   591                                  %macro                  tsvce   1
   592                                  e%1                     equ     ($-tsvc)/4
   593                                                          dd      %1
   594                                  %endmacro
   595                                  %ifdef BUILDBOOT
   596                                  ;=======================================================================================================================
   597                                  ;
   598                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   599                                  ;
   600                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   601                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   602                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   603                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   604                                  ;
   605                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   606                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   607                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   608                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   609                                  ;       immediately followed by a disk parameter table.
   610                                  ;
   611                                  ;=======================================================================================================================
   612                                                          cpu     8086                                            ;assume minimal CPU
   613                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   614                                                          bits    16                                              ;16-bit code at power-up
   615                                  %ifdef BUILDPREP
   616 00000000 E9FD01                  Boot                    jmp     word Prep                                       ;jump to preparation code
   617                                  %else
   618                                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   619                                  %endif
   620                                  ;-----------------------------------------------------------------------------------------------------------------------
   621                                  ;
   622                                  ;       Disk Parameter Table
   623                                  ;
   624                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   625                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   626                                  ;
   627                                  ;-----------------------------------------------------------------------------------------------------------------------
   628 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   629 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   630 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   631 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   632 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   633 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   634 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   635 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   636 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   637                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   638 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   639 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   640 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   641                                  ;
   642                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   643                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   644                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   645                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   646                                  ;       given several possible starting values for CS:IP.
   647                                  ;
   648                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   649 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   650                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   651 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   652 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   653 00000025 B104                                            mov     cl,4                                            ;shift count
   654 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   655 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   656 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   657                                  ;
   658                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   659                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   660                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   661                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   662                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   663                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   664                                  ;
   665 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   666 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   667 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   668 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   669 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   670                                  ;
   671                                  ;       Our boot addressability is now set up according to the following diagram.
   672                                  ;
   673                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   674                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   675                                  ;                               |  256 = 100h bytes                             |
   676                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   677                                  ;                               |  Boot Sector (vstart=0100h)                   |
   678                                  ;                               |  1 sector = 512 = 200h bytes                  |
   679                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   680                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   681                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   682                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   683                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   684                                  ;                               |  2 sectors = 1024 = 400h bytes
   685                                  ;                       009400  +-----------------------------------------------+ DS:1900
   686                                  ;
   687                                  ;       On entry, DL indicates the drive being booted from.
   688                                  ;
   689 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   690                                  ;
   691                                  ;       Compute directory i/o buffer address.
   692                                  ;
   693 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   694 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   695 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   696 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   697                                  ;
   698                                  ;       Compute segment where os.com will be loaded.
   699                                  ;
   700 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   701 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   702 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   703 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   704                                  ;
   705                                  ;       Set the video mode to 80 column, 25 row, text.
   706                                  ;
   707 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   708 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   709                                  ;
   710                                  ;       Write a message to the console so we know we have our addressability established.
   711                                  ;
   712 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   713 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   714                                  ;
   715                                  ;       Initialize the number of directory sectors to search.
   716                                  ;
   717 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   718 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   719                                  ;
   720                                  ;       Compute number of directory sectors and initialize overhead count.
   721                                  ;
   722 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   723 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   724 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   725 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   726                                  ;
   727                                  ;       Compute directory entries per sector.
   728                                  ;
   729 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   730 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   731 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   732                                  ;
   733                                  ;       Compute first logical directory sector and update overhead count.
   734                                  ;
   735 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   736 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   737 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   738 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   739 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   740 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   741                                  ;
   742                                  ;       Read directory sector.
   743                                  ;
   744 0000008E B001                    .30                     mov     al,1                                            ;sector count
   745 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   746 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   747 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   748                                  ;
   749                                  ;       Setup variables to search this directory sector.
   750                                  ;
   751 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   752 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   753 000000A1 7603                                            jna     .40                                             ;no, continue
   754 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   755 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   756 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   757 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   758                                  ;
   759                                  ;       Loop through directory sectors searching for kernel program.
   760                                  ;
   761 000000B1 56                      .50                     push    si                                              ;save kernel name address
   762 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   763 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   764 000000B6 FC                                              cld                                                     ;forward strings
   765 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   766 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   767 000000BA 5E                                              pop     si                                              ;restore kernel name address
   768 000000BB 7418                                            je      .60                                             ;exit loop if found
   769 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   770 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   771 000000C2 75ED                                            jnz     .50                                             ;next entry
   772                                  ;
   773                                  ;       Repeat search if we are not at the end of the directory.
   774                                  ;
   775 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   776 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   777 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   778 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   779 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   780                                  ;
   781                                  ;       If we find the kernel program in the directory, read the FAT.
   782                                  ;
   783 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   784 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   785 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   786 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   787 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   788 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   789                                  ;
   790                                  ;       Get the starting cluster of the kernel program and target address.
   791                                  ;
   792 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   793 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   794                                  ;
   795                                  ;       Read each program cluster into RAM.
   796                                  ;
   797 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   798 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   799 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   800 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   801 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   802 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   803 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   804 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   805 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   806                                  ;
   807                                  ;       Update buffer pointer for next cluster.
   808                                  ;
   809 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   810 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   811 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   812 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   813 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   814                                  ;
   815                                  ;       Compute next cluster number.
   816                                  ;
   817 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   818 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   819 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   820 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   821 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   822 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   823 00000120 83E701                                          and     di,1                                            ;get low bit
   824 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   825 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   826 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   827                                  ;
   828                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   829                                  ;
   830 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   831 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   832 00000130 B104                                            mov     cl,4                                            ;shift count
   833 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   834 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   835 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   836 0000013A 75B2                                            jne     .70                                             ;no, continue
   837                                  ;
   838                                  ;       Transfer control to the operating system program.
   839                                  ;
   840 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   841 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   842 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   843                                  ;
   844                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   845                                  ;
   846 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   847 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   848 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   849 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   850 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   851 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   852 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   853 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   854 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   855 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   856                                  ;
   857                                  ;       Try maxtries times to read sector.
   858                                  ;
   859 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   860 00000160 53                      .10                     push    bx                                              ;save buffer address
   861 00000161 51                                              push    cx                                              ;save retry count
   862 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   863 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   864 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   865 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   866 0000016F 59                                              pop     cx                                              ;restore retry count
   867 00000170 5B                                              pop     bx                                              ;restore buffer address
   868 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   869 00000173 E2EB                                            loop    .10                                             ;retry
   870                                  ;
   871                                  ;       Handle disk error: convert to ASCII and store in error string.
   872                                  ;
   873 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   874 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   875 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   876 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   877 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   878 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   879 00000183 7203                                            jb      .20                                             ;continue if numeral
   880 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   881 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   882 0000018A 7203                                            jb      .30                                             ;continue if numeral
   883 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   884 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   885 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   886 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   887                                  ;
   888                                  ;       Wait for a key press.
   889                                  ;
   890 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   891 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   892 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   893 0000019E FB                                              sti                                                     ;enable maskable interrupts
   894 0000019F F4                                              hlt                                                     ;wait for interrupt
   895 000001A0 EBF6                                            jmp     .10                                             ;repeat
   896                                  ;
   897                                  ;       Reset the system.
   898                                  ;
   899 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   900 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   901 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   902 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   903 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   904                                  ;
   905                                  ;       Display text message.
   906                                  ;
   907 000001AA FC                      BootPrint               cld                                                     ;forward strings
   908 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   909 000001AC 84C0                                            test    al,al                                           ;end of string?
   910 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   911 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   912 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   913 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   914 000001B6 C3                      BootReturn              ret                                                     ;return
   915                                  ;-----------------------------------------------------------------------------------------------------------------------
   916                                  ;
   917                                  ;       Constants
   918                                  ;
   919                                  ;-----------------------------------------------------------------------------------------------------------------------
   920 000001B7 90                                              align   2
   921 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   922 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   922 000001C3 4F4D               
   923 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   923 000001CE 530D0A00           
   924 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   924 000001DB 7220               
   925 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   926 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   926 000001E9 6700               
   927                                  ;-----------------------------------------------------------------------------------------------------------------------
   928                                  ;
   929                                  ;       Work Areas
   930                                  ;
   931                                  ;-----------------------------------------------------------------------------------------------------------------------
   932 000001EB 90                                              align   2
   933 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   934 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   935 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   936 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   937 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   938                                  wwReadCountCommand      equ     $                                               ;read count and command
   939 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   940 000001F7 02                      cbReadCommand           db      EBIOSFNREADSECTOR                               ;BIOS read disk fn code
   941                                  wwDriveHead             equ     $                                               ;drive, head (word)
   942 000001F8 00                      wbDrive                 db      0                                               ;drive
   943 000001F9 00                      wbHead                  db      0                                               ;head
   944                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   945 000001FA 00                                              db      0                                               ;sector
   946 000001FB 00                      wbTrack                 db      0                                               ;track
   947 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   948 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   949                                  %endif
   950                                  %ifdef BUILDPREP
   951                                  ;=======================================================================================================================
   952                                  ;
   953                                  ;       Diskette Preparation Code
   954                                  ;
   955                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   956                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   957                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   958                                  ;
   959                                  ;=======================================================================================================================
   960                                  ;
   961                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   962                                  ;
   963 00000200 BE[CC02]                Prep                    mov     si,czPrepMsg10                                  ;starting message address
   964 00000203 E8A4FF                                          call    BootPrint                                       ;display message
   965                                  ;
   966                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   967                                  ;
   968 00000206 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   969 00000208 CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   970 0000020A 7504                                            jnz     .20                                             ;continue if key pressed
   971 0000020C FB                                              sti                                                     ;enable interrupts
   972 0000020D F4                                              hlt                                                     ;wait for interrupt
   973 0000020E EBF6                                            jmp     .10                                             ;repeat
   974 00000210 3C0D                    .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   975 00000212 7407                                            je      .30                                             ;yes, branch
   976 00000214 3C1B                                            cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   977 00000216 75EE                                            jne     .10                                             ;no, repeat
   978 00000218 E9AB00                                          jmp     .120                                            ;yes, exit program
   979                                  ;
   980                                  ;       Display writing-sector message and patch the JMP instruction.
   981                                  ;
   982 0000021B BE[7004]                .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   983 0000021E E889FF                                          call    BootPrint                                       ;display message
   984 00000221 BB[0100]                                        mov     bx,Boot+1                                       ;address of JMP instruction operand
   985 00000224 B81B00                                          mov     ax,01Bh                                         ;address past disk parameter table
   986 00000227 8907                                            mov     [bx],ax                                         ;update the JMP instruction
   987                                  ;
   988                                  ;       Try to read the boot sector.
   989                                  ;
   990 00000229 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   991 0000022C 51                      .40                     push    cx                                              ;save remaining tries
   992 0000022D BB[780A]                                        mov     bx,wcPrepInBuf                                  ;input buffer address
   993 00000230 BA0000                                          mov     dx,0                                            ;head zero, drive zero
   994 00000233 B90100                                          mov     cx,1                                            ;track zero, sector one
   995 00000236 B001                                            mov     al,1                                            ;one sector
   996 00000238 B402                                            mov     ah,EBIOSFNREADSECTOR                            ;read function
   997 0000023A CD13                                            int     EBIOSINTDISKETTE                                ;attempt the read
   998 0000023C 59                                              pop     cx                                              ;restore remaining retries
   999 0000023D 7307                                            jnc     .50                                             ;skip ahead if successful
  1000 0000023F E2EB                                            loop    .40                                             ;try again
  1001 00000241 BE[A004]                                        mov     si,czPrepMsg20                                  ;read-error message address
  1002 00000244 EB2D                                            jmp     .70                                             ;branch to error routine
  1003                                  ;
  1004                                  ;       Copy diskette parms from input buffer to output buffer.
  1005                                  ;
  1006 00000246 BE[780A]                .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1007 00000249 83C60B                                          add     si,11                                           ;skip over JMP and system ID
  1008 0000024C BF[0000]                                        mov     di,Boot                                         ;output buffer address
  1009 0000024F 83C70B                                          add     di,11                                           ;skip over JMP and system ID
  1010 00000252 B91300                                          mov     cx,19                                           ;length of diskette parameters
  1011 00000255 FC                                              cld                                                     ;forward string copies
  1012 00000256 F3A4                                            rep     movsb                                           ;copy diskette parameters
  1013                                  ;
  1014                                  ;       Try to write boot sector to diskette.
  1015                                  ;
  1016 00000258 B90500                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1017 0000025B 51                      .60                     push    cx                                              ;save remaining tries
  1018 0000025C BB[0000]                                        mov     bx,Boot                                         ;output buffer address
  1019 0000025F BA0000                                          mov     dx,0                                            ;head zero, drive zero
  1020 00000262 B90100                                          mov     cx,1                                            ;track zero, sector one
  1021 00000265 B001                                            mov     al,1                                            ;one sector
  1022 00000267 B403                                            mov     ah,EBIOSFNWRITESECTOR                           ;write function
  1023 00000269 CD13                                            int     EBIOSINTDISKETTE                                ;attempt the write
  1024 0000026B 59                                              pop     cx                                              ;restore remaining retries
  1025 0000026C 7326                                            jnc     .100                                            ;skip ahead if successful
  1026 0000026E E2EB                                            loop    .60                                             ;try again
  1027 00000270 BE[EE04]                                        mov     si,czPrepMsg30                                  ;write-error message address
  1028                                  ;
  1029                                  ;       Convert the error code to ASCII and display the error message.
  1030                                  ;
  1031 00000273 50                      .70                     push    ax                                              ;save error code
  1032 00000274 88E0                                            mov     al,ah                                           ;copy error code
  1033 00000276 B400                                            mov     ah,0                                            ;AX = error code
  1034 00000278 B210                                            mov     dl,10h                                          ;hexadecimal divisor
  1035 0000027A F6FA                                            idiv    dl                                              ;AL = hi-order, AH = lo-order
  1036 0000027C 0D3030                                          or      ax,03030h                                       ;add ASCII zone digits
  1037 0000027F 80FC3A                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1038 00000282 7203                                            jb      .80                                             ;yes, continue
  1039 00000284 80C407                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1040 00000287 3C3A                    .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1041 00000289 7202                                            jb      .90                                             ;yes, continue
  1042 0000028B 0407                                            add     al,7                                            ;no, make ASCII
  1043 0000028D 894411                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1044 00000290 E817FF                                          call    BootPrint                                       ;write error message
  1045 00000293 58                                              pop     ax                                              ;restore error code
  1046                                  ;
  1047                                  ;       Display the completion message.
  1048                                  ;
  1049 00000294 BE[3A05]                .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1050 00000297 88E0                                            mov     al,ah                                           ;BIOS return code
  1051 00000299 3C00                                            cmp     al,0                                            ;success?
  1052 0000029B 7426                                            je      .110                                            ;yes, continue
  1053 0000029D BE[D905]                                        mov     si,czPrepMsgErr1                                ;disk parameter error message
  1054 000002A0 3C01                                            cmp     al,1                                            ;disk parameter error?
  1055 000002A2 741F                                            je      .110                                            ;yes, continue
  1056 000002A4 BE[A306]                                        mov     si,czPrepMsgErr2                                ;address mark not found message
  1057 000002A7 3C02                                            cmp     al,2                                            ;address mark not found?
  1058 000002A9 7418                                            je      .110                                            ;yes, continue
  1059 000002AB BE[2C07]                                        mov     si,czPrepMsgErr3                                ;protected disk message
  1060 000002AE 3C03                                            cmp     al,3                                            ;protected disk?
  1061 000002B0 7411                                            je      .110                                            ;yes, continue
  1062 000002B2 BE[E607]                                        mov     si,czPrepMsgErr6                                ;diskette removed message
  1063 000002B5 3C06                                            cmp     al,6                                            ;diskette removed?
  1064 000002B7 740A                                            je      .110                                            ;yes, continue
  1065 000002B9 BE[1609]                                        mov     si,czPrepMsgErr80                               ;drive timed out message
  1066 000002BC 3C80                                            cmp     al,80H                                          ;drive timed out?
  1067 000002BE 7403                                            je      .110                                            ;yes, continue
  1068 000002C0 BE[C709]                                        mov     si,czPrepMsgErrXX                               ;unknown error message
  1069 000002C3 E8E4FE                  .110                    call    BootPrint                                       ;display result message
  1070 000002C6 B8004C                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1071 000002C9 CD21                                            int     021h                                            ;terminate DOS program
  1072 000002CB C3                                              ret                                                     ;return (should not execute)
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074                                  ;
  1075                                  ;       Diskette Preparation Messages
  1076                                  ;
  1077                                  ;-----------------------------------------------------------------------------------------------------------------------
  1078 000002CC 0D0A437573746F6D4F-     czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1078 000002D5 5320426F6F742D4469-
  1078 000002DE 736B65747465205072-
  1078 000002E7 657061726174696F6E-
  1078 000002F0 2050726F6772616D   
  1079 000002F8 0D0A436F7079726967-                             db      13,10,"Copyright (C) 2010-2019 David J. Walling. All rights reserved."
  1079 00000301 687420284329203230-
  1079 0000030A 31302D323031392044-
  1079 00000313 61766964204A2E2057-
  1079 0000031C 616C6C696E672E2041-
  1079 00000325 6C6C20726967687473-
  1079 0000032E 207265736572766564-
  1079 00000337 2E                 
  1080 00000338 0D0A                                            db      13,10
  1081 0000033A 0D0A54686973207072-                             db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1081 00000343 6F6772616D206F7665-
  1081 0000034C 727772697465732074-
  1081 00000355 686520626F6F742073-
  1081 0000035E 6563746F72206F6620-
  1081 00000367 61206469736B657474-
  1081 00000370 652077697468207374-
  1081 00000379 617274757020636F64-
  1081 00000382 652074686174       
  1082 00000388 0D0A77696C6C206C6F-                             db      13,10,"will load the operating system into memory when the computer is restarted."
  1082 00000391 616420746865206F70-
  1082 0000039A 65726174696E672073-
  1082 000003A3 797374656D20696E74-
  1082 000003AC 6F206D656D6F727920-
  1082 000003B5 7768656E2074686520-
  1082 000003BE 636F6D707574657220-
  1082 000003C7 697320726573746172-
  1082 000003D0 7465642E           
  1083 000003D4 0D0A546F2070726F63-                             db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1083 000003DD 6565642C20706C6163-
  1083 000003E6 65206120666F726D61-
  1083 000003EF 74746564206469736B-
  1083 000003F8 6574746520696E746F-
  1083 00000401 20647269766520413A-
  1083 0000040A 20616E642070726573-
  1083 00000413 732074686520456E74-
  1083 0000041C 6572206B65792E     
  1084 00000423 0D0A546F2065786974-                             db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1084 0000042C 20746869732070726F-
  1084 00000435 6772616D2077697468-
  1084 0000043E 6F7574207072657061-
  1084 00000447 72696E672061206469-
  1084 00000450 736B657474652C2070-
  1084 00000459 726573732074686520-
  1084 00000462 457363617065206B65-
  1084 0000046B 792E               
  1085 0000046D 0D0A00                                          db      13,10,0
  1086 00000470 0D0A57726974696E67-     czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1086 00000479 2074686520626F6F74-
  1086 00000482 20736563746F722074-
  1086 0000048B 6F2074686520646973-
  1086 00000494 6B65747465202E2E2E 
  1087 0000049D 0D0A00                                          db      13,10,0
  1088 000004A0 0D0A54686520657272-     czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1088 000004A9 6F722D636F6465202E-
  1088 000004B2 2E2077617320726574-
  1088 000004BB 75726E65642066726F-
  1088 000004C4 6D207468652042494F-
  1088 000004CD 53207768696C652072-
  1088 000004D6 656164696E67206672-
  1088 000004DF 6F6D20746865206469-
  1088 000004E8 736B2E             
  1089 000004EB 0D0A00                                          db      13,10,0
  1090 000004EE 0D0A54686520657272-     czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1090 000004F7 6F722D636F6465202E-
  1090 00000500 2E2077617320726574-
  1090 00000509 75726E65642066726F-
  1090 00000512 6D207468652042494F-
  1090 0000051B 53207768696C652077-
  1090 00000524 726974696E6720746F-
  1090 0000052D 20746865206469736B-
  1090 00000536 2E                 
  1091 00000537 0D0A00                                          db      13,10,0
  1092 0000053A 0D0A54686520626F6F-     czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1092 00000543 742D736563746F7220-
  1092 0000054C 776173207772697474-
  1092 00000555 656E20746F20746865-
  1092 0000055E 206469736B65747465-
  1092 00000567 2E204265666F726520-
  1092 00000570 626F6F74696E672079-
  1092 00000579 6F757220636F6D7075-
  1092 00000582 7465722077697468   
  1093 0000058A 0D0A74686973206469-                             db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1093 00000593 736B657474652C206D-
  1093 0000059C 616B65207375726520-
  1093 000005A5 746861742074686520-
  1093 000005AE 66696C65204F532E43-
  1093 000005B7 4F4D20697320636F70-
  1093 000005C0 696564206F6E746F20-
  1093 000005C9 746865206469736B65-
  1093 000005D2 7474652E           
  1094 000005D6 0D0A00                                          db      13,10,0
  1095 000005D9 0D0A2830312920496E-     czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1095 000005E2 76616C696420446973-
  1095 000005EB 6B20506172616D6574-
  1095 000005F4 6572               
  1096 000005F6 0D0A54686973206973-                             db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1096 000005FF 20616E20696E746572-
  1096 00000608 6E616C206572726F72-
  1096 00000611 206361757365642062-
  1096 0000061A 7920616E20696E7661-
  1096 00000623 6C69642076616C7565-
  1096 0000062C 206265696E67207061-
  1096 00000635 7373656420746F2061-
  1096 0000063E 2073797374656D     
  1097 00000645 0D0A66756E6374696F-                             db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1097 0000064E 6E2E20546865204F53-
  1097 00000657 424F4F542E434F4D20-
  1097 00000660 66696C65206D617920-
  1097 00000669 626520636F72727570-
  1097 00000672 742E20436F7079206F-
  1097 0000067B 7220646F776E6C6F61-
  1097 00000684 64207468652066696C-
  1097 0000068D 6520616761696E     
  1098 00000694 0D0A616E6420726574-                             db      13,10,"and retry."
  1098 0000069D 72792E             
  1099 000006A0 0D0A00                                          db      13,10,0
  1100 000006A3 0D0A28303229204164-     czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1100 000006AC 6472657373204D6172-
  1100 000006B5 6B204E6F7420466F75-
  1100 000006BE 6E64               
  1101 000006C0 0D0A54686973206572-                             db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1101 000006C9 726F7220696E646963-
  1101 000006D2 617465732061207068-
  1101 000006DB 79736963616C207072-
  1101 000006E4 6F626C656D20776974-
  1101 000006ED 682074686520666C6F-
  1101 000006F6 707079206469736B65-
  1101 000006FF 7474652E20506C6561-
  1101 00000708 7365207265747279   
  1102 00000710 0D0A7573696E672061-                             db      13,10,"using another diskette."
  1102 00000719 6E6F74686572206469-
  1102 00000722 736B657474652E     
  1103 00000729 0D0A00                                          db      13,10,0
  1104 0000072C 0D0A28303329205072-     czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1104 00000735 6F7465637465642044-
  1104 0000073E 69736B             
  1105 00000741 0D0A54686973206572-                             db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1105 0000074A 726F72206973207573-
  1105 00000753 75616C6C7920636175-
  1105 0000075C 736564206279206174-
  1105 00000765 74656D7074696E6720-
  1105 0000076E 746F20777269746520-
  1105 00000777 746F20612077726974-
  1105 00000780 652D70726F74656374-
  1105 00000789 6564206469736B2E   
  1106 00000791 0D0A436865636B2074-                             db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1106 0000079A 686520277772697465-
  1106 000007A3 2D70726F7465637427-
  1106 000007AC 2073657474696E6720-
  1106 000007B5 6F6E20746865206469-
  1106 000007BE 736B206F7220726574-
  1106 000007C7 7279207573696E6720-
  1106 000007D0 7573696E6720616E6F-
  1106 000007D9 74686572206469736B-
  1106 000007E2 2E                 
  1107 000007E3 0D0A00                                          db      13,10,0
  1108 000007E6 0D0A28303629204469-     czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1108 000007EF 736B65747465205265-
  1108 000007F8 6D6F766564         
  1109 000007FD 0D0A54686973206572-                             db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1109 00000806 726F72206D61792069-
  1109 0000080F 6E6469636174652074-
  1109 00000818 686174207468652066-
  1109 00000821 6C6F70707920646973-
  1109 0000082A 6B6574746520686173-
  1109 00000833 206265656E2072656D-
  1109 0000083C 6F7665642066726F6D-
  1109 00000845 20746865           
  1110 00000849 0D0A6469736B657474-                             db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1110 00000852 652064726976652E20-
  1110 0000085B 4F6E20736F6D652073-
  1110 00000864 797374656D732C2074-
  1110 0000086D 68697320636F646520-
  1110 00000876 6D617920616C736F20-
  1110 0000087F 6F6363757220696620-
  1110 00000888 746865206469736B65-
  1110 00000891 747465206973       
  1111 00000897 0D0A27777269746520-                             db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1111 000008A0 70726F746563746564-
  1111 000008A9 2E2720506C65617365-
  1111 000008B2 207665726966792074-
  1111 000008BB 686174207468652064-
  1111 000008C4 69736B657474652069-
  1111 000008CD 73206E6F7420777269-
  1111 000008D6 74652D70726F746563-
  1111 000008DF 74656420616E64     
  1112 000008E6 0D0A69732070726F70-                             db      13,10,"is properly inserted in the diskette drive."
  1112 000008EF 65726C7920696E7365-
  1112 000008F8 7274656420696E2074-
  1112 00000901 6865206469736B6574-
  1112 0000090A 74652064726976652E 
  1113 00000913 0D0A00                                          db      13,10,0
  1114 00000916 0D0A28383029204472-     czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1114 0000091F 6976652054696D6564-
  1114 00000928 204F7574           
  1115 0000092C 0D0A54686973206572-                             db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1115 00000935 726F7220757375616C-
  1115 0000093E 6C7920696E64696361-
  1115 00000947 746573207468617420-
  1115 00000950 6E6F206469736B6574-
  1115 00000959 746520697320696E20-
  1115 00000962 746865206469736B65-
  1115 0000096B 747465206472697665-
  1115 00000974 2E20506C65617365   
  1116 0000097C 0D0A6D616B65207375-                             db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1116 00000985 726520746861742074-
  1116 0000098E 6865206469736B6574-
  1116 00000997 74652069732070726F-
  1116 000009A0 7065726C7920736561-
  1116 000009A9 74656420696E207468-
  1116 000009B2 652064726976652061-
  1116 000009BB 6E642072657472792E 
  1117 000009C4 0D0A00                                          db      13,10,0
  1118 000009C7 0D0A283F3F2920556E-     czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1118 000009D0 6B6E6F776E20457272-
  1118 000009D9 6F72               
  1119 000009DB 0D0A54686520657272-                             db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1119 000009E4 6F722D636F64652072-
  1119 000009ED 657475726E65642062-
  1119 000009F6 79207468652042494F-
  1119 000009FF 53206973206E6F7420-
  1119 00000A08 61207265636F676E69-
  1119 00000A11 7A6564206572726F72-
  1119 00000A1A 2E20506C6561736520-
  1119 00000A23 636F6E73756C74     
  1120 00000A2A 0D0A796F757220636F-                             db      13,10,"your computer's technical reference for a description of this error code."
  1120 00000A33 6D7075746572277320-
  1120 00000A3C 746563686E6963616C-
  1120 00000A45 207265666572656E63-
  1120 00000A4E 6520666F7220612064-
  1120 00000A57 65736372697074696F-
  1120 00000A60 6E206F662074686973-
  1120 00000A69 206572726F7220636F-
  1120 00000A72 64652E             
  1121 00000A75 0D0A00                                          db      13,10,0
  1122                                  wcPrepInBuf             equ     $
  1123                                  %endif
  1124                                  %ifdef BUILDDISK
  1125                                  ;=======================================================================================================================
  1126                                  ;
  1127                                  ;       File Allocation Tables
  1128                                  ;
  1129                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1130                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1131                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1132                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1133                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1134                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1135                                  ;       the last cluster in the chain.
  1136                                  ;
  1137                                  ;       Every three bytes encode two FAT entries as follows:
  1138                                  ;
  1139                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1140                                  ;
  1141                                  ;=======================================================================================================================
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  ;
  1144                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1145                                  ;
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  section                 fat1                                                    ;first copy of FAT
  1148                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1149                                                          db      005h,060h,000h, 007h,080h,000h
  1150                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1151                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1152                                                          db      011h,020h,001h, 013h,040h,001h
  1153                                                          db      015h,060h,001h, 017h,080h,001h
  1154                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1155                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1156                                                          db      021h,020h,002h, 023h,040h,002h
  1157                                                          db      025h,060h,002h, 027h,080h,002h
  1158                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1159                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1160                                  ;-----------------------------------------------------------------------------------------------------------------------
  1161                                  ;
  1162                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1163                                  ;
  1164                                  ;-----------------------------------------------------------------------------------------------------------------------
  1165                                  section                 fat2                                                    ;second copy of FAT
  1166                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1167                                                          db      005h,060h,000h, 007h,080h,000h
  1168                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1169                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1170                                                          db      011h,020h,001h, 013h,040h,001h
  1171                                                          db      015h,060h,001h, 017h,080h,001h
  1172                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1173                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1174                                                          db      021h,020h,002h, 023h,040h,002h
  1175                                                          db      025h,060h,002h, 027h,080h,002h
  1176                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1177                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1178                                  ;-----------------------------------------------------------------------------------------------------------------------
  1179                                  ;
  1180                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1181                                  ;
  1182                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1183                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1184                                  ;       copy.
  1185                                  ;
  1186                                  ;-----------------------------------------------------------------------------------------------------------------------
  1187                                  section                 dir                                                     ;diskette directory
  1188                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1189                                                          db      020h                                            ;attribute (archive bit set)
  1190                                                          times   10 db 0                                         ;unused
  1191                                                          dw      0h                                              ;time
  1192                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1193                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1194                                                          dw      2                                               ;first cluster
  1195                                                          dd      05400h                                          ;file size
  1196                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1197                                  %endif
  1198                                  %ifdef BUILDCOM
  1199                                  ;=======================================================================================================================
  1200                                  ;
  1201                                  ;       OS.COM
  1202                                  ;
  1203                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1204                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1205                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1206                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1207                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1208                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1209                                  ;
  1210                                  ;       Our loader addressability is set up according to the following diagram.
  1211                                  ;
  1212                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1213                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1214                                  ;                               |  256 = 100h bytes                             |
  1215                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1216                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1217                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1218                                  ;                       007e00  +-----------------------------------------------+
  1219                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1220                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1221                                  ;                               |                                               |
  1222                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1223                                  ;                               |                                               |
  1224                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1225                                  ;                               |  Loader Code                                  |
  1226                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1227                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1228                                  ;
  1229                                  ;=======================================================================================================================
  1230                                  ;-----------------------------------------------------------------------------------------------------------------------
  1231                                  ;
  1232                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1233                                  ;
  1234                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1235                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1236                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1237                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1238                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1239                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1240                                  ;       disk, we can assume that the initial IP is 0x100 and not perform any absolute address fix-ups on our segment
  1241                                  ;       registers.
  1242                                  ;
  1243                                  ;-----------------------------------------------------------------------------------------------------------------------
  1244                                                          cpu     8086                                            ;assume minimal CPU
  1245                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1246                                                          bits    16                                              ;this is 16-bit code
  1247                                  Loader                  push    cs                                              ;use the code segment
  1248                                                          pop     ds                                              ;...as our data segment
  1249                                                          push    cs                                              ;use the code segment
  1250                                                          pop     es                                              ;...as our extra segment
  1251                                  ;
  1252                                  ;       Write a message to the console so we know we have our addressability established.
  1253                                  ;
  1254                                                          mov     si,czStartingMsg                                ;starting message
  1255                                                          call    PutTTYString                                    ;display loader message
  1256                                  ;
  1257                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1258                                  ;
  1259                                                          call    GetCPUType                                      ;AL = cpu type
  1260                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1261                                                          cmp     al,3                                            ;80386+?
  1262                                                          jb      LoaderExit                                      ;no, exit with error message
  1263                                                          cpu     386                                             ;allow 80386 instructions
  1264                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1265                                                          call    PutTTYString                                    ;display message
  1266                                  ;
  1267                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1268                                  ;
  1269                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1270                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1271                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1272                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1273                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1274                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1275                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1276                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1277                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1278                                                          call    PutTTYString                                    ;display message
  1279                                  ;
  1280                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1281                                  ;
  1282                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1283                                                          pop     es                                              ;... as target segment
  1284                                                          xor     di,di                                           ;ES:DI = target address
  1285                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1286                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1287                                                          cld                                                     ;forward strings
  1288                                                          rep     movsb                                           ;copy kernel image
  1289                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1290                                                          call    PutTTYString                                    ;display message
  1291                                  ;
  1292                                  ;       Switch to protected mode.
  1293                                  ;
  1294                                                          xor     si,si                                           ;ES:SI = gdt addr
  1295                                                          mov     ss,si                                           ;protected mode ss
  1296                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1297                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1298                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1299                                                          mov     dx,001Fh                                        ;outer delay loop count
  1300                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1301                                                          loop    $                                               ;wait out pending interrupts
  1302                                                          dec     dx                                              ;restore outer loop count
  1303                                                          jnz     .10                                             ;continue outer loop
  1304                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1305                                  ;
  1306                                  ;       Enable hardware and maskable interrupts.
  1307                                  ;
  1308                                                          xor     al,al                                           ;enable all registers code
  1309                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1310                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1311                                                          sti                                                     ;enable maskable interrupts
  1312                                  ;
  1313                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1314                                  ;
  1315                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1316                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1317                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;
  1320                                  ;       Routine:        LoaderExit
  1321                                  ;
  1322                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1323                                  ;
  1324                                  ;       In:             DS:SI   string address
  1325                                  ;
  1326                                  ;-----------------------------------------------------------------------------------------------------------------------
  1327                                  LoaderExit              call    PutTTYString                                    ;display error message
  1328                                  ;
  1329                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1330                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1331                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a max CPU condition. So, instead,
  1332                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1333                                  ;       The STI instruction enables maskable interrupts, including the keyboard. The CPU assures that the
  1334                                  ;       instruction immediately following STI will be executed before any interrupt is serviced.
  1335                                  ;
  1336                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1337                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1338                                                          jnz     .40                                             ;exit if key pressed
  1339                                                          sti                                                     ;enable maskable interrupts
  1340                                                          hlt                                                     ;wait for interrupt
  1341                                                          jmp     .30                                             ;repeat until keypress
  1342                                  ;
  1343                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1344                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1345                                  ;       HLT until the system resets.
  1346                                  ;
  1347                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1348                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1349                                  .50                     sti                                                     ;enable maskable interrupts
  1350                                                          hlt                                                     ;stop until reset, int, nmi
  1351                                                          jmp     .50                                             ;loop until restart kicks in
  1352                                  ;-----------------------------------------------------------------------------------------------------------------------
  1353                                  ;
  1354                                  ;       Routine:        GetCPUType
  1355                                  ;
  1356                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1357                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1358                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1359                                  ;
  1360                                  ;       Out:            AX      0 = 808x, v20, etc.
  1361                                  ;                               1 = 80186
  1362                                  ;                               2 = 80286
  1363                                  ;                               3 = 80386
  1364                                  ;
  1365                                  ;-----------------------------------------------------------------------------------------------------------------------
  1366                                  GetCPUType              mov     al,1                                            ;AL = 1
  1367                                                          mov     cl,32                                           ;shift count
  1368                                                          shr     al,cl                                           ;try a 32-bit shift
  1369                                                          or      al,al                                           ;did the shift happen?
  1370                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1371                                                          cpu     186
  1372                                                          push    sp                                              ;save stack pointer
  1373                                                          pop     cx                                              ;...into cx
  1374                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1375                                                          jne     .10                                             ;yes, cpu is 80186
  1376                                                          cpu     286
  1377                                                          inc     ax                                              ;AX = 2
  1378                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1379                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1380                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1381                                                          jz      .10                                             ;yes, cpu is 80286
  1382                                                          inc     ax                                              ;AX = 3
  1383                                  .10                     ret                                                     ;return
  1384                                  ;-----------------------------------------------------------------------------------------------------------------------
  1385                                  ;
  1386                                  ;       Routine:        PutTTYString
  1387                                  ;
  1388                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1389                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1390                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1391                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1392                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1393                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1394                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1395                                  ;                       to LODSB is not needed.
  1396                                  ;
  1397                                  ;       In:             DS:SI   address of string
  1398                                  ;
  1399                                  ;       Out:            DF      0
  1400                                  ;                       ZF      1
  1401                                  ;                       AL      0
  1402                                  ;
  1403                                  ;-----------------------------------------------------------------------------------------------------------------------
  1404                                  PutTTYString            cld                                                     ;forward strings
  1405                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1406                                                          test    al,al                                           ;end of string?
  1407                                                          jz      .20                                             ;... yes, exit our loop
  1408                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1409                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1410                                                          jmp     .10                                             ;repeat until done
  1411                                  .20                     ret                                                     ;return
  1412                                  ;-----------------------------------------------------------------------------------------------------------------------
  1413                                  ;
  1414                                  ;       Loader Data
  1415                                  ;
  1416                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1417                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1418                                  ;
  1419                                  ;-----------------------------------------------------------------------------------------------------------------------
  1420                                                          align   2
  1421                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1422                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1423                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1424                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1425                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1426                                                          db      "Please press any key to restart the computer.",13,10,0
  1427                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1428                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1429                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1430                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1431                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1432                                  ;=======================================================================================================================
  1433                                  ;
  1434                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1435                                  ;
  1436                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1437                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1438                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1439                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1440                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1441                                  ;
  1442                                  ;=======================================================================================================================
  1443                                  ;=======================================================================================================================
  1444                                  ;
  1445                                  ;       Kernel Tables
  1446                                  ;
  1447                                  ;=======================================================================================================================
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  ;
  1450                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1451                                  ;
  1452                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1453                                  ;       first descriptor must be all nulls.
  1454                                  ;
  1455                                  ;       6   5         4         3         2         1         0
  1456                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1457                                  ;       ----------------------------------------------------------------
  1458                                  ;       h......hffffmmmma......ab......................bn..............n
  1459                                  ;
  1460                                  ;       h......h                                                                hi-order base address (bits 24-31)
  1461                                  ;               ffff                                                            flags
  1462                                  ;                   mmmm                                                        hi-order limit (bits 16-19)
  1463                                  ;                       a......a                                                access
  1464                                  ;                               b......................b                        lo-order base address (bits 0-23)
  1465                                  ;                                                       n..............n        lo-order limit (bits 0-15)
  1466                                  ;
  1467                                  ;       00000000                                                                all areas have base addresses below 2^24
  1468                                  ;               0...                                                            single-byte size granularity
  1469                                  ;               1...                                                            4-kilobyte size granularity
  1470                                  ;               .0..                                                            16-bit default for code segments
  1471                                  ;               .1..                                                            32-bit default for code segments
  1472                                  ;               ..0.                                                            intel-reserved; should be zero
  1473                                  ;               ...0                                                            available for operating system use
  1474                                  ;                   0000                                                        segment is less than 2^16 in size
  1475                                  ;                   1111                                                        segment is greater than 2^24-2 in size
  1476                                  ;                       1.......                                                segment is present in memory
  1477                                  ;                       .00.....                                                segment is of privilege level 0
  1478                                  ;                       ...0....                                                segment is of system or gate type
  1479                                  ;                       ...00010                                                local decriptor table (LDT)
  1480                                  ;                       ...01001                                                task state segment (TSS) available
  1481                                  ;                       ...01011                                                task state segment (TSS) busy
  1482                                  ;                       ...10...                                                data segment
  1483                                  ;                       ...10011                                                writable data (accessed)
  1484                                  ;                       ...11...                                                code segment
  1485                                  ;                       ...11011                                                readable non-conforming code (accessed)
  1486                                  ;
  1487                                  ;-----------------------------------------------------------------------------------------------------------------------
  1488                                  section                 gdt                                                     ;global descriptor table
  1489                                                          dq      0000000000000000h                               ;00 required null selector
  1490                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1491                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1492                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1493                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1494                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1495                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1496                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1497                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1498                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1499                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1500                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1501                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1502                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1503                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  ;
  1506                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1507                                  ;
  1508                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1509                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1510                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1511                                  ;
  1512                                  ;       6   5         4         3         2         1         0
  1513                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1514                                  ;       ----------------------------------------------------------------
  1515                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1516                                  ;
  1517                                  ;       h...h   high-order offset (bits 16-31)
  1518                                  ;       P       present (0=unused interrupt)
  1519                                  ;       zz      descriptor privilege level
  1520                                  ;       S       storage segment (must be zero for IDT)
  1521                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1522                                  ;       S...S   handling code selector in GDT
  1523                                  ;       l...l   lo-order offset (bits 0-15)
  1524                                  ;
  1525                                  ;-----------------------------------------------------------------------------------------------------------------------
  1526                                  section                 idt                                                     ;interrupt descriptor table
  1527                                                          mtrap   dividebyzero                                    ;00 divide by zero
  1528                                                          mtrap   singlestep                                      ;01 single step
  1529                                                          mtrap   nmi                                             ;02 non-maskable
  1530                                                          mtrap   break                                           ;03 break
  1531                                                          mtrap   into                                            ;04 into
  1532                                                          mtrap   bounds                                          ;05 bounds
  1533                                                          mtrap   badopcode                                       ;06 bad op code
  1534                                                          mtrap   nocoproc                                        ;07 no coprocessor
  1535                                                          mtrap   doublefault                                     ;08 double-fault
  1536                                                          mtrap   operand                                         ;09 operand
  1537                                                          mtrap   badtss                                          ;0a bad TSS
  1538                                                          mtrap   notpresent                                      ;0b not-present
  1539                                                          mtrap   stacklimit                                      ;0c stack limit
  1540                                                          mtrap   protection                                      ;0d general protection fault
  1541                                                          mtrap   int14                                           ;0e (reserved)
  1542                                                          mtrap   int15                                           ;0f (reserved)
  1543                                                          mtrap   coproccalc                                      ;10 (reserved)
  1544                                                          mtrap   int17                                           ;11 (reserved)
  1545                                                          mtrap   int18                                           ;12 (reserved)
  1546                                                          mtrap   int19                                           ;13 (reserved)
  1547                                                          mtrap   int20                                           ;14 (reserved)
  1548                                                          mtrap   int21                                           ;15 (reserved)
  1549                                                          mtrap   int22                                           ;16 (reserved)
  1550                                                          mtrap   int23                                           ;17 (reserved)
  1551                                                          mtrap   int24                                           ;18 (reserved)
  1552                                                          mtrap   int25                                           ;19 (reserved)
  1553                                                          mtrap   int26                                           ;1a (reserved)
  1554                                                          mtrap   int27                                           ;1b (reserved)
  1555                                                          mtrap   int28                                           ;1c (reserved)
  1556                                                          mtrap   int29                                           ;1d (reserved)
  1557                                                          mtrap   int30                                           ;1e (reserved)
  1558                                                          mtrap   int31                                           ;1f (reserved)
  1559                                                          mint    clocktick                                       ;20 IRQ0 clock tick
  1560                                                          mint    keyboard                                        ;21 IRQ1 keyboard
  1561                                                          mint    iochannel                                       ;22 IRQ2 second 8259A cascade
  1562                                                          mint    com2                                            ;23 IRQ3 com2
  1563                                                          mint    com1                                            ;24 IRQ4 com1
  1564                                                          mint    lpt2                                            ;25 IRQ5 lpt2
  1565                                                          mint    diskette                                        ;26 IRQ6 diskette
  1566                                                          mint    lpt1                                            ;27 IRQ7 lpt1
  1567                                                          mint    rtclock                                         ;28 IRQ8 real-time clock
  1568                                                          mint    retrace                                         ;29 IRQ9 CGA vertical retrace
  1569                                                          mint    irq10                                           ;2a IRQA (reserved)
  1570                                                          mint    irq11                                           ;2b IRQB (reserved)
  1571                                                          mint    ps2mouse                                        ;2c IRQC ps/2 mouse
  1572                                                          mint    coprocessor                                     ;2d IRQD coprocessor
  1573                                                          mint    fixeddisk                                       ;2e IRQE fixed disk
  1574                                                          mint    irq15                                           ;2f IRQF (reserved)
  1575                                                          mtrap   svc                                             ;30 OS services
  1576                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1577                                  ;=======================================================================================================================
  1578                                  ;
  1579                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1580                                  ;
  1581                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1582                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1583                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1584                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1585                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1586                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1587                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1588                                  ;
  1589                                  ;=======================================================================================================================
  1590                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1591                                                          cpu     386                                             ;allow 80386 instructions
  1592                                                          bits    32                                              ;this is 32-bit code
  1593                                  ;=======================================================================================================================
  1594                                  ;
  1595                                  ;       CPU Interrupt Handlers
  1596                                  ;
  1597                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1598                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1599                                  ;
  1600                                  ;=======================================================================================================================
  1601                                  ;-----------------------------------------------------------------------------------------------------------------------
  1602                                  ;
  1603                                  ;       INT0    Divide By Zero
  1604                                  ;
  1605                                  ;-----------------------------------------------------------------------------------------------------------------------
  1606                                                          menter  dividebyzero                                    ;divide by zero
  1607                                                          jmp     ReportInterrupt                                 ;report interrupt
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  ;
  1610                                  ;       INT1    Single Step
  1611                                  ;
  1612                                  ;-----------------------------------------------------------------------------------------------------------------------
  1613                                                          menter  singlestep                                      ;single step
  1614                                                          jmp     ReportInterrupt                                 ;report interrupt
  1615                                  ;-----------------------------------------------------------------------------------------------------------------------
  1616                                  ;
  1617                                  ;       INT2    Non-Maskable Interrupt
  1618                                  ;
  1619                                  ;-----------------------------------------------------------------------------------------------------------------------
  1620                                                          menter  nmi                                             ;non-maskable
  1621                                                          jmp     ReportInterrupt                                 ;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;       INT3    Break
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                                          menter  break                                           ;break
  1628                                                          jmp     ReportInterrupt                                 ;report interrupt
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                  ;
  1631                                  ;       INT4    Into
  1632                                  ;
  1633                                  ;-----------------------------------------------------------------------------------------------------------------------
  1634                                                          menter  into                                            ;into
  1635                                                          jmp     ReportInterrupt                                 ;report interrupt
  1636                                  ;-----------------------------------------------------------------------------------------------------------------------
  1637                                  ;
  1638                                  ;       INT5    Bounds
  1639                                  ;
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                                          menter  bounds                                          ;bounds
  1642                                                          jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT6    Bad Operation Code
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  badopcode                                       ;bad opcode interrupt
  1649                                                          jmp     ReportInterrupt                                 ;report interrupt
  1650                                  ;-----------------------------------------------------------------------------------------------------------------------
  1651                                  ;
  1652                                  ;       INT7    No Coprocessor
  1653                                  ;
  1654                                  ;-----------------------------------------------------------------------------------------------------------------------
  1655                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1656                                                          jmp     ReportInterrupt                                 ;report interrupt
  1657                                  ;-----------------------------------------------------------------------------------------------------------------------
  1658                                  ;
  1659                                  ;       INT8    Double Fault
  1660                                  ;
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                                          menter  doublefault                                     ;doublefault interrupt
  1663                                                          jmp     ReportInterrupt                                 ;report interrupt
  1664                                  ;-----------------------------------------------------------------------------------------------------------------------
  1665                                  ;
  1666                                  ;       INT9    Operand
  1667                                  ;
  1668                                  ;-----------------------------------------------------------------------------------------------------------------------
  1669                                                          menter  operand                                         ;operand interrupt
  1670                                                          jmp     ReportInterrupt                                 ;report interrupt
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  ;
  1673                                  ;       INT10   Bad Task State Segment
  1674                                  ;
  1675                                  ;-----------------------------------------------------------------------------------------------------------------------
  1676                                                          menter  badtss                                          ;bad TSS interrupt
  1677                                                          jmp     ReportInterrupt                                 ;report interrupt
  1678                                  ;-----------------------------------------------------------------------------------------------------------------------
  1679                                  ;
  1680                                  ;       INT11   Not Present
  1681                                  ;
  1682                                  ;-----------------------------------------------------------------------------------------------------------------------
  1683                                                          menter  notpresent                                      ;not present interrupt
  1684                                                          jmp     ReportInterrupt                                 ;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;       INT12   Stack Limit
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                                          menter  stacklimit                                      ;stack limit interrupt
  1691                                                          jmp     ReportInterrupt                                 ;report interrupt
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                  ;
  1694                                  ;       INT13   General Protection Fault
  1695                                  ;
  1696                                  ;-----------------------------------------------------------------------------------------------------------------------
  1697                                                          menter  protection                                      ;protection fault interrupt
  1698                                                          jmp     ReportInterrupt                                 ;report interrupt
  1699                                  ;-----------------------------------------------------------------------------------------------------------------------
  1700                                  ;
  1701                                  ;       INT14   Reserved
  1702                                  ;
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                                          menter  int14                                           ;(reserved)
  1705                                                          jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT15   Reserved
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  int15                                           ;(reserved)
  1712                                                          jmp     ReportInterrupt                                 ;report interrupt
  1713                                  ;-----------------------------------------------------------------------------------------------------------------------
  1714                                  ;
  1715                                  ;       INT16   Coprocessor Calculation
  1716                                  ;
  1717                                  ;-----------------------------------------------------------------------------------------------------------------------
  1718                                                          menter  coproccalc                                      ;coprocessor calculation
  1719                                                          jmp     ReportInterrupt                                 ;report interrupt
  1720                                  ;-----------------------------------------------------------------------------------------------------------------------
  1721                                  ;
  1722                                  ;       INT17   Reserved
  1723                                  ;
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                                          menter  int17                                           ;(reserved)
  1726                                                          jmp     ReportInterrupt                                 ;report interrupt
  1727                                  ;-----------------------------------------------------------------------------------------------------------------------
  1728                                  ;
  1729                                  ;       INT18   Reserved
  1730                                  ;
  1731                                  ;-----------------------------------------------------------------------------------------------------------------------
  1732                                                          menter  int18                                           ;(reserved)
  1733                                                          jmp     ReportInterrupt                                 ;report interrupt
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  ;
  1736                                  ;       INT19   Reserved
  1737                                  ;
  1738                                  ;-----------------------------------------------------------------------------------------------------------------------
  1739                                                          menter  int19                                           ;(reserved)
  1740                                                          jmp     ReportInterrupt                                 ;report interrupt
  1741                                  ;-----------------------------------------------------------------------------------------------------------------------
  1742                                  ;
  1743                                  ;       INT20   Reserved
  1744                                  ;
  1745                                  ;-----------------------------------------------------------------------------------------------------------------------
  1746                                                          menter  int20                                           ;(reserved)
  1747                                                          jmp     ReportInterrupt                                 ;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;       INT21   Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                                          menter  int21                                           ;(reserved)
  1754                                                          jmp     ReportInterrupt                                 ;report interrupt
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                  ;
  1757                                  ;       INT22   Reserved
  1758                                  ;
  1759                                  ;-----------------------------------------------------------------------------------------------------------------------
  1760                                                          menter  int22                                           ;(reserved)
  1761                                                          jmp     ReportInterrupt                                 ;report interrupt
  1762                                  ;-----------------------------------------------------------------------------------------------------------------------
  1763                                  ;
  1764                                  ;       INT23   Reserved
  1765                                  ;
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                                          menter  int23                                           ;(reserved)
  1768                                                          jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT24   Reserved
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  int24                                           ;(reserved)
  1775                                                          jmp     ReportInterrupt                                 ;report interrupt
  1776                                  ;-----------------------------------------------------------------------------------------------------------------------
  1777                                  ;
  1778                                  ;       INT25   Reserved
  1779                                  ;
  1780                                  ;-----------------------------------------------------------------------------------------------------------------------
  1781                                                          menter  int25                                           ;(reserved)
  1782                                                          jmp     ReportInterrupt                                 ;report interrupt
  1783                                  ;-----------------------------------------------------------------------------------------------------------------------
  1784                                  ;
  1785                                  ;       INT26   Reserved
  1786                                  ;
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                                          menter  int26                                           ;(reserved)
  1789                                                          jmp     ReportInterrupt                                 ;report interrupt
  1790                                  ;-----------------------------------------------------------------------------------------------------------------------
  1791                                  ;
  1792                                  ;       INT27   Reserved
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                                          menter  int27                                           ;(reserved)
  1796                                                          jmp     ReportInterrupt                                 ;report interrupt
  1797                                  ;-----------------------------------------------------------------------------------------------------------------------
  1798                                  ;
  1799                                  ;       INT28   Reserved
  1800                                  ;
  1801                                  ;-----------------------------------------------------------------------------------------------------------------------
  1802                                                          menter  int28                                           ;(reserved)
  1803                                                          jmp     ReportInterrupt                                 ;report interrupt
  1804                                  ;-----------------------------------------------------------------------------------------------------------------------
  1805                                  ;
  1806                                  ;       INT29   Reserved
  1807                                  ;
  1808                                  ;-----------------------------------------------------------------------------------------------------------------------
  1809                                                          menter  int29                                           ;(reserved)
  1810                                                          jmp     ReportInterrupt                                 ;report interrupt
  1811                                  ;-----------------------------------------------------------------------------------------------------------------------
  1812                                  ;
  1813                                  ;       INT30   Reserved
  1814                                  ;
  1815                                  ;-----------------------------------------------------------------------------------------------------------------------
  1816                                                          menter  int30                                           ;(reserved)
  1817                                                          jmp     ReportInterrupt                                 ;report interrupt
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                  ;
  1820                                  ;       INT31   Reserved
  1821                                  ;
  1822                                  ;-----------------------------------------------------------------------------------------------------------------------
  1823                                                          menter  int31                                           ;(reserved)
  1824                                                          jmp     ReportInterrupt                                 ;report interrupt
  1825                                  ;-----------------------------------------------------------------------------------------------------------------------
  1826                                  ;
  1827                                  ;       Routine:        ReportInterrupt
  1828                                  ;
  1829                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1830                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ReportInterrupt         iretd                                                   ;return
  1834                                  ;=======================================================================================================================
  1835                                  ;
  1836                                  ;       Hardware Device Interupts
  1837                                  ;
  1838                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1839                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1840                                  ;       (BX=2028h).
  1841                                  ;
  1842                                  ;=======================================================================================================================
  1843                                  ;-----------------------------------------------------------------------------------------------------------------------
  1844                                  ;
  1845                                  ;       IRQ0    Clock Tick Interrupt
  1846                                  ;
  1847                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1848                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1849                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1850                                  ;
  1851                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1852                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1853                                  ;
  1854                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1855                                  ;       zero, the floppy disk motors are turned off.
  1856                                  ;
  1857                                  ;-----------------------------------------------------------------------------------------------------------------------
  1858                                                          menter  clocktick                                       ;clock tick interrupt
  1859                                                          push    eax                                             ;save non-volatile regs
  1860                                                          push    edx                                             ;
  1861                                                          push    ds                                              ;
  1862                                  ;
  1863                                  ;       End the interrupt.
  1864                                  ;
  1865                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1866                                  ;
  1867                                  ;       Update the clock tick count and the elapsed days as needed.
  1868                                  ;
  1869                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1870                                                          pop     ds                                              ;... into data segment register
  1871                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1872                                                          inc     eax                                             ;increment clock ticks
  1873                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1874                                                          jb      irq0.10                                         ;no, skip ahead
  1875                                                          inc     byte [wbClockDays]                              ;increment clock days
  1876                                                          xor     eax,eax                                         ;reset clock ticks
  1877                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1878                                  ;
  1879                                  ;       Decrement floppy disk motor timeout.
  1880                                  ;
  1881                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1882                                                          je      irq0.20                                         ;yes, skip ahead
  1883                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1884                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1885                                  ;
  1886                                  ;       Turn off the floppy disk motor if appropriate.
  1887                                  ;
  1888                                                          sti                                                     ;enable maskable interrupts
  1889                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1890                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1891                                                          in      al,dx                                           ;FDC main status byte
  1892                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1893                                                          jnz     irq0.15                                         ;wait while busy
  1894                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1895                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1896                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1897                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1898                                                          out     dx,al                                           ;turn motor off
  1899                                  ;
  1900                                  ;       Enable maskable interrupts.
  1901                                  ;
  1902                                  irq0.20                 sti                                                     ;enable maskable interrupts
  1903                                  ;
  1904                                  ;       Restore and return.
  1905                                  ;
  1906                                                          pop     ds                                              ;restore modified regs
  1907                                                          pop     edx                                             ;
  1908                                                          pop     eax                                             ;
  1909                                                          iretd                                                   ;return
  1910                                  ;-----------------------------------------------------------------------------------------------------------------------
  1911                                  ;
  1912                                  ;       IRQ1    Keyboard Interrupt
  1913                                  ;
  1914                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1915                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1916                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1917                                  ;       ALL modified registers upon return.
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                                          menter  keyboard                                        ;keyboard interrrupt
  1921                                                          push    eax                                             ;save non-volatile regs
  1922                                                          push    ebx                                             ;
  1923                                                          push    ecx                                             ;
  1924                                                          push    esi                                             ;
  1925                                                          push    ds                                              ;
  1926                                  ;
  1927                                  ;       End the interrupt.
  1928                                  ;
  1929                                                          call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  1930                                  ;
  1931                                  ;       Handle keyboard scan-codes.
  1932                                  ;
  1933                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1934                                                          pop     ds                                              ;... into data segment register
  1935                                                          xor     al,al                                           ;zero
  1936                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1937                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1938                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1939                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1940                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1941                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  1942                                                          mov     al,' '                                          ;space
  1943                                                          mov     [wbConsoleChar],al                              ;set character to space
  1944                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  1945                                                          not     al                                              ;controller timeout mask
  1946                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  1947                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  1948                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  1949                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1950                                                          jz      irq1.140                                        ;yes, skip ahead
  1951                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  1952                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  1953                                                          mov     ah,al                                           ;copy scan code 0
  1954                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  1955                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  1956                                                          je      irq1.30                                         ;yes, set flag
  1957                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  1958                                                          je      irq1.40                                         ;yes, reset flag
  1959                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  1960                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  1961                                                          je      irq1.30                                         ;yes, set flag
  1962                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  1963                                                          je      irq1.40                                         ;yes, reset flag
  1964                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  1965                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1966                                                          je      irq1.30                                         ;yes, set flag
  1967                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1968                                                          je      irq1.40                                         ;yes, reset flag
  1969                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  1970                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1971                                                          je      irq1.30                                         ;yes, set flag
  1972                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1973                                                          je      irq1.40                                         ;yes, reset flag
  1974                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  1975                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  1976                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1977                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  1978                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  1979                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1980                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  1981                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  1982                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  1983                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  1984                                                          jne     irq1.70                                         ;no, skip ahead
  1985                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  1986                                                          jz      irq1.140                                        ;yes, skip ahead
  1987                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  1988                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  1989                                                          mov     ah,al                                           ;copy scan code 1
  1990                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  1991                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  1992                                                          je      irq1.30                                         ;yes, set flag
  1993                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  1994                                                          je      irq1.40                                         ;yes, reset flag
  1995                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  1996                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  1997                                                          je      irq1.30                                         ;yes, set flag
  1998                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  1999                                                          je      irq1.40                                         ;yes, reset flag
  2000                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2001                                                          je      irq1.80                                         ;yes, skip ahead
  2002                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2003                                                          je      irq1.80                                         ;yes, skip ahead
  2004                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2005                                                          je      irq1.10                                         ;yes, continue
  2006                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2007                                                          jne     irq1.20                                         ;no, skip ahead
  2008                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2009                                                          jz      irq1.140                                        ;yes, skip ahead
  2010                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2011                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2012                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2013                                                          jz      irq1.140                                        ;yes, skip ahead
  2014                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2015                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2016                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2017                                  irq1.30                 or      bl,al                                           ;set shift flag
  2018                                                          jmp     irq1.60                                         ;skip ahead
  2019                                  irq1.40                 not     al                                              ;convert flag to mask
  2020                                                          and     bl,al                                           ;reset shift flag
  2021                                                          jmp     irq1.60                                         ;skip ahead
  2022                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2023                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2024                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2025                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2026                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2027                                                          jmp     irq1.150                                        ;finish keyboard handling
  2028                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2029                                                          jne     irq1.80                                         ;no continue
  2030                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2031                                                          jz      irq1.140                                        ;yes, skip ahead
  2032                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2033                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2034                                                          mov     ah,al                                           ;copy scan code 1
  2035                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2036                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2037                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2038                                                          jz      irq1.140                                        ;yes, skip ahead
  2039                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2040                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2041                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2042                                                          jz      irq1.140                                        ;yes, skip ahead
  2043                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2044                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2045                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2046                                                          jz      irq1.140                                        ;yes, skip ahead
  2047                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2048                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2049                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2050                                                          jz      irq1.140                                        ;yes, skip ahead
  2051                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2052                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2053                                                          jmp     irq1.150                                        ;continue
  2054                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2055                                                          test    ah,EKEYBUP                                      ;release code?
  2056                                                          jnz     irq1.130                                        ;yes, skip ahead
  2057                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2058                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2059                                                          jz      irq1.90                                         ;no, skip ahead
  2060                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2061                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2062                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2063                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2064                                                          jz      irq1.100                                        ;no skip ahead
  2065                                                          mov     cl,al                                           ;copy ASCII code
  2066                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2067                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2068                                                          jb      irq1.100                                        ;yes, skip ahead
  2069                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2070                                                          ja      irq1.100                                        ;yes, skip ahead
  2071                                                          xor     al,EASCIICASE                                   ;switch case
  2072                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2073                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2074                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2075                                                          jz      irq1.120                                        ;no, skip ahead
  2076                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2077                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2078                                                          or      edx,eax                                         ;msg id and codes
  2079                                                          xor     ecx,ecx                                         ;null param
  2080                                                          push    eax                                             ;save codes
  2081                                                          call    PutMessage                                      ;put message to console
  2082                                                          pop     eax                                             ;restore codes
  2083                                                          test    al,al                                           ;ASCII translation?
  2084                                                          jz      irq1.130                                        ;no, skip ahead
  2085                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2086                                                          and     eax,0FFFFh                                      ;clear high-order word
  2087                                                          or      edx,eax                                         ;msg id and codes
  2088                                                          xor     ecx,ecx                                         ;null param
  2089                                                          call    PutMessage                                      ;put message to console
  2090                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2091                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2092                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2093                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2094                                  ;
  2095                                  ;       Enable maskable interrupts.
  2096                                  ;
  2097                                                          sti                                                     ;enable maskable interrupts
  2098                                  ;
  2099                                  ;       Restore and return.
  2100                                  ;
  2101                                                          pop     ds                                              ;restore non-volatile regs
  2102                                                          pop     esi                                             ;
  2103                                                          pop     ecx                                             ;
  2104                                                          pop     ebx                                             ;
  2105                                                          pop     eax                                             ;
  2106                                                          iretd                                                   ;return
  2107                                  ;-----------------------------------------------------------------------------------------------------------------------
  2108                                  ;       Scan-Code to ASCII Translation Tables
  2109                                  ;-----------------------------------------------------------------------------------------------------------------------
  2110                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2111                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2112                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2113                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2114                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2115                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2116                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2117                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2118                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2119                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2120                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2121                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2122                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2123                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2124                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2125                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2126                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2127                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2128                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2129                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2130                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2131                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2132                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2133                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2134                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2135                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2136                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2137                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2138                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2139                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2140                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2141                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2142                                  ;-----------------------------------------------------------------------------------------------------------------------
  2143                                  ;
  2144                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2145                                  ;
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                                          menter  iochannel                                       ;secondary 8259A cascade
  2148                                                          push    eax                                             ;save modified regs
  2149                                                          jmp     hwint                                           ;end interrupt and return
  2150                                  ;-----------------------------------------------------------------------------------------------------------------------
  2151                                  ;
  2152                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2153                                  ;
  2154                                  ;-----------------------------------------------------------------------------------------------------------------------
  2155                                                          menter  com2                                            ;serial port 2 interrupt
  2156                                                          push    eax                                             ;save modified regs
  2157                                                          jmp     hwint                                           ;end interrupt and return
  2158                                  ;-----------------------------------------------------------------------------------------------------------------------
  2159                                  ;
  2160                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2161                                  ;
  2162                                  ;-----------------------------------------------------------------------------------------------------------------------
  2163                                                          menter  com1                                            ;serial port 1 interrupt
  2164                                                          push    eax                                             ;save modified regs
  2165                                                          jmp     hwint                                           ;end interrupt and return
  2166                                  ;-----------------------------------------------------------------------------------------------------------------------
  2167                                  ;
  2168                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2169                                  ;
  2170                                  ;-----------------------------------------------------------------------------------------------------------------------
  2171                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2172                                                          push    eax                                             ;save modified regs
  2173                                                          jmp     hwint                                           ;end interrupt and return
  2174                                  ;-----------------------------------------------------------------------------------------------------------------------
  2175                                  ;
  2176                                  ;       IRQ6    Diskette Hardware Interrupt
  2177                                  ;
  2178                                  ;-----------------------------------------------------------------------------------------------------------------------
  2179                                                          menter  diskette                                        ;floppy disk interrupt
  2180                                                          push    eax                                             ;save non-volatile regs
  2181                                                          push    ds                                              ;
  2182                                                          call    PutPrimaryEndOfInt                              ;end the interrupt
  2183                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2184                                                          pop     ds                                              ;... into DS register
  2185                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2186                                                          or      al,10000000b                                    ;set IRQ flag
  2187                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2188                                                          sti                                                     ;enable maskable interrupts
  2189                                                          pop     ds                                              ;restore non-volatile regs
  2190                                                          pop     eax                                             ;
  2191                                                          iretd                                                   ;return from interrupt
  2192                                  ;-----------------------------------------------------------------------------------------------------------------------
  2193                                  ;
  2194                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2195                                  ;
  2196                                  ;-----------------------------------------------------------------------------------------------------------------------
  2197                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2198                                                          push    eax                                             ;save modified regs
  2199                                                          jmp     hwint                                           ;end interrupt and return
  2200                                  ;-----------------------------------------------------------------------------------------------------------------------
  2201                                  ;
  2202                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2203                                  ;
  2204                                  ;-----------------------------------------------------------------------------------------------------------------------
  2205                                                          menter  rtclock                                         ;real-time clock interrupt
  2206                                                          push    eax                                             ;save modified regs
  2207                                                          jmp     hwwint                                          ;end interrupt and return
  2208                                  ;-----------------------------------------------------------------------------------------------------------------------
  2209                                  ;
  2210                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2211                                  ;
  2212                                  ;-----------------------------------------------------------------------------------------------------------------------
  2213                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2214                                                          push    eax                                             ;save modified regs
  2215                                                          jmp     hwwint                                          ;end interrupt and return
  2216                                  ;-----------------------------------------------------------------------------------------------------------------------
  2217                                  ;
  2218                                  ;       IRQ10   Reserved Hardware Interrupt
  2219                                  ;
  2220                                  ;-----------------------------------------------------------------------------------------------------------------------
  2221                                                          menter  irq10                                           ;reserved
  2222                                                          push    eax                                             ;save modified regs
  2223                                                          jmp     hwwint                                          ;end interrupt and return
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225                                  ;
  2226                                  ;       IRQ11   Reserved Hardware Interrupt
  2227                                  ;
  2228                                  ;-----------------------------------------------------------------------------------------------------------------------
  2229                                                          menter  irq11                                           ;reserved
  2230                                                          push    eax                                             ;save modified regs
  2231                                                          jmp     hwwint                                          ;end interrupt and return
  2232                                  ;-----------------------------------------------------------------------------------------------------------------------
  2233                                  ;
  2234                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2235                                  ;
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2238                                                          push    eax                                             ;save modified regs
  2239                                                          jmp     hwwint                                          ;end interrupt and return
  2240                                  ;-----------------------------------------------------------------------------------------------------------------------
  2241                                  ;
  2242                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2243                                  ;
  2244                                  ;-----------------------------------------------------------------------------------------------------------------------
  2245                                                          menter  coprocessor                                     ;coprocessor interrupt
  2246                                                          push    eax                                             ;save modified regs
  2247                                                          jmp     hwwint                                          ;end interrupt and return
  2248                                  ;-----------------------------------------------------------------------------------------------------------------------
  2249                                  ;
  2250                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2251                                  ;
  2252                                  ;-----------------------------------------------------------------------------------------------------------------------
  2253                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2254                                                          push    eax                                             ;save modified regs
  2255                                                          jmp     hwwint                                          ;end interrupt and return
  2256                                  ;-----------------------------------------------------------------------------------------------------------------------
  2257                                  ;
  2258                                  ;       IRQ15   Reserved Hardware Interrupt
  2259                                  ;
  2260                                  ;-----------------------------------------------------------------------------------------------------------------------
  2261                                                          menter  irq15                                           ;reserved
  2262                                                          push    eax                                             ;save modified regs
  2263                                                          jmp     hwwint                                          ;end interrupt and return
  2264                                  ;-----------------------------------------------------------------------------------------------------------------------
  2265                                  ;
  2266                                  ;       Exit from hardware interrupt
  2267                                  ;
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2270                                                          jmp     hwint90                                         ;skip ahead
  2271                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2272                                  hwint90                 sti                                                     ;enable maskable interrupts
  2273                                                          pop     eax                                             ;restore modified regs
  2274                                                          iretd                                                   ;return from interrupt
  2275                                  ;-----------------------------------------------------------------------------------------------------------------------
  2276                                  ;
  2277                                  ;       INT 30h Operating System Software Service Interrupt
  2278                                  ;
  2279                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2280                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2281                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2282                                  ;       the entry address of the specific function from a table.
  2283                                  ;
  2284                                  ;-----------------------------------------------------------------------------------------------------------------------
  2285                                                          menter  svc
  2286                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2287                                                          jae     svc90                                           ;yes, skip ahead
  2288                                                          movzx   eax,al                                          ;function
  2289                                                          shl     eax,2                                           ;offset into table
  2290                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2291                                  svc90                   iretd                                                   ;return from interrupt
  2292                                  ;-----------------------------------------------------------------------------------------------------------------------
  2293                                  ;
  2294                                  ;       Service Request Table
  2295                                  ;
  2296                                  ;
  2297                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2298                                  ;
  2299                                  ;-----------------------------------------------------------------------------------------------------------------------
  2300                                  tsvc                    tsvce   CompareMemory                                   ;compare memory
  2301                                                          tsvce   GetConsoleString                                ;get string input
  2302                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2303                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2304                                                          tsvce   UpperCaseString                                 ;upper-case string
  2305                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                  ;
  2308                                  ;       Service Request Macros
  2309                                  ;
  2310                                  ;       These macros provide positional parameterization of service request calls.
  2311                                  ;
  2312                                  ;-----------------------------------------------------------------------------------------------------------------------
  2313                                  %macro                  compareMemory 0
  2314                                                          mov     al,eCompareMemory                               ;function code
  2315                                                          int     _svc                                            ;invoke OS service
  2316                                  %endmacro
  2317                                  %macro                  getConsoleString 0
  2318                                                          mov     al,eGetConsoleString                            ;function code
  2319                                                          int     _svc                                            ;invoke OS service
  2320                                  %endmacro
  2321                                  %macro                  placeCursor 0
  2322                                                          mov     al,ePlaceCursor                                 ;function code
  2323                                                          int     _svc                                            ;invoke OS service
  2324                                  %endmacro
  2325                                  %macro                  resetSystem 0
  2326                                                          mov     al,eResetSystem                                 ;function code
  2327                                                          int     _svc                                            ;invoke OS service
  2328                                  %endmacro
  2329                                  %macro                  upperCaseString 0
  2330                                                          mov     al,eUpperCaseString                             ;function code
  2331                                                          int     _svc                                            ;invoke OS service
  2332                                  %endmacro
  2333                                  ;=======================================================================================================================
  2334                                  ;
  2335                                  ;       Kernel Function Library
  2336                                  ;
  2337                                  ;=======================================================================================================================
  2338                                  ;=======================================================================================================================
  2339                                  ;
  2340                                  ;       String Helper Routines
  2341                                  ;
  2342                                  ;       CompareMemory
  2343                                  ;       UpperCaseString
  2344                                  ;
  2345                                  ;=======================================================================================================================
  2346                                  ;-----------------------------------------------------------------------------------------------------------------------
  2347                                  ;
  2348                                  ;       Routine:        CompareMemory
  2349                                  ;
  2350                                  ;       Description:    This routine compares two byte arrays.
  2351                                  ;
  2352                                  ;       In:             DS:EDX  first source address
  2353                                  ;                       DS:EBX  second source address
  2354                                  ;                       ECX     comparison length
  2355                                  ;
  2356                                  ;       Out:            EDX     first source address
  2357                                  ;                       EBX     second source address
  2358                                  ;                       ECX     0       array 1 = array 2
  2359                                  ;                               <0      array 1 < array 2
  2360                                  ;                               >0      array 1 > array 2
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2364                                                          push    edi                                             ;
  2365                                                          push    es                                              ;
  2366                                                          push    ds                                              ;copy DS
  2367                                                          pop     es                                              ;... to ES
  2368                                                          mov     esi,edx                                         ;first source address
  2369                                                          mov     edi,ebx                                         ;second source address
  2370                                                          cld                                                     ;forward strings
  2371                                                          rep     cmpsb                                           ;compare bytes
  2372                                                          mov     al,0                                            ;default result
  2373                                                          jz      .10                                             ;branch if arrays equal
  2374                                                          mov     al,1                                            ;positive result
  2375                                                          jnc     .10                                             ;branch if target > source
  2376                                                          mov     al,-1                                           ;negative result
  2377                                  .10                     movsx   ecx,al                                          ;extend sign
  2378                                                          pop     es                                              ;restore non-volatile regs
  2379                                                          pop     edi                                             ;
  2380                                                          pop     esi                                             ;
  2381                                                          ret                                                     ;return
  2382                                  ;-----------------------------------------------------------------------------------------------------------------------
  2383                                  ;
  2384                                  ;       Routine:        UpperCaseString
  2385                                  ;
  2386                                  ;       Description:    This routine places all characters in the given string to upper case.
  2387                                  ;
  2388                                  ;       In:             DS:EDX  string address
  2389                                  ;
  2390                                  ;       Out:            EDX     string address
  2391                                  ;
  2392                                  ;-----------------------------------------------------------------------------------------------------------------------
  2393                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2394                                                          mov     esi,edx                                         ;string address
  2395                                                          cld                                                     ;forward strings
  2396                                  .10                     lodsb                                                   ;string character
  2397                                                          test    al,al                                           ;null?
  2398                                                          jz      .20                                             ;yes, skip ahead
  2399                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2400                                                          jb      .10                                             ;no, continue
  2401                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2402                                                          ja      .10                                             ;no, continue
  2403                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2404                                                          mov     [esi-1],al                                      ;upper character
  2405                                                          jmp     .10                                             ;continue
  2406                                  .20                     pop     esi                                             ;restore non-volatile regs
  2407                                                          ret                                                     ;return
  2408                                  ;=======================================================================================================================
  2409                                  ;
  2410                                  ;       Console Helper Routines
  2411                                  ;
  2412                                  ;       GetConsoleChar
  2413                                  ;       GetConsoleString
  2414                                  ;       NextConsoleColumn
  2415                                  ;       PreviousConsoleColumn
  2416                                  ;       PutConsoleChar
  2417                                  ;       PutConsoleHexByte
  2418                                  ;       PutConsoleOIAChar
  2419                                  ;       PutConsoleOIAShift
  2420                                  ;       Yield
  2421                                  ;
  2422                                  ;=======================================================================================================================
  2423                                  ;-----------------------------------------------------------------------------------------------------------------------
  2424                                  ;
  2425                                  ;       Routine:        GetConsoleChar
  2426                                  ;
  2427                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2428                                  ;
  2429                                  ;       Out:            AL      ASCII character code
  2430                                  ;                       AH      keyboard scan code
  2431                                  ;
  2432                                  ;-----------------------------------------------------------------------------------------------------------------------
  2433                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2434                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2435                                                          or      eax,eax                                         ;do we have a message?
  2436                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2437                                                          push    eax                                             ;save key codes
  2438                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2439                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2440                                                          pop     eax                                             ;restore key codes
  2441                                                          jne     GetConsoleChar                                  ;no, try again
  2442                                                          and     eax,0000ffffh                                   ;mask for key codes
  2443                                                          ret                                                     ;return
  2444                                  ;-----------------------------------------------------------------------------------------------------------------------
  2445                                  ;
  2446                                  ;       Routine:        GetConsoleString
  2447                                  ;
  2448                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2449                                  ;
  2450                                  ;       In:             DS:EDX  target buffer address
  2451                                  ;                       ECX     maximum number of characters to accept
  2452                                  ;                       BH      echo to terminal
  2453                                  ;                       BL      terminating character
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2457                                                          push    esi                                             ;
  2458                                                          push    edi                                             ;
  2459                                                          push    es                                              ;
  2460                                                          push    ds                                              ;load data segment selector ...
  2461                                                          pop     es                                              ;... into extra segment register
  2462                                                          mov     edi,edx                                         ;edi = target buffer
  2463                                                          push    ecx                                             ;save maximum characters
  2464                                                          xor     al,al                                           ;zero register
  2465                                                          cld                                                     ;forward strings
  2466                                                          rep     stosb                                           ;zero fill buffer
  2467                                                          pop     ecx                                             ;maximum characters
  2468                                                          mov     edi,edx                                         ;edi = target buffer
  2469                                                          mov     esi,edx                                         ;esi = target buffer
  2470                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2471                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2472                                                          cmp     al,bl                                           ;is this the terminator?
  2473                                                          je      .50                                             ;yes, exit
  2474                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2475                                                          jne     .30                                             ;no, skip ahead
  2476                                                          cmp     esi,edi                                         ;at start of buffer?
  2477                                                          je      .20                                             ;yes, get next character
  2478                                                          dec     edi                                             ;backup target pointer
  2479                                                          mov     byte [edi],0                                    ;zero previous character
  2480                                                          inc     ecx                                             ;increment remaining chars
  2481                                                          test    bh,1                                            ;echo to console?
  2482                                                          jz      .20                                             ;no, get next character
  2483                                                          call    PreviousConsoleColumn                           ;backup console position
  2484                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2485                                                          call    PutConsoleChar                                  ;write space to console
  2486                                                          call    PlaceCursor                                     ;position the cursor
  2487                                                          jmp     .20                                             ;get next character
  2488                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2489                                                          jb      .20                                             ;no, get another character
  2490                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2491                                                          ja      .20                                             ;no, get another character
  2492                                                          stosb                                                   ;store character in buffer
  2493                                                          test    bh,1                                            ;echo to console?
  2494                                                          jz      .40                                             ;no, skip ahead
  2495                                                          call    PutConsoleChar                                  ;write character to console
  2496                                                          call    NextConsoleColumn                               ;advance console position
  2497                                                          call    PlaceCursor                                     ;position the cursor
  2498                                  .40                     dec     ecx                                             ;decrement remaining chars
  2499                                                          jmp     .10                                             ;next
  2500                                  .50                     xor     al,al                                           ;null
  2501                                                          stosb                                                   ;terminate buffer
  2502                                                          pop     es                                              ;restore non-volatile regs
  2503                                                          pop     edi                                             ;
  2504                                                          pop     esi                                             ;
  2505                                                          pop     ecx                                             ;
  2506                                                          ret                                                     ;return
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  ;
  2509                                  ;       Routine:        NextConsoleColumn
  2510                                  ;
  2511                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2512                                  ;                       incremented if the end of the current row is reached.
  2513                                  ;
  2514                                  ;       In:             DS      OS data selector
  2515                                  ;
  2516                                  ;-----------------------------------------------------------------------------------------------------------------------
  2517                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2518                                                          cmp     al,ECONCOLS-1                                   ;end of row?
  2519                                                          jnb     .10
  2520                                                          inc     al
  2521                                                          mov     [wbConsoleColumn],al
  2522                                  .10                     ret                                                     ;return
  2523                                  ;-----------------------------------------------------------------------------------------------------------------------
  2524                                  ;
  2525                                  ;       Routine:        PreviousConsoleColumn
  2526                                  ;
  2527                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2528                                  ;                       the column is set to the last position in the row and the row is decremented.
  2529                                  ;
  2530                                  ;       In:             DS      OS data selector
  2531                                  ;
  2532                                  ;-----------------------------------------------------------------------------------------------------------------------
  2533                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2534                                                          or      al,al                                           ;start of row?
  2535                                                          jz      .10
  2536                                                          dec     al
  2537                                                          mov     [wbConsoleColumn],al
  2538                                  .10                     ret                                                     ;return
  2539                                  ;-----------------------------------------------------------------------------------------------------------------------
  2540                                  ;
  2541                                  ;       Routine:        PutConsoleChar
  2542                                  ;
  2543                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2544                                  ;
  2545                                  ;       In:             AL      ASCII character
  2546                                  ;                       DS      OS data selector
  2547                                  ;
  2548                                  ;-----------------------------------------------------------------------------------------------------------------------
  2549                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2550                                                          push    es                                              ;
  2551                                                          push    EGDTCGA                                         ;load CGA selector ...
  2552                                                          pop     es                                              ;... into extra segment reg
  2553                                                          mov     cl,[wbConsoleColumn]                            ;column
  2554                                                          mov     ch,[wbConsoleRow]                               ;row
  2555                                                          call    SetConsoleChar                                  ;put character at row, column
  2556                                                          pop     es                                              ;restore non-volatile regs
  2557                                                          pop     ecx                                             ;
  2558                                                          ret                                                     ;return
  2559                                  ;-----------------------------------------------------------------------------------------------------------------------
  2560                                  ;
  2561                                  ;       Routine:        PutConsoleHexByte
  2562                                  ;
  2563                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2564                                  ;
  2565                                  ;       In:             AL      byte value
  2566                                  ;                       CL      column
  2567                                  ;                       CH      row
  2568                                  ;                       DS      OS data selector
  2569                                  ;                       ES      CGA selector
  2570                                  ;
  2571                                  ;-----------------------------------------------------------------------------------------------------------------------
  2572                                  PutConsoleHexByte       push    eax                                             ;save non-volatile regs
  2573                                                          shr     al,4                                            ;hi-order nybble
  2574                                                          call    .10                                             ;make ASCII and store
  2575                                                          pop     eax                                             ;byte value
  2576                                                          and     al,0Fh                                          ;lo-order nybble
  2577                                  .10                     or      al,030h                                         ;apply ASCII zone
  2578                                                          cmp     al,03Ah                                         ;numeric?
  2579                                                          jb      .20                                             ;yes, skip ahead
  2580                                                          add     al,7                                            ;add ASCII offset for alpha
  2581                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2582                                                          ret                                                     ;return
  2583                                  ;-----------------------------------------------------------------------------------------------------------------------
  2584                                  ;
  2585                                  ;       Routine:        PutConsoleOIAChar
  2586                                  ;
  2587                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2588                                  ;
  2589                                  ;       In:             DS      OS data selector
  2590                                  ;
  2591                                  ;-----------------------------------------------------------------------------------------------------------------------
  2592                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2593                                                          push    ecx                                             ;
  2594                                                          push    esi                                             ;
  2595                                                          push    ds                                              ;
  2596                                                          push    es                                              ;
  2597                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2598                                                          pop     ds                                              ;... into data segment register
  2599                                                          push    EGDTCGA                                         ;load CGA selector ...
  2600                                                          pop     es                                              ;... into extra segment register
  2601                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2602                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2603                                                          mov     bl,0                                            ;starting column
  2604                                                          mov     ecx,6                                           ;maximum scan codes
  2605                                  .10                     push    ecx                                             ;save remaining count
  2606                                                          mov     ecx,ebx                                         ;row, column
  2607                                                          lodsb                                                   ;read scan code
  2608                                                          or      al,al                                           ;scan code present?
  2609                                                          jz      .20                                             ;no, skip ahead
  2610                                                          call    PutConsoleHexByte                               ;display scan code
  2611                                                          jmp     .30                                             ;continue
  2612                                  .20                     mov     al,' '                                          ;ASCII space
  2613                                                          call    SetConsoleChar                                  ;display space
  2614                                                          mov     al,' '                                          ;ASCII space
  2615                                                          call    SetConsoleChar                                  ;display space
  2616                                  .30                     add     bl,2                                            ;next column (+2)
  2617                                                          pop     ecx                                             ;restore remaining
  2618                                                          loop    .10                                             ;next code
  2619                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2620                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2621                                                          jb      .40                                             ;no, skip ahead
  2622                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2623                                                          ja      .40                                             ;no, skip ahead
  2624                                                          mov     ch,bh                                           ;OIA row
  2625                                                          mov     cl,40                                           ;character display column
  2626                                                          call    SetConsoleChar                                  ;display ASCII character
  2627                                  .40                     pop     es                                              ;restore non-volatile regs
  2628                                                          pop     ds                                              ;
  2629                                                          pop     esi                                             ;
  2630                                                          pop     ecx                                             ;
  2631                                                          pop     ebx                                             ;
  2632                                                          ret                                                     ;return
  2633                                  ;-----------------------------------------------------------------------------------------------------------------------
  2634                                  ;
  2635                                  ;       Routine:        PutConsoleOIAShift
  2636                                  ;
  2637                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2638                                  ;
  2639                                  ;       In:             BL      shift flags
  2640                                  ;                       BH      lock flags
  2641                                  ;                       DS      OS data selector
  2642                                  ;
  2643                                  ;-----------------------------------------------------------------------------------------------------------------------
  2644                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2645                                                          push    es                                              ;
  2646                                                          push    EGDTCGA                                         ;load CGA selector ...
  2647                                                          pop     es                                              ;... into ES register
  2648                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2649                                                          mov     al,EASCIISPACE                                  ;space is default character
  2650                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2651                                                          jz      .10                                             ;no, skip ahead
  2652                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2653                                  .10                     mov     cl,14                                           ;indicator column
  2654                                                          call    SetConsoleChar                                  ;display ASCII character
  2655                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2656                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2657                                                          jz      .20                                             ;no, skip ahead
  2658                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2659                                  .20                     mov     cl,64                                           ;indicator column
  2660                                                          call    SetConsoleChar                                  ;display ASCII character
  2661                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2662                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2663                                                          jz      .30                                             ;no, skip ahead
  2664                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2665                                  .30                     mov     cl,15                                           ;indicator column
  2666                                                          call    SetConsoleChar                                  ;display ASCII character
  2667                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2668                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2669                                                          jz      .40                                             ;no, skip ahead
  2670                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2671                                  .40                     mov     cl,63                                           ;indicator column
  2672                                                          call    SetConsoleChar                                  ;display ASCII character
  2673                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2674                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2675                                                          jz      .50                                             ;no, skip ahead
  2676                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2677                                  .50                     mov     cl,16                                           ;indicator column
  2678                                                          call    SetConsoleChar                                  ;display ASCII character
  2679                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2680                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2681                                                          jz      .60                                             ;no, skip ahead
  2682                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2683                                  .60                     mov     cl,62                                           ;indicator column
  2684                                                          call    SetConsoleChar                                  ;display ASCII character
  2685                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2686                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2687                                                          jz      .70                                             ;no, skip ahead
  2688                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2689                                  .70                     mov     cl,78                                           ;indicator column
  2690                                                          call    SetConsoleChar                                  ;display ASCII character
  2691                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2692                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2693                                                          jz      .80                                             ;no, skip ahead
  2694                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2695                                  .80                     mov     cl,77                                           ;indicator column
  2696                                                          call    SetConsoleChar                                  ;display ASCII character
  2697                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2698                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2699                                                          jz      .90                                             ;no, skip ahead
  2700                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2701                                  .90                     mov     cl,76                                           ;indicator column
  2702                                                          call    SetConsoleChar                                  ;display ASCII character
  2703                                                          pop     es                                              ;restore non-volatile regs
  2704                                                          pop     ecx                                             ;
  2705                                                          ret                                                     ;return
  2706                                  ;-----------------------------------------------------------------------------------------------------------------------
  2707                                  ;
  2708                                  ;       Routine:        Yield
  2709                                  ;
  2710                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2711                                  ;
  2712                                  ;-----------------------------------------------------------------------------------------------------------------------
  2713                                  Yield                   sti                                                     ;enable maskagle interrupts
  2714                                                          hlt                                                     ;halt until external interrupt
  2715                                                          ret                                                     ;return
  2716                                  ;=======================================================================================================================
  2717                                  ;
  2718                                  ;       Message Queue Helper Routines
  2719                                  ;
  2720                                  ;       GetMessage
  2721                                  ;       PutMessage
  2722                                  ;
  2723                                  ;=======================================================================================================================
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  ;
  2726                                  ;       Routine:        GetMessage
  2727                                  ;
  2728                                  ;       Description:    This routine reads and removes a message from the message queue.
  2729                                  ;
  2730                                  ;       Out:            EAX     lo-order message data
  2731                                  ;                       EDX     hi-order message data
  2732                                  ;
  2733                                  ;                       CY      0 = message read
  2734                                  ;                               1 = no message to read
  2735                                  ;
  2736                                  ;-----------------------------------------------------------------------------------------------------------------------
  2737                                  GetMessage              push    ebx                                             ;save non-volatile regs
  2738                                                          push    ecx                                             ;
  2739                                                          push    ds                                              ;
  2740                                                          push    ELDTMQ                                          ;load message queue selector ...
  2741                                                          pop     ds                                              ;... into data segment register
  2742                                                          mov     ebx,[MQHead]                                    ;head ptr
  2743                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  2744                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2745                                                          or      eax,edx                                         ;is queue empty?
  2746                                                          stc                                                     ;assume queue is emtpy
  2747                                                          jz      .20                                             ;yes, skip ahead
  2748                                                          xor     ecx,ecx                                         ;store zero
  2749                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  2750                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2751                                                          add     ebx,8                                           ;next queue element
  2752                                                          and     ebx,03FCh                                       ;at end of queue?
  2753                                                          jnz     .10                                             ;no, skip ahead
  2754                                                          mov     bl,8                                            ;reset to 1st entry
  2755                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2756                                                          clc                                                     ;indicate message read
  2757                                  .20                     pop     ds                                              ;restore non-volatile regs
  2758                                                          pop     ecx                                             ;
  2759                                                          pop     ebx                                             ;
  2760                                                          ret                                                     ;return
  2761                                  ;-----------------------------------------------------------------------------------------------------------------------
  2762                                  ;
  2763                                  ;       Routine:        PutMessage
  2764                                  ;
  2765                                  ;       Description:    This routine adda a message to the message queue.
  2766                                  ;
  2767                                  ;       In:             ECX     hi-order data word
  2768                                  ;                       EDX     lo-order data word
  2769                                  ;
  2770                                  ;       Out:            CY      0 = success
  2771                                  ;                               1 = fail: queue is full
  2772                                  ;
  2773                                  ;-----------------------------------------------------------------------------------------------------------------------
  2774                                  PutMessage              push    ds                                              ;save non-volatile regs
  2775                                                          push    ELDTMQ                                          ;load task message queue selector ...
  2776                                                          pop     ds                                              ;... into data segment register
  2777                                                          mov     eax,[MQTail]                                    ;tail ptr
  2778                                                          cmp     dword [eax],0                                   ;is queue full?
  2779                                                          stc                                                     ;assume failure
  2780                                                          jne     .20                                             ;yes, cannot store
  2781                                                          mov     [eax],edx                                       ;store lo-order data
  2782                                                          mov     [eax+4],ecx                                     ;store hi-order data
  2783                                                          add     eax,8                                           ;next queue element adr
  2784                                                          and     eax,03FCh                                       ;at end of queue?
  2785                                                          jnz     .10                                             ;no, skip ahead
  2786                                                          mov     al,8                                            ;reset to top of queue
  2787                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2788                                                          clc                                                     ;indicate success
  2789                                  .20                     pop     ds                                              ;restore non-volatile regs
  2790                                                          ret                                                     ;return
  2791                                  ;=======================================================================================================================
  2792                                  ;
  2793                                  ;       Memory-Mapped Video Routines
  2794                                  ;
  2795                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2796                                  ;
  2797                                  ;       SetConsoleChar
  2798                                  ;
  2799                                  ;=======================================================================================================================
  2800                                  ;-----------------------------------------------------------------------------------------------------------------------
  2801                                  ;
  2802                                  ;       Routine:        SetConsoleChar
  2803                                  ;
  2804                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  2805                                  ;
  2806                                  ;       In:             AL      ASCII character
  2807                                  ;                       CL      column
  2808                                  ;                       CH      row
  2809                                  ;                       ES      CGA selector
  2810                                  ;
  2811                                  ;       Out:            EAX     last target address written (ES:)
  2812                                  ;                       CL      column + 1
  2813                                  ;
  2814                                  ;-----------------------------------------------------------------------------------------------------------------------
  2815                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  2816                                                          movzx   eax,ch                                          ;row
  2817                                                          mov     ah,ECONCOLS                                     ;cols/row
  2818                                                          mul     ah                                              ;row * cols/row
  2819                                                          add     al,cl                                           ;add column
  2820                                                          adc     ah,0                                            ;handle carry
  2821                                                          shl     eax,1                                           ;screen offset
  2822                                                          mov     [es:eax],dl                                     ;store character
  2823                                                          inc     cl                                              ;next column
  2824                                                          ret                                                     ;return
  2825                                  ;=======================================================================================================================
  2826                                  ;
  2827                                  ;       Input/Output Routines
  2828                                  ;
  2829                                  ;       These routines read and/or write directly to ports.
  2830                                  ;
  2831                                  ;       PlaceCursor
  2832                                  ;       PutPrimaryEndOfInt
  2833                                  ;       PutSecondaryEndOfInt
  2834                                  ;       ResetSystem
  2835                                  ;       SetKeyboardLamps
  2836                                  ;       WaitForKeyInBuffer
  2837                                  ;       WaitForKeyOutBuffer
  2838                                  ;
  2839                                  ;=======================================================================================================================
  2840                                  ;-----------------------------------------------------------------------------------------------------------------------
  2841                                  ;
  2842                                  ;       Routine:        PlaceCursor
  2843                                  ;
  2844                                  ;       Description:    This routine positions the cursor on the console.
  2845                                  ;
  2846                                  ;       In:             DS      OS data selector
  2847                                  ;
  2848                                  ;-----------------------------------------------------------------------------------------------------------------------
  2849                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  2850                                                          mov     al,[wbConsoleRow]                               ;AL = row
  2851                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  2852                                                          mul     ah                                              ;row offset
  2853                                                          add     al,[wbConsoleColumn]                            ;add column
  2854                                                          adc     ah,0                                            ;add overflow
  2855                                                          mov     ecx,eax                                         ;screen offset
  2856                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  2857                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  2858                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  2859                                                          out     dx,al                                           ;select register
  2860                                                          inc     edx                                             ;data port
  2861                                                          mov     al,ch                                           ;hi-order cursor loc
  2862                                                          out     dx,al                                           ;store hi-order loc
  2863                                                          dec     edx                                             ;register select port
  2864                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  2865                                                          out     dx,al                                           ;select register
  2866                                                          inc     edx                                             ;data port
  2867                                                          mov     al,cl                                           ;lo-order cursor loc
  2868                                                          out     dx,al                                           ;store lo-order loc
  2869                                                          pop     ecx                                             ;restore non-volatile regs
  2870                                                          ret                                                     ;return
  2871                                  ;-----------------------------------------------------------------------------------------------------------------------
  2872                                  ;
  2873                                  ;       Routine:        PutPrimaryEndOfInt
  2874                                  ;
  2875                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2876                                  ;
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878                                  PutPrimaryEndOfInt      mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2879                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  2880                                                          ret                                                     ;return
  2881                                  ;-----------------------------------------------------------------------------------------------------------------------
  2882                                  ;
  2883                                  ;       Routine:        PutSecondaryEndOfInt
  2884                                  ;
  2885                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2886                                  ;
  2887                                  ;-----------------------------------------------------------------------------------------------------------------------
  2888                                  PutSecondaryEndOfInt    mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  2889                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  2890                                                          ret                                                     ;return
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;       Routine:        ResetSystem
  2894                                  ;
  2895                                  ;       Description:    This routine restarts the system using the 8042 controller.
  2896                                  ;
  2897                                  ;       Out:            N/A     This routine does not return.
  2898                                  ;
  2899                                  ;-----------------------------------------------------------------------------------------------------------------------
  2900                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  2901                                                          loop    $                                               ;clear interrupts
  2902                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  2903                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  2904                                  .10                     sti                                                     ;enable maskable interrupts
  2905                                                          hlt                                                     ;halt until interrupt
  2906                                                          jmp     .10                                             ;repeat until reset kicks in
  2907                                  ;-----------------------------------------------------------------------------------------------------------------------
  2908                                  ;
  2909                                  ;       Routine:        SetKeyboardLamps
  2910                                  ;
  2911                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  2912                                  ;
  2913                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2914                                  ;
  2915                                  ;-----------------------------------------------------------------------------------------------------------------------
  2916                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2917                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  2918                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  2919                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2920                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2921                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  2922                                                          mov     al,bh                                           ;set/reset lamps value
  2923                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  2924                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  2925                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  2926                                                          ret                                                     ;return
  2927                                  ;-----------------------------------------------------------------------------------------------------------------------
  2928                                  ;
  2929                                  ;       Routine:        WaitForKeyInBuffer
  2930                                  ;
  2931                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  2932                                  ;
  2933                                  ;       Out:            ZF      1 = Input buffer ready
  2934                                  ;                               0 = Input buffer not ready after timeout
  2935                                  ;
  2936                                  ;-----------------------------------------------------------------------------------------------------------------------
  2937                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  2938                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2939                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2940                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  2941                                                          loopnz  .10                                             ;yes, repeat till timeout
  2942                                                          pop     ecx                                             ;restore non-volatile regs
  2943                                                          ret                                                     ;return
  2944                                  ;-----------------------------------------------------------------------------------------------------------------------
  2945                                  ;
  2946                                  ;       Routine:        WaitForKeyOutBuffer
  2947                                  ;
  2948                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  2949                                  ;
  2950                                  ;       Out:            ZF      1 = Output buffer has data from controller
  2951                                  ;                               0 = Output buffer empty after timeout
  2952                                  ;
  2953                                  ;-----------------------------------------------------------------------------------------------------------------------
  2954                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  2955                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  2956                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  2957                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  2958                                                          loopz   .10                                             ;loop until output buffer bit
  2959                                                          pop     ecx                                             ;restore non-volatile regs
  2960                                                          ret                                                     ;return
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  ;
  2963                                  ;       End of the Kernel Function Library
  2964                                  ;
  2965                                  ;-----------------------------------------------------------------------------------------------------------------------
  2966                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  2967                                  ;=======================================================================================================================
  2968                                  ;
  2969                                  ;       Console Task
  2970                                  ;
  2971                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2972                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2973                                  ;       screen and responds to user commands.
  2974                                  ;
  2975                                  ;=======================================================================================================================
  2976                                  ;-----------------------------------------------------------------------------------------------------------------------
  2977                                  ;
  2978                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  2979                                  ;
  2980                                  ;       This is the stack for the console task. It supports 448 nested calls.
  2981                                  ;
  2982                                  ;-----------------------------------------------------------------------------------------------------------------------
  2983                                  section                 constack                                                ;console task stack
  2984                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  2985                                  ;-----------------------------------------------------------------------------------------------------------------------
  2986                                  ;
  2987                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  2988                                  ;
  2989                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2990                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2991                                  ;       16 descriptors. Six are initially defined.
  2992                                  ;
  2993                                  ;-----------------------------------------------------------------------------------------------------------------------
  2994                                  section                 conldt                                                  ;console local descriptors
  2995                                                          dq      004093004780007Fh                               ;04 TSS alias
  2996                                                          dq      004093004700007Fh                               ;0c LDT alias
  2997                                                          dq      00409300400006FFh                               ;14 stack
  2998                                                          dq      00CF93000000FFFFh                               ;1c data
  2999                                                          dq      00409B0050000FFFh                               ;24 code
  3000                                                          dq      00409300480007FFh                               ;2c message queue
  3001                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3002                                  ;-----------------------------------------------------------------------------------------------------------------------
  3003                                  ;
  3004                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3005                                  ;
  3006                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3007                                  ;       segment. CS to console code.
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  section                 contss                                                  ;console task state segment
  3011                                                          dd      0                                               ;00 back-link tss
  3012                                                          dd      0700h                                           ;04 esp ring 0
  3013                                                          dd      0014h                                           ;08 ss ring 0
  3014                                                          dd      0700h                                           ;0c esp ring 1
  3015                                                          dd      0014h                                           ;10 es ring 1
  3016                                                          dd      0700h                                           ;14 esp ring 2
  3017                                                          dd      0014h                                           ;18 ss ring 2
  3018                                                          dd      0                                               ;1c cr ring 3
  3019                                                          dd      0                                               ;20 eip
  3020                                                          dd      0200h                                           ;24 eflags
  3021                                                          dd      0                                               ;28 eax
  3022                                                          dd      0                                               ;2c ecx
  3023                                                          dd      0                                               ;30 edx
  3024                                                          dd      0                                               ;34 ebx
  3025                                                          dd      0700h                                           ;38 esp ring 3
  3026                                                          dd      0                                               ;3c ebp
  3027                                                          dd      0                                               ;40 esi
  3028                                                          dd      0                                               ;44 edi
  3029                                                          dd      001Ch                                           ;48 es
  3030                                                          dd      0024h                                           ;4c cs
  3031                                                          dd      0014h                                           ;50 ss ring 3
  3032                                                          dd      001Ch                                           ;54 ds
  3033                                                          dd      0                                               ;58 fs
  3034                                                          dd      0                                               ;5c gs
  3035                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3036                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3037                                  ;-----------------------------------------------------------------------------------------------------------------------
  3038                                  ;
  3039                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3040                                  ;
  3041                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3042                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3043                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3044                                  ;       event.
  3045                                  ;
  3046                                  ;-----------------------------------------------------------------------------------------------------------------------
  3047                                  section                 conmque                                                 ;console message queue
  3048                                                          dd      8                                               ;head pointer
  3049                                                          dd      8                                               ;tail pointer
  3050                                                          times   510 dd 0                                        ;queue elements
  3051                                  ;-----------------------------------------------------------------------------------------------------------------------
  3052                                  ;
  3053                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3054                                  ;
  3055                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3056                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3057                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3058                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3059                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3060                                  ;       board input, echoing to the console screen and responding to user commands.
  3061                                  ;
  3062                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3063                                  ;
  3064                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3065                                  ;                               |  Real Mode Interrupt Vectors                  |
  3066                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3067                                  ;                               |  Reserved BIOS Memory Area                    |
  3068                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3069                                  ;                               |  Shared Kernel Memory Area                    |
  3070                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3071                                  ;                               |  Global Descriptor Table (GDT)                |
  3072                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3073                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3074                                  ;                       002000  +-----------------------------------------------+
  3075                                  ;                               |  Interrupt Handlers                           |
  3076                                  ;                               |  Kernel Function Library                      |
  3077                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3078                                  ;                               |  Console Task Stack Area                      |
  3079                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3080                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3081                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3082                                  ;                               |  Console Task Task State Segment (TSS)        |
  3083                                  ;                       004800  +-----------------------------------------------+
  3084                                  ;                               |  Console Task Message Queue                   |
  3085                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3086                                  ;                               |  Console Task Code                            |
  3087                                  ;                               |  Console Task Constants                       |
  3088                                  ;                       006000  +===============================================+
  3089                                  ;
  3090                                  ;-----------------------------------------------------------------------------------------------------------------------
  3091                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3092                                  ;
  3093                                  ;       Initialize console work areas to low values.
  3094                                  ;
  3095                                  ConCode                 mov     edi,ECONDATA                                    ;OS console data address
  3096                                                          xor     al,al                                           ;initialization value
  3097                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3098                                                          cld                                                     ;forward strings
  3099                                                          rep     stosb                                           ;initialize data
  3100                                  ;
  3101                                  ;       Initialize the active panel variables.
  3102                                  ;
  3103                                                          mov     eax,czPnlCon001                                 ;initial console panel
  3104                                                          mov     [wdConsolePanel],eax                            ;save panel template address
  3105                                  ;
  3106                                  ;       Address the console screen memory.
  3107                                  ;
  3108                                                          push    EGDTCGA                                         ;load CGA video selector...
  3109                                                          pop     es                                              ;...into extra segment reg
  3110                                  ;
  3111                                  ;       Initialize the Operator Information Area (OIA) (This is done once).
  3112                                  ;
  3113                                                          mov     edi,ECONROWS*ECONROWBYTES                       ;target offset
  3114                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  3115                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  3116                                                          rep     stosd                                           ;reset OIA
  3117                                  ;
  3118                                  ;       Clear the console rows. (This is done after every attention key).
  3119                                  ;
  3120                                  .20                     xor     edi,edi                                         ;target offset
  3121                                                          mov     ecx,ECONROWS*ECONROWDWORDS                      ;double-words to clear
  3122                                                          mov     eax,ECONCLEARDWORD                              ;initialization value
  3123                                                          rep     stosd                                           ;reset screen body
  3124                                  ;
  3125                                  ;       Reset the input field input address, row and column.
  3126                                  ;
  3127                                                          xor     eax,eax                                         ;zero register
  3128                                                          mov     [wdConsoleField],eax                            ;zero field addr
  3129                                                          mov     [wdConsoleInput],eax                            ;zero input addr
  3130                                                          mov     [wbConsoleRow],al                               ;zero console row
  3131                                                          mov     [wbConsoleColumn],al                            ;zero console column
  3132                                  ;
  3133                                  ;       Load the field address from the pandel. Exit loop if address is null.
  3134                                  ;
  3135                                                          mov     ebx,[wdConsolePanel]                            ;first field template addr
  3136                                  .30                     mov     esi,[ebx]                                       ;field value addr
  3137                                                          test    esi,esi                                         ;end of panel?
  3138                                                          jz      .70                                             ;yes, exit loop
  3139                                  ;
  3140                                  ;       Load the field row, column, color and length.
  3141                                  ;
  3142                                                          mov     ch,[ebx+4]                                      ;row
  3143                                                          mov     cl,[ebx+5]                                      ;column
  3144                                                          mov     dh,[ebx+6]                                      ;color
  3145                                                          mov     dl,[ebx+7]                                      ;length
  3146                                  ;
  3147                                  ;       Test the row high-bit for input field indication.
  3148                                  ;
  3149                                                          test    ch,080h                                         ;input field?
  3150                                                          jz      .40                                             ;no, branch
  3151                                                          and     ch,07Fh                                         ;clear input field indicator
  3152                                  ;
  3153                                  ;       Save the row and column if this is the first input field.
  3154                                  ;
  3155                                                          mov     al,[wbConsoleRow]                               ;console row
  3156                                                          or      al,[wbConsoleColumn]                            ;already have an input field?
  3157                                                          jnz     .40                                             ;yes, branch
  3158                                                          mov     [wdConsoleField],ebx                            ;save field template addr
  3159                                                          mov     [wdConsoleInput],esi                            ;update console input buffer
  3160                                                          mov     [wbConsoleRow],ch                               ;update console row
  3161                                                          mov     [wbConsoleColumn],cl                            ;update console column
  3162                                  ;
  3163                                  ;       Clear input field contents.
  3164                                  ;
  3165                                                          push    ecx                                             ;save row, col
  3166                                                          push    es                                              ;save CGA segment
  3167                                                          push    ds                                              ;load OS data ...
  3168                                                          pop     es                                              ;... into extra segment reg
  3169                                                          mov     edi,esi                                         ;target is field data addr
  3170                                                          xor     al,al                                           ;fill byte is NUL
  3171                                                          movzx   ecx,dl                                          ;field length
  3172                                                          rep     stosb                                           ;fill field with fill byte
  3173                                                          pop     es                                              ;restore CGA segment
  3174                                                          pop     ecx                                             ;restore row, col
  3175                                  ;
  3176                                  ;       Compute the target offset.
  3177                                  ;
  3178                                  .40                     movzx   eax,ch                                          ;row
  3179                                                          mov     ah,ECONCOLS                                     ;columns per row
  3180                                                          mul     ah                                              ;row offset
  3181                                                          add     al,cl                                           ;add column
  3182                                                          adc     ah,0                                            ;handle overflow
  3183                                                          shl     eax,1                                           ;two-bytes per column
  3184                                                          mov     edi,eax                                         ;target offset
  3185                                  ;
  3186                                  ;       Display the field contents.
  3187                                  ;
  3188                                                          movzx   ecx,dl                                          ;length
  3189                                                          mov     ah,dh                                           ;color
  3190                                  .50                     lodsb                                                   ;field character
  3191                                                          test    al,al                                           ;end of value?
  3192                                                          jz      .60                                             ;yes, branch
  3193                                                          stosw                                                   ;store character and color
  3194                                                          loop    .50                                             ;next character
  3195                                  .60                     add     ebx,8                                           ;next field addr
  3196                                                          jmp     short .30                                       ;next field
  3197                                  ;
  3198                                  ;       Place the cursor at the input field.
  3199                                  ;
  3200                                  .70                     mov     ah,[wbConsoleRow]                               ;field row
  3201                                                          mov     al,[wbConsoleColumn]                            ;field column
  3202                                                          placeCursor                                             ;position the cursor
  3203                                  ;
  3204                                  ;       Get command.
  3205                                  ;
  3206                                                          mov     esi,[wdConsoleField]                            ;input field template addr
  3207                                                          mov     edx,[wdConsoleInput]                            ;target buffer addr
  3208                                                          xor     ecx,ecx                                         ;zero register
  3209                                                          mov     cl,[esi+7]                                      ;maximum chars to accept
  3210                                                          mov     bh,1                                            ;echo to terminal
  3211                                                          mov     bl,13                                           ;terminating character
  3212                                                          getConsoleString                                        ;accept keyboard input
  3213                                  ;
  3214                                  ;       Take the first token entered.
  3215                                  ;
  3216                                                          mov     edx,[wdConsoleInput]                            ;console input buffer addr
  3217                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3218                                                          call    ConTakeToken                                    ;take first command token
  3219                                  ;
  3220                                  ;       Evaluate token
  3221                                  ;
  3222                                                          mov     edx,wzConsoleToken                              ;token buffer
  3223                                                          call    ConDetermineCommand                             ;determine if this is a command
  3224                                                          cmp     eax,ECONJMPTBLCNT                               ;command number in range?
  3225                                                          jnb     .80                                             ;no, branch
  3226                                                          shl     eax,2                                           ;convert number to array offset
  3227                                                          mov     edx,tConJmpTbl                                  ;command handler address table base
  3228                                                          mov     eax,[edx+eax]                                   ;command handler address
  3229                                                          call    eax                                             ;handler command
  3230                                  ;
  3231                                  ;       Refresh Panel.
  3232                                  ;
  3233                                  .80                      jmp     .20                                            ;refresh panel
  3234                                  ;-----------------------------------------------------------------------------------------------------------------------
  3235                                  ;
  3236                                  ;       Routine:        ConTakeToken
  3237                                  ;
  3238                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3239                                  ;
  3240                                  ;       In:             DS:EDX  source buffer address
  3241                                  ;                       DS:EBX  target buffer address
  3242                                  ;
  3243                                  ;       Out:            DS:EDX  source buffer address
  3244                                  ;                       DS:EBX  target buffer address
  3245                                  ;
  3246                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3247                                  ;
  3248                                  ;-----------------------------------------------------------------------------------------------------------------------
  3249                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3250                                                          push    edi                                             ;
  3251                                                          push    es                                              ;
  3252                                                          push    ds                                              ;load data segment selector ...
  3253                                                          pop     es                                              ;... into extra segment reg
  3254                                                          mov     esi,edx                                         ;source buffer address
  3255                                                          mov     edi,ebx                                         ;target buffer address
  3256                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3257                                                          cld                                                     ;forward strings
  3258                                  .10                     lodsb                                                   ;load byte
  3259                                                          cmp     al,EASCIISPACE                                  ;space?
  3260                                                          je      .10                                             ;yes, continue
  3261                                                          test    al,al                                           ;end of line?
  3262                                                          jz      .40                                             ;yes, branch
  3263                                  .20                     stosb                                                   ;store byte
  3264                                                          lodsb                                                   ;load byte
  3265                                                          test    al,al                                           ;end of line?
  3266                                                          jz      .40                                             ;no, continue
  3267                                                          cmp     al,EASCIISPACE                                  ;space?
  3268                                                          jne     .20                                             ;no, continue
  3269                                  .30                     lodsb                                                   ;load byte
  3270                                                          cmp     al,EASCIISPACE                                  ;space?
  3271                                                          je      .30                                             ;yes, continue
  3272                                                          dec     esi                                             ;pre-position
  3273                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3274                                                          mov     edi,edx                                         ;source buffer address
  3275                                  .50                     lodsb                                                   ;remaining byte
  3276                                                          stosb                                                   ;move to front of buffer
  3277                                                          test    al,al                                           ;end of line?
  3278                                                          jnz     .50                                             ;no, continue
  3279                                                          pop     es                                              ;restore non-volatile regs
  3280                                                          pop     edi                                             ;
  3281                                                          pop     esi                                             ;
  3282                                                          ret                                                     ;return
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ;
  3285                                  ;       Routine:        ConDetermineCommand
  3286                                  ;
  3287                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3288                                  ;
  3289                                  ;       input:          DS:EDX  command address
  3290                                  ;
  3291                                  ;       output:         EAX     >=0     = command nbr
  3292                                  ;                               0       = unknown command
  3293                                  ;
  3294                                  ;-----------------------------------------------------------------------------------------------------------------------
  3295                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3296                                                          push    ecx                                             ;
  3297                                                          push    esi                                             ;
  3298                                                          push    edi                                             ;
  3299                                                          upperCaseString                                         ;upper-case string at EDX
  3300                                                          mov     esi,tConCmdTbl                                  ;commands table
  3301                                                          xor     edi,edi                                         ;intialize command number
  3302                                                          cld                                                     ;forward strings
  3303                                  .10                     lodsb                                                   ;command length
  3304                                                          movzx   ecx,al                                          ;command length
  3305                                                          jecxz   .20                                             ;branch if end of table
  3306                                                          mov     ebx,esi                                         ;table entry address
  3307                                                          add     esi,ecx                                         ;next table entry address
  3308                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3309                                                          jecxz   .20                                             ;branch if equal
  3310                                                          inc     edi                                             ;increment command nbr
  3311                                                          jmp     .10                                             ;repeat
  3312                                  .20                     mov     eax,edi                                         ;command number
  3313                                                          pop     edi                                             ;restore non-volatile regs
  3314                                                          pop     esi                                             ;
  3315                                                          pop     ecx                                             ;
  3316                                                          pop     ebx                                             ;
  3317                                                          ret                                                     ;return
  3318                                  ;-----------------------------------------------------------------------------------------------------------------------
  3319                                  ;
  3320                                  ;       Routine:        ConExit
  3321                                  ;
  3322                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3323                                  ;
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  ConExit                 resetSystem                                             ;issue system reset
  3326                                                          ret                                                     ;return
  3327                                  ;-----------------------------------------------------------------------------------------------------------------------
  3328                                  ;
  3329                                  ;       Constants
  3330                                  ;
  3331                                  ;-----------------------------------------------------------------------------------------------------------------------
  3332                                  ;-----------------------------------------------------------------------------------------------------------------------
  3333                                  ;
  3334                                  ;       Panels
  3335                                  ;
  3336                                  ;       Notes:          1.      Each field MUST have an address of a constant or an input field.
  3337                                  ;                       2.      The constant text or input field MUST be at least the length of the field.
  3338                                  ;                       3.      Field constant text or field values MUST be comprised of printable characters.
  3339                                  ;
  3340                                  ;-----------------------------------------------------------------------------------------------------------------------
  3341                                  czPnlCon001             dd      czFldPnlIdCon001                                ;field text
  3342                                                          db      00,00,02h,06                                    ;flags+row, col, attr, length
  3343                                                          dd      czFldTitleCon001
  3344                                                          db      00,30,07h,20
  3345                                                          dd      czFldDatTmCon001
  3346                                                          db      00,63,02h,17
  3347                                                          dd      czFldPrmptCon001
  3348                                                          db      23,00,07h,01
  3349                                                          dd      wzConsoleInBuffer
  3350                                                          db      128+23,01,07h,79
  3351                                                          dd      0                                               ;end of panel
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353                                  ;
  3354                                  ;       Tables
  3355                                  ;
  3356                                  ;-----------------------------------------------------------------------------------------------------------------------
  3357                                                                                                                  ;---------------------------------------
  3358                                                                                                                  ;  Command Jump Table
  3359                                                                                                                  ;---------------------------------------
  3360                                  tConJmpTbl              equ     $                                               ;command jump table
  3361                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3362                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3363                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3364                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3365                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3366                                                                                                                  ;---------------------------------------
  3367                                                                                                                  ;  Command Name Table
  3368                                                                                                                  ;---------------------------------------
  3369                                  tConCmdTbl              equ     $                                               ;command name table
  3370                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3371                                                          db      5,"EXIT",0                                      ;exit command
  3372                                                          db      5,"QUIT",0                                      ;quit command
  3373                                                          db      0                                               ;end of table
  3374                                  ;-----------------------------------------------------------------------------------------------------------------------
  3375                                  ;
  3376                                  ;       Strings
  3377                                  ;
  3378                                  ;-----------------------------------------------------------------------------------------------------------------------
  3379                                  czFldPnlIdCon001        db      "CON001"                                        ;main console panel id
  3380                                  czFldTitleCon001        db      "CustomOS Version 1.0"                          ;main console panel title
  3381                                  czFldDatTmCon001        db      "DD-MMM-YYYY HH:MM"                             ;panel date and time template
  3382                                  czFldPrmptCon001        db      ":"                                             ;command prompt
  3383                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3384                                  %endif
  3385                                  %ifdef BUILDDISK
  3386                                  ;-----------------------------------------------------------------------------------------------------------------------
  3387                                  ;
  3388                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3389                                  ;
  3390                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3391                                  ;
  3392                                  ;-----------------------------------------------------------------------------------------------------------------------
  3393                                  section                 unused                                                  ;unused disk space
  3394                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3395                                  %endif
  3396                                  ;=======================================================================================================================
  3397                                  ;
  3398                                  ;       End of Program Code
  3399                                  ;
  3400                                  ;=======================================================================================================================
