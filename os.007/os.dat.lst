     1                                  ;-----------------------------------------------------------------------------------------------------------------------
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.007
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;			clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;	Revised:	January 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;-----------------------------------------------------------------------------------------------------------------------
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;
    51                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    52                                  ;			Assembly operands begin in column 33.
    53                                  ;			Lines should not extend beyond column 120.
    54                                  ;
    55                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock)
    56                                  ;			Routine names begin with a verb (Get, Read, etc.)
    57                                  ;
    58                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    59                                  ;			Constant stored values are named in camel case, starting with 'c'.
    60                                  ;			The 2nd letter of the constant label indicates the storage type.
    61                                  ;
    62                                  ;			cq......	constant quad-word (dq)
    63                                  ;			cd......	constant double-word (dd)
    64                                  ;			cw......	constant word (dw)
    65                                  ;			cb......	constant byte (db)
    66                                  ;			cz......	constant ASCIIZ (null-terminated) string
    67                                  ;
    68                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    69                                  ;			The 2nd letter of the variable label indicates the storage type.
    70                                  ;
    71                                  ;			wq......	variable quad-word (resq)
    72                                  ;			wd......	variable double-word (resd)
    73                                  ;			ww......	variable word (resw)
    74                                  ;			wb......	variable byte (resb)
    75                                  ;
    76                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    77                                  ;			Structure names do not begin with a verb.
    78                                  ;
    79                                  ;	Macros:		Macro names are in camel case (getDateString).
    80                                  ;			Macro names do begin with a verb.
    81                                  ;
    82                                  ;	Registers:	Registers EBX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    83                                  ;			Registers EAX and ECX are preferred for returning response/result values.
    84                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
    85                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
    86                                  ;
    87                                  ;-----------------------------------------------------------------------------------------------------------------------
    88                                  ;-----------------------------------------------------------------------------------------------------------------------
    89                                  ;
    90                                  ;	Equates
    91                                  ;
    92                                  ;	The equate (equ) statements define symbolic names for fixed values so that these values can be defined and
    93                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
    94                                  ;	values are used. Equate names are in all-caps and are the only symbolic names that begin with the letter 'E'.
    95                                  ;	Equates are grouped into related sets. Hardware-based values are listed first, followed by BIOS and protocol
    96                                  ;	values and, lastly, application values.
    97                                  ;
    98                                  ;-----------------------------------------------------------------------------------------------------------------------
    99                                  ;-----------------------------------------------------------------------------------------------------------------------
   100                                  ;
   101                                  ;	8042 Keyboard Controller						EKEY...
   102                                  ;
   103                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   104                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 0x64 is set to zero.
   105                                  ;
   106                                  ;-----------------------------------------------------------------------------------------------------------------------
   107                                  EKEYPORTDATA		equ	060h						;8042 data port
   108                                  EKEYPORTSTAT		equ	064h						;8042 status port
   109                                  EKEYCMDRESET		equ	0FEh						;8042 drive B0 low to restart
   110                                  EKEYBITOUT		equ	001h						;8042 output buffer status bit
   111                                  EKEYBITIN		equ	002h						;8042 input buffer status bit
   112                                  EKEYCMDLAMPS		equ	0EDh						;8042 set/reset lamps command
   113                                  EKEYWAITLOOP		equ	010000h						;8042 wait loop
   114                                  										;---------------------------------------
   115                                  										;	Keyboard Scan Codes
   116                                  										;---------------------------------------
   117                                  EKEYCTRLDOWN		equ	01Dh						;control key down
   118                                  EKEYPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   119                                  EKEYSHIFTLDOWN		equ	02Ah						;left shift key down
   120                                  EKEYPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   121                                  EKEYSLASH		equ	035h						;slash
   122                                  EKEYSHIFTRDOWN		equ	036h						;right shift key down
   123                                  EKEYALTDOWN		equ	038h						;alt key down
   124                                  EKEYCAPSDOWN		equ	03Ah						;caps-lock down
   125                                  EKEYNUMDOWN		equ	045h						;num-lock down
   126                                  EKEYSCROLLDOWN		equ	046h						;scroll-lock down
   127                                  EKEYINSERTDOWN		equ	052h						;insert down (e0 52)
   128                                  EKEYUP			equ	080h						;up
   129                                  EKEYCTRLUP		equ	09Dh						;control key up
   130                                  EKEYSHIFTLUP		equ	0AAh						;left shift key up
   131                                  EKEYSLASHUP		equ	0B5h						;slash key up
   132                                  EKEYSHIFTRUP		equ	0B6h						;right shift key up
   133                                  EKEYPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   134                                  EKEYALTUP		equ	0B8h						;alt key up
   135                                  EKEYCAPSUP		equ	0BAh						;caps-lock up
   136                                  EKEYNUMUP		equ	0C5h						;num-lock up
   137                                  EKEYSCROLLUP		equ	0C6h						;scroll-lock up
   138                                  EKEYINSERTUP		equ	0D2h						;insert up (e0 d2)
   139                                  EKEYCODEEXT0		equ	0E0h						;8042 extended scan code 0
   140                                  EKEYCODEEXT1		equ	0E1h						;8042 extended scan code 1
   141                                  ;-----------------------------------------------------------------------------------------------------------------------
   142                                  ;
   143                                  ;	8253 Programmable Interrupt Timer					EPIT...
   144                                  ;
   145                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   146                                  ;	approximately 18.2 times per second.
   147                                  ;
   148                                  ;-----------------------------------------------------------------------------------------------------------------------
   149                                  EPITDAYTICKS		equ	1800B0h						;8253 ticks per day
   150                                  ;-----------------------------------------------------------------------------------------------------------------------
   151                                  ;
   152                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   153                                  ;
   154                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   155                                  ;	external devices and signals a hardware interrupt to the CPU.
   156                                  ;
   157                                  ;-----------------------------------------------------------------------------------------------------------------------
   158                                  EPICPORTPRI		equ	020h						;8259 primary control port 0
   159                                  EPICPORTPRI1		equ	021h						;8259 primary control port 1
   160                                  EPICPORTSEC		equ	0A0h						;8259 secondary control port 0
   161                                  EPICPORTSEC1		equ	0A1h						;8259 secondary control port 1
   162                                  EPICEOI			equ	020h						;8259 non-specific EOI code
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  ;
   165                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   166                                  ;
   167                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   168                                  ;	for CGA, EGA, VGA and compatible video modes.
   169                                  ;
   170                                  ;-----------------------------------------------------------------------------------------------------------------------
   171                                  ECRTPORTHI		equ	003h						;CRT controller port hi
   172                                  ECRTPORTLO		equ	0D4h						;CRT controller port lo
   173                                  ECRTCURLOCHI		equ	00Eh						;CRT cursor loc reg hi
   174                                  ECRTCURLOCLO		equ	00Fh						;CRT cursor loc reg lo
   175                                  ;-----------------------------------------------------------------------------------------------------------------------
   176                                  ;
   177                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   178                                  ;
   179                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  EFDCPORTHI		equ	003h						;FDC controller port hi
   183                                  EFDCPORTLOOUT		equ	0F2h						;FDC digital output register lo
   184                                  EFDCPORTLOSTAT		equ	0F4h						;FDC main status register lo
   185                                  EFDCSTATBUSY		equ	010h						;FDC main status is busy
   186                                  EFDCMOTOROFF		equ	00Ch						;FDC motor off / enable / DMA
   187                                  ;-----------------------------------------------------------------------------------------------------------------------
   188                                  ;
   189                                  ;	x86 Descriptor Access Codes						EACC...
   190                                  ;
   191                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   192                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   193                                  ;
   194                                  ;	0.......	Segment is not present in memory (triggers int 11)
   195                                  ;	1.......	Segment is present in memory
   196                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   197                                  ;	...0....	Segment is a system segment
   198                                  ;	...00010		Local Descriptor Table
   199                                  ;	...00101		Task Gate
   200                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   201                                  ;	...01100		Call Gate (386)
   202                                  ;	...01110		Interrupt Gate (386)
   203                                  ;	...01111		Trap Gate (386)
   204                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   205                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   206                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   207                                  ;
   208                                  ;-----------------------------------------------------------------------------------------------------------------------
   209                                  EACCLDT			equ	10000010b					;local descriptor table
   210                                  EACCTASK		equ	10000101b					;task gate
   211                                  EACCTSS			equ	10001001b					;task-state segment
   212                                  EACCGATE		equ	10001100b					;call gate
   213                                  EACCINT			equ	10001110b					;interrupt gate
   214                                  EACCTRAP		equ	10001111b					;trap gate
   215                                  EACCDATA		equ	10010011b					;upward writable data
   216                                  EACCCODE		equ	10011011b					;non-conforming readable code
   217                                  ;-----------------------------------------------------------------------------------------------------------------------
   218                                  ;
   219                                  ;	BIOS Interrupts and Functions						EBIOS...
   220                                  ;
   221                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   222                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   223                                  ;
   224                                  ;-----------------------------------------------------------------------------------------------------------------------
   225                                  EBIOSINTVIDEO		equ	010h						;BIOS video services interrupt
   226                                  EBIOSFNTTYOUTPUT	equ	00Eh						;BIOS video TTY output function
   227                                  EBIOSINTDISKETTE	equ	013h						;BIOS diskette services interrupt
   228                                  EBIOSINTMISC		equ	015h						;BIOS miscellaneous services interrupt
   229                                  EBIOSFNINITPROTMODE	equ	089h						;BIOS initialize protected mode fn
   230                                  EBIOSINTKEYBOARD	equ	016h						;BIOS keyboard services interrupt
   231                                  EBIOSFNKEYSTATUS	equ	001h						;BIOS keyboard status function
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	ASCII									EASCII...
   235                                  ;
   236                                  ;-----------------------------------------------------------------------------------------------------------------------
   237                                  EASCIIBACKSPACE		equ	8						;ASCII backspace
   238                                  EASCIILINEFEED		equ	10						;ASCII line feed
   239                                  EASCIIRETURN		equ	13						;ASCII carriage return
   240                                  EASCIIESCAPE		equ	27						;ASCII escape
   241                                  EASCIISPACE		equ	32						;ASCII space
   242                                  EASCIIUPPERA		equ	65						;ASCII 'A'
   243                                  EASCIIUPPERZ		equ	90						;ASCII 'Z'
   244                                  EASCIILOWERA		equ	97						;ASCII 'a'
   245                                  EASCIILOWERZ		equ	122						;ASCII 'z'
   246                                  EASCIITILDE		equ	126						;ASCII '~'
   247                                  EASCIICASE		equ	00100000b					;ASCII case bit
   248                                  EASCIICASEMASK		equ	11011111b					;ASCII case mask
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	Boot Sector and Loader Constants
   252                                  ;
   253                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   254                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   255                                  ;
   256                                  ;-----------------------------------------------------------------------------------------------------------------------
   257                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   258                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   259                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   260                                  EBOOTSTACKTOP		equ	400h						;boot sector stack top relative to DS
   261                                  EMAXTRIES		equ	5						;max read retries
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   264                                  ;-----------------------------------------------------------------------------------------------------------------------
   265                                  ESELDAT			equ	18h						;kernel data selector
   266                                  ESELCGA			equ	20h						;cga video selector
   267                                  ESELOSCODE		equ	48h						;os kernel selector
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;	LDT Selectors								ESEL...
   270                                  ;-----------------------------------------------------------------------------------------------------------------------
   271                                  ESELMQ			equ	2Ch						;console task message queue
   272                                  ;-----------------------------------------------------------------------------------------------------------------------
   273                                  ;	Kernel Constants							EKRN...
   274                                  ;-----------------------------------------------------------------------------------------------------------------------
   275                                  EKRNDESLEN		equ	8						;size of descriptor
   276                                  EKRNADR			equ	1000h						;kernel base address
   277                                  EKRNSEG			equ	(EKRNADR >> 4)					;kernel base segment
   278                                  ;-----------------------------------------------------------------------------------------------------------------------
   279                                  ;	Keyboard Flags								EKEY...
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  EKEYCTRLLEFT		equ	00000001b					;left control
   282                                  EKEYSHIFTLEFT		equ	00000010b					;left shift
   283                                  EKEYALTLEFT		equ	00000100b					;left alt
   284                                  EKEYCTRLRIGHT		equ	00001000b					;right control
   285                                  EKEYSHIFTRIGHT		equ	00010000b					;right shift
   286                                  EKEYSHIFT		equ	00010010b					;left or right shift
   287                                  EKEYALTRIGHT		equ	00100000b					;right alt
   288                                  EKEYLOCKSCROLL		equ	00000001b					;scroll-lock flag
   289                                  EKEYLOCKNUM		equ	00000010b					;num-lock flag
   290                                  EKEYLOCKCAPS		equ	00000100b					;cap-lock flag
   291                                  EKEYTIMEOUT		equ	10000000b					;controller timeout
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ;	Console Constants							ECON...
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ECONCOLS		equ	80						;columns per row
   296                                  ECONROWS		equ	24						;console rows
   297                                  ECONOIAROW		equ	24						;operator information area row
   298                                  ECONCOLBYTES		equ	2						;bytes per column
   299                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   300                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   301                                  ECONCLEARDWORD		equ	07200720h					;attribute and ASCII space
   302                                  ECONOIADWORD		equ	70207020h					;attribute and ASCII space
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;	Kernel Message Identifiers						EMSG...
   305                                  ;-----------------------------------------------------------------------------------------------------------------------
   306                                  EMSGKEYDOWN		equ	41000000h					;message: key-down
   307                                  EMSGKEYUP		equ	41010000h					;message: key-up
   308                                  EMSGKEYCHAR		equ	41020000h					;message: character
   309                                  ;-----------------------------------------------------------------------------------------------------------------------
   310                                  ;
   311                                  ;	Structures
   312                                  ;
   313                                  ;-----------------------------------------------------------------------------------------------------------------------
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  ;
   316                                  ;	MQUEUE
   317                                  ;
   318                                  ;	The MQUEUE structure maps memory used for a message queue.
   319                                  ;
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  struc			MQUEUE
   322 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   323 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   324 00000008 <res 000003F8>          MQData			resd	254						;message queue
   325                                  endstruc
   326                                  ;-----------------------------------------------------------------------------------------------------------------------
   327                                  ;
   328                                  ;	OSDATA
   329                                  ;
   330                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   331                                  ;	used by the BIOS.
   332                                  ;
   333                                  ;-----------------------------------------------------------------------------------------------------------------------
   334                                  struc			OSDATA
   335 00000000 <res 00000400>          			resb	400h						;000 real mode interrupt vectors
   336 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   337 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   338 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   339 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   340 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   341 0000040A <res 00000002>          			resw	1						;40A LPT2 port address
   342 0000040C <res 00000002>          			resw	1						;40C LPT3 port address
   343 0000040E <res 00000002>          			resw	1						;40E LPT4 port address
   344 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   345 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   346 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12H
   347 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   348 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   349 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   350 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   351 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   352 0000041A <res 00000002>          			resw	1						;41A keyboard buffer head offset
   353 0000041C <res 00000002>          			resw	1						;41C keyboard buffer tail offset
   354 0000041E <res 00000020>          			resb	32						;41E keyboard buffer
   355 0000043E <res 00000001>          wbFDCStatus		resb	1						;43E drive recalibration status
   356 0000043F <res 00000001>          wbFDCControl		resb	1						;43F FDC motor status/control byte
   357 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   358 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   359 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   360 00000449 <res 00000001>          			resb	1						;449 current video mode
   361 0000044A <res 00000002>          			resw	1						;44A screen columns
   362 0000044C <res 00000002>          			resw	1						;44C video regen buffer size
   363 0000044E <res 00000002>          			resw	1						;44E current video page offset
   364 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   365 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   366 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   367 00000462 <res 00000001>          			resb	1						;462 active display page number
   368 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   369 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   370 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   371 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   372 00000469 <res 00000003>          			resb	3						;469 vague
   373 0000046C <res 00000004>          wfClockTicks		resd	1						;46C clock ticks
   374 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   375 00000471 <res 00000001>          			resb	1						;471 bios break flag
   376 00000472 <res 00000002>          			resw	1						;472 soft reset
   377 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   378 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   379 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   380 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   381 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   382 0000047C <res 00000004>          			resb	4						;47C COM timeout values
   383 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   384 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   385 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   386 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   387 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   388 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   389 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   390 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   391 0000048A <res 00000001>          			resb	1						;48A EGA+ display combination code
   392 0000048B <res 00000001>          			resb	1						;48B last diskette data rate selected
   393 0000048C <res 00000001>          			resb	1						;48C hard disk status from controller
   394 0000048D <res 00000001>          			resb	1						;48D hard disk error from controller
   395 0000048E <res 00000001>          			resb	1						;48E hard disk interrupt control flag
   396 0000048F <res 00000001>          			resb	1						;48F combination hard/floppy disk card
   397 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   398 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   399 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   400 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   401 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   402 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   403 0000049C <res 00000004>          			resd	1						;49C user wait time-out value in microseconds
   404 000004A0 <res 00000001>          			resb	1						;4A0 RTC wait function flag
   405 000004A1 <res 00000001>          			resb	1						;4A1 LANA DMA channel flags
   406 000004A2 <res 00000002>          			resb	2						;4A2 status of LANA 0,1
   407 000004A4 <res 00000004>          			resd	1						;4A4 saved hard disk interrupt vector
   408 000004A8 <res 00000004>          			resd	1						;4A8 BIOS video save/override pointer table addr
   409 000004AC <res 00000008>          			resb	8						;4AC reserved
   410 000004B4 <res 00000001>          			resb	1						;4B4 keyboard NMI control flags
   411 000004B5 <res 00000004>          			resd	1						;4B5 keyboard break pending flags
   412 000004B9 <res 00000001>          			resb	1						;4B9 Port 60 single byte queue
   413 000004BA <res 00000001>          			resb	1						;4BA scan code of last key
   414 000004BB <res 00000001>          			resb	1						;4BB NMI buffer head pointer
   415 000004BC <res 00000001>          			resb	1						;4BC NMI buffer tail pointer
   416 000004BD <res 00000010>          			resb	16						;4BD NMI scan code buffer
   417 000004CD <res 00000001>          			resb	1						;4CD unknown
   418 000004CE <res 00000002>          			resw	1						;4CE day counter
   419 000004D0 <res 00000020>          			resb	32						;4D0 unknown
   420 000004F0 <res 00000010>          			resb	16						;4F0 intra-app comm area
   421 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   422 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   423 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   424 00000505 <res 0000000A>          			resb	10						;505 POST work area
   425 0000050F <res 00000001>          			resb	1						;50F BASIC shell flag
   426 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   427 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   428 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   429 0000051A <res 00000004>          			resd	1						;51A BASIC INT 24 interrupt handler
   430 0000051E <res 00000002>          			resw	1						;51E unknown
   431 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   432 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1E)
   433 00000530 <res 00000004>          			resb	4						;530 MODE command
   434 00000534 <res 000001CC>          			resb	460						;534 unused
   435 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   436                                  ;-----------------------------------------------------------------------------------------------------------------------
   437                                  ;
   438                                  ;	OS Variables								@disk: N/A	@mem: 000800
   439                                  ;
   440                                  ;	These operating system variables are system global. They are defined at low memory address 800h and are
   441                                  ;	accessible by any kernel task or interrupt.
   442                                  ;
   443                                  ;-----------------------------------------------------------------------------------------------------------------------
   444                                  ECONDATA		equ	($)
   445 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   446 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   447 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   448 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   449 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   450 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   451 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   452 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   453 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   454 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   455 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   456 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   457 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   458 0000085C <res 00000050>          wzConsoleToken		resb	80						;token buffer
   459                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   460                                  endstruc
   461                                  ;-----------------------------------------------------------------------------------------------------------------------
   462                                  ;
   463                                  ;	Macros
   464                                  ;
   465                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   466                                  ;
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  %macro			mint	1
   469                                  _%1			equ	($-$$) / EKRNDESLEN
   470                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   471                                  %endmacro
   472                                  %macro			mtrap	1
   473                                  _%1			equ	($-$$) / EKRNDESLEN
   474                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   475                                  %endmacro
   476                                  %macro			menter	1
   477                                  ?%1			equ	($-$$)
   478                                  %endmacro
   479                                  %macro			tsvce	1
   480                                  e%1			equ	($-tsvc)/4
   481                                  			dd	%1
   482                                  %endmacro
   483                                  %ifdef BUILDBOOT
   484                                  ;-----------------------------------------------------------------------------------------------------------------------
   485                                  ;
   486                                  ;	Boot Sector Code							@disk: 000000	@mem: 007c00
   487                                  ;
   488                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   489                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   490                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   491                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   492                                  ;
   493                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   494                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   495                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   496                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   497                                  ;	immediately followed by a disk parameter table.
   498                                  ;
   499                                  ;-----------------------------------------------------------------------------------------------------------------------
   500                                  			cpu	8086						;assume minimal CPU
   501                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   502                                  			bits	16						;16-bit code at power-up
   503                                  %ifdef BUILDPREP
   504                                  Boot			jmp	word Prep					;jump to preparation code
   505                                  %else
   506 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   507                                  %endif
   508                                  ;-----------------------------------------------------------------------------------------------------------------------
   509                                  ;
   510                                  ;	Disk Parameter Table
   511                                  ;
   512                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   513                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   514                                  ;
   515                                  ;-----------------------------------------------------------------------------------------------------------------------
   516 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   517 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   518 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   519 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   520 00000010 02                      cbFatCount		db	2						;file allocation table copies
   521 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   522 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   523 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   524 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   525                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   526 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   527 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   528 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   529                                  ;
   530                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   531                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   532                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   533                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   534                                  ;	given several possible starting values for CS:IP.
   535                                  ;
   536                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   537 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   538                                  .@20			equ	$-$$						;.@20 = 021h
   539 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   540 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   541 00000025 B104                    			mov	cl,4						;shift count
   542 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   543 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   544 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   545                                  ;
   546                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we need DS and ES
   547                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   548                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   549                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   550                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   551                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   552                                  ;
   553 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   554 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   555 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   556 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp
   557 00000036 BC0004                  			mov	sp,EBOOTSTACKTOP				;SP = 0400
   558                                  ;
   559                                  ;	Our boot addressability is now set up according to the following diagram.
   560                                  ;
   561                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   562                                  ;				|  Unused (DOS Program Segment Prefix)		|
   563                                  ;			007c00	+-----------------------------------------------+ DS:0100
   564                                  ;				|  Boot Sector Code (vstart=100h)		|
   565                                  ;				|						|
   566                                  ;			007e00	+-----------------------------------------------+ DS:0300
   567                                  ;				|  Boot Stack					|
   568                                  ;	SS:SP --------> 007f00	+-----------------------------------------------+ DS:0400
   569                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   570                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   571                                  ;				|						|
   572                                  ;			009100	+-----------------------------------------------+ DS:1600
   573                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   574                                  ;				|						|
   575                                  ;			009300	+-----------------------------------------------+ DS:1800
   576                                  ;
   577                                  ;	On entry, DL indicates the drive being booted from.
   578                                  ;
   579 00000039 8816[F601]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   580                                  ;
   581                                  ;	Compute directory i/o buffer address.
   582                                  ;
   583 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   584 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   585 00000044 050004                  			add	ax,EBOOTSTACKTOP				;AX = 1600 = end of FAT buffer
   586 00000047 A3[EA01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1600
   587                                  ;
   588                                  ;	Compute segment where os.com will be loaded.
   589                                  ;
   590 0000004A D3E8                    			shr	ax,cl						;AX = 0160
   591 0000004C 01D8                    			add	ax,bx						;AX = 0160 + 07b0 = 0910
   592 0000004E 83E810                  			sub	ax,16						;AX = 0900
   593 00000051 A3[3A01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 0900
   594                                  ;
   595                                  ;	Write a message to the console so we know we have our addressability established.
   596                                  ;
   597 00000054 BE[BF01]                			mov	si,czLoadMsg					;loading message
   598 00000057 E84B01                  			call	BootPrint					;display loader message
   599                                  ;
   600                                  ;	Initialize the number of directory sectors to search.
   601                                  ;
   602 0000005A A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   603 0000005D A3[EC01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   604                                  ;
   605                                  ;	Compute number of directory sectors and initialize overhead count.
   606                                  ;
   607 00000060 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   608 00000062 F726[B201]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   609 00000066 F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   610 0000006A A3[EE01]                			mov	[wwOverhead],ax					;[overhead] = 000e
   611                                  ;
   612                                  ;	Compute directory entries per sector.
   613                                  ;
   614 0000006D 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   615 0000006E F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   616 00000070 A3[F001]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   617                                  ;
   618                                  ;	Compute first logical directory sector and update overhead count.
   619                                  ;
   620 00000073 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   621 00000076 F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   622 0000007A 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   623 0000007E 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   624 00000082 A3[F201]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   625 00000085 0106[EE01]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   626                                  ;
   627                                  ;	Read directory sector.
   628                                  ;
   629 00000089 B001                    .30			mov	al,1						;sector count
   630 0000008B A2[F401]                			mov	[wbReadCount],al				;[readcount] = 01
   631 0000008E 8B1E[EA01]              			mov	bx,[wwDirBuffer]				;BX = 1600
   632 00000092 E8A700                  			call	ReadSector					;read sector into es:bx
   633                                  ;
   634                                  ;	Setup variables to search this directory sector.
   635                                  ;
   636 00000095 A1[EC01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   637 00000098 3B06[F001]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   638 0000009C 7603                    			jna	.40						;no, continue
   639 0000009E A1[F001]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   640 000000A1 2906[EC01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   641 000000A5 BE[B401]                			mov	si,cbKernelProgram				;program name
   642 000000A8 8B3E[EA01]              			mov	di,[wwDirBuffer]				;DI = 1600
   643                                  ;
   644                                  ;	Loop through directory sectors searching for kernel program.
   645                                  ;
   646 000000AC 56                      .50			push	si						;save kernel name address
   647 000000AD 57                      			push	di						;save dir i/o buffer address
   648 000000AE B90B00                  			mov	cx,11						;length of 8+3 name
   649 000000B1 FC                      			cld							;forward strings
   650 000000B2 F3A6                    			repe	cmpsb						;compare entry name
   651 000000B4 5F                      			pop	di						;restore dir i/o buffer address
   652 000000B5 5E                      			pop	si						;restore kernel name address
   653 000000B6 7418                    			je	.60						;exit loop if found
   654 000000B8 033E[B201]              			add	di,[cwEntryLen]					;point to next dir entry
   655 000000BC 48                      			dec	ax						;decrement remaining entries
   656 000000BD 75ED                    			jnz	.50						;next entry
   657                                  ;
   658                                  ;	Repeat search if we are not at the end of the directory.
   659                                  ;
   660 000000BF FF06[F201]              			inc	word [wwLogicalSector]				;increment logical sector
   661 000000C3 833E[EC01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   662 000000C8 75BF                    			jne	.30						;no, get next sector
   663 000000CA BE[DB01]                			mov	si,czNoKernel					;missing kernel message
   664 000000CD E9C000                  			jmp	BootExit					;display message and exit
   665                                  ;
   666                                  ;	If we find the kernel program in the directory, read the FAT.
   667                                  ;
   668 000000D0 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   669 000000D3 A3[F201]                			mov	[wwLogicalSector],ax				;start past boot sector
   670 000000D6 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   671 000000D9 A2[F401]                			mov	[wbReadCount],al				;[readcount] = 09
   672 000000DC BB0004                  			mov	bx,EBOOTSTACKTOP				;BX = 0400
   673 000000DF E85A00                  			call	ReadSector					;read FAT into buffer
   674                                  ;
   675                                  ;	Get the starting cluster of the kernel program and target address.
   676                                  ;
   677 000000E2 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   678 000000E5 C41E[3801]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load address
   679                                  ;
   680                                  ;	Read each program cluster into RAM.
   681                                  ;
   682 000000E9 50                      .70			push	ax						;save cluster nbr
   683 000000EA 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   684 000000ED 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   685 000000F1 880E[F401]              			mov	[wbReadCount],cl				;save sectors to read
   686 000000F5 30ED                    			xor	ch,ch						;CX = sectors per cluster
   687 000000F7 F7E1                    			mul	cx						;DX:AX = logical cluster sector
   688 000000F9 0306[EE01]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   689 000000FD A3[F201]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   690 00000100 E83900                  			call	ReadSector					;read sectors into es:bx
   691                                  ;
   692                                  ;	Update buffer pointer for next cluster.
   693                                  ;
   694 00000103 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   695 00000106 30E4                    			xor	ah,ah						;AX = sectors per cluster
   696 00000108 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   697 0000010C 01C3                    			add	bx,ax						;BX = next cluster target address
   698 0000010E 58                      			pop	ax						;AX = restore cluster nbr
   699                                  ;
   700                                  ;	Compute next cluster number.
   701                                  ;
   702 0000010F 89C1                    			mov	cx,ax						;CX = cluster nbr
   703 00000111 89C7                    			mov	di,ax						;DI = cluster nbr
   704 00000113 D1E8                    			shr	ax,1						;AX = cluster/2
   705 00000115 89C2                    			mov	dx,ax						;DX = cluster/2
   706 00000117 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   707 00000119 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   708 0000011B 83E701                  			and	di,1						;get low bit
   709 0000011E 01C7                    			add	di,ax						;add one if cluster is odd
   710 00000120 81C70004                			add	di,EBOOTSTACKTOP				;add FAT buffer address
   711 00000124 8B05                    			mov	ax,[di]						;get cluster bytes
   712                                  ;
   713                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   714                                  ;
   715 00000126 F6C101                  			test	cl,1						;is cluster odd?
   716 00000129 7404                    			jz	.80						;no, skip ahead
   717 0000012B B104                    			mov	cl,4						;shift count
   718 0000012D D3E8                    			shr	ax,cl						;shift nybble low
   719 0000012F 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   720 00000132 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   721 00000135 75B2                    			jne	.70						;no, continue
   722                                  ;
   723                                  ;	Transfer control to the operating system program.
   724                                  ;
   725 00000137 EA                      			db	0EAh						;jmp seg:offset
   726 00000138 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   727 0000013A 0009                    wwLoadSegment		dw	0900h						;kernel entry segment (computed)
   728                                  ;
   729                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   730                                  ;
   731 0000013C A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   732 0000013F F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   733 00000143 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   734 00000145 A1[F201]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   735 00000148 F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   736 0000014A A2[F901]                			mov	[wbTrack],al					;[track] = cylinder
   737 0000014D 89D0                    			mov	ax,dx						;AX = cyl sector
   738 0000014F F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   739 00000153 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   740 00000155 A3[F701]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   741                                  ;
   742                                  ;	Try maxtries times to read sector.
   743                                  ;
   744 00000158 B90500                  			mov	cx,EMAXTRIES					;CX = 0005
   745 0000015B 53                      .10			push	bx						;save buffer address
   746 0000015C 51                      			push	cx						;save retry count
   747 0000015D 8B16[F601]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   748 00000161 8B0E[F801]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   749 00000165 A1[F401]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   750 00000168 CD13                    			int	EBIOSINTDISKETTE				;read sector
   751 0000016A 59                      			pop	cx						;restore retry count
   752 0000016B 5B                      			pop	bx						;restore buffer address
   753 0000016C 7343                    			jnc	BootReturn					;skip ahead if done
   754 0000016E E2EB                    			loop	.10						;retry
   755                                  ;
   756                                  ;	Handle disk error: convert to ASCII and store in error string.
   757                                  ;
   758 00000170 88E0                    			mov	al,ah						;AL = bios error code
   759 00000172 30E4                    			xor	ah,ah						;AX = bios error code
   760 00000174 B210                    			mov	dl,16						;divisor for base 16
   761 00000176 F6F2                    			div	dl						;AL = hi order, AH = lo order
   762 00000178 0D3030                  			or	ax,3030h					;apply ASCII zone bits
   763 0000017B 80FC3A                  			cmp	ah,3Ah						;range test ASCII numeral
   764 0000017E 7203                    			jb	.20						;continue if numeral
   765 00000180 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   766 00000183 3C3A                    .20			cmp	al,3Ah						;range test ASCII numeral
   767 00000185 7203                    			jb	.30						;continue if numeral
   768 00000187 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   769 0000018A A3[D801]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   770 0000018D BE[CD01]                			mov	si,czErrorMsg					;error message address
   771 00000190 E81200                  BootExit		call	BootPrint					;display messge to console
   772 00000193 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   773 00000195 CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   774 00000197 7504                    			jnz	.20						;continue if key pressed
   775 00000199 FB                      			sti							;enable maskable interrupts
   776 0000019A F4                      			hlt							;wait for interrupt
   777 0000019B EBF6                    			jmp	.10						;repeat
   778 0000019D B0FE                    .20			mov	al,EKEYCMDRESET					;8042 pulse output port pin
   779 0000019F E664                    			out	EKEYPORTSTAT,al					;drive B0 low to restart
   780 000001A1 FB                      .30			sti							;enable maskable interrupts
   781 000001A2 F4                      			hlt							;stop until reset, int, nmi
   782 000001A3 EBFC                    			jmp	.30						;loop until restart kicks in
   783                                  ;
   784                                  ;	Display text message.
   785                                  ;
   786 000001A5 FC                      BootPrint		cld							;forward strings
   787 000001A6 AC                      			lodsb							;load next byte at DS:SI in AL
   788 000001A7 84C0                    			test	al,al						;end of string?
   789 000001A9 7406                    			jz	BootReturn					;... yes, exit our loop
   790 000001AB B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   791 000001AD CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   792 000001AF EBF4                    			jmp	BootPrint					;repeat until done
   793 000001B1 C3                      BootReturn		ret							;return
   794                                  ;-----------------------------------------------------------------------------------------------------------------------
   795                                  ;
   796                                  ;	Constants
   797                                  ;
   798                                  ;-----------------------------------------------------------------------------------------------------------------------
   799                                  			align	2
   800 000001B2 2000                    cwEntryLen		dw	32						;length of directory entry
   801 000001B4 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   801 000001BD 4F4D               
   802 000001BF 4C6F6164696E67202E-     czLoadMsg		db	"Loading ...",13,10,0				;loading message
   802 000001C8 2E2E0D0A00         
   803 000001CD 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   803 000001D6 7220               
   804 000001D8 202000                  wzErrorCode		db	20h,20h,0					;error code and null terminator
   805 000001DB 4F532E434F4D206D69-     czNoKernel		db	"OS.COM missing",0				;missing kernel message
   805 000001E4 7373696E6700       
   806                                  ;-----------------------------------------------------------------------------------------------------------------------
   807                                  ;
   808                                  ;	Work Areas
   809                                  ;
   810                                  ;-----------------------------------------------------------------------------------------------------------------------
   811                                  			align	2
   812 000001EA 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   813 000001EC 0000                    wwEntriesLeft		dw	0						;directory entries to search
   814 000001EE 0000                    wwOverhead		dw	0						;overhead sectors
   815 000001F0 0000                    wwSectorEntries		dw	0						;directory entries per sector
   816 000001F2 0000                    wwLogicalSector		dw	0						;current logical sector
   817                                  wwReadCountCommand	equ	$						;read count and command
   818 000001F4 00                      wbReadCount		db	0						;sectors to read
   819 000001F5 02                      cbReadCommand		db	2						;BIOS read disk fn code
   820                                  wwDriveHead		equ	$						;drive, head (word)
   821 000001F6 00                      wbDrive			db	0						;drive
   822 000001F7 00                      wbHead			db	0						;head
   823                                  wwSectorTrack		equ	$						;sector, track (word)
   824 000001F8 00                      			db	0						;sector
   825 000001F9 00                      wbTrack			db	0						;track
   826 000001FA 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   827 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   828                                  %endif
   829                                  %ifdef BUILDPREP
   830                                  ;-----------------------------------------------------------------------------------------------------------------------
   831                                  ;
   832                                  ;	Diskette Preparation Code
   833                                  ;
   834                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   835                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   836                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   837                                  ;
   838                                  ;-----------------------------------------------------------------------------------------------------------------------
   839                                  ;
   840                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   841                                  ;
   842                                  Prep			mov	si,czPrepMsg10					;starting message address
   843                                  			call	BootPrint					;display message
   844                                  ;
   845                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   846                                  ;
   847                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   848                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   849                                  			jnz	.12						;continue if key pressed
   850                                  			sti							;enable interrupts
   851                                  			hlt							;wait for interrupt
   852                                  			jmp	.10						;repeat
   853                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   854                                  			je	.15						;yes, branch
   855                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   856                                  			jne	.10						;no, repeat
   857                                  			jmp	.90						;yes, exit program
   858                                  ;
   859                                  ;	Display writing-sector message and patch the JMP instruction.
   860                                  ;
   861                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   862                                  			call	BootPrint					;display message
   863                                  			mov	bx,Boot+1					;address of JMP instruction operand
   864                                  			mov	ax,01Bh						;address past disk parameter table
   865                                  			mov	[bx],ax						;update the JMP instruction
   866                                  ;
   867                                  ;	Try to read the boot sector.
   868                                  ;
   869                                  			mov	cx,EMAXTRIES					;try up to five times
   870                                  .20			push	cx						;save remaining tries
   871                                  			mov	bx,wcPrepInBuf					;input buffer address
   872                                  			mov	dx,0						;head zero, drive zero
   873                                  			mov	cx,1						;track zero, sector one
   874                                  			mov	ax,0201h					;read one sector
   875                                  			int	EBIOSINTDISKETTE				;attempt the read
   876                                  			pop	cx						;restore remaining retries
   877                                  			jnc	.30						;skip ahead if successful
   878                                  			loop	.20						;try again
   879                                  			mov	si,czPrepMsg20					;read-error message address
   880                                  			jmp	.50						;branch to error routine
   881                                  ;
   882                                  ;	Copy diskette parms from input buffer to output buffer.
   883                                  ;
   884                                  .30			mov	si,wcPrepInBuf					;input buffer address
   885                                  			add	si,11						;skip over JMP and system ID
   886                                  			mov	di,Boot						;output buffer address
   887                                  			add	di,11						;skip over JMP and system ID
   888                                  			mov	cx,19						;length of diskette parameters
   889                                  			cld							;forward string copies
   890                                  			rep	movsb						;copy diskette parameters
   891                                  ;
   892                                  ;	Try to write boot sector to diskette.
   893                                  ;
   894                                  			mov	cx,EMAXTRIES					;try up to five times
   895                                  .40			push	cx						;save remaining tries
   896                                  			mov	bx,Boot						;output buffer address
   897                                  			mov	dx,0						;head zero, drive zero
   898                                  			mov	cx,1						;track zero, sector one
   899                                  			mov	ax,0301h					;write one sector
   900                                  			int	EBIOSINTDISKETTE				;attempt the write
   901                                  			pop	cx						;restore remaining retries
   902                                  			jnc	.80						;skip ahead if successful
   903                                  			loop	.40						;try again
   904                                  			mov	si,czPrepMsg30					;write-error message address
   905                                  ;
   906                                  ;	Convert the error code to ASCII and display the error message.
   907                                  ;
   908                                  .50			push	ax						;save error code
   909                                  			mov	al,ah						;copy error code
   910                                  			mov	ah,0						;AX = error code
   911                                  			mov	dl,10h						;hexadecimal divisor
   912                                  			idiv	dl						;AL = hi-order, AH = lo-order
   913                                  			or	ax,3030h					;add ASCII zone digits
   914                                  			cmp	ah,3Ah						;AH ASCII numeral?
   915                                  			jb	.60						;yes, continue
   916                                  			add	ah,7						;no, make ASCII 'A'-'F'
   917                                  .60			cmp	al,3Ah						;al ASCII numeral?
   918                                  			jb	.70						;yes, continue
   919                                  			add	al,7						;no, make ASCII
   920                                  .70			mov	[si+17],ax					;put ASCII error code in message
   921                                  			call	BootPrint					;write error message
   922                                  			pop	ax						;restore error code
   923                                  ;
   924                                  ;	Display the completion message.
   925                                  ;
   926                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   927                                  			mov	al,ah						;BIOS return code
   928                                  			cmp	al,0						;success?
   929                                  			je	.85						;yes, continue
   930                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   931                                  			cmp	al,1						;disk parameter error?
   932                                  			je	.85						;yes, continue
   933                                  			mov	si,czPrepMsgErr2				;address mark not found message
   934                                  			cmp	al,2						;address mark not found?
   935                                  			je	.85						;yes, continue
   936                                  			mov	si,czPrepMsgErr3				;protected disk message
   937                                  			cmp	al,3						;protected disk?
   938                                  			je	.85						;yes, continue
   939                                  			mov	si,czPrepMsgErr6				;diskette removed message
   940                                  			cmp	al,6						;diskette removed?
   941                                  			je	.85						;yes, continue
   942                                  			mov	si,czPrepMsgErr80				;drive timed out message
   943                                  			cmp	al,80H						;drive timed out?
   944                                  			je	.85						;yes, continue
   945                                  			mov	si,czPrepMsgErrXX				;unknown error message
   946                                  .85			call	BootPrint					;display result message
   947                                  .90			mov	ax,4C00H					;terminate with zero result code
   948                                  			int	21h						;terminate DOS program
   949                                  			ret							;return (should not execute)
   950                                  ;-----------------------------------------------------------------------------------------------------------------------
   951                                  ;
   952                                  ;	Diskette Preparation Messages
   953                                  ;
   954                                  ;-----------------------------------------------------------------------------------------------------------------------
   955                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   956                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   957                                  			db	13,10
   958                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   959                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   960                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
   961                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
   962                                  			db	13,10,0
   963                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
   964                                  			db	13,10,0
   965                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
   966                                  			db	13,10,0
   967                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
   968                                  			db	13,10,0
   969                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
   970                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
   971                                  			db	13,10,0
   972                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
   973                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
   974                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
   975                                  			db	13,10,"and retry."
   976                                  			db	13,10,0
   977                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
   978                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
   979                                  			db	13,10,"using another diskette."
   980                                  			db	13,10,0
   981                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
   982                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
   983                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
   984                                  			db	13,10,0
   985                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
   986                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
   987                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
   988                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
   989                                  			db	13,10,"is properly inserted in the diskette drive."
   990                                  			db	13,10,0
   991                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
   992                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
   993                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
   994                                  			db	13,10,0
   995                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
   996                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
   997                                  			db	13,10,"your computer's technical reference for a description of this error code."
   998                                  			db	13,10,0
   999                                  wcPrepInBuf		equ	$
  1000                                  %endif
  1001                                  %ifdef BUILDDISK
  1002                                  ;-----------------------------------------------------------------------------------------------------------------------
  1003                                  ;
  1004                                  ;	File Allocation Tables
  1005                                  ;
  1006                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1007                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1008                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1009                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1010                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1011                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1012                                  ;	the last cluster in the chain.
  1013                                  ;
  1014                                  ;	Every three bytes encode two FAT entries as follows:
  1015                                  ;
  1016                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1017                                  ;
  1018                                  ;-----------------------------------------------------------------------------------------------------------------------
  1019                                  ;-----------------------------------------------------------------------------------------------------------------------
  1020                                  ;
  1021                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1022                                  ;
  1023                                  ;-----------------------------------------------------------------------------------------------------------------------
  1024                                  section			fat1							;first copy of FAT
  1025                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1026                                  			db	005h,060h,000h,	007h,080h,000h
  1027                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1028                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1029                                  			db	011h,020h,001h,	013h,040h,001h
  1030                                  			db	015h,060h,001h,	017h,080h,001h
  1031                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1032                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1033                                  			db	021h,020h,002h,	023h,040h,002h
  1034                                  			db	025h,060h,002h,	027h,080h,002h
  1035                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1036                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1037                                  ;-----------------------------------------------------------------------------------------------------------------------
  1038                                  ;
  1039                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1040                                  ;
  1041                                  ;-----------------------------------------------------------------------------------------------------------------------
  1042                                  section			fat2							;second copy of FAT
  1043                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1044                                  			db	005h,060h,000h,	007h,080h,000h
  1045                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1046                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1047                                  			db	011h,020h,001h,	013h,040h,001h
  1048                                  			db	015h,060h,001h,	017h,080h,001h
  1049                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1050                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1051                                  			db	021h,020h,002h,	023h,040h,002h
  1052                                  			db	025h,060h,002h,	027h,080h,002h
  1053                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1054                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1055                                  ;-----------------------------------------------------------------------------------------------------------------------
  1056                                  ;
  1057                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1058                                  ;
  1059                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1060                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1061                                  ;	copy.
  1062                                  ;
  1063                                  ;-----------------------------------------------------------------------------------------------------------------------
  1064                                  section			dir							;diskette directory
  1065                                  			db	"OS      COM"					;file name (must contain spaces)
  1066                                  			db	20h						;attribute (archive bit set)
  1067                                  			times	10 db 0;					;unused
  1068                                  			dw	0h						;time
  1069                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1070                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1071                                  			dw	2						;first cluster
  1072                                  			dd	5200h						;file size
  1073                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1074                                  %endif
  1075                                  %ifdef BUILDCOM
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;	OS.COM
  1079                                  ;
  1080                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1081                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1082                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1083                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1084                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1085                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1086                                  ;
  1087                                  ;	Our loader addressability is set up according to the following diagram.
  1088                                  ;
  1089                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1090                                  ;				|  Boot Sector & Loader Stack Area		|
  1091                                  ;				|						|
  1092                                  ;	SS:SP -------->	007f00	+-----------------------------------------------+ SS:0400
  1093                                  ;
  1094                                  ;
  1095                                  ;	CS,DS,ES ----->	009000	+-----------------------------------------------+ CS:0000
  1096                                  ;				|  Unused (DOS Program Segment Prefix)		|
  1097                                  ;	CS:IP -------->	009100	+-----------------------------------------------+ CS:0100
  1098                                  ;				|  Loader Code					|
  1099                                  ;				|						|
  1100                                  ;			009300	+-----------------------------------------------+ CS:0200
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                  ;-----------------------------------------------------------------------------------------------------------------------
  1104                                  ;
  1105                                  ;	OS Loader								@disk: 004200	@mem: 009100
  1106                                  ;
  1107                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1108                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above. The
  1109                                  ;	size of the loader is limited to 65,280 bytes since the bootstrap will copy the loader into memory at 0:9100.
  1110                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1111                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1112                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1113                                  ;	starts the kernel task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1114                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1115                                  ;	registers.
  1116                                  ;
  1117                                  ;-----------------------------------------------------------------------------------------------------------------------
  1118                                  			cpu	8086						;assume minimal CPU
  1119                                  section			loader	vstart=100h					;use .COM compatible addressing
  1120                                  			bits	16						;this is 16-bit code
  1121                                  Loader			push	cs						;use the code segment
  1122                                  			pop	ds						;...as our data segment
  1123                                  			push	cs						;use the code segment
  1124                                  			pop	es						;...as our extra segment
  1125                                  ;
  1126                                  ;	Write a message to the console so we know we have our addressability established.
  1127                                  ;
  1128                                  			mov	si,czStartingMsg				;starting message
  1129                                  			call	PutTTYString					;display loader message
  1130                                  ;
  1131                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1132                                  ;
  1133                                  			call	GetCPUType					;AL = cpu type
  1134                                  			mov	si,czCPUErrorMsg				;loader error message
  1135                                  			cmp	al,3						;80386+?
  1136                                  			jb	LoaderExit					;no, exit with error message
  1137                                  			cpu	386						;allow 80386 instructions
  1138                                  			mov	si,czCPUOKMsg					;cpu ok message
  1139                                  			call	PutTTYString					;display message
  1140                                  ;
  1141                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1142                                  ;
  1143                                  			mov	si,300h						;GDT offset
  1144                                  			mov	ax,cs						;AX:SI = gdt source
  1145                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1146                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1147                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1148                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1149                                  			mov	word [si+30h+2],ax				;lo-order loader code (0-15)
  1150                                  			mov	byte [si+30h+4],cl				;lo-order loader code (16-23)
  1151                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1152                                  			call	PutTTYString					;display message
  1153                                  ;
  1154                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1155                                  ;
  1156                                  			push	EKRNSEG						;use kernel segment ...
  1157                                  			pop	es						;... as target segment
  1158                                  			xor	di,di						;ES:DI = target address
  1159                                  			mov	si,300h						;DS:SI = source address
  1160                                  			mov	cx,5000h					;CX = kernel size
  1161                                  			cld							;forward strings
  1162                                  			rep	movsb						;copy kernel image
  1163                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1164                                  			call	PutTTYString					;display message
  1165                                  ;
  1166                                  ;	Switch to protected mode.
  1167                                  ;
  1168                                  			xor	si,si						;ES:SI = gdt addr
  1169                                  			mov	ss,si						;protected mode ss
  1170                                  			mov	sp,1000h					;SS:SP = protected mode ss:sp
  1171                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1172                                  			mov	bx,2028h					;BH,BL = IRQ int bases
  1173                                  			mov	dx,001Fh					;outer delay loop count
  1174                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1175                                  			loop	$						;wait out pending interrupts
  1176                                  			dec	dx						;restore outer loop count
  1177                                  			jnz	.10						;continue outer loop
  1178                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1179                                  ;
  1180                                  ;	Enable hardware and maskable interrupts
  1181                                  ;
  1182                                  			xor	al,al						;enable all registers code
  1183                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1184                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1185                                  			sti							;enable maskable interrupts
  1186                                  ;
  1187                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1188                                  ;
  1189                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1190                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1191                                  			jmp	0058h:0						;jump to task state segment selector
  1192                                  ;-----------------------------------------------------------------------------------------------------------------------
  1193                                  ;
  1194                                  ;	Routine:	LoaderExit
  1195                                  ;
  1196                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1197                                  ;
  1198                                  ;	In:		DS:SI	string address
  1199                                  ;
  1200                                  ;-----------------------------------------------------------------------------------------------------------------------
  1201                                  LoaderExit		call	PutTTYString					;display error message
  1202                                  ;
  1203                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1204                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1205                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1206                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1207                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1208                                  ;
  1209                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1210                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1211                                  			jnz	.40						;exit if key pressed
  1212                                  			sti							;enable maskable interrupts
  1213                                  			hlt							;wait for interrupt
  1214                                  			jmp	.30						;repeat until keypress
  1215                                  ;
  1216                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1217                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1218                                  ;	HLT until the system resets.
  1219                                  ;
  1220                                  .40			mov	al,EKEYCMDRESET					;8042 pulse output port pin
  1221                                  			out	EKEYPORTSTAT,al					;drive B0 low to restart
  1222                                  .50			sti							;enable maskable interrupts
  1223                                  			hlt							;stop until reset, int, nmi
  1224                                  			jmp	.50						;loop until restart kicks in
  1225                                  ;-----------------------------------------------------------------------------------------------------------------------
  1226                                  ;
  1227                                  ;	Routine:	GetCPUType
  1228                                  ;
  1229                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1230                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1231                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1232                                  ;
  1233                                  ;	Output:		AX	0 = 808x, v20, etc.
  1234                                  ;				1 = 80186
  1235                                  ;				2 = 80286
  1236                                  ;				3 = 80386
  1237                                  ;
  1238                                  ;-----------------------------------------------------------------------------------------------------------------------
  1239                                  GetCPUType		mov	al,1						;AL = 1
  1240                                  			mov	cl,32						;shift count
  1241                                  			shr	al,cl						;try a 32-bit shift
  1242                                  			or	al,al						;did the shift happen?
  1243                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1244                                  			cpu	186
  1245                                  			push	sp						;save stack pointer
  1246                                  			pop	cx						;...into cx
  1247                                  			cmp	cx,sp						;did sp decrement before push?
  1248                                  			jne	.10						;yes, cpu is 80186
  1249                                  			cpu	286
  1250                                  			inc	ax						;AX = 2
  1251                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1252                                  			mov	cl,[cbLoaderGDTHiByte]				;cl = hi-order byte
  1253                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1254                                  			jz	.10						;yes, cpu is 80286
  1255                                  			inc	ax						;AX = 3
  1256                                  .10			ret							;return
  1257                                  ;-----------------------------------------------------------------------------------------------------------------------
  1258                                  ;
  1259                                  ;	Routine:	PutTTYString
  1260                                  ;
  1261                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1262                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1263                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1264                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1265                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1266                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1267                                  ;			registers and flags unless used to indicate return status.
  1268                                  ;
  1269                                  ;	In:		DS:SI	address of string
  1270                                  ;
  1271                                  ;-----------------------------------------------------------------------------------------------------------------------
  1272                                  PutTTYString		cld							;forward strings
  1273                                  			lodsb							;load next byte at DS:SI in AL
  1274                                  			test	al,al						;end of string?
  1275                                  			jz	.10						;... yes, exit our loop
  1276                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1277                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1278                                  			jmp	PutTTYString					;repeat until done
  1279                                  .10			ret							;return
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  ;
  1282                                  ;	Loader Data
  1283                                  ;
  1284                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1285                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1286                                  ;
  1287                                  ;-----------------------------------------------------------------------------------------------------------------------
  1288                                  			align	2
  1289                                  cwLoaderTSS		dw	0068h						;TSS selector
  1290                                  cwLoaderLDT		dw	0060h						;LDT selector
  1291                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1292                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1293                                  czCPUErrorMsg		db	"The operating system requires an i386 "
  1294                                  			db	"or later processor.",13,10,
  1295                                  			db	"Please press any key to restart the "
  1296                                  			db	"computer.",13,10,0
  1297                                  czCPUOKMsg		db	"CPU ok",13,10,0
  1298                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1299                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1300                                  czStartingMsg		db	"Starting ...",13,10,0				;loader message
  1301                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1302                                  			db	055h,0AAh					;end of sector signature
  1303                                  ;-----------------------------------------------------------------------------------------------------------------------
  1304                                  ;
  1305                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1306                                  ;
  1307                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1308                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1309                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1310                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1311                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1312                                  ;
  1313                                  ;-----------------------------------------------------------------------------------------------------------------------
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;	Tables
  1317                                  ;
  1318                                  ;-----------------------------------------------------------------------------------------------------------------------
  1319                                  ;-----------------------------------------------------------------------------------------------------------------------
  1320                                  ;
  1321                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1322                                  ;
  1323                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1324                                  ;	first descriptor must be all nulls.
  1325                                  ;
  1326                                  ;	6   5         4         3         2         1         0
  1327                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1328                                  ;	----------------------------------------------------------------
  1329                                  ;	h......hffffmmmma......ab......................bn..............n
  1330                                  ;	00000000			all areas have base addresses below 2^24
  1331                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1332                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1333                                  ;	            1001		present, ring-0, selector
  1334                                  ;
  1335                                  ;	h...h	hi-order base address (bits 24-31)
  1336                                  ;	ffff	flags
  1337                                  ;	mmmm	hi-order limit (bits 16-19)
  1338                                  ;	a...a	access
  1339                                  ;	b...b	lo-order base address (bits 0-23)
  1340                                  ;	n...n	lo-order limit (bits 0-15)
  1341                                  ;
  1342                                  ;-----------------------------------------------------------------------------------------------------------------------
  1343                                  section			gdt							;global descriptor table
  1344                                  			dq	0000000000000000h				;00 required null selector
  1345                                  			dq	00409300100007FFh				;08 2KB  writable data (GDT)
  1346                                  			dq	00409300180007FFh				;10 2KB  writable data (IDT)
  1347                                  			dq	00CF93000000FFFFh				;18 4GB  writable data (OS data)
  1348                                  			dq	0040930B80000FFFh				;20 4KB  writable data (CGA video)
  1349                                  			dq	0040930000000FFFh				;28 4KB  writable data (Loader stack)
  1350                                  			dq	00009B000000FFFFh				;30 64KB readable 16-bit code (Loader)
  1351                                  			dq	00009BFF0000FFFFh				;38 64KB readable 16-bit code (BIOS)
  1352                                  			dq	004093000400FFFFh				;40 64KB writable data (BIOS data)
  1353                                  			dq	00409B0020001FFFh				;48 8KB  readable code (OS code)
  1354                                  			dq	004082004700007Fh				;50 80B  writable system (Console LDT)
  1355                                  			dq	004089004780007Fh				;58 80B  writable system (Console TSS)
  1356                                  			dq	004082000F00007Fh				;60 80B  writable system (Loader LDT)
  1357                                  			dq	004089000F80007Fh				;68 80B  writable system (Loader TSS)
  1358                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;	Interrupt Descriptor Table						@disk: 004C00	@mem: 001800
  1362                                  ;
  1363                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1364                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1365                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1366                                  ;
  1367                                  ;	6   5         4         3         2         1         0
  1368                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1369                                  ;	----------------------------------------------------------------
  1370                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1371                                  ;
  1372                                  ;	h...h	high-order offset (bits 16-31)
  1373                                  ;	P	present (0=unused interrupt)
  1374                                  ;	zz	descriptor privilege level
  1375                                  ;	S	storage segment (must be zero for IDT)
  1376                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1377                                  ;	S...S	handling code selector in GDT
  1378                                  ;	l...l	lo-order offset (bits 0-15)
  1379                                  ;
  1380                                  ;-----------------------------------------------------------------------------------------------------------------------
  1381                                  section			idt							;interrupt descriptor table
  1382                                  			mint	dividebyzero					;00 divide by zero
  1383                                  			mint	singlestep					;01 single step
  1384                                  			mint	nmi						;02 non-maskable
  1385                                  			mint	break						;03 break
  1386                                  			mint	into						;04 into
  1387                                  			mint	bounds						;05 bounds
  1388                                  			mint	badopcode					;06 bad op code
  1389                                  			mint	nocoproc					;07 no coprocessor
  1390                                  			mint	doublefault					;08 double-fault
  1391                                  			mint	operand						;09 operand
  1392                                  			mint	badtss						;0A bad TSS
  1393                                  			mint	notpresent					;0B not-present
  1394                                  			mint	stacklimit					;0C stack limit
  1395                                  			mint	protection					;0D general protection fault
  1396                                  			mint	int14						;0E (reserved)
  1397                                  			mint	int15						;0F (reserved)
  1398                                  			mint	coproccalc					;10 (reserved)
  1399                                  			mint	int17						;11 (reserved)
  1400                                  			mint	int18						;12 (reserved)
  1401                                  			mint	int19						;13 (reserved)
  1402                                  			mint	int20						;14 (reserved)
  1403                                  			mint	int21						;15 (reserved)
  1404                                  			mint	int22						;16 (reserved)
  1405                                  			mint	int23						;17 (reserved)
  1406                                  			mint	int24						;18 (reserved)
  1407                                  			mint	int25						;19 (reserved)
  1408                                  			mint	int26						;1A (reserved)
  1409                                  			mint	int27						;1B (reserved)
  1410                                  			mint	int28						;1C (reserved)
  1411                                  			mint	int29						;1D (reserved)
  1412                                  			mint	int30						;1E (reserved)
  1413                                  			mint	int31						;1F (reserved)
  1414                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1415                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1416                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1417                                  			mtrap	com2						;23 IRQ3 com2
  1418                                  			mtrap	com1						;24 IRQ4 com1
  1419                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1420                                  			mtrap	diskette					;26 IRQ6 diskette
  1421                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1422                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1423                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1424                                  			mtrap	irq10						;2A IRQA (reserved)
  1425                                  			mtrap	irq11						;2B IRQB (reserved)
  1426                                  			mtrap	ps2mouse					;2C IRQC ps/2 mouse
  1427                                  			mtrap	coprocessor					;2D IRQD coprocessor
  1428                                  			mtrap	fixeddisk					;2E IRQE fixed disk
  1429                                  			mtrap	irq15						;2F IRQF (reserved)
  1430                                  			mtrap	svc						;30 OS services
  1431                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1432                                  ;-----------------------------------------------------------------------------------------------------------------------
  1433                                  ;
  1434                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1435                                  ;
  1436                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1437                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1438                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1439                                  ;	signals the CPU on an interrupt request line. Software interrupts occur when directly called by other code
  1440                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1441                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1442                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1443                                  ;
  1444                                  ;-----------------------------------------------------------------------------------------------------------------------
  1445                                  section			kernel	vstart=0h					;data offsets relative to 0
  1446                                  			cpu	386						;allow 80386 instructions
  1447                                  			bits	32						;this is 32-bit code
  1448                                  ;-----------------------------------------------------------------------------------------------------------------------
  1449                                  ;
  1450                                  ;	CPU Interrupt Handlers
  1451                                  ;
  1452                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts.
  1453                                  ;
  1454                                  ;-----------------------------------------------------------------------------------------------------------------------
  1455                                  			menter	dividebyzero					;divide by zero
  1456                                  			push	0						;
  1457                                  			jmp	intcpu						;
  1458                                  			menter	singlestep					;single step
  1459                                  			push	1						;
  1460                                  			jmp	intcpu						;
  1461                                  			menter	nmi						;non-maskable
  1462                                  			push	2						;
  1463                                  			jmp	intcpu						;
  1464                                  			menter	break						;break
  1465                                  			push	3						;
  1466                                  			jmp	intcpu						;
  1467                                  			menter	into						;into
  1468                                  			push	4						;
  1469                                  			jmp	intcpu						;
  1470                                  			menter	bounds						;bounds
  1471                                  			push	5						;
  1472                                  			jmp	intcpu						;
  1473                                  			menter	badopcode					;bad opcode interrupt
  1474                                  			push	6						;
  1475                                  			jmp	intcpu						;
  1476                                  			menter	nocoproc					;no coprocessor interrupt
  1477                                  			push	7						;
  1478                                  			jmp	intcpu						;
  1479                                  			menter	doublefault					;doublefault interrupt
  1480                                  			push	8						;
  1481                                  			jmp	intcpu						;
  1482                                  			menter	operand						;operand interrupt
  1483                                  			push	9						;
  1484                                  			jmp	intcpu						;
  1485                                  			menter	badtss						;bad tss interrupt
  1486                                  			push	10						;
  1487                                  			jmp	intcpu						;
  1488                                  			menter	notpresent					;not present interrupt
  1489                                  			push	11						;
  1490                                  			jmp	intcpu						;
  1491                                  			menter	stacklimit					;stack limit interrupt
  1492                                  			push	12						;
  1493                                  			jmp	intcpu						;
  1494                                  			menter	protection					;protection fault interrupt
  1495                                  			push	13						;
  1496                                  			jmp	intcpu						;
  1497                                  			menter	int14						;(reserved)
  1498                                  			push	14						;
  1499                                  			jmp	intcpu						;
  1500                                  			menter	int15						;(reserved)
  1501                                  			push	15						;
  1502                                  			jmp	intcpu						;
  1503                                  			menter	coproccalc					;coprocessor calculation
  1504                                  			push	16						;
  1505                                  			jmp	intcpu						;
  1506                                  			menter	int17						;(reserved)
  1507                                  			push	17						;
  1508                                  			jmp	intcpu						;
  1509                                  			menter	int18						;(reserved)
  1510                                  			push	18						;
  1511                                  			jmp	intcpu						;
  1512                                  			menter	int19						;(reserved)
  1513                                  			push	19						;
  1514                                  			jmp	intcpu						;
  1515                                  			menter	int20						;(reserved)
  1516                                  			push	20						;
  1517                                  			jmp	intcpu						;
  1518                                  			menter	int21						;(reserved)
  1519                                  			push	21						;
  1520                                  			jmp	intcpu						;
  1521                                  			menter	int22						;(reserved)
  1522                                  			push	22						;
  1523                                  			jmp	intcpu						;
  1524                                  			menter	int23						;(reserved)
  1525                                  			push	23						;
  1526                                  			jmp	intcpu						;
  1527                                  			menter	int24						;(reserved)
  1528                                  			push	24						;
  1529                                  			jmp	intcpu						;
  1530                                  			menter	int25						;(reserved)
  1531                                  			push	25						;
  1532                                  			jmp	intcpu						;
  1533                                  			menter	int26						;(reserved)
  1534                                  			push	26						;
  1535                                  			jmp	intcpu						;
  1536                                  			menter	int27						;(reserved)
  1537                                  			push	27						;
  1538                                  			jmp	intcpu						;
  1539                                  			menter	int28						;(reserved)
  1540                                  			push	28						;
  1541                                  			jmp	intcpu						;
  1542                                  			menter	int29						;(reserved)
  1543                                  			push	29						;
  1544                                  			jmp	intcpu						;
  1545                                  			menter	int30						;(reserved)
  1546                                  			push	30						;
  1547                                  			jmp	intcpu						;
  1548                                  			menter	int31						;(reserved)
  1549                                  			push	31						;
  1550                                  intcpu			pop	eax						;
  1551                                  			iretd							;return
  1552                                  ;-----------------------------------------------------------------------------------------------------------------------
  1553                                  ;
  1554                                  ;	Hardware Device Interupts
  1555                                  ;
  1556                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1557                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1558                                  ;	(BX=2028h).
  1559                                  ;
  1560                                  ;-----------------------------------------------------------------------------------------------------------------------
  1561                                  ;-----------------------------------------------------------------------------------------------------------------------
  1562                                  ;
  1563                                  ;	IRQ0	Clock Tick Interrupt
  1564                                  ;
  1565                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1566                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1567                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1568                                  ;
  1569                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1570                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1571                                  ;
  1572                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1573                                  ;	zero, the floppy disk motors are turned off.
  1574                                  ;
  1575                                  ;-----------------------------------------------------------------------------------------------------------------------
  1576                                  			menter	clocktick					;clock tick interrupt
  1577                                  			push	eax						;save modified regs
  1578                                  			push	edx						;
  1579                                  			push	ds						;
  1580                                  			push	ESELDAT						;load OS data selector ...
  1581                                  			pop	ds						;... into data segment register
  1582                                  			mov	eax,[wfClockTicks]				;eax = clock ticks
  1583                                  			inc	eax						;increment clock ticks
  1584                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1585                                  			jb	irq0.10						;no, skip ahead
  1586                                  			inc	byte [wbClockDays]				;increment clock days
  1587                                  			xor	eax,eax						;reset clock ticks
  1588                                  irq0.10			mov	dword [wfClockTicks],eax			;save clock ticks
  1589                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1590                                  			je	irq0.20						;yes, skip ahead
  1591                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1592                                  			jnz	irq0.20						;skip ahead if non-zero
  1593                                  			sti							;enable maskable interrupts
  1594                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1595                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1596                                  			in	al,dx						;FDC main status byte
  1597                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1598                                  			jnz	irq0.15						;wait while busy
  1599                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1600                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1601                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1602                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1603                                  			out	dx,al						;turn motor off
  1604                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1605                                  			pop	ds						;restore modified regs
  1606                                  			pop	edx						;
  1607                                  			pop	eax						;
  1608                                  			iretd							;return
  1609                                  ;-----------------------------------------------------------------------------------------------------------------------
  1610                                  ;
  1611                                  ;	IRQ1	Keyboard Interrupt
  1612                                  ;
  1613                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1614                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1615                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1616                                  ;	ALL modified registers upon return.
  1617                                  ;
  1618                                  ;-----------------------------------------------------------------------------------------------------------------------
  1619                                  			menter	keyboard					;keyboard interrrupt
  1620                                  			push	eax						;save non-volatile regs
  1621                                  			push	ebx						;
  1622                                  			push	ecx						;
  1623                                  			push	esi						;
  1624                                  			push	ds						;
  1625                                  			push	ESELDAT						;load OS data selector ...
  1626                                  			pop	ds						;... into data segment register
  1627                                  			xor	al,al						;zero
  1628                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1629                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1630                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1631                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1632                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1633                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1634                                  			mov	al,' '						;space
  1635                                  			mov	[wbConsoleChar],al				;set character to space
  1636                                  			mov	al,EKEYTIMEOUT					;controller timeout flag
  1637                                  			not	al						;controller timeout mask
  1638                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1639                                  			mov	bl,[wbConsoleShift]				;shift flags
  1640                                  			mov	bh,[wbConsoleLock]				;lock flags
  1641                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1642                                  			jz	irq1.140					;yes, skip ahead
  1643                                  			in	al,EKEYPORTDATA					;read scan code 0
  1644                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1645                                  			mov	ah,al						;copy scan code 0
  1646                                  			mov	al,EKEYSHIFTLEFT				;left shift flag
  1647                                  			cmp	ah,EKEYSHIFTLDOWN				;left shift key down code?
  1648                                  			je	irq1.30						;yes, set flag
  1649                                  			cmp	ah,EKEYSHIFTLUP					;left shift key up code?
  1650                                  			je	irq1.40						;yes, reset flag
  1651                                  			mov	al,EKEYSHIFTRIGHT				;right shift flag
  1652                                  			cmp	ah,EKEYSHIFTRDOWN				;right shift key down code?
  1653                                  			je	irq1.30						;yes, set flag
  1654                                  			cmp	ah,EKEYSHIFTRUP					;right shift key up code?
  1655                                  			je	irq1.40						;yes, reset flag
  1656                                  			mov	al,EKEYCTRLLEFT					;left control flag
  1657                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1658                                  			je	irq1.30						;yes, set flag
  1659                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1660                                  			je	irq1.40						;yes, reset flag
  1661                                  			mov	al,EKEYALTLEFT					;left alt flag
  1662                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1663                                  			je	irq1.30						;yes, set flag
  1664                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1665                                  			je	irq1.40						;yes, reset flag
  1666                                  			mov	al,EKEYLOCKCAPS					;caps-lock flag
  1667                                  			cmp	ah,EKEYCAPSDOWN					;caps-lock key down code?
  1668                                  			je	irq1.50						;yes, toggle lamps and flags
  1669                                  			mov	al,EKEYLOCKNUM					;num-lock flag
  1670                                  			cmp	ah,EKEYNUMDOWN					;num-lock key down code?
  1671                                  			je	irq1.50						;yes, toggle lamps and flags
  1672                                  			mov	al,EKEYLOCKSCROLL				;scroll-lock flag
  1673                                  			cmp	ah,EKEYSCROLLDOWN				;scroll-lock key down code?
  1674                                  			je	irq1.50						;yes, toggle lamps and flags
  1675                                  			cmp	ah,EKEYCODEEXT0					;extended scan code 0?
  1676                                  			jne	irq1.70 					;no, skip ahead
  1677                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1678                                  			jz	irq1.140					;yes, skip ahead
  1679                                  			in	al,EKEYPORTDATA					;read scan code 1
  1680                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1681                                  			mov	ah,al						;copy scan code 1
  1682                                  			mov	al,EKEYCTRLRIGHT				;right control flag
  1683                                  			cmp	ah,EKEYCTRLDOWN					;control key down code?
  1684                                  			je	irq1.30						;yes, set flag
  1685                                  			cmp	ah,EKEYCTRLUP					;control key up code?
  1686                                  			je	irq1.40						;yes, reset flag
  1687                                  			mov	al,EKEYALTRIGHT					;right alt flag
  1688                                  			cmp	ah,EKEYALTDOWN					;alt key down code?
  1689                                  			je	irq1.30						;yes, set flag
  1690                                  			cmp	ah,EKEYALTUP					;alt key up code?
  1691                                  			je	irq1.40						;yes, reset flag
  1692                                  			cmp	ah,EKEYSLASH					;slash down code?
  1693                                  			je	irq1.80						;yes, skip ahead
  1694                                  			cmp	ah,EKEYSLASHUP					;slash up code?
  1695                                  			je	irq1.80						;yes, skip ahead
  1696                                  			cmp	ah,EKEYPRTSCRDOWN				;print screen down code?
  1697                                  			je	irq1.10						;yes, continue
  1698                                  			cmp	ah,EKEYPRTSCRUP					;print screen up code?
  1699                                  			jne	irq1.20						;no, skip ahead
  1700                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1701                                  			jz	irq1.140					;yes, skip ahead
  1702                                  			in	al,EKEYPORTDATA					;read scan code 2
  1703                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1704                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1705                                  			jz	irq1.140					;yes, skip ahead
  1706                                  			in	al,EKEYPORTDATA					;read scan code 3
  1707                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1708                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1709                                  irq1.30			or	bl,al						;set shift flag
  1710                                  			jmp	irq1.60						;skip ahead
  1711                                  irq1.40			not	al						;convert flag to mask
  1712                                  			and	bl,al						;reset shift flag
  1713                                  			jmp	irq1.60						;skip ahead
  1714                                  irq1.50			xor	bh,al						;toggle lock flag
  1715                                  			call	SetKeyboardLamps				;update keyboard lamps
  1716                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1717                                  			mov	[wbConsoleLock],bh				;save lock flags
  1718                                  			call	PutConsoleOIAShift				;update OIA indicators
  1719                                  			jmp	irq1.150					;finish keyboard handling
  1720                                  irq1.70			cmp	ah,EKEYCODEEXT1					;extended scan code 1?
  1721                                  			jne	irq1.80						;no continue
  1722                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1723                                  			jz	irq1.140					;yes, skip ahead
  1724                                  			in	al,EKEYPORTDATA					;read scan code 1
  1725                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1726                                  			mov	ah,al						;copy scan code 1
  1727                                  			cmp	ah,EKEYPAUSEDOWN				;pause key down code?
  1728                                  			jne	irq1.150					;no, finish keyboard handling
  1729                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1730                                  			jz	irq1.140					;yes, skip ahead
  1731                                  			in	al,EKEYPORTDATA					;read scan code 2
  1732                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1733                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1734                                  			jz	irq1.140					;yes, skip ahead
  1735                                  			in	al,EKEYPORTDATA					;read scan code 3
  1736                                  			mov	[wbConsoleScan3],al				;save scan code 3
  1737                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1738                                  			jz	irq1.140					;yes, skip ahead
  1739                                  			in	al,EKEYPORTDATA					;read scan code 4
  1740                                  			mov	[wbConsoleScan4],al				;save scan code 4
  1741                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1742                                  			jz	irq1.140					;yes, skip ahead
  1743                                  			in	al,EKEYPORTDATA					;read scan code 5
  1744                                  			mov	[wbConsoleScan5],al				;save scan code 5
  1745                                  			jmp	irq1.150					;continue
  1746                                  irq1.80			xor	al,al						;assume no ASCII translation
  1747                                  			test	ah,EKEYUP					;release code?
  1748                                  			jnz	irq1.110					;yes, skip ahead
  1749                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  1750                                  			test	bl,EKEYSHIFT					;either shift key down?
  1751                                  			jz	irq1.90						;no, skip ahead
  1752                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  1753                                  irq1.90			movzx	ecx,ah						;scan code offset
  1754                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  1755                                  			test	bh,EKEYLOCKCAPS					;caps-lock on?
  1756                                  			jz	irq1.100					;no skip ahead
  1757                                  			mov	cl,al						;copy ASCII code
  1758                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  1759                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  1760                                  			jb	irq1.100					;yes, skip ahead
  1761                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  1762                                  			ja	irq1.100					;yes, skip ahead
  1763                                  			xor	al,EASCIICASE					;switch case
  1764                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  1765                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  1766                                  			test	ah,EKEYUP					;release scan-code?
  1767                                  			jz	irq1.120					;no, skip ahead
  1768                                  			mov	edx,EMSGKEYUP					;key-up event
  1769                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  1770                                  			or	edx,eax						;msg id and codes
  1771                                  			xor	ecx,ecx						;null param
  1772                                  			push	eax						;save codes
  1773                                  			call	PutMessage					;put message to console
  1774                                  			pop	eax						;restore codes
  1775                                  			test	al,al						;ASCII translation?
  1776                                  			jz	irq1.130					;no, skip ahead
  1777                                  			mov	edx,EMSGKEYCHAR					;key-character event
  1778                                  			and	eax,0FFFFh					;clear high-order word
  1779                                  			or	edx,eax						;msg id and codes
  1780                                  			xor	ecx,ecx						;null param
  1781                                  			call	PutMessage					;put message to console
  1782                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  1783                                  irq1.140		mov	al,EKEYTIMEOUT					;controller timeout flag
  1784                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  1785                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  1786                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1787                                  			pop	ds						;restore non-volatile regs
  1788                                  			pop	esi						;
  1789                                  			pop	ecx						;
  1790                                  			pop	ebx						;
  1791                                  			pop	eax						;
  1792                                  			iretd							;return
  1793                                  ;-----------------------------------------------------------------------------------------------------------------------
  1794                                  ;	Scan-Code to ASCII Translation Tables
  1795                                  ;-----------------------------------------------------------------------------------------------------------------------
  1796                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  1797                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  1798                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  1799                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  1800                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  1801                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  1802                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  1803                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  1804                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  1805                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  1806                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  1807                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  1808                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  1809                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  1810                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  1811                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  1812                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  1813                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  1814                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  1815                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  1816                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  1817                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  1818                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  1819                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  1820                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  1821                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  1822                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  1823                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  1824                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  1825                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  1826                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  1827                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  1831                                  ;
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  			menter	iochannel					;secondary 8259A cascade
  1834                                  			push	eax						;
  1835                                  			jmp	hwint						;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                  ;
  1838                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  1839                                  ;
  1840                                  ;-----------------------------------------------------------------------------------------------------------------------
  1841                                  			menter	com2						;serial port 2 interrupt
  1842                                  			push	eax						;
  1843                                  			jmp	hwint						;
  1844                                  ;-----------------------------------------------------------------------------------------------------------------------
  1845                                  ;
  1846                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  1847                                  ;
  1848                                  ;-----------------------------------------------------------------------------------------------------------------------
  1849                                  			menter	com1						;serial port 1 interrupt
  1850                                  			push	eax						;
  1851                                  			jmp	hwint						;
  1852                                  ;-----------------------------------------------------------------------------------------------------------------------
  1853                                  ;
  1854                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  1855                                  ;
  1856                                  ;-----------------------------------------------------------------------------------------------------------------------
  1857                                  			menter	lpt2						;parallel port 2 interrupt
  1858                                  			push	eax						;
  1859                                  			jmp	hwint						;
  1860                                  ;-----------------------------------------------------------------------------------------------------------------------
  1861                                  ;
  1862                                  ;	IRQ6	Diskette Hardware Interrupt
  1863                                  ;
  1864                                  ;-----------------------------------------------------------------------------------------------------------------------
  1865                                  			menter	diskette					;floppy disk interrupt
  1866                                  			push	eax						;save non-volatile regs
  1867                                  			push	ds						;
  1868                                  			push	ESELDAT						;load OS data selector ...
  1869                                  			pop	ds						;... into DS register
  1870                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  1871                                  			or	al,10000000b					;set IRQ flag
  1872                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  1873                                  			pop	ds						;restore non-volatile regs
  1874                                  			jmp	hwint						;end primary PIC interrupt
  1875                                  ;-----------------------------------------------------------------------------------------------------------------------
  1876                                  ;
  1877                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  1878                                  ;
  1879                                  ;-----------------------------------------------------------------------------------------------------------------------
  1880                                  			menter	lpt1						;parallel port 1 interrupt
  1881                                  			push	eax						;
  1882                                  			jmp	hwint						;
  1883                                  ;-----------------------------------------------------------------------------------------------------------------------
  1884                                  ;
  1885                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  1886                                  ;
  1887                                  ;-----------------------------------------------------------------------------------------------------------------------
  1888                                  			menter	rtclock						;real-time clock interrupt
  1889                                  			push	eax						;
  1890                                  			jmp	hwwint						;
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  1894                                  ;
  1895                                  ;-----------------------------------------------------------------------------------------------------------------------
  1896                                  			menter	retrace						;CGA vertical retrace interrupt
  1897                                  			push	eax						;
  1898                                  			jmp	hwwint						;
  1899                                  ;-----------------------------------------------------------------------------------------------------------------------
  1900                                  ;
  1901                                  ;	IRQ10	Reserved Hardware Interrupt
  1902                                  ;
  1903                                  ;-----------------------------------------------------------------------------------------------------------------------
  1904                                  			menter	irq10						;reserved
  1905                                  			push	eax						;
  1906                                  			jmp	hwwint						;
  1907                                  ;-----------------------------------------------------------------------------------------------------------------------
  1908                                  ;
  1909                                  ;	IRQ11	Reserved Hardware Interrupt
  1910                                  ;
  1911                                  ;-----------------------------------------------------------------------------------------------------------------------
  1912                                  			menter	irq11						;reserved
  1913                                  			push	eax						;
  1914                                  			jmp	hwwint						;
  1915                                  ;-----------------------------------------------------------------------------------------------------------------------
  1916                                  ;
  1917                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  1918                                  ;
  1919                                  ;-----------------------------------------------------------------------------------------------------------------------
  1920                                  			menter	ps2mouse					;PS/2 mouse interrupt
  1921                                  			push	eax						;
  1922                                  			jmp	hwwint						;
  1923                                  ;-----------------------------------------------------------------------------------------------------------------------
  1924                                  ;
  1925                                  ;	IRQ13	Coprocessor Hardware Interrupt
  1926                                  ;
  1927                                  ;-----------------------------------------------------------------------------------------------------------------------
  1928                                  			menter	coprocessor					;coprocessor interrupt
  1929                                  			push	eax						;
  1930                                  			jmp	hwwint						;
  1931                                  ;-----------------------------------------------------------------------------------------------------------------------
  1932                                  ;
  1933                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  1934                                  ;
  1935                                  ;-----------------------------------------------------------------------------------------------------------------------
  1936                                  			menter	fixeddisk					;fixed disk interrupt
  1937                                  			push	eax						;
  1938                                  			jmp	hwwint						;
  1939                                  ;-----------------------------------------------------------------------------------------------------------------------
  1940                                  ;
  1941                                  ;	IRQ15	Reserved Hardware Interrupt
  1942                                  ;
  1943                                  ;-----------------------------------------------------------------------------------------------------------------------
  1944                                  			menter	irq15						;reserved
  1945                                  			push	eax						;save modified regs
  1946                                  ;-----------------------------------------------------------------------------------------------------------------------
  1947                                  ;
  1948                                  ;	Exit from hardware interrupt
  1949                                  ;
  1950                                  ;-----------------------------------------------------------------------------------------------------------------------
  1951                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  1952                                  			jmp	hwint90						;skip ahead
  1953                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  1954                                  hwint90			pop	eax						;restore modified regs
  1955                                  			iretd							;return from interrupt
  1956                                  ;-----------------------------------------------------------------------------------------------------------------------
  1957                                  ;
  1958                                  ;	INT 30h Operating System Software Service Interrupt
  1959                                  ;
  1960                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  1961                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  1962                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  1963                                  ;	the entry address of the specific function from a table.
  1964                                  ;
  1965                                  ;-----------------------------------------------------------------------------------------------------------------------
  1966                                  			menter	svc
  1967                                  			cmp	al,maxtsvc					;is our function out of range?
  1968                                  			jae	svc90						;yes, skip ahead
  1969                                  			movzx	eax,al						;function
  1970                                  			shl	eax,2						;offset into table
  1971                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  1972                                  svc90			iretd							;return from interrupt
  1973                                  ;-----------------------------------------------------------------------------------------------------------------------
  1974                                  ;
  1975                                  ;	Service Request Table
  1976                                  ;
  1977                                  ;
  1978                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  1979                                  ;
  1980                                  ;-----------------------------------------------------------------------------------------------------------------------
  1981                                  tsvc			tsvce	PutConsoleString				;tty output asciiz string
  1982                                  			tsvce	GetConsoleString				;get string input
  1983                                  			tsvce	ClearConsoleScreen				;clear console screen
  1984                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  1985                                  			tsvce	UpperCaseString					;upper-case string
  1986                                  			tsvce	CompareMemory					;compare memory
  1987                                  			tsvce	ResetSystem					;reset system using 8042 chip
  1988                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  1989                                  ;-----------------------------------------------------------------------------------------------------------------------
  1990                                  ;
  1991                                  ;	Service Request Macros
  1992                                  ;
  1993                                  ;	These macros provide positional parameterization of service request calls.
  1994                                  ;
  1995                                  ;-----------------------------------------------------------------------------------------------------------------------
  1996                                  %macro			putConsoleString 1
  1997                                  			mov	edx,%1						;EDX = string address
  1998                                  			mov	al,ePutConsoleString				;AL = put string fn.
  1999                                  			int	_svc						;invoke OS service
  2000                                  %endmacro
  2001                                  %macro			getConsoleString 4
  2002                                  			mov	edx,%1						;EDX = buffer address
  2003                                  			mov	ecx,%2						;ECX = max characters
  2004                                  			mov	bh,%3						;BH = echo indicator
  2005                                  			mov	bl,%4						;BL = terminator
  2006                                  			mov	al,eGetConsoleString				;AL = get string fn.
  2007                                  			int	_svc						;invoke OS service
  2008                                  %endmacro
  2009                                  %macro			clearConsoleScreen 0
  2010                                  			mov	al,eClearConsoleScreen				;AL = clear console fn.
  2011                                  			int	_svc						;invoke OS service
  2012                                  %endmacro
  2013                                  %macro			placeCursor 0
  2014                                  			mov	al,ePlaceCursor					;AL = set cursor fn.
  2015                                  			int	_svc						;invoke OS service
  2016                                  %endmacro
  2017                                  %macro			upperCaseString 0
  2018                                  			mov	al,eUpperCaseString				;AL = upper case fn.
  2019                                  			int	_svc						;invoke OS service
  2020                                  %endmacro
  2021                                  %macro			compareMemory 0
  2022                                  			mov	al,eCompareMemory				;AL = compare memory fn.
  2023                                  			int	_svc						;invoke OS service
  2024                                  %endmacro
  2025                                  %macro			resetSystem 0
  2026                                  			mov	al,eResetSystem					;AL = system reset fn.
  2027                                  			int	_svc						;invoke OS service
  2028                                  %endmacro
  2029                                  ;-----------------------------------------------------------------------------------------------------------------------
  2030                                  ;
  2031                                  ;	Kernel Function Library
  2032                                  ;
  2033                                  ;-----------------------------------------------------------------------------------------------------------------------
  2034                                  ;-----------------------------------------------------------------------------------------------------------------------
  2035                                  ;
  2036                                  ;	String Helper Routines
  2037                                  ;
  2038                                  ;	UpperCaseString
  2039                                  ;	CompareMemory
  2040                                  ;
  2041                                  ;-----------------------------------------------------------------------------------------------------------------------
  2042                                  ;-----------------------------------------------------------------------------------------------------------------------
  2043                                  ;
  2044                                  ;	Routine:	UpperCaseString
  2045                                  ;
  2046                                  ;	Description:	This routine places all characters in the given string to upper case.
  2047                                  ;
  2048                                  ;	In:		DS:EDX	string address
  2049                                  ;
  2050                                  ;	Out:		EDX	string address
  2051                                  ;
  2052                                  ;-----------------------------------------------------------------------------------------------------------------------
  2053                                  UpperCaseString		push	esi						;save non-volatile regs
  2054                                  			mov	esi,edx						;string address
  2055                                  			cld							;forward strings
  2056                                  .10			lodsb							;string character
  2057                                  			test	al,al						;null?
  2058                                  			jz	.20						;yes, skip ahead
  2059                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2060                                  			jb	.10						;no, continue
  2061                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2062                                  			ja	.10						;no, continue
  2063                                  			and	al,EASCIICASEMASK				;mask for upper case
  2064                                  			mov	[esi-1],al					;upper character
  2065                                  			jmp	.10						;continue
  2066                                  .20			pop	esi						;restore non-volatile regs
  2067                                  			ret							;return
  2068                                  ;-----------------------------------------------------------------------------------------------------------------------
  2069                                  ;
  2070                                  ;	Routine:	CompareMemory
  2071                                  ;
  2072                                  ;	Description:	This routine compares two byte arrays.
  2073                                  ;
  2074                                  ;	In:		DS:EDX	first source address
  2075                                  ;			DS:EBX	second source address
  2076                                  ;			ECX	comparison length
  2077                                  ;
  2078                                  ;	Out:		EDX	first source address
  2079                                  ;			EBX	second source address
  2080                                  ;			ECX	0	array 1 = array 2
  2081                                  ;				<0	array 1 < array 2
  2082                                  ;				>0	array 1 > array 2
  2083                                  ;
  2084                                  ;-----------------------------------------------------------------------------------------------------------------------
  2085                                  CompareMemory		push	esi						;save non-volatile regs
  2086                                  			push	edi						;
  2087                                  			push	es						;
  2088                                  			push	ds						;copy DS
  2089                                  			pop	es						;... to ES
  2090                                  			mov	esi,edx						;first source address
  2091                                  			mov	edi,ebx						;second source address
  2092                                  			cld							;forward strings
  2093                                  			rep	cmpsb						;compare bytes
  2094                                  			mov	al,0						;default result
  2095                                  			jz	.10						;branch if arrays equal
  2096                                  			mov	al,1						;positive result
  2097                                  			jnc	.10						;branch if target > source
  2098                                  			mov	al,-1						;negative result
  2099                                  .10			movsx	ecx,al						;extend sign
  2100                                  			pop	es						;restore regs
  2101                                  			pop	edi						;
  2102                                  			pop	esi						;
  2103                                  			ret							;return
  2104                                  ;-----------------------------------------------------------------------------------------------------------------------
  2105                                  ;
  2106                                  ;	Console Helper Routines
  2107                                  ;
  2108                                  ;	PutConsoleString
  2109                                  ;	GetConsoleString
  2110                                  ;	GetConsoleChar
  2111                                  ;	Yield
  2112                                  ;	PreviousConsoleColumn
  2113                                  ;	NextConsoleColumn
  2114                                  ;	FirstConsoleColumn
  2115                                  ;	NextConsoleRow
  2116                                  ;	PutConsoleChar
  2117                                  ;	PutConsoleOIAShift
  2118                                  ;	PutConsoleOIAChar
  2119                                  ;	PutConsoleHexByte
  2120                                  ;
  2121                                  ;-----------------------------------------------------------------------------------------------------------------------
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                  ;
  2124                                  ;	Routine:	PutConsoleString
  2125                                  ;
  2126                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2127                                  ;			console position as needed.
  2128                                  ;
  2129                                  ;	In:		EDX	source address
  2130                                  ;			DS	OS data selector
  2131                                  ;
  2132                                  ;-----------------------------------------------------------------------------------------------------------------------
  2133                                  PutConsoleString	push	esi						;save non-volatile regs
  2134                                  			mov	esi,edx						;source address
  2135                                  			cld							;forward strings
  2136                                  .10			lodsb							;ASCII character
  2137                                  			or	al,al						;end of string?
  2138                                  			jz	.40						;yes, skip ahead
  2139                                  			cmp	al,EASCIIRETURN					;carriage return?
  2140                                  			jne	.20						;no, skip ahead
  2141                                  			call	FirstConsoleColumn				;move to start of row
  2142                                  			jmp	.10						;next character
  2143                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2144                                  			jne	.30						;no, skip ahead
  2145                                  			call	NextConsoleRow					;move to next row
  2146                                  			jmp	.10						;next character
  2147                                  .30			call	PutConsoleChar					;output character to console
  2148                                  			call	NextConsoleColumn				;advance to next column
  2149                                  			jmp	.10						;next character
  2150                                  .40			pop	esi						;restore non-volatile regs
  2151                                  			ret							;return
  2152                                  ;-----------------------------------------------------------------------------------------------------------------------
  2153                                  ;
  2154                                  ;	Routine:	GetConsoleString
  2155                                  ;
  2156                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2157                                  ;
  2158                                  ;	Input:		DS:EDX	target buffer address
  2159                                  ;			ECX	maximum number of characters to accept
  2160                                  ;			BH	echo to terminal
  2161                                  ;			BL	terminating character
  2162                                  ;
  2163                                  ;-----------------------------------------------------------------------------------------------------------------------
  2164                                  GetConsoleString	push	ecx						;save non-volatile regs
  2165                                  			push	esi						;
  2166                                  			push	edi						;
  2167                                  			push	es						;
  2168                                  			push	ds						;load data segment selector ...
  2169                                  			pop	es						;... into extra segment register
  2170                                  			mov	edi,edx						;edi = target buffer
  2171                                  			push	ecx						;save maximum characters
  2172                                  			xor	al,al						;zero register
  2173                                  			cld							;forward strings
  2174                                  			rep	stosb						;zero fill buffer
  2175                                  			pop	ecx						;maximum characters
  2176                                  			mov	edi,edx						;edi = target buffer
  2177                                  			mov	esi,edx						;esi = target buffer
  2178                                  .10			jecxz	.50						;exit if max-length is zero
  2179                                  .20			call	GetConsoleChar					;al = next input char
  2180                                  			cmp	al,bl						;is this the terminator?
  2181                                  			je	.50						;yes, exit
  2182                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2183                                  			jne	.30						;no, skip ahead
  2184                                  			cmp	esi,edi						;at start of buffer?
  2185                                  			je	.20						;yes, get next character
  2186                                  			dec	edi						;backup target pointer
  2187                                  			mov	byte [edi],0					;zero previous character
  2188                                  			inc	ecx						;increment remaining chars
  2189                                  			test	bh,1						;echo to console?
  2190                                  			jz	.20						;no, get next character
  2191                                  			call	PreviousConsoleColumn				;backup console position
  2192                                  			mov	al,EASCIISPACE					;ASCII space
  2193                                  			call	PutConsoleChar					;write space to console
  2194                                  			call	PlaceCursor					;position the cursor
  2195                                  			jmp	.20						;get next character
  2196                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2197                                  			jb	.20						;no, get another character
  2198                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2199                                  			ja	.20						;no, get another character
  2200                                  			stosb							;store character in buffer
  2201                                  			test	bh,1						;echo to console?
  2202                                  			jz	.40						;no, skip ahead
  2203                                  			call	PutConsoleChar					;write character to console
  2204                                  			call	NextConsoleColumn				;advance console position
  2205                                  			call	PlaceCursor					;position the cursor
  2206                                  .40			dec	ecx						;decrement remaining chars
  2207                                  			jmp	.10						;next
  2208                                  .50			xor	al,al						;null
  2209                                  			stosb							;terminate buffer
  2210                                  			pop	es						;restore non-volatile regs
  2211                                  			pop	edi						;
  2212                                  			pop	esi						;
  2213                                  			pop	ecx						;
  2214                                  			ret							;return
  2215                                  ;-----------------------------------------------------------------------------------------------------------------------
  2216                                  ;
  2217                                  ;	Routine:	GetConsoleChar
  2218                                  ;
  2219                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2220                                  ;
  2221                                  ;	Output:		AL	ASCII character code
  2222                                  ;			AH	keyboard scan code
  2223                                  ;
  2224                                  ;-----------------------------------------------------------------------------------------------------------------------
  2225                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2226                                  GetConsoleChar		call	GetMessage					;get the next message
  2227                                  			or	eax,eax						;do we have a message?
  2228                                  			jz	GetConsoleChar.10				;no, skip ahead
  2229                                  			push	eax						;save key codes
  2230                                  			and	eax,0FFFF0000h					;mask for message type
  2231                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2232                                  			pop	eax						;restore key codes
  2233                                  			jne	GetConsoleChar					;no, try again
  2234                                  			and	eax,0000ffffh					;mask for key codes
  2235                                  			ret							;return
  2236                                  ;-----------------------------------------------------------------------------------------------------------------------
  2237                                  ;
  2238                                  ;	Routine:	Yield
  2239                                  ;
  2240                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2241                                  ;
  2242                                  ;-----------------------------------------------------------------------------------------------------------------------
  2243                                  Yield			sti							;enable maskagle interrupts
  2244                                  			hlt							;halt until external interrupt
  2245                                  			ret							;return
  2246                                  ;-----------------------------------------------------------------------------------------------------------------------
  2247                                  ;
  2248                                  ;	Routine:	PreviousConsoleColumn
  2249                                  ;
  2250                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2251                                  ;			the column is set to the last position in the row and the row is decremented.
  2252                                  ;
  2253                                  ;	Input:		DS	OS data selector
  2254                                  ;
  2255                                  ;-----------------------------------------------------------------------------------------------------------------------
  2256                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2257                                  			or	al,al						;start of row?
  2258                                  			jnz	.10						;no, skip ahead
  2259                                  			mov	ah,[wbConsoleRow]				;current row
  2260                                  			or	ah,ah						;top of screen?
  2261                                  			jz	.20						;yes, exit with no change
  2262                                  			dec	ah						;decrement row
  2263                                  			mov	[wbConsoleRow],ah				;save row
  2264                                  			mov	al,ECONCOLS					;set maximum column
  2265                                  .10			dec	al						;decrement column
  2266                                  			mov	[wbConsoleColumn],al				;save column
  2267                                  .20			ret							;return
  2268                                  ;-----------------------------------------------------------------------------------------------------------------------
  2269                                  ;
  2270                                  ;	Routine:	NextConsoleColumn
  2271                                  ;
  2272                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2273                                  ;			incremented if the end of the current row is reached.
  2274                                  ;
  2275                                  ;	In:		DS	OS data selector
  2276                                  ;
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2279                                  			inc	al						;increment column
  2280                                  			mov	[wbConsoleColumn],al				;save column
  2281                                  			cmp	al,ECONCOLS					;end of row?
  2282                                  			jb	.10						;no, skip ahead
  2283                                  			call	FirstConsoleColumn				;reset column to start of row
  2284                                  			call	NextConsoleRow					;line feed to next row
  2285                                  .10			ret							;return
  2286                                  ;-----------------------------------------------------------------------------------------------------------------------
  2287                                  ;
  2288                                  ;	Routine:	FirstConsoleColumn
  2289                                  ;
  2290                                  ;	Description:	This routine resets the console column to start of the row.
  2291                                  ;
  2292                                  ;	In:		DS	OS data selector
  2293                                  ;
  2294                                  ;-----------------------------------------------------------------------------------------------------------------------
  2295                                  FirstConsoleColumn	xor	al,al						;zero column
  2296                                  			mov	[wbConsoleColumn],al				;save column
  2297                                  			ret							;return
  2298                                  ;-----------------------------------------------------------------------------------------------------------------------
  2299                                  ;
  2300                                  ;	Routine:	NextConsoleRow
  2301                                  ;
  2302                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2303                                  ;
  2304                                  ;	In:		DS	OS data selector
  2305                                  ;
  2306                                  ;-----------------------------------------------------------------------------------------------------------------------
  2307                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2308                                  			inc	al						;increment row
  2309                                  			mov	[wbConsoleRow],al				;save row
  2310                                  			cmp	al,ECONROWS					;end of screen?
  2311                                  			jb	.10						;no, skip ahead
  2312                                  			call	ScrollConsoleRow				;scroll up one row
  2313                                  			mov	al,[wbConsoleRow]				;row
  2314                                  			dec	al						;decrement row
  2315                                  			mov	[wbConsoleRow],al				;save row
  2316                                  .10			ret							;return
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  ;
  2319                                  ;	Routine:	PutConsoleChar
  2320                                  ;
  2321                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2322                                  ;
  2323                                  ;	In:		AL	ASCII character
  2324                                  ;			DS	OS data selector
  2325                                  ;
  2326                                  ;-----------------------------------------------------------------------------------------------------------------------
  2327                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2328                                  			push	es						;
  2329                                  			push	ESELCGA						;load CGA selector ...
  2330                                  			pop	es						;... into extra segment reg
  2331                                  			mov	cl,[wbConsoleColumn]				;column
  2332                                  			mov	ch,[wbConsoleRow]				;row
  2333                                  			call	SetConsoleChar					;put character at row, column
  2334                                  			pop	es						;restore non-volatile regs
  2335                                  			pop	ecx						;
  2336                                  			ret							;return
  2337                                  ;-----------------------------------------------------------------------------------------------------------------------
  2338                                  ;
  2339                                  ;	Routine:	PutConsoleOIAShift
  2340                                  ;
  2341                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2342                                  ;
  2343                                  ;	In:		BL	shift flags
  2344                                  ;			BH	lock flags
  2345                                  ;			DS	OS data selector
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2349                                  			push	es						;
  2350                                  			push	ESELCGA						;load CGA selector ...
  2351                                  			pop	es						;... into ES register
  2352                                  			mov	ch,ECONOIAROW					;OIA row
  2353                                  			mov	al,EASCIISPACE					;space is default character
  2354                                  			test	bl,EKEYSHIFTLEFT				;left-shift indicated?
  2355                                  			jz	.10						;no, skip ahead
  2356                                  			mov	al,'S'						;yes, indicate with 'S'
  2357                                  .10			mov	cl,14						;indicator column
  2358                                  			call	SetConsoleChar					;display ASCII character
  2359                                  			mov	al,EASCIISPACE					;ASCII space
  2360                                  			test	bl,EKEYSHIFTRIGHT				;right-shift indicated?
  2361                                  			jz	.20						;no, skip ahead
  2362                                  			mov	al,'S'						;yes, indicate with 'S'
  2363                                  .20			mov	cl,64						;indicator column
  2364                                  			call	SetConsoleChar					;display ASCII character
  2365                                  			mov	al,EASCIISPACE					;ASCII space
  2366                                  			test	bl,EKEYCTRLLEFT					;left-ctrl indicated?
  2367                                  			jz	.30						;no, skip ahead
  2368                                  			mov	al,'C'						;yes, indicate with 'C'
  2369                                  .30			mov	cl,15						;indicator column
  2370                                  			call	SetConsoleChar					;display ASCII character
  2371                                  			mov	al,EASCIISPACE					;ASCII space
  2372                                  			test	bl,EKEYCTRLRIGHT				;right-ctrl indicated?
  2373                                  			jz	.40						;no, skip ahead
  2374                                  			mov	al,'C'						;yes, indicate with 'C'
  2375                                  .40			mov	cl,63						;indicator column
  2376                                  			call	SetConsoleChar					;display ASCII character
  2377                                  			mov	al,EASCIISPACE					;ASCII space
  2378                                  			test	bl,EKEYALTLEFT					;left-alt indicated?
  2379                                  			jz	.50						;no, skip ahead
  2380                                  			mov	al,'A'						;yes, indicate with 'A'
  2381                                  .50			mov	cl,16						;indicator column
  2382                                  			call	SetConsoleChar					;display ASCII character
  2383                                  			mov	al,EASCIISPACE					;ASCII space
  2384                                  			test	bl,EKEYALTRIGHT					;right-alt indicated?
  2385                                  			jz	.60						;no, skip ahead
  2386                                  			mov	al,'A'						;yes, indicate with 'A'
  2387                                  .60			mov	cl,62						;indicator column
  2388                                  			call	SetConsoleChar					;display ASCII character
  2389                                  			mov	al,EASCIISPACE					;ASCII space
  2390                                  			test	bh,EKEYLOCKCAPS					;caps-lock indicated?
  2391                                  			jz	.70						;no, skip ahead
  2392                                  			mov	al,'C'						;yes, indicate with 'C'
  2393                                  .70			mov	cl,78						;indicator column
  2394                                  			call	SetConsoleChar					;display ASCII character
  2395                                  			mov	al,EASCIISPACE					;ASCII space
  2396                                  			test	bh,EKEYLOCKNUM					;num-lock indicated?
  2397                                  			jz	.80						;no, skip ahead
  2398                                  			mov	al,'N'						;yes, indicate with 'N'
  2399                                  .80			mov	cl,77						;indicator column
  2400                                  			call	SetConsoleChar					;display ASCII character
  2401                                  			mov	al,EASCIISPACE					;ASCII space
  2402                                  			test	bh,EKEYLOCKSCROLL				;scroll-lock indicated?
  2403                                  			jz	.90						;no, skip ahead
  2404                                  			mov	al,'S'						;yes, indicate with 'S'
  2405                                  .90			mov	cl,76						;indicator column
  2406                                  			call	SetConsoleChar					;display ASCII character
  2407                                  			pop	es						;restore non-volatile regs
  2408                                  			pop	ecx						;
  2409                                  			ret							;return
  2410                                  ;-----------------------------------------------------------------------------------------------------------------------
  2411                                  ;
  2412                                  ;	Routine:	PutConsoleOIAChar
  2413                                  ;
  2414                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2415                                  ;
  2416                                  ;	In:		DS	OS data selector
  2417                                  ;
  2418                                  ;-----------------------------------------------------------------------------------------------------------------------
  2419                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2420                                  			push	ecx						;
  2421                                  			push	esi						;
  2422                                  			push	ds						;
  2423                                  			push	es						;
  2424                                  			push	ESELDAT						;load OS data selector ...
  2425                                  			pop	ds						;... into data segment register
  2426                                  			push	ESELCGA						;load CGA selector ...
  2427                                  			pop	es						;... into extra segment register
  2428                                  			mov	esi,wbConsoleScan0				;scan codes address
  2429                                  			mov	bh,ECONOIAROW					;OIA row
  2430                                  			mov	bl,0						;starting column
  2431                                  			mov	ecx,6						;maximum scan codes
  2432                                  .10			push	ecx						;save remaining count
  2433                                  			mov	ecx,ebx						;row, column
  2434                                  			lodsb							;read scan code
  2435                                  			or	al,al						;scan code present?
  2436                                  			jz	.20						;no, skip ahead
  2437                                  			call	PutConsoleHexByte				;display scan code
  2438                                  			jmp	.30						;continue
  2439                                  .20			mov	al,' '						;ASCII space
  2440                                  			call	SetConsoleChar					;display space
  2441                                  			inc	cl
  2442                                  			mov	al,' '						;ASCII space
  2443                                  			call	SetConsoleChar					;display space
  2444                                  .30			add	bl,2						;next column (+2)
  2445                                  			pop	ecx						;restore remaining
  2446                                  			loop	.10						;next code
  2447                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2448                                  			cmp	al,32						;printable? (lower-bounds)
  2449                                  			jb	.40						;no, skip ahead
  2450                                  			cmp	al,126						;printable? (upper-bounds)
  2451                                  			ja	.40						;no, skip ahead
  2452                                  			mov	ch,bh						;OIA row
  2453                                  			mov	cl,40						;character display column
  2454                                  			call	SetConsoleChar					;display ASCII character
  2455                                  .40			pop	es						;restore non-volatile regs
  2456                                  			pop	ds						;
  2457                                  			pop	esi						;
  2458                                  			pop	ecx						;
  2459                                  			pop	ebx						;
  2460                                  			ret							;return
  2461                                  ;-----------------------------------------------------------------------------------------------------------------------
  2462                                  ;
  2463                                  ;	Routine:	PutConsoleHexByte
  2464                                  ;
  2465                                  ;	Description:	This routine writes two ASCII characters to the console screen representing the value of a byte.
  2466                                  ;
  2467                                  ;	In:		AL	byte value
  2468                                  ;			CH	row
  2469                                  ;			CL	column
  2470                                  ;			DS	OS data selector
  2471                                  ;			ES	CGA selector
  2472                                  ;
  2473                                  ;-----------------------------------------------------------------------------------------------------------------------
  2474                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2475                                  			mov	bl,al						;save byte value
  2476                                  			shr	al,4						;hi-order nybble
  2477                                  			or	al,030h						;apply ASCII zone
  2478                                  			cmp	al,03ah						;numeric?
  2479                                  			jb	.10						;yes, skip ahead
  2480                                  			add	al,7						;add ASCII offset for alpha
  2481                                  .10			call	SetConsoleChar					;display ASCII character
  2482                                  			inc	cl						;increment column
  2483                                  			mov	al,bl						;byte value
  2484                                  			and	al,0fh						;lo-order nybble
  2485                                  			or	al,30h						;apply ASCII zone
  2486                                  			cmp	al,03ah						;numeric?
  2487                                  			jb	.20						;yes, skip ahead
  2488                                  			add	al,7						;add ASCII offset for alpha
  2489                                  .20			call	SetConsoleChar					;display ASCII character
  2490                                  			pop	ebx						;restore non-volatile regs
  2491                                  			ret							;return
  2492                                  ;-----------------------------------------------------------------------------------------------------------------------
  2493                                  ;
  2494                                  ;	Message Queue Helper Routines
  2495                                  ;
  2496                                  ;	PutMessage
  2497                                  ;	GetMessage
  2498                                  ;
  2499                                  ;-----------------------------------------------------------------------------------------------------------------------
  2500                                  ;-----------------------------------------------------------------------------------------------------------------------
  2501                                  ;
  2502                                  ;	Routine:	PutMessage
  2503                                  ;
  2504                                  ;	Description:	This routine adda a message to the message queue.
  2505                                  ;
  2506                                  ;	Input:		ECX	hi-order data word
  2507                                  ;			EDX	lo-order data word
  2508                                  ;
  2509                                  ;	Output:		CY	0 = success
  2510                                  ;				1 = fail: queue is full
  2511                                  ;
  2512                                  ;-----------------------------------------------------------------------------------------------------------------------
  2513                                  PutMessage		push	ds						;save non-volatile regs
  2514                                  			push	ESELMQ						;load task message queue selector ...
  2515                                  			pop	ds						;... into data segment register
  2516                                  			mov	eax,[MQTail]					;tail ptr
  2517                                  			cmp	dword [eax],0					;is queue full?
  2518                                  			stc							;assume failure
  2519                                  			jne	.20						;yes, cannot store
  2520                                  			mov	[eax],edx					;store lo-order data
  2521                                  			mov	[eax+4],ecx					;store hi-order data
  2522                                  			add	eax,8						;next queue element adr
  2523                                  			and	eax,03fch					;at end of queue?
  2524                                  			jnz	.10						;no, skip ahead
  2525                                  			mov	al,8						;reset to top of queue
  2526                                  .10			mov	[MQTail],eax					;save new tail ptr
  2527                                  			clc							;indicate success
  2528                                  .20			pop	ds						;restore non-volatile regs
  2529                                  			ret							;return
  2530                                  ;-----------------------------------------------------------------------------------------------------------------------
  2531                                  ;
  2532                                  ;	Routine:	GetMessage
  2533                                  ;
  2534                                  ;	Description:	This routine reads and removes a message from the message queue.
  2535                                  ;
  2536                                  ;	Output:		EAX	lo-order message data
  2537                                  ;			EDX	hi-order message data
  2538                                  ;
  2539                                  ;			CY	0 = message read
  2540                                  ;				1 = no message to read
  2541                                  ;
  2542                                  ;-----------------------------------------------------------------------------------------------------------------------
  2543                                  GetMessage		push	ebx						;save non-volatile regs
  2544                                  			push	ecx						;
  2545                                  			push	ds						;
  2546                                  			push	ESELMQ						;load message queue selector ...
  2547                                  			pop	ds						;... into data segment register
  2548                                  			mov	ebx,[MQHead]					;head ptr
  2549                                  			mov	eax,[ebx]					;lo-order 32 bits
  2550                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2551                                  			or	eax,edx						;is queue empty?
  2552                                  			stc							;assume queue is emtpy
  2553                                  			jz	.20						;yes, skip ahead
  2554                                  			xor	ecx,ecx						;store zero
  2555                                  			mov	[ebx],ecx					;... in lo-order dword
  2556                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2557                                  			add	ebx,8						;next queue element
  2558                                  			and	ebx,03fch					;at end of queue?
  2559                                  			jnz	.10						;no, skip ahead
  2560                                  			mov	bl,8						;reset to 1st entry
  2561                                  .10			mov	[MQHead],ebx					;save new head ptr
  2562                                  			clc							;indicate message read
  2563                                  .20			pop	ds						;restore non-volatile regs
  2564                                  			pop	ecx						;
  2565                                  			pop	ebx						;
  2566                                  			ret							;return
  2567                                  ;-----------------------------------------------------------------------------------------------------------------------
  2568                                  ;
  2569                                  ;	Memory-Mapped Video Routines
  2570                                  ;
  2571                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2572                                  ;
  2573                                  ;	ClearConsoleScreen
  2574                                  ;	ScrollConsoleRow
  2575                                  ;	SetConsoleChar
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  ;-----------------------------------------------------------------------------------------------------------------------
  2579                                  ;
  2580                                  ;	Routine:	ClearConsoleScreen
  2581                                  ;
  2582                                  ;	Description:	This routine clears the console (CGA) screen.
  2583                                  ;
  2584                                  ;-----------------------------------------------------------------------------------------------------------------------
  2585                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2586                                  			push	edi						;
  2587                                  			push	ds						;
  2588                                  			push	es						;
  2589                                  			push	ESELDAT						;load OS Data selector ...
  2590                                  			pop	ds						;... into DS register
  2591                                  			push	ESELCGA						;load CGA selector ...
  2592                                  			pop	es						;... into ES register
  2593                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2594                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2595                                  			xor	edi,edi						;target offset
  2596                                  			cld							;forward strings
  2597                                  			rep	stosd						;reset screen body
  2598                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2599                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2600                                  			rep	stosd						;reset OIA line
  2601                                  			xor	al,al						;zero register
  2602                                  			mov	[wbConsoleRow],al				;reset console row
  2603                                  			mov	[wbConsoleColumn],al				;reset console column
  2604                                  			call	PlaceCursor					;place cursor at current position
  2605                                  			pop	es						;restore non-volatile regs
  2606                                  			pop	ds						;
  2607                                  			pop	edi						;
  2608                                  			pop	ecx						;
  2609                                  			ret							;return
  2610                                  ;-----------------------------------------------------------------------------------------------------------------------
  2611                                  ;
  2612                                  ;	Routine:	ScrollConsoleRow
  2613                                  ;
  2614                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2615                                  ;
  2616                                  ;-----------------------------------------------------------------------------------------------------------------------
  2617                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2618                                  			push	esi						;
  2619                                  			push	edi						;
  2620                                  			push	ds						;
  2621                                  			push	es						;
  2622                                  			push	ESELCGA						;load CGA video selector ...
  2623                                  			pop	ds						;... into DS
  2624                                  			push	ESELCGA						;load CGA video selector ...
  2625                                  			pop	es						;... into ES
  2626                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2627                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2628                                  			xor	edi,edi						;edi = target (line 1)
  2629                                  			cld							;forward strings
  2630                                  			rep	movsd						;move 24 lines up
  2631                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2632                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2633                                  			rep	stosd						;clear bottom row
  2634                                  			pop	es						;restore non-volatile regs
  2635                                  			pop	ds						;
  2636                                  			pop	edi						;
  2637                                  			pop	esi						;
  2638                                  			pop	ecx						;
  2639                                  			ret							;return
  2640                                  ;-----------------------------------------------------------------------------------------------------------------------
  2641                                  ;
  2642                                  ;	Routine:	SetConsoleChar
  2643                                  ;
  2644                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2645                                  ;
  2646                                  ;	In:		AL	ASCII character
  2647                                  ;			CL	column
  2648                                  ;			CH	row
  2649                                  ;			ES	CGA selector
  2650                                  ;
  2651                                  ;-----------------------------------------------------------------------------------------------------------------------
  2652                                  SetConsoleChar		mov	dl,al						;ASCII character
  2653                                  			movzx	eax,ch						;row
  2654                                  			mov	ah,ECONCOLS					;cols/row
  2655                                  			mul	ah						;row * cols/row
  2656                                  			add	al,cl						;add column
  2657                                  			adc	ah,0						;handle carry
  2658                                  			shl	eax,1						;screen offset
  2659                                  			mov	[es:eax],dl					;store character
  2660                                  			ret							;return
  2661                                  ;-----------------------------------------------------------------------------------------------------------------------
  2662                                  ;
  2663                                  ;	Input/Output Routines
  2664                                  ;
  2665                                  ;	These routines read and/or write directly to ports.
  2666                                  ;
  2667                                  ;	PlaceCursor
  2668                                  ;	PutPrimaryEndOfInt
  2669                                  ;	PutSecondaryEndOfInt
  2670                                  ;	ResetSystem
  2671                                  ;	SetKeyboardLamps
  2672                                  ;	WaitForKeyInBuffer
  2673                                  ;	WaitForKeyOutBuffer
  2674                                  ;
  2675                                  ;-----------------------------------------------------------------------------------------------------------------------
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  ;
  2678                                  ;	Routine:	PlaceCursor
  2679                                  ;
  2680                                  ;	Description:	This routine positions the cursor on the console.
  2681                                  ;
  2682                                  ;	In:		DS	OS data selector
  2683                                  ;
  2684                                  ;-----------------------------------------------------------------------------------------------------------------------
  2685                                  PlaceCursor		push	ecx						;save non-volatile regs
  2686                                  			mov	al,[wbConsoleRow]				;al = row
  2687                                  			mov	ah,ECONCOLS					;ah = cols/row
  2688                                  			mul	ah						;row offset
  2689                                  			add	al,[wbConsoleColumn]				;add column
  2690                                  			adc	ah,0						;add overflow
  2691                                  			mov	ecx,eax						;screen offset
  2692                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2693                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2694                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2695                                  			out	dx,al						;select register
  2696                                  			inc	edx						;data port
  2697                                  			mov	al,ch						;hi-order cursor loc
  2698                                  			out	dx,al						;store hi-order loc
  2699                                  			dec	edx						;register select port
  2700                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2701                                  			out	dx,al						;select register
  2702                                  			inc	edx						;data port
  2703                                  			mov	al,cl						;lo-order cursor loc
  2704                                  			out	dx,al						;store lo-order loc
  2705                                  			pop	ecx						;restore non-volatile regs
  2706                                  			ret							;return
  2707                                  ;-----------------------------------------------------------------------------------------------------------------------
  2708                                  ;
  2709                                  ;	Routine:	PutPrimaryEndOfInt
  2710                                  ;
  2711                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2712                                  ;
  2713                                  ;-----------------------------------------------------------------------------------------------------------------------
  2714                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  2715                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2716                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  2717                                  			ret							;return
  2718                                  ;-----------------------------------------------------------------------------------------------------------------------
  2719                                  ;
  2720                                  ;	Routine:	PutSecondaryEndOfInt
  2721                                  ;
  2722                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  2723                                  ;
  2724                                  ;-----------------------------------------------------------------------------------------------------------------------
  2725                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  2726                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  2727                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  2728                                  			ret							;return
  2729                                  ;-----------------------------------------------------------------------------------------------------------------------
  2730                                  ;
  2731                                  ;	Routine:	ResetSystem
  2732                                  ;
  2733                                  ;	Description:	This routine restarts the system using the 8042 controller.
  2734                                  ;
  2735                                  ;-----------------------------------------------------------------------------------------------------------------------
  2736                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  2737                                  			loop	$						;clear interrupts
  2738                                  			mov	al,EKEYCMDRESET					;mask out bit zero
  2739                                  			out	EKEYPORTSTAT,al					;drive bit zero low
  2740                                  .10			sti							;enable maskable interrupts
  2741                                  			hlt							;halt until interrupt
  2742                                  			jmp	.10						;repeat until reset kicks in
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;	Routine:	SetKeyboardLamps
  2746                                  ;
  2747                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  2748                                  ;
  2749                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  2750                                  ;
  2751                                  ;-----------------------------------------------------------------------------------------------------------------------
  2752                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  2753                                  			mov	al,EKEYCMDLAMPS					;set/reset lamps command
  2754                                  			out	EKEYPORTDATA,al					;send command to 8042
  2755                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2756                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2757                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  2758                                  			mov	al,bh						;set/reset lamps value
  2759                                  			out	EKEYPORTDATA,al					;send lamps value
  2760                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  2761                                  			in	al,EKEYPORTDATA					;read 8042 'ACK' (0fah)
  2762                                  			ret							;return
  2763                                  ;-----------------------------------------------------------------------------------------------------------------------
  2764                                  ;
  2765                                  ;	Routine:	WaitForKeyInBuffer
  2766                                  ;
  2767                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  2768                                  ;
  2769                                  ;	Out:		ZF	1 = Input buffer ready
  2770                                  ;				0 = Input buffer not ready after timeout
  2771                                  ;
  2772                                  ;-----------------------------------------------------------------------------------------------------------------------
  2773                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  2774                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2775                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2776                                  			test	al,EKEYBITIN					;is input buffer still full?
  2777                                  			loopnz	.10						;yes, repeat till timeout
  2778                                  			pop	ecx						;restore non-volatile regs
  2779                                  			ret							;return
  2780                                  ;-----------------------------------------------------------------------------------------------------------------------
  2781                                  ;
  2782                                  ;	Routine:	WaitForKeyOutBuffer
  2783                                  ;
  2784                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  2785                                  ;
  2786                                  ;	Out:		ZF	0 = Output buffer has data from controller
  2787                                  ;				1 = Output buffer empty after timeout
  2788                                  ;
  2789                                  ;-----------------------------------------------------------------------------------------------------------------------
  2790                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  2791                                  			mov	ecx,EKEYWAITLOOP				;keyboard controller timeout
  2792                                  .10			in	al,EKEYPORTSTAT					;keyboard status byte
  2793                                  			test	al,EKEYBITOUT					;output buffer status bit
  2794                                  			loopz	.10						;loop until output buffer bit
  2795                                  			pop	ecx						;restore non-volatile regs
  2796                                  			ret							;return
  2797                                  ;-----------------------------------------------------------------------------------------------------------------------
  2798                                  ;
  2799                                  ;	End of the Kernel Function Library
  2800                                  ;
  2801                                  ;-----------------------------------------------------------------------------------------------------------------------
  2802                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  2803                                  			db	055h,0AAh					;end of segment
  2804                                  ;-----------------------------------------------------------------------------------------------------------------------
  2805                                  ;
  2806                                  ;	Console Task
  2807                                  ;
  2808                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  2809                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  2810                                  ;	screen and responds to user commands.
  2811                                  ;
  2812                                  ;-----------------------------------------------------------------------------------------------------------------------
  2813                                  ;-----------------------------------------------------------------------------------------------------------------------
  2814                                  ;
  2815                                  ;	Console Stack								@disk: 007400	@mem:  004000
  2816                                  ;
  2817                                  ;	This is the stack for the console task. It supports 448 nested calls.
  2818                                  ;
  2819                                  ;-----------------------------------------------------------------------------------------------------------------------
  2820                                  section			constack						;console task stack
  2821                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  2822                                  ;-----------------------------------------------------------------------------------------------------------------------
  2823                                  ;
  2824                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  2825                                  ;
  2826                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  2827                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  2828                                  ;	16 descriptors. Six are initially defined.
  2829                                  ;
  2830                                  ;-----------------------------------------------------------------------------------------------------------------------
  2831                                  section			conldt							;console local descriptors
  2832                                  			dq	004093004780007Fh				;04 TSS alias
  2833                                  			dq	004093004700007Fh				;0C LDT alias
  2834                                  			dq	00409300400006FFh				;14 stack
  2835                                  			dq	00CF93000000FFFFh				;1C data
  2836                                  			dq	00409B0050000FFFh				;24 code
  2837                                  			dq	00409300480007FFh				;2C message queue
  2838                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2839                                  ;-----------------------------------------------------------------------------------------------------------------------
  2840                                  ;
  2841                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  2842                                  ;
  2843                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  2844                                  ;	segment. CS to console code.
  2845                                  ;
  2846                                  ;-----------------------------------------------------------------------------------------------------------------------
  2847                                  section			contss							;console task state segment
  2848                                  			dd	0						;00 back-link tss
  2849                                  			dd	0700h						;04 esp ring 0
  2850                                  			dd	0014h						;08 ss ring 0
  2851                                  			dd	0700h						;0C esp ring 1
  2852                                  			dd	0014h						;10 es ring 1
  2853                                  			dd	0700h						;14 esp ring 2
  2854                                  			dd	0014h						;18 ss ring 2
  2855                                  			dd	0						;1C cr ring 3
  2856                                  			dd	0						;20 eip
  2857                                  			dd	0200h						;24 eflags
  2858                                  			dd	0						;28 eax
  2859                                  			dd	0						;2C ecx
  2860                                  			dd	0						;30 edx
  2861                                  			dd	0						;34 ebx
  2862                                  			dd	0700h						;38 esp ring 3
  2863                                  			dd	0						;3C ebp
  2864                                  			dd	0						;40 esi
  2865                                  			dd	0						;44 edi
  2866                                  			dd	001Ch						;48 es
  2867                                  			dd	0024h						;4C cs
  2868                                  			dd	0014h						;50 ss ring 3
  2869                                  			dd	001Ch						;54 ds
  2870                                  			dd	0						;58 fs
  2871                                  			dd	0						;5c gs
  2872                                  			dd	0050h						;60 ldt selector in gdt
  2873                                  			times	128-($-$$) db 0h				;zero fill to end of section
  2874                                  ;-----------------------------------------------------------------------------------------------------------------------
  2875                                  ;
  2876                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  2877                                  ;
  2878                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  2879                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  2880                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  2881                                  ;	event.
  2882                                  ;
  2883                                  ;-----------------------------------------------------------------------------------------------------------------------
  2884                                  section			conmque							;console message queue
  2885                                  			dd	8						;head pointer
  2886                                  			dd	8						;tail pointer
  2887                                  			times	510 dd 0					;queue elements
  2888                                  ;-----------------------------------------------------------------------------------------------------------------------
  2889                                  ;
  2890                                  ;	Console Code								@disk: 008400	@mem: 005000
  2891                                  ;
  2892                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  2893                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  2894                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  2895                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  2896                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  2897                                  ;	board input, echoing to the console screen and responding to user commands.
  2898                                  ;
  2899                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  2900                                  ;
  2901                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  2902                                  ;				|  Real Mode Interrupt Vectors			|
  2903                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  2904                                  ;				|  Reserved BIOS Memory Area			|
  2905                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  2906                                  ;				|  Shared Kernel Memory Area			|
  2907                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  2908                                  ;				|  Global Descriptor Table (GDT)		|
  2909                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  2910                                  ;				|  Interrupt Descriptor Table (IDT)		|
  2911                                  ;			002000	+-----------------------------------------------+
  2912                                  ;				|  Interrupt Handlers				|
  2913                                  ;				|  Kernel Function Library			|
  2914                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  2915                                  ;				|  Console Task Stack Area			|
  2916                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  2917                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  2918                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  2919                                  ;				|  Console Task Task State Segment (TSS)	|
  2920                                  ;			004800	+-----------------------------------------------+
  2921                                  ;				|  Console Task Message Queue			|
  2922                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  2923                                  ;				|  Console Task Code				|
  2924                                  ;				|  Console Task Constants			|
  2925                                  ;			006000	+===============================================+
  2926                                  ;
  2927                                  ;-----------------------------------------------------------------------------------------------------------------------
  2928                                  section			concode	vstart=5000h					;labels relative to 5000h
  2929                                  ConCode			call	ConInitializeData				;initialize console variables
  2930                                  
  2931                                  			clearConsoleScreen					;clear the console screen
  2932                                  			putConsoleString czTitle				;display startup message
  2933                                  .10			putConsoleString czPrompt				;display input prompt
  2934                                  			placeCursor						;set CRT cursor location
  2935                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  2936                                  			putConsoleString czNewLine				;newline
  2937                                  
  2938                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  2939                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  2940                                  			mov	ebx,wzConsoleToken				;token buffer
  2941                                  			call	ConTakeToken					;handle console input
  2942                                  			mov	edx,wzConsoleToken				;token buffer
  2943                                  			call	ConDetermineCommand				;determine command number
  2944                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  2945                                  			jb	.20						;yes, branch
  2946                                  
  2947                                  			putConsoleString czUnknownCommand			;display error message
  2948                                  
  2949                                  			jmp	.10						;next command
  2950                                  .20			shl	eax,2						;index into jump table
  2951                                  			mov	edx,tConJmpTbl					;jump table base address
  2952                                  			mov	eax,[edx+eax]					;command handler routine address
  2953                                  			call	eax						;call command handler
  2954                                  			jmp	.10						;next command
  2955                                  ;-----------------------------------------------------------------------------------------------------------------------
  2956                                  ;
  2957                                  ;	Routine:	ConInitializeData
  2958                                  ;
  2959                                  ;	Description:	This routine initializes console task variables.
  2960                                  ;
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  ConInitializeData	push	ecx						;save non-volatile regs
  2963                                  			push	edi						;
  2964                                  			push	es						;
  2965                                  			push	ESELDAT						;load OS data selector ...
  2966                                  			pop	es						;... into extra segment register
  2967                                  			mov	edi,ECONDATA					;OS console data address
  2968                                  			xor	al,al						;initialization value
  2969                                  			mov	ecx,ECONDATALEN					;size of OS console data
  2970                                  			cld							;forward strings
  2971                                  			rep	stosb						;initialize data
  2972                                  			pop	es						;restore non-volatile regs
  2973                                  			pop	edi						;
  2974                                  			pop	ecx						;
  2975                                  			ret							;return
  2976                                  ;-----------------------------------------------------------------------------------------------------------------------
  2977                                  ;
  2978                                  ;	Routine:	ConTakeToken
  2979                                  ;
  2980                                  ;	Description:	This routine extracts the next token from the given source buffer.
  2981                                  ;
  2982                                  ;	In:		DS:EDX	source buffer address
  2983                                  ;			DS:EBX	target buffer address
  2984                                  ;
  2985                                  ;	Out:		DS:EDX	source buffer address
  2986                                  ;			DS:EBX	target buffer address
  2987                                  ;
  2988                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  2989                                  ;
  2990                                  ;-----------------------------------------------------------------------------------------------------------------------
  2991                                  ConTakeToken		push	esi						;save non-volatile regs
  2992                                  			push	edi						;
  2993                                  			mov	esi,edx						;source buffer address
  2994                                  			mov	edi,ebx						;target buffer address
  2995                                  			cld							;forward strings
  2996                                  .10			lodsb							;load byte
  2997                                  			cmp	al,EASCIISPACE					;space?
  2998                                  			je	.10						;yes, continue
  2999                                  			test	al,al						;end of line?
  3000                                  			jz	.40						;yes, branch
  3001                                  .20			stosb							;store byte
  3002                                  			lodsb							;load byte
  3003                                  			test	al,al						;end of line?
  3004                                  			jz	.40						;no, continue
  3005                                  			cmp	al,EASCIISPACE					;space?
  3006                                  			jne	.20						;no, continue
  3007                                  .30			lodsb							;load byte
  3008                                  			cmp	al,EASCIISPACE					;space?
  3009                                  			je	.30						;yes, continue
  3010                                  			dec	esi						;pre-position
  3011                                  .40			mov	byte [edi],0					;terminate buffer
  3012                                  			mov	edi,edx						;source buffer address
  3013                                  .50			lodsb							;remaining byte
  3014                                  			stosb							;move to front of buffer
  3015                                  			test	al,al						;end of line?
  3016                                  			jnz	.50						;no, continue
  3017                                  			pop	edi						;restore non-volatile regs
  3018                                  			pop	esi						;
  3019                                  			ret							;return
  3020                                  ;-----------------------------------------------------------------------------------------------------------------------
  3021                                  ;
  3022                                  ;	Routine:	ConDetermineCommand
  3023                                  ;
  3024                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3025                                  ;
  3026                                  ;	input:		DS:EDX	command address
  3027                                  ;
  3028                                  ;	output:		EAX	>=0	= command nbr
  3029                                  ;				0	= unknown command
  3030                                  ;
  3031                                  ;-----------------------------------------------------------------------------------------------------------------------
  3032                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  3033                                  			push	esi						;
  3034                                  			push	edi						;
  3035                                  
  3036                                  			upperCaseString						;upper-case string at EDX
  3037                                  
  3038                                  			mov	esi,tConCmdTbl					;commands table
  3039                                  			xor	edi,edi						;intialize command number
  3040                                  			cld							;forward strings
  3041                                  .10			lodsb							;command length
  3042                                  			movzx	ecx,al						;command length
  3043                                  			jecxz	.20						;branch if end of table
  3044                                  			mov	ebx,esi						;table entry address
  3045                                  			add	esi,ecx						;next table entry address
  3046                                  
  3047                                  			compareMemory						;compare byte arrays at EDX, EBX
  3048                                  
  3049                                  			jecxz	.20						;branch if equal
  3050                                  			inc	edi						;increment command nbr
  3051                                  			jmp	.10						;repeat
  3052                                  .20			mov	eax,edi						;command number
  3053                                  			pop	edi						;restore non-volatile regs
  3054                                  			pop	esi						;
  3055                                  			pop	ebx						;
  3056                                  			ret							;return
  3057                                  ;-----------------------------------------------------------------------------------------------------------------------
  3058                                  ;
  3059                                  ;	Routine:	ConClear
  3060                                  ;
  3061                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3062                                  ;
  3063                                  ;-----------------------------------------------------------------------------------------------------------------------
  3064                                  ConClear		clearConsoleScreen					;clear console screen
  3065                                  			ret							;return
  3066                                  ;-----------------------------------------------------------------------------------------------------------------------
  3067                                  ;
  3068                                  ;	Routine:	ConExit
  3069                                  ;
  3070                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3071                                  ;
  3072                                  ;-----------------------------------------------------------------------------------------------------------------------
  3073                                  ConExit			resetSystem						;issue system reset
  3074                                  			ret							;return
  3075                                  ;-----------------------------------------------------------------------------------------------------------------------
  3076                                  ;
  3077                                  ;	Routine:	ConVersion
  3078                                  ;
  3079                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3080                                  ;
  3081                                  ;-----------------------------------------------------------------------------------------------------------------------
  3082                                  ConVersion		putConsoleString czTitle				;display version message
  3083                                  			ret							;return
  3084                                  ;-----------------------------------------------------------------------------------------------------------------------
  3085                                  ;
  3086                                  ;	Tables
  3087                                  ;
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  										;---------------------------------------
  3090                                  										;  Command Jump Table
  3091                                  										;---------------------------------------
  3092                                  tConJmpTbl		equ	$						;command jump table
  3093                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  3094                                  			dd	ConVersion	- ConCode			;version command routine offset
  3095                                  			dd	ConClear	- ConCode			;clear command routine offset
  3096                                  			dd	ConExit		- ConCode			;exit command routine offset
  3097                                  			dd	ConExit		- ConCode			;quit command routine offset
  3098                                  			dd	ConClear	- ConCode			;cls command routine offset
  3099                                  			dd	ConVersion	- ConCode			;ver command routine offset
  3100                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3101                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3102                                  										;---------------------------------------
  3103                                  										;  Command Name Table
  3104                                  										;---------------------------------------
  3105                                  tConCmdTbl		equ	$						;command name table
  3106                                  			db	9,"SHUTDOWN",0					;shutdown command
  3107                                  			db	8,"VERSION",0					;version command
  3108                                  			db	6,"CLEAR",0					;clear command
  3109                                  			db	5,"EXIT",0					;exit command
  3110                                  			db	5,"QUIT",0					;quit command
  3111                                  			db	4,"CLS",0					;cls command
  3112                                  			db	4,"VER",0					;ver command
  3113                                  			db	0						;end of table
  3114                                  ;-----------------------------------------------------------------------------------------------------------------------
  3115                                  ;
  3116                                  ;	Constants
  3117                                  ;
  3118                                  ;-----------------------------------------------------------------------------------------------------------------------
  3119                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3120                                  czPrompt		db	":",0						;prompt string
  3121                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3122                                  czNewLine		db	13,10,0						;new line string
  3123                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  3124                                  			db	055h,0AAh					;end of section
  3125                                  %endif
  3126                                  %ifdef BUILDDISK
  3127                                  ;-----------------------------------------------------------------------------------------------------------------------
  3128                                  ;
  3129                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3130                                  ;
  3131                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3132                                  ;
  3133                                  ;-----------------------------------------------------------------------------------------------------------------------
  3134                                  section			unused							;unused disk space
  3135                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3136                                  %endif
