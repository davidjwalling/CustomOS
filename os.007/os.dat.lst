     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;       File:           os.asm
     4                                  ;
     5                                  ;       Project:        os.007
     6                                  ;
     7                                  ;       Description:    In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;                       clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;       Revised:        July 4, 2018
    11                                  ;
    12                                  ;       Assembly:       nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;                       nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;                       nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;                       nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;       Assembler:      Netwide Assembler (NASM) 2.13.01, May 1 2017
    18                                  ;
    19                                  ;       Notice:         Copyright (C) 2010-2018 David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;       Assembly Directives
    25                                  ;
    26                                  ;       Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;       BUILDBOOT       Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;       BUILDDISK       Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;       BUILDCOM        Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;       BUILDPREP       Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK                                                                ;if we are building a disk image ...
    35                                  %define BUILDBOOT                                                               ;... build the boot sector
    36                                  %define BUILDCOM                                                                ;... and the OS kernel
    37                                  %endif
    38                                  %ifdef BUILDPREP                                                                ;if creating the disk prep program ...
    39                                  %define BUILDBOOT                                                               ;... also build the boot sector
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;       Conventions
    44                                  ;
    45                                  ;       Alignment:      In this document, columns are numbered beginning with 1.
    46                                  ;                       Assembly instructions (mnemonics) begin in column 25.
    47                                  ;                       Assembly operands begin in column 33.
    48                                  ;                       Inline comments begin in column 81.
    49                                  ;                       Lines should not extend beyond column 120.
    50                                  ;
    51                                  ;       Arguments:      Arguments are passed as registers and generally follow this order: EAX, ECX, EDX, EBX.
    52                                  ;                       However, ECX may be used as the first parameter if a test for zero is required. EBX and EBP
    53                                  ;                       may be used as parameters if the routine is considered a "method" of an "object". In this
    54                                  ;                       case, EBX or EBP will address the object storage. If the routine is general-purpose string
    55                                  ;                       or character-array manipulator, ESI and EDI may be used as parameters to address input and/or
    56                                  ;                       ouput buffers, respectively.
    57                                  ;
    58                                  ;       Code Order:     Routines should appear in the order of their first likely use.
    59                                  ;                       Negative relative call or jump addresses indicate reuse.
    60                                  ;
    61                                  ;       Comments:       A comment that spans the entire line begins with a semicolon in column 1.
    62                                  ;                       A comment that accompanies code on a line begins with a semicolon in column 81.
    63                                  ;                       Register names in comments are in upper case (EAX, EDI).
    64                                  ;                       Hexadecimal values in comments are in lower case (01fh, 0dah).
    65                                  ;                       Routines are preceded with a comment box that includes the routine name, description, and
    66                                  ;                       register contents on entry and exit.
    67                                  ;
    68                                  ;       Constants:      Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    69                                  ;                       Constant stored values are named in camel case, starting with 'c' (cbMaxLines).
    70                                  ;                       The 2nd letter of the constant label indicates the storage type.
    71                                  ;
    72                                  ;                       cq......        constant quad-word (dq)
    73                                  ;                       cd......        constant double-word (dd)
    74                                  ;                       cw......        constant word (dw)
    75                                  ;                       cb......        constant byte (db)
    76                                  ;                       cz......        constant ASCIIZ (null-terminated) string
    77                                  ;
    78                                  ;       Instructions:   32-bit instructions are generally favored.
    79                                  ;                       8-bit instructions and data are preferred for flags and status fields, etc.
    80                                  ;                       16-bit instructions are avoided wherever possible to avoid prefix bytes.
    81                                  ;
    82                                  ;       Labels:         Labels within a routine are numeric and begin with a period (.10, .20).
    83                                  ;                       Labels within a routine begin at ".10" and increment by 10.
    84                                  ;
    85                                  ;       Literals:       Literal values defined by external standards should be defined as symbolic constants (equates).
    86                                  ;                       Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h' (01Fh).
    87                                  ;                       Binary literal values in source code are encoded with a final 'b' (1010b).
    88                                  ;                       Decimal literal values in source code are strictly numerals (2048).
    89                                  ;                       Octal literal values are avoided.
    90                                  ;                       String literals are enclosed in double quotes, e.g. "Loading OS".
    91                                  ;                       Single character literals are enclosed in single quotes, e.g. 'A'.
    92                                  ;
    93                                  ;       Macros:         Macro names are in camel case, beginning with a lower-case letter (getDateString).
    94                                  ;                       Macro names describe an action and so DO begin with a verb.
    95                                  ;
    96                                  ;       Memory Use:     Operating system memory allocation is avoided wherever possible.
    97                                  ;                       Buffers are kept to as small a size as practicable.
    98                                  ;                       Data and code intermingling is avoided wherever possible.
    99                                  ;
   100                                  ;       Registers:      Register names in comments are in upper case (EAX, EDX).
   101                                  ;                       Register names in source code are in lower case (eax, edx).
   102                                  ;
   103                                  ;       Return Values:  Routines return result values in EAX or ECX or both. Routines should indicate failure by
   104                                  ;                       setting the carry flag to 1. Routines may prefer the use of ECX as a return value if the
   105                                  ;                       value is to be tested for null upon return (using the jecxz instruction).
   106                                  ;
   107                                  ;       Routines:       Routine names are in mixed case, capitalized (GetYear, ReadRealTimeClock).
   108                                  ;                       Routine names begin with a verb (Get, Read, Load).
   109                                  ;                       Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
   110                                  ;                       Routines that serve as wrappers for library functions carry the same name as the library
   111                                  ;                       function but begin with a leading underscore (_) character.
   112                                  ;
   113                                  ;       Structures:     Structure names are in all-caps (DATETIME).
   114                                  ;                       Structure names describe a "thing" and so do NOT begin with a verb.
   115                                  ;
   116                                  ;       Usage:          Registers EBX, ECX, EBP, SS, CS, DS and ES are preserved by routines.
   117                                  ;                       Registers ESI and EDI are preserved unless they are input parameters.
   118                                  ;                       Registers EAX and ECX are preferred for returning response/result values.
   119                                  ;                       Registers EBX and EBP are preferred for context (structure) address parameters.
   120                                  ;                       Registers EAX, ECX, EDX and EBX are preferred for integral parameters.
   121                                  ;
   122                                  ;       Variables:      Variables are named in camel case, starting with 'w'.
   123                                  ;                       The 2nd letter of the variable label indicates the storage type.
   124                                  ;
   125                                  ;                       wq......        variable quad-word (resq)
   126                                  ;                       wd......        variable double-word (resd)
   127                                  ;                       ww......        variable word (resw)
   128                                  ;                       wb......        variable byte (resb)
   129                                  ;                       ws......        writable structure
   130                                  ;
   131                                  ;-----------------------------------------------------------------------------------------------------------------------
   132                                  ;=======================================================================================================================
   133                                  ;
   134                                  ;       Equates
   135                                  ;
   136                                  ;       The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   137                                  ;       verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   138                                  ;       values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   139                                  ;       sets. Equates here are defined in the following groupings:
   140                                  ;
   141                                  ;       Hardware-Defined Values
   142                                  ;
   143                                  ;       ECRT...         6845 Cathode Ray Tube (CRT) Controller values
   144                                  ;       EFDC...         NEC 765 Floppy Disk Controller (FDC) values
   145                                  ;       EKEYB...        8042 or "PS/2 Controller" (Keyboard Controller) values
   146                                  ;       EPIC...         8259 Programmable Interrupt Controller (PIC) values
   147                                  ;       EPIT...         8253 Programmable Interval Timer (PIT) values
   148                                  ;       EX86...         Intel x86 CPU architecture values
   149                                  ;
   150                                  ;       Firmware-Defined Values
   151                                  ;
   152                                  ;       EBIOS...        Basic Input/Output System (BIOS) values
   153                                  ;
   154                                  ;       Standards-Based Values
   155                                  ;
   156                                  ;       EASCII...       American Standard Code for Information Interchange (ASCII) values
   157                                  ;
   158                                  ;       Operating System Values
   159                                  ;
   160                                  ;       EBOOT...        Boot sector and loader values
   161                                  ;       ECON...         Console values (dimensions and attributes)
   162                                  ;       EGDT...         Global Descriptor Table (GDT) selector values
   163                                  ;       EKEYF...        Keyboard status flags
   164                                  ;       EKRN...         Kernel values (fixed locations and sizes)
   165                                  ;       ELDT...         Local Descriptor Table (LDT) selector values
   166                                  ;       EMSG...         Message identifers
   167                                  ;
   168                                  ;=======================================================================================================================
   169                                  ;-----------------------------------------------------------------------------------------------------------------------
   170                                  ;
   171                                  ;       Hardware-Defined Values
   172                                  ;
   173                                  ;-----------------------------------------------------------------------------------------------------------------------
   174                                  ;-----------------------------------------------------------------------------------------------------------------------
   175                                  ;
   176                                  ;       6845 Cathode Ray Tube (CRT) Controller                                  ECRT...
   177                                  ;
   178                                  ;       The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   179                                  ;       for CGA, EGA, VGA and compatible video modes.
   180                                  ;
   181                                  ;-----------------------------------------------------------------------------------------------------------------------
   182                                  ECRTPORTHI              equ     003h                                            ;controller port hi
   183                                  ECRTPORTLO              equ     0D4h                                            ;controller port lo
   184                                  ECRTCURLOCHI            equ     00Eh                                            ;cursor loc reg hi
   185                                  ECRTCURLOCLO            equ     00Fh                                            ;cursor loc reg lo
   186                                  ;-----------------------------------------------------------------------------------------------------------------------
   187                                  ;
   188                                  ;       NEC 765 Floppy Disk Controller (FDC)                                    EFDC...
   189                                  ;
   190                                  ;       The NEC 765 FDC is a programmable controller for floppy disk drives.
   191                                  ;
   192                                  ;-----------------------------------------------------------------------------------------------------------------------
   193                                  EFDCPORTHI              equ     003h                                            ;controller port hi
   194                                  EFDCPORTLOOUT           equ     0F2h                                            ;digital output register lo
   195                                  EFDCPORTLOSTAT          equ     0F4h                                            ;main status register lo
   196                                  EFDCSTATBUSY            equ     010h                                            ;main status is busy
   197                                  EFDCMOTOROFF            equ     00Ch                                            ;motor off / enable / DMA
   198                                  ;-----------------------------------------------------------------------------------------------------------------------
   199                                  ;
   200                                  ;       8042 Keyboard Controller                                                EKEYB...
   201                                  ;
   202                                  ;       The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   203                                  ;       device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   204                                  ;
   205                                  ;-----------------------------------------------------------------------------------------------------------------------
   206                                  EKEYBPORTDATA           equ     060h                                            ;data port
   207                                  EKEYBPORTSTAT           equ     064h                                            ;status port
   208                                  EKEYBCMDRESET           equ     0FEh                                            ;reset bit 0 to restart system
   209                                  EKEYBBITOUT             equ     001h                                            ;output buffer status bit
   210                                  EKEYBBITIN              equ     002h                                            ;input buffer status bit
   211                                  EKEYBCMDLAMPS           equ     0EDh                                            ;set/reset lamps command
   212                                  EKEYBWAITLOOP           equ     010000h                                         ;wait loop
   213                                                                                                                  ;---------------------------------------
   214                                                                                                                  ;       Keyboard Scan Codes
   215                                                                                                                  ;---------------------------------------
   216                                  EKEYBCTRLDOWN           equ     01Dh                                            ;control key down
   217                                  EKEYBPAUSEDOWN          equ     01Dh                                            ;pause key down (e1 1d ... )
   218                                  EKEYBSHIFTLDOWN         equ     02Ah                                            ;left shift key down
   219                                  EKEYBPRTSCRDOWN         equ     02Ah                                            ;print-screen key down (e0 2a ...)
   220                                  EKEYBSLASH              equ     035h                                            ;slash
   221                                  EKEYBSHIFTRDOWN         equ     036h                                            ;right shift key down
   222                                  EKEYBALTDOWN            equ     038h                                            ;alt key down
   223                                  EKEYBCAPSDOWN           equ     03Ah                                            ;caps-lock down
   224                                  EKEYBNUMDOWN            equ     045h                                            ;num-lock down
   225                                  EKEYBSCROLLDOWN         equ     046h                                            ;scroll-lock down
   226                                  EKEYBINSERTDOWN         equ     052h                                            ;insert down (e0 52)
   227                                  EKEYBUP                 equ     080h                                            ;up
   228                                  EKEYBCTRLUP             equ     09Dh                                            ;control key up
   229                                  EKEYBSHIFTLUP           equ     0AAh                                            ;left shift key up
   230                                  EKEYBSLASHUP            equ     0B5h                                            ;slash key up
   231                                  EKEYBSHIFTRUP           equ     0B6h                                            ;right shift key up
   232                                  EKEYBPRTSCRUP           equ     0B7h                                            ;print-screen key up (e0 b7 ...)
   233                                  EKEYBALTUP              equ     0B8h                                            ;alt key up
   234                                  EKEYBCAPSUP             equ     0BAh                                            ;caps-lock up
   235                                  EKEYBNUMUP              equ     0C5h                                            ;num-lock up
   236                                  EKEYBSCROLLUP           equ     0C6h                                            ;scroll-lock up
   237                                  EKEYBINSERTUP           equ     0D2h                                            ;insert up (e0 d2)
   238                                  EKEYBCODEEXT0           equ     0E0h                                            ;extended scan code 0
   239                                  EKEYBCODEEXT1           equ     0E1h                                            ;extended scan code 1
   240                                  ;-----------------------------------------------------------------------------------------------------------------------
   241                                  ;
   242                                  ;       8259 Peripheral Interrupt Controller                                    EPIC...
   243                                  ;
   244                                  ;       The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   245                                  ;       external devices and signals a hardware interrupt to the CPU.
   246                                  ;
   247                                  ;-----------------------------------------------------------------------------------------------------------------------
   248                                  EPICPORTPRI             equ     020h                                            ;primary control port 0
   249                                  EPICPORTPRI1            equ     021h                                            ;primary control port 1
   250                                  EPICPORTSEC             equ     0A0h                                            ;secondary control port 0
   251                                  EPICPORTSEC1            equ     0A1h                                            ;secondary control port 1
   252                                  EPICEOI                 equ     020h                                            ;non-specific EOI code
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  ;
   255                                  ;       8253 Programmable Interval Timer                                        EPIT...
   256                                  ;
   257                                  ;       The Intel 8253 Programmable Interval Timer (PIT) is a chip that produces a hardware interrupt (IRQ0)
   258                                  ;       approximately 18.2 times per second.
   259                                  ;
   260                                  ;-----------------------------------------------------------------------------------------------------------------------
   261                                  EPITDAYTICKS            equ     01800B0h                                        ;ticks per day
   262                                  ;-----------------------------------------------------------------------------------------------------------------------
   263                                  ;
   264                                  ;       x86 CPU Architecture                                                    ;EX86...
   265                                  ;
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  EX86DESCLEN             equ     8                                               ;size of a protected mode descriptor
   268                                  ;-----------------------------------------------------------------------------------------------------------------------
   269                                  ;
   270                                  ;       x86 Descriptor Access Codes                                             EX86ACC...
   271                                  ;
   272                                  ;       The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   273                                  ;       structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   274                                  ;
   275                                  ;       0.......        Segment is not present in memory (triggers int 11)
   276                                  ;       1.......        Segment is present in memory
   277                                  ;       .LL.....        Segment is of privilege level LL (0,1,2,3)
   278                                  ;       ...0....        Segment is a system segment
   279                                  ;       ...00010                Local Descriptor Table
   280                                  ;       ...00101                Task Gate
   281                                  ;       ...010B1                Task State Segment (B:0=Available,1=Busy)
   282                                  ;       ...01100                Call Gate (386)
   283                                  ;       ...01110                Interrupt Gate (386)
   284                                  ;       ...01111                Trap Gate (386)
   285                                  ;       ...1...A        Segment is a code or data (A:1=Accesssed)
   286                                  ;       ...10DW.                Data (D:1=Expand Down,W:1=Writable)
   287                                  ;       ...11CR.                Code (C:1=Conforming,R:1=Readable)
   288                                  ;
   289                                  ;-----------------------------------------------------------------------------------------------------------------------
   290                                  EX86ACCLDT              equ     10000010b                                       ;local descriptor table
   291                                  EX86ACCTASK             equ     10000101b                                       ;task gate
   292                                  EX86ACCTSS              equ     10001001b                                       ;task-state segment
   293                                  EX86ACCGATE             equ     10001100b                                       ;call gate
   294                                  EX86ACCINT              equ     10001110b                                       ;interrupt gate
   295                                  EX86ACCTRAP             equ     10001111b                                       ;trap gate
   296                                  EX86ACCDATA             equ     10010011b                                       ;upward writable data
   297                                  EX86ACCCODE             equ     10011011b                                       ;non-conforming readable code
   298                                  ;-----------------------------------------------------------------------------------------------------------------------
   299                                  ;
   300                                  ;       Firmware-Defined Values
   301                                  ;
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  ;-----------------------------------------------------------------------------------------------------------------------
   304                                  ;
   305                                  ;       BIOS Interrupts and Functions                                           EBIOS...
   306                                  ;
   307                                  ;       Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   308                                  ;       BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   309                                  ;
   310                                  ;-----------------------------------------------------------------------------------------------------------------------
   311                                  EBIOSINTVIDEO           equ     010h                                            ;video services interrupt
   312                                  EBIOSFNSETVMODE         equ     000h                                            ;video set mode function
   313                                  EBIOSMODETEXT80         equ     003h                                            ;video mode 80x25 text
   314                                  EBIOSFNTTYOUTPUT        equ     00Eh                                            ;video TTY output function
   315                                  EBIOSINTDISKETTE        equ     013h                                            ;diskette services interrupt
   316                                  EBIOSINTMISC            equ     015h                                            ;miscellaneous services interrupt
   317                                  EBIOSFNINITPROTMODE     equ     089h                                            ;initialize protected mode fn
   318                                  EBIOSINTKEYBOARD        equ     016h                                            ;keyboard services interrupt
   319                                  EBIOSFNKEYSTATUS        equ     001h                                            ;keyboard status function
   320                                  ;-----------------------------------------------------------------------------------------------------------------------
   321                                  ;
   322                                  ;       Standards-Based Values
   323                                  ;
   324                                  ;-----------------------------------------------------------------------------------------------------------------------
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;
   327                                  ;       ASCII                                                                   EASCII...
   328                                  ;
   329                                  ;-----------------------------------------------------------------------------------------------------------------------
   330                                  EASCIIBACKSPACE         equ     008h                                            ;backspace
   331                                  EASCIILINEFEED          equ     00Ah                                            ;line feed
   332                                  EASCIIRETURN            equ     00Dh                                            ;carriage return
   333                                  EASCIIESCAPE            equ     01Bh                                            ;escape
   334                                  EASCIISPACE             equ     020h                                            ;space
   335                                  EASCIIUPPERA            equ     041h                                            ;'A'
   336                                  EASCIIUPPERZ            equ     05Ah                                            ;'Z'
   337                                  EASCIILOWERA            equ     061h                                            ;'a'
   338                                  EASCIILOWERZ            equ     07Ah                                            ;'z'
   339                                  EASCIITILDE             equ     07Eh                                            ;'~'
   340                                  EASCIICASE              equ     00100000b                                       ;case bit
   341                                  EASCIICASEMASK          equ     11011111b                                       ;case mask
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  ;
   344                                  ;       Operating System Values
   345                                  ;
   346                                  ;-----------------------------------------------------------------------------------------------------------------------
   347                                  ;-----------------------------------------------------------------------------------------------------------------------
   348                                  ;
   349                                  ;       Boot Sector and Loader Constants                                        EBOOT...
   350                                  ;
   351                                  ;       Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   352                                  ;       responsible for placing the CPU into protected mode and calling the initial operating system task.
   353                                  ;
   354                                  ;-----------------------------------------------------------------------------------------------------------------------
   355                                  EBOOTSTACKTOP           equ     0100h                                           ;boot sector stack top relative to DS
   356                                  EBOOTSECTORBYTES        equ     512                                             ;bytes per sector
   357                                  EBOOTDIRENTRIES         equ     224                                             ;directory entries
   358                                  EBOOTDISKSECTORS        equ     2880                                            ;sectors per disk
   359                                  EBOOTDISKBYTES          equ     (EBOOTSECTORBYTES*EBOOTDISKSECTORS)             ;bytes per disk
   360                                  EBOOTFATBASE            equ     (EBOOTSTACKTOP+EBOOTSECTORBYTES)                ;offset of FAT I/O buffer rel to DS
   361                                  EBOOTMAXTRIES           equ     5                                               ;max read retries
   362                                  ;-----------------------------------------------------------------------------------------------------------------------
   363                                  ;       Console Constants                                                       ECON...
   364                                  ;-----------------------------------------------------------------------------------------------------------------------
   365                                  ECONCOLS                equ     80                                              ;columns per row
   366                                  ECONROWS                equ     24                                              ;console rows
   367                                  ECONOIAROW              equ     24                                              ;operator information area row
   368                                  ECONCOLBYTES            equ     2                                               ;bytes per column
   369                                  ECONROWBYTES            equ     (ECONCOLS*ECONCOLBYTES)                         ;bytes per row
   370                                  ECONROWDWORDS           equ     (ECONROWBYTES/4)                                ;double-words per row
   371                                  ECONCLEARDWORD          equ     007200720h                                      ;attribute and ASCII space
   372                                  ECONOIADWORD            equ     070207020h                                      ;attribute and ASCII space
   373                                  ;-----------------------------------------------------------------------------------------------------------------------
   374                                  ;       Global Descriptor Table (GDT) Selectors                                 ESEL...
   375                                  ;-----------------------------------------------------------------------------------------------------------------------
   376                                  EGDTOSDATA              equ     018h                                            ;kernel data selector
   377                                  EGDTCGA                 equ     020h                                            ;cga video selector
   378                                  EGDTLOADERCODE          equ     030h                                            ;loader code selector
   379                                  EGDTOSCODE              equ     048h                                            ;os kernel code selector
   380                                  EGDTLOADERLDT           equ     050h                                            ;loader local descriptor table selector
   381                                  EGDTLOADERTSS           equ     058h                                            ;loader task state segment selector
   382                                  EGDTCONSOLELDT          equ     060h                                            ;console local descriptor table selector
   383                                  EGDTCONSOLETSS          equ     068h                                            ;console task state segment selector
   384                                  ;-----------------------------------------------------------------------------------------------------------------------
   385                                  ;       Keyboard Flags                                                          EKEYF...
   386                                  ;-----------------------------------------------------------------------------------------------------------------------
   387                                  EKEYFCTRLLEFT           equ     00000001b                                       ;left control
   388                                  EKEYFSHIFTLEFT          equ     00000010b                                       ;left shift
   389                                  EKEYFALTLEFT            equ     00000100b                                       ;left alt
   390                                  EKEYFCTRLRIGHT          equ     00001000b                                       ;right control
   391                                  EKEYFSHIFTRIGHT         equ     00010000b                                       ;right shift
   392                                  EKEYFSHIFT              equ     00010010b                                       ;left or right shift
   393                                  EKEYFALTRIGHT           equ     00100000b                                       ;right alt
   394                                  EKEYFLOCKSCROLL         equ     00000001b                                       ;scroll-lock flag
   395                                  EKEYFLOCKNUM            equ     00000010b                                       ;num-lock flag
   396                                  EKEYFLOCKCAPS           equ     00000100b                                       ;cap-lock flag
   397                                  EKEYFTIMEOUT            equ     10000000b                                       ;controller timeout
   398                                  ;-----------------------------------------------------------------------------------------------------------------------
   399                                  ;       Kernel Constants                                                        EKRN...
   400                                  ;-----------------------------------------------------------------------------------------------------------------------
   401                                  EKRNCODEBASE            equ     1000h                                           ;kernel base address (0000:1000)
   402                                  EKRNCODESEG             equ     (EKRNCODEBASE >> 4)                             ;kernel code segment (0100:0000)
   403                                  EKRNCODELEN             equ     5000h                                           ;kernel code size (1000h to 6000h)
   404                                  EKRNCODESRCADR          equ     500h                                            ;kernel code offset to loader DS:
   405                                  ;-----------------------------------------------------------------------------------------------------------------------
   406                                  ;       Local Descriptor Table (LDT) Selectors                                  ESEL...
   407                                  ;-----------------------------------------------------------------------------------------------------------------------
   408                                  ELDTMQ                  equ     02Ch                                            ;console task message queue
   409                                  ;-----------------------------------------------------------------------------------------------------------------------
   410                                  ;       Message Identifiers                                                     EMSG...
   411                                  ;-----------------------------------------------------------------------------------------------------------------------
   412                                  EMSGKEYDOWN             equ     041000000h                                      ;key-down
   413                                  EMSGKEYUP               equ     041010000h                                      ;key-up
   414                                  EMSGKEYCHAR             equ     041020000h                                      ;character
   415                                  ;=======================================================================================================================
   416                                  ;
   417                                  ;       Structures
   418                                  ;
   419                                  ;=======================================================================================================================
   420                                  ;-----------------------------------------------------------------------------------------------------------------------
   421                                  ;
   422                                  ;       MQUEUE
   423                                  ;
   424                                  ;       The MQUEUE structure maps memory used for a message queue.
   425                                  ;
   426                                  ;-----------------------------------------------------------------------------------------------------------------------
   427                                  struc                   MQUEUE
   428 00000000 <res 00000004>          MQHead                  resd    1                                               ;000 head ptr
   429 00000004 <res 00000004>          MQTail                  resd    1                                               ;004 tail ptr
   430 00000008 <res 000003F8>          MQData                  resd    254                                             ;message queue
   431                                  endstruc
   432                                  ;-----------------------------------------------------------------------------------------------------------------------
   433                                  ;
   434                                  ;       OSDATA
   435                                  ;
   436                                  ;       The OSDATA structure maps low-memory addresses used by the BIOS and the OS. Areas that may be in use by DOS or
   437                                  ;       other host operating systems that may be running when this OS is launched are avoided.
   438                                  ;
   439                                  ;-----------------------------------------------------------------------------------------------------------------------
   440                                  struc                   OSDATA
   441 00000000 <res 00000400>                                  resb    0400h                                           ;000 real mode interrupt vectors
   442 00000400 <res 00000002>                                  resw    1                                               ;400 COM1 port address
   443 00000402 <res 00000002>                                  resw    1                                               ;402 COM2 port address
   444 00000404 <res 00000002>                                  resw    1                                               ;404 COM3 port address
   445 00000406 <res 00000002>                                  resw    1                                               ;406 COM4 port address
   446 00000408 <res 00000002>                                  resw    1                                               ;408 LPT1 port address
   447 0000040A <res 00000002>                                  resw    1                                               ;40a LPT2 port address
   448 0000040C <res 00000002>                                  resw    1                                               ;40c LPT3 port address
   449 0000040E <res 00000002>                                  resw    1                                               ;40e LPT4 port address
   450 00000410 <res 00000002>                                  resb    2                                               ;410 equipment list flags
   451 00000412 <res 00000001>                                  resb    1                                               ;412 errors in PCjr infrared keybd link
   452 00000413 <res 00000002>                                  resw    1                                               ;413 memory size (kb) INT 12h
   453 00000415 <res 00000001>                                  resb    1                                               ;415 mfr error test scratchpad
   454 00000416 <res 00000001>                                  resb    1                                               ;416 PS/2 BIOS control flags
   455 00000417 <res 00000001>                                  resb    1                                               ;417 keyboard flag byte 0
   456 00000418 <res 00000001>                                  resb    1                                               ;418 keyboard flag byte 1
   457 00000419 <res 00000001>                                  resb    1                                               ;419 alternate keypad entry
   458 0000041A <res 00000002>                                  resw    1                                               ;41a keyboard buffer head offset
   459 0000041C <res 00000002>                                  resw    1                                               ;41c keyboard buffer tail offset
   460 0000041E <res 00000020>                                  resb    32                                              ;41e keyboard buffer
   461 0000043E <res 00000001>          wbFDCStatus             resb    1                                               ;43e drive recalibration status
   462 0000043F <res 00000001>          wbFDCControl            resb    1                                               ;43f FDC motor status/control byte
   463 00000440 <res 00000001>          wbFDCMotor              resb    1                                               ;440 FDC motor timeout byte
   464 00000441 <res 00000001>                                  resb    1                                               ;441 status of last diskette operation
   465 00000442 <res 00000007>                                  resb    7                                               ;442 NEC diskette controller status
   466 00000449 <res 00000001>                                  resb    1                                               ;449 current video mode
   467 0000044A <res 00000002>                                  resw    1                                               ;44a screen columns
   468 0000044C <res 00000002>                                  resw    1                                               ;44c video regen buffer size
   469 0000044E <res 00000002>                                  resw    1                                               ;44e current video page offset
   470 00000450 <res 00000010>                                  resw    8                                               ;450 cursor postions of pages 1-8
   471 00000460 <res 00000001>                                  resb    1                                               ;460 cursor ending scanline
   472 00000461 <res 00000001>                                  resb    1                                               ;461 cursor start scanline
   473 00000462 <res 00000001>                                  resb    1                                               ;462 active display page number
   474 00000463 <res 00000002>                                  resw    1                                               ;463 CRTC base port address
   475 00000465 <res 00000001>                                  resb    1                                               ;465 CRT mode control register value
   476 00000466 <res 00000001>                                  resb    1                                               ;466 CGA current color palette mask
   477 00000467 <res 00000002>                                  resw    1                                               ;467 CS:IP for 286 return from PROT MODE
   478 00000469 <res 00000003>                                  resb    3                                               ;469 vague
   479 0000046C <res 00000004>          wdClockTicks            resd    1                                               ;46c clock ticks
   480 00000470 <res 00000001>          wbClockDays             resb    1                                               ;470 clock days
   481 00000471 <res 00000001>                                  resb    1                                               ;471 bios break flag
   482 00000472 <res 00000002>                                  resw    1                                               ;472 soft reset
   483 00000474 <res 00000001>                                  resb    1                                               ;474 last hard disk operation status
   484 00000475 <res 00000001>                                  resb    1                                               ;475 hard disks attached
   485 00000476 <res 00000001>                                  resb    1                                               ;476 XT fised disk drive control byte
   486 00000477 <res 00000001>                                  resb    1                                               ;477 port offset to current fixed disk adapter
   487 00000478 <res 00000004>                                  resb    4                                               ;478 LPT timeout values
   488 0000047C <res 00000004>                                  resb    4                                               ;47c COM timeout values
   489 00000480 <res 00000002>                                  resw    1                                               ;480 keyboard buffer start offset
   490 00000482 <res 00000002>                                  resw    1                                               ;482 keyboard buffer end offset
   491 00000484 <res 00000001>                                  resb    1                                               ;484 Rows on screen less 1 (EGA+)
   492 00000485 <res 00000001>                                  resb    1                                               ;485 point height of character matrix (EGA+)
   493 00000486 <res 00000001>                                  resb    1                                               ;486 PC Jr initial keybd delay
   494 00000487 <res 00000001>                                  resb    1                                               ;487 EGA+ video mode ops
   495 00000488 <res 00000001>                                  resb    1                                               ;488 EGA feature bit switches
   496 00000489 <res 00000001>                                  resb    1                                               ;489 VGA video display data area
   497 0000048A <res 00000001>                                  resb    1                                               ;48a EGA+ display combination code
   498 0000048B <res 00000001>                                  resb    1                                               ;48b last diskette data rate selected
   499 0000048C <res 00000001>                                  resb    1                                               ;48c hard disk status from controller
   500 0000048D <res 00000001>                                  resb    1                                               ;48d hard disk error from controller
   501 0000048E <res 00000001>                                  resb    1                                               ;48e hard disk interrupt control flag
   502 0000048F <res 00000001>                                  resb    1                                               ;48f combination hard/floppy disk card
   503 00000490 <res 00000004>                                  resb    4                                               ;490 drive 0,1,2,3 media state
   504 00000494 <res 00000001>                                  resb    1                                               ;494 track currently seeked to on drive 0
   505 00000495 <res 00000001>                                  resb    1                                               ;495 track currently seeked to on drive 1
   506 00000496 <res 00000001>                                  resb    1                                               ;496 keyboard mode/type
   507 00000497 <res 00000001>                                  resb    1                                               ;497 keyboard LED flags
   508 00000498 <res 00000004>                                  resd    1                                               ;498 pointer to user wait complete flag
   509 0000049C <res 00000004>                                  resd    1                                               ;49c user wait time-out value in microseconds
   510 000004A0 <res 00000001>                                  resb    1                                               ;4a0 RTC wait function flag
   511 000004A1 <res 00000001>                                  resb    1                                               ;4a1 LANA DMA channel flags
   512 000004A2 <res 00000002>                                  resb    2                                               ;4a2 status of LANA 0,1
   513 000004A4 <res 00000004>                                  resd    1                                               ;4a4 saved hard disk interrupt vector
   514 000004A8 <res 00000004>                                  resd    1                                               ;4a8 BIOS video save/override pointer table addr
   515 000004AC <res 00000008>                                  resb    8                                               ;4ac reserved
   516 000004B4 <res 00000001>                                  resb    1                                               ;4b4 keyboard NMI control flags
   517 000004B5 <res 00000004>                                  resd    1                                               ;4b5 keyboard break pending flags
   518 000004B9 <res 00000001>                                  resb    1                                               ;4b9 Port 60 single byte queue
   519 000004BA <res 00000001>                                  resb    1                                               ;4ba scan code of last key
   520 000004BB <res 00000001>                                  resb    1                                               ;4bb NMI buffer head pointer
   521 000004BC <res 00000001>                                  resb    1                                               ;4bc NMI buffer tail pointer
   522 000004BD <res 00000010>                                  resb    16                                              ;4bd NMI scan code buffer
   523 000004CD <res 00000001>                                  resb    1                                               ;4cd unknown
   524 000004CE <res 00000002>                                  resw    1                                               ;4de day counter
   525 000004D0 <res 00000020>                                  resb    32                                              ;4d0 unknown
   526 000004F0 <res 00000010>                                  resb    16                                              ;4f0 intra-app comm area
   527 00000500 <res 00000001>                                  resb    1                                               ;500 print-screen status byte
   528 00000501 <res 00000003>                                  resb    3                                               ;501 used by BASIC
   529 00000504 <res 00000001>                                  resb    1                                               ;504 DOS single diskette mode
   530 00000505 <res 0000000A>                                  resb    10                                              ;505 POST work area
   531 0000050F <res 00000001>                                  resb    1                                               ;50f BASIC shell flag
   532 00000510 <res 00000002>                                  resw    1                                               ;510 BASIC default DS (DEF SEG)
   533 00000512 <res 00000004>                                  resd    1                                               ;512 BASIC INT 1C interrupt handler
   534 00000516 <res 00000004>                                  resd    1                                               ;516 BASIC INT 23 interrupt handler
   535 0000051A <res 00000004>                                  resd    1                                               ;51a BASIC INT 24 interrupt handler
   536 0000051E <res 00000002>                                  resw    1                                               ;51e unknown
   537 00000520 <res 00000002>                                  resw    1                                               ;520 DOS dynamic storage
   538 00000522 <res 0000000E>                                  resb    14                                              ;522 DOS diskette initialization table (INT 1e)
   539 00000530 <res 00000004>                                  resb    4                                               ;530 MODE command
   540 00000534 <res 000001CC>                                  resb    460                                             ;534 unused
   541 00000700 <res 00000100>                                  resb    256                                             ;700 i/o drivers from io.sys/ibmbio.com
   542                                  ;-----------------------------------------------------------------------------------------------------------------------
   543                                  ;
   544                                  ;       Kernel Variables                                                        @disk: N/A      @mem: 000800
   545                                  ;
   546                                  ;       Kernel variables may be accessed by interrupts or by the initial task (Console).
   547                                  ;
   548                                  ;-----------------------------------------------------------------------------------------------------------------------
   549                                  ECONDATA                equ     ($)
   550 00000800 <res 00000001>          wbConsoleColumn         resb    1                                               ;console column
   551 00000801 <res 00000001>          wbConsoleRow            resb    1                                               ;console row
   552 00000802 <res 00000001>          wbConsoleShift          resb    1                                               ;console shift flags
   553 00000803 <res 00000001>          wbConsoleLock           resb    1                                               ;console lock flags
   554 00000804 <res 00000001>          wbConsoleStatus         resb    1                                               ;controller status
   555 00000805 <res 00000001>          wbConsoleScan0          resb    1                                               ;scan code
   556 00000806 <res 00000001>          wbConsoleScan1          resb    1                                               ;scan code
   557 00000807 <res 00000001>          wbConsoleScan2          resb    1                                               ;scan code
   558 00000808 <res 00000001>          wbConsoleScan3          resb    1                                               ;scan code
   559 00000809 <res 00000001>          wbConsoleScan4          resb    1                                               ;scan code
   560 0000080A <res 00000001>          wbConsoleScan5          resb    1                                               ;scan code
   561 0000080B <res 00000001>          wbConsoleChar           resb    1                                               ;ASCII code
   562 0000080C <res 00000050>          wzConsoleInBuffer       resb    80                                              ;command input buffer
   563 0000085C <res 00000050>          wzConsoleToken          resb    80                                              ;token buffer
   564                                  ECONDATALEN             equ     ($-ECONDATA)                                    ;size of console data area
   565                                  ;-----------------------------------------------------------------------------------------------------------------------
   566                                  ;
   567                                  ;       End of OS Variables
   568                                  ;
   569                                  ;-----------------------------------------------------------------------------------------------------------------------
   570                                  endstruc
   571                                  ;-----------------------------------------------------------------------------------------------------------------------
   572                                  ;
   573                                  ;       Macros
   574                                  ;
   575                                  ;       These macros are used to assist in defining descriptor tables and interrupt table offsets.
   576                                  ;
   577                                  ;-----------------------------------------------------------------------------------------------------------------------
   578                                  %macro                  mint    1
   579                                  _%1                     equ     ($-$$) / EX86DESCLEN
   580                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCINT << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   581                                  %endmacro
   582                                  %macro                  mtrap   1
   583                                  _%1                     equ     ($-$$) / EX86DESCLEN
   584                                                          dq      ((?%1 >> 16) << 32) | (EX86ACCTRAP << 40) | ((EGDTOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   585                                  %endmacro
   586                                  %macro                  menter  1
   587                                  ?%1                     equ     ($-$$)
   588                                  %endmacro
   589                                  %macro                  tsvce   1
   590                                  e%1                     equ     ($-tsvc)/4
   591                                                          dd      %1
   592                                  %endmacro
   593                                  %ifdef BUILDBOOT
   594                                  ;=======================================================================================================================
   595                                  ;
   596                                  ;       Boot Sector                                                             @disk: 000000   @mem: 007c00
   597                                  ;
   598                                  ;       The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   599                                  ;       control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   600                                  ;       system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   601                                  ;       of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   602                                  ;
   603                                  ;       The "cpu" directive limits emitted code to those instructions supported by the most primitive processor
   604                                  ;       we expect to ever execute our code. The "vstart" parameter indicates addressability of symbols so as to
   605                                  ;       emulate the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   606                                  ;       we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   607                                  ;       immediately followed by a disk parameter table.
   608                                  ;
   609                                  ;=======================================================================================================================
   610                                                          cpu     8086                                            ;assume minimal CPU
   611                                  section                 boot    vstart=0100h                                    ;emulate .COM (CS,DS,ES=PSP) addressing
   612                                                          bits    16                                              ;16-bit code at power-up
   613                                  %ifdef BUILDPREP
   614                                  Boot                    jmp     word Prep                                       ;jump to preparation code
   615                                  %else
   616 00000000 E91B00                  Boot                    jmp     word Boot.10                                    ;jump over parameter table
   617                                  %endif
   618                                  ;-----------------------------------------------------------------------------------------------------------------------
   619                                  ;
   620                                  ;       Disk Parameter Table
   621                                  ;
   622                                  ;       The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   623                                  ;       3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   624                                  ;
   625                                  ;-----------------------------------------------------------------------------------------------------------------------
   626 00000003 437573746F6D4F53                                db      "CustomOS"                                      ;eight-byte label
   627 0000000B 0002                    cwSectorBytes           dw      EBOOTSECTORBYTES                                ;bytes per sector
   628 0000000D 01                      cbClusterSectors        db      1                                               ;sectors per cluster
   629 0000000E 0100                    cwReservedSectors       dw      1                                               ;reserved sectors
   630 00000010 02                      cbFatCount              db      2                                               ;file allocation table copies
   631 00000011 E000                    cwDirEntries            dw      EBOOTDIRENTRIES                                 ;max directory entries
   632 00000013 400B                    cwDiskSectors           dw      EBOOTDISKSECTORS                                ;sectors per disk
   633 00000015 F0                      cbDiskType              db      0F0h                                            ;1.44MB
   634 00000016 0900                    cwFatSectors            dw      9                                               ;sectors per FAT copy
   635                                  cbTrackSectors          equ     $                                               ;sectors per track (as byte)
   636 00000018 1200                    cwTrackSectors          dw      18                                              ;sectors per track (as word)
   637 0000001A 0200                    cwDiskSides             dw      2                                               ;sides per disk
   638 0000001C 0000                    cwSpecialSectors        dw      0                                               ;special sectors
   639                                  ;
   640                                  ;       BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   641                                  ;       end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   642                                  ;       is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   643                                  ;       first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   644                                  ;       given several possible starting values for CS:IP.
   645                                  ;
   646                                                                                                                  ;CS:IP   0:7c00 700:c00 7c0:0
   647 0000001E E80000                  Boot.10                 call    word .20                                        ;[ESP] =   7c21     c21    21
   648                                  .@20                    equ     $-$$                                            ;.@20 = 021h
   649 00000021 58                      .20                     pop     ax                                              ;AX =      7c21     c21    21
   650 00000022 83E821                                          sub     ax,.@20                                         ;AX =      7c00     c00     0
   651 00000025 B104                                            mov     cl,4                                            ;shift count
   652 00000027 D3E8                                            shr     ax,cl                                           ;AX =       7c0      c0     0
   653 00000029 8CCB                                            mov     bx,cs                                           ;BX =         0     700   7c0
   654 0000002B 01C3                                            add     bx,ax                                           ;BX =       7c0     7c0   7c0
   655                                  ;
   656                                  ;       Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   657                                  ;       registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   658                                  ;       the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   659                                  ;       the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   660                                  ;       parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   661                                  ;       buffer. This leaves 256 bytes of usable stack from 7b0:0 to 7b0:100.
   662                                  ;
   663 0000002D 83EB10                                          sub     bx,16                                           ;BX = 07b0
   664 00000030 8EDB                                            mov     ds,bx                                           ;DS = 07b0 = psp
   665 00000032 8EC3                                            mov     es,bx                                           ;ES = 07b0 = psp
   666 00000034 8ED3                                            mov     ss,bx                                           ;SS = 07b0 = psp (ints disabled)
   667 00000036 BC0001                                          mov     sp,EBOOTSTACKTOP                                ;SP = 0100       (ints enabled)
   668                                  ;
   669                                  ;       Our boot addressability is now set up according to the following diagram.
   670                                  ;
   671                                  ;       DS,ES,SS -----> 007b00  +-----------------------------------------------+ DS:0000
   672                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
   673                                  ;                               |  256 = 100h bytes                             |
   674                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ DS:0100  07b0:0100
   675                                  ;                               |  Boot Sector (vstart=0100h)                   |
   676                                  ;                               |  1 sector = 512 = 200h bytes                  |
   677                                  ;                       007e00  +-----------------------------------------------+ DS:0300
   678                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
   679                                  ;                               |  9x512-byte sectors = 4,608 = 1200h bytes     |
   680                                  ;                       009000  +-----------------------------------------------+ DS:1500  08f0:0100
   681                                  ;                               |  Directory Sector Buffer & Kernel Load Area   |
   682                                  ;                               |  2 sectors = 1024 = 400h bytes
   683                                  ;                       009400  +-----------------------------------------------+ DS:1900
   684                                  ;
   685                                  ;       On entry, DL indicates the drive being booted from.
   686                                  ;
   687 00000039 8816[F801]                                      mov     [wbDrive],dl                                    ;[wbDrive] = drive being booted from
   688                                  ;
   689                                  ;       Compute directory i/o buffer address.
   690                                  ;
   691 0000003D A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors
   692 00000040 F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = 0000:1200 = FAT bytes
   693 00000044 050003                                          add     ax,EBOOTFATBASE                                 ;AX = 1500 = end of FAT buffer
   694 00000047 A3[EC01]                                        mov     [wwDirBuffer],ax                                ;[wwDirBuffer] = 1500
   695                                  ;
   696                                  ;       Compute segment where os.com will be loaded.
   697                                  ;
   698 0000004A D3E8                                            shr     ax,cl                                           ;AX = 0150
   699 0000004C 01D8                                            add     ax,bx                                           ;AX = 0150 + 07b0 = 0900
   700 0000004E 83E810                                          sub     ax,16                                           ;AX = 08f0
   701 00000051 A3[3F01]                                        mov     [wwLoadSegment],ax                              ;[wwLoadSegment] = 08f0
   702                                  ;
   703                                  ;       Set the video mode to 80 column, 25 row, text.
   704                                  ;
   705 00000054 B80300                                          mov     ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80           ;set mode function, 80x25 text mode
   706 00000057 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   707                                  ;
   708                                  ;       Write a message to the console so we know we have our addressability established.
   709                                  ;
   710 00000059 BE[C501]                                        mov     si,czLoadMsg                                    ;loading message
   711 0000005C E84B01                                          call    BootPrint                                       ;display loader message
   712                                  ;
   713                                  ;       Initialize the number of directory sectors to search.
   714                                  ;
   715 0000005F A1[1100]                                        mov     ax,[cwDirEntries]                               ;AX = 224 = max dir entries
   716 00000062 A3[EE01]                                        mov     [wwEntriesLeft],ax                              ;[wwEntriesLeft] = 224
   717                                  ;
   718                                  ;       Compute number of directory sectors and initialize overhead count.
   719                                  ;
   720 00000065 89C1                                            mov     cx,ax                                           ;CX = 00e0 = 224 entries
   721 00000067 F726[B801]                                      mul     word [cwEntryLen]                               ;DX:AX = 224 * 32 = 7168
   722 0000006B F736[0B00]                                      div     word [cwSectorBytes]                            ;AX = 7168 / 512 = 14 = dir sectors
   723 0000006F A3[F001]                                        mov     [wwOverhead],ax                                 ;[wwOverhead] = 000e
   724                                  ;
   725                                  ;       Compute directory entries per sector.
   726                                  ;
   727 00000072 91                                              xchg    ax,cx                                           ;DX:AX = 0:00e0, CX = 0000e
   728 00000073 F7F1                                            div     cx                                              ;AX = 0010 = entries per dir sector
   729 00000075 A3[F201]                                        mov     [wwSectorEntries],ax                            ;[wwSectorEntries] = 0010
   730                                  ;
   731                                  ;       Compute first logical directory sector and update overhead count.
   732                                  ;
   733 00000078 A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009 = FAT sectors per copy
   734 0000007B F626[1000]                                      mul     byte [cbFatCount]                               ;AX = 0012 = FAT sectors
   735 0000007F 0306[0E00]                                      add     ax,[cwReservedSectors]                          ;AX = 0013 = FAT plus reserved
   736 00000083 0306[1C00]                                      add     ax,[cwSpecialSectors]                           ;AX = 0013 = FAT + reserved + special
   737 00000087 A3[F401]                                        mov     [wwLogicalSector],ax                            ;[wwLogicalSector] = 0013
   738 0000008A 0106[F001]                                      add     [wwOverhead],ax                                 ;[wwOverhead] = 0021 = res+spec+FAT+dir
   739                                  ;
   740                                  ;       Read directory sector.
   741                                  ;
   742 0000008E B001                    .30                     mov     al,1                                            ;sector count
   743 00000090 A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 01
   744 00000093 8B1E[EC01]                                      mov     bx,[wwDirBuffer]                                ;BX = 1500
   745 00000097 E8A700                                          call    ReadSector                                      ;read sector into es:bx
   746                                  ;
   747                                  ;       Setup variables to search this directory sector.
   748                                  ;
   749 0000009A A1[EE01]                                        mov     ax,[wwEntriesLeft]                              ;directory entries to search
   750 0000009D 3B06[F201]                                      cmp     ax,[wwSectorEntries]                            ;need to search more sectors?
   751 000000A1 7603                                            jna     .40                                             ;no, continue
   752 000000A3 A1[F201]                                        mov     ax,[wwSectorEntries]                            ;yes, limit search to sector
   753 000000A6 2906[EE01]              .40                     sub     [wwEntriesLeft],ax                              ;update entries left to searh
   754 000000AA BE[BA01]                                        mov     si,cbKernelProgram                              ;program name
   755 000000AD 8B3E[EC01]                                      mov     di,[wwDirBuffer]                                ;DI = 1500
   756                                  ;
   757                                  ;       Loop through directory sectors searching for kernel program.
   758                                  ;
   759 000000B1 56                      .50                     push    si                                              ;save kernel name address
   760 000000B2 57                                              push    di                                              ;save dir i/o buffer address
   761 000000B3 B90B00                                          mov     cx,11                                           ;length of 8+3 name
   762 000000B6 FC                                              cld                                                     ;forward strings
   763 000000B7 F3A6                                            repe    cmpsb                                           ;compare entry name
   764 000000B9 5F                                              pop     di                                              ;restore dir i/o buffer address
   765 000000BA 5E                                              pop     si                                              ;restore kernel name address
   766 000000BB 7418                                            je      .60                                             ;exit loop if found
   767 000000BD 033E[B801]                                      add     di,[cwEntryLen]                                 ;point to next dir entry
   768 000000C1 48                                              dec     ax                                              ;decrement remaining entries
   769 000000C2 75ED                                            jnz     .50                                             ;next entry
   770                                  ;
   771                                  ;       Repeat search if we are not at the end of the directory.
   772                                  ;
   773 000000C4 FF06[F401]                                      inc     word [wwLogicalSector]                          ;increment logical sector
   774 000000C8 833E[EE01]00                                    cmp     word [wwEntriesLeft],0                          ;done with directory?
   775 000000CD 75BF                                            jne     .30                                             ;no, get next sector
   776 000000CF BE[E001]                                        mov     si,czNoKernel                                   ;missing kernel message
   777 000000D2 E9C000                                          jmp     BootExit                                        ;display message and exit
   778                                  ;
   779                                  ;       If we find the kernel program in the directory, read the FAT.
   780                                  ;
   781 000000D5 A1[0E00]                .60                     mov     ax,[cwReservedSectors]                          ;AX = 0001
   782 000000D8 A3[F401]                                        mov     [wwLogicalSector],ax                            ;start past boot sector
   783 000000DB A1[1600]                                        mov     ax,[cwFatSectors]                               ;AX = 0009
   784 000000DE A2[F601]                                        mov     [wbReadCount],al                                ;[wbReadCount] = 09
   785 000000E1 BB0003                                          mov     bx,EBOOTFATBASE                                 ;BX = 0300
   786 000000E4 E85A00                                          call    ReadSector                                      ;read FAT into buffer
   787                                  ;
   788                                  ;       Get the starting cluster of the kernel program and target address.
   789                                  ;
   790 000000E7 8B451A                                          mov     ax,[di+26]                                      ;AX = starting cluster of file
   791 000000EA C41E[3D01]                                      les     bx,[wwLoadOffset]                               ;ES:BX = kernel load add (08f0:0100)
   792                                  ;
   793                                  ;       Read each program cluster into RAM.
   794                                  ;
   795 000000EE 50                      .70                     push    ax                                              ;save cluster nbr
   796 000000EF 83E802                                          sub     ax,2                                            ;AX = cluster nbr base 0
   797 000000F2 8A0E[0D00]                                      mov     cl,[cbClusterSectors]                           ;CL = sectors per cluster
   798 000000F6 880E[F601]                                      mov     [wbReadCount],cl                                ;save sectors to read
   799 000000FA 30ED                                            xor     ch,ch                                           ;CX = sectors per cluster
   800 000000FC F7E1                                            mul     cx                                              ;DX:AX = logical cluster sector
   801 000000FE 0306[F001]                                      add     ax,[wwOverhead]                                 ;AX = kernel sector nbr
   802 00000102 A3[F401]                                        mov     [wwLogicalSector],ax                            ;save logical sector nbr
   803 00000105 E83900                                          call    ReadSector                                      ;read sectors into ES:BX
   804                                  ;
   805                                  ;       Update buffer pointer for next cluster.
   806                                  ;
   807 00000108 A0[0D00]                                        mov     al,[cbClusterSectors]                           ;AL = sectors per cluster
   808 0000010B 30E4                                            xor     ah,ah                                           ;AX = sectors per cluster
   809 0000010D F726[0B00]                                      mul     word [cwSectorBytes]                            ;DX:AX = cluster bytes
   810 00000111 01C3                                            add     bx,ax                                           ;BX = next cluster target address
   811 00000113 58                                              pop     ax                                              ;AX = restore cluster nbr
   812                                  ;
   813                                  ;       Compute next cluster number.
   814                                  ;
   815 00000114 89C1                                            mov     cx,ax                                           ;CX = cluster nbr
   816 00000116 89C7                                            mov     di,ax                                           ;DI = cluster nbr
   817 00000118 D1E8                                            shr     ax,1                                            ;AX = cluster/2
   818 0000011A 89C2                                            mov     dx,ax                                           ;DX = cluster/2
   819 0000011C 01D0                                            add     ax,dx                                           ;AX = 2*(cluster/2)
   820 0000011E 01D0                                            add     ax,dx                                           ;AX = 3*(cluster/2)
   821 00000120 83E701                                          and     di,1                                            ;get low bit
   822 00000123 01C7                                            add     di,ax                                           ;add one if cluster is odd
   823 00000125 81C70003                                        add     di,EBOOTFATBASE                                 ;add FAT buffer address
   824 00000129 8B05                                            mov     ax,[di]                                         ;get cluster bytes
   825                                  ;
   826                                  ;       Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   827                                  ;
   828 0000012B F6C101                                          test    cl,1                                            ;is cluster odd?
   829 0000012E 7404                                            jz      .80                                             ;no, skip ahead
   830 00000130 B104                                            mov     cl,4                                            ;shift count
   831 00000132 D3E8                                            shr     ax,cl                                           ;shift nybble low
   832 00000134 25FF0F                  .80                     and     ax,0FFFh                                        ;mask for 24 bits; next cluster nbr
   833 00000137 3DFF0F                                          cmp     ax,0FFFh                                        ;end of chain?
   834 0000013A 75B2                                            jne     .70                                             ;no, continue
   835                                  ;
   836                                  ;       Transfer control to the operating system program.
   837                                  ;
   838 0000013C EA                                              db      0EAh                                            ;jmp seg:offset
   839 0000013D 0001                    wwLoadOffset            dw      0100h                                           ;kernel entry offset
   840 0000013F F008                    wwLoadSegment           dw      08F0h                                           ;kernel entry segment (computed)
   841                                  ;
   842                                  ;       Read [wbReadCount] disk sectors from [wwLogicalSector] into ES:BX.
   843                                  ;
   844 00000141 A1[1800]                ReadSector              mov     ax,[cwTrackSectors]                             ;AX = sectors per track
   845 00000144 F726[1A00]                                      mul     word [cwDiskSides]                              ;DX:AX = sectors per cylinder
   846 00000148 89C1                                            mov     cx,ax                                           ;CX = sectors per cylinder
   847 0000014A A1[F401]                                        mov     ax,[wwLogicalSector]                            ;DX:AX = logical sector
   848 0000014D F7F1                                            div     cx                                              ;AX = cylinder; DX = cyl sector
   849 0000014F A2[FB01]                                        mov     [wbTrack],al                                    ;[wbTrack] = cylinder
   850 00000152 89D0                                            mov     ax,dx                                           ;AX = cyl sector
   851 00000154 F636[1800]                                      div     byte [cbTrackSectors]                           ;AH = sector, AL = head
   852 00000158 FEC4                                            inc     ah                                              ;AH = sector (1,2,3,...)
   853 0000015A A3[F901]                                        mov     [wbHead],ax                                     ;[wbHead]= head, [wwSectorTrack]= sector
   854                                  ;
   855                                  ;       Try maxtries times to read sector.
   856                                  ;
   857 0000015D B90500                                          mov     cx,EBOOTMAXTRIES                                ;CX = 0005
   858 00000160 53                      .10                     push    bx                                              ;save buffer address
   859 00000161 51                                              push    cx                                              ;save retry count
   860 00000162 8B16[F801]                                      mov     dx,[wwDriveHead]                                ;DH = head, DL = drive
   861 00000166 8B0E[FA01]                                      mov     cx,[wwSectorTrack]                              ;CH = track, CL = sector
   862 0000016A A1[F601]                                        mov     ax,[wwReadCountCommand]                         ;AH = fn., AL = sector count
   863 0000016D CD13                                            int     EBIOSINTDISKETTE                                ;read sector
   864 0000016F 59                                              pop     cx                                              ;restore retry count
   865 00000170 5B                                              pop     bx                                              ;restore buffer address
   866 00000171 7343                                            jnc     BootReturn                                      ;skip ahead if done
   867 00000173 E2EB                                            loop    .10                                             ;retry
   868                                  ;
   869                                  ;       Handle disk error: convert to ASCII and store in error string.
   870                                  ;
   871 00000175 88E0                                            mov     al,ah                                           ;AL = bios error code
   872 00000177 30E4                                            xor     ah,ah                                           ;AX = bios error code
   873 00000179 B210                                            mov     dl,16                                           ;divisor for base 16
   874 0000017B F6F2                                            div     dl                                              ;AL = hi order, AH = lo order
   875 0000017D 0D3030                                          or      ax,03030h                                       ;apply ASCII zone bits
   876 00000180 80FC3A                                          cmp     ah,03Ah                                         ;range test ASCII numeral
   877 00000183 7203                                            jb      .20                                             ;continue if numeral
   878 00000185 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   879 00000188 3C3A                    .20                     cmp     al,03Ah                                         ;range test ASCII numeral
   880 0000018A 7203                                            jb      .30                                             ;continue if numeral
   881 0000018C 80C407                                          add     ah,7                                            ;adjust for ASCII 'A'-'F'
   882 0000018F A3[DD01]                .30                     mov     [wzErrorCode],ax                                ;store ASCII error code
   883 00000192 BE[D201]                                        mov     si,czErrorMsg                                   ;error message address
   884 00000195 E81200                  BootExit                call    BootPrint                                       ;display messge to console
   885                                  ;
   886                                  ;       Wait for a key press.
   887                                  ;
   888 00000198 B401                    .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   889 0000019A CD16                                            int     EBIOSINTKEYBOARD                                ;get keyboard status
   890 0000019C 7504                                            jnz     .20                                             ;continue if key pressed
   891 0000019E FB                                              sti                                                     ;enable maskable interrupts
   892 0000019F F4                                              hlt                                                     ;wait for interrupt
   893 000001A0 EBF6                                            jmp     .10                                             ;repeat
   894                                  ;
   895                                  ;       Reset the system.
   896                                  ;
   897 000001A2 B0FE                    .20                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
   898 000001A4 E664                                            out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
   899 000001A6 FB                      .30                     sti                                                     ;enable maskable interrupts
   900 000001A7 F4                                              hlt                                                     ;stop until reset, int, nmi
   901 000001A8 EBFC                                            jmp     .30                                             ;loop until restart kicks in
   902                                  ;
   903                                  ;       Display text message.
   904                                  ;
   905 000001AA FC                      BootPrint               cld                                                     ;forward strings
   906 000001AB AC                      .10                     lodsb                                                   ;load next byte at DS:SI in AL
   907 000001AC 84C0                                            test    al,al                                           ;end of string?
   908 000001AE 7406                                            jz      BootReturn                                      ;... yes, exit our loop
   909 000001B0 B40E                                            mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
   910 000001B2 CD10                                            int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
   911 000001B4 EBF5                                            jmp     .10                                             ;repeat until done
   912 000001B6 C3                      BootReturn              ret                                                     ;return
   913                                  ;-----------------------------------------------------------------------------------------------------------------------
   914                                  ;
   915                                  ;       Constants
   916                                  ;
   917                                  ;-----------------------------------------------------------------------------------------------------------------------
   918 000001B7 90                                              align   2
   919 000001B8 2000                    cwEntryLen              dw      32                                              ;length of directory entry
   920 000001BA 4F5320202020202043-     cbKernelProgram         db      "OS      COM"                                   ;kernel program name
   920 000001C3 4F4D               
   921 000001C5 4C6F6164696E67204F-     czLoadMsg               db      "Loading OS",13,10,0                            ;loading message
   921 000001CE 530D0A00           
   922 000001D2 4469736B206572726F-     czErrorMsg              db      "Disk error "                                   ;error message
   922 000001DB 7220               
   923 000001DD 202000                  wzErrorCode             db      020h,020h,0                                     ;error code and null terminator
   924 000001E0 4F53206D697373696E-     czNoKernel              db      "OS missing",0                                  ;missing kernel message
   924 000001E9 6700               
   925                                  ;-----------------------------------------------------------------------------------------------------------------------
   926                                  ;
   927                                  ;       Work Areas
   928                                  ;
   929                                  ;-----------------------------------------------------------------------------------------------------------------------
   930 000001EB 90                                              align   2
   931 000001EC 0000                    wwDirBuffer             dw      0                                               ;directory i/o buffer address
   932 000001EE 0000                    wwEntriesLeft           dw      0                                               ;directory entries to search
   933 000001F0 0000                    wwOverhead              dw      0                                               ;overhead sectors
   934 000001F2 0000                    wwSectorEntries         dw      0                                               ;directory entries per sector
   935 000001F4 0000                    wwLogicalSector         dw      0                                               ;current logical sector
   936                                  wwReadCountCommand      equ     $                                               ;read count and command
   937 000001F6 00                      wbReadCount             db      0                                               ;sectors to read
   938 000001F7 02                      cbReadCommand           db      2                                               ;BIOS read disk fn code
   939                                  wwDriveHead             equ     $                                               ;drive, head (word)
   940 000001F8 00                      wbDrive                 db      0                                               ;drive
   941 000001F9 00                      wbHead                  db      0                                               ;head
   942                                  wwSectorTrack           equ     $                                               ;sector, track (word)
   943 000001FA 00                                              db      0                                               ;sector
   944 000001FB 00                      wbTrack                 db      0                                               ;track
   945 000001FC 00<rept>                                        times   510-($-$$) db 0h                                ;zero fill to end of sector
   946 000001FE 55AA                                            db      055h,0AAh                                       ;end of sector signature
   947                                  %endif
   948                                  %ifdef BUILDPREP
   949                                  ;=======================================================================================================================
   950                                  ;
   951                                  ;       Diskette Preparation Code
   952                                  ;
   953                                  ;       This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   954                                  ;       which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   955                                  ;       the OS bootstrap code so that the diskette format parameters are preserved.
   956                                  ;
   957                                  ;=======================================================================================================================
   958                                  ;
   959                                  ;       Query the user to insert a flopppy diskette and press enter or cancel.
   960                                  ;
   961                                  Prep                    mov     si,czPrepMsg10                                  ;starting message address
   962                                                          call    BootPrint                                       ;display message
   963                                  ;
   964                                  ;       Exit if the Escape key is pressed or loop until Enter is pressed.
   965                                  ;
   966                                  .10                     mov     ah,EBIOSFNKEYSTATUS                             ;BIOS keyboard status function
   967                                                          int     EBIOSINTKEYBOARD                                ;get keyboard status
   968                                                          jnz     .20                                             ;continue if key pressed
   969                                                          sti                                                     ;enable interrupts
   970                                                          hlt                                                     ;wait for interrupt
   971                                                          jmp     .10                                             ;repeat
   972                                  .20                     cmp     al,EASCIIRETURN                                 ;Enter key pressed?
   973                                                          je      .30                                             ;yes, branch
   974                                                          cmp     al,EASCIIESCAPE                                 ;Escape key pressed?
   975                                                          jne     .10                                             ;no, repeat
   976                                                          jmp     .120                                            ;yes, exit program
   977                                  ;
   978                                  ;       Display writing-sector message and patch the JMP instruction.
   979                                  ;
   980                                  .30                     mov     si,czPrepMsg12                                  ;writing-sector message address
   981                                                          call    BootPrint                                       ;display message
   982                                                          mov     bx,Boot+1                                       ;address of JMP instruction operand
   983                                                          mov     ax,01Bh                                         ;address past disk parameter table
   984                                                          mov     [bx],ax                                         ;update the JMP instruction
   985                                  ;
   986                                  ;       Try to read the boot sector.
   987                                  ;
   988                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
   989                                  .40                     push    cx                                              ;save remaining tries
   990                                                          mov     bx,wcPrepInBuf                                  ;input buffer address
   991                                                          mov     dx,0                                            ;head zero, drive zero
   992                                                          mov     cx,1                                            ;track zero, sector one
   993                                                          mov     ax,0201h                                        ;read one sector
   994                                                          int     EBIOSINTDISKETTE                                ;attempt the read
   995                                                          pop     cx                                              ;restore remaining retries
   996                                                          jnc     .50                                             ;skip ahead if successful
   997                                                          loop    .40                                             ;try again
   998                                                          mov     si,czPrepMsg20                                  ;read-error message address
   999                                                          jmp     .70                                             ;branch to error routine
  1000                                  ;
  1001                                  ;       Copy diskette parms from input buffer to output buffer.
  1002                                  ;
  1003                                  .50                     mov     si,wcPrepInBuf                                  ;input buffer address
  1004                                                          add     si,11                                           ;skip over JMP and system ID
  1005                                                          mov     di,Boot                                         ;output buffer address
  1006                                                          add     di,11                                           ;skip over JMP and system ID
  1007                                                          mov     cx,19                                           ;length of diskette parameters
  1008                                                          cld                                                     ;forward string copies
  1009                                                          rep     movsb                                           ;copy diskette parameters
  1010                                  ;
  1011                                  ;       Try to write boot sector to diskette.
  1012                                  ;
  1013                                                          mov     cx,EBOOTMAXTRIES                                ;try up to five times
  1014                                  .60                     push    cx                                              ;save remaining tries
  1015                                                          mov     bx,Boot                                         ;output buffer address
  1016                                                          mov     dx,0                                            ;head zero, drive zero
  1017                                                          mov     cx,1                                            ;track zero, sector one
  1018                                                          mov     ax,0301h                                        ;write one sector
  1019                                                          int     EBIOSINTDISKETTE                                ;attempt the write
  1020                                                          pop     cx                                              ;restore remaining retries
  1021                                                          jnc     .100                                            ;skip ahead if successful
  1022                                                          loop    .60                                             ;try again
  1023                                                          mov     si,czPrepMsg30                                  ;write-error message address
  1024                                  ;
  1025                                  ;       Convert the error code to ASCII and display the error message.
  1026                                  ;
  1027                                  .70                     push    ax                                              ;save error code
  1028                                                          mov     al,ah                                           ;copy error code
  1029                                                          mov     ah,0                                            ;AX = error code
  1030                                                          mov     dl,10h                                          ;hexadecimal divisor
  1031                                                          idiv    dl                                              ;AL = hi-order, AH = lo-order
  1032                                                          or      ax,03030h                                       ;add ASCII zone digits
  1033                                                          cmp     ah,03Ah                                         ;AH ASCII numeral?
  1034                                                          jb      .80                                             ;yes, continue
  1035                                                          add     ah,7                                            ;no, make ASCII 'A'-'F'
  1036                                  .80                     cmp     al,03Ah                                         ;ASCII numeral?
  1037                                                          jb      .90                                             ;yes, continue
  1038                                                          add     al,7                                            ;no, make ASCII
  1039                                  .90                     mov     [si+17],ax                                      ;put ASCII error code in message
  1040                                                          call    BootPrint                                       ;write error message
  1041                                                          pop     ax                                              ;restore error code
  1042                                  ;
  1043                                  ;       Display the completion message.
  1044                                  ;
  1045                                  .100                    mov     si,czPrepMsgOK                                  ;assume successful completion
  1046                                                          mov     al,ah                                           ;BIOS return code
  1047                                                          cmp     al,0                                            ;success?
  1048                                                          je      .110                                            ;yes, continue
  1049                                                          mov     si,czPrepMsgErr1                                ;disk parameter error message
  1050                                                          cmp     al,1                                            ;disk parameter error?
  1051                                                          je      .110                                            ;yes, continue
  1052                                                          mov     si,czPrepMsgErr2                                ;address mark not found message
  1053                                                          cmp     al,2                                            ;address mark not found?
  1054                                                          je      .110                                            ;yes, continue
  1055                                                          mov     si,czPrepMsgErr3                                ;protected disk message
  1056                                                          cmp     al,3                                            ;protected disk?
  1057                                                          je      .110                                            ;yes, continue
  1058                                                          mov     si,czPrepMsgErr6                                ;diskette removed message
  1059                                                          cmp     al,6                                            ;diskette removed?
  1060                                                          je      .110                                            ;yes, continue
  1061                                                          mov     si,czPrepMsgErr80                               ;drive timed out message
  1062                                                          cmp     al,80H                                          ;drive timed out?
  1063                                                          je      .110                                            ;yes, continue
  1064                                                          mov     si,czPrepMsgErrXX                               ;unknown error message
  1065                                  .110                    call    BootPrint                                       ;display result message
  1066                                  .120                    mov     ax,04C00H                                       ;terminate with zero result code
  1067                                                          int     021h                                            ;terminate DOS program
  1068                                                          ret                                                     ;return (should not execute)
  1069                                  ;-----------------------------------------------------------------------------------------------------------------------
  1070                                  ;
  1071                                  ;       Diskette Preparation Messages
  1072                                  ;
  1073                                  ;-----------------------------------------------------------------------------------------------------------------------
  1074                                  czPrepMsg10             db      13,10,"CustomOS Boot-Diskette Preparation Program"
  1075                                                          db      13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
  1076                                                          db      13,10
  1077                                                          db      13,10,"This program overwrites the boot sector of a diskette with startup code that"
  1078                                                          db      13,10,"will load the operating system into memory when the computer is restarted."
  1079                                                          db      13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1080                                                          db      13,10,"To exit this program without preparing a diskette, press the Escape key."
  1081                                                          db      13,10,0
  1082                                  czPrepMsg12             db      13,10,"Writing the boot sector to the diskette ..."
  1083                                                          db      13,10,0
  1084                                  czPrepMsg20             db      13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1085                                                          db      13,10,0
  1086                                  czPrepMsg30             db      13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1087                                                          db      13,10,0
  1088                                  czPrepMsgOK             db      13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1089                                                          db      13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1090                                                          db      13,10,0
  1091                                  czPrepMsgErr1           db      13,10,"(01) Invalid Disk Parameter"
  1092                                                          db      13,10,"This is an internal error caused by an invalid value being passed to a system"
  1093                                                          db      13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1094                                                          db      13,10,"and retry."
  1095                                                          db      13,10,0
  1096                                  czPrepMsgErr2           db      13,10,"(02) Address Mark Not Found"
  1097                                                          db      13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1098                                                          db      13,10,"using another diskette."
  1099                                                          db      13,10,0
  1100                                  czPrepMsgErr3           db      13,10,"(03) Protected Disk"
  1101                                                          db      13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1102                                                          db      13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1103                                                          db      13,10,0
  1104                                  czPrepMsgErr6           db      13,10,"(06) Diskette Removed"
  1105                                                          db      13,10,"This error may indicate that the floppy diskette has been removed from the"
  1106                                                          db      13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1107                                                          db      13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1108                                                          db      13,10,"is properly inserted in the diskette drive."
  1109                                                          db      13,10,0
  1110                                  czPrepMsgErr80          db      13,10,"(80) Drive Timed Out"
  1111                                                          db      13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1112                                                          db      13,10,"make sure that the diskette is properly seated in the drive and retry."
  1113                                                          db      13,10,0
  1114                                  czPrepMsgErrXX          db      13,10,"(??) Unknown Error"
  1115                                                          db      13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1116                                                          db      13,10,"your computer's technical reference for a description of this error code."
  1117                                                          db      13,10,0
  1118                                  wcPrepInBuf             equ     $
  1119                                  %endif
  1120                                  %ifdef BUILDDISK
  1121                                  ;=======================================================================================================================
  1122                                  ;
  1123                                  ;       File Allocation Tables
  1124                                  ;
  1125                                  ;       The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1126                                  ;       length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1127                                  ;       OS.COM file here is 5400h bytes in length. The first 400h bytes are the 16-bit loader code. The remaining 5000h
  1128                                  ;       bytes are the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1129                                  ;       sector having 200h bytes. Therefore, our FAT table must reserve 42 clusters for OS.COM. The clusters used by
  1130                                  ;       OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0fffh" to indicate that it is
  1131                                  ;       the last cluster in the chain.
  1132                                  ;
  1133                                  ;       Every three bytes encode two FAT entries as follows:
  1134                                  ;
  1135                                  ;       db      0abh,0cdh,0efh  ;even cluster: 0dabh, odd cluster: 0efch
  1136                                  ;
  1137                                  ;=======================================================================================================================
  1138                                  ;-----------------------------------------------------------------------------------------------------------------------
  1139                                  ;
  1140                                  ;       FAT copy 1                                                              @disk: 000200   @mem: n/a
  1141                                  ;
  1142                                  ;-----------------------------------------------------------------------------------------------------------------------
  1143                                  section                 fat1                                                    ;first copy of FAT
  1144                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1145                                                          db      005h,060h,000h, 007h,080h,000h
  1146                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1147                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1148                                                          db      011h,020h,001h, 013h,040h,001h
  1149                                                          db      015h,060h,001h, 017h,080h,001h
  1150                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1151                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1152                                                          db      021h,020h,002h, 023h,040h,002h
  1153                                                          db      025h,060h,002h, 027h,080h,002h
  1154                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1155                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1156                                  ;-----------------------------------------------------------------------------------------------------------------------
  1157                                  ;
  1158                                  ;       FAT copy 2                                                              @disk: 001400   @mem: n/a
  1159                                  ;
  1160                                  ;-----------------------------------------------------------------------------------------------------------------------
  1161                                  section                 fat2                                                    ;second copy of FAT
  1162                                                          db      0F0h,0FFh,0FFh, 003h,040h,000h
  1163                                                          db      005h,060h,000h, 007h,080h,000h
  1164                                                          db      009h,0A0h,000h, 00Bh,0C0h,000h
  1165                                                          db      00Dh,0E0h,000h, 00Fh,000h,001h
  1166                                                          db      011h,020h,001h, 013h,040h,001h
  1167                                                          db      015h,060h,001h, 017h,080h,001h
  1168                                                          db      019h,0A0h,001h, 01Bh,0C0h,001h
  1169                                                          db      01Dh,0E0h,001h, 01Fh,000h,002h
  1170                                                          db      021h,020h,002h, 023h,040h,002h
  1171                                                          db      025h,060h,002h, 027h,080h,002h
  1172                                                          db      029h,0A0h,002h, 02Bh,0F0h,0FFh
  1173                                                          times   (9*512)-($-$$) db 0                             ;zero fill to end of section
  1174                                  ;-----------------------------------------------------------------------------------------------------------------------
  1175                                  ;
  1176                                  ;       Diskette Directory                                                      @disk: 002600   @mem: n/a
  1177                                  ;
  1178                                  ;       The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1179                                  ;       contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1180                                  ;       copy.
  1181                                  ;
  1182                                  ;-----------------------------------------------------------------------------------------------------------------------
  1183                                  section                 dir                                                     ;diskette directory
  1184                                                          db      "OS      COM"                                   ;file name (must contain spaces)
  1185                                                          db      020h                                            ;attribute (archive bit set)
  1186                                                          times   10 db 0                                         ;unused
  1187                                                          dw      0h                                              ;time
  1188                                                          db      01000001b                                       ;mmm = 10 MOD 8 = 2; ddddd = 1
  1189                                                          db      01001001b                                       ;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1190                                                          dw      2                                               ;first cluster
  1191                                                          dd      05400h                                          ;file size
  1192                                                          times   (EBOOTDIRENTRIES*32)-($-$$) db 0h               ;zero fill to end of section
  1193                                  %endif
  1194                                  %ifdef BUILDCOM
  1195                                  ;=======================================================================================================================
  1196                                  ;
  1197                                  ;       OS.COM
  1198                                  ;
  1199                                  ;       The operating system file is assembled at the start of the data area of the floppy disk image, which
  1200                                  ;       immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1201                                  ;       this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1202                                  ;       and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1203                                  ;       OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1204                                  ;       initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1205                                  ;
  1206                                  ;       Our loader addressability is set up according to the following diagram.
  1207                                  ;
  1208                                  ;       SS -----------> 007b00  +-----------------------------------------------+ SS:0000
  1209                                  ;                               |  Boot Stack & Boot PSP (Unused)               |
  1210                                  ;                               |  256 = 100h bytes                             |
  1211                                  ;       SS:SP --------> 007c00  +-----------------------------------------------+ SS:0100  07b0:0100
  1212                                  ;                               |  Boot Sector (vstart=0100h)                   |
  1213                                  ;                               |  1 sector = 512 = 200h bytes                  |
  1214                                  ;                       007e00  +-----------------------------------------------+
  1215                                  ;                               |  File Allocation Table (FAT) I/O Buffer       |
  1216                                  ;                               |  9 x 512-byte sectors = 4,608 = 1200h bytes   |
  1217                                  ;                               |                                               |
  1218                                  ;       CS,DS,ES -----> 008f00  |  Loader PSP (Unused)                          | DS:0000
  1219                                  ;                               |                                               |
  1220                                  ;       CS:IP --------> 009000  +-----------------------------------------------+ DS:0100  08f0:0100
  1221                                  ;                               |  Loader Code                                  |
  1222                                  ;                               |  2 sectors = 1024 = 400h bytes                |
  1223                                  ;                       009400  +-----------------------------------------------+ DS:0500
  1224                                  ;
  1225                                  ;=======================================================================================================================
  1226                                  ;-----------------------------------------------------------------------------------------------------------------------
  1227                                  ;
  1228                                  ;       OS Loader                                                               @disk: 004200   @mem: 009000
  1229                                  ;
  1230                                  ;       This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1231                                  ;       the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1232                                  ;       The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1233                                  ;       determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1234                                  ;       resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1235                                  ;       starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1236                                  ;       disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1237                                  ;       registers.
  1238                                  ;
  1239                                  ;-----------------------------------------------------------------------------------------------------------------------
  1240                                                          cpu     8086                                            ;assume minimal CPU
  1241                                  section                 loader  vstart=0100h                                    ;use .COM compatible addressing
  1242                                                          bits    16                                              ;this is 16-bit code
  1243                                  Loader                  push    cs                                              ;use the code segment
  1244                                                          pop     ds                                              ;...as our data segment
  1245                                                          push    cs                                              ;use the code segment
  1246                                                          pop     es                                              ;...as our extra segment
  1247                                  ;
  1248                                  ;       Write a message to the console so we know we have our addressability established.
  1249                                  ;
  1250                                                          mov     si,czStartingMsg                                ;starting message
  1251                                                          call    PutTTYString                                    ;display loader message
  1252                                  ;
  1253                                  ;       Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1254                                  ;
  1255                                                          call    GetCPUType                                      ;AL = cpu type
  1256                                                          mov     si,czCPUErrorMsg                                ;loader error message
  1257                                                          cmp     al,3                                            ;80386+?
  1258                                                          jb      LoaderExit                                      ;no, exit with error message
  1259                                                          cpu     386                                             ;allow 80386 instructions
  1260                                                          mov     si,czCPUOKMsg                                   ;cpu ok message
  1261                                                          call    PutTTYString                                    ;display message
  1262                                  ;
  1263                                  ;       Fixup the GDT descriptor for the current (loader) code segment.
  1264                                  ;
  1265                                                          mov     si,EKRNCODESRCADR                               ;GDT offset
  1266                                                          mov     ax,cs                                           ;AX:SI = gdt source
  1267                                                          rol     ax,4                                            ;AX = phys addr bits 11-0,15-12
  1268                                                          mov     cl,al                                           ;CL = phys addr bits 3-0,15-12
  1269                                                          and     al,0F0h                                         ;AL = phys addr bits 11-0
  1270                                                          and     cl,00Fh                                         ;CL = phys addr bits 15-12
  1271                                                          mov     word [si+EGDTLOADERCODE+2],ax                   ;lo-order loader code (0-15)
  1272                                                          mov     byte [si+EGDTLOADERCODE+4],cl                   ;lo-order loader code (16-23)
  1273                                                          mov     si,czGDTOKMsg                                   ;GDT prepared message
  1274                                                          call    PutTTYString                                    ;display message
  1275                                  ;
  1276                                  ;       Move the 32-bit kernel to its appropriate memory location.
  1277                                  ;
  1278                                                          push    EKRNCODESEG                                     ;use kernel code segment ...
  1279                                                          pop     es                                              ;... as target segment
  1280                                                          xor     di,di                                           ;ES:DI = target address
  1281                                                          mov     si,EKRNCODESRCADR                               ;DS:SI = source address
  1282                                                          mov     cx,EKRNCODELEN                                  ;CX = kernel size
  1283                                                          cld                                                     ;forward strings
  1284                                                          rep     movsb                                           ;copy kernel image
  1285                                                          mov     si,czKernelLoadedMsg                            ;kernel moved message
  1286                                                          call    PutTTYString                                    ;display message
  1287                                  ;
  1288                                  ;       Switch to protected mode.
  1289                                  ;
  1290                                                          xor     si,si                                           ;ES:SI = gdt addr
  1291                                                          mov     ss,si                                           ;protected mode ss
  1292                                                          mov     sp,EKRNCODEBASE                                 ;initial stack immediate before code
  1293                                                          mov     ah,EBIOSFNINITPROTMODE                          ;initialize protected mode fn.
  1294                                                          mov     bx,02028h                                       ;BH,BL = IRQ int bases
  1295                                                          mov     dx,001Fh                                        ;outer delay loop count
  1296                                  .10                     mov     cx,0FFFFh                                       ;inner delay loop count
  1297                                                          loop    $                                               ;wait out pending interrupts
  1298                                                          dec     dx                                              ;restore outer loop count
  1299                                                          jnz     .10                                             ;continue outer loop
  1300                                                          int     EBIOSINTMISC                                    ;call BIOS to set protected mode
  1301                                  ;
  1302                                  ;       Enable hardware and maskable interrupts.
  1303                                  ;
  1304                                                          xor     al,al                                           ;enable all registers code
  1305                                                          out     EPICPORTPRI1,al                                 ;enable all primary 8259A ints
  1306                                                          out     EPICPORTSEC1,al                                 ;enable all secondary 8259A ints
  1307                                                          sti                                                     ;enable maskable interrupts
  1308                                  ;
  1309                                  ;       Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1310                                  ;
  1311                                                          ltr     [cs:cwLoaderTSS]                                ;load task register
  1312                                                          lldt    [cs:cwLoaderLDT]                                ;load local descriptor table register
  1313                                                          jmp     EGDTCONSOLETSS:0                                ;jump to task state segment selector
  1314                                  ;-----------------------------------------------------------------------------------------------------------------------
  1315                                  ;
  1316                                  ;       Routine:        LoaderExit
  1317                                  ;
  1318                                  ;       Description:    This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1319                                  ;
  1320                                  ;       In:             DS:SI   string address
  1321                                  ;
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323                                  LoaderExit              call    PutTTYString                                    ;display error message
  1324                                  ;
  1325                                  ;       Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1326                                  ;       However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1327                                  ;       iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1328                                  ;       we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1329                                  ;       By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1330                                  ;
  1331                                  .30                     mov     ah,EBIOSFNKEYSTATUS                             ;keyboard status function
  1332                                                          int     EBIOSINTKEYBOARD                                ;call BIOS keyboard interrupt
  1333                                                          jnz     .40                                             ;exit if key pressed
  1334                                                          sti                                                     ;enable maskable interrupts
  1335                                                          hlt                                                     ;wait for interrupt
  1336                                                          jmp     .30                                             ;repeat until keypress
  1337                                  ;
  1338                                  ;       Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1339                                  ;       keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1340                                  ;       HLT until the system resets.
  1341                                  ;
  1342                                  .40                     mov     al,EKEYBCMDRESET                                ;8042 pulse output port pin
  1343                                                          out     EKEYBPORTSTAT,al                                ;drive B0 low to restart
  1344                                  .50                     sti                                                     ;enable maskable interrupts
  1345                                                          hlt                                                     ;stop until reset, int, nmi
  1346                                                          jmp     .50                                             ;loop until restart kicks in
  1347                                  ;-----------------------------------------------------------------------------------------------------------------------
  1348                                  ;
  1349                                  ;       Routine:        GetCPUType
  1350                                  ;
  1351                                  ;       Description:    The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1352                                  ;                       the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1353                                  ;                       to distinguish whether we have at least an 80386, other means must be used.
  1354                                  ;
  1355                                  ;       Out:            AX      0 = 808x, v20, etc.
  1356                                  ;                               1 = 80186
  1357                                  ;                               2 = 80286
  1358                                  ;                               3 = 80386
  1359                                  ;
  1360                                  ;-----------------------------------------------------------------------------------------------------------------------
  1361                                  GetCPUType              mov     al,1                                            ;AL = 1
  1362                                                          mov     cl,32                                           ;shift count
  1363                                                          shr     al,cl                                           ;try a 32-bit shift
  1364                                                          or      al,al                                           ;did the shift happen?
  1365                                                          jz      .10                                             ;yes, cpu is 808x, v20, etc.
  1366                                                          cpu     186
  1367                                                          push    sp                                              ;save stack pointer
  1368                                                          pop     cx                                              ;...into cx
  1369                                                          cmp     cx,sp                                           ;did sp decrement before push?
  1370                                                          jne     .10                                             ;yes, cpu is 80186
  1371                                                          cpu     286
  1372                                                          inc     ax                                              ;AX = 2
  1373                                                          sgdt    [cbLoaderGDT]                                   ;store gdt reg in work area
  1374                                                          mov     cl,[cbLoaderGDTHiByte]                          ;CL = hi-order byte
  1375                                                          inc     cl                                              ;was hi-byte of GDTR 0xff?
  1376                                                          jz      .10                                             ;yes, cpu is 80286
  1377                                                          inc     ax                                              ;AX = 3
  1378                                  .10                     ret                                                     ;return
  1379                                  ;-----------------------------------------------------------------------------------------------------------------------
  1380                                  ;
  1381                                  ;       Routine:        PutTTYString
  1382                                  ;
  1383                                  ;       Description:    This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1384                                  ;                       TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1385                                  ;                       and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1386                                  ;                       for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1387                                  ;                       with CLD before the first LODSB. The direction flag is not guaranteed to be preseved between
  1388                                  ;                       calls within the OS. However, the "int" instruction does store the EFLAGS register on the
  1389                                  ;                       stack and restores it on return. Therefore, clearing the direction flag before subsequent calls
  1390                                  ;                       to LODSB is not needed.
  1391                                  ;
  1392                                  ;       In:             DS:SI   address of string
  1393                                  ;
  1394                                  ;       Out:            DF      0
  1395                                  ;                       ZF      1
  1396                                  ;                       AL      0
  1397                                  ;
  1398                                  ;-----------------------------------------------------------------------------------------------------------------------
  1399                                  PutTTYString            cld                                                     ;forward strings
  1400                                  .10                     lodsb                                                   ;load next byte at DS:SI in AL
  1401                                                          test    al,al                                           ;end of string?
  1402                                                          jz      .20                                             ;... yes, exit our loop
  1403                                                          mov     ah,EBIOSFNTTYOUTPUT                             ;BIOS teletype function
  1404                                                          int     EBIOSINTVIDEO                                   ;call BIOS display interrupt
  1405                                                          jmp     .10                                             ;repeat until done
  1406                                  .20                     ret                                                     ;return
  1407                                  ;-----------------------------------------------------------------------------------------------------------------------
  1408                                  ;
  1409                                  ;       Loader Data
  1410                                  ;
  1411                                  ;       The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1412                                  ;       GDT, a work area to build the GDTR, and additional text messages.
  1413                                  ;
  1414                                  ;-----------------------------------------------------------------------------------------------------------------------
  1415                                                          align   2
  1416                                  cwLoaderLDT             dw      EGDTLOADERLDT                                   ;loader local descriptor table selector
  1417                                  cwLoaderTSS             dw      EGDTLOADERTSS                                   ;loader task state segment selector
  1418                                  cbLoaderGDT             times   5 db 0                                          ;6-byte GDTR work area
  1419                                  cbLoaderGDTHiByte       db      0                                               ;hi-order byte
  1420                                  czCPUErrorMsg           db      "The operating system requires an i386 or later processor.",13,10
  1421                                                          db      "Please press any key to restart the computer.",13,10,0
  1422                                  czCPUOKMsg              db      "CPU OK",13,10,0                                ;CPU level ok message
  1423                                  czGDTOKMsg              db      "GDT prepared",13,10,0                          ;global descriptor table ok message
  1424                                  czKernelLoadedMsg       db      "Kernel loaded",13,10,0                         ;kernel loaded message
  1425                                  czStartingMsg           db      "Starting OS",13,10,0                           ;starting message
  1426                                                          times   1024-($-$$) db 0h                               ;zero fill to end of sector
  1427                                  ;=======================================================================================================================
  1428                                  ;
  1429                                  ;       OS Kernel                                                               @disk: 004600   @mem: 001000
  1430                                  ;
  1431                                  ;       This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1432                                  ;       following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1433                                  ;       task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1434                                  ;       commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1435                                  ;       through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1436                                  ;
  1437                                  ;=======================================================================================================================
  1438                                  ;=======================================================================================================================
  1439                                  ;
  1440                                  ;       Kernel Tables
  1441                                  ;
  1442                                  ;=======================================================================================================================
  1443                                  ;-----------------------------------------------------------------------------------------------------------------------
  1444                                  ;
  1445                                  ;       Global Descriptor Table                                                 @disk: 004600   @mem: 001000
  1446                                  ;
  1447                                  ;       The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1448                                  ;       first descriptor must be all nulls.
  1449                                  ;
  1450                                  ;       6   5         4         3         2         1         0
  1451                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1452                                  ;       ----------------------------------------------------------------
  1453                                  ;       h......hffffmmmma......ab......................bn..............n
  1454                                  ;       00000000                        all areas have base addresses below 2^24
  1455                                  ;               0100                    (0x4) 32-bit single-byte granularity
  1456                                  ;               1100                    (0xC) 32-bit 4KB granularity
  1457                                  ;                   1001                present, ring-0, selector
  1458                                  ;
  1459                                  ;       h...h   hi-order base address (bits 24-31)
  1460                                  ;       ffff    flags
  1461                                  ;       mmmm    hi-order limit (bits 16-19)
  1462                                  ;       a...a   access
  1463                                  ;       b...b   lo-order base address (bits 0-23)
  1464                                  ;       n...n   lo-order limit (bits 0-15)
  1465                                  ;
  1466                                  ;-----------------------------------------------------------------------------------------------------------------------
  1467                                  section                 gdt                                                     ;global descriptor table
  1468                                                          dq      0000000000000000h                               ;00 required null selector
  1469                                                          dq      00409300100007FFh                               ;08 2KB  writable data  (GDT alias)
  1470                                                          dq      00409300180007FFh                               ;10 2KB  writable data  (IDT alias)
  1471                                                          dq      00CF93000000FFFFh                               ;18 4GB  writable data  (kernel)     DS:
  1472                                                          dq      0040930B80000FFFh                               ;20 4KB  writable data  (CGA)        ES:
  1473                                                          dq      0040930000000FFFh                               ;28 4KB  writable stack (Loader)     SS:
  1474                                                          dq      00009B000000FFFFh                               ;30 64KB readable code  (loader)     CS:
  1475                                                          dq      00009BFF0000FFFFh                               ;38 64KB readable code  (BIOS)
  1476                                                          dq      004093000400FFFFh                               ;40 64KB writable data  (BIOS)
  1477                                                          dq      00409B0020001FFFh                               ;48 8KB  readable code  (kernel)
  1478                                                          dq      004082000F00007Fh                               ;50 80B  writable LDT   (loader)
  1479                                                          dq      004089000F80007Fh                               ;58 80B  writable TSS   (loader)
  1480                                                          dq      004082004700007Fh                               ;60 80B  writable LDT   (console)
  1481                                                          dq      004089004780007Fh                               ;88 80B  writable TSS   (console)
  1482                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1483                                  ;-----------------------------------------------------------------------------------------------------------------------
  1484                                  ;
  1485                                  ;       Interrupt Descriptor Table                                              @disk: 004e00   @mem: 001800
  1486                                  ;
  1487                                  ;       The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1488                                  ;       descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1489                                  ;       descriptors, taking only the name of the entry point for the code handling the interrupt.
  1490                                  ;
  1491                                  ;       6   5         4         3         2         1         0
  1492                                  ;       3210987654321098765432109876543210987654321098765432109876543210
  1493                                  ;       ----------------------------------------------------------------
  1494                                  ;       h..............hPzzStttt00000000S..............Sl..............l
  1495                                  ;
  1496                                  ;       h...h   high-order offset (bits 16-31)
  1497                                  ;       P       present (0=unused interrupt)
  1498                                  ;       zz      descriptor privilege level
  1499                                  ;       S       storage segment (must be zero for IDT)
  1500                                  ;       tttt    type: 0101=task, 1110=int, 1111=trap
  1501                                  ;       S...S   handling code selector in GDT
  1502                                  ;       l...l   lo-order offset (bits 0-15)
  1503                                  ;
  1504                                  ;-----------------------------------------------------------------------------------------------------------------------
  1505                                  section                 idt                                                     ;interrupt descriptor table
  1506                                                          mint    dividebyzero                                    ;00 divide by zero
  1507                                                          mint    singlestep                                      ;01 single step
  1508                                                          mint    nmi                                             ;02 non-maskable
  1509                                                          mint    break                                           ;03 break
  1510                                                          mint    into                                            ;04 into
  1511                                                          mint    bounds                                          ;05 bounds
  1512                                                          mint    badopcode                                       ;06 bad op code
  1513                                                          mint    nocoproc                                        ;07 no coprocessor
  1514                                                          mint    doublefault                                     ;08 double-fault
  1515                                                          mint    operand                                         ;09 operand
  1516                                                          mint    badtss                                          ;0a bad TSS
  1517                                                          mint    notpresent                                      ;0b not-present
  1518                                                          mint    stacklimit                                      ;0c stack limit
  1519                                                          mint    protection                                      ;0d general protection fault
  1520                                                          mint    int14                                           ;0e (reserved)
  1521                                                          mint    int15                                           ;0f (reserved)
  1522                                                          mint    coproccalc                                      ;10 (reserved)
  1523                                                          mint    int17                                           ;11 (reserved)
  1524                                                          mint    int18                                           ;12 (reserved)
  1525                                                          mint    int19                                           ;13 (reserved)
  1526                                                          mint    int20                                           ;14 (reserved)
  1527                                                          mint    int21                                           ;15 (reserved)
  1528                                                          mint    int22                                           ;16 (reserved)
  1529                                                          mint    int23                                           ;17 (reserved)
  1530                                                          mint    int24                                           ;18 (reserved)
  1531                                                          mint    int25                                           ;19 (reserved)
  1532                                                          mint    int26                                           ;1a (reserved)
  1533                                                          mint    int27                                           ;1b (reserved)
  1534                                                          mint    int28                                           ;1c (reserved)
  1535                                                          mint    int29                                           ;1d (reserved)
  1536                                                          mint    int30                                           ;1e (reserved)
  1537                                                          mint    int31                                           ;1f (reserved)
  1538                                                          mtrap   clocktick                                       ;20 IRQ0 clock tick
  1539                                                          mtrap   keyboard                                        ;21 IRQ1 keyboard
  1540                                                          mtrap   iochannel                                       ;22 IRQ2 second 8259A cascade
  1541                                                          mtrap   com2                                            ;23 IRQ3 com2
  1542                                                          mtrap   com1                                            ;24 IRQ4 com1
  1543                                                          mtrap   lpt2                                            ;25 IRQ5 lpt2
  1544                                                          mtrap   diskette                                        ;26 IRQ6 diskette
  1545                                                          mtrap   lpt1                                            ;27 IRQ7 lpt1
  1546                                                          mtrap   rtclock                                         ;28 IRQ8 real-time clock
  1547                                                          mtrap   retrace                                         ;29 IRQ9 CGA vertical retrace
  1548                                                          mtrap   irq10                                           ;2a IRQA (reserved)
  1549                                                          mtrap   irq11                                           ;2b IRQB (reserved)
  1550                                                          mtrap   ps2mouse                                        ;2c IRQC ps/2 mouse
  1551                                                          mtrap   coprocessor                                     ;2d IRQD coprocessor
  1552                                                          mtrap   fixeddisk                                       ;2e IRQE fixed disk
  1553                                                          mtrap   irq15                                           ;2f IRQF (reserved)
  1554                                                          mtrap   svc                                             ;30 OS services
  1555                                                          times   2048-($-$$) db 0h                               ;zero fill to end of section
  1556                                  ;=======================================================================================================================
  1557                                  ;
  1558                                  ;       Interrupt Handlers                                                      @disk: 005600   @mem:  002000
  1559                                  ;
  1560                                  ;       Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1561                                  ;       invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1562                                  ;       CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1563                                  ;       signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1564                                  ;       using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1565                                  ;       establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1566                                  ;       label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1567                                  ;
  1568                                  ;=======================================================================================================================
  1569                                  section                 kernel  vstart=0h                                       ;data offsets relative to 0
  1570                                                          cpu     386                                             ;allow 80386 instructions
  1571                                                          bits    32                                              ;this is 32-bit code
  1572                                  ;=======================================================================================================================
  1573                                  ;
  1574                                  ;       CPU Interrupt Handlers
  1575                                  ;
  1576                                  ;       The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1577                                  ;       of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1578                                  ;
  1579                                  ;=======================================================================================================================
  1580                                  ;-----------------------------------------------------------------------------------------------------------------------
  1581                                  ;
  1582                                  ;       INT0    Divide By Zero
  1583                                  ;
  1584                                  ;-----------------------------------------------------------------------------------------------------------------------
  1585                                                          menter  dividebyzero                                    ;divide by zero
  1586                                                          push    0                                               ;store interrupt nbr
  1587                                                          push    czIntDivideByZero                               ;store message offset
  1588                                                          jmp     ReportInterrupt                                 ;report interrupt
  1589                                  ;-----------------------------------------------------------------------------------------------------------------------
  1590                                  ;
  1591                                  ;       INT1    Single Step
  1592                                  ;
  1593                                  ;-----------------------------------------------------------------------------------------------------------------------
  1594                                                          menter  singlestep                                      ;single step
  1595                                                          push    1                                               ;store interrupt nbr
  1596                                                          push    czIntSingleStep                                 ;store message offset
  1597                                                          jmp     ReportInterrupt                                 ;report interrupt
  1598                                  ;-----------------------------------------------------------------------------------------------------------------------
  1599                                  ;
  1600                                  ;       INT2    Non-Maskable Interrupt
  1601                                  ;
  1602                                  ;-----------------------------------------------------------------------------------------------------------------------
  1603                                                          menter  nmi                                             ;non-maskable
  1604                                                          push    2                                               ;store interrupt nbr
  1605                                                          push    czIntNonMaskable                                ;store message offset
  1606                                                          jmp     ReportInterrupt                                 ;report interrupt
  1607                                  ;-----------------------------------------------------------------------------------------------------------------------
  1608                                  ;
  1609                                  ;       INT3    Break
  1610                                  ;
  1611                                  ;-----------------------------------------------------------------------------------------------------------------------
  1612                                                          menter  break                                           ;break
  1613                                                          push    3                                               ;store interrupt nbr
  1614                                                          push    czIntBreak                                      ;store message offset
  1615                                                          jmp     ReportInterrupt                                 ;report interrupt
  1616                                  ;-----------------------------------------------------------------------------------------------------------------------
  1617                                  ;
  1618                                  ;       INT4    Into
  1619                                  ;
  1620                                  ;-----------------------------------------------------------------------------------------------------------------------
  1621                                                          menter  into                                            ;into
  1622                                                          push    4                                               ;store interrupt nbr
  1623                                                          push    czIntInto                                       ;store message offset
  1624                                                          jmp     ReportInterrupt                                 ;report interrupt
  1625                                  ;-----------------------------------------------------------------------------------------------------------------------
  1626                                  ;
  1627                                  ;       INT5    Bounds
  1628                                  ;
  1629                                  ;-----------------------------------------------------------------------------------------------------------------------
  1630                                                          menter  bounds                                          ;bounds
  1631                                                          push    5                                               ;store interrupt nbr
  1632                                                          push    czIntBounds                                     ;store message offset
  1633                                                          jmp     ReportInterrupt                                 ;report interrupt
  1634                                  ;-----------------------------------------------------------------------------------------------------------------------
  1635                                  ;
  1636                                  ;       INT6    Bad Operation Code
  1637                                  ;
  1638                                  ;-----------------------------------------------------------------------------------------------------------------------
  1639                                                          menter  badopcode                                       ;bad opcode interrupt
  1640                                                          push    6                                               ;store interrupt nbr
  1641                                                          push    czIntBadOpCode                                  ;store message offset
  1642                                                          jmp     ReportInterrupt                                 ;report interrupt
  1643                                  ;-----------------------------------------------------------------------------------------------------------------------
  1644                                  ;
  1645                                  ;       INT7    No Coprocessor
  1646                                  ;
  1647                                  ;-----------------------------------------------------------------------------------------------------------------------
  1648                                                          menter  nocoproc                                        ;no coprocessor interrupt
  1649                                                          push    7                                               ;store interrupt nbr
  1650                                                          push    czIntNoCoprocessor                              ;store message offset
  1651                                                          jmp     ReportInterrupt                                 ;report interrupt
  1652                                  ;-----------------------------------------------------------------------------------------------------------------------
  1653                                  ;
  1654                                  ;       INT8    Double Fault
  1655                                  ;
  1656                                  ;-----------------------------------------------------------------------------------------------------------------------
  1657                                                          menter  doublefault                                     ;doublefault interrupt
  1658                                                          push    8                                               ;store interrupt nbr
  1659                                                          push    czIntDoubleFault                                ;store message offset
  1660                                                          jmp     ReportInterrupt                                 ;report interrupt
  1661                                  ;-----------------------------------------------------------------------------------------------------------------------
  1662                                  ;
  1663                                  ;       INT9    Operand
  1664                                  ;
  1665                                  ;-----------------------------------------------------------------------------------------------------------------------
  1666                                                          menter  operand                                         ;operand interrupt
  1667                                                          push    9                                               ;store interrupt nbr
  1668                                                          push    czIntOperand                                    ;store message offset
  1669                                                          jmp     ReportInterrupt                                 ;report interrupt
  1670                                  ;-----------------------------------------------------------------------------------------------------------------------
  1671                                  ;
  1672                                  ;       INT10   Bad Task State Segment
  1673                                  ;
  1674                                  ;-----------------------------------------------------------------------------------------------------------------------
  1675                                                          menter  badtss                                          ;bad TSS interrupt
  1676                                                          push    10                                              ;store interrupt nbr
  1677                                                          push    czIntBadTSS                                     ;store message offset
  1678                                                          jmp     ReportInterrupt                                 ;report interrupt
  1679                                  ;-----------------------------------------------------------------------------------------------------------------------
  1680                                  ;
  1681                                  ;       INT11   Not Present
  1682                                  ;
  1683                                  ;-----------------------------------------------------------------------------------------------------------------------
  1684                                                          menter  notpresent                                      ;not present interrupt
  1685                                                          push    11                                              ;store interrupt nbr
  1686                                                          push    czIntNotPresent                                 ;store message offset
  1687                                                          jmp     ReportInterrupt                                 ;report interrupt
  1688                                  ;-----------------------------------------------------------------------------------------------------------------------
  1689                                  ;
  1690                                  ;       INT12   Stack Limit
  1691                                  ;
  1692                                  ;-----------------------------------------------------------------------------------------------------------------------
  1693                                                          menter  stacklimit                                      ;stack limit interrupt
  1694                                                          push    12                                              ;store interrupt nbr
  1695                                                          push    czIntStackLimit                                 ;store message offset
  1696                                                          jmp     ReportInterrupt                                 ;report interrupt
  1697                                  ;-----------------------------------------------------------------------------------------------------------------------
  1698                                  ;
  1699                                  ;       INT13   General Protection Fault
  1700                                  ;
  1701                                  ;-----------------------------------------------------------------------------------------------------------------------
  1702                                                          menter  protection                                      ;protection fault interrupt
  1703                                                          push    13                                              ;store interrupt nbr
  1704                                                          push    czIntProtection                                 ;store message offset
  1705                                                          jmp     ReportInterrupt                                 ;report interrupt
  1706                                  ;-----------------------------------------------------------------------------------------------------------------------
  1707                                  ;
  1708                                  ;       INT14   Reserved
  1709                                  ;
  1710                                  ;-----------------------------------------------------------------------------------------------------------------------
  1711                                                          menter  int14                                           ;(reserved)
  1712                                                          push    14                                              ;store interrupt nbr
  1713                                                          push    czIntReserved                                   ;store message offset
  1714                                                          jmp     ReportInterrupt                                 ;report interrupt
  1715                                  ;-----------------------------------------------------------------------------------------------------------------------
  1716                                  ;
  1717                                  ;       INT15   Reserved
  1718                                  ;
  1719                                  ;-----------------------------------------------------------------------------------------------------------------------
  1720                                                          menter  int15                                           ;(reserved)
  1721                                                          push    15                                              ;store interrupt nbr
  1722                                                          push    czIntReserved                                   ;store message offset
  1723                                                          jmp     ReportInterrupt                                 ;report interrupt
  1724                                  ;-----------------------------------------------------------------------------------------------------------------------
  1725                                  ;
  1726                                  ;       INT16   Coprocessor Calculation
  1727                                  ;
  1728                                  ;-----------------------------------------------------------------------------------------------------------------------
  1729                                                          menter  coproccalc                                      ;coprocessor calculation
  1730                                                          push    16                                              ;store interrupt nbr
  1731                                                          push    czIntCoprocessorCalc                            ;store message offset
  1732                                                          jmp     ReportInterrupt                                 ;report interrupt
  1733                                  ;-----------------------------------------------------------------------------------------------------------------------
  1734                                  ;
  1735                                  ;       INT17   Reserved
  1736                                  ;
  1737                                  ;-----------------------------------------------------------------------------------------------------------------------
  1738                                                          menter  int17                                           ;(reserved)
  1739                                                          push    17                                              ;store interrupt nbr
  1740                                                          push    czIntReserved                                   ;store message offset
  1741                                                          jmp     ReportInterrupt                                 ;report interrupt
  1742                                  ;-----------------------------------------------------------------------------------------------------------------------
  1743                                  ;
  1744                                  ;       INT18   Reserved
  1745                                  ;
  1746                                  ;-----------------------------------------------------------------------------------------------------------------------
  1747                                                          menter  int18                                           ;(reserved)
  1748                                                          push    18                                              ;store interrupt nbr
  1749                                                          push    czIntReserved                                   ;store message offset
  1750                                                          jmp     ReportInterrupt                                 ;report interrupt
  1751                                  ;-----------------------------------------------------------------------------------------------------------------------
  1752                                  ;
  1753                                  ;       INT19   Reserved
  1754                                  ;
  1755                                  ;-----------------------------------------------------------------------------------------------------------------------
  1756                                                          menter  int19                                           ;(reserved)
  1757                                                          push    19                                              ;store interrupt nbr
  1758                                                          push    czIntReserved                                   ;store message offset
  1759                                                          jmp     ReportInterrupt                                 ;report interrupt
  1760                                  ;-----------------------------------------------------------------------------------------------------------------------
  1761                                  ;
  1762                                  ;       INT20   Reserved
  1763                                  ;
  1764                                  ;-----------------------------------------------------------------------------------------------------------------------
  1765                                                          menter  int20                                           ;(reserved)
  1766                                                          push    20                                              ;store interrupt nbr
  1767                                                          push    czIntReserved                                   ;store message offset
  1768                                                          jmp     ReportInterrupt                                 ;report interrupt
  1769                                  ;-----------------------------------------------------------------------------------------------------------------------
  1770                                  ;
  1771                                  ;       INT21   Reserved
  1772                                  ;
  1773                                  ;-----------------------------------------------------------------------------------------------------------------------
  1774                                                          menter  int21                                           ;(reserved)
  1775                                                          push    21                                              ;store interrupt nbr
  1776                                                          push    czIntReserved                                   ;store message offset
  1777                                                          jmp     ReportInterrupt                                 ;report interrupt
  1778                                  ;-----------------------------------------------------------------------------------------------------------------------
  1779                                  ;
  1780                                  ;       INT22   Reserved
  1781                                  ;
  1782                                  ;-----------------------------------------------------------------------------------------------------------------------
  1783                                                          menter  int22                                           ;(reserved)
  1784                                                          push    22                                              ;store interrupt nbr
  1785                                                          push    czIntReserved                                   ;store message offset
  1786                                                          jmp     ReportInterrupt                                 ;report interrupt
  1787                                  ;-----------------------------------------------------------------------------------------------------------------------
  1788                                  ;
  1789                                  ;       INT23   Reserved
  1790                                  ;
  1791                                  ;-----------------------------------------------------------------------------------------------------------------------
  1792                                                          menter  int23                                           ;(reserved)
  1793                                                          push    23                                              ;store interrupt nbr
  1794                                                          push    czIntReserved                                   ;store message offset
  1795                                                          jmp     ReportInterrupt                                 ;report interrupt
  1796                                  ;-----------------------------------------------------------------------------------------------------------------------
  1797                                  ;
  1798                                  ;       INT24   Reserved
  1799                                  ;
  1800                                  ;-----------------------------------------------------------------------------------------------------------------------
  1801                                                          menter  int24                                           ;(reserved)
  1802                                                          push    24                                              ;store interrupt nbr
  1803                                                          push    czIntReserved                                   ;store message offset
  1804                                                          jmp     ReportInterrupt                                 ;report interrupt
  1805                                  ;-----------------------------------------------------------------------------------------------------------------------
  1806                                  ;
  1807                                  ;       INT25   Reserved
  1808                                  ;
  1809                                  ;-----------------------------------------------------------------------------------------------------------------------
  1810                                                          menter  int25                                           ;(reserved)
  1811                                                          push    25                                              ;store interrupt nbr
  1812                                                          push    czIntReserved                                   ;store message offset
  1813                                                          jmp     ReportInterrupt                                 ;report interrupt
  1814                                  ;-----------------------------------------------------------------------------------------------------------------------
  1815                                  ;
  1816                                  ;       INT26   Reserved
  1817                                  ;
  1818                                  ;-----------------------------------------------------------------------------------------------------------------------
  1819                                                          menter  int26                                           ;(reserved)
  1820                                                          push    26                                              ;store interrupt nbr
  1821                                                          push    czIntReserved                                   ;store message offset
  1822                                                          jmp     ReportInterrupt                                 ;report interrupt
  1823                                  ;-----------------------------------------------------------------------------------------------------------------------
  1824                                  ;
  1825                                  ;       INT27   Reserved
  1826                                  ;
  1827                                  ;-----------------------------------------------------------------------------------------------------------------------
  1828                                                          menter  int27                                           ;(reserved)
  1829                                                          push    27                                              ;store interrupt nbr
  1830                                                          push    czIntReserved                                   ;store message offset
  1831                                                          jmp     ReportInterrupt                                 ;report interrupt
  1832                                  ;-----------------------------------------------------------------------------------------------------------------------
  1833                                  ;
  1834                                  ;       INT28   Reserved
  1835                                  ;
  1836                                  ;-----------------------------------------------------------------------------------------------------------------------
  1837                                                          menter  int28                                           ;(reserved)
  1838                                                          push    28                                              ;store interrupt nbr
  1839                                                          push    czIntReserved                                   ;store message offset
  1840                                                          jmp     ReportInterrupt                                 ;report interrupt
  1841                                  ;-----------------------------------------------------------------------------------------------------------------------
  1842                                  ;
  1843                                  ;       INT29   Reserved
  1844                                  ;
  1845                                  ;-----------------------------------------------------------------------------------------------------------------------
  1846                                                          menter  int29                                           ;(reserved)
  1847                                                          push    29                                              ;store interrupt nbr
  1848                                                          push    czIntReserved                                   ;store message offset
  1849                                                          jmp     ReportInterrupt                                 ;report interrupt
  1850                                  ;-----------------------------------------------------------------------------------------------------------------------
  1851                                  ;
  1852                                  ;       INT30   Reserved
  1853                                  ;
  1854                                  ;-----------------------------------------------------------------------------------------------------------------------
  1855                                                          menter  int30                                           ;(reserved)
  1856                                                          push    30                                              ;store interrupt nbr
  1857                                                          push    czIntReserved                                   ;store message offset
  1858                                                          jmp     ReportInterrupt                                 ;report interrupt
  1859                                  ;-----------------------------------------------------------------------------------------------------------------------
  1860                                  ;
  1861                                  ;       INT31   Reserved
  1862                                  ;
  1863                                  ;-----------------------------------------------------------------------------------------------------------------------
  1864                                                          menter  int31                                           ;(reserved)
  1865                                                          push    31                                              ;store interrupt nbr
  1866                                                          push    czIntReserved                                   ;store message offset
  1867                                                          jmp     ReportInterrupt                                 ;report interrupt
  1868                                  ;-----------------------------------------------------------------------------------------------------------------------
  1869                                  ;
  1870                                  ;       Routine:        ReportInterrupt
  1871                                  ;
  1872                                  ;       Description:    This routine will be used to respond to processor interrupts that are not otherwise handled.
  1873                                  ;                       At this stage, we simply restore the stack and return from the interrupt.
  1874                                  ;
  1875                                  ;       In:             [ESP+4]         interrupt number (0-31)                 stored by push instruction
  1876                                  ;                       [ESP+0]         error message address                   stored by push instructions
  1877                                  ;
  1878                                  ;-----------------------------------------------------------------------------------------------------------------------
  1879                                  ReportInterrupt         pop     eax                                             ;error message address
  1880                                                          pop     eax                                             ;interrupt number
  1881                                                          iretd                                                   ;return
  1882                                  ;-----------------------------------------------------------------------------------------------------------------------
  1883                                  ;
  1884                                  ;       Processor Interrupt Name Strings
  1885                                  ;
  1886                                  ;-----------------------------------------------------------------------------------------------------------------------
  1887                                  czIntDivideByZero       db      "Division by zero",0
  1888                                  czIntSingleStep         db      "Single step",0
  1889                                  czIntNonMaskable        db      "Non-maskable interrupt",0
  1890                                  czIntBreak              db      "Break",0
  1891                                  czIntInto               db      "Into",0
  1892                                  czIntBounds             db      "Bounds",0
  1893                                  czIntBadOpCode          db      "Bad Operation Code",0
  1894                                  czIntNoCoprocessor      db      "No Coprocessor",0
  1895                                  czIntDoubleFault        db      "Double Fault",0
  1896                                  czIntOperand            db      "Operand",0
  1897                                  czIntBadTSS             db      "Bad Task State Segment",0
  1898                                  czIntNotPresent         db      "Not Present",0
  1899                                  czIntStackLimit         db      "Stack Limit",0
  1900                                  czIntProtection         db      "General Protection Fault",0
  1901                                  czIntCoprocessorCalc    db      "Coprocessor Calculation",0
  1902                                  czIntReserved           db      "Reserved",0
  1903                                  ;=======================================================================================================================
  1904                                  ;
  1905                                  ;       Hardware Device Interupts
  1906                                  ;
  1907                                  ;       The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1908                                  ;       the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1909                                  ;       (BX=2028h).
  1910                                  ;
  1911                                  ;=======================================================================================================================
  1912                                  ;-----------------------------------------------------------------------------------------------------------------------
  1913                                  ;
  1914                                  ;       IRQ0    Clock Tick Interrupt
  1915                                  ;
  1916                                  ;       PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1917                                  ;       Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1918                                  ;       rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1919                                  ;
  1920                                  ;       Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1921                                  ;       day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1922                                  ;
  1923                                  ;       This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1924                                  ;       zero, the floppy disk motors are turned off.
  1925                                  ;
  1926                                  ;-----------------------------------------------------------------------------------------------------------------------
  1927                                                          menter  clocktick                                       ;clock tick interrupt
  1928                                                          push    eax                                             ;save modified regs
  1929                                                          push    edx                                             ;
  1930                                                          push    ds                                              ;
  1931                                  ;
  1932                                  ;       Update the clock tick count and the elapsed days as needed.
  1933                                  ;
  1934                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1935                                                          pop     ds                                              ;... into data segment register
  1936                                                          mov     eax,[wdClockTicks]                              ;EAX = clock ticks
  1937                                                          inc     eax                                             ;increment clock ticks
  1938                                                          cmp     eax,EPITDAYTICKS                                ;clock ticks per day?
  1939                                                          jb      irq0.10                                         ;no, skip ahead
  1940                                                          inc     byte [wbClockDays]                              ;increment clock days
  1941                                                          xor     eax,eax                                         ;reset clock ticks
  1942                                  irq0.10                 mov     dword [wdClockTicks],eax                        ;save clock ticks
  1943                                  ;
  1944                                  ;       Decrement floppy disk motor timeout.
  1945                                  ;
  1946                                                          cmp     byte [wbFDCMotor],0                             ;floppy motor timeout?
  1947                                                          je      irq0.20                                         ;yes, skip ahead
  1948                                                          dec     byte [wbFDCMotor]                               ;decrement motor timeout
  1949                                                          jnz     irq0.20                                         ;skip ahead if non-zero
  1950                                  ;
  1951                                  ;       Turn off the floppy disk motor if appropriate.
  1952                                  ;
  1953                                                          sti                                                     ;enable maskable interrupts
  1954                                  irq0.15                 mov     dh,EFDCPORTHI                                   ;FDC controller port hi
  1955                                                          mov     dl,EFDCPORTLOSTAT                               ;FDC main status register
  1956                                                          in      al,dx                                           ;FDC main status byte
  1957                                                          test    al,EFDCSTATBUSY                                 ;test FDC main status for busy
  1958                                                          jnz     irq0.15                                         ;wait while busy
  1959                                                          mov     al,EFDCMOTOROFF                                 ;motor-off / enable/ DMA setting
  1960                                                          mov     byte [wbFDCControl],al                          ;save motor-off setting
  1961                                                          mov     dh,EFDCPORTHI                                   ;FDC port hi
  1962                                                          mov     dl,EFDCPORTLOOUT                                ;FDC digital output register
  1963                                                          out     dx,al                                           ;turn motor off
  1964                                  ;
  1965                                  ;       Signal the end of the hardware interrupt.
  1966                                  ;
  1967                                  irq0.20                 call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  1968                                  ;
  1969                                  ;       Restore and return.
  1970                                  ;
  1971                                                          pop     ds                                              ;restore modified regs
  1972                                                          pop     edx                                             ;
  1973                                                          pop     eax                                             ;
  1974                                                          iretd                                                   ;return
  1975                                  ;-----------------------------------------------------------------------------------------------------------------------
  1976                                  ;
  1977                                  ;       IRQ1    Keyboard Interrupt
  1978                                  ;
  1979                                  ;       This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1980                                  ;       corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1981                                  ;       code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1982                                  ;       ALL modified registers upon return.
  1983                                  ;
  1984                                  ;-----------------------------------------------------------------------------------------------------------------------
  1985                                                          menter  keyboard                                        ;keyboard interrrupt
  1986                                                          push    eax                                             ;save non-volatile regs
  1987                                                          push    ebx                                             ;
  1988                                                          push    ecx                                             ;
  1989                                                          push    esi                                             ;
  1990                                                          push    ds                                              ;
  1991                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  1992                                                          pop     ds                                              ;... into data segment register
  1993                                                          xor     al,al                                           ;zero
  1994                                                          mov     [wbConsoleScan0],al                             ;clear scan code 0
  1995                                                          mov     [wbConsoleScan1],al                             ;clear scan code 1
  1996                                                          mov     [wbConsoleScan2],al                             ;clear scan code 2
  1997                                                          mov     [wbConsoleScan3],al                             ;clear scan code 3
  1998                                                          mov     [wbConsoleScan4],al                             ;clear scan code 4
  1999                                                          mov     [wbConsoleScan5],al                             ;clear scan code 5
  2000                                                          mov     al,' '                                          ;space
  2001                                                          mov     [wbConsoleChar],al                              ;set character to space
  2002                                                          mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2003                                                          not     al                                              ;controller timeout mask
  2004                                                          and     [wbConsoleStatus],al                            ;clear controller timeout flag
  2005                                                          mov     bl,[wbConsoleShift]                             ;shift flags
  2006                                                          mov     bh,[wbConsoleLock]                              ;lock flags
  2007                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2008                                                          jz      irq1.140                                        ;yes, skip ahead
  2009                                                          in      al,EKEYBPORTDATA                                ;read scan code 0
  2010                                                          mov     [wbConsoleScan0],al                             ;save scan code 0
  2011                                                          mov     ah,al                                           ;copy scan code 0
  2012                                                          mov     al,EKEYFSHIFTLEFT                               ;left shift flag
  2013                                                          cmp     ah,EKEYBSHIFTLDOWN                              ;left shift key down code?
  2014                                                          je      irq1.30                                         ;yes, set flag
  2015                                                          cmp     ah,EKEYBSHIFTLUP                                ;left shift key up code?
  2016                                                          je      irq1.40                                         ;yes, reset flag
  2017                                                          mov     al,EKEYFSHIFTRIGHT                              ;right shift flag
  2018                                                          cmp     ah,EKEYBSHIFTRDOWN                              ;right shift key down code?
  2019                                                          je      irq1.30                                         ;yes, set flag
  2020                                                          cmp     ah,EKEYBSHIFTRUP                                ;right shift key up code?
  2021                                                          je      irq1.40                                         ;yes, reset flag
  2022                                                          mov     al,EKEYFCTRLLEFT                                ;left control flag
  2023                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2024                                                          je      irq1.30                                         ;yes, set flag
  2025                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2026                                                          je      irq1.40                                         ;yes, reset flag
  2027                                                          mov     al,EKEYFALTLEFT                                 ;left alt flag
  2028                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2029                                                          je      irq1.30                                         ;yes, set flag
  2030                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2031                                                          je      irq1.40                                         ;yes, reset flag
  2032                                                          mov     al,EKEYFLOCKCAPS                                ;caps-lock flag
  2033                                                          cmp     ah,EKEYBCAPSDOWN                                ;caps-lock key down code?
  2034                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2035                                                          mov     al,EKEYFLOCKNUM                                 ;num-lock flag
  2036                                                          cmp     ah,EKEYBNUMDOWN                                 ;num-lock key down code?
  2037                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2038                                                          mov     al,EKEYFLOCKSCROLL                              ;scroll-lock flag
  2039                                                          cmp     ah,EKEYBSCROLLDOWN                              ;scroll-lock key down code?
  2040                                                          je      irq1.50                                         ;yes, toggle lamps and flags
  2041                                                          cmp     ah,EKEYBCODEEXT0                                ;extended scan code 0?
  2042                                                          jne     irq1.70                                         ;no, skip ahead
  2043                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2044                                                          jz      irq1.140                                        ;yes, skip ahead
  2045                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2046                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2047                                                          mov     ah,al                                           ;copy scan code 1
  2048                                                          mov     al,EKEYFCTRLRIGHT                               ;right control flag
  2049                                                          cmp     ah,EKEYBCTRLDOWN                                ;control key down code?
  2050                                                          je      irq1.30                                         ;yes, set flag
  2051                                                          cmp     ah,EKEYBCTRLUP                                  ;control key up code?
  2052                                                          je      irq1.40                                         ;yes, reset flag
  2053                                                          mov     al,EKEYFALTRIGHT                                ;right alt flag
  2054                                                          cmp     ah,EKEYBALTDOWN                                 ;alt key down code?
  2055                                                          je      irq1.30                                         ;yes, set flag
  2056                                                          cmp     ah,EKEYBALTUP                                   ;alt key up code?
  2057                                                          je      irq1.40                                         ;yes, reset flag
  2058                                                          cmp     ah,EKEYBSLASH                                   ;slash down code?
  2059                                                          je      irq1.80                                         ;yes, skip ahead
  2060                                                          cmp     ah,EKEYBSLASHUP                                 ;slash up code?
  2061                                                          je      irq1.80                                         ;yes, skip ahead
  2062                                                          cmp     ah,EKEYBPRTSCRDOWN                              ;print screen down code?
  2063                                                          je      irq1.10                                         ;yes, continue
  2064                                                          cmp     ah,EKEYBPRTSCRUP                                ;print screen up code?
  2065                                                          jne     irq1.20                                         ;no, skip ahead
  2066                                  irq1.10                 call    WaitForKeyOutBuffer                             ;controller timeout?
  2067                                                          jz      irq1.140                                        ;yes, skip ahead
  2068                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2069                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2070                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2071                                                          jz      irq1.140                                        ;yes, skip ahead
  2072                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2073                                                          mov     [wbConsoleScan3],al                             ;read scan code 3
  2074                                  irq1.20                 jmp     irq1.150                                        ;finish keyboard handling
  2075                                  irq1.30                 or      bl,al                                           ;set shift flag
  2076                                                          jmp     irq1.60                                         ;skip ahead
  2077                                  irq1.40                 not     al                                              ;convert flag to mask
  2078                                                          and     bl,al                                           ;reset shift flag
  2079                                                          jmp     irq1.60                                         ;skip ahead
  2080                                  irq1.50                 xor     bh,al                                           ;toggle lock flag
  2081                                                          call    SetKeyboardLamps                                ;update keyboard lamps
  2082                                  irq1.60                 mov     [wbConsoleShift],bl                             ;save shift flags
  2083                                                          mov     [wbConsoleLock],bh                              ;save lock flags
  2084                                                          call    PutConsoleOIAShift                              ;update OIA indicators
  2085                                                          jmp     irq1.150                                        ;finish keyboard handling
  2086                                  irq1.70                 cmp     ah,EKEYBCODEEXT1                                ;extended scan code 1?
  2087                                                          jne     irq1.80                                         ;no continue
  2088                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2089                                                          jz      irq1.140                                        ;yes, skip ahead
  2090                                                          in      al,EKEYBPORTDATA                                ;read scan code 1
  2091                                                          mov     [wbConsoleScan1],al                             ;save scan code 1
  2092                                                          mov     ah,al                                           ;copy scan code 1
  2093                                                          cmp     ah,EKEYBPAUSEDOWN                               ;pause key down code?
  2094                                                          jne     irq1.150                                        ;no, finish keyboard handling
  2095                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2096                                                          jz      irq1.140                                        ;yes, skip ahead
  2097                                                          in      al,EKEYBPORTDATA                                ;read scan code 2
  2098                                                          mov     [wbConsoleScan2],al                             ;save scan code 2
  2099                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2100                                                          jz      irq1.140                                        ;yes, skip ahead
  2101                                                          in      al,EKEYBPORTDATA                                ;read scan code 3
  2102                                                          mov     [wbConsoleScan3],al                             ;save scan code 3
  2103                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2104                                                          jz      irq1.140                                        ;yes, skip ahead
  2105                                                          in      al,EKEYBPORTDATA                                ;read scan code 4
  2106                                                          mov     [wbConsoleScan4],al                             ;save scan code 4
  2107                                                          call    WaitForKeyOutBuffer                             ;controller timeout?
  2108                                                          jz      irq1.140                                        ;yes, skip ahead
  2109                                                          in      al,EKEYBPORTDATA                                ;read scan code 5
  2110                                                          mov     [wbConsoleScan5],al                             ;save scan code 5
  2111                                                          jmp     irq1.150                                        ;continue
  2112                                  irq1.80                 xor     al,al                                           ;assume no ASCII translation
  2113                                                          test    ah,EKEYBUP                                      ;release code?
  2114                                                          jnz     irq1.130                                        ;yes, skip ahead
  2115                                                          mov     esi,tscan2ascii                                 ;scan-to-ascii table address
  2116                                                          test    bl,EKEYFSHIFT                                   ;either shift key down?
  2117                                                          jz      irq1.90                                         ;no, skip ahead
  2118                                                          mov     esi,tscan2shift                                 ;scan-to-shifted table address
  2119                                  irq1.90                 movzx   ecx,ah                                          ;scan code offset
  2120                                                          mov     al,[cs:ecx+esi]                                 ;al = ASCII code
  2121                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock on?
  2122                                                          jz      irq1.100                                        ;no skip ahead
  2123                                                          mov     cl,al                                           ;copy ASCII code
  2124                                                          and     cl,EASCIICASEMASK                               ;clear case mask of copy
  2125                                                          cmp     cl,EASCIIUPPERA                                 ;less than 'A'?
  2126                                                          jb      irq1.100                                        ;yes, skip ahead
  2127                                                          cmp     cl,EASCIIUPPERZ                                 ;greater than 'Z'?
  2128                                                          ja      irq1.100                                        ;yes, skip ahead
  2129                                                          xor     al,EASCIICASE                                   ;switch case
  2130                                  irq1.100                mov     [wbConsoleChar],al                              ;save ASCII code
  2131                                  irq1.110                mov     edx,EMSGKEYDOWN                                 ;assume key-down event
  2132                                                          test    ah,EKEYBUP                                      ;release scan-code?
  2133                                                          jz      irq1.120                                        ;no, skip ahead
  2134                                                          mov     edx,EMSGKEYUP                                   ;key-up event
  2135                                  irq1.120                and     eax,0FFFFh                                      ;clear high-order word
  2136                                                          or      edx,eax                                         ;msg id and codes
  2137                                                          xor     ecx,ecx                                         ;null param
  2138                                                          push    eax                                             ;save codes
  2139                                                          call    PutMessage                                      ;put message to console
  2140                                                          pop     eax                                             ;restore codes
  2141                                                          test    al,al                                           ;ASCII translation?
  2142                                                          jz      irq1.130                                        ;no, skip ahead
  2143                                                          mov     edx,EMSGKEYCHAR                                 ;key-character event
  2144                                                          and     eax,0FFFFh                                      ;clear high-order word
  2145                                                          or      edx,eax                                         ;msg id and codes
  2146                                                          xor     ecx,ecx                                         ;null param
  2147                                                          call    PutMessage                                      ;put message to console
  2148                                  irq1.130                jmp     irq1.150                                        ;finish keyboard handling
  2149                                  irq1.140                mov     al,EKEYFTIMEOUT                                 ;controller timeout flag
  2150                                                          or      [wbConsoleStatus],al                            ;set controller timeout flag
  2151                                  irq1.150                call    PutConsoleOIAChar                               ;update operator info area
  2152                                                          call    PutPrimaryEndOfInt                              ;send end-of-interrupt to PIC
  2153                                                          pop     ds                                              ;restore non-volatile regs
  2154                                                          pop     esi                                             ;
  2155                                                          pop     ecx                                             ;
  2156                                                          pop     ebx                                             ;
  2157                                                          pop     eax                                             ;
  2158                                                          iretd                                                   ;return
  2159                                  ;-----------------------------------------------------------------------------------------------------------------------
  2160                                  ;       Scan-Code to ASCII Translation Tables
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  tscan2ascii             db      000h,01Bh,031h,032h,033h,034h,035h,036h         ;00-07
  2163                                                          db      037h,038h,039h,030h,02Dh,03Dh,008h,009h         ;08-0f
  2164                                                          db      071h,077h,065h,072h,074h,079h,075h,069h         ;10-17
  2165                                                          db      06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h         ;18-1f
  2166                                                          db      064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh         ;20-27
  2167                                                          db      027h,060h,000h,05Ch,07Ah,078h,063h,076h         ;28-2f
  2168                                                          db      062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah         ;30-37
  2169                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;38-3f
  2170                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;40-47
  2171                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;48-4f
  2172                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;50-57
  2173                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;58-5f
  2174                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;60-67
  2175                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;68-6f
  2176                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;70-77
  2177                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;78-7f
  2178                                  tscan2shift             db      000h,01Bh,021h,040h,023h,024h,025h,05Eh         ;80-87
  2179                                                          db      026h,02Ah,028h,029h,05Fh,02Bh,008h,000h         ;88-8f
  2180                                                          db      051h,057h,045h,052h,054h,059h,055h,049h         ;90-97
  2181                                                          db      04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h         ;98-9f
  2182                                                          db      044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah         ;a0-a7
  2183                                                          db      022h,07Eh,000h,07Ch,05Ah,058h,043h,056h         ;a8-af
  2184                                                          db      042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah         ;b0-b7
  2185                                                          db      000h,020h,000h,000h,000h,000h,000h,000h         ;b8-bf
  2186                                                          db      000h,000h,000h,000h,000h,000h,000h,037h         ;c0-c7
  2187                                                          db      038h,039h,02Dh,034h,035h,036h,02Bh,031h         ;c8-cf
  2188                                                          db      032h,033h,030h,02Eh,000h,000h,000h,000h         ;d0-d7
  2189                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;d8-df
  2190                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e0-e7
  2191                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;e8-ef
  2192                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f0-f7
  2193                                                          db      000h,000h,000h,000h,000h,000h,000h,000h         ;f8-ff
  2194                                  ;-----------------------------------------------------------------------------------------------------------------------
  2195                                  ;
  2196                                  ;       IRQ2    Secondary 8259A Cascade Hardware Interrupt
  2197                                  ;
  2198                                  ;-----------------------------------------------------------------------------------------------------------------------
  2199                                                          menter  iochannel                                       ;secondary 8259A cascade
  2200                                                          push    eax                                             ;save modified regs
  2201                                                          jmp     hwint                                           ;end interrupt and return
  2202                                  ;-----------------------------------------------------------------------------------------------------------------------
  2203                                  ;
  2204                                  ;       IRQ3    Communication Port 2 Hardware Interrupt
  2205                                  ;
  2206                                  ;-----------------------------------------------------------------------------------------------------------------------
  2207                                                          menter  com2                                            ;serial port 2 interrupt
  2208                                                          push    eax                                             ;save modified regs
  2209                                                          jmp     hwint                                           ;end interrupt and return
  2210                                  ;-----------------------------------------------------------------------------------------------------------------------
  2211                                  ;
  2212                                  ;       IRQ4    Communication Port 1 Hardware Interrupt
  2213                                  ;
  2214                                  ;-----------------------------------------------------------------------------------------------------------------------
  2215                                                          menter  com1                                            ;serial port 1 interrupt
  2216                                                          push    eax                                             ;save modified regs
  2217                                                          jmp     hwint                                           ;end interrupt and return
  2218                                  ;-----------------------------------------------------------------------------------------------------------------------
  2219                                  ;
  2220                                  ;       IRQ5    Parallel Port 2 Hardware Interrupt
  2221                                  ;
  2222                                  ;-----------------------------------------------------------------------------------------------------------------------
  2223                                                          menter  lpt2                                            ;parallel port 2 interrupt
  2224                                                          push    eax                                             ;save modified regs
  2225                                                          jmp     hwint                                           ;end interrupt and return
  2226                                  ;-----------------------------------------------------------------------------------------------------------------------
  2227                                  ;
  2228                                  ;       IRQ6    Diskette Hardware Interrupt
  2229                                  ;
  2230                                  ;-----------------------------------------------------------------------------------------------------------------------
  2231                                                          menter  diskette                                        ;floppy disk interrupt
  2232                                                          push    eax                                             ;save non-volatile regs
  2233                                                          push    ds                                              ;
  2234                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2235                                                          pop     ds                                              ;... into DS register
  2236                                                          mov     al,[wbFDCStatus]                                ;AL = FDC calibration status
  2237                                                          or      al,10000000b                                    ;set IRQ flag
  2238                                                          mov     [wbFDCStatus],al                                ;update FDC calibration status
  2239                                                          pop     ds                                              ;restore non-volatile regs
  2240                                                          jmp     hwint                                           ;end primary PIC interrupt
  2241                                  ;-----------------------------------------------------------------------------------------------------------------------
  2242                                  ;
  2243                                  ;       IRQ7    Parallel Port 1 Hardware Interrupt
  2244                                  ;
  2245                                  ;-----------------------------------------------------------------------------------------------------------------------
  2246                                                          menter  lpt1                                            ;parallel port 1 interrupt
  2247                                                          push    eax                                             ;save modified regs
  2248                                                          jmp     hwint                                           ;end interrupt and return
  2249                                  ;-----------------------------------------------------------------------------------------------------------------------
  2250                                  ;
  2251                                  ;       IRQ8    Real-time Clock Hardware Interrupt
  2252                                  ;
  2253                                  ;-----------------------------------------------------------------------------------------------------------------------
  2254                                                          menter  rtclock                                         ;real-time clock interrupt
  2255                                                          push    eax                                             ;save modified regs
  2256                                                          jmp     hwwint                                          ;end interrupt and return
  2257                                  ;-----------------------------------------------------------------------------------------------------------------------
  2258                                  ;
  2259                                  ;       IRQ9    CGA Vertical Retrace Hardware Interrupt
  2260                                  ;
  2261                                  ;-----------------------------------------------------------------------------------------------------------------------
  2262                                                          menter  retrace                                         ;CGA vertical retrace interrupt
  2263                                                          push    eax                                             ;save modified regs
  2264                                                          jmp     hwwint                                          ;end interrupt and return
  2265                                  ;-----------------------------------------------------------------------------------------------------------------------
  2266                                  ;
  2267                                  ;       IRQ10   Reserved Hardware Interrupt
  2268                                  ;
  2269                                  ;-----------------------------------------------------------------------------------------------------------------------
  2270                                                          menter  irq10                                           ;reserved
  2271                                                          push    eax                                             ;save modified regs
  2272                                                          jmp     hwwint                                          ;end interrupt and return
  2273                                  ;-----------------------------------------------------------------------------------------------------------------------
  2274                                  ;
  2275                                  ;       IRQ11   Reserved Hardware Interrupt
  2276                                  ;
  2277                                  ;-----------------------------------------------------------------------------------------------------------------------
  2278                                                          menter  irq11                                           ;reserved
  2279                                                          push    eax                                             ;save modified regs
  2280                                                          jmp     hwwint                                          ;end interrupt and return
  2281                                  ;-----------------------------------------------------------------------------------------------------------------------
  2282                                  ;
  2283                                  ;       IRQ12   PS/2 Mouse Hardware Interrupt
  2284                                  ;
  2285                                  ;-----------------------------------------------------------------------------------------------------------------------
  2286                                                          menter  ps2mouse                                        ;PS/2 mouse interrupt
  2287                                                          push    eax                                             ;save modified regs
  2288                                                          jmp     hwwint                                          ;end interrupt and return
  2289                                  ;-----------------------------------------------------------------------------------------------------------------------
  2290                                  ;
  2291                                  ;       IRQ13   Coprocessor Hardware Interrupt
  2292                                  ;
  2293                                  ;-----------------------------------------------------------------------------------------------------------------------
  2294                                                          menter  coprocessor                                     ;coprocessor interrupt
  2295                                                          push    eax                                             ;save modified regs
  2296                                                          jmp     hwwint                                          ;end interrupt and return
  2297                                  ;-----------------------------------------------------------------------------------------------------------------------
  2298                                  ;
  2299                                  ;       IRQ14   Fixed Disk Hardware Interrupt
  2300                                  ;
  2301                                  ;-----------------------------------------------------------------------------------------------------------------------
  2302                                                          menter  fixeddisk                                       ;fixed disk interrupt
  2303                                                          push    eax                                             ;save modified regs
  2304                                                          jmp     hwwint                                          ;end interrupt and return
  2305                                  ;-----------------------------------------------------------------------------------------------------------------------
  2306                                  ;
  2307                                  ;       IRQ15   Reserved Hardware Interrupt
  2308                                  ;
  2309                                  ;-----------------------------------------------------------------------------------------------------------------------
  2310                                                          menter  irq15                                           ;reserved
  2311                                                          push    eax                                             ;save modified regs
  2312                                                          jmp     hwwint                                          ;end interrupt and return
  2313                                  ;-----------------------------------------------------------------------------------------------------------------------
  2314                                  ;
  2315                                  ;       Exit from hardware interrupt
  2316                                  ;
  2317                                  ;-----------------------------------------------------------------------------------------------------------------------
  2318                                  hwwint                  call    PutSecondaryEndOfInt                            ;send EOI to secondary PIC
  2319                                                          jmp     hwint90                                         ;skip ahead
  2320                                  hwint                   call    PutPrimaryEndOfInt                              ;send EOI to primary PIC
  2321                                  hwint90                 pop     eax                                             ;restore modified regs
  2322                                                          iretd                                                   ;return from interrupt
  2323                                  ;-----------------------------------------------------------------------------------------------------------------------
  2324                                  ;
  2325                                  ;       INT 30h Operating System Software Service Interrupt
  2326                                  ;
  2327                                  ;       Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2328                                  ;       any task. These routines include low-level i/o functions that shield applications from having to handle
  2329                                  ;       device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2330                                  ;       the entry address of the specific function from a table.
  2331                                  ;
  2332                                  ;-----------------------------------------------------------------------------------------------------------------------
  2333                                                          menter  svc
  2334                                                          cmp     al,maxtsvc                                      ;is our function out of range?
  2335                                                          jae     svc90                                           ;yes, skip ahead
  2336                                                          movzx   eax,al                                          ;function
  2337                                                          shl     eax,2                                           ;offset into table
  2338                                                          call    dword [cs:tsvc+eax]                             ;far call to indirect address
  2339                                  svc90                   iretd                                                   ;return from interrupt
  2340                                  ;-----------------------------------------------------------------------------------------------------------------------
  2341                                  ;
  2342                                  ;       Service Request Table
  2343                                  ;
  2344                                  ;
  2345                                  ;       These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2346                                  ;
  2347                                  ;-----------------------------------------------------------------------------------------------------------------------
  2348                                  tsvc                    tsvce   ClearConsoleScreen                              ;clear console screen
  2349                                                          tsvce   CompareMemory                                   ;compare memory
  2350                                                          tsvce   GetConsoleString                                ;get string input
  2351                                                          tsvce   PlaceCursor                                     ;place the cursor at the current loc
  2352                                                          tsvce   PutConsoleString                                ;tty output asciiz string
  2353                                                          tsvce   ResetSystem                                     ;reset system using 8042 chip
  2354                                                          tsvce   UpperCaseString                                 ;upper-case string
  2355                                  maxtsvc                 equ     ($-tsvc)/4                                      ;function out of range
  2356                                  ;-----------------------------------------------------------------------------------------------------------------------
  2357                                  ;
  2358                                  ;       Service Request Macros
  2359                                  ;
  2360                                  ;       These macros provide positional parameterization of service request calls.
  2361                                  ;
  2362                                  ;-----------------------------------------------------------------------------------------------------------------------
  2363                                  %macro                  clearConsoleScreen 0
  2364                                                          mov     al,eClearConsoleScreen                          ;function code
  2365                                                          int     _svc                                            ;invoke OS service
  2366                                  %endmacro
  2367                                  %macro                  compareMemory 0
  2368                                                          mov     al,eCompareMemory                               ;function code
  2369                                                          int     _svc                                            ;invoke OS service
  2370                                  %endmacro
  2371                                  %macro                  getConsoleString 4
  2372                                                          mov     edx,%1                                          ;buffer address
  2373                                                          mov     ecx,%2                                          ;max characters
  2374                                                          mov     bh,%3                                           ;echo indicator
  2375                                                          mov     bl,%4                                           ;terminator
  2376                                                          mov     al,eGetConsoleString                            ;function code
  2377                                                          int     _svc                                            ;invoke OS service
  2378                                  %endmacro
  2379                                  %macro                  placeCursor 0
  2380                                                          mov     al,ePlaceCursor                                 ;function code
  2381                                                          int     _svc                                            ;invoke OS service
  2382                                  %endmacro
  2383                                  %macro                  putConsoleString 1
  2384                                                          mov     edx,%1                                          ;string address
  2385                                                          mov     al,ePutConsoleString                            ;function code
  2386                                                          int     _svc                                            ;invoke OS service
  2387                                  %endmacro
  2388                                  %macro                  resetSystem 0
  2389                                                          mov     al,eResetSystem                                 ;function code
  2390                                                          int     _svc                                            ;invoke OS service
  2391                                  %endmacro
  2392                                  %macro                  upperCaseString 0
  2393                                                          mov     al,eUpperCaseString                             ;function code
  2394                                                          int     _svc                                            ;invoke OS service
  2395                                  %endmacro
  2396                                  ;=======================================================================================================================
  2397                                  ;
  2398                                  ;       Kernel Function Library
  2399                                  ;
  2400                                  ;=======================================================================================================================
  2401                                  ;=======================================================================================================================
  2402                                  ;
  2403                                  ;       String Helper Routines
  2404                                  ;
  2405                                  ;       CompareMemory
  2406                                  ;       UpperCaseString
  2407                                  ;
  2408                                  ;=======================================================================================================================
  2409                                  ;-----------------------------------------------------------------------------------------------------------------------
  2410                                  ;
  2411                                  ;       Routine:        CompareMemory
  2412                                  ;
  2413                                  ;       Description:    This routine compares two byte arrays.
  2414                                  ;
  2415                                  ;       In:             DS:EDX  first source address
  2416                                  ;                       DS:EBX  second source address
  2417                                  ;                       ECX     comparison length
  2418                                  ;
  2419                                  ;       Out:            EDX     first source address
  2420                                  ;                       EBX     second source address
  2421                                  ;                       ECX     0       array 1 = array 2
  2422                                  ;                               <0      array 1 < array 2
  2423                                  ;                               >0      array 1 > array 2
  2424                                  ;
  2425                                  ;-----------------------------------------------------------------------------------------------------------------------
  2426                                  CompareMemory           push    esi                                             ;save non-volatile regs
  2427                                                          push    edi                                             ;
  2428                                                          push    es                                              ;
  2429                                                          push    ds                                              ;copy DS
  2430                                                          pop     es                                              ;... to ES
  2431                                                          mov     esi,edx                                         ;first source address
  2432                                                          mov     edi,ebx                                         ;second source address
  2433                                                          cld                                                     ;forward strings
  2434                                                          rep     cmpsb                                           ;compare bytes
  2435                                                          mov     al,0                                            ;default result
  2436                                                          jz      .10                                             ;branch if arrays equal
  2437                                                          mov     al,1                                            ;positive result
  2438                                                          jnc     .10                                             ;branch if target > source
  2439                                                          mov     al,-1                                           ;negative result
  2440                                  .10                     movsx   ecx,al                                          ;extend sign
  2441                                                          pop     es                                              ;restore non-volatile regs
  2442                                                          pop     edi                                             ;
  2443                                                          pop     esi                                             ;
  2444                                                          ret                                                     ;return
  2445                                  ;-----------------------------------------------------------------------------------------------------------------------
  2446                                  ;
  2447                                  ;       Routine:        UpperCaseString
  2448                                  ;
  2449                                  ;       Description:    This routine places all characters in the given string to upper case.
  2450                                  ;
  2451                                  ;       In:             DS:EDX  string address
  2452                                  ;
  2453                                  ;       Out:            EDX     string address
  2454                                  ;
  2455                                  ;-----------------------------------------------------------------------------------------------------------------------
  2456                                  UpperCaseString         push    esi                                             ;save non-volatile regs
  2457                                                          mov     esi,edx                                         ;string address
  2458                                                          cld                                                     ;forward strings
  2459                                  .10                     lodsb                                                   ;string character
  2460                                                          test    al,al                                           ;null?
  2461                                                          jz      .20                                             ;yes, skip ahead
  2462                                                          cmp     al,EASCIILOWERA                                 ;lower-case? (lower bounds)
  2463                                                          jb      .10                                             ;no, continue
  2464                                                          cmp     al,EASCIILOWERZ                                 ;lower-case? (upper bounds)
  2465                                                          ja      .10                                             ;no, continue
  2466                                                          and     al,EASCIICASEMASK                               ;mask for upper case
  2467                                                          mov     [esi-1],al                                      ;upper character
  2468                                                          jmp     .10                                             ;continue
  2469                                  .20                     pop     esi                                             ;restore non-volatile regs
  2470                                                          ret                                                     ;return
  2471                                  ;=======================================================================================================================
  2472                                  ;
  2473                                  ;       Console Helper Routines
  2474                                  ;
  2475                                  ;       FirstConsoleColumn
  2476                                  ;       GetConsoleChar
  2477                                  ;       GetConsoleString
  2478                                  ;       NextConsoleColumn
  2479                                  ;       NextConsoleRow
  2480                                  ;       PreviousConsoleColumn
  2481                                  ;       PutConsoleChar
  2482                                  ;       PutConsoleHexByte
  2483                                  ;       PutConsoleOIAChar
  2484                                  ;       PutConsoleOIAShift
  2485                                  ;       PutConsoleString
  2486                                  ;       Yield
  2487                                  ;
  2488                                  ;=======================================================================================================================
  2489                                  ;-----------------------------------------------------------------------------------------------------------------------
  2490                                  ;
  2491                                  ;       Routine:        FirstConsoleColumn
  2492                                  ;
  2493                                  ;       Description:    This routine resets the console column to start of the row.
  2494                                  ;
  2495                                  ;       In:             DS      OS data selector
  2496                                  ;
  2497                                  ;-----------------------------------------------------------------------------------------------------------------------
  2498                                  FirstConsoleColumn      xor     al,al                                           ;zero column
  2499                                                          mov     [wbConsoleColumn],al                            ;save column
  2500                                                          ret                                                     ;return
  2501                                  ;-----------------------------------------------------------------------------------------------------------------------
  2502                                  ;
  2503                                  ;       Routine:        GetConsoleChar
  2504                                  ;
  2505                                  ;       Description:    This routine waits for EMSGKEYCHAR message and return character code.
  2506                                  ;
  2507                                  ;       Out:            AL      ASCII character code
  2508                                  ;                       AH      keyboard scan code
  2509                                  ;
  2510                                  ;-----------------------------------------------------------------------------------------------------------------------
  2511                                  GetConsoleChar.10       call    Yield                                           ;pass control or halt
  2512                                  GetConsoleChar          call    GetMessage                                      ;get the next message
  2513                                                          or      eax,eax                                         ;do we have a message?
  2514                                                          jz      GetConsoleChar.10                               ;no, skip ahead
  2515                                                          push    eax                                             ;save key codes
  2516                                                          and     eax,0FFFF0000h                                  ;mask for message type
  2517                                                          cmp     eax,EMSGKEYCHAR                                 ;key-char message?
  2518                                                          pop     eax                                             ;restore key codes
  2519                                                          jne     GetConsoleChar                                  ;no, try again
  2520                                                          and     eax,0000ffffh                                   ;mask for key codes
  2521                                                          ret                                                     ;return
  2522                                  ;-----------------------------------------------------------------------------------------------------------------------
  2523                                  ;
  2524                                  ;       Routine:        GetConsoleString
  2525                                  ;
  2526                                  ;       Description:    This routine accepts keyboard input into a buffer.
  2527                                  ;
  2528                                  ;       In:             DS:EDX  target buffer address
  2529                                  ;                       ECX     maximum number of characters to accept
  2530                                  ;                       BH      echo to terminal
  2531                                  ;                       BL      terminating character
  2532                                  ;
  2533                                  ;-----------------------------------------------------------------------------------------------------------------------
  2534                                  GetConsoleString        push    ecx                                             ;save non-volatile regs
  2535                                                          push    esi                                             ;
  2536                                                          push    edi                                             ;
  2537                                                          push    es                                              ;
  2538                                                          push    ds                                              ;load data segment selector ...
  2539                                                          pop     es                                              ;... into extra segment register
  2540                                                          mov     edi,edx                                         ;edi = target buffer
  2541                                                          push    ecx                                             ;save maximum characters
  2542                                                          xor     al,al                                           ;zero register
  2543                                                          cld                                                     ;forward strings
  2544                                                          rep     stosb                                           ;zero fill buffer
  2545                                                          pop     ecx                                             ;maximum characters
  2546                                                          mov     edi,edx                                         ;edi = target buffer
  2547                                                          mov     esi,edx                                         ;esi = target buffer
  2548                                  .10                     jecxz   .50                                             ;exit if max-length is zero
  2549                                  .20                     call    GetConsoleChar                                  ;al = next input char
  2550                                                          cmp     al,bl                                           ;is this the terminator?
  2551                                                          je      .50                                             ;yes, exit
  2552                                                          cmp     al,EASCIIBACKSPACE                              ;is this a backspace?
  2553                                                          jne     .30                                             ;no, skip ahead
  2554                                                          cmp     esi,edi                                         ;at start of buffer?
  2555                                                          je      .20                                             ;yes, get next character
  2556                                                          dec     edi                                             ;backup target pointer
  2557                                                          mov     byte [edi],0                                    ;zero previous character
  2558                                                          inc     ecx                                             ;increment remaining chars
  2559                                                          test    bh,1                                            ;echo to console?
  2560                                                          jz      .20                                             ;no, get next character
  2561                                                          call    PreviousConsoleColumn                           ;backup console position
  2562                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2563                                                          call    PutConsoleChar                                  ;write space to console
  2564                                                          call    PlaceCursor                                     ;position the cursor
  2565                                                          jmp     .20                                             ;get next character
  2566                                  .30                     cmp     al,EASCIISPACE                                  ;printable? (lower bounds)
  2567                                                          jb      .20                                             ;no, get another character
  2568                                                          cmp     al,EASCIITILDE                                  ;printable? (upper bounds)
  2569                                                          ja      .20                                             ;no, get another character
  2570                                                          stosb                                                   ;store character in buffer
  2571                                                          test    bh,1                                            ;echo to console?
  2572                                                          jz      .40                                             ;no, skip ahead
  2573                                                          call    PutConsoleChar                                  ;write character to console
  2574                                                          call    NextConsoleColumn                               ;advance console position
  2575                                                          call    PlaceCursor                                     ;position the cursor
  2576                                  .40                     dec     ecx                                             ;decrement remaining chars
  2577                                                          jmp     .10                                             ;next
  2578                                  .50                     xor     al,al                                           ;null
  2579                                                          stosb                                                   ;terminate buffer
  2580                                                          pop     es                                              ;restore non-volatile regs
  2581                                                          pop     edi                                             ;
  2582                                                          pop     esi                                             ;
  2583                                                          pop     ecx                                             ;
  2584                                                          ret                                                     ;return
  2585                                  ;-----------------------------------------------------------------------------------------------------------------------
  2586                                  ;
  2587                                  ;       Routine:        NextConsoleColumn
  2588                                  ;
  2589                                  ;       Description:    This routine advances the console position one column. The columnn is reset to zero and the row
  2590                                  ;                       incremented if the end of the current row is reached.
  2591                                  ;
  2592                                  ;       In:             DS      OS data selector
  2593                                  ;
  2594                                  ;-----------------------------------------------------------------------------------------------------------------------
  2595                                  NextConsoleColumn       mov     al,[wbConsoleColumn]                            ;current column
  2596                                                          inc     al                                              ;increment column
  2597                                                          mov     [wbConsoleColumn],al                            ;save column
  2598                                                          cmp     al,ECONCOLS                                     ;end of row?
  2599                                                          jb      .10                                             ;no, skip ahead
  2600                                                          call    FirstConsoleColumn                              ;reset column to start of row
  2601                                                          call    NextConsoleRow                                  ;line feed to next row
  2602                                  .10                     ret                                                     ;return
  2603                                  ;-----------------------------------------------------------------------------------------------------------------------
  2604                                  ;
  2605                                  ;       Routine:        NextConsoleRow
  2606                                  ;
  2607                                  ;       Description:    This routine advances the console position one line. Scroll the screen one row if needed.
  2608                                  ;
  2609                                  ;       In:             DS      OS data selector
  2610                                  ;
  2611                                  ;-----------------------------------------------------------------------------------------------------------------------
  2612                                  NextConsoleRow          mov     al,[wbConsoleRow]                               ;current row
  2613                                                          inc     al                                              ;increment row
  2614                                                          mov     [wbConsoleRow],al                               ;save row
  2615                                                          cmp     al,ECONROWS                                     ;end of screen?
  2616                                                          jb      .10                                             ;no, skip ahead
  2617                                                          call    ScrollConsoleRow                                ;scroll up one row
  2618                                                          mov     al,[wbConsoleRow]                               ;row
  2619                                                          dec     al                                              ;decrement row
  2620                                                          mov     [wbConsoleRow],al                               ;save row
  2621                                  .10                     ret                                                     ;return
  2622                                  ;-----------------------------------------------------------------------------------------------------------------------
  2623                                  ;
  2624                                  ;       Routine:        PreviousConsoleColumn
  2625                                  ;
  2626                                  ;       Description:    This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2627                                  ;                       the column is set to the last position in the row and the row is decremented.
  2628                                  ;
  2629                                  ;       In:             DS      OS data selector
  2630                                  ;
  2631                                  ;-----------------------------------------------------------------------------------------------------------------------
  2632                                  PreviousConsoleColumn   mov     al,[wbConsoleColumn]                            ;current column
  2633                                                          or      al,al                                           ;start of row?
  2634                                                          jnz     .10                                             ;no, skip ahead
  2635                                                          mov     ah,[wbConsoleRow]                               ;current row
  2636                                                          or      ah,ah                                           ;top of screen?
  2637                                                          jz      .20                                             ;yes, exit with no change
  2638                                                          dec     ah                                              ;decrement row
  2639                                                          mov     [wbConsoleRow],ah                               ;save row
  2640                                                          mov     al,ECONCOLS                                     ;set maximum column
  2641                                  .10                     dec     al                                              ;decrement column
  2642                                                          mov     [wbConsoleColumn],al                            ;save column
  2643                                  .20                     ret                                                     ;return
  2644                                  ;-----------------------------------------------------------------------------------------------------------------------
  2645                                  ;
  2646                                  ;       Routine:        PutConsoleChar
  2647                                  ;
  2648                                  ;       Description:    This routine writes one ASCII character to the console screen.
  2649                                  ;
  2650                                  ;       In:             AL      ASCII character
  2651                                  ;                       DS      OS data selector
  2652                                  ;
  2653                                  ;-----------------------------------------------------------------------------------------------------------------------
  2654                                  PutConsoleChar          push    ecx                                             ;save non-volatile regs
  2655                                                          push    es                                              ;
  2656                                                          push    EGDTCGA                                         ;load CGA selector ...
  2657                                                          pop     es                                              ;... into extra segment reg
  2658                                                          mov     cl,[wbConsoleColumn]                            ;column
  2659                                                          mov     ch,[wbConsoleRow]                               ;row
  2660                                                          call    SetConsoleChar                                  ;put character at row, column
  2661                                                          pop     es                                              ;restore non-volatile regs
  2662                                                          pop     ecx                                             ;
  2663                                                          ret                                                     ;return
  2664                                  ;-----------------------------------------------------------------------------------------------------------------------
  2665                                  ;
  2666                                  ;       Routine:        PutConsoleHexByte
  2667                                  ;
  2668                                  ;       Description:    This routine writes two ASCII characters to the console representing a byte value.
  2669                                  ;
  2670                                  ;       In:             AL      byte value
  2671                                  ;                       CL      column
  2672                                  ;                       CH      row
  2673                                  ;                       DS      OS data selector
  2674                                  ;                       ES      CGA selector
  2675                                  ;
  2676                                  ;-----------------------------------------------------------------------------------------------------------------------
  2677                                  PutConsoleHexByte       push    ebx                                             ;save non-volatile regs
  2678                                                          mov     bl,al                                           ;save byte value
  2679                                                          shr     al,4                                            ;hi-order nybble
  2680                                                          or      al,030h                                         ;apply ASCII zone
  2681                                                          cmp     al,03ah                                         ;numeric?
  2682                                                          jb      .10                                             ;yes, skip ahead
  2683                                                          add     al,7                                            ;add ASCII offset for alpha
  2684                                  .10                     call    SetConsoleChar                                  ;display ASCII character
  2685                                                          mov     al,bl                                           ;byte value
  2686                                                          and     al,0fh                                          ;lo-order nybble
  2687                                                          or      al,30h                                          ;apply ASCII zone
  2688                                                          cmp     al,03ah                                         ;numeric?
  2689                                                          jb      .20                                             ;yes, skip ahead
  2690                                                          add     al,7                                            ;add ASCII offset for alpha
  2691                                  .20                     call    SetConsoleChar                                  ;display ASCII character
  2692                                                          pop     ebx                                             ;restore non-volatile regs
  2693                                                          ret                                                     ;return
  2694                                  ;-----------------------------------------------------------------------------------------------------------------------
  2695                                  ;
  2696                                  ;       Routine:        PutConsoleOIAChar
  2697                                  ;
  2698                                  ;       Description:    This routine updates the Operator Information Area (OIA).
  2699                                  ;
  2700                                  ;       In:             DS      OS data selector
  2701                                  ;
  2702                                  ;-----------------------------------------------------------------------------------------------------------------------
  2703                                  PutConsoleOIAChar       push    ebx                                             ;save non-volatile regs
  2704                                                          push    ecx                                             ;
  2705                                                          push    esi                                             ;
  2706                                                          push    ds                                              ;
  2707                                                          push    es                                              ;
  2708                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  2709                                                          pop     ds                                              ;... into data segment register
  2710                                                          push    EGDTCGA                                         ;load CGA selector ...
  2711                                                          pop     es                                              ;... into extra segment register
  2712                                                          mov     esi,wbConsoleScan0                              ;scan codes address
  2713                                                          mov     bh,ECONOIAROW                                   ;OIA row
  2714                                                          mov     bl,0                                            ;starting column
  2715                                                          mov     ecx,6                                           ;maximum scan codes
  2716                                  .10                     push    ecx                                             ;save remaining count
  2717                                                          mov     ecx,ebx                                         ;row, column
  2718                                                          lodsb                                                   ;read scan code
  2719                                                          or      al,al                                           ;scan code present?
  2720                                                          jz      .20                                             ;no, skip ahead
  2721                                                          call    PutConsoleHexByte                               ;display scan code
  2722                                                          jmp     .30                                             ;continue
  2723                                  .20                     mov     al,' '                                          ;ASCII space
  2724                                                          call    SetConsoleChar                                  ;display space
  2725                                                          mov     al,' '                                          ;ASCII space
  2726                                                          call    SetConsoleChar                                  ;display space
  2727                                  .30                     add     bl,2                                            ;next column (+2)
  2728                                                          pop     ecx                                             ;restore remaining
  2729                                                          loop    .10                                             ;next code
  2730                                                          mov     al,[wbConsoleChar]                              ;console ASCII character
  2731                                                          cmp     al,32                                           ;printable? (lower-bounds)
  2732                                                          jb      .40                                             ;no, skip ahead
  2733                                                          cmp     al,126                                          ;printable? (upper-bounds)
  2734                                                          ja      .40                                             ;no, skip ahead
  2735                                                          mov     ch,bh                                           ;OIA row
  2736                                                          mov     cl,40                                           ;character display column
  2737                                                          call    SetConsoleChar                                  ;display ASCII character
  2738                                  .40                     pop     es                                              ;restore non-volatile regs
  2739                                                          pop     ds                                              ;
  2740                                                          pop     esi                                             ;
  2741                                                          pop     ecx                                             ;
  2742                                                          pop     ebx                                             ;
  2743                                                          ret                                                     ;return
  2744                                  ;-----------------------------------------------------------------------------------------------------------------------
  2745                                  ;
  2746                                  ;       Routine:        PutConsoleOIAShift
  2747                                  ;
  2748                                  ;       Description:    This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2749                                  ;
  2750                                  ;       In:             BL      shift flags
  2751                                  ;                       BH      lock flags
  2752                                  ;                       DS      OS data selector
  2753                                  ;
  2754                                  ;-----------------------------------------------------------------------------------------------------------------------
  2755                                  PutConsoleOIAShift      push    ecx                                             ;save non-volatile regs
  2756                                                          push    es                                              ;
  2757                                                          push    EGDTCGA                                         ;load CGA selector ...
  2758                                                          pop     es                                              ;... into ES register
  2759                                                          mov     ch,ECONOIAROW                                   ;OIA row
  2760                                                          mov     al,EASCIISPACE                                  ;space is default character
  2761                                                          test    bl,EKEYFSHIFTLEFT                               ;left-shift indicated?
  2762                                                          jz      .10                                             ;no, skip ahead
  2763                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2764                                  .10                     mov     cl,14                                           ;indicator column
  2765                                                          call    SetConsoleChar                                  ;display ASCII character
  2766                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2767                                                          test    bl,EKEYFSHIFTRIGHT                              ;right-shift indicated?
  2768                                                          jz      .20                                             ;no, skip ahead
  2769                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2770                                  .20                     mov     cl,64                                           ;indicator column
  2771                                                          call    SetConsoleChar                                  ;display ASCII character
  2772                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2773                                                          test    bl,EKEYFCTRLLEFT                                ;left-ctrl indicated?
  2774                                                          jz      .30                                             ;no, skip ahead
  2775                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2776                                  .30                     mov     cl,15                                           ;indicator column
  2777                                                          call    SetConsoleChar                                  ;display ASCII character
  2778                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2779                                                          test    bl,EKEYFCTRLRIGHT                               ;right-ctrl indicated?
  2780                                                          jz      .40                                             ;no, skip ahead
  2781                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2782                                  .40                     mov     cl,63                                           ;indicator column
  2783                                                          call    SetConsoleChar                                  ;display ASCII character
  2784                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2785                                                          test    bl,EKEYFALTLEFT                                 ;left-alt indicated?
  2786                                                          jz      .50                                             ;no, skip ahead
  2787                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2788                                  .50                     mov     cl,16                                           ;indicator column
  2789                                                          call    SetConsoleChar                                  ;display ASCII character
  2790                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2791                                                          test    bl,EKEYFALTRIGHT                                ;right-alt indicated?
  2792                                                          jz      .60                                             ;no, skip ahead
  2793                                                          mov     al,'A'                                          ;yes, indicate with 'A'
  2794                                  .60                     mov     cl,62                                           ;indicator column
  2795                                                          call    SetConsoleChar                                  ;display ASCII character
  2796                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2797                                                          test    bh,EKEYFLOCKCAPS                                ;caps-lock indicated?
  2798                                                          jz      .70                                             ;no, skip ahead
  2799                                                          mov     al,'C'                                          ;yes, indicate with 'C'
  2800                                  .70                     mov     cl,78                                           ;indicator column
  2801                                                          call    SetConsoleChar                                  ;display ASCII character
  2802                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2803                                                          test    bh,EKEYFLOCKNUM                                 ;num-lock indicated?
  2804                                                          jz      .80                                             ;no, skip ahead
  2805                                                          mov     al,'N'                                          ;yes, indicate with 'N'
  2806                                  .80                     mov     cl,77                                           ;indicator column
  2807                                                          call    SetConsoleChar                                  ;display ASCII character
  2808                                                          mov     al,EASCIISPACE                                  ;ASCII space
  2809                                                          test    bh,EKEYFLOCKSCROLL                              ;scroll-lock indicated?
  2810                                                          jz      .90                                             ;no, skip ahead
  2811                                                          mov     al,'S'                                          ;yes, indicate with 'S'
  2812                                  .90                     mov     cl,76                                           ;indicator column
  2813                                                          call    SetConsoleChar                                  ;display ASCII character
  2814                                                          pop     es                                              ;restore non-volatile regs
  2815                                                          pop     ecx                                             ;
  2816                                                          ret                                                     ;return
  2817                                  ;-----------------------------------------------------------------------------------------------------------------------
  2818                                  ;
  2819                                  ;       Routine:        PutConsoleString
  2820                                  ;
  2821                                  ;       Description:    This routine writes a sequence of ASCII characters to the console until null and updates the
  2822                                  ;                       console position as needed.
  2823                                  ;
  2824                                  ;       In:             EDX     source address
  2825                                  ;                       DS      OS data selector
  2826                                  ;
  2827                                  ;-----------------------------------------------------------------------------------------------------------------------
  2828                                  PutConsoleString        push    esi                                             ;save non-volatile regs
  2829                                                          mov     esi,edx                                         ;source address
  2830                                                          cld                                                     ;forward strings
  2831                                  .10                     lodsb                                                   ;ASCII character
  2832                                                          or      al,al                                           ;end of string?
  2833                                                          jz      .40                                             ;yes, skip ahead
  2834                                                          cmp     al,EASCIIRETURN                                 ;carriage return?
  2835                                                          jne     .20                                             ;no, skip ahead
  2836                                                          call    FirstConsoleColumn                              ;move to start of row
  2837                                                          jmp     .10                                             ;next character
  2838                                  .20                     cmp     al,EASCIILINEFEED                               ;line feed?
  2839                                                          jne     .30                                             ;no, skip ahead
  2840                                                          call    NextConsoleRow                                  ;move to next row
  2841                                                          jmp     .10                                             ;next character
  2842                                  .30                     call    PutConsoleChar                                  ;output character to console
  2843                                                          call    NextConsoleColumn                               ;advance to next column
  2844                                                          jmp     .10                                             ;next character
  2845                                  .40                     pop     esi                                             ;restore non-volatile regs
  2846                                                          ret                                                     ;return
  2847                                  ;-----------------------------------------------------------------------------------------------------------------------
  2848                                  ;
  2849                                  ;       Routine:        Yield
  2850                                  ;
  2851                                  ;       Description:    This routine passes control to the next ready task or enter halt.
  2852                                  ;
  2853                                  ;-----------------------------------------------------------------------------------------------------------------------
  2854                                  Yield                   sti                                                     ;enable maskagle interrupts
  2855                                                          hlt                                                     ;halt until external interrupt
  2856                                                          ret                                                     ;return
  2857                                  ;=======================================================================================================================
  2858                                  ;
  2859                                  ;       Message Queue Helper Routines
  2860                                  ;
  2861                                  ;       GetMessage
  2862                                  ;       PutMessage
  2863                                  ;
  2864                                  ;=======================================================================================================================
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ;
  2867                                  ;       Routine:        GetMessage
  2868                                  ;
  2869                                  ;       Description:    This routine reads and removes a message from the message queue.
  2870                                  ;
  2871                                  ;       Out:            EAX     lo-order message data
  2872                                  ;                       EDX     hi-order message data
  2873                                  ;
  2874                                  ;                       CY      0 = message read
  2875                                  ;                               1 = no message to read
  2876                                  ;
  2877                                  ;-----------------------------------------------------------------------------------------------------------------------
  2878                                  GetMessage              push    ebx                                             ;save non-volatile regs
  2879                                                          push    ecx                                             ;
  2880                                                          push    ds                                              ;
  2881                                                          push    ELDTMQ                                          ;load message queue selector ...
  2882                                                          pop     ds                                              ;... into data segment register
  2883                                                          mov     ebx,[MQHead]                                    ;head ptr
  2884                                                          mov     eax,[ebx]                                       ;lo-order 32 bits
  2885                                                          mov     edx,[ebx+4]                                     ;hi-order 32 bits
  2886                                                          or      eax,edx                                         ;is queue empty?
  2887                                                          stc                                                     ;assume queue is emtpy
  2888                                                          jz      .20                                             ;yes, skip ahead
  2889                                                          xor     ecx,ecx                                         ;store zero
  2890                                                          mov     [ebx],ecx                                       ;... in lo-order dword
  2891                                                          mov     [ebx+4],ecx                                     ;... in hi-order dword
  2892                                                          add     ebx,8                                           ;next queue element
  2893                                                          and     ebx,03fch                                       ;at end of queue?
  2894                                                          jnz     .10                                             ;no, skip ahead
  2895                                                          mov     bl,8                                            ;reset to 1st entry
  2896                                  .10                     mov     [MQHead],ebx                                    ;save new head ptr
  2897                                                          clc                                                     ;indicate message read
  2898                                  .20                     pop     ds                                              ;restore non-volatile regs
  2899                                                          pop     ecx                                             ;
  2900                                                          pop     ebx                                             ;
  2901                                                          ret                                                     ;return
  2902                                  ;-----------------------------------------------------------------------------------------------------------------------
  2903                                  ;
  2904                                  ;       Routine:        PutMessage
  2905                                  ;
  2906                                  ;       Description:    This routine adda a message to the message queue.
  2907                                  ;
  2908                                  ;       In:             ECX     hi-order data word
  2909                                  ;                       EDX     lo-order data word
  2910                                  ;
  2911                                  ;       Out:            CY      0 = success
  2912                                  ;                               1 = fail: queue is full
  2913                                  ;
  2914                                  ;-----------------------------------------------------------------------------------------------------------------------
  2915                                  PutMessage              push    ds                                              ;save non-volatile regs
  2916                                                          push    ELDTMQ                                          ;load task message queue selector ...
  2917                                                          pop     ds                                              ;... into data segment register
  2918                                                          mov     eax,[MQTail]                                    ;tail ptr
  2919                                                          cmp     dword [eax],0                                   ;is queue full?
  2920                                                          stc                                                     ;assume failure
  2921                                                          jne     .20                                             ;yes, cannot store
  2922                                                          mov     [eax],edx                                       ;store lo-order data
  2923                                                          mov     [eax+4],ecx                                     ;store hi-order data
  2924                                                          add     eax,8                                           ;next queue element adr
  2925                                                          and     eax,03fch                                       ;at end of queue?
  2926                                                          jnz     .10                                             ;no, skip ahead
  2927                                                          mov     al,8                                            ;reset to top of queue
  2928                                  .10                     mov     [MQTail],eax                                    ;save new tail ptr
  2929                                                          clc                                                     ;indicate success
  2930                                  .20                     pop     ds                                              ;restore non-volatile regs
  2931                                                          ret                                                     ;return
  2932                                  ;=======================================================================================================================
  2933                                  ;
  2934                                  ;       Memory-Mapped Video Routines
  2935                                  ;
  2936                                  ;       These routines read and/or write directly to CGA video memory (B800:0)
  2937                                  ;
  2938                                  ;       ClearConsoleScreen
  2939                                  ;       ScrollConsoleRow
  2940                                  ;       SetConsoleChar
  2941                                  ;
  2942                                  ;=======================================================================================================================
  2943                                  ;-----------------------------------------------------------------------------------------------------------------------
  2944                                  ;
  2945                                  ;       Routine:        ClearConsoleScreen
  2946                                  ;
  2947                                  ;       Description:    This routine clears the console (CGA) screen.
  2948                                  ;
  2949                                  ;-----------------------------------------------------------------------------------------------------------------------
  2950                                  ClearConsoleScreen      push    ecx                                             ;save non-volatile regs
  2951                                                          push    edi                                             ;
  2952                                                          push    ds                                              ;
  2953                                                          push    es                                              ;
  2954                                                          push    EGDTOSDATA                                      ;load OS Data selector ...
  2955                                                          pop     ds                                              ;... into DS register
  2956                                                          push    EGDTCGA                                         ;load CGA selector ...
  2957                                                          pop     es                                              ;... into ES register
  2958                                                          mov     eax,ECONCLEARDWORD                              ;initializtion value
  2959                                                          mov     ecx,ECONROWDWORDS*(ECONROWS)                    ;double-words to clear
  2960                                                          xor     edi,edi                                         ;target offset
  2961                                                          cld                                                     ;forward strings
  2962                                                          rep     stosd                                           ;reset screen body
  2963                                                          mov     eax,ECONOIADWORD                                ;OIA attribute and space
  2964                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2965                                                          rep     stosd                                           ;reset OIA line
  2966                                                          xor     al,al                                           ;zero register
  2967                                                          mov     [wbConsoleRow],al                               ;reset console row
  2968                                                          mov     [wbConsoleColumn],al                            ;reset console column
  2969                                                          call    PlaceCursor                                     ;place cursor at current position
  2970                                                          pop     es                                              ;restore non-volatile regs
  2971                                                          pop     ds                                              ;
  2972                                                          pop     edi                                             ;
  2973                                                          pop     ecx                                             ;
  2974                                                          ret                                                     ;return
  2975                                  ;-----------------------------------------------------------------------------------------------------------------------
  2976                                  ;
  2977                                  ;       Routine:        ScrollConsoleRow
  2978                                  ;
  2979                                  ;       Description:    This routine scrolls the console (text) screen up one row.
  2980                                  ;
  2981                                  ;-----------------------------------------------------------------------------------------------------------------------
  2982                                  ScrollConsoleRow        push    ecx                                             ;save non-volatile regs
  2983                                                          push    esi                                             ;
  2984                                                          push    edi                                             ;
  2985                                                          push    ds                                              ;
  2986                                                          push    es                                              ;
  2987                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2988                                                          pop     ds                                              ;... into DS
  2989                                                          push    EGDTCGA                                         ;load CGA video selector ...
  2990                                                          pop     es                                              ;... into ES
  2991                                                          mov     ecx,ECONROWDWORDS*(ECONROWS-1)                  ;double-words to move
  2992                                                          mov     esi,ECONROWBYTES                                ;ESI = source (line 2)
  2993                                                          xor     edi,edi                                         ;EDI = target (line 1)
  2994                                                          cld                                                     ;forward strings
  2995                                                          rep     movsd                                           ;move 24 lines up
  2996                                                          mov     eax,ECONCLEARDWORD                              ;attribute and ASCII space
  2997                                                          mov     ecx,ECONROWDWORDS                               ;double-words per row
  2998                                                          rep     stosd                                           ;clear bottom row
  2999                                                          pop     es                                              ;restore non-volatile regs
  3000                                                          pop     ds                                              ;
  3001                                                          pop     edi                                             ;
  3002                                                          pop     esi                                             ;
  3003                                                          pop     ecx                                             ;
  3004                                                          ret                                                     ;return
  3005                                  ;-----------------------------------------------------------------------------------------------------------------------
  3006                                  ;
  3007                                  ;       Routine:        SetConsoleChar
  3008                                  ;
  3009                                  ;       Description:    This routine outputs an ASCII character at the given row and column.
  3010                                  ;
  3011                                  ;       In:             AL      ASCII character
  3012                                  ;                       CL      column
  3013                                  ;                       CH      row
  3014                                  ;                       ES      CGA selector
  3015                                  ;
  3016                                  ;       Out:            EAX     last target address written (ES:)
  3017                                  ;                       CL      column + 1
  3018                                  ;
  3019                                  ;-----------------------------------------------------------------------------------------------------------------------
  3020                                  SetConsoleChar          mov     dl,al                                           ;ASCII character
  3021                                                          movzx   eax,ch                                          ;row
  3022                                                          mov     ah,ECONCOLS                                     ;cols/row
  3023                                                          mul     ah                                              ;row * cols/row
  3024                                                          add     al,cl                                           ;add column
  3025                                                          adc     ah,0                                            ;handle carry
  3026                                                          shl     eax,1                                           ;screen offset
  3027                                                          mov     [es:eax],dl                                     ;store character
  3028                                                          inc     cl                                              ;next column
  3029                                                          ret                                                     ;return
  3030                                  ;=======================================================================================================================
  3031                                  ;
  3032                                  ;       Input/Output Routines
  3033                                  ;
  3034                                  ;       These routines read and/or write directly to ports.
  3035                                  ;
  3036                                  ;       PlaceCursor
  3037                                  ;       PutPrimaryEndOfInt
  3038                                  ;       PutSecondaryEndOfInt
  3039                                  ;       ResetSystem
  3040                                  ;       SetKeyboardLamps
  3041                                  ;       WaitForKeyInBuffer
  3042                                  ;       WaitForKeyOutBuffer
  3043                                  ;
  3044                                  ;=======================================================================================================================
  3045                                  ;-----------------------------------------------------------------------------------------------------------------------
  3046                                  ;
  3047                                  ;       Routine:        PlaceCursor
  3048                                  ;
  3049                                  ;       Description:    This routine positions the cursor on the console.
  3050                                  ;
  3051                                  ;       In:             DS      OS data selector
  3052                                  ;
  3053                                  ;-----------------------------------------------------------------------------------------------------------------------
  3054                                  PlaceCursor             push    ecx                                             ;save non-volatile regs
  3055                                                          mov     al,[wbConsoleRow]                               ;AL = row
  3056                                                          mov     ah,ECONCOLS                                     ;AH = cols/row
  3057                                                          mul     ah                                              ;row offset
  3058                                                          add     al,[wbConsoleColumn]                            ;add column
  3059                                                          adc     ah,0                                            ;add overflow
  3060                                                          mov     ecx,eax                                         ;screen offset
  3061                                                          mov     dl,ECRTPORTLO                                   ;crt controller port lo
  3062                                                          mov     dh,ECRTPORTHI                                   ;crt controller port hi
  3063                                                          mov     al,ECRTCURLOCHI                                 ;crt cursor loc reg hi
  3064                                                          out     dx,al                                           ;select register
  3065                                                          inc     edx                                             ;data port
  3066                                                          mov     al,ch                                           ;hi-order cursor loc
  3067                                                          out     dx,al                                           ;store hi-order loc
  3068                                                          dec     edx                                             ;register select port
  3069                                                          mov     al,ECRTCURLOCLO                                 ;crt cursor loc reg lo
  3070                                                          out     dx,al                                           ;select register
  3071                                                          inc     edx                                             ;data port
  3072                                                          mov     al,cl                                           ;lo-order cursor loc
  3073                                                          out     dx,al                                           ;store lo-order loc
  3074                                                          pop     ecx                                             ;restore non-volatile regs
  3075                                                          ret                                                     ;return
  3076                                  ;-----------------------------------------------------------------------------------------------------------------------
  3077                                  ;
  3078                                  ;       Routine:        PutPrimaryEndOfInt
  3079                                  ;
  3080                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  3081                                  ;
  3082                                  ;-----------------------------------------------------------------------------------------------------------------------
  3083                                  PutPrimaryEndOfInt      sti                                                     ;enable maskable interrupts
  3084                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3085                                                          out     EPICPORTPRI,al                                  ;send EOI to primary PIC
  3086                                                          ret                                                     ;return
  3087                                  ;-----------------------------------------------------------------------------------------------------------------------
  3088                                  ;
  3089                                  ;       Routine:        PutSecondaryEndOfInt
  3090                                  ;
  3091                                  ;       Description:    This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3092                                  ;
  3093                                  ;-----------------------------------------------------------------------------------------------------------------------
  3094                                  PutSecondaryEndOfInt    sti                                                     ;enable maskable interrupts
  3095                                                          mov     al,EPICEOI                                      ;non-specific end-of-interrupt
  3096                                                          out     EPICPORTSEC,al                                  ;send EOI to secondary PIC
  3097                                                          ret                                                     ;return
  3098                                  ;-----------------------------------------------------------------------------------------------------------------------
  3099                                  ;
  3100                                  ;       Routine:        ResetSystem
  3101                                  ;
  3102                                  ;       Description:    This routine restarts the system using the 8042 controller.
  3103                                  ;
  3104                                  ;       Out:            N/A     This routine does not return.
  3105                                  ;
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107                                  ResetSystem             mov     ecx,001fffffh                                   ;delay to clear ints
  3108                                                          loop    $                                               ;clear interrupts
  3109                                                          mov     al,EKEYBCMDRESET                                ;mask out bit zero
  3110                                                          out     EKEYBPORTSTAT,al                                ;drive bit zero low
  3111                                  .10                     sti                                                     ;enable maskable interrupts
  3112                                                          hlt                                                     ;halt until interrupt
  3113                                                          jmp     .10                                             ;repeat until reset kicks in
  3114                                  ;-----------------------------------------------------------------------------------------------------------------------
  3115                                  ;
  3116                                  ;       Routine:        SetKeyboardLamps
  3117                                  ;
  3118                                  ;       Description:    This routine sends the set/reset mode indicators command to the keyboard device.
  3119                                  ;
  3120                                  ;       In:             BH      00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3121                                  ;
  3122                                  ;-----------------------------------------------------------------------------------------------------------------------
  3123                                  SetKeyboardLamps        call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3124                                                          mov     al,EKEYBCMDLAMPS                                ;set/reset lamps command
  3125                                                          out     EKEYBPORTDATA,al                                ;send command to 8042
  3126                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3127                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3128                                                          call    WaitForKeyInBuffer                              ;wait for input buffer ready
  3129                                                          mov     al,bh                                           ;set/reset lamps value
  3130                                                          out     EKEYBPORTDATA,al                                ;send lamps value
  3131                                                          call    WaitForKeyOutBuffer                             ;wait for 8042 result
  3132                                                          in      al,EKEYBPORTDATA                                ;read 8042 'ACK' (0fah)
  3133                                                          ret                                                     ;return
  3134                                  ;-----------------------------------------------------------------------------------------------------------------------
  3135                                  ;
  3136                                  ;       Routine:        WaitForKeyInBuffer
  3137                                  ;
  3138                                  ;       Description:    This routine waits for keyboard input buffer to be ready for input.
  3139                                  ;
  3140                                  ;       Out:            ZF      1 = Input buffer ready
  3141                                  ;                               0 = Input buffer not ready after timeout
  3142                                  ;
  3143                                  ;-----------------------------------------------------------------------------------------------------------------------
  3144                                  WaitForKeyInBuffer      push    ecx                                             ;save non-volatile regs
  3145                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3146                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3147                                                          test    al,EKEYBBITIN                                   ;is input buffer still full?
  3148                                                          loopnz  .10                                             ;yes, repeat till timeout
  3149                                                          pop     ecx                                             ;restore non-volatile regs
  3150                                                          ret                                                     ;return
  3151                                  ;-----------------------------------------------------------------------------------------------------------------------
  3152                                  ;
  3153                                  ;       Routine:        WaitForKeyOutBuffer
  3154                                  ;
  3155                                  ;       Description:    This routine waits for keyboard output buffer to have data to read.
  3156                                  ;
  3157                                  ;       Out:            ZF      1 = Output buffer has data from controller
  3158                                  ;                               0 = Output buffer empty after timeout
  3159                                  ;
  3160                                  ;-----------------------------------------------------------------------------------------------------------------------
  3161                                  WaitForKeyOutBuffer     push    ecx                                             ;save non-volatile regs
  3162                                                          mov     ecx,EKEYBWAITLOOP                               ;keyboard controller timeout
  3163                                  .10                     in      al,EKEYBPORTSTAT                                ;keyboard status byte
  3164                                                          test    al,EKEYBBITOUT                                  ;output buffer status bit
  3165                                                          loopz   .10                                             ;loop until output buffer bit
  3166                                                          pop     ecx                                             ;restore non-volatile regs
  3167                                                          ret                                                     ;return
  3168                                  ;-----------------------------------------------------------------------------------------------------------------------
  3169                                  ;
  3170                                  ;       End of the Kernel Function Library
  3171                                  ;
  3172                                  ;-----------------------------------------------------------------------------------------------------------------------
  3173                                                          times   8192-($-$$) db 0h                               ;zero fill to end of section
  3174                                  ;=======================================================================================================================
  3175                                  ;
  3176                                  ;       Console Task
  3177                                  ;
  3178                                  ;       The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3179                                  ;       segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3180                                  ;       screen and responds to user commands.
  3181                                  ;
  3182                                  ;=======================================================================================================================
  3183                                  ;-----------------------------------------------------------------------------------------------------------------------
  3184                                  ;
  3185                                  ;       Console Stack                                                           @disk: 007600   @mem:  004000
  3186                                  ;
  3187                                  ;       This is the stack for the console task. It supports 448 nested calls.
  3188                                  ;
  3189                                  ;-----------------------------------------------------------------------------------------------------------------------
  3190                                  section                 constack                                                ;console task stack
  3191                                                          times   1792-($-$$) db 0h                               ;zero fill to end of section
  3192                                  ;-----------------------------------------------------------------------------------------------------------------------
  3193                                  ;
  3194                                  ;       Console Local Descriptor Table                                          @disk: 007d00   @mem:  004700
  3195                                  ;
  3196                                  ;       This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3197                                  ;       aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3198                                  ;       16 descriptors. Six are initially defined.
  3199                                  ;
  3200                                  ;-----------------------------------------------------------------------------------------------------------------------
  3201                                  section                 conldt                                                  ;console local descriptors
  3202                                                          dq      004093004780007Fh                               ;04 TSS alias
  3203                                                          dq      004093004700007Fh                               ;0c LDT alias
  3204                                                          dq      00409300400006FFh                               ;14 stack
  3205                                                          dq      00CF93000000FFFFh                               ;1c data
  3206                                                          dq      00409B0050000FFFh                               ;24 code
  3207                                                          dq      00409300480007FFh                               ;2c message queue
  3208                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3209                                  ;-----------------------------------------------------------------------------------------------------------------------
  3210                                  ;
  3211                                  ;       Console Task State Segment                                              @disk: 007d80   @mem:  004780
  3212                                  ;
  3213                                  ;       This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3214                                  ;       segment. CS to console code.
  3215                                  ;
  3216                                  ;-----------------------------------------------------------------------------------------------------------------------
  3217                                  section                 contss                                                  ;console task state segment
  3218                                                          dd      0                                               ;00 back-link tss
  3219                                                          dd      0700h                                           ;04 esp ring 0
  3220                                                          dd      0014h                                           ;08 ss ring 0
  3221                                                          dd      0700h                                           ;0c esp ring 1
  3222                                                          dd      0014h                                           ;10 es ring 1
  3223                                                          dd      0700h                                           ;14 esp ring 2
  3224                                                          dd      0014h                                           ;18 ss ring 2
  3225                                                          dd      0                                               ;1c cr ring 3
  3226                                                          dd      0                                               ;20 eip
  3227                                                          dd      0200h                                           ;24 eflags
  3228                                                          dd      0                                               ;28 eax
  3229                                                          dd      0                                               ;2c ecx
  3230                                                          dd      0                                               ;30 edx
  3231                                                          dd      0                                               ;34 ebx
  3232                                                          dd      0700h                                           ;38 esp ring 3
  3233                                                          dd      0                                               ;3c ebp
  3234                                                          dd      0                                               ;40 esi
  3235                                                          dd      0                                               ;44 edi
  3236                                                          dd      001Ch                                           ;48 es
  3237                                                          dd      0024h                                           ;4c cs
  3238                                                          dd      0014h                                           ;50 ss ring 3
  3239                                                          dd      001Ch                                           ;54 ds
  3240                                                          dd      0                                               ;58 fs
  3241                                                          dd      0                                               ;5c gs
  3242                                                          dd      EGDTCONSOLELDT                                  ;60 ldt selector in gdt
  3243                                                          times   128-($-$$) db 0h                                ;zero fill to end of section
  3244                                  ;-----------------------------------------------------------------------------------------------------------------------
  3245                                  ;
  3246                                  ;       Console Message Queue                                                   @disk: 007e00   @mem: 004800
  3247                                  ;
  3248                                  ;       The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3249                                  ;       two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3250                                  ;       handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3251                                  ;       event.
  3252                                  ;
  3253                                  ;-----------------------------------------------------------------------------------------------------------------------
  3254                                  section                 conmque                                                 ;console message queue
  3255                                                          dd      8                                               ;head pointer
  3256                                                          dd      8                                               ;tail pointer
  3257                                                          times   510 dd 0                                        ;queue elements
  3258                                  ;-----------------------------------------------------------------------------------------------------------------------
  3259                                  ;
  3260                                  ;       Console Code                                                            @disk: 008600   @mem: 005000
  3261                                  ;
  3262                                  ;       This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3263                                  ;       Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3264                                  ;       task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3265                                  ;       The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3266                                  ;       concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3267                                  ;       board input, echoing to the console screen and responding to user commands.
  3268                                  ;
  3269                                  ;       When control reaches this section, our addressability is set up according to the following diagram.
  3270                                  ;
  3271                                  ;       DS,ES --------> 000000  +-----------------------------------------------+ DS,ES:0000
  3272                                  ;                               |  Real Mode Interrupt Vectors                  |
  3273                                  ;                       000400  +-----------------------------------------------+ DS,ES:0400
  3274                                  ;                               |  Reserved BIOS Memory Area                    |
  3275                                  ;                       000800  +-----------------------------------------------+ DS,ES:0800
  3276                                  ;                               |  Shared Kernel Memory Area                    |
  3277                                  ;                       001000  +-----------------------------------------------+               <-- GDTR
  3278                                  ;                               |  Global Descriptor Table (GDT)                |
  3279                                  ;                       001800  +-----------------------------------------------+               <-- IDTR
  3280                                  ;                               |  Interrupt Descriptor Table (IDT)             |
  3281                                  ;                       002000  +-----------------------------------------------+
  3282                                  ;                               |  Interrupt Handlers                           |
  3283                                  ;                               |  Kernel Function Library                      |
  3284                                  ;       SS -----------> 004000  +===============================================+ SS:0000
  3285                                  ;                               |  Console Task Stack Area                      |
  3286                                  ;       SS:SP --------> 004700  +-----------------------------------------------+ SS:0700       <-- LDTR = GDT.SEL 0050h
  3287                                  ;                               |  Console Task Local Descriptor Table (LDT)    |
  3288                                  ;                       004780  +-----------------------------------------------+               <-- TR  = GDT.SEL 0058h
  3289                                  ;                               |  Console Task Task State Segment (TSS)        |
  3290                                  ;                       004800  +-----------------------------------------------+
  3291                                  ;                               |  Console Task Message Queue                   |
  3292                                  ;       CS,CS:IP -----> 005000  +-----------------------------------------------+ CS:0000
  3293                                  ;                               |  Console Task Code                            |
  3294                                  ;                               |  Console Task Constants                       |
  3295                                  ;                       006000  +===============================================+
  3296                                  ;
  3297                                  ;-----------------------------------------------------------------------------------------------------------------------
  3298                                  section                 concode vstart=05000h                                   ;labels relative to 5000h
  3299                                  ConCode                 call    ConInitializeData                               ;initialize console variables
  3300                                  
  3301                                                          clearConsoleScreen                                      ;clear the console screen
  3302                                                          putConsoleString czTitle                                ;display startup message
  3303                                  .10                     putConsoleString czPrompt                               ;display input prompt
  3304                                                          placeCursor                                             ;set CRT cursor location
  3305                                                          getConsoleString wzConsoleInBuffer,79,1,13              ;accept keyboard input
  3306                                                          putConsoleString czNewLine                              ;newline
  3307                                  
  3308                                                          mov     edx,wzConsoleInBuffer                           ;console input buffer
  3309                                                          mov     ebx,wzConsoleToken                              ;token buffer
  3310                                                          call    ConTakeToken                                    ;handle console input
  3311                                                          mov     edx,wzConsoleToken                              ;token buffer
  3312                                                          call    ConDetermineCommand                             ;determine command number
  3313                                                          cmp     eax,ECONJMPTBLCNT                               ;valid command number?
  3314                                                          jb      .20                                             ;yes, branch
  3315                                  
  3316                                                          putConsoleString czUnknownCommand                       ;display error message
  3317                                  
  3318                                                          jmp     .10                                             ;next command
  3319                                  .20                     shl     eax,2                                           ;index into jump table
  3320                                                          mov     edx,tConJmpTbl                                  ;jump table base address
  3321                                                          mov     eax,[edx+eax]                                   ;command handler routine address
  3322                                                          call    eax                                             ;call command handler
  3323                                                          jmp     .10                                             ;next command
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  ;
  3326                                  ;       Routine:        ConInitializeData
  3327                                  ;
  3328                                  ;       Description:    This routine initializes console task variables.
  3329                                  ;
  3330                                  ;-----------------------------------------------------------------------------------------------------------------------
  3331                                  ConInitializeData       push    ecx                                             ;save non-volatile regs
  3332                                                          push    edi                                             ;
  3333                                                          push    es                                              ;
  3334                                  ;
  3335                                  ;       Initialize console work areas.
  3336                                  ;
  3337                                                          push    EGDTOSDATA                                      ;load OS data selector ...
  3338                                                          pop     es                                              ;... into extra segment register
  3339                                                          mov     edi,ECONDATA                                    ;OS console data address
  3340                                                          xor     al,al                                           ;initialization value
  3341                                                          mov     ecx,ECONDATALEN                                 ;size of OS console data
  3342                                                          cld                                                     ;forward strings
  3343                                                          rep     stosb                                           ;initialize data
  3344                                  ;
  3345                                  ;       Restore and return.
  3346                                  ;
  3347                                                          pop     es                                              ;restore non-volatile regs
  3348                                                          pop     edi                                             ;
  3349                                                          pop     ecx                                             ;
  3350                                                          ret                                                     ;return
  3351                                  ;-----------------------------------------------------------------------------------------------------------------------
  3352                                  ;
  3353                                  ;       Routine:        ConTakeToken
  3354                                  ;
  3355                                  ;       Description:    This routine extracts the next token from the given source buffer.
  3356                                  ;
  3357                                  ;       In:             DS:EDX  source buffer address
  3358                                  ;                       DS:EBX  target buffer address
  3359                                  ;
  3360                                  ;       Out:            DS:EDX  source buffer address
  3361                                  ;                       DS:EBX  target buffer address
  3362                                  ;
  3363                                  ;       Command Form:   Line    = *3( *SP 1*ALNUM )
  3364                                  ;
  3365                                  ;-----------------------------------------------------------------------------------------------------------------------
  3366                                  ConTakeToken            push    esi                                             ;save non-volatile regs
  3367                                                          push    edi                                             ;
  3368                                                          push    es                                              ;
  3369                                                          push    ds                                              ;load data segment selector ...
  3370                                                          pop     es                                              ;... into extra segment reg
  3371                                                          mov     esi,edx                                         ;source buffer address
  3372                                                          mov     edi,ebx                                         ;target buffer address
  3373                                                          mov     byte [edi],0                                    ;null-terminate target buffer
  3374                                                          cld                                                     ;forward strings
  3375                                  .10                     lodsb                                                   ;load byte
  3376                                                          cmp     al,EASCIISPACE                                  ;space?
  3377                                                          je      .10                                             ;yes, continue
  3378                                                          test    al,al                                           ;end of line?
  3379                                                          jz      .40                                             ;yes, branch
  3380                                  .20                     stosb                                                   ;store byte
  3381                                                          lodsb                                                   ;load byte
  3382                                                          test    al,al                                           ;end of line?
  3383                                                          jz      .40                                             ;no, continue
  3384                                                          cmp     al,EASCIISPACE                                  ;space?
  3385                                                          jne     .20                                             ;no, continue
  3386                                  .30                     lodsb                                                   ;load byte
  3387                                                          cmp     al,EASCIISPACE                                  ;space?
  3388                                                          je      .30                                             ;yes, continue
  3389                                                          dec     esi                                             ;pre-position
  3390                                  .40                     mov     byte [edi],0                                    ;terminate buffer
  3391                                                          mov     edi,edx                                         ;source buffer address
  3392                                  .50                     lodsb                                                   ;remaining byte
  3393                                                          stosb                                                   ;move to front of buffer
  3394                                                          test    al,al                                           ;end of line?
  3395                                                          jnz     .50                                             ;no, continue
  3396                                                          pop     es                                              ;restore non-volatile regs
  3397                                                          pop     edi                                             ;
  3398                                                          pop     esi                                             ;
  3399                                                          ret                                                     ;return
  3400                                  ;-----------------------------------------------------------------------------------------------------------------------
  3401                                  ;
  3402                                  ;       Routine:        ConDetermineCommand
  3403                                  ;
  3404                                  ;       Description:    This routine determines the command number for the command at DS:EDX.
  3405                                  ;
  3406                                  ;       input:          DS:EDX  command address
  3407                                  ;
  3408                                  ;       output:         EAX     >=0     = command nbr
  3409                                  ;                               0       = unknown command
  3410                                  ;
  3411                                  ;-----------------------------------------------------------------------------------------------------------------------
  3412                                  ConDetermineCommand     push    ebx                                             ;save non-volatile regs
  3413                                                          push    ecx                                             ;
  3414                                                          push    esi                                             ;
  3415                                                          push    edi                                             ;
  3416                                  
  3417                                                          upperCaseString                                         ;upper-case string at EDX
  3418                                  
  3419                                                          mov     esi,tConCmdTbl                                  ;commands table
  3420                                                          xor     edi,edi                                         ;intialize command number
  3421                                                          cld                                                     ;forward strings
  3422                                  .10                     lodsb                                                   ;command length
  3423                                                          movzx   ecx,al                                          ;command length
  3424                                                          jecxz   .20                                             ;branch if end of table
  3425                                                          mov     ebx,esi                                         ;table entry address
  3426                                                          add     esi,ecx                                         ;next table entry address
  3427                                  
  3428                                                          compareMemory                                           ;compare byte arrays at EDX, EBX
  3429                                  
  3430                                                          jecxz   .20                                             ;branch if equal
  3431                                                          inc     edi                                             ;increment command nbr
  3432                                                          jmp     .10                                             ;repeat
  3433                                  .20                     mov     eax,edi                                         ;command number
  3434                                                          pop     edi                                             ;restore non-volatile regs
  3435                                                          pop     esi                                             ;
  3436                                                          pop     ecx                                             ;
  3437                                                          pop     ebx                                             ;
  3438                                                          ret                                                     ;return
  3439                                  ;-----------------------------------------------------------------------------------------------------------------------
  3440                                  ;
  3441                                  ;       Routine:        ConClear
  3442                                  ;
  3443                                  ;       Description:    This routine handles the CLEAR command and its CLS alias.
  3444                                  ;
  3445                                  ;-----------------------------------------------------------------------------------------------------------------------
  3446                                  ConClear                clearConsoleScreen                                      ;clear console screen
  3447                                                          ret                                                     ;return
  3448                                  ;-----------------------------------------------------------------------------------------------------------------------
  3449                                  ;
  3450                                  ;       Routine:        ConExit
  3451                                  ;
  3452                                  ;       Description:    This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3453                                  ;
  3454                                  ;-----------------------------------------------------------------------------------------------------------------------
  3455                                  ConExit                 resetSystem                                             ;issue system reset
  3456                                                          ret                                                     ;return
  3457                                  ;-----------------------------------------------------------------------------------------------------------------------
  3458                                  ;
  3459                                  ;       Routine:        ConVersion
  3460                                  ;
  3461                                  ;       Description:    This routine handles the VERSION command and its alias, VER.
  3462                                  ;
  3463                                  ;-----------------------------------------------------------------------------------------------------------------------
  3464                                  ConVersion              putConsoleString czTitle                                ;display version message
  3465                                                          ret                                                     ;return
  3466                                  ;-----------------------------------------------------------------------------------------------------------------------
  3467                                  ;
  3468                                  ;       Tables
  3469                                  ;
  3470                                  ;-----------------------------------------------------------------------------------------------------------------------
  3471                                                                                                                  ;---------------------------------------
  3472                                                                                                                  ;  Command Jump Table
  3473                                                                                                                  ;---------------------------------------
  3474                                  tConJmpTbl              equ     $                                               ;command jump table
  3475                                                          dd      ConExit         - ConCode                       ;shutdown command routine offset
  3476                                                          dd      ConVersion      - ConCode                       ;version command routine offset
  3477                                                          dd      ConClear        - ConCode                       ;clear command routine offset
  3478                                                          dd      ConExit         - ConCode                       ;exit command routine offset
  3479                                                          dd      ConExit         - ConCode                       ;quit command routine offset
  3480                                                          dd      ConClear        - ConCode                       ;cls command routine offset
  3481                                                          dd      ConVersion      - ConCode                       ;ver command routine offset
  3482                                  ECONJMPTBLL             equ     ($-tConJmpTbl)                                  ;table length
  3483                                  ECONJMPTBLCNT           equ     ECONJMPTBLL/4                                   ;table entries
  3484                                                                                                                  ;---------------------------------------
  3485                                                                                                                  ;  Command Name Table
  3486                                                                                                                  ;---------------------------------------
  3487                                  tConCmdTbl              equ     $                                               ;command name table
  3488                                                          db      9,"SHUTDOWN",0                                  ;shutdown command
  3489                                                          db      8,"VERSION",0                                   ;version command
  3490                                                          db      6,"CLEAR",0                                     ;clear command
  3491                                                          db      5,"EXIT",0                                      ;exit command
  3492                                                          db      5,"QUIT",0                                      ;quit command
  3493                                                          db      4,"CLS",0                                       ;cls command
  3494                                                          db      4,"VER",0                                       ;ver command
  3495                                                          db      0                                               ;end of table
  3496                                  ;-----------------------------------------------------------------------------------------------------------------------
  3497                                  ;
  3498                                  ;       Constants
  3499                                  ;
  3500                                  ;-----------------------------------------------------------------------------------------------------------------------
  3501                                  czNewLine               db      13,10,0                                         ;new line string
  3502                                  czPrompt                db      ":",0                                           ;prompt string
  3503                                  czTitle                 db      "Custom Operating System 1.0",13,10,0           ;version string
  3504                                  czUnknownCommand        db      "Unknown command",13,10,0                       ;unknown command response string
  3505                                                          times   4096-($-$$) db 0h                               ;zero fill to end of section
  3506                                  %endif
  3507                                  %ifdef BUILDDISK
  3508                                  ;-----------------------------------------------------------------------------------------------------------------------
  3509                                  ;
  3510                                  ;       Free Disk Space                                                         @disk: 009600   @mem:  n/a
  3511                                  ;
  3512                                  ;       Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3513                                  ;
  3514                                  ;-----------------------------------------------------------------------------------------------------------------------
  3515                                  section                 unused                                                  ;unused disk space
  3516                                                          times   EBOOTDISKBYTES-09600h db 0F6h                   ;fill to end of disk image
  3517                                  %endif
  3518                                  ;=======================================================================================================================
  3519                                  ;
  3520                                  ;       End of Program Code
  3521                                  ;
  3522                                  ;=======================================================================================================================
