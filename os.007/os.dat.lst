     1                                  ;=======================================================================================================================
     2                                  ;
     3                                  ;	File:		os.asm
     4                                  ;
     5                                  ;	Project:	os.007
     6                                  ;
     7                                  ;	Description:	In this sample, the console task is expanded to support the handling of a few simple commands,
     8                                  ;			clear, cls, exit, quit, shutdown, ver and version.
     9                                  ;
    10                                  ;	Revised:	July 1, 2017
    11                                  ;
    12                                  ;	Assembly:	nasm os.asm -f bin -o os.dat     -l os.dat.lst     -DBUILDBOOT
    13                                  ;			nasm os.asm -f bin -o os.dsk     -l os.dsk.lst     -DBUILDDISK
    14                                  ;			nasm os.asm -f bin -o os.com     -l os.com.lst     -DBUILDCOM
    15                                  ;			nasm os.asm -f bin -o osprep.com -l osprep.com.lst -DBUILDPREP
    16                                  ;
    17                                  ;	Assembler:	Netwide Assembler (NASM) 2.13.01
    18                                  ;
    19                                  ;			Copyright (C) 2010-2017 by David J. Walling. All Rights Reserved.
    20                                  ;
    21                                  ;=======================================================================================================================
    22                                  ;-----------------------------------------------------------------------------------------------------------------------
    23                                  ;
    24                                  ;	Assembly Directives
    25                                  ;
    26                                  ;	Use one of the following as an assembly directive (-D) with NASM.
    27                                  ;
    28                                  ;	BUILDBOOT	Creates os.dat, a 512-byte boot sector as a standalone file.
    29                                  ;	BUILDDISK	Creates os.dsk, a 1.44MB (3.5") floppy disk image file.
    30                                  ;	BUILDCOM	Creates os.com, the OS loader and kernel as a standalone DOS program.
    31                                  ;	BUILDPREP	Creates osprep.com, a DOS program that prepares a floppy disk to boot the OS
    32                                  ;
    33                                  ;-----------------------------------------------------------------------------------------------------------------------
    34                                  %ifdef BUILDDISK
    35                                  %define BUILDBOOT
    36                                  %define BUILDCOM
    37                                  %endif
    38                                  %ifdef BUILDPREP
    39                                  %define BUILDBOOT
    40                                  %endif
    41                                  ;-----------------------------------------------------------------------------------------------------------------------
    42                                  ;
    43                                  ;	Conventions
    44                                  ;
    45                                  ;	Labels:		Labels within a routine are numeric and begin with a period (.10, .20).
    46                                  ;			Labels within a routine begin at ".10" and increment by 10.
    47                                  ;
    48                                  ;	Comments:	A comment that spans the entire line begins with a semicolon in column 1.
    49                                  ;			A comment that accompanies code on a line begins with a semicolon in column 81.
    50                                  ;			Register names in comments are in upper case.
    51                                  ;			Hexadecimal values in comments are in lower case.
    52                                  ;			Routines are preceded with a comment box that includes the routine name, description, and
    53                                  ;			register contents on entry and exit.
    54                                  ;
    55                                  ;	Alignment:	Assembly instructions (mnemonics) begin in column 25.
    56                                  ;			Assembly operands begin in column 33.
    57                                  ;			Lines should not extend beyond column 120.
    58                                  ;
    59                                  ;	Routines:	Routine names are in mixed case (GetYear, ReadRealTimeClock).
    60                                  ;			Routine names begin with a verb (Get, Read, etc.).
    61                                  ;			Routines should have a single entry address and a single exit instruction (ret, iretd, etc.).
    62                                  ;
    63                                  ;	Constants:	Symbolic constants (equates) are named in all-caps beginning with 'E' (EDATAPORT).
    64                                  ;			Constant stored values are named in camel case, starting with 'c'.
    65                                  ;			The 2nd letter of the constant label indicates the storage type.
    66                                  ;
    67                                  ;			cq......	constant quad-word (dq)
    68                                  ;			cd......	constant double-word (dd)
    69                                  ;			cw......	constant word (dw)
    70                                  ;			cb......	constant byte (db)
    71                                  ;			cz......	constant ASCIIZ (null-terminated) string
    72                                  ;
    73                                  ;	Variables:	Variables are named in camel case, starting with 'w'.
    74                                  ;			The 2nd letter of the variable label indicates the storage type.
    75                                  ;
    76                                  ;			wq......	variable quad-word (resq)
    77                                  ;			wd......	variable double-word (resd)
    78                                  ;			ww......	variable word (resw)
    79                                  ;			wb......	variable byte (resb)
    80                                  ;
    81                                  ;	Literals:	Literal values defined by external standards should be defined as symbolic constants (equates).
    82                                  ;			Hexadecimal literals in code are in upper case with a leading '0' and trailing 'h'. e.g. 01Fh.
    83                                  ;			Binary literal values in source code are encoded with a final 'b', e.g. 1010b.
    84                                  ;			Decimal literal values in source code are strictly numerals, e.g. 2048.
    85                                  ;			Octal literal values are avoided.
    86                                  ;			String literals are enclosed in double quotes, e.g. "Loading OS".
    87                                  ;			Single character literals are enclosed in single quotes, e.g. 'A'.
    88                                  ;
    89                                  ;	Structures:	Structure names are in all-caps (DATETIME).
    90                                  ;			Structure names do not begin with a verb.
    91                                  ;
    92                                  ;	Macros:		Macro names are in camel case (getDateString).
    93                                  ;			Macro names do begin with a verb.
    94                                  ;
    95                                  ;	Registers:	Register names in comments are in upper case.
    96                                  ;			Register names in source code are in lower case.
    97                                  ;
    98                                  ;	Usage:		Registers EBX, ECX, ESI, EDI, EBP, SS, CS, DS and ES are preserved by all OS routines.
    99                                  ;			Registers EAX and ECX are preferred for returning response/result values.
   100                                  ;			Register EBX is preferred for passing a context (structure) address parameter.
   101                                  ;			Registers EAX, EDX, ECX and EBX are preferred for passing integral parameters.
   102                                  ;
   103                                  ;-----------------------------------------------------------------------------------------------------------------------
   104                                  ;=======================================================================================================================
   105                                  ;
   106                                  ;	Equates
   107                                  ;
   108                                  ;	The equate (equ) statement defines a symbolic name for a fixed value so that such a value can be defined and
   109                                  ;	verified once and then used throughout the code. Using symbolic names simplifies searching for where logical
   110                                  ;	values are used. Equate names are in all-caps and begin with the letter 'E'. Equates are grouped into related
   111                                  ;	sets. Hardware-based values are listed first, followed by BIOS, protocol and application values.
   112                                  ;
   113                                  ;=======================================================================================================================
   114                                  ;-----------------------------------------------------------------------------------------------------------------------
   115                                  ;
   116                                  ;	8042 Keyboard Controller						EKEYB...
   117                                  ;
   118                                  ;	The 8042 Keyboard Controller (8042) is a programmable controller that accepts input signals from the keyboard
   119                                  ;	device. It also signals a hardware interrupt to the CPU when the low-order bit of I/O port 64h is set to zero.
   120                                  ;
   121                                  ;-----------------------------------------------------------------------------------------------------------------------
   122                                  EKEYBPORTDATA		equ	060h						;data port
   123                                  EKEYBPORTSTAT		equ	064h						;status port
   124                                  EKEYBCMDRESET		equ	0FEh						;reset bit 0 to restart system
   125                                  EKEYBBITOUT		equ	001h						;output buffer status bit
   126                                  EKEYBBITIN		equ	002h						;input buffer status bit
   127                                  EKEYBCMDLAMPS		equ	0EDh						;set/reset lamps command
   128                                  EKEYBWAITLOOP		equ	010000h						;wait loop
   129                                  										;---------------------------------------
   130                                  										;	Keyboard Scan Codes
   131                                  										;---------------------------------------
   132                                  EKEYBCTRLDOWN		equ	01Dh						;control key down
   133                                  EKEYBPAUSEDOWN		equ	01Dh						;pause key down (e1 1d ... )
   134                                  EKEYBSHIFTLDOWN		equ	02Ah						;left shift key down
   135                                  EKEYBPRTSCRDOWN		equ	02Ah						;print-screen key down (e0 2a ...)
   136                                  EKEYBSLASH		equ	035h						;slash
   137                                  EKEYBSHIFTRDOWN		equ	036h						;right shift key down
   138                                  EKEYBALTDOWN		equ	038h						;alt key down
   139                                  EKEYBCAPSDOWN		equ	03Ah						;caps-lock down
   140                                  EKEYBNUMDOWN		equ	045h						;num-lock down
   141                                  EKEYBSCROLLDOWN		equ	046h						;scroll-lock down
   142                                  EKEYBINSERTDOWN		equ	052h						;insert down (e0 52)
   143                                  EKEYBUP			equ	080h						;up
   144                                  EKEYBCTRLUP		equ	09Dh						;control key up
   145                                  EKEYBSHIFTLUP		equ	0AAh						;left shift key up
   146                                  EKEYBSLASHUP		equ	0B5h						;slash key up
   147                                  EKEYBSHIFTRUP		equ	0B6h						;right shift key up
   148                                  EKEYBPRTSCRUP		equ	0B7h						;print-screen key up (e0 b7 ...)
   149                                  EKEYBALTUP		equ	0B8h						;alt key up
   150                                  EKEYBCAPSUP		equ	0BAh						;caps-lock up
   151                                  EKEYBNUMUP		equ	0C5h						;num-lock up
   152                                  EKEYBSCROLLUP		equ	0C6h						;scroll-lock up
   153                                  EKEYBINSERTUP		equ	0D2h						;insert up (e0 d2)
   154                                  EKEYBCODEEXT0		equ	0E0h						;extended scan code 0
   155                                  EKEYBCODEEXT1		equ	0E1h						;extended scan code 1
   156                                  ;-----------------------------------------------------------------------------------------------------------------------
   157                                  ;
   158                                  ;	8253 Programmable Interrupt Timer					EPIT...
   159                                  ;
   160                                  ;	The Intel 8253 Programmable Interrupt Time (PIT) is a chip that produces a hardware interrupt (IRQ0)
   161                                  ;	approximately 18.2 times per second.
   162                                  ;
   163                                  ;-----------------------------------------------------------------------------------------------------------------------
   164                                  EPITDAYTICKS		equ	1800B0h						;ticks per day
   165                                  ;-----------------------------------------------------------------------------------------------------------------------
   166                                  ;
   167                                  ;	8259 Peripheral Interrupt Controller					EPIC...
   168                                  ;
   169                                  ;	The 8259 Peripheral Interrupt Controller (PIC) is a programmable controller that accepts interrupt signals from
   170                                  ;	external devices and signals a hardware interrupt to the CPU.
   171                                  ;
   172                                  ;-----------------------------------------------------------------------------------------------------------------------
   173                                  EPICPORTPRI		equ	020h						;primary control port 0
   174                                  EPICPORTPRI1		equ	021h						;primary control port 1
   175                                  EPICPORTSEC		equ	0A0h						;secondary control port 0
   176                                  EPICPORTSEC1		equ	0A1h						;secondary control port 1
   177                                  EPICEOI			equ	020h						;non-specific EOI code
   178                                  ;-----------------------------------------------------------------------------------------------------------------------
   179                                  ;
   180                                  ;	6845 Cathode Ray Tube (CRT) Controller					ECRT...
   181                                  ;
   182                                  ;	The Motorola 6845 CRT Controller (CRTC) is a programmable controller
   183                                  ;	for CGA, EGA, VGA and compatible video modes.
   184                                  ;
   185                                  ;-----------------------------------------------------------------------------------------------------------------------
   186                                  ECRTPORTHI		equ	003h						;controller port hi
   187                                  ECRTPORTLO		equ	0D4h						;controller port lo
   188                                  ECRTCURLOCHI		equ	00Eh						;cursor loc reg hi
   189                                  ECRTCURLOCLO		equ	00Fh						;cursor loc reg lo
   190                                  ;-----------------------------------------------------------------------------------------------------------------------
   191                                  ;
   192                                  ;	NEC 765 Floppy Disk Controller (FDC)					EFDC...
   193                                  ;
   194                                  ;	The NEC 765 FDC is a programmable controller for floppy disk drives.
   195                                  ;
   196                                  ;-----------------------------------------------------------------------------------------------------------------------
   197                                  EFDCPORTHI		equ	003h						;controller port hi
   198                                  EFDCPORTLOOUT		equ	0F2h						;digital output register lo
   199                                  EFDCPORTLOSTAT		equ	0F4h						;main status register lo
   200                                  EFDCSTATBUSY		equ	010h						;main status is busy
   201                                  EFDCMOTOROFF		equ	00Ch						;motor off / enable / DMA
   202                                  ;-----------------------------------------------------------------------------------------------------------------------
   203                                  ;
   204                                  ;	x86 Descriptor Access Codes						EACC...
   205                                  ;
   206                                  ;	The x86 architecture supports the classification of memory areas or segments. Segment attributes are defined by
   207                                  ;	structures known as descriptors. Within a descriptor are access type codes that define the type of the segment.
   208                                  ;
   209                                  ;	0.......	Segment is not present in memory (triggers int 11)
   210                                  ;	1.......	Segment is present in memory
   211                                  ;	.LL.....	Segment is of privilege level LL (0,1,2,3)
   212                                  ;	...0....	Segment is a system segment
   213                                  ;	...00010		Local Descriptor Table
   214                                  ;	...00101		Task Gate
   215                                  ;	...010B1		Task State Segment (B:0=Available,1=Busy)
   216                                  ;	...01100		Call Gate (386)
   217                                  ;	...01110		Interrupt Gate (386)
   218                                  ;	...01111		Trap Gate (386)
   219                                  ;	...1...A	Segment is a code or data (A:1=Accesssed)
   220                                  ;	...10DW.		Data (D:1=Expand Down,W:1=Writable)
   221                                  ;	...11CR.		Code (C:1=Conforming,R:1=Readable)
   222                                  ;
   223                                  ;-----------------------------------------------------------------------------------------------------------------------
   224                                  EACCLDT			equ	10000010b					;local descriptor table
   225                                  EACCTASK		equ	10000101b					;task gate
   226                                  EACCTSS			equ	10001001b					;task-state segment
   227                                  EACCGATE		equ	10001100b					;call gate
   228                                  EACCINT			equ	10001110b					;interrupt gate
   229                                  EACCTRAP		equ	10001111b					;trap gate
   230                                  EACCDATA		equ	10010011b					;upward writable data
   231                                  EACCCODE		equ	10011011b					;non-conforming readable code
   232                                  ;-----------------------------------------------------------------------------------------------------------------------
   233                                  ;
   234                                  ;	BIOS Interrupts and Functions						EBIOS...
   235                                  ;
   236                                  ;	Basic Input/Output System (BIOS) functions are grouped and accessed by issuing an interrupt call. Each
   237                                  ;	BIOS interrupt supports several funtions. The function code is typically passed in the AH register.
   238                                  ;
   239                                  ;-----------------------------------------------------------------------------------------------------------------------
   240                                  EBIOSINTVIDEO		equ	010h						;video services interrupt
   241                                  EBIOSFNSETVMODE		equ	000h						;video set mode function
   242                                  EBIOSMODETEXT80		equ	003h						;video mode 80x25 text
   243                                  EBIOSFNTTYOUTPUT	equ	00Eh						;video TTY output function
   244                                  EBIOSINTDISKETTE	equ	013h						;diskette services interrupt
   245                                  EBIOSINTMISC		equ	015h						;miscellaneous services interrupt
   246                                  EBIOSFNINITPROTMODE	equ	089h						;initialize protected mode fn
   247                                  EBIOSINTKEYBOARD	equ	016h						;keyboard services interrupt
   248                                  EBIOSFNKEYSTATUS	equ	001h						;keyboard status function
   249                                  ;-----------------------------------------------------------------------------------------------------------------------
   250                                  ;
   251                                  ;	ASCII									EASCII...
   252                                  ;
   253                                  ;-----------------------------------------------------------------------------------------------------------------------
   254                                  EASCIIBACKSPACE		equ	008h						;backspace
   255                                  EASCIILINEFEED		equ	00Ah						;line feed
   256                                  EASCIIRETURN		equ	00Dh						;carriage return
   257                                  EASCIIESCAPE		equ	01Bh						;escape
   258                                  EASCIISPACE		equ	020h						;space
   259                                  EASCIIUPPERA		equ	041h						;'A'
   260                                  EASCIIUPPERZ		equ	05Ah						;'Z'
   261                                  EASCIILOWERA		equ	061h						;'a'
   262                                  EASCIILOWERZ		equ	07Ah						;'z'
   263                                  EASCIITILDE		equ	07Eh						;'~'
   264                                  EASCIICASE		equ	00100000b					;case bit
   265                                  EASCIICASEMASK		equ	11011111b					;case mask
   266                                  ;-----------------------------------------------------------------------------------------------------------------------
   267                                  ;
   268                                  ;	Boot Sector and Loader Constants					EBOOT...
   269                                  ;
   270                                  ;	Equates in this section support the boot sector and the 16-bit operating system loader, which will be
   271                                  ;	responsible for placing the CPU into protected mode and calling the initial operating system task.
   272                                  ;
   273                                  ;-----------------------------------------------------------------------------------------------------------------------
   274                                  EBOOTSTACKTOP		equ	0100h						;boot sector stack top relative to DS
   275                                  EBOOTSECTORBYTES	equ	512						;bytes per sector
   276                                  EBOOTDISKSECTORS	equ	2880						;sectors per disk
   277                                  EBOOTDISKBYTES		equ	(EBOOTSECTORBYTES*EBOOTDISKSECTORS)		;bytes per disk
   278                                  EBOOTFATBASE		equ	(EBOOTSTACKTOP+EBOOTSECTORBYTES)		;offset of FAT I/O buffer rel to DS
   279                                  EBOOTMAXTRIES		equ	5						;max read retries
   280                                  ;-----------------------------------------------------------------------------------------------------------------------
   281                                  ;	Global Descriptor Table (GDT) Selectors					ESEL...
   282                                  ;-----------------------------------------------------------------------------------------------------------------------
   283                                  ESELDAT			equ	018h						;kernel data selector
   284                                  ESELCGA			equ	020h						;cga video selector
   285                                  ESELOSCODE		equ	048h						;os kernel code selector
   286                                  ESELLOADERLDT		equ	050h						;loader local descriptor table selector
   287                                  ESELLOADERTSS		equ	058h						;loader task state segment selector
   288                                  ESELCONSOLELDT		equ	060h						;console local descriptor table selector
   289                                  ESELCONSOLETSS		equ	068h						;console task state segment selector
   290                                  ;-----------------------------------------------------------------------------------------------------------------------
   291                                  ;	LDT Selectors								ESEL...
   292                                  ;-----------------------------------------------------------------------------------------------------------------------
   293                                  ESELMQ			equ	02Ch						;console task message queue
   294                                  ;-----------------------------------------------------------------------------------------------------------------------
   295                                  ;	Kernel Constants							EKRN...
   296                                  ;-----------------------------------------------------------------------------------------------------------------------
   297                                  EKRNDESLEN		equ	8						;size of descriptor
   298                                  EKRNCODEADR		equ	01000h						;kernel base address (0000:1000)
   299                                  EKRNCODESEG		equ	(EKRNCODEADR >> 4)				;kernel code segment (0100:0000)
   300                                  ;-----------------------------------------------------------------------------------------------------------------------
   301                                  ;	Keyboard Flags								EKEYF...
   302                                  ;-----------------------------------------------------------------------------------------------------------------------
   303                                  EKEYFCTRLLEFT		equ	00000001b					;left control
   304                                  EKEYFSHIFTLEFT		equ	00000010b					;left shift
   305                                  EKEYFALTLEFT		equ	00000100b					;left alt
   306                                  EKEYFCTRLRIGHT		equ	00001000b					;right control
   307                                  EKEYFSHIFTRIGHT		equ	00010000b					;right shift
   308                                  EKEYFSHIFT		equ	00010010b					;left or right shift
   309                                  EKEYFALTRIGHT		equ	00100000b					;right alt
   310                                  EKEYFLOCKSCROLL		equ	00000001b					;scroll-lock flag
   311                                  EKEYFLOCKNUM		equ	00000010b					;num-lock flag
   312                                  EKEYFLOCKCAPS		equ	00000100b					;cap-lock flag
   313                                  EKEYFTIMEOUT		equ	10000000b					;controller timeout
   314                                  ;-----------------------------------------------------------------------------------------------------------------------
   315                                  ;	Console Constants							ECON...
   316                                  ;-----------------------------------------------------------------------------------------------------------------------
   317                                  ECONCOLS		equ	80						;columns per row
   318                                  ECONROWS		equ	24						;console rows
   319                                  ECONOIAROW		equ	24						;operator information area row
   320                                  ECONCOLBYTES		equ	2						;bytes per column
   321                                  ECONROWBYTES		equ	(ECONCOLS*ECONCOLBYTES)				;bytes per row
   322                                  ECONROWDWORDS		equ	(ECONROWBYTES/4)				;double-words per row
   323                                  ECONCLEARDWORD		equ	007200720h					;attribute and ASCII space
   324                                  ECONOIADWORD		equ	070207020h					;attribute and ASCII space
   325                                  ;-----------------------------------------------------------------------------------------------------------------------
   326                                  ;	Kernel Message Identifiers						EMSG...
   327                                  ;-----------------------------------------------------------------------------------------------------------------------
   328                                  EMSGKEYDOWN		equ	041000000h					;key-down
   329                                  EMSGKEYUP		equ	041010000h					;key-up
   330                                  EMSGKEYCHAR		equ	041020000h					;character
   331                                  ;=======================================================================================================================
   332                                  ;
   333                                  ;	Structures
   334                                  ;
   335                                  ;=======================================================================================================================
   336                                  ;-----------------------------------------------------------------------------------------------------------------------
   337                                  ;
   338                                  ;	MQUEUE
   339                                  ;
   340                                  ;	The MQUEUE structure maps memory used for a message queue.
   341                                  ;
   342                                  ;-----------------------------------------------------------------------------------------------------------------------
   343                                  struc			MQUEUE
   344 00000000 <res 00000004>          MQHead			resd	1						;000 head ptr
   345 00000004 <res 00000004>          MQTail			resd	1						;004 tail ptr
   346 00000008 <res 000003F8>          MQData			resd	254						;message queue
   347                                  endstruc
   348                                  ;-----------------------------------------------------------------------------------------------------------------------
   349                                  ;
   350                                  ;	OSDATA
   351                                  ;
   352                                  ;	The OSDATA structure maps low-memory addresses used by the OS. Some of these addresses are predetermined and
   353                                  ;	used by the BIOS.
   354                                  ;
   355                                  ;-----------------------------------------------------------------------------------------------------------------------
   356                                  struc			OSDATA
   357 00000000 <res 00000400>          			resb	0400h						;000 real mode interrupt vectors
   358 00000400 <res 00000002>          			resw	1						;400 COM1 port address
   359 00000402 <res 00000002>          			resw	1						;402 COM2 port address
   360 00000404 <res 00000002>          			resw	1						;404 COM3 port address
   361 00000406 <res 00000002>          			resw	1						;406 COM4 port address
   362 00000408 <res 00000002>          			resw	1						;408 LPT1 port address
   363 0000040A <res 00000002>          			resw	1						;40a LPT2 port address
   364 0000040C <res 00000002>          			resw	1						;40c LPT3 port address
   365 0000040E <res 00000002>          			resw	1						;40e LPT4 port address
   366 00000410 <res 00000002>          			resb	2						;410 equipment list flags
   367 00000412 <res 00000001>          			resb	1						;412 errors in PCjr infrared keybd link
   368 00000413 <res 00000002>          			resw	1						;413 memory size (kb) INT 12h
   369 00000415 <res 00000001>          			resb	1						;415 mfr error test scratchpad
   370 00000416 <res 00000001>          			resb	1						;416 PS/2 BIOS control flags
   371 00000417 <res 00000001>          			resb	1						;417 keyboard flag byte 0
   372 00000418 <res 00000001>          			resb	1						;418 keyboard flag byte 1
   373 00000419 <res 00000001>          			resb	1						;419 alternate keypad entry
   374 0000041A <res 00000002>          			resw	1						;41a keyboard buffer head offset
   375 0000041C <res 00000002>          			resw	1						;41c keyboard buffer tail offset
   376 0000041E <res 00000020>          			resb	32						;41e keyboard buffer
   377 0000043E <res 00000001>          wbFDCStatus		resb	1						;43e drive recalibration status
   378 0000043F <res 00000001>          wbFDCControl		resb	1						;43f FDC motor status/control byte
   379 00000440 <res 00000001>          wbFDCMotor		resb	1						;440 FDC motor timeout byte
   380 00000441 <res 00000001>          			resb	1						;441 status of last diskette operation
   381 00000442 <res 00000007>          			resb	7						;442 NEC diskette controller status
   382 00000449 <res 00000001>          			resb	1						;449 current video mode
   383 0000044A <res 00000002>          			resw	1						;44a screen columns
   384 0000044C <res 00000002>          			resw	1						;44c video regen buffer size
   385 0000044E <res 00000002>          			resw	1						;44e current video page offset
   386 00000450 <res 00000010>          			resw	8						;450 cursor postions of pages 1-8
   387 00000460 <res 00000001>          			resb	1						;460 cursor ending scanline
   388 00000461 <res 00000001>          			resb	1						;461 cursor start scanline
   389 00000462 <res 00000001>          			resb	1						;462 active display page number
   390 00000463 <res 00000002>          			resw	1						;463 CRTC base port address
   391 00000465 <res 00000001>          			resb	1						;465 CRT mode control register value
   392 00000466 <res 00000001>          			resb	1						;466 CGA current color palette mask
   393 00000467 <res 00000002>          			resw	1						;467 CS:IP for 286 return from PROT MODE
   394 00000469 <res 00000003>          			resb	3						;469 vague
   395 0000046C <res 00000004>          wdClockTicks		resd	1						;46c clock ticks
   396 00000470 <res 00000001>          wbClockDays		resb	1						;470 clock days
   397 00000471 <res 00000001>          			resb	1						;471 bios break flag
   398 00000472 <res 00000002>          			resw	1						;472 soft reset
   399 00000474 <res 00000001>          			resb	1						;474 last hard disk operation status
   400 00000475 <res 00000001>          			resb	1						;475 hard disks attached
   401 00000476 <res 00000001>          			resb	1						;476 XT fised disk drive control byte
   402 00000477 <res 00000001>          			resb	1						;477 port offset to current fixed disk adapter
   403 00000478 <res 00000004>          			resb	4						;478 LPT timeout values
   404 0000047C <res 00000004>          			resb	4						;47c COM timeout values
   405 00000480 <res 00000002>          			resw	1						;480 keyboard buffer start offset
   406 00000482 <res 00000002>          			resw	1						;482 keyboard buffer end offset
   407 00000484 <res 00000001>          			resb	1						;484 Rows on screen less 1 (EGA+)
   408 00000485 <res 00000001>          			resb	1						;485 point height of character matrix (EGA+)
   409 00000486 <res 00000001>          			resb	1						;486 PC Jr initial keybd delay
   410 00000487 <res 00000001>          			resb	1						;487 EGA+ video mode ops
   411 00000488 <res 00000001>          			resb	1						;488 EGA feature bit switches
   412 00000489 <res 00000001>          			resb	1						;489 VGA video display data area
   413 0000048A <res 00000001>          			resb	1						;48a EGA+ display combination code
   414 0000048B <res 00000001>          			resb	1						;48b last diskette data rate selected
   415 0000048C <res 00000001>          			resb	1						;48c hard disk status from controller
   416 0000048D <res 00000001>          			resb	1						;48d hard disk error from controller
   417 0000048E <res 00000001>          			resb	1						;48e hard disk interrupt control flag
   418 0000048F <res 00000001>          			resb	1						;48f combination hard/floppy disk card
   419 00000490 <res 00000004>          			resb	4						;490 drive 0,1,2,3 media state
   420 00000494 <res 00000001>          			resb	1						;494 track currently seeked to on drive 0
   421 00000495 <res 00000001>          			resb	1						;495 track currently seeked to on drive 1
   422 00000496 <res 00000001>          			resb	1						;496 keyboard mode/type
   423 00000497 <res 00000001>          			resb	1						;497 keyboard LED flags
   424 00000498 <res 00000004>          			resd	1						;498 pointer to user wait complete flag
   425 0000049C <res 00000004>          			resd	1						;49c user wait time-out value in microseconds
   426 000004A0 <res 00000001>          			resb	1						;4a0 RTC wait function flag
   427 000004A1 <res 00000001>          			resb	1						;4a1 LANA DMA channel flags
   428 000004A2 <res 00000002>          			resb	2						;4a2 status of LANA 0,1
   429 000004A4 <res 00000004>          			resd	1						;4a4 saved hard disk interrupt vector
   430 000004A8 <res 00000004>          			resd	1						;4a8 BIOS video save/override pointer table addr
   431 000004AC <res 00000008>          			resb	8						;4ac reserved
   432 000004B4 <res 00000001>          			resb	1						;4b4 keyboard NMI control flags
   433 000004B5 <res 00000004>          			resd	1						;4b5 keyboard break pending flags
   434 000004B9 <res 00000001>          			resb	1						;4b9 Port 60 single byte queue
   435 000004BA <res 00000001>          			resb	1						;4ba scan code of last key
   436 000004BB <res 00000001>          			resb	1						;4bb NMI buffer head pointer
   437 000004BC <res 00000001>          			resb	1						;4bc NMI buffer tail pointer
   438 000004BD <res 00000010>          			resb	16						;4bd NMI scan code buffer
   439 000004CD <res 00000001>          			resb	1						;4cd unknown
   440 000004CE <res 00000002>          			resw	1						;4de day counter
   441 000004D0 <res 00000020>          			resb	32						;4d0 unknown
   442 000004F0 <res 00000010>          			resb	16						;4f0 intra-app comm area
   443 00000500 <res 00000001>          			resb	1						;500 print-screen status byte
   444 00000501 <res 00000003>          			resb	3						;501 used by BASIC
   445 00000504 <res 00000001>          			resb	1						;504 DOS single diskette mode
   446 00000505 <res 0000000A>          			resb	10						;505 POST work area
   447 0000050F <res 00000001>          			resb	1						;50f BASIC shell flag
   448 00000510 <res 00000002>          			resw	1						;510 BASIC default DS (DEF SEG)
   449 00000512 <res 00000004>          			resd	1						;512 BASIC INT 1C interrupt handler
   450 00000516 <res 00000004>          			resd	1						;516 BASIC INT 23 interrupt handler
   451 0000051A <res 00000004>          			resd	1						;51a BASIC INT 24 interrupt handler
   452 0000051E <res 00000002>          			resw	1						;51e unknown
   453 00000520 <res 00000002>          			resw	1						;520 DOS dynamic storage
   454 00000522 <res 0000000E>          			resb	14						;522 DOS diskette initialization table (INT 1e)
   455 00000530 <res 00000004>          			resb	4						;530 MODE command
   456 00000534 <res 000001CC>          			resb	460						;534 unused
   457 00000700 <res 00000100>          			resb	256						;700 i/o drivers from io.sys/ibmbio.com
   458                                  ;-----------------------------------------------------------------------------------------------------------------------
   459                                  ;
   460                                  ;	OS Variables								@disk: N/A	@mem: 000800
   461                                  ;
   462                                  ;	Operating system variables are system global. They are defined at low memory address 800h and are typically
   463                                  ;	accessed using GDT selector 18H, which defines a 4GB address space at address 0:0. The variables defined here
   464                                  ;	are organized based on the task that usually accesses them.
   465                                  ;
   466                                  ;-----------------------------------------------------------------------------------------------------------------------
   467                                  ;-----------------------------------------------------------------------------------------------------------------------
   468                                  ;
   469                                  ;	Console Task Variables
   470                                  ;
   471                                  ;	These variables are exclusve to the console task. These variables are initialized by the console task when
   472                                  ;	the console task starts.
   473                                  ;
   474                                  ;-----------------------------------------------------------------------------------------------------------------------
   475                                  			align	4
   476                                  ECONDATA		equ	($)
   477 00000800 <res 00000001>          wbConsoleColumn		resb	1						;console column
   478 00000801 <res 00000001>          wbConsoleRow		resb	1						;console row
   479 00000802 <res 00000001>          wbConsoleShift		resb	1						;console shift flags
   480 00000803 <res 00000001>          wbConsoleLock		resb	1						;console lock flags
   481 00000804 <res 00000001>          wbConsoleStatus		resb	1						;controller status
   482 00000805 <res 00000001>          wbConsoleScan0		resb	1						;scan code
   483 00000806 <res 00000001>          wbConsoleScan1		resb	1						;scan code
   484 00000807 <res 00000001>          wbConsoleScan2		resb	1						;scan code
   485 00000808 <res 00000001>          wbConsoleScan3		resb	1						;scan code
   486 00000809 <res 00000001>          wbConsoleScan4		resb	1						;scan code
   487 0000080A <res 00000001>          wbConsoleScan5		resb	1						;scan code
   488 0000080B <res 00000001>          wbConsoleChar		resb	1						;ASCII code
   489 0000080C <res 00000050>          wzConsoleInBuffer	resb	80						;command input buffer
   490 0000085C <res 00000050>          wzConsoleToken		resb	80						;token buffer
   491                                  ECONDATALEN		equ	($-ECONDATA)					;size of console data area
   492                                  ;-----------------------------------------------------------------------------------------------------------------------
   493                                  ;
   494                                  ;	End of OS Variables
   495                                  ;
   496                                  ;-----------------------------------------------------------------------------------------------------------------------
   497                                  endstruc
   498                                  ;-----------------------------------------------------------------------------------------------------------------------
   499                                  ;
   500                                  ;	Macros
   501                                  ;
   502                                  ;	These macros are used to assist in defining descriptor tables and interrupt table offsets.
   503                                  ;
   504                                  ;-----------------------------------------------------------------------------------------------------------------------
   505                                  %macro			mint	1
   506                                  _%1			equ	($-$$) / EKRNDESLEN
   507                                  			dq	((?%1 >> 16) << 32) | (EACCINT << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   508                                  %endmacro
   509                                  %macro			mtrap	1
   510                                  _%1			equ	($-$$) / EKRNDESLEN
   511                                  			dq	((?%1 >> 16) << 32) | (EACCTRAP << 40) | ((ESELOSCODE & 0FFFFh) << 16) | (?%1 & 0FFFFh)
   512                                  %endmacro
   513                                  %macro			menter	1
   514                                  ?%1			equ	($-$$)
   515                                  %endmacro
   516                                  %macro			tsvce	1
   517                                  e%1			equ	($-tsvc)/4
   518                                  			dd	%1
   519                                  %endmacro
   520                                  %ifdef BUILDBOOT
   521                                  ;=======================================================================================================================
   522                                  ;
   523                                  ;	Boot Sector								@disk: 000000	@mem: 007c00
   524                                  ;
   525                                  ;	The first sector of the disk is the boot sector. The BIOS will load the boot sector into memory and pass
   526                                  ;	control to the code at the start of the sector. The boot sector code is responsible for loading the operating
   527                                  ;	system into memory. The boot sector contains a disk parameter table describing the geometry and allocation
   528                                  ;	of the disk. Following the disk parameter table is code to load the operating system kernel into memory.
   529                                  ;
   530                                  ;	The 'cpu' directive limits emitted code to those instructions supported by the most primitive processor
   531                                  ;	we expect to ever execute our code. The 'vstart' parameter indicates addressability of symbols so as to
   532                                  ;	emulating the DOS .COM program model. Although the BIOS is expected to load the boot sector at address 7c00,
   533                                  ;	we do not make that assumption. The CPU starts in 16-bit addressing mode. A three-byte jump instruction is
   534                                  ;	immediately followed by a disk parameter table.
   535                                  ;
   536                                  ;=======================================================================================================================
   537                                  			cpu	8086						;assume minimal CPU
   538                                  section			boot	vstart=0100h					;emulate .COM (CS,DS,ES=PSP) addressing
   539                                  			bits	16						;16-bit code at power-up
   540                                  %ifdef BUILDPREP
   541                                  Boot			jmp	word Prep					;jump to preparation code
   542                                  %else
   543 00000000 E91B00                  Boot			jmp	word Boot.10					;jump over parameter table
   544                                  %endif
   545                                  ;-----------------------------------------------------------------------------------------------------------------------
   546                                  ;
   547                                  ;	Disk Parameter Table
   548                                  ;
   549                                  ;	The disk parameter table informs the BIOS of the floppy disk architecture. Here, we use parameters for the
   550                                  ;	3.5" 1.44MB floppy disk since this format is widely supported by virtual machine hypervisors.
   551                                  ;
   552                                  ;-----------------------------------------------------------------------------------------------------------------------
   553 00000003 437573746F6D4F53        			db	"CustomOS"					;eight-byte label
   554 0000000B 0002                    cwSectorBytes		dw	EBOOTSECTORBYTES				;bytes per sector
   555 0000000D 01                      cbClusterSectors	db	1						;sectors per cluster
   556 0000000E 0100                    cwReservedSectors	dw	1						;reserved sectors
   557 00000010 02                      cbFatCount		db	2						;file allocation table copies
   558 00000011 E000                    cwDirEntries		dw	224						;max directory entries
   559 00000013 400B                    cwDiskSectors		dw	EBOOTDISKSECTORS				;sectors per disk
   560 00000015 F0                      cbDiskType		db	0F0h						;1.44MB
   561 00000016 0900                    cwFatSectors		dw	9						;sectors per FAT copy
   562                                  cbTrackSectors		equ	$						;sectors per track (as byte)
   563 00000018 1200                    cwTrackSectors		dw	18						;sectors per track (as word)
   564 0000001A 0200                    cwDiskSides		dw	2						;sides per disk
   565 0000001C 0000                    cwSpecialSectors	dw	0						;special sectors
   566                                  ;
   567                                  ;	BIOS typically loads the boot sector at absolute address 7c00 and sets the stack pointer at 512 bytes past the
   568                                  ;	end of the boot sector. But, since BIOS code varies, we don't make any assumptions as to where our boot sector
   569                                  ;	is loaded. For example, the initial CS:IP could be 0:7c00, 700:c00, 7c0:0, etc. So, to avoid assumptions, we
   570                                  ;	first normalize CS:IP to get the absolute segment address in BX. The comments below show the effect of this code
   571                                  ;	given several possible starting values for CS:IP.
   572                                  ;
   573                                  										;CS:IP	 0:7c00 700:c00 7c0:0
   574 0000001E E80000                  Boot.10			call	word .20					;[ESP] =   7c21     c21    21
   575                                  .@20			equ	$-$$						;.@20 = 021h
   576 00000021 58                      .20			pop	ax						;AX =	   7c21     c21    21
   577 00000022 83E821                  			sub	ax,.@20						;BX =	   7c00     c00     0
   578 00000025 B104                    			mov	cl,4						;shift count
   579 00000027 D3E8                    			shr	ax,cl						;AX =	    7c0      c0     0
   580 00000029 8CCB                    			mov	bx,cs						;BX =	      0     700   7c0
   581 0000002B 01C3                    			add	bx,ax						;BX =	    7c0     7c0   7c0
   582                                  ;
   583                                  ;	Now, since we are assembling our boot code to emulate the addressing of a .COM file, we want the DS and ES
   584                                  ;	registers to be set to where a Program Segment Prefix (PSP) would be, exactly 100h (256) bytes prior to
   585                                  ;	the start of our code. This will correspond to our assembled data address offsets. Note that we instructed
   586                                  ;	the assembler to produce addresses for our symbols that are offset from our code by 100h. See the "vstart"
   587                                  ;	parameter for the "section" directive above. We also set SS to the PSP and SP to the address of our i/o
   588                                  ;	buffer. This leaves 256 bytes of usable stack from 7b0:300 to 7b0:400.
   589                                  ;
   590 0000002D 83EB10                  			sub	bx,16						;BX = 07b0
   591 00000030 8EDB                    			mov	ds,bx						;DS = 07b0 = psp
   592 00000032 8EC3                    			mov	es,bx						;ES = 07b0 = psp
   593 00000034 8ED3                    			mov	ss,bx						;SS = 07b0 = psp (ints disabled)
   594 00000036 BC0001                  			mov	sp,EBOOTSTACKTOP				;SP = 0100       (ints enabled)
   595                                  ;
   596                                  ;	Our boot addressability is now set up according to the following diagram.
   597                                  ;
   598                                  ;	DS,ES,SS ----->	007b00	+-----------------------------------------------+ DS:0000
   599                                  ;				|  Boot Stack & Boot PSP (Unused)		|
   600                                  ;				|  256 = 100h bytes				|
   601                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ DS:0100  07b0:0100
   602                                  ;				|  Boot Sector (vstart=0100h)			|
   603                                  ;				|  1 sector = 512 = 200h bytes			|
   604                                  ;			007e00	+-----------------------------------------------+ DS:0300
   605                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
   606                                  ;				|  9x512-byte sectors = 4,608 = 1200h bytes	|
   607                                  ;			009000	+-----------------------------------------------+ DS:1500  08f0:0100
   608                                  ;				|  Directory Sector Buffer & Kernel Load Area	|
   609                                  ;			009200	+-----------------------------------------------+ DS:1700
   610                                  ;
   611                                  ;	On entry, DL indicates the drive being booted from.
   612                                  ;
   613 00000039 8816[F801]              			mov	[wbDrive],dl					;[drive] = drive being booted from
   614                                  ;
   615                                  ;	Compute directory i/o buffer address.
   616                                  ;
   617 0000003D A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors
   618 00000040 F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = 0000:1200 = FAT bytes
   619 00000044 050003                  			add	ax,EBOOTFATBASE					;AX = 1500 = end of FAT buffer
   620 00000047 A3[EC01]                			mov	[wwDirBuffer],ax				;[dirbuffer] = 1500
   621                                  ;
   622                                  ;	Compute segment where os.com will be loaded.
   623                                  ;
   624 0000004A D3E8                    			shr	ax,cl						;AX = 0150
   625 0000004C 01D8                    			add	ax,bx						;AX = 0150 + 07b0 = 0900
   626 0000004E 83E810                  			sub	ax,16						;AX = 08f0
   627 00000051 A3[3F01]                			mov	[wwLoadSegment],ax				;[loadsegment] = 08f0
   628                                  ;
   629                                  ;	Set the video mode to 80 column, 25 row, text.
   630                                  ;
   631 00000054 B80300                  			mov	ax,EBIOSFNSETVMODE<<8|EBIOSMODETEXT80		;set mode function, 80x25 text mode
   632 00000057 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   633                                  ;
   634                                  ;	Write a message to the console so we know we have our addressability established.
   635                                  ;
   636 00000059 BE[C501]                			mov	si,czLoadMsg					;loading message
   637 0000005C E84B01                  			call	BootPrint					;display loader message
   638                                  ;
   639                                  ;	Initialize the number of directory sectors to search.
   640                                  ;
   641 0000005F A1[1100]                			mov	ax,[cwDirEntries]				;AX = 224 = max dir entries
   642 00000062 A3[EE01]                			mov	[wwEntriesLeft],ax				;[entriesleft] = 224
   643                                  ;
   644                                  ;	Compute number of directory sectors and initialize overhead count.
   645                                  ;
   646 00000065 89C1                    			mov	cx,ax						;CX = 00e0 = 224 entries
   647 00000067 F726[B801]              			mul	word [cwEntryLen]				;DX:AX = 224 * 32 = 7168
   648 0000006B F736[0B00]              			div	word [cwSectorBytes]				;AX = 7168 / 512 = 14 = dir sectors
   649 0000006F A3[F001]                			mov	[wwOverhead],ax					;[overhead] = 000e
   650                                  ;
   651                                  ;	Compute directory entries per sector.
   652                                  ;
   653 00000072 91                      			xchg	ax,cx						;DX:AX = 0:00e0, DX = 0000e
   654 00000073 F7F1                    			div	cx						;AX = 0010 = entries per dir sector
   655 00000075 A3[F201]                			mov	[wwSectorEntries],ax				;[sectorentries] = 0010
   656                                  ;
   657                                  ;	Compute first logical directory sector and update overhead count.
   658                                  ;
   659 00000078 A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009 = FAT sectors per copy
   660 0000007B F626[1000]              			mul	byte [cbFatCount]				;AX = 0012 = FAT sectors
   661 0000007F 0306[0E00]              			add	ax,[cwReservedSectors]				;AX = 0013 = FAT plus reserved
   662 00000083 0306[1C00]              			add	ax,[cwSpecialSectors]				;AX = 0013 = FAT + reserved + special
   663 00000087 A3[F401]                			mov	[wwLogicalSector],ax				;[logicalsector] = 0013
   664 0000008A 0106[F001]              			add	[wwOverhead],ax					;[overhead] = 0021 = res+spec+FAT+dir
   665                                  ;
   666                                  ;	Read directory sector.
   667                                  ;
   668 0000008E B001                    .30			mov	al,1						;sector count
   669 00000090 A2[F601]                			mov	[wbReadCount],al				;[readcount] = 01
   670 00000093 8B1E[EC01]              			mov	bx,[wwDirBuffer]				;BX = 1500
   671 00000097 E8A700                  			call	ReadSector					;read sector into es:bx
   672                                  ;
   673                                  ;	Setup variables to search this directory sector.
   674                                  ;
   675 0000009A A1[EE01]                			mov	ax,[wwEntriesLeft]				;directory entries to search
   676 0000009D 3B06[F201]              			cmp	ax,[wwSectorEntries]				;need to search more sectors?
   677 000000A1 7603                    			jna	.40						;no, continue
   678 000000A3 A1[F201]                			mov	ax,[wwSectorEntries]				;yes, limit search to sector
   679 000000A6 2906[EE01]              .40			sub	[wwEntriesLeft],ax				;update entries left to searh
   680 000000AA BE[BA01]                			mov	si,cbKernelProgram				;program name
   681 000000AD 8B3E[EC01]              			mov	di,[wwDirBuffer]				;DI = 1500
   682                                  ;
   683                                  ;	Loop through directory sectors searching for kernel program.
   684                                  ;
   685 000000B1 56                      .50			push	si						;save kernel name address
   686 000000B2 57                      			push	di						;save dir i/o buffer address
   687 000000B3 B90B00                  			mov	cx,11						;length of 8+3 name
   688 000000B6 FC                      			cld							;forward strings
   689 000000B7 F3A6                    			repe	cmpsb						;compare entry name
   690 000000B9 5F                      			pop	di						;restore dir i/o buffer address
   691 000000BA 5E                      			pop	si						;restore kernel name address
   692 000000BB 7418                    			je	.60						;exit loop if found
   693 000000BD 033E[B801]              			add	di,[cwEntryLen]					;point to next dir entry
   694 000000C1 48                      			dec	ax						;decrement remaining entries
   695 000000C2 75ED                    			jnz	.50						;next entry
   696                                  ;
   697                                  ;	Repeat search if we are not at the end of the directory.
   698                                  ;
   699 000000C4 FF06[F401]              			inc	word [wwLogicalSector]				;increment logical sector
   700 000000C8 833E[EE01]00            			cmp	word [wwEntriesLeft],0				;done with directory?
   701 000000CD 75BF                    			jne	.30						;no, get next sector
   702 000000CF BE[E001]                			mov	si,czNoKernel					;missing kernel message
   703 000000D2 E9C000                  			jmp	BootExit					;display message and exit
   704                                  ;
   705                                  ;	If we find the kernel program in the directory, read the FAT.
   706                                  ;
   707 000000D5 A1[0E00]                .60			mov	ax,[cwReservedSectors]				;AX = 0001
   708 000000D8 A3[F401]                			mov	[wwLogicalSector],ax				;start past boot sector
   709 000000DB A1[1600]                			mov	ax,[cwFatSectors]				;AX = 0009
   710 000000DE A2[F601]                			mov	[wbReadCount],al				;[readcount] = 09
   711 000000E1 BB0003                  			mov	bx,EBOOTFATBASE					;BX = 0300
   712 000000E4 E85A00                  			call	ReadSector					;read FAT into buffer
   713                                  ;
   714                                  ;	Get the starting cluster of the kernel program and target address.
   715                                  ;
   716 000000E7 8B451A                  			mov	ax,[di+26]					;AX = starting cluster of file
   717 000000EA C41E[3D01]              			les	bx,[wwLoadOffset]				;ES:BX = kernel load add (08F0:0100)
   718                                  ;
   719                                  ;	Read each program cluster into RAM.
   720                                  ;
   721 000000EE 50                      .70			push	ax						;save cluster nbr
   722 000000EF 83E802                  			sub	ax,2						;AX = cluster nbr base 0
   723 000000F2 8A0E[0D00]              			mov	cl,[cbClusterSectors]				;CL = sectors per cluster
   724 000000F6 880E[F601]              			mov	[wbReadCount],cl				;save sectors to read
   725 000000FA 30ED                    			xor	ch,ch						;CX = sectors per cluster
   726 000000FC F7E1                    			mul	cx						;DX:AX = logical cluster sector
   727 000000FE 0306[F001]              			add	ax,[wwOverhead]					;AX = kernel sector nbr
   728 00000102 A3[F401]                			mov	[wwLogicalSector],ax				;save logical sector nbr
   729 00000105 E83900                  			call	ReadSector					;read sectors into ES:BX
   730                                  ;
   731                                  ;	Update buffer pointer for next cluster.
   732                                  ;
   733 00000108 A0[0D00]                			mov	al,[cbClusterSectors]				;AL = sectors per cluster
   734 0000010B 30E4                    			xor	ah,ah						;AX = sectors per cluster
   735 0000010D F726[0B00]              			mul	word [cwSectorBytes]				;DX:AX = cluster bytes
   736 00000111 01C3                    			add	bx,ax						;BX = next cluster target address
   737 00000113 58                      			pop	ax						;AX = restore cluster nbr
   738                                  ;
   739                                  ;	Compute next cluster number.
   740                                  ;
   741 00000114 89C1                    			mov	cx,ax						;CX = cluster nbr
   742 00000116 89C7                    			mov	di,ax						;DI = cluster nbr
   743 00000118 D1E8                    			shr	ax,1						;AX = cluster/2
   744 0000011A 89C2                    			mov	dx,ax						;DX = cluster/2
   745 0000011C 01D0                    			add	ax,dx						;AX = 2*(cluster/2)
   746 0000011E 01D0                    			add	ax,dx						;AX = 3*(cluster/2)
   747 00000120 83E701                  			and	di,1						;get low bit
   748 00000123 01C7                    			add	di,ax						;add one if cluster is odd
   749 00000125 81C70003                			add	di,EBOOTFATBASE					;add FAT buffer address
   750 00000129 8B05                    			mov	ax,[di]						;get cluster bytes
   751                                  ;
   752                                  ;	Adjust cluster nbr by 4 bits if cluster is odd; test for end of chain.
   753                                  ;
   754 0000012B F6C101                  			test	cl,1						;is cluster odd?
   755 0000012E 7404                    			jz	.80						;no, skip ahead
   756 00000130 B104                    			mov	cl,4						;shift count
   757 00000132 D3E8                    			shr	ax,cl						;shift nybble low
   758 00000134 25FF0F                  .80			and	ax,0FFFh					;mask for 24 bits; next cluster nbr
   759 00000137 3DFF0F                  			cmp	ax,0FFFh					;end of chain?
   760 0000013A 75B2                    			jne	.70						;no, continue
   761                                  ;
   762                                  ;	Transfer control to the operating system program.
   763                                  ;
   764 0000013C EA                      			db	0EAh						;jmp seg:offset
   765 0000013D 0001                    wwLoadOffset		dw	0100h						;kernel entry offset
   766 0000013F F008                    wwLoadSegment		dw	08F0h						;kernel entry segment (computed)
   767                                  ;
   768                                  ;	Read [readcount] disk sectors from [logicalsector] into ES:BX.
   769                                  ;
   770 00000141 A1[1800]                ReadSector		mov	ax,[cwTrackSectors]				;AX = sectors per track
   771 00000144 F726[1A00]              			mul	word [cwDiskSides]				;DX:AX = sectors per cylinder
   772 00000148 89C1                    			mov	cx,ax						;CX = sectors per cylinder
   773 0000014A A1[F401]                			mov	ax,[wwLogicalSector]				;DX:AX = logical sector
   774 0000014D F7F1                    			div	cx						;AX = cylinder; DX = cyl sector
   775 0000014F A2[FB01]                			mov	[wbTrack],al					;[track] = cylinder
   776 00000152 89D0                    			mov	ax,dx						;AX = cyl sector
   777 00000154 F636[1800]              			div	byte [cbTrackSectors]				;AH = sector, AL = head
   778 00000158 FEC4                    			inc	ah						;AH = sector (1,2,3,...)
   779 0000015A A3[F901]                			mov	[wbHead],ax					;[head]= head, [sector]= sector
   780                                  ;
   781                                  ;	Try maxtries times to read sector.
   782                                  ;
   783 0000015D B90500                  			mov	cx,EBOOTMAXTRIES				;CX = 0005
   784 00000160 53                      .10			push	bx						;save buffer address
   785 00000161 51                      			push	cx						;save retry count
   786 00000162 8B16[F801]              			mov	dx,[wwDriveHead]				;DH = head, DL = drive
   787 00000166 8B0E[FA01]              			mov	cx,[wwSectorTrack]				;CH = track, CL = sector
   788 0000016A A1[F601]                			mov	ax,[wwReadCountCommand]				;AH = fn., AL = sector count
   789 0000016D CD13                    			int	EBIOSINTDISKETTE				;read sector
   790 0000016F 59                      			pop	cx						;restore retry count
   791 00000170 5B                      			pop	bx						;restore buffer address
   792 00000171 7343                    			jnc	BootReturn					;skip ahead if done
   793 00000173 E2EB                    			loop	.10						;retry
   794                                  ;
   795                                  ;	Handle disk error: convert to ASCII and store in error string.
   796                                  ;
   797 00000175 88E0                    			mov	al,ah						;AL = bios error code
   798 00000177 30E4                    			xor	ah,ah						;AX = bios error code
   799 00000179 B210                    			mov	dl,16						;divisor for base 16
   800 0000017B F6F2                    			div	dl						;AL = hi order, AH = lo order
   801 0000017D 0D3030                  			or	ax,03030h					;apply ASCII zone bits
   802 00000180 80FC3A                  			cmp	ah,03Ah						;range test ASCII numeral
   803 00000183 7203                    			jb	.20						;continue if numeral
   804 00000185 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   805 00000188 3C3A                    .20			cmp	al,03Ah						;range test ASCII numeral
   806 0000018A 7203                    			jb	.30						;continue if numeral
   807 0000018C 80C407                  			add	ah,7						;adjust for ASCII 'A'-'F'
   808 0000018F A3[DD01]                .30			mov	[wzErrorCode],ax				;store ASCII error code
   809 00000192 BE[D201]                			mov	si,czErrorMsg					;error message address
   810 00000195 E81200                  BootExit		call	BootPrint					;display messge to console
   811 00000198 B401                    .10			mov	ah,EBIOSFNKEYSTATUS				;bios keyboard status function
   812 0000019A CD16                    			int	EBIOSINTKEYBOARD				;get keyboard status
   813 0000019C 7504                    			jnz	.20						;continue if key pressed
   814 0000019E FB                      			sti							;enable maskable interrupts
   815 0000019F F4                      			hlt							;wait for interrupt
   816 000001A0 EBF6                    			jmp	.10						;repeat
   817 000001A2 B0FE                    .20			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
   818 000001A4 E664                    			out	EKEYBPORTSTAT,al				;drive B0 low to restart
   819 000001A6 FB                      .30			sti							;enable maskable interrupts
   820 000001A7 F4                      			hlt							;stop until reset, int, nmi
   821 000001A8 EBFC                    			jmp	.30						;loop until restart kicks in
   822                                  ;
   823                                  ;	Display text message.
   824                                  ;
   825 000001AA FC                      BootPrint		cld							;forward strings
   826 000001AB AC                      			lodsb							;load next byte at DS:SI in AL
   827 000001AC 84C0                    			test	al,al						;end of string?
   828 000001AE 7406                    			jz	BootReturn					;... yes, exit our loop
   829 000001B0 B40E                    			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
   830 000001B2 CD10                    			int	EBIOSINTVIDEO					;call BIOS display interrupt
   831 000001B4 EBF4                    			jmp	BootPrint					;repeat until done
   832 000001B6 C3                      BootReturn		ret							;return
   833                                  ;-----------------------------------------------------------------------------------------------------------------------
   834                                  ;
   835                                  ;	Constants
   836                                  ;
   837                                  ;-----------------------------------------------------------------------------------------------------------------------
   838 000001B7 90                      			align	2
   839 000001B8 2000                    cwEntryLen		dw	32						;length of directory entry
   840 000001BA 4F5320202020202043-     cbKernelProgram		db	"OS      COM"					;kernel program name
   840 000001C3 4F4D               
   841 000001C5 4C6F6164696E67204F-     czLoadMsg		db	"Loading OS",13,10,0				;loading message
   841 000001CE 530D0A00           
   842 000001D2 4469736B206572726F-     czErrorMsg		db	"Disk error "					;error message
   842 000001DB 7220               
   843 000001DD 202000                  wzErrorCode		db	020h,020h,0					;error code and null terminator
   844 000001E0 4F53206D697373696E-     czNoKernel		db	"OS missing",0					;missing kernel message
   844 000001E9 6700               
   845                                  ;-----------------------------------------------------------------------------------------------------------------------
   846                                  ;
   847                                  ;	Work Areas
   848                                  ;
   849                                  ;-----------------------------------------------------------------------------------------------------------------------
   850 000001EB 90                      			align	2
   851 000001EC 0000                    wwDirBuffer		dw	0						;directory i/o buffer address
   852 000001EE 0000                    wwEntriesLeft		dw	0						;directory entries to search
   853 000001F0 0000                    wwOverhead		dw	0						;overhead sectors
   854 000001F2 0000                    wwSectorEntries		dw	0						;directory entries per sector
   855 000001F4 0000                    wwLogicalSector		dw	0						;current logical sector
   856                                  wwReadCountCommand	equ	$						;read count and command
   857 000001F6 00                      wbReadCount		db	0						;sectors to read
   858 000001F7 02                      cbReadCommand		db	2						;BIOS read disk fn code
   859                                  wwDriveHead		equ	$						;drive, head (word)
   860 000001F8 00                      wbDrive			db	0						;drive
   861 000001F9 00                      wbHead			db	0						;head
   862                                  wwSectorTrack		equ	$						;sector, track (word)
   863 000001FA 00                      			db	0						;sector
   864 000001FB 00                      wbTrack			db	0						;track
   865 000001FC 00<rept>                			times	510-($-$$) db 0h				;zero fill to end of sector
   866 000001FE 55AA                    			db	055h,0AAh					;end of sector signature
   867                                  %endif
   868                                  %ifdef BUILDPREP
   869                                  ;=======================================================================================================================
   870                                  ;
   871                                  ;	Diskette Preparation Code
   872                                  ;
   873                                  ;	This routine writes the OS boot sector code to a formatted floppy diskette. The diskette parameter table,
   874                                  ;	which is located in the first 30 bytes of the boot sector is first read from the diskette and overlayed onto
   875                                  ;	the OS bootstrap code so that the diskette format parameters are preserved.
   876                                  ;
   877                                  ;=======================================================================================================================
   878                                  ;
   879                                  ;	Query the user to insert a flopppy diskette and press enter or cancel.
   880                                  ;
   881                                  Prep			mov	si,czPrepMsg10					;starting message address
   882                                  			call	BootPrint					;display message
   883                                  ;
   884                                  ;	Exit if the Escape key is pressed or loop until Enter is pressed.
   885                                  ;
   886                                  .10			mov	ah,EBIOSFNKEYSTATUS				;BIOS keyboard status function
   887                                  			int	EBIOSINTKEYBOARD				;get keyboard status
   888                                  			jnz	.12						;continue if key pressed
   889                                  			sti							;enable interrupts
   890                                  			hlt							;wait for interrupt
   891                                  			jmp	.10						;repeat
   892                                  .12			cmp	al,EASCIIRETURN					;Enter key pressed?
   893                                  			je	.15						;yes, branch
   894                                  			cmp	al,EASCIIESCAPE					;Escape key pressed?
   895                                  			jne	.10						;no, repeat
   896                                  			jmp	.90						;yes, exit program
   897                                  ;
   898                                  ;	Display writing-sector message and patch the JMP instruction.
   899                                  ;
   900                                  .15			mov	si,czPrepMsg12					;writing-sector message address
   901                                  			call	BootPrint					;display message
   902                                  			mov	bx,Boot+1					;address of JMP instruction operand
   903                                  			mov	ax,01Bh						;address past disk parameter table
   904                                  			mov	[bx],ax						;update the JMP instruction
   905                                  ;
   906                                  ;	Try to read the boot sector.
   907                                  ;
   908                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   909                                  .20			push	cx						;save remaining tries
   910                                  			mov	bx,wcPrepInBuf					;input buffer address
   911                                  			mov	dx,0						;head zero, drive zero
   912                                  			mov	cx,1						;track zero, sector one
   913                                  			mov	ax,0201h					;read one sector
   914                                  			int	EBIOSINTDISKETTE				;attempt the read
   915                                  			pop	cx						;restore remaining retries
   916                                  			jnc	.30						;skip ahead if successful
   917                                  			loop	.20						;try again
   918                                  			mov	si,czPrepMsg20					;read-error message address
   919                                  			jmp	.50						;branch to error routine
   920                                  ;
   921                                  ;	Copy diskette parms from input buffer to output buffer.
   922                                  ;
   923                                  .30			mov	si,wcPrepInBuf					;input buffer address
   924                                  			add	si,11						;skip over JMP and system ID
   925                                  			mov	di,Boot						;output buffer address
   926                                  			add	di,11						;skip over JMP and system ID
   927                                  			mov	cx,19						;length of diskette parameters
   928                                  			cld							;forward string copies
   929                                  			rep	movsb						;copy diskette parameters
   930                                  ;
   931                                  ;	Try to write boot sector to diskette.
   932                                  ;
   933                                  			mov	cx,EBOOTMAXTRIES				;try up to five times
   934                                  .40			push	cx						;save remaining tries
   935                                  			mov	bx,Boot						;output buffer address
   936                                  			mov	dx,0						;head zero, drive zero
   937                                  			mov	cx,1						;track zero, sector one
   938                                  			mov	ax,0301h					;write one sector
   939                                  			int	EBIOSINTDISKETTE				;attempt the write
   940                                  			pop	cx						;restore remaining retries
   941                                  			jnc	.80						;skip ahead if successful
   942                                  			loop	.40						;try again
   943                                  			mov	si,czPrepMsg30					;write-error message address
   944                                  ;
   945                                  ;	Convert the error code to ASCII and display the error message.
   946                                  ;
   947                                  .50			push	ax						;save error code
   948                                  			mov	al,ah						;copy error code
   949                                  			mov	ah,0						;AX = error code
   950                                  			mov	dl,10h						;hexadecimal divisor
   951                                  			idiv	dl						;AL = hi-order, AH = lo-order
   952                                  			or	ax,03030h					;add ASCII zone digits
   953                                  			cmp	ah,03Ah						;AH ASCII numeral?
   954                                  			jb	.60						;yes, continue
   955                                  			add	ah,7						;no, make ASCII 'A'-'F'
   956                                  .60			cmp	al,03Ah						;al ASCII numeral?
   957                                  			jb	.70						;yes, continue
   958                                  			add	al,7						;no, make ASCII
   959                                  .70			mov	[si+17],ax					;put ASCII error code in message
   960                                  			call	BootPrint					;write error message
   961                                  			pop	ax						;restore error code
   962                                  ;
   963                                  ;	Display the completion message.
   964                                  ;
   965                                  .80			mov	si,czPrepMsgOK					;assume successful completion
   966                                  			mov	al,ah						;BIOS return code
   967                                  			cmp	al,0						;success?
   968                                  			je	.85						;yes, continue
   969                                  			mov	si,czPrepMsgErr1				;disk parameter error message
   970                                  			cmp	al,1						;disk parameter error?
   971                                  			je	.85						;yes, continue
   972                                  			mov	si,czPrepMsgErr2				;address mark not found message
   973                                  			cmp	al,2						;address mark not found?
   974                                  			je	.85						;yes, continue
   975                                  			mov	si,czPrepMsgErr3				;protected disk message
   976                                  			cmp	al,3						;protected disk?
   977                                  			je	.85						;yes, continue
   978                                  			mov	si,czPrepMsgErr6				;diskette removed message
   979                                  			cmp	al,6						;diskette removed?
   980                                  			je	.85						;yes, continue
   981                                  			mov	si,czPrepMsgErr80				;drive timed out message
   982                                  			cmp	al,80H						;drive timed out?
   983                                  			je	.85						;yes, continue
   984                                  			mov	si,czPrepMsgErrXX				;unknown error message
   985                                  .85			call	BootPrint					;display result message
   986                                  .90			mov	ax,04C00H					;terminate with zero result code
   987                                  			int	021h						;terminate DOS program
   988                                  			ret							;return (should not execute)
   989                                  ;-----------------------------------------------------------------------------------------------------------------------
   990                                  ;
   991                                  ;	Diskette Preparation Messages
   992                                  ;
   993                                  ;-----------------------------------------------------------------------------------------------------------------------
   994                                  czPrepMsg10		db	13,10,"CustomOS Boot-Diskette Preparation Program"
   995                                  			db	13,10,"Copyright (C) 2010-2017 David J. Walling. All rights reserved."
   996                                  			db	13,10
   997                                  			db	13,10,"This program overwrites the boot sector of a diskette with startup code that"
   998                                  			db	13,10,"will load the operating system into memory when the computer is restarted."
   999                                  			db	13,10,"To proceed, place a formatted diskette into drive A: and press the Enter key."
  1000                                  			db	13,10,"To exit this program without preparing a diskette, press the Escape key."
  1001                                  			db	13,10,0
  1002                                  czPrepMsg12		db	13,10,"Writing the boot sector to the diskette ..."
  1003                                  			db	13,10,0
  1004                                  czPrepMsg20		db	13,10,"The error-code .. was returned from the BIOS while reading from the disk."
  1005                                  			db	13,10,0
  1006                                  czPrepMsg30		db	13,10,"The error-code .. was returned from the BIOS while writing to the disk."
  1007                                  			db	13,10,0
  1008                                  czPrepMsgOK		db	13,10,"The boot-sector was written to the diskette. Before booting your computer with"
  1009                                  			db	13,10,"this diskette, make sure that the file OS.COM is copied onto the diskette."
  1010                                  			db	13,10,0
  1011                                  czPrepMsgErr1		db	13,10,"(01) Invalid Disk Parameter"
  1012                                  			db	13,10,"This is an internal error caused by an invalid value being passed to a system"
  1013                                  			db	13,10,"function. The OSBOOT.COM file may be corrupt. Copy or download the file again"
  1014                                  			db	13,10,"and retry."
  1015                                  			db	13,10,0
  1016                                  czPrepMsgErr2		db	13,10,"(02) Address Mark Not Found"
  1017                                  			db	13,10,"This error indicates a physical problem with the floppy diskette. Please retry"
  1018                                  			db	13,10,"using another diskette."
  1019                                  			db	13,10,0
  1020                                  czPrepMsgErr3		db	13,10,"(03) Protected Disk"
  1021                                  			db	13,10,"This error is usually caused by attempting to write to a write-protected disk."
  1022                                  			db	13,10,"Check the 'write-protect' setting on the disk or retry using using another disk."
  1023                                  			db	13,10,0
  1024                                  czPrepMsgErr6		db	13,10,"(06) Diskette Removed"
  1025                                  			db	13,10,"This error may indicate that the floppy diskette has been removed from the"
  1026                                  			db	13,10,"diskette drive. On some systems, this code may also occur if the diskette is"
  1027                                  			db	13,10,"'write protected.' Please verify that the diskette is not write-protected and"
  1028                                  			db	13,10,"is properly inserted in the diskette drive."
  1029                                  			db	13,10,0
  1030                                  czPrepMsgErr80		db	13,10,"(80) Drive Timed Out"
  1031                                  			db	13,10,"This error usually indicates that no diskette is in the diskette drive. Please"
  1032                                  			db	13,10,"make sure that the diskette is properly seated in the drive and retry."
  1033                                  			db	13,10,0
  1034                                  czPrepMsgErrXX		db	13,10,"(??) Unknown Error"
  1035                                  			db	13,10,"The error-code returned by the BIOS is not a recognized error. Please consult"
  1036                                  			db	13,10,"your computer's technical reference for a description of this error code."
  1037                                  			db	13,10,0
  1038                                  wcPrepInBuf		equ	$
  1039                                  %endif
  1040                                  %ifdef BUILDDISK
  1041                                  ;=======================================================================================================================
  1042                                  ;
  1043                                  ;	File Allocation Tables
  1044                                  ;
  1045                                  ;	The disk contains two copies of the File Allocation Table (FAT). On our disk, each FAT copy is 1200h bytes in
  1046                                  ;	length. Each FAT entry contains the logical number of the next cluster. The first two entries are reserved. Our
  1047                                  ;	OS.COM file will be 5200h bytes in length. The first 200h bytes is the 16-bit loader code. The remaining 5000h
  1048                                  ;	bytes is the 32-bit kernel code. Our disk parameter table defines a cluster as containing one sector and each
  1049                                  ;	sector having 200h bytes. Therefore, our FAT table must reserve 41 clusters for OS.COM. The clusters used by
  1050                                  ;	OS.COM, then, will be cluster 2 through 43. The entry for cluster 43 is set to "0FFFh" to indicate that it is
  1051                                  ;	the last cluster in the chain.
  1052                                  ;
  1053                                  ;	Every three bytes encode two FAT entries as follows:
  1054                                  ;
  1055                                  ;	db	0abh,0cdh,0efh	;even cluster: 0dabh, odd cluster: 0efch
  1056                                  ;
  1057                                  ;=======================================================================================================================
  1058                                  ;-----------------------------------------------------------------------------------------------------------------------
  1059                                  ;
  1060                                  ;	FAT copy 1								@disk: 000200	@mem: n/a
  1061                                  ;
  1062                                  ;-----------------------------------------------------------------------------------------------------------------------
  1063                                  section			fat1							;first copy of FAT
  1064                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1065                                  			db	005h,060h,000h,	007h,080h,000h
  1066                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1067                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1068                                  			db	011h,020h,001h,	013h,040h,001h
  1069                                  			db	015h,060h,001h,	017h,080h,001h
  1070                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1071                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1072                                  			db	021h,020h,002h,	023h,040h,002h
  1073                                  			db	025h,060h,002h,	027h,080h,002h
  1074                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1075                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1076                                  ;-----------------------------------------------------------------------------------------------------------------------
  1077                                  ;
  1078                                  ;	FAT copy 2								@disk: 001400	@mem: n/a
  1079                                  ;
  1080                                  ;-----------------------------------------------------------------------------------------------------------------------
  1081                                  section			fat2							;second copy of FAT
  1082                                  			db	0F0h,0FFh,0FFh,	003h,040h,000h
  1083                                  			db	005h,060h,000h,	007h,080h,000h
  1084                                  			db	009h,0A0h,000h,	00Bh,0C0h,000h
  1085                                  			db	00Dh,0E0h,000h,	00Fh,000h,001h
  1086                                  			db	011h,020h,001h,	013h,040h,001h
  1087                                  			db	015h,060h,001h,	017h,080h,001h
  1088                                  			db	019h,0A0h,001h,	01Bh,0C0h,001h
  1089                                  			db	01Dh,0E0h,001h,	01Fh,000h,002h
  1090                                  			db	021h,020h,002h,	023h,040h,002h
  1091                                  			db	025h,060h,002h,	027h,080h,002h
  1092                                  			db	029h,0A0h,002h,	0FFh,00Fh,000h
  1093                                  			times	(9*512)-($-$$) db 0				;zero fill to end of section
  1094                                  ;-----------------------------------------------------------------------------------------------------------------------
  1095                                  ;
  1096                                  ;	Diskette Directory							@disk: 002600	@mem: n/a
  1097                                  ;
  1098                                  ;	The disk contains one copy of the diskette directory. Each directory entry is 32 bytes long. Our directory
  1099                                  ;	contains only one entry. Unused entries are set to all nulls. The directory immediately follows the second FAT
  1100                                  ;	copy.
  1101                                  ;
  1102                                  ;-----------------------------------------------------------------------------------------------------------------------
  1103                                  section			dir							;diskette directory
  1104                                  			db	"OS      COM"					;file name (must contain spaces)
  1105                                  			db	020h						;attribute (archive bit set)
  1106                                  			times	10 db 0						;unused
  1107                                  			dw	0h						;time
  1108                                  			db	01000001b					;mmm = 10 MOD 8 = 2; ddddd = 1
  1109                                  			db	01001001b					;yyyyyyy = 2016-1980 = 36 = 24h; m/8 = 1
  1110                                  			dw	2						;first cluster
  1111                                  			dd	05200h						;file size
  1112                                  			times	(224*32)-($-$$) db 0h				;zero fill to end of section
  1113                                  %endif
  1114                                  %ifdef BUILDCOM
  1115                                  ;=======================================================================================================================
  1116                                  ;
  1117                                  ;	OS.COM
  1118                                  ;
  1119                                  ;	The operating system file is assembled at the start of the data area of the floppy disk image, which
  1120                                  ;	immediately follows the directory. This corresponds to logical cluster 2, even though the physical address of
  1121                                  ;	this sector on the disk varies depending on the disk type. The os.com file consists of two parts, the OS loader
  1122                                  ;	and the OS kernel. The Loader is 16-bit code that receives control directly from the boot sector code after the
  1123                                  ;	OS.COM file is loaded into memory. The kernel is 32-bit code that receives control after the Loader has
  1124                                  ;	initialized protected-mode tables and 32-bit interrupt handlers and switched the CPU into protected mode.
  1125                                  ;
  1126                                  ;	Our loader addressability is set up according to the following diagram.
  1127                                  ;
  1128                                  ;	SS -----------> 007b00	+-----------------------------------------------+ SS:0000
  1129                                  ;				|  Boot Stack & Boot PSP (Unused)		|
  1130                                  ;				|  256 = 100h bytes				|
  1131                                  ;	SS:SP -------->	007c00	+-----------------------------------------------+ SS:0100  07b0:0100
  1132                                  ;				|  Boot Sector (vstart=0100h)			|
  1133                                  ;				|  1 sector = 512 = 200h bytes			|
  1134                                  ;			007e00	+-----------------------------------------------+
  1135                                  ;				|  File Allocation Table (FAT) I/O Buffer	|
  1136                                  ;				|  9 x 512-byte sectors = 4,608 = 1200h bytes	|
  1137                                  ;				|						|
  1138                                  ;	CS,DS,ES ----->	008f00	|  Loader PSP (Unused)				| DS:0000
  1139                                  ;				|						|
  1140                                  ;	CS:IP -------->	009000	+-----------------------------------------------+ DS:0100  08f0:0100
  1141                                  ;				|  Loader Code					|
  1142                                  ;				|  1 sector = 512 = 200h bytes			|
  1143                                  ;			009200	+-----------------------------------------------+ DS:0300
  1144                                  ;
  1145                                  ;=======================================================================================================================
  1146                                  ;-----------------------------------------------------------------------------------------------------------------------
  1147                                  ;
  1148                                  ;	OS Loader								@disk: 004200	@mem: 009000
  1149                                  ;
  1150                                  ;	This code is the operating system loader. It resides on the boot disk at the start of the data area, following
  1151                                  ;	the directory. The loader occupies several clusters that are mapped in the file allocation tables above.
  1152                                  ;	The loader executes 16-bit instructions in real mode. It performs several initialization functions such as
  1153                                  ;	determining whether the CPU and other resources are sufficient to run the operating system. If all minimum
  1154                                  ;	resources are present, the loader initializes protected mode tables, places the CPU into protected mode and
  1155                                  ;	starts the console task. Since the loader was called either from the bootstrap or as a .com file on the boot
  1156                                  ;	disk, we can assume that the initial ip is 0x100 and not perform any absolute address fix-ups on our segment
  1157                                  ;	registers.
  1158                                  ;
  1159                                  ;-----------------------------------------------------------------------------------------------------------------------
  1160                                  			cpu	8086						;assume minimal CPU
  1161                                  section			loader	vstart=0100h					;use .COM compatible addressing
  1162                                  			bits	16						;this is 16-bit code
  1163                                  Loader			push	cs						;use the code segment
  1164                                  			pop	ds						;...as our data segment
  1165                                  			push	cs						;use the code segment
  1166                                  			pop	es						;...as our extra segment
  1167                                  ;
  1168                                  ;	Write a message to the console so we know we have our addressability established.
  1169                                  ;
  1170                                  			mov	si,czStartingMsg				;starting message
  1171                                  			call	PutTTYString					;display loader message
  1172                                  ;
  1173                                  ;	Determine the CPU type, generally. Exit if the CPU is not at least an 80386.
  1174                                  ;
  1175                                  			call	GetCPUType					;AL = cpu type
  1176                                  			mov	si,czCPUErrorMsg				;loader error message
  1177                                  			cmp	al,3						;80386+?
  1178                                  			jb	LoaderExit					;no, exit with error message
  1179                                  			cpu	386						;allow 80386 instructions
  1180                                  			mov	si,czCPUOKMsg					;cpu ok message
  1181                                  			call	PutTTYString					;display message
  1182                                  ;
  1183                                  ;	Fixup the GDT descriptor for the current (loader) code segment.
  1184                                  ;
  1185                                  			mov	si,0300h					;GDT offset
  1186                                  			mov	ax,cs						;AX:SI = gdt source
  1187                                  			rol	ax,4						;AX = phys addr bits 11-0,15-12
  1188                                  			mov	cl,al						;CL = phys addr bits 3-0,15-12
  1189                                  			and	al,0F0h						;AL = phys addr bits 11-0
  1190                                  			and	cl,00Fh						;CL = phys addr bits 15-12
  1191                                  			mov	word [si+030h+2],ax				;lo-order loader code (0-15)
  1192                                  			mov	byte [si+030h+4],cl				;lo-order loader code (16-23)
  1193                                  			mov	si,czGDTOKMsg					;GDT prepared message
  1194                                  			call	PutTTYString					;display message
  1195                                  ;
  1196                                  ;	Move the 32-bit kernel to its appropriate memory location.
  1197                                  ;
  1198                                  			push	EKRNCODESEG					;use kernel code segment ...
  1199                                  			pop	es						;... as target segment
  1200                                  			xor	di,di						;ES:DI = target address
  1201                                  			mov	si,0300h					;DS:SI = source address
  1202                                  			mov	cx,05000h					;CX = kernel size
  1203                                  			cld							;forward strings
  1204                                  			rep	movsb						;copy kernel image
  1205                                  			mov	si,czKernelLoadedMsg				;kernel moved message
  1206                                  			call	PutTTYString					;display message
  1207                                  ;
  1208                                  ;	Switch to protected mode.
  1209                                  ;
  1210                                  			xor	si,si						;ES:SI = gdt addr
  1211                                  			mov	ss,si						;protected mode ss
  1212                                  			mov	sp,EKRNCODEADR					;initial stack immediate before code
  1213                                  			mov	ah,EBIOSFNINITPROTMODE				;initialize protected mode fn.
  1214                                  			mov	bx,02028h					;BH,BL = IRQ int bases
  1215                                  			mov	dx,001Fh					;outer delay loop count
  1216                                  .10			mov	cx,0FFFFh					;inner delay loop count
  1217                                  			loop	$						;wait out pending interrupts
  1218                                  			dec	dx						;restore outer loop count
  1219                                  			jnz	.10						;continue outer loop
  1220                                  			int	EBIOSINTMISC					;call BIOS to set protected mode
  1221                                  ;
  1222                                  ;	Enable hardware and maskable interrupts
  1223                                  ;
  1224                                  			xor	al,al						;enable all registers code
  1225                                  			out	EPICPORTPRI1,al					;enable all primary 8259A ints
  1226                                  			out	EPICPORTSEC1,al					;enable all secondary 8259A ints
  1227                                  			sti							;enable maskable interrupts
  1228                                  ;
  1229                                  ;	Load the Task State Segment (TSS) and Local Descriptor Table (LDT) registers and jump to the initial task.
  1230                                  ;
  1231                                  			ltr	[cs:cwLoaderTSS]				;load task register
  1232                                  			lldt	[cs:cwLoaderLDT]				;load local descriptor table register
  1233                                  			jmp	ESELCONSOLETSS:0				;jump to task state segment selector
  1234                                  ;-----------------------------------------------------------------------------------------------------------------------
  1235                                  ;
  1236                                  ;	Routine:	LoaderExit
  1237                                  ;
  1238                                  ;	Description:	This routine displays the message at DS:SI, waits for a keypress and resets the system.
  1239                                  ;
  1240                                  ;	In:		DS:SI	string address
  1241                                  ;
  1242                                  ;-----------------------------------------------------------------------------------------------------------------------
  1243                                  LoaderExit		call	PutTTYString					;display error message
  1244                                  ;
  1245                                  ;	Now we want to wait for a keypress. We can use a keyboard interrupt function for this (INT 16h, AH=0).
  1246                                  ;	However, some hypervisor BIOS implementations have been seen to implement the "wait" as simply a fast
  1247                                  ;	iteration of the keyboard status function call (INT 16h, AH=1), causing a CPU race condition. So, instead
  1248                                  ;	we will use the keyboard status call and iterate over a halt (HLT) instruction until a key is pressed.
  1249                                  ;	By convention, we enable maskable interrupts with STI before issuing HLT, so as not to catch fire.
  1250                                  ;
  1251                                  .30			mov	ah,EBIOSFNKEYSTATUS				;keyboard status function
  1252                                  			int	EBIOSINTKEYBOARD				;call BIOS keyboard interrupt
  1253                                  			jnz	.40						;exit if key pressed
  1254                                  			sti							;enable maskable interrupts
  1255                                  			hlt							;wait for interrupt
  1256                                  			jmp	.30						;repeat until keypress
  1257                                  ;
  1258                                  ;	Now that a key has been pressed, we signal the system to restart by driving the B0 line on the 8042
  1259                                  ;	keyboard controller low (OUT 64h,0feh). The restart may take some microseconds to kick in, so we issue
  1260                                  ;	HLT until the system resets.
  1261                                  ;
  1262                                  .40			mov	al,EKEYBCMDRESET				;8042 pulse output port pin
  1263                                  			out	EKEYBPORTSTAT,al				;drive B0 low to restart
  1264                                  .50			sti							;enable maskable interrupts
  1265                                  			hlt							;stop until reset, int, nmi
  1266                                  			jmp	.50						;loop until restart kicks in
  1267                                  ;-----------------------------------------------------------------------------------------------------------------------
  1268                                  ;
  1269                                  ;	Routine:	GetCPUType
  1270                                  ;
  1271                                  ;	Description:	The loader needs only to determine that the cpu is at least an 80386 or an equivalent. Note that
  1272                                  ;			the CPUID instruction was not introduced until the SL-enhanced 80486 and Pentium processors, so
  1273                                  ;			to distinguish whether we have at least an 80386, other means must be used.
  1274                                  ;
  1275                                  ;	Out:		AX	0 = 808x, v20, etc.
  1276                                  ;				1 = 80186
  1277                                  ;				2 = 80286
  1278                                  ;				3 = 80386
  1279                                  ;
  1280                                  ;-----------------------------------------------------------------------------------------------------------------------
  1281                                  GetCPUType		mov	al,1						;AL = 1
  1282                                  			mov	cl,32						;shift count
  1283                                  			shr	al,cl						;try a 32-bit shift
  1284                                  			or	al,al						;did the shift happen?
  1285                                  			jz	.10						;yes, cpu is 808x, v20, etc.
  1286                                  			cpu	186
  1287                                  			push	sp						;save stack pointer
  1288                                  			pop	cx						;...into cx
  1289                                  			cmp	cx,sp						;did sp decrement before push?
  1290                                  			jne	.10						;yes, cpu is 80186
  1291                                  			cpu	286
  1292                                  			inc	ax						;AX = 2
  1293                                  			sgdt	[cbLoaderGDT]					;store gdt reg in work area
  1294                                  			mov	cl,[cbLoaderGDTHiByte]				;CL = hi-order byte
  1295                                  			inc	cl						;was hi-byte of GDTR 0xff?
  1296                                  			jz	.10						;yes, cpu is 80286
  1297                                  			inc	ax						;AX = 3
  1298                                  .10			ret							;return
  1299                                  ;-----------------------------------------------------------------------------------------------------------------------
  1300                                  ;
  1301                                  ;	Routine:	PutTTYString
  1302                                  ;
  1303                                  ;	Description:	This routine sends a NUL-terminated string of characters to the TTY output device. We use the
  1304                                  ;			TTY output function of the BIOS video interrupt, passing the address of the string in DS:SI
  1305                                  ;			and the BIOS teletype function code in AH. After a return from the BIOS interrupt, we repeat
  1306                                  ;			for the next string character until a NUL is found. Note that we clear the direction flag (DF)
  1307                                  ;			with CLD before each LODSB. This is just in case the direction flag is ever returned as set
  1308                                  ;			by the video interrupt. This is a precaution since a well-written BIOS should preserve all
  1309                                  ;			registers and flags unless used to indicate return status.
  1310                                  ;
  1311                                  ;	In:		DS:SI	address of string
  1312                                  ;
  1313                                  ;-----------------------------------------------------------------------------------------------------------------------
  1314                                  PutTTYString		cld							;forward strings
  1315                                  			lodsb							;load next byte at DS:SI in AL
  1316                                  			test	al,al						;end of string?
  1317                                  			jz	.10						;... yes, exit our loop
  1318                                  			mov	ah,EBIOSFNTTYOUTPUT				;BIOS teletype function
  1319                                  			int	EBIOSINTVIDEO					;call BIOS display interrupt
  1320                                  			jmp	PutTTYString					;repeat until done
  1321                                  .10			ret							;return
  1322                                  ;-----------------------------------------------------------------------------------------------------------------------
  1323                                  ;
  1324                                  ;	Loader Data
  1325                                  ;
  1326                                  ;	The loader data is updated to include constants defining the initial (Loader) TSS and LDT selectors in the
  1327                                  ;	GDT, a work area to build the GDTR, and additional text messages.
  1328                                  ;
  1329                                  ;-----------------------------------------------------------------------------------------------------------------------
  1330                                  			align	2
  1331                                  cwLoaderLDT		dw	ESELLOADERLDT					;loader local descriptor table selector
  1332                                  cwLoaderTSS		dw	ESELLOADERTSS					;loader task state segment selector
  1333                                  cbLoaderGDT		times	5 db 0						;6-byte GDTR work area
  1334                                  cbLoaderGDTHiByte	db	0						;hi-order byte
  1335                                  czCPUErrorMsg		db	"The operating system requires an i386 or later processor.",13,10
  1336                                  			db	"Please press any key to restart the computer.",13,10,0
  1337                                  czCPUOKMsg		db	"CPU OK",13,10,0
  1338                                  czGDTOKMsg		db	"GDT prepared",13,10,0
  1339                                  czKernelLoadedMsg	db	"Kernel loaded",13,10,0
  1340                                  czStartingMsg		db	"Starting OS",13,10,0				;starting message
  1341                                  			times	510-($-$$) db 0h				;zero fill to end of sector
  1342                                  			db	055h,0AAh					;end of sector signature
  1343                                  ;=======================================================================================================================
  1344                                  ;
  1345                                  ;	OS Kernel								@disk: 004400	@mem: 001000
  1346                                  ;
  1347                                  ;	This code is the operating system kernel. It resides on the boot disk image as part of the OS.COM file,
  1348                                  ;	following the 16-bit loader code above. The Kernel executes only 32-bit code in protected mode and contains one
  1349                                  ;	task, the Console, which performs a loop accepting user input from external devices (keyboard, etc.), processes
  1350                                  ;	commands and displays ouput to video memory. The Kernel also includes a library of system functions accessible
  1351                                  ;	through software interrupt 58 (30h). Finally, the Kernel provides CPU and hardware interrupt handlers.
  1352                                  ;
  1353                                  ;=======================================================================================================================
  1354                                  ;=======================================================================================================================
  1355                                  ;
  1356                                  ;	Kernel Tables
  1357                                  ;
  1358                                  ;=======================================================================================================================
  1359                                  ;-----------------------------------------------------------------------------------------------------------------------
  1360                                  ;
  1361                                  ;	Global Descriptor Table							@disk: 004400	@mem: 001000
  1362                                  ;
  1363                                  ;	The Global Descriptor Table (GDT) consists of eight-byte descriptors that define reserved memory areas. The
  1364                                  ;	first descriptor must be all nulls.
  1365                                  ;
  1366                                  ;	6   5         4         3         2         1         0
  1367                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1368                                  ;	----------------------------------------------------------------
  1369                                  ;	h......hffffmmmma......ab......................bn..............n
  1370                                  ;	00000000			all areas have base addresses below 2^24
  1371                                  ;	        0100     		(0x4) 32-bit single-byte granularity
  1372                                  ;		1100    		(0xC) 32-bit 4KB granularity
  1373                                  ;	            1001		present, ring-0, selector
  1374                                  ;
  1375                                  ;	h...h	hi-order base address (bits 24-31)
  1376                                  ;	ffff	flags
  1377                                  ;	mmmm	hi-order limit (bits 16-19)
  1378                                  ;	a...a	access
  1379                                  ;	b...b	lo-order base address (bits 0-23)
  1380                                  ;	n...n	lo-order limit (bits 0-15)
  1381                                  ;
  1382                                  ;-----------------------------------------------------------------------------------------------------------------------
  1383                                  section			gdt							;global descriptor table
  1384                                  			dq	0000000000000000h				;00 required null selector
  1385                                  			dq	00409300100007FFh				;08 2KB  writable data  (GDT alias)
  1386                                  			dq	00409300180007FFh				;10 2KB  writable data  (IDT alias)
  1387                                  			dq	00CF93000000FFFFh				;18 4GB  writable data  (kernel)     DS:
  1388                                  			dq	0040930B80000FFFh				;20 4KB  writable data  (CGA)        ES:
  1389                                  			dq	0040930000000FFFh				;28 4KB  writable stack (Loader)     SS:
  1390                                  			dq	00009B000000FFFFh				;30 64KB readable code  (loader)     CS:
  1391                                  			dq	00009BFF0000FFFFh				;38 64KB readable code  (BIOS)
  1392                                  			dq	004093000400FFFFh				;40 64KB writable data  (BIOS)
  1393                                  			dq	00409B0020001FFFh				;48 8KB  readable code  (kernel)
  1394                                  			dq	004082000F00007Fh				;50 80B  writable LDT   (loader)
  1395                                  			dq	004089000F80007Fh				;58 80B  writable TSS   (loader)
  1396                                  			dq	004082004700007Fh				;60 80B  writable LDT   (console)
  1397                                  			dq	004089004780007Fh				;88 80B  writable TSS   (console)
  1398                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1399                                  ;-----------------------------------------------------------------------------------------------------------------------
  1400                                  ;
  1401                                  ;	Interrupt Descriptor Table						@disk: 004c00	@mem: 001800
  1402                                  ;
  1403                                  ;	The Interrupt Descriptor Table (IDT) consists of one eight-byte entry (descriptor) for each interrupt. The
  1404                                  ;	descriptors here are of two kinds, interrupt gates and trap gates. The "mint" and "mtrap" macros define the
  1405                                  ;	descriptors, taking only the name of the entry point for the code handling the interrupt.
  1406                                  ;
  1407                                  ;	6   5         4         3         2         1         0
  1408                                  ;	3210987654321098765432109876543210987654321098765432109876543210
  1409                                  ;	----------------------------------------------------------------
  1410                                  ;	h..............hPzzStttt00000000S..............Sl..............l
  1411                                  ;
  1412                                  ;	h...h	high-order offset (bits 16-31)
  1413                                  ;	P	present (0=unused interrupt)
  1414                                  ;	zz	descriptor privilege level
  1415                                  ;	S	storage segment (must be zero for IDT)
  1416                                  ;	tttt	type: 0101=task, 1110=int, 1111=trap
  1417                                  ;	S...S	handling code selector in GDT
  1418                                  ;	l...l	lo-order offset (bits 0-15)
  1419                                  ;
  1420                                  ;-----------------------------------------------------------------------------------------------------------------------
  1421                                  section			idt							;interrupt descriptor table
  1422                                  			mint	dividebyzero					;00 divide by zero
  1423                                  			mint	singlestep					;01 single step
  1424                                  			mint	nmi						;02 non-maskable
  1425                                  			mint	break						;03 break
  1426                                  			mint	into						;04 into
  1427                                  			mint	bounds						;05 bounds
  1428                                  			mint	badopcode					;06 bad op code
  1429                                  			mint	nocoproc					;07 no coprocessor
  1430                                  			mint	doublefault					;08 double-fault
  1431                                  			mint	operand						;09 operand
  1432                                  			mint	badtss						;0a bad TSS
  1433                                  			mint	notpresent					;0b not-present
  1434                                  			mint	stacklimit					;0c stack limit
  1435                                  			mint	protection					;0d general protection fault
  1436                                  			mint	int14						;0e (reserved)
  1437                                  			mint	int15						;0f (reserved)
  1438                                  			mint	coproccalc					;10 (reserved)
  1439                                  			mint	int17						;11 (reserved)
  1440                                  			mint	int18						;12 (reserved)
  1441                                  			mint	int19						;13 (reserved)
  1442                                  			mint	int20						;14 (reserved)
  1443                                  			mint	int21						;15 (reserved)
  1444                                  			mint	int22						;16 (reserved)
  1445                                  			mint	int23						;17 (reserved)
  1446                                  			mint	int24						;18 (reserved)
  1447                                  			mint	int25						;19 (reserved)
  1448                                  			mint	int26						;1a (reserved)
  1449                                  			mint	int27						;1b (reserved)
  1450                                  			mint	int28						;1c (reserved)
  1451                                  			mint	int29						;1d (reserved)
  1452                                  			mint	int30						;1e (reserved)
  1453                                  			mint	int31						;1f (reserved)
  1454                                  			mtrap	clocktick					;20 IRQ0 clock tick
  1455                                  			mtrap	keyboard					;21 IRQ1 keyboard
  1456                                  			mtrap	iochannel					;22 IRQ2 second 8259A cascade
  1457                                  			mtrap	com2						;23 IRQ3 com2
  1458                                  			mtrap	com1						;24 IRQ4 com1
  1459                                  			mtrap	lpt2						;25 IRQ5 lpt2
  1460                                  			mtrap	diskette					;26 IRQ6 diskette
  1461                                  			mtrap	lpt1						;27 IRQ7 lpt1
  1462                                  			mtrap	rtclock						;28 IRQ8 real-time clock
  1463                                  			mtrap	retrace						;29 IRQ9 CGA vertical retrace
  1464                                  			mtrap	irq10						;2a IRQA (reserved)
  1465                                  			mtrap	irq11						;2b IRQB (reserved)
  1466                                  			mtrap	ps2mouse					;2c IRQC ps/2 mouse
  1467                                  			mtrap	coprocessor					;2d IRQD coprocessor
  1468                                  			mtrap	fixeddisk					;2e IRQE fixed disk
  1469                                  			mtrap	irq15						;2f IRQF (reserved)
  1470                                  			mtrap	svc						;30 OS services
  1471                                  			times	2048-($-$$) db 0h				;zero fill to end of section
  1472                                  ;=======================================================================================================================
  1473                                  ;
  1474                                  ;	Interrupt Handlers							@disk: 005400	@mem:  002000
  1475                                  ;
  1476                                  ;	Interrupt handlers are 32-bit routines that receive control either in response to events or by direct
  1477                                  ;	invocation from other kernel code. The interrupt handlers are of three basic types. CPU interrupts occur when a
  1478                                  ;	CPU exception is detected. Hardware interrupts occur when an external device (timer, keyboard, disk, etc.)
  1479                                  ;	signals the CPU on an interrupt request line (IRQ). Software interrupts occur when directly called by other code
  1480                                  ;	using the INT instruction. Each interrupt handler routine is defined by using our "menter" macro, which simply
  1481                                  ;	establishes a label defining the offset address of the entry point from the start of the kernel section. This
  1482                                  ;	label is referenced in the "mint" and "mtrap" macros found in the IDT to specify the address of the handlers.
  1483                                  ;
  1484                                  ;=======================================================================================================================
  1485                                  section			kernel	vstart=0h					;data offsets relative to 0
  1486                                  			cpu	386						;allow 80386 instructions
  1487                                  			bits	32						;this is 32-bit code
  1488                                  ;=======================================================================================================================
  1489                                  ;
  1490                                  ;	CPU Interrupt Handlers
  1491                                  ;
  1492                                  ;	The first 32 entries in the Interrupt Descriptor Table are reserved for use by CPU interrupts. The handling
  1493                                  ;	of these interrupts will vary. For now, we will define the entry points but simply return from the interrupt.
  1494                                  ;
  1495                                  ;=======================================================================================================================
  1496                                  ;-----------------------------------------------------------------------------------------------------------------------
  1497                                  ;
  1498                                  ;	INT0	Divide By Zero
  1499                                  ;
  1500                                  ;-----------------------------------------------------------------------------------------------------------------------
  1501                                  			menter	dividebyzero					;divide by zero
  1502                                  			push	0						;store interrupt nbr
  1503                                  			push	czIntDivideByZero				;store message offset
  1504                                  			jmp	ReportInterrupt					;report interrupt
  1505                                  ;-----------------------------------------------------------------------------------------------------------------------
  1506                                  ;
  1507                                  ;	INT1	Single Step
  1508                                  ;
  1509                                  ;-----------------------------------------------------------------------------------------------------------------------
  1510                                  			menter	singlestep					;single step
  1511                                  			push	1						;store interrupt nbr
  1512                                  			push	czIntSingleStep					;store message offset
  1513                                  			jmp	ReportInterrupt					;report interrupt
  1514                                  ;-----------------------------------------------------------------------------------------------------------------------
  1515                                  ;
  1516                                  ;	INT2	Non-Maskable Interrupt
  1517                                  ;
  1518                                  ;-----------------------------------------------------------------------------------------------------------------------
  1519                                  			menter	nmi						;non-maskable
  1520                                  			push	2						;store interrupt nbr
  1521                                  			push	czIntNonMaskable				;store message offset
  1522                                  			jmp	ReportInterrupt					;report interrupt
  1523                                  ;-----------------------------------------------------------------------------------------------------------------------
  1524                                  ;
  1525                                  ;	INT3	Break
  1526                                  ;
  1527                                  ;-----------------------------------------------------------------------------------------------------------------------
  1528                                  			menter	break						;break
  1529                                  			push	3						;store interrupt nbr
  1530                                  			push	czIntBreak					;store message offset
  1531                                  			jmp	ReportInterrupt					;report interrupt
  1532                                  ;-----------------------------------------------------------------------------------------------------------------------
  1533                                  ;
  1534                                  ;	INT4	Into
  1535                                  ;
  1536                                  ;-----------------------------------------------------------------------------------------------------------------------
  1537                                  			menter	into						;into
  1538                                  			push	4						;store interrupt nbr
  1539                                  			push	czIntInto					;store message offset
  1540                                  			jmp	ReportInterrupt					;report interrupt
  1541                                  ;-----------------------------------------------------------------------------------------------------------------------
  1542                                  ;
  1543                                  ;	INT5	Bounds
  1544                                  ;
  1545                                  ;-----------------------------------------------------------------------------------------------------------------------
  1546                                  			menter	bounds						;bounds
  1547                                  			push	5						;store interrupt nbr
  1548                                  			push	czIntBounds					;store message offset
  1549                                  			jmp	ReportInterrupt					;report interrupt
  1550                                  ;-----------------------------------------------------------------------------------------------------------------------
  1551                                  ;
  1552                                  ;	INT6	Bad Operation Code
  1553                                  ;
  1554                                  ;-----------------------------------------------------------------------------------------------------------------------
  1555                                  			menter	badopcode					;bad opcode interrupt
  1556                                  			push	6						;store interrupt nbr
  1557                                  			push	czIntBadOpCode					;store message offset
  1558                                  			jmp	ReportInterrupt					;report interrupt
  1559                                  ;-----------------------------------------------------------------------------------------------------------------------
  1560                                  ;
  1561                                  ;	INT7	No Coprocessor
  1562                                  ;
  1563                                  ;-----------------------------------------------------------------------------------------------------------------------
  1564                                  			menter	nocoproc					;no coprocessor interrupt
  1565                                  			push	7						;store interrupt nbr
  1566                                  			push	czIntNoCoprocessor				;store message offset
  1567                                  			jmp	ReportInterrupt					;report interrupt
  1568                                  ;-----------------------------------------------------------------------------------------------------------------------
  1569                                  ;
  1570                                  ;	INT8	Double Fault
  1571                                  ;
  1572                                  ;-----------------------------------------------------------------------------------------------------------------------
  1573                                  			menter	doublefault					;doublefault interrupt
  1574                                  			push	8						;store interrupt nbr
  1575                                  			push	czIntDoubleFault				;store message offset
  1576                                  			jmp	ReportInterrupt					;report interrupt
  1577                                  ;-----------------------------------------------------------------------------------------------------------------------
  1578                                  ;
  1579                                  ;	INT9	Operand
  1580                                  ;
  1581                                  ;-----------------------------------------------------------------------------------------------------------------------
  1582                                  			menter	operand						;operand interrupt
  1583                                  			push	9						;store interrupt nbr
  1584                                  			push	czIntOperand					;store message offset
  1585                                  			jmp	ReportInterrupt					;report interrupt
  1586                                  ;-----------------------------------------------------------------------------------------------------------------------
  1587                                  ;
  1588                                  ;	INT10	Bad Task State Segment
  1589                                  ;
  1590                                  ;-----------------------------------------------------------------------------------------------------------------------
  1591                                  			menter	badtss						;bad tss interrupt
  1592                                  			push	10						;store interrupt nbr
  1593                                  			push	czIntBadTSS					;store message offset
  1594                                  			jmp	ReportInterrupt					;report interrupt
  1595                                  ;-----------------------------------------------------------------------------------------------------------------------
  1596                                  ;
  1597                                  ;	INT11	Not Present
  1598                                  ;
  1599                                  ;-----------------------------------------------------------------------------------------------------------------------
  1600                                  			menter	notpresent					;not present interrupt
  1601                                  			push	11						;store interrupt nbr
  1602                                  			push	czIntNotPresent					;store message offset
  1603                                  			jmp	ReportInterrupt					;report interrupt
  1604                                  ;-----------------------------------------------------------------------------------------------------------------------
  1605                                  ;
  1606                                  ;	INT12	Stack Limit
  1607                                  ;
  1608                                  ;-----------------------------------------------------------------------------------------------------------------------
  1609                                  			menter	stacklimit					;stack limit interrupt
  1610                                  			push	12						;store interrupt nbr
  1611                                  			push	czIntStackLimit					;store message offset
  1612                                  			jmp	ReportInterrupt					;report interrupt
  1613                                  ;-----------------------------------------------------------------------------------------------------------------------
  1614                                  ;
  1615                                  ;	INT13	General Protection Fault
  1616                                  ;
  1617                                  ;-----------------------------------------------------------------------------------------------------------------------
  1618                                  			menter	protection					;protection fault interrupt
  1619                                  			push	13						;store interrupt nbr
  1620                                  			push	czIntProtection					;store message offset
  1621                                  			jmp	ReportInterrupt					;report interrupt
  1622                                  ;-----------------------------------------------------------------------------------------------------------------------
  1623                                  ;
  1624                                  ;	INT14	Reserved
  1625                                  ;
  1626                                  ;-----------------------------------------------------------------------------------------------------------------------
  1627                                  			menter	int14						;(reserved)
  1628                                  			push	14						;store interrupt nbr
  1629                                  			push	czIntReserved					;store message offset
  1630                                  			jmp	ReportInterrupt					;report interrupt
  1631                                  ;-----------------------------------------------------------------------------------------------------------------------
  1632                                  ;
  1633                                  ;	INT15	Reserved
  1634                                  ;
  1635                                  ;-----------------------------------------------------------------------------------------------------------------------
  1636                                  			menter	int15						;(reserved)
  1637                                  			push	15						;store interrupt nbr
  1638                                  			push	czIntReserved					;store message offset
  1639                                  			jmp	ReportInterrupt					;report interrupt
  1640                                  ;-----------------------------------------------------------------------------------------------------------------------
  1641                                  ;
  1642                                  ;	INT16	Coprocessor Calculation
  1643                                  ;
  1644                                  ;-----------------------------------------------------------------------------------------------------------------------
  1645                                  			menter	coproccalc					;coprocessor calculation
  1646                                  			push	16						;store interrupt nbr
  1647                                  			push	czIntCoprocessorCalc				;store message offset
  1648                                  			jmp	ReportInterrupt					;report interrupt
  1649                                  ;-----------------------------------------------------------------------------------------------------------------------
  1650                                  ;
  1651                                  ;	INT17	Reserved
  1652                                  ;
  1653                                  ;-----------------------------------------------------------------------------------------------------------------------
  1654                                  			menter	int17						;(reserved)
  1655                                  			push	17						;store interrupt nbr
  1656                                  			push	czIntReserved					;store message offset
  1657                                  			jmp	ReportInterrupt					;report interrupt
  1658                                  ;-----------------------------------------------------------------------------------------------------------------------
  1659                                  ;
  1660                                  ;	INT18	Reserved
  1661                                  ;
  1662                                  ;-----------------------------------------------------------------------------------------------------------------------
  1663                                  			menter	int18						;(reserved)
  1664                                  			push	18						;store interrupt nbr
  1665                                  			push	czIntReserved					;store message offset
  1666                                  			jmp	ReportInterrupt					;report interrupt
  1667                                  ;-----------------------------------------------------------------------------------------------------------------------
  1668                                  ;
  1669                                  ;	INT19	Reserved
  1670                                  ;
  1671                                  ;-----------------------------------------------------------------------------------------------------------------------
  1672                                  			menter	int19						;(reserved)
  1673                                  			push	19						;store interrupt nbr
  1674                                  			push	czIntReserved					;store message offset
  1675                                  			jmp	ReportInterrupt					;report interrupt
  1676                                  ;-----------------------------------------------------------------------------------------------------------------------
  1677                                  ;
  1678                                  ;	INT20	Reserved
  1679                                  ;
  1680                                  ;-----------------------------------------------------------------------------------------------------------------------
  1681                                  			menter	int20						;(reserved)
  1682                                  			push	20						;store interrupt nbr
  1683                                  			push	czIntReserved					;store message offset
  1684                                  			jmp	ReportInterrupt					;report interrupt
  1685                                  ;-----------------------------------------------------------------------------------------------------------------------
  1686                                  ;
  1687                                  ;	INT21	Reserved
  1688                                  ;
  1689                                  ;-----------------------------------------------------------------------------------------------------------------------
  1690                                  			menter	int21						;(reserved)
  1691                                  			push	21						;store interrupt nbr
  1692                                  			push	czIntReserved					;store message offset
  1693                                  			jmp	ReportInterrupt					;report interrupt
  1694                                  ;-----------------------------------------------------------------------------------------------------------------------
  1695                                  ;
  1696                                  ;	INT22	Reserved
  1697                                  ;
  1698                                  ;-----------------------------------------------------------------------------------------------------------------------
  1699                                  			menter	int22						;(reserved)
  1700                                  			push	22						;store interrupt nbr
  1701                                  			push	czIntReserved					;store message offset
  1702                                  			jmp	ReportInterrupt					;report interrupt
  1703                                  ;-----------------------------------------------------------------------------------------------------------------------
  1704                                  ;
  1705                                  ;	INT23	Reserved
  1706                                  ;
  1707                                  ;-----------------------------------------------------------------------------------------------------------------------
  1708                                  			menter	int23						;(reserved)
  1709                                  			push	23						;store interrupt nbr
  1710                                  			push	czIntReserved					;store message offset
  1711                                  			jmp	ReportInterrupt					;report interrupt
  1712                                  ;-----------------------------------------------------------------------------------------------------------------------
  1713                                  ;
  1714                                  ;	INT24	Reserved
  1715                                  ;
  1716                                  ;-----------------------------------------------------------------------------------------------------------------------
  1717                                  			menter	int24						;(reserved)
  1718                                  			push	24						;store interrupt nbr
  1719                                  			push	czIntReserved					;store message offset
  1720                                  			jmp	ReportInterrupt					;report interrupt
  1721                                  ;-----------------------------------------------------------------------------------------------------------------------
  1722                                  ;
  1723                                  ;	INT25	Reserved
  1724                                  ;
  1725                                  ;-----------------------------------------------------------------------------------------------------------------------
  1726                                  			menter	int25						;(reserved)
  1727                                  			push	25						;store interrupt nbr
  1728                                  			push	czIntReserved					;store message offset
  1729                                  			jmp	ReportInterrupt					;report interrupt
  1730                                  ;-----------------------------------------------------------------------------------------------------------------------
  1731                                  ;
  1732                                  ;	INT26	Reserved
  1733                                  ;
  1734                                  ;-----------------------------------------------------------------------------------------------------------------------
  1735                                  			menter	int26						;(reserved)
  1736                                  			push	26						;store interrupt nbr
  1737                                  			push	czIntReserved					;store message offset
  1738                                  			jmp	ReportInterrupt					;report interrupt
  1739                                  ;-----------------------------------------------------------------------------------------------------------------------
  1740                                  ;
  1741                                  ;	INT27	Reserved
  1742                                  ;
  1743                                  ;-----------------------------------------------------------------------------------------------------------------------
  1744                                  			menter	int27						;(reserved)
  1745                                  			push	27						;store interrupt nbr
  1746                                  			push	czIntReserved					;store message offset
  1747                                  			jmp	ReportInterrupt					;report interrupt
  1748                                  ;-----------------------------------------------------------------------------------------------------------------------
  1749                                  ;
  1750                                  ;	INT28	Reserved
  1751                                  ;
  1752                                  ;-----------------------------------------------------------------------------------------------------------------------
  1753                                  			menter	int28						;(reserved)
  1754                                  			push	28						;store interrupt nbr
  1755                                  			push	czIntReserved					;store message offset
  1756                                  			jmp	ReportInterrupt					;report interrupt
  1757                                  ;-----------------------------------------------------------------------------------------------------------------------
  1758                                  ;
  1759                                  ;	INT29	Reserved
  1760                                  ;
  1761                                  ;-----------------------------------------------------------------------------------------------------------------------
  1762                                  			menter	int29						;(reserved)
  1763                                  			push	29						;store interrupt nbr
  1764                                  			push	czIntReserved					;store message offset
  1765                                  			jmp	ReportInterrupt					;report interrupt
  1766                                  ;-----------------------------------------------------------------------------------------------------------------------
  1767                                  ;
  1768                                  ;	INT30	Reserved
  1769                                  ;
  1770                                  ;-----------------------------------------------------------------------------------------------------------------------
  1771                                  			menter	int30						;(reserved)
  1772                                  			push	30						;store interrupt nbr
  1773                                  			push	czIntReserved					;store message offset
  1774                                  			jmp	ReportInterrupt					;report interrupt
  1775                                  ;-----------------------------------------------------------------------------------------------------------------------
  1776                                  ;
  1777                                  ;	INT31	Reserved
  1778                                  ;
  1779                                  ;-----------------------------------------------------------------------------------------------------------------------
  1780                                  			menter	int31						;(reserved)
  1781                                  			push	31						;store interrupt nbr
  1782                                  			push	czIntReserved					;store message offset
  1783                                  			jmp	ReportInterrupt					;report interrupt
  1784                                  ;-----------------------------------------------------------------------------------------------------------------------
  1785                                  ;
  1786                                  ;	Routine:	ReportInterrupt
  1787                                  ;
  1788                                  ;	Description:	This routine will be used to respond to processor interrupts that are not otherwise handled.
  1789                                  ;			At this stage, we simply restore the stack and return from the interrupt.
  1790                                  ;
  1791                                  ;	In:		[esp+4]		interrupt number (0-31)			stored by push instruction
  1792                                  ;			[esp+0]		error message address			stored by push instructions
  1793                                  ;
  1794                                  ;-----------------------------------------------------------------------------------------------------------------------
  1795                                  ReportInterrupt		pop	eax						;error message address
  1796                                  			pop	eax						;interrupt number
  1797                                  			iretd							;return
  1798                                  ;-----------------------------------------------------------------------------------------------------------------------
  1799                                  ;
  1800                                  ;	Processor Interrupt Name Strings
  1801                                  ;
  1802                                  ;-----------------------------------------------------------------------------------------------------------------------
  1803                                  czIntDivideByZero	db	"Division by zero",0
  1804                                  czIntSingleStep		db	"Single step",0
  1805                                  czIntNonMaskable	db	"Non-maskable interrupt",0
  1806                                  czIntBreak		db	"Break",0
  1807                                  czIntInto		db	"Into",0
  1808                                  czIntBounds		db	"Bounds",0
  1809                                  czIntBadOpCode		db	"Bad Operation Code",0
  1810                                  czIntNoCoprocessor	db	"No Coprocessor",0
  1811                                  czIntDoubleFault	db	"Double Fault",0
  1812                                  czIntOperand		db	"Operand",0
  1813                                  czIntBadTSS		db	"Bad Task State Segment",0
  1814                                  czIntNotPresent		db	"Not Present",0
  1815                                  czIntStackLimit		db	"Stack Limit",0
  1816                                  czIntProtection		db	"General Protection Fault",0
  1817                                  czIntCoprocessorCalc	db	"Coprocessor Calculation",0
  1818                                  czIntReserved		db	"Reserved",0
  1819                                  ;=======================================================================================================================
  1820                                  ;
  1821                                  ;	Hardware Device Interupts
  1822                                  ;
  1823                                  ;	The next 16 interrupts are defined as our hardware interrupts. These interrupts vectors (20h-2Fh) are mapped to
  1824                                  ;	the hardware interrupts IRQ0-IRQF by the BIOS when the call to the BIOS is made invoking BIOS function 89h
  1825                                  ;	(BX=2028h).
  1826                                  ;
  1827                                  ;=======================================================================================================================
  1828                                  ;-----------------------------------------------------------------------------------------------------------------------
  1829                                  ;
  1830                                  ;	IRQ0	Clock Tick Interrupt
  1831                                  ;
  1832                                  ;	PC compatible systems contain or emulate the function of the Intel 8253 Programmable Interval Timer (PIT).
  1833                                  ;	Channel 0 of this chip decrements an internal counter to zero and then issues a hardware interrupt. The default
  1834                                  ;	rate at which IRQ0 occurs is approximately 18.2 times per second or, more accurately, 1,573,040 times per day.
  1835                                  ;
  1836                                  ;	Every time IRQ0 occurs, a counter at 40:6c is incremented. When the number of ticks reaches the maximum for one
  1837                                  ;	day, the counter is set to zero and the number of days counter at 40:70 is incremented.
  1838                                  ;
  1839                                  ;	This handler also decrements the floppy drive motor count at 40:40 if it is not zero. When this count reaches
  1840                                  ;	zero, the floppy disk motors are turned off.
  1841                                  ;
  1842                                  ;-----------------------------------------------------------------------------------------------------------------------
  1843                                  			menter	clocktick					;clock tick interrupt
  1844                                  			push	eax						;save modified regs
  1845                                  			push	edx						;
  1846                                  			push	ds						;
  1847                                  ;
  1848                                  ;	Update the clock tick count and the elapsed days as needed
  1849                                  ;
  1850                                  			push	ESELDAT						;load OS data selector ...
  1851                                  			pop	ds						;... into data segment register
  1852                                  			mov	eax,[wdClockTicks]				;eax = clock ticks
  1853                                  			inc	eax						;increment clock ticks
  1854                                  			cmp	eax,EPITDAYTICKS				;clock ticks per day?
  1855                                  			jb	irq0.10						;no, skip ahead
  1856                                  			inc	byte [wbClockDays]				;increment clock days
  1857                                  			xor	eax,eax						;reset clock ticks
  1858                                  irq0.10			mov	dword [wdClockTicks],eax			;save clock ticks
  1859                                  ;
  1860                                  ;	Decrement floppy disk motor timeout
  1861                                  ;
  1862                                  			cmp	byte [wbFDCMotor],0				;floppy motor timeout?
  1863                                  			je	irq0.20						;yes, skip ahead
  1864                                  			dec	byte [wbFDCMotor]				;decrement motor timeout
  1865                                  			jnz	irq0.20						;skip ahead if non-zero
  1866                                  ;
  1867                                  ;	Turn off the floppy disk motor if appropriate
  1868                                  ;
  1869                                  			sti							;enable maskable interrupts
  1870                                  irq0.15 		mov	dh,EFDCPORTHI					;FDC controller port hi
  1871                                  			mov	dl,EFDCPORTLOSTAT				;FDC main status register
  1872                                  			in	al,dx						;FDC main status byte
  1873                                  			test	al,EFDCSTATBUSY					;test FDC main status for busy
  1874                                  			jnz	irq0.15						;wait while busy
  1875                                  			mov	al,EFDCMOTOROFF					;motor-off / enable/ DMA setting
  1876                                  			mov	byte [wbFDCControl],al				;save motor-off setting
  1877                                  			mov	dh,EFDCPORTHI					;fdc port hi
  1878                                  			mov	dl,EFDCPORTLOOUT				;fdc digital output register
  1879                                  			out	dx,al						;turn motor off
  1880                                  ;
  1881                                  ;	Signal the end of the hardware interrupt
  1882                                  ;
  1883                                  irq0.20			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  1884                                  ;
  1885                                  ;	Restore and return
  1886                                  ;
  1887                                  			pop	ds						;restore modified regs
  1888                                  			pop	edx						;
  1889                                  			pop	eax						;
  1890                                  			iretd							;return
  1891                                  ;-----------------------------------------------------------------------------------------------------------------------
  1892                                  ;
  1893                                  ;	IRQ1	Keyboard Interrupt
  1894                                  ;
  1895                                  ;	This handler is called when an IRQ1 hardware interrupt occurs, caused by a keyboard event. The scan-code(s)
  1896                                  ;	corresponding to the keyboard event are read and message events are appended to the message queue. Since this
  1897                                  ;	code is called in response to a hardware interrupt, no task switch occurs. We need to preseve the state of
  1898                                  ;	ALL modified registers upon return.
  1899                                  ;
  1900                                  ;-----------------------------------------------------------------------------------------------------------------------
  1901                                  			menter	keyboard					;keyboard interrrupt
  1902                                  			push	eax						;save non-volatile regs
  1903                                  			push	ebx						;
  1904                                  			push	ecx						;
  1905                                  			push	esi						;
  1906                                  			push	ds						;
  1907                                  			push	ESELDAT						;load OS data selector ...
  1908                                  			pop	ds						;... into data segment register
  1909                                  			xor	al,al						;zero
  1910                                  			mov	[wbConsoleScan0],al				;clear scan code 0
  1911                                  			mov	[wbConsoleScan1],al				;clear scan code 1
  1912                                  			mov	[wbConsoleScan2],al				;clear scan code 2
  1913                                  			mov	[wbConsoleScan3],al				;clear scan code 3
  1914                                  			mov	[wbConsoleScan4],al				;clear scan code 4
  1915                                  			mov	[wbConsoleScan5],al				;clear scan code 5
  1916                                  			mov	al,' '						;space
  1917                                  			mov	[wbConsoleChar],al				;set character to space
  1918                                  			mov	al,EKEYFTIMEOUT					;controller timeout flag
  1919                                  			not	al						;controller timeout mask
  1920                                  			and	[wbConsoleStatus],al				;clear controller timeout flag
  1921                                  			mov	bl,[wbConsoleShift]				;shift flags
  1922                                  			mov	bh,[wbConsoleLock]				;lock flags
  1923                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1924                                  			jz	irq1.140					;yes, skip ahead
  1925                                  			in	al,EKEYBPORTDATA				;read scan code 0
  1926                                  			mov	[wbConsoleScan0],al				;save scan code 0
  1927                                  			mov	ah,al						;copy scan code 0
  1928                                  			mov	al,EKEYFSHIFTLEFT				;left shift flag
  1929                                  			cmp	ah,EKEYBSHIFTLDOWN				;left shift key down code?
  1930                                  			je	irq1.30						;yes, set flag
  1931                                  			cmp	ah,EKEYBSHIFTLUP				;left shift key up code?
  1932                                  			je	irq1.40						;yes, reset flag
  1933                                  			mov	al,EKEYFSHIFTRIGHT				;right shift flag
  1934                                  			cmp	ah,EKEYBSHIFTRDOWN				;right shift key down code?
  1935                                  			je	irq1.30						;yes, set flag
  1936                                  			cmp	ah,EKEYBSHIFTRUP				;right shift key up code?
  1937                                  			je	irq1.40						;yes, reset flag
  1938                                  			mov	al,EKEYFCTRLLEFT				;left control flag
  1939                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1940                                  			je	irq1.30						;yes, set flag
  1941                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1942                                  			je	irq1.40						;yes, reset flag
  1943                                  			mov	al,EKEYFALTLEFT					;left alt flag
  1944                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1945                                  			je	irq1.30						;yes, set flag
  1946                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1947                                  			je	irq1.40						;yes, reset flag
  1948                                  			mov	al,EKEYFLOCKCAPS				;caps-lock flag
  1949                                  			cmp	ah,EKEYBCAPSDOWN				;caps-lock key down code?
  1950                                  			je	irq1.50						;yes, toggle lamps and flags
  1951                                  			mov	al,EKEYFLOCKNUM					;num-lock flag
  1952                                  			cmp	ah,EKEYBNUMDOWN					;num-lock key down code?
  1953                                  			je	irq1.50						;yes, toggle lamps and flags
  1954                                  			mov	al,EKEYFLOCKSCROLL				;scroll-lock flag
  1955                                  			cmp	ah,EKEYBSCROLLDOWN				;scroll-lock key down code?
  1956                                  			je	irq1.50						;yes, toggle lamps and flags
  1957                                  			cmp	ah,EKEYBCODEEXT0				;extended scan code 0?
  1958                                  			jne	irq1.70 					;no, skip ahead
  1959                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1960                                  			jz	irq1.140					;yes, skip ahead
  1961                                  			in	al,EKEYBPORTDATA				;read scan code 1
  1962                                  			mov	[wbConsoleScan1],al				;save scan code 1
  1963                                  			mov	ah,al						;copy scan code 1
  1964                                  			mov	al,EKEYFCTRLRIGHT				;right control flag
  1965                                  			cmp	ah,EKEYBCTRLDOWN				;control key down code?
  1966                                  			je	irq1.30						;yes, set flag
  1967                                  			cmp	ah,EKEYBCTRLUP					;control key up code?
  1968                                  			je	irq1.40						;yes, reset flag
  1969                                  			mov	al,EKEYFALTRIGHT				;right alt flag
  1970                                  			cmp	ah,EKEYBALTDOWN					;alt key down code?
  1971                                  			je	irq1.30						;yes, set flag
  1972                                  			cmp	ah,EKEYBALTUP					;alt key up code?
  1973                                  			je	irq1.40						;yes, reset flag
  1974                                  			cmp	ah,EKEYBSLASH					;slash down code?
  1975                                  			je	irq1.80						;yes, skip ahead
  1976                                  			cmp	ah,EKEYBSLASHUP					;slash up code?
  1977                                  			je	irq1.80						;yes, skip ahead
  1978                                  			cmp	ah,EKEYBPRTSCRDOWN				;print screen down code?
  1979                                  			je	irq1.10						;yes, continue
  1980                                  			cmp	ah,EKEYBPRTSCRUP				;print screen up code?
  1981                                  			jne	irq1.20						;no, skip ahead
  1982                                  irq1.10			call	WaitForKeyOutBuffer				;controller timeout?
  1983                                  			jz	irq1.140					;yes, skip ahead
  1984                                  			in	al,EKEYBPORTDATA				;read scan code 2
  1985                                  			mov	[wbConsoleScan2],al				;save scan code 2
  1986                                  			call	WaitForKeyOutBuffer				;controller timeout?
  1987                                  			jz	irq1.140					;yes, skip ahead
  1988                                  			in	al,EKEYBPORTDATA				;read scan code 3
  1989                                  			mov	[wbConsoleScan3],al				;read scan code 3
  1990                                  irq1.20			jmp	irq1.150					;finish keyboard handling
  1991                                  irq1.30			or	bl,al						;set shift flag
  1992                                  			jmp	irq1.60						;skip ahead
  1993                                  irq1.40			not	al						;convert flag to mask
  1994                                  			and	bl,al						;reset shift flag
  1995                                  			jmp	irq1.60						;skip ahead
  1996                                  irq1.50			xor	bh,al						;toggle lock flag
  1997                                  			call	SetKeyboardLamps				;update keyboard lamps
  1998                                  irq1.60			mov	[wbConsoleShift],bl				;save shift flags
  1999                                  			mov	[wbConsoleLock],bh				;save lock flags
  2000                                  			call	PutConsoleOIAShift				;update OIA indicators
  2001                                  			jmp	irq1.150					;finish keyboard handling
  2002                                  irq1.70			cmp	ah,EKEYBCODEEXT1				;extended scan code 1?
  2003                                  			jne	irq1.80						;no continue
  2004                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2005                                  			jz	irq1.140					;yes, skip ahead
  2006                                  			in	al,EKEYBPORTDATA				;read scan code 1
  2007                                  			mov	[wbConsoleScan1],al				;save scan code 1
  2008                                  			mov	ah,al						;copy scan code 1
  2009                                  			cmp	ah,EKEYBPAUSEDOWN				;pause key down code?
  2010                                  			jne	irq1.150					;no, finish keyboard handling
  2011                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2012                                  			jz	irq1.140					;yes, skip ahead
  2013                                  			in	al,EKEYBPORTDATA				;read scan code 2
  2014                                  			mov	[wbConsoleScan2],al				;save scan code 2
  2015                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2016                                  			jz	irq1.140					;yes, skip ahead
  2017                                  			in	al,EKEYBPORTDATA				;read scan code 3
  2018                                  			mov	[wbConsoleScan3],al				;save scan code 3
  2019                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2020                                  			jz	irq1.140					;yes, skip ahead
  2021                                  			in	al,EKEYBPORTDATA				;read scan code 4
  2022                                  			mov	[wbConsoleScan4],al				;save scan code 4
  2023                                  			call	WaitForKeyOutBuffer				;controller timeout?
  2024                                  			jz	irq1.140					;yes, skip ahead
  2025                                  			in	al,EKEYBPORTDATA				;read scan code 5
  2026                                  			mov	[wbConsoleScan5],al				;save scan code 5
  2027                                  			jmp	irq1.150					;continue
  2028                                  irq1.80			xor	al,al						;assume no ASCII translation
  2029                                  			test	ah,EKEYBUP					;release code?
  2030                                  			jnz	irq1.130					;yes, skip ahead
  2031                                  			mov	esi,tscan2ascii					;scan-to-ascii table address
  2032                                  			test	bl,EKEYFSHIFT					;either shift key down?
  2033                                  			jz	irq1.90						;no, skip ahead
  2034                                  			mov	esi,tscan2shift					;scan-to-shifted table address
  2035                                  irq1.90			movzx	ecx,ah						;scan code offset
  2036                                  			mov	al,[cs:ecx+esi]					;al = ASCII code
  2037                                  			test	bh,EKEYFLOCKCAPS				;caps-lock on?
  2038                                  			jz	irq1.100					;no skip ahead
  2039                                  			mov	cl,al						;copy ASCII code
  2040                                  			and	cl,EASCIICASEMASK				;clear case mask of copy
  2041                                  			cmp	cl,EASCIIUPPERA					;less than 'A'?
  2042                                  			jb	irq1.100					;yes, skip ahead
  2043                                  			cmp	cl,EASCIIUPPERZ					;greater than 'Z'?
  2044                                  			ja	irq1.100					;yes, skip ahead
  2045                                  			xor	al,EASCIICASE					;switch case
  2046                                  irq1.100		mov	[wbConsoleChar],al				;save ASCII code
  2047                                  irq1.110		mov	edx,EMSGKEYDOWN					;assume key-down event
  2048                                  			test	ah,EKEYBUP					;release scan-code?
  2049                                  			jz	irq1.120					;no, skip ahead
  2050                                  			mov	edx,EMSGKEYUP					;key-up event
  2051                                  irq1.120		and	eax,0FFFFh					;clear high-order word
  2052                                  			or	edx,eax						;msg id and codes
  2053                                  			xor	ecx,ecx						;null param
  2054                                  			push	eax						;save codes
  2055                                  			call	PutMessage					;put message to console
  2056                                  			pop	eax						;restore codes
  2057                                  			test	al,al						;ASCII translation?
  2058                                  			jz	irq1.130					;no, skip ahead
  2059                                  			mov	edx,EMSGKEYCHAR					;key-character event
  2060                                  			and	eax,0FFFFh					;clear high-order word
  2061                                  			or	edx,eax						;msg id and codes
  2062                                  			xor	ecx,ecx						;null param
  2063                                  			call	PutMessage					;put message to console
  2064                                  irq1.130		jmp	irq1.150					;finish keyboard handling
  2065                                  irq1.140		mov	al,EKEYFTIMEOUT					;controller timeout flag
  2066                                  			or	[wbConsoleStatus],al				;set controller timeout flag
  2067                                  irq1.150		call	PutConsoleOIAChar				;update operator info area
  2068                                  			call	PutPrimaryEndOfInt				;send end-of-interrupt to PIC
  2069                                  			pop	ds						;restore non-volatile regs
  2070                                  			pop	esi						;
  2071                                  			pop	ecx						;
  2072                                  			pop	ebx						;
  2073                                  			pop	eax						;
  2074                                  			iretd							;return
  2075                                  ;-----------------------------------------------------------------------------------------------------------------------
  2076                                  ;	Scan-Code to ASCII Translation Tables
  2077                                  ;-----------------------------------------------------------------------------------------------------------------------
  2078                                  tscan2ascii		db	000h,01Bh,031h,032h,033h,034h,035h,036h		;00-07
  2079                                  			db	037h,038h,039h,030h,02Dh,03Dh,008h,009h		;08-0F
  2080                                  			db	071h,077h,065h,072h,074h,079h,075h,069h		;10-17
  2081                                  			db	06Fh,070h,05Bh,05Dh,00Dh,000h,061h,073h		;18-1F
  2082                                  			db	064h,066h,067h,068h,06Ah,06Bh,06Ch,03Bh		;20-27
  2083                                  			db	027h,060h,000h,05Ch,07Ah,078h,063h,076h		;28-2F
  2084                                  			db	062h,06Eh,06Dh,02Ch,02Eh,02Fh,000h,02Ah		;30-37
  2085                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;38-3F
  2086                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;40-47
  2087                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;48-4F
  2088                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;50-57
  2089                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;58-5F
  2090                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;60-67
  2091                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;68-6F
  2092                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;70-77
  2093                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;78-7F
  2094                                  tscan2shift		db	000h,01Bh,021h,040h,023h,024h,025h,05Eh		;80-87
  2095                                  			db	026h,02Ah,028h,029h,05Fh,02Bh,008h,000h		;88-8F
  2096                                  			db	051h,057h,045h,052h,054h,059h,055h,049h		;90-97
  2097                                  			db	04Fh,050h,07Bh,07Dh,00Dh,000h,041h,053h		;98-9F
  2098                                  			db	044h,046h,047h,048h,04Ah,04Bh,04Ch,03Ah		;A0-A7
  2099                                  			db	022h,07Eh,000h,07Ch,05Ah,058h,043h,056h		;A8-AF
  2100                                  			db	042h,04Eh,04Dh,03Ch,03Eh,03Fh,000h,02Ah		;B0-B7
  2101                                  			db	000h,020h,000h,000h,000h,000h,000h,000h		;B8-BF
  2102                                  			db	000h,000h,000h,000h,000h,000h,000h,037h		;C0-C7
  2103                                  			db	038h,039h,02Dh,034h,035h,036h,02Bh,031h		;C8-CF
  2104                                  			db	032h,033h,030h,02Eh,000h,000h,000h,000h		;D0-D7
  2105                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;D8-DF
  2106                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E0-E7
  2107                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;E8-EF
  2108                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F0-F7
  2109                                  			db	000h,000h,000h,000h,000h,000h,000h,000h		;F8-FF
  2110                                  ;-----------------------------------------------------------------------------------------------------------------------
  2111                                  ;
  2112                                  ;	IRQ2	Secondary 8259A Cascade Hardware Interrupt
  2113                                  ;
  2114                                  ;-----------------------------------------------------------------------------------------------------------------------
  2115                                  			menter	iochannel					;secondary 8259A cascade
  2116                                  			push	eax						;save modified regs
  2117                                  			jmp	hwint						;end interrupt and return
  2118                                  ;-----------------------------------------------------------------------------------------------------------------------
  2119                                  ;
  2120                                  ;	IRQ3	Communication Port 2 Hardware Interrupt
  2121                                  ;
  2122                                  ;-----------------------------------------------------------------------------------------------------------------------
  2123                                  			menter	com2						;serial port 2 interrupt
  2124                                  			push	eax						;save modified regs
  2125                                  			jmp	hwint						;end interrupt and return
  2126                                  ;-----------------------------------------------------------------------------------------------------------------------
  2127                                  ;
  2128                                  ;	IRQ4	Communication Port 1 Hardware Interrupt
  2129                                  ;
  2130                                  ;-----------------------------------------------------------------------------------------------------------------------
  2131                                  			menter	com1						;serial port 1 interrupt
  2132                                  			push	eax						;save modified regs
  2133                                  			jmp	hwint						;end interrupt and return
  2134                                  ;-----------------------------------------------------------------------------------------------------------------------
  2135                                  ;
  2136                                  ;	IRQ5	Parallel Port 2 Hardware Interrupt
  2137                                  ;
  2138                                  ;-----------------------------------------------------------------------------------------------------------------------
  2139                                  			menter	lpt2						;parallel port 2 interrupt
  2140                                  			push	eax						;save modified regs
  2141                                  			jmp	hwint						;end interrupt and return
  2142                                  ;-----------------------------------------------------------------------------------------------------------------------
  2143                                  ;
  2144                                  ;	IRQ6	Diskette Hardware Interrupt
  2145                                  ;
  2146                                  ;-----------------------------------------------------------------------------------------------------------------------
  2147                                  			menter	diskette					;floppy disk interrupt
  2148                                  			push	eax						;save non-volatile regs
  2149                                  			push	ds						;
  2150                                  			push	ESELDAT						;load OS data selector ...
  2151                                  			pop	ds						;... into DS register
  2152                                  			mov	al,[wbFDCStatus]				;al = FDC calibration status
  2153                                  			or	al,10000000b					;set IRQ flag
  2154                                  			mov	[wbFDCStatus],al				;update FDC calibration status
  2155                                  			pop	ds						;restore non-volatile regs
  2156                                  			jmp	hwint						;end primary PIC interrupt
  2157                                  ;-----------------------------------------------------------------------------------------------------------------------
  2158                                  ;
  2159                                  ;	IRQ7	Parallel Port 1 Hardware Interrupt
  2160                                  ;
  2161                                  ;-----------------------------------------------------------------------------------------------------------------------
  2162                                  			menter	lpt1						;parallel port 1 interrupt
  2163                                  			push	eax						;save modified regs
  2164                                  			jmp	hwint						;end interrupt and return
  2165                                  ;-----------------------------------------------------------------------------------------------------------------------
  2166                                  ;
  2167                                  ;	IRQ8	Real-time Clock Hardware Interrupt
  2168                                  ;
  2169                                  ;-----------------------------------------------------------------------------------------------------------------------
  2170                                  			menter	rtclock						;real-time clock interrupt
  2171                                  			push	eax						;save modified regs
  2172                                  			jmp	hwwint						;end interrupt and return
  2173                                  ;-----------------------------------------------------------------------------------------------------------------------
  2174                                  ;
  2175                                  ;	IRQ9	CGA Vertical Retrace Hardware Interrupt
  2176                                  ;
  2177                                  ;-----------------------------------------------------------------------------------------------------------------------
  2178                                  			menter	retrace						;CGA vertical retrace interrupt
  2179                                  			push	eax						;save modified regs
  2180                                  			jmp	hwwint						;end interrupt and return
  2181                                  ;-----------------------------------------------------------------------------------------------------------------------
  2182                                  ;
  2183                                  ;	IRQ10	Reserved Hardware Interrupt
  2184                                  ;
  2185                                  ;-----------------------------------------------------------------------------------------------------------------------
  2186                                  			menter	irq10						;reserved
  2187                                  			push	eax						;save modified regs
  2188                                  			jmp	hwwint						;end interrupt and return
  2189                                  ;-----------------------------------------------------------------------------------------------------------------------
  2190                                  ;
  2191                                  ;	IRQ11	Reserved Hardware Interrupt
  2192                                  ;
  2193                                  ;-----------------------------------------------------------------------------------------------------------------------
  2194                                  			menter	irq11						;reserved
  2195                                  			push	eax						;save modified regs
  2196                                  			jmp	hwwint						;end interrupt and return
  2197                                  ;-----------------------------------------------------------------------------------------------------------------------
  2198                                  ;
  2199                                  ;	IRQ12	PS/2 Mouse Hardware Interrupt
  2200                                  ;
  2201                                  ;-----------------------------------------------------------------------------------------------------------------------
  2202                                  			menter	ps2mouse					;PS/2 mouse interrupt
  2203                                  			push	eax						;save modified regs
  2204                                  			jmp	hwwint						;end interrupt and return
  2205                                  ;-----------------------------------------------------------------------------------------------------------------------
  2206                                  ;
  2207                                  ;	IRQ13	Coprocessor Hardware Interrupt
  2208                                  ;
  2209                                  ;-----------------------------------------------------------------------------------------------------------------------
  2210                                  			menter	coprocessor					;coprocessor interrupt
  2211                                  			push	eax						;save modified regs
  2212                                  			jmp	hwwint						;end interrupt and return
  2213                                  ;-----------------------------------------------------------------------------------------------------------------------
  2214                                  ;
  2215                                  ;	IRQ14	Fixed Disk Hardware Interrupt
  2216                                  ;
  2217                                  ;-----------------------------------------------------------------------------------------------------------------------
  2218                                  			menter	fixeddisk					;fixed disk interrupt
  2219                                  			push	eax						;save modified regs
  2220                                  			jmp	hwwint						;end interrupt and return
  2221                                  ;-----------------------------------------------------------------------------------------------------------------------
  2222                                  ;
  2223                                  ;	IRQ15	Reserved Hardware Interrupt
  2224                                  ;
  2225                                  ;-----------------------------------------------------------------------------------------------------------------------
  2226                                  			menter	irq15						;reserved
  2227                                  			push	eax						;save modified regs
  2228                                  			jmp	hwwint						;end interrupt and return
  2229                                  ;-----------------------------------------------------------------------------------------------------------------------
  2230                                  ;
  2231                                  ;	Exit from hardware interrupt
  2232                                  ;
  2233                                  ;-----------------------------------------------------------------------------------------------------------------------
  2234                                  hwwint			call	PutSecondaryEndOfInt				;send EOI to secondary PIC
  2235                                  			jmp	hwint90						;skip ahead
  2236                                  hwint			call	PutPrimaryEndOfInt				;send EOI to primary PIC
  2237                                  hwint90			pop	eax						;restore modified regs
  2238                                  			iretd							;return from interrupt
  2239                                  ;-----------------------------------------------------------------------------------------------------------------------
  2240                                  ;
  2241                                  ;	INT 30h Operating System Software Service Interrupt
  2242                                  ;
  2243                                  ;	Interrupt 30h is used by our operating system as an entry point for many commonly-used subroutines reusable by
  2244                                  ;	any task. These routines include low-level i/o functions that shield applications from having to handle
  2245                                  ;	device-specific communications. On entry to this interrupt, AL contains a function number that is used to load
  2246                                  ;	the entry address of the specific function from a table.
  2247                                  ;
  2248                                  ;-----------------------------------------------------------------------------------------------------------------------
  2249                                  			menter	svc
  2250                                  			cmp	al,maxtsvc					;is our function out of range?
  2251                                  			jae	svc90						;yes, skip ahead
  2252                                  			movzx	eax,al						;function
  2253                                  			shl	eax,2						;offset into table
  2254                                  			call	dword [cs:tsvc+eax]				;far call to indirect address
  2255                                  svc90			iretd							;return from interrupt
  2256                                  ;-----------------------------------------------------------------------------------------------------------------------
  2257                                  ;
  2258                                  ;	Service Request Table
  2259                                  ;
  2260                                  ;
  2261                                  ;	These tsvce macros expand to define an address vector table for the service request interrupt (int 30h).
  2262                                  ;
  2263                                  ;-----------------------------------------------------------------------------------------------------------------------
  2264                                  tsvc			tsvce	ClearConsoleScreen				;clear console screen
  2265                                  			tsvce	CompareMemory					;compare memory
  2266                                  			tsvce	GetConsoleString				;get string input
  2267                                  			tsvce	PlaceCursor					;place the cursor at the current loc
  2268                                  			tsvce	PutConsoleString				;tty output asciiz string
  2269                                  			tsvce	ResetSystem					;reset system using 8042 chip
  2270                                  			tsvce	UpperCaseString					;upper-case string
  2271                                  maxtsvc			equ	($-tsvc)/4					;function out of range
  2272                                  ;-----------------------------------------------------------------------------------------------------------------------
  2273                                  ;
  2274                                  ;	Service Request Macros
  2275                                  ;
  2276                                  ;	These macros provide positional parameterization of service request calls.
  2277                                  ;
  2278                                  ;-----------------------------------------------------------------------------------------------------------------------
  2279                                  %macro			clearConsoleScreen 0
  2280                                  			mov	al,eClearConsoleScreen				;function code
  2281                                  			int	_svc						;invoke OS service
  2282                                  %endmacro
  2283                                  %macro			compareMemory 0
  2284                                  			mov	al,eCompareMemory				;function code
  2285                                  			int	_svc						;invoke OS service
  2286                                  %endmacro
  2287                                  %macro			getConsoleString 4
  2288                                  			mov	edx,%1						;buffer address
  2289                                  			mov	ecx,%2						;max characters
  2290                                  			mov	bh,%3						;echo indicator
  2291                                  			mov	bl,%4						;terminator
  2292                                  			mov	al,eGetConsoleString				;function code
  2293                                  			int	_svc						;invoke OS service
  2294                                  %endmacro
  2295                                  %macro			placeCursor 0
  2296                                  			mov	al,ePlaceCursor					;function code
  2297                                  			int	_svc						;invoke OS service
  2298                                  %endmacro
  2299                                  %macro			putConsoleString 1
  2300                                  			mov	edx,%1						;string address
  2301                                  			mov	al,ePutConsoleString				;function code
  2302                                  			int	_svc						;invoke OS service
  2303                                  %endmacro
  2304                                  %macro			resetSystem 0
  2305                                  			mov	al,eResetSystem					;AL = system reset fn.
  2306                                  			int	_svc						;invoke OS service
  2307                                  %endmacro
  2308                                  %macro			upperCaseString 0
  2309                                  			mov	al,eUpperCaseString				;function code
  2310                                  			int	_svc						;invoke OS service
  2311                                  %endmacro
  2312                                  ;=======================================================================================================================
  2313                                  ;
  2314                                  ;	Kernel Function Library
  2315                                  ;
  2316                                  ;=======================================================================================================================
  2317                                  ;=======================================================================================================================
  2318                                  ;
  2319                                  ;	String Helper Routines
  2320                                  ;
  2321                                  ;	UpperCaseString
  2322                                  ;	CompareMemory
  2323                                  ;
  2324                                  ;=======================================================================================================================
  2325                                  ;-----------------------------------------------------------------------------------------------------------------------
  2326                                  ;
  2327                                  ;	Routine:	UpperCaseString
  2328                                  ;
  2329                                  ;	Description:	This routine places all characters in the given string to upper case.
  2330                                  ;
  2331                                  ;	In:		DS:EDX	string address
  2332                                  ;
  2333                                  ;	Out:		EDX	string address
  2334                                  ;
  2335                                  ;-----------------------------------------------------------------------------------------------------------------------
  2336                                  UpperCaseString		push	esi						;save non-volatile regs
  2337                                  			mov	esi,edx						;string address
  2338                                  			cld							;forward strings
  2339                                  .10			lodsb							;string character
  2340                                  			test	al,al						;null?
  2341                                  			jz	.20						;yes, skip ahead
  2342                                  			cmp	al,EASCIILOWERA					;lower-case? (lower bounds)
  2343                                  			jb	.10						;no, continue
  2344                                  			cmp	al,EASCIILOWERZ					;lower-case? (upper bounds)
  2345                                  			ja	.10						;no, continue
  2346                                  			and	al,EASCIICASEMASK				;mask for upper case
  2347                                  			mov	[esi-1],al					;upper character
  2348                                  			jmp	.10						;continue
  2349                                  .20			pop	esi						;restore non-volatile regs
  2350                                  			ret							;return
  2351                                  ;-----------------------------------------------------------------------------------------------------------------------
  2352                                  ;
  2353                                  ;	Routine:	CompareMemory
  2354                                  ;
  2355                                  ;	Description:	This routine compares two byte arrays.
  2356                                  ;
  2357                                  ;	In:		DS:EDX	first source address
  2358                                  ;			DS:EBX	second source address
  2359                                  ;			ECX	comparison length
  2360                                  ;
  2361                                  ;	Out:		EDX	first source address
  2362                                  ;			EBX	second source address
  2363                                  ;			ECX	0	array 1 = array 2
  2364                                  ;				<0	array 1 < array 2
  2365                                  ;				>0	array 1 > array 2
  2366                                  ;
  2367                                  ;-----------------------------------------------------------------------------------------------------------------------
  2368                                  CompareMemory		push	esi						;save non-volatile regs
  2369                                  			push	edi						;
  2370                                  			push	es						;
  2371                                  			push	ds						;copy DS
  2372                                  			pop	es						;... to ES
  2373                                  			mov	esi,edx						;first source address
  2374                                  			mov	edi,ebx						;second source address
  2375                                  			cld							;forward strings
  2376                                  			rep	cmpsb						;compare bytes
  2377                                  			mov	al,0						;default result
  2378                                  			jz	.10						;branch if arrays equal
  2379                                  			mov	al,1						;positive result
  2380                                  			jnc	.10						;branch if target > source
  2381                                  			mov	al,-1						;negative result
  2382                                  .10			movsx	ecx,al						;extend sign
  2383                                  			pop	es						;restore non-volatile regs
  2384                                  			pop	edi						;
  2385                                  			pop	esi						;
  2386                                  			ret							;return
  2387                                  ;=======================================================================================================================
  2388                                  ;
  2389                                  ;	Console Helper Routines
  2390                                  ;
  2391                                  ;	PutConsoleString
  2392                                  ;	GetConsoleString
  2393                                  ;	GetConsoleChar
  2394                                  ;	Yield
  2395                                  ;	PreviousConsoleColumn
  2396                                  ;	NextConsoleColumn
  2397                                  ;	FirstConsoleColumn
  2398                                  ;	NextConsoleRow
  2399                                  ;	PutConsoleChar
  2400                                  ;	PutConsoleOIAShift
  2401                                  ;	PutConsoleOIAChar
  2402                                  ;	PutConsoleHexByte
  2403                                  ;
  2404                                  ;=======================================================================================================================
  2405                                  ;-----------------------------------------------------------------------------------------------------------------------
  2406                                  ;
  2407                                  ;	Routine:	PutConsoleString
  2408                                  ;
  2409                                  ;	Description:	This routine writes a sequence of ASCII characters to the console until null and updates the
  2410                                  ;			console position as needed.
  2411                                  ;
  2412                                  ;	In:		EDX	source address
  2413                                  ;			DS	OS data selector
  2414                                  ;
  2415                                  ;-----------------------------------------------------------------------------------------------------------------------
  2416                                  PutConsoleString	push	esi						;save non-volatile regs
  2417                                  			mov	esi,edx						;source address
  2418                                  			cld							;forward strings
  2419                                  .10			lodsb							;ASCII character
  2420                                  			or	al,al						;end of string?
  2421                                  			jz	.40						;yes, skip ahead
  2422                                  			cmp	al,EASCIIRETURN					;carriage return?
  2423                                  			jne	.20						;no, skip ahead
  2424                                  			call	FirstConsoleColumn				;move to start of row
  2425                                  			jmp	.10						;next character
  2426                                  .20			cmp	al,EASCIILINEFEED				;line feed?
  2427                                  			jne	.30						;no, skip ahead
  2428                                  			call	NextConsoleRow					;move to next row
  2429                                  			jmp	.10						;next character
  2430                                  .30			call	PutConsoleChar					;output character to console
  2431                                  			call	NextConsoleColumn				;advance to next column
  2432                                  			jmp	.10						;next character
  2433                                  .40			pop	esi						;restore non-volatile regs
  2434                                  			ret							;return
  2435                                  ;-----------------------------------------------------------------------------------------------------------------------
  2436                                  ;
  2437                                  ;	Routine:	GetConsoleString
  2438                                  ;
  2439                                  ;	Description:	This routine accepts keyboard input into a buffer.
  2440                                  ;
  2441                                  ;	In:		DS:EDX	target buffer address
  2442                                  ;			ECX	maximum number of characters to accept
  2443                                  ;			BH	echo to terminal
  2444                                  ;			BL	terminating character
  2445                                  ;
  2446                                  ;-----------------------------------------------------------------------------------------------------------------------
  2447                                  GetConsoleString	push	ecx						;save non-volatile regs
  2448                                  			push	esi						;
  2449                                  			push	edi						;
  2450                                  			push	es						;
  2451                                  			push	ds						;load data segment selector ...
  2452                                  			pop	es						;... into extra segment register
  2453                                  			mov	edi,edx						;edi = target buffer
  2454                                  			push	ecx						;save maximum characters
  2455                                  			xor	al,al						;zero register
  2456                                  			cld							;forward strings
  2457                                  			rep	stosb						;zero fill buffer
  2458                                  			pop	ecx						;maximum characters
  2459                                  			mov	edi,edx						;edi = target buffer
  2460                                  			mov	esi,edx						;esi = target buffer
  2461                                  .10			jecxz	.50						;exit if max-length is zero
  2462                                  .20			call	GetConsoleChar					;al = next input char
  2463                                  			cmp	al,bl						;is this the terminator?
  2464                                  			je	.50						;yes, exit
  2465                                  			cmp	al,EASCIIBACKSPACE				;is this a backspace?
  2466                                  			jne	.30						;no, skip ahead
  2467                                  			cmp	esi,edi						;at start of buffer?
  2468                                  			je	.20						;yes, get next character
  2469                                  			dec	edi						;backup target pointer
  2470                                  			mov	byte [edi],0					;zero previous character
  2471                                  			inc	ecx						;increment remaining chars
  2472                                  			test	bh,1						;echo to console?
  2473                                  			jz	.20						;no, get next character
  2474                                  			call	PreviousConsoleColumn				;backup console position
  2475                                  			mov	al,EASCIISPACE					;ASCII space
  2476                                  			call	PutConsoleChar					;write space to console
  2477                                  			call	PlaceCursor					;position the cursor
  2478                                  			jmp	.20						;get next character
  2479                                  .30			cmp	al,EASCIISPACE					;printable? (lower bounds)
  2480                                  			jb	.20						;no, get another character
  2481                                  			cmp	al,EASCIITILDE					;printable? (upper bounds)
  2482                                  			ja	.20						;no, get another character
  2483                                  			stosb							;store character in buffer
  2484                                  			test	bh,1						;echo to console?
  2485                                  			jz	.40						;no, skip ahead
  2486                                  			call	PutConsoleChar					;write character to console
  2487                                  			call	NextConsoleColumn				;advance console position
  2488                                  			call	PlaceCursor					;position the cursor
  2489                                  .40			dec	ecx						;decrement remaining chars
  2490                                  			jmp	.10						;next
  2491                                  .50			xor	al,al						;null
  2492                                  			stosb							;terminate buffer
  2493                                  			pop	es						;restore non-volatile regs
  2494                                  			pop	edi						;
  2495                                  			pop	esi						;
  2496                                  			pop	ecx						;
  2497                                  			ret							;return
  2498                                  ;-----------------------------------------------------------------------------------------------------------------------
  2499                                  ;
  2500                                  ;	Routine:	GetConsoleChar
  2501                                  ;
  2502                                  ;	Description:	This routine waits for EMSGKEYCHAR message and return character code.
  2503                                  ;
  2504                                  ;	Out:		AL	ASCII character code
  2505                                  ;			AH	keyboard scan code
  2506                                  ;
  2507                                  ;-----------------------------------------------------------------------------------------------------------------------
  2508                                  GetConsoleChar.10	call	Yield						;pass control or halt
  2509                                  GetConsoleChar		call	GetMessage					;get the next message
  2510                                  			or	eax,eax						;do we have a message?
  2511                                  			jz	GetConsoleChar.10				;no, skip ahead
  2512                                  			push	eax						;save key codes
  2513                                  			and	eax,0FFFF0000h					;mask for message type
  2514                                  			cmp	eax,EMSGKEYCHAR					;key-char message?
  2515                                  			pop	eax						;restore key codes
  2516                                  			jne	GetConsoleChar					;no, try again
  2517                                  			and	eax,0000ffffh					;mask for key codes
  2518                                  			ret							;return
  2519                                  ;-----------------------------------------------------------------------------------------------------------------------
  2520                                  ;
  2521                                  ;	Routine:	Yield
  2522                                  ;
  2523                                  ;	Description:	This routine passes control to the next ready task or enter halt.
  2524                                  ;
  2525                                  ;-----------------------------------------------------------------------------------------------------------------------
  2526                                  Yield			sti							;enable maskagle interrupts
  2527                                  			hlt							;halt until external interrupt
  2528                                  			ret							;return
  2529                                  ;-----------------------------------------------------------------------------------------------------------------------
  2530                                  ;
  2531                                  ;	Routine:	PreviousConsoleColumn
  2532                                  ;
  2533                                  ;	Description:	This routine retreats the cursor one logical column. If the cursor was at the start of a row,
  2534                                  ;			the column is set to the last position in the row and the row is decremented.
  2535                                  ;
  2536                                  ;	In:		DS	OS data selector
  2537                                  ;
  2538                                  ;-----------------------------------------------------------------------------------------------------------------------
  2539                                  PreviousConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2540                                  			or	al,al						;start of row?
  2541                                  			jnz	.10						;no, skip ahead
  2542                                  			mov	ah,[wbConsoleRow]				;current row
  2543                                  			or	ah,ah						;top of screen?
  2544                                  			jz	.20						;yes, exit with no change
  2545                                  			dec	ah						;decrement row
  2546                                  			mov	[wbConsoleRow],ah				;save row
  2547                                  			mov	al,ECONCOLS					;set maximum column
  2548                                  .10			dec	al						;decrement column
  2549                                  			mov	[wbConsoleColumn],al				;save column
  2550                                  .20			ret							;return
  2551                                  ;-----------------------------------------------------------------------------------------------------------------------
  2552                                  ;
  2553                                  ;	Routine:	NextConsoleColumn
  2554                                  ;
  2555                                  ;	Description:	This routine advances the console position one column. The columnn is reset to zero and the row
  2556                                  ;			incremented if the end of the current row is reached.
  2557                                  ;
  2558                                  ;	In:		DS	OS data selector
  2559                                  ;
  2560                                  ;-----------------------------------------------------------------------------------------------------------------------
  2561                                  NextConsoleColumn	mov	al,[wbConsoleColumn]				;current column
  2562                                  			inc	al						;increment column
  2563                                  			mov	[wbConsoleColumn],al				;save column
  2564                                  			cmp	al,ECONCOLS					;end of row?
  2565                                  			jb	.10						;no, skip ahead
  2566                                  			call	FirstConsoleColumn				;reset column to start of row
  2567                                  			call	NextConsoleRow					;line feed to next row
  2568                                  .10			ret							;return
  2569                                  ;-----------------------------------------------------------------------------------------------------------------------
  2570                                  ;
  2571                                  ;	Routine:	FirstConsoleColumn
  2572                                  ;
  2573                                  ;	Description:	This routine resets the console column to start of the row.
  2574                                  ;
  2575                                  ;	In:		DS	OS data selector
  2576                                  ;
  2577                                  ;-----------------------------------------------------------------------------------------------------------------------
  2578                                  FirstConsoleColumn	xor	al,al						;zero column
  2579                                  			mov	[wbConsoleColumn],al				;save column
  2580                                  			ret							;return
  2581                                  ;-----------------------------------------------------------------------------------------------------------------------
  2582                                  ;
  2583                                  ;	Routine:	NextConsoleRow
  2584                                  ;
  2585                                  ;	Description:	This routine advances the console position one line. Scroll the screen one row if needed.
  2586                                  ;
  2587                                  ;	In:		DS	OS data selector
  2588                                  ;
  2589                                  ;-----------------------------------------------------------------------------------------------------------------------
  2590                                  NextConsoleRow		mov	al,[wbConsoleRow]				;current row
  2591                                  			inc	al						;increment row
  2592                                  			mov	[wbConsoleRow],al				;save row
  2593                                  			cmp	al,ECONROWS					;end of screen?
  2594                                  			jb	.10						;no, skip ahead
  2595                                  			call	ScrollConsoleRow				;scroll up one row
  2596                                  			mov	al,[wbConsoleRow]				;row
  2597                                  			dec	al						;decrement row
  2598                                  			mov	[wbConsoleRow],al				;save row
  2599                                  .10			ret							;return
  2600                                  ;-----------------------------------------------------------------------------------------------------------------------
  2601                                  ;
  2602                                  ;	Routine:	PutConsoleChar
  2603                                  ;
  2604                                  ;	Description:	This routine writes one ASCII character to the console screen.
  2605                                  ;
  2606                                  ;	In:		AL	ASCII character
  2607                                  ;			DS	OS data selector
  2608                                  ;
  2609                                  ;-----------------------------------------------------------------------------------------------------------------------
  2610                                  PutConsoleChar		push	ecx						;save non-volatile regs
  2611                                  			push	es						;
  2612                                  			push	ESELCGA						;load CGA selector ...
  2613                                  			pop	es						;... into extra segment reg
  2614                                  			mov	cl,[wbConsoleColumn]				;column
  2615                                  			mov	ch,[wbConsoleRow]				;row
  2616                                  			call	SetConsoleChar					;put character at row, column
  2617                                  			pop	es						;restore non-volatile regs
  2618                                  			pop	ecx						;
  2619                                  			ret							;return
  2620                                  ;-----------------------------------------------------------------------------------------------------------------------
  2621                                  ;
  2622                                  ;	Routine:	PutConsoleOIAShift
  2623                                  ;
  2624                                  ;	Description:	This routine updates the shift/ctrl/alt/lock indicators in the operator information area (OIA).
  2625                                  ;
  2626                                  ;	In:		BL	shift flags
  2627                                  ;			BH	lock flags
  2628                                  ;			DS	OS data selector
  2629                                  ;
  2630                                  ;-----------------------------------------------------------------------------------------------------------------------
  2631                                  PutConsoleOIAShift	push	ecx						;save non-volatile regs
  2632                                  			push	es						;
  2633                                  			push	ESELCGA						;load CGA selector ...
  2634                                  			pop	es						;... into ES register
  2635                                  			mov	ch,ECONOIAROW					;OIA row
  2636                                  			mov	al,EASCIISPACE					;space is default character
  2637                                  			test	bl,EKEYFSHIFTLEFT				;left-shift indicated?
  2638                                  			jz	.10						;no, skip ahead
  2639                                  			mov	al,'S'						;yes, indicate with 'S'
  2640                                  .10			mov	cl,14						;indicator column
  2641                                  			call	SetConsoleChar					;display ASCII character
  2642                                  			mov	al,EASCIISPACE					;ASCII space
  2643                                  			test	bl,EKEYFSHIFTRIGHT				;right-shift indicated?
  2644                                  			jz	.20						;no, skip ahead
  2645                                  			mov	al,'S'						;yes, indicate with 'S'
  2646                                  .20			mov	cl,64						;indicator column
  2647                                  			call	SetConsoleChar					;display ASCII character
  2648                                  			mov	al,EASCIISPACE					;ASCII space
  2649                                  			test	bl,EKEYFCTRLLEFT				;left-ctrl indicated?
  2650                                  			jz	.30						;no, skip ahead
  2651                                  			mov	al,'C'						;yes, indicate with 'C'
  2652                                  .30			mov	cl,15						;indicator column
  2653                                  			call	SetConsoleChar					;display ASCII character
  2654                                  			mov	al,EASCIISPACE					;ASCII space
  2655                                  			test	bl,EKEYFCTRLRIGHT				;right-ctrl indicated?
  2656                                  			jz	.40						;no, skip ahead
  2657                                  			mov	al,'C'						;yes, indicate with 'C'
  2658                                  .40			mov	cl,63						;indicator column
  2659                                  			call	SetConsoleChar					;display ASCII character
  2660                                  			mov	al,EASCIISPACE					;ASCII space
  2661                                  			test	bl,EKEYFALTLEFT					;left-alt indicated?
  2662                                  			jz	.50						;no, skip ahead
  2663                                  			mov	al,'A'						;yes, indicate with 'A'
  2664                                  .50			mov	cl,16						;indicator column
  2665                                  			call	SetConsoleChar					;display ASCII character
  2666                                  			mov	al,EASCIISPACE					;ASCII space
  2667                                  			test	bl,EKEYFALTRIGHT				;right-alt indicated?
  2668                                  			jz	.60						;no, skip ahead
  2669                                  			mov	al,'A'						;yes, indicate with 'A'
  2670                                  .60			mov	cl,62						;indicator column
  2671                                  			call	SetConsoleChar					;display ASCII character
  2672                                  			mov	al,EASCIISPACE					;ASCII space
  2673                                  			test	bh,EKEYFLOCKCAPS				;caps-lock indicated?
  2674                                  			jz	.70						;no, skip ahead
  2675                                  			mov	al,'C'						;yes, indicate with 'C'
  2676                                  .70			mov	cl,78						;indicator column
  2677                                  			call	SetConsoleChar					;display ASCII character
  2678                                  			mov	al,EASCIISPACE					;ASCII space
  2679                                  			test	bh,EKEYFLOCKNUM					;num-lock indicated?
  2680                                  			jz	.80						;no, skip ahead
  2681                                  			mov	al,'N'						;yes, indicate with 'N'
  2682                                  .80			mov	cl,77						;indicator column
  2683                                  			call	SetConsoleChar					;display ASCII character
  2684                                  			mov	al,EASCIISPACE					;ASCII space
  2685                                  			test	bh,EKEYFLOCKSCROLL				;scroll-lock indicated?
  2686                                  			jz	.90						;no, skip ahead
  2687                                  			mov	al,'S'						;yes, indicate with 'S'
  2688                                  .90			mov	cl,76						;indicator column
  2689                                  			call	SetConsoleChar					;display ASCII character
  2690                                  			pop	es						;restore non-volatile regs
  2691                                  			pop	ecx						;
  2692                                  			ret							;return
  2693                                  ;-----------------------------------------------------------------------------------------------------------------------
  2694                                  ;
  2695                                  ;	Routine:	PutConsoleOIAChar
  2696                                  ;
  2697                                  ;	Description:	This routine updates the Operator Information Area (OIA).
  2698                                  ;
  2699                                  ;	In:		DS	OS data selector
  2700                                  ;
  2701                                  ;-----------------------------------------------------------------------------------------------------------------------
  2702                                  PutConsoleOIAChar	push	ebx						;save non-volatile regs
  2703                                  			push	ecx						;
  2704                                  			push	esi						;
  2705                                  			push	ds						;
  2706                                  			push	es						;
  2707                                  			push	ESELDAT						;load OS data selector ...
  2708                                  			pop	ds						;... into data segment register
  2709                                  			push	ESELCGA						;load CGA selector ...
  2710                                  			pop	es						;... into extra segment register
  2711                                  			mov	esi,wbConsoleScan0				;scan codes address
  2712                                  			mov	bh,ECONOIAROW					;OIA row
  2713                                  			mov	bl,0						;starting column
  2714                                  			mov	ecx,6						;maximum scan codes
  2715                                  .10			push	ecx						;save remaining count
  2716                                  			mov	ecx,ebx						;row, column
  2717                                  			lodsb							;read scan code
  2718                                  			or	al,al						;scan code present?
  2719                                  			jz	.20						;no, skip ahead
  2720                                  			call	PutConsoleHexByte				;display scan code
  2721                                  			jmp	.30						;continue
  2722                                  .20			mov	al,' '						;ASCII space
  2723                                  			call	SetConsoleChar					;display space
  2724                                  			mov	al,' '						;ASCII space
  2725                                  			call	SetConsoleChar					;display space
  2726                                  .30			add	bl,2						;next column (+2)
  2727                                  			pop	ecx						;restore remaining
  2728                                  			loop	.10						;next code
  2729                                  			mov	al,[wbConsoleChar]				;console ASCII character
  2730                                  			cmp	al,32						;printable? (lower-bounds)
  2731                                  			jb	.40						;no, skip ahead
  2732                                  			cmp	al,126						;printable? (upper-bounds)
  2733                                  			ja	.40						;no, skip ahead
  2734                                  			mov	ch,bh						;OIA row
  2735                                  			mov	cl,40						;character display column
  2736                                  			call	SetConsoleChar					;display ASCII character
  2737                                  .40			pop	es						;restore non-volatile regs
  2738                                  			pop	ds						;
  2739                                  			pop	esi						;
  2740                                  			pop	ecx						;
  2741                                  			pop	ebx						;
  2742                                  			ret							;return
  2743                                  ;-----------------------------------------------------------------------------------------------------------------------
  2744                                  ;
  2745                                  ;	Routine:	PutConsoleHexByte
  2746                                  ;
  2747                                  ;	Description:	This routine writes two ASCII characters to the console representing a byte value.
  2748                                  ;
  2749                                  ;	In:		AL	byte value
  2750                                  ;			CL	column
  2751                                  ;			CH	row
  2752                                  ;			DS	OS data selector
  2753                                  ;			ES	CGA selector
  2754                                  ;
  2755                                  ;-----------------------------------------------------------------------------------------------------------------------
  2756                                  PutConsoleHexByte	push	ebx						;save non-volatile regs
  2757                                  			mov	bl,al						;save byte value
  2758                                  			shr	al,4						;hi-order nybble
  2759                                  			or	al,030h						;apply ASCII zone
  2760                                  			cmp	al,03ah						;numeric?
  2761                                  			jb	.10						;yes, skip ahead
  2762                                  			add	al,7						;add ASCII offset for alpha
  2763                                  .10			call	SetConsoleChar					;display ASCII character
  2764                                  			mov	al,bl						;byte value
  2765                                  			and	al,0fh						;lo-order nybble
  2766                                  			or	al,30h						;apply ASCII zone
  2767                                  			cmp	al,03ah						;numeric?
  2768                                  			jb	.20						;yes, skip ahead
  2769                                  			add	al,7						;add ASCII offset for alpha
  2770                                  .20			call	SetConsoleChar					;display ASCII character
  2771                                  			pop	ebx						;restore non-volatile regs
  2772                                  			ret							;return
  2773                                  ;=======================================================================================================================
  2774                                  ;
  2775                                  ;	Message Queue Helper Routines
  2776                                  ;
  2777                                  ;	PutMessage
  2778                                  ;	GetMessage
  2779                                  ;
  2780                                  ;=======================================================================================================================
  2781                                  ;-----------------------------------------------------------------------------------------------------------------------
  2782                                  ;
  2783                                  ;	Routine:	PutMessage
  2784                                  ;
  2785                                  ;	Description:	This routine adda a message to the message queue.
  2786                                  ;
  2787                                  ;	In:		ECX	hi-order data word
  2788                                  ;			EDX	lo-order data word
  2789                                  ;
  2790                                  ;	Out:		CY	0 = success
  2791                                  ;				1 = fail: queue is full
  2792                                  ;
  2793                                  ;-----------------------------------------------------------------------------------------------------------------------
  2794                                  PutMessage		push	ds						;save non-volatile regs
  2795                                  			push	ESELMQ						;load task message queue selector ...
  2796                                  			pop	ds						;... into data segment register
  2797                                  			mov	eax,[MQTail]					;tail ptr
  2798                                  			cmp	dword [eax],0					;is queue full?
  2799                                  			stc							;assume failure
  2800                                  			jne	.20						;yes, cannot store
  2801                                  			mov	[eax],edx					;store lo-order data
  2802                                  			mov	[eax+4],ecx					;store hi-order data
  2803                                  			add	eax,8						;next queue element adr
  2804                                  			and	eax,03fch					;at end of queue?
  2805                                  			jnz	.10						;no, skip ahead
  2806                                  			mov	al,8						;reset to top of queue
  2807                                  .10			mov	[MQTail],eax					;save new tail ptr
  2808                                  			clc							;indicate success
  2809                                  .20			pop	ds						;restore non-volatile regs
  2810                                  			ret							;return
  2811                                  ;-----------------------------------------------------------------------------------------------------------------------
  2812                                  ;
  2813                                  ;	Routine:	GetMessage
  2814                                  ;
  2815                                  ;	Description:	This routine reads and removes a message from the message queue.
  2816                                  ;
  2817                                  ;	Out:		EAX	lo-order message data
  2818                                  ;			EDX	hi-order message data
  2819                                  ;
  2820                                  ;			CY	0 = message read
  2821                                  ;				1 = no message to read
  2822                                  ;
  2823                                  ;-----------------------------------------------------------------------------------------------------------------------
  2824                                  GetMessage		push	ebx						;save non-volatile regs
  2825                                  			push	ecx						;
  2826                                  			push	ds						;
  2827                                  			push	ESELMQ						;load message queue selector ...
  2828                                  			pop	ds						;... into data segment register
  2829                                  			mov	ebx,[MQHead]					;head ptr
  2830                                  			mov	eax,[ebx]					;lo-order 32 bits
  2831                                  			mov	edx,[ebx+4]					;hi-order 32 bits
  2832                                  			or	eax,edx						;is queue empty?
  2833                                  			stc							;assume queue is emtpy
  2834                                  			jz	.20						;yes, skip ahead
  2835                                  			xor	ecx,ecx						;store zero
  2836                                  			mov	[ebx],ecx					;... in lo-order dword
  2837                                  			mov	[ebx+4],ecx					;... in hi-order dword
  2838                                  			add	ebx,8						;next queue element
  2839                                  			and	ebx,03fch					;at end of queue?
  2840                                  			jnz	.10						;no, skip ahead
  2841                                  			mov	bl,8						;reset to 1st entry
  2842                                  .10			mov	[MQHead],ebx					;save new head ptr
  2843                                  			clc							;indicate message read
  2844                                  .20			pop	ds						;restore non-volatile regs
  2845                                  			pop	ecx						;
  2846                                  			pop	ebx						;
  2847                                  			ret							;return
  2848                                  ;=======================================================================================================================
  2849                                  ;
  2850                                  ;	Memory-Mapped Video Routines
  2851                                  ;
  2852                                  ;	These routines read and/or write directly to CGA video memory (B800:0)
  2853                                  ;
  2854                                  ;	ClearConsoleScreen
  2855                                  ;	ScrollConsoleRow
  2856                                  ;	SetConsoleChar
  2857                                  ;
  2858                                  ;=======================================================================================================================
  2859                                  ;-----------------------------------------------------------------------------------------------------------------------
  2860                                  ;
  2861                                  ;	Routine:	ClearConsoleScreen
  2862                                  ;
  2863                                  ;	Description:	This routine clears the console (CGA) screen.
  2864                                  ;
  2865                                  ;-----------------------------------------------------------------------------------------------------------------------
  2866                                  ClearConsoleScreen	push	ecx						;save non-volatile regs
  2867                                  			push	edi						;
  2868                                  			push	ds						;
  2869                                  			push	es						;
  2870                                  			push	ESELDAT						;load OS Data selector ...
  2871                                  			pop	ds						;... into DS register
  2872                                  			push	ESELCGA						;load CGA selector ...
  2873                                  			pop	es						;... into ES register
  2874                                  			mov	eax,ECONCLEARDWORD				;initializtion value
  2875                                  			mov	ecx,ECONROWDWORDS*(ECONROWS)			;double-words to clear
  2876                                  			xor	edi,edi						;target offset
  2877                                  			cld							;forward strings
  2878                                  			rep	stosd						;reset screen body
  2879                                  			mov	eax,ECONOIADWORD				;OIA attribute and space
  2880                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2881                                  			rep	stosd						;reset OIA line
  2882                                  			xor	al,al						;zero register
  2883                                  			mov	[wbConsoleRow],al				;reset console row
  2884                                  			mov	[wbConsoleColumn],al				;reset console column
  2885                                  			call	PlaceCursor					;place cursor at current position
  2886                                  			pop	es						;restore non-volatile regs
  2887                                  			pop	ds						;
  2888                                  			pop	edi						;
  2889                                  			pop	ecx						;
  2890                                  			ret							;return
  2891                                  ;-----------------------------------------------------------------------------------------------------------------------
  2892                                  ;
  2893                                  ;	Routine:	ScrollConsoleRow
  2894                                  ;
  2895                                  ;	Description:	This routine scrolls the console (text) screen up one row.
  2896                                  ;
  2897                                  ;-----------------------------------------------------------------------------------------------------------------------
  2898                                  ScrollConsoleRow	push	ecx						;save non-volatile regs
  2899                                  			push	esi						;
  2900                                  			push	edi						;
  2901                                  			push	ds						;
  2902                                  			push	es						;
  2903                                  			push	ESELCGA						;load CGA video selector ...
  2904                                  			pop	ds						;... into DS
  2905                                  			push	ESELCGA						;load CGA video selector ...
  2906                                  			pop	es						;... into ES
  2907                                  			mov	ecx,ECONROWDWORDS*(ECONROWS-1)			;double-words to move
  2908                                  			mov	esi,ECONROWBYTES				;esi = source (line 2)
  2909                                  			xor	edi,edi						;edi = target (line 1)
  2910                                  			cld							;forward strings
  2911                                  			rep	movsd						;move 24 lines up
  2912                                  			mov	eax,ECONCLEARDWORD				;attribute and ASCII space
  2913                                  			mov	ecx,ECONROWDWORDS				;double-words per row
  2914                                  			rep	stosd						;clear bottom row
  2915                                  			pop	es						;restore non-volatile regs
  2916                                  			pop	ds						;
  2917                                  			pop	edi						;
  2918                                  			pop	esi						;
  2919                                  			pop	ecx						;
  2920                                  			ret							;return
  2921                                  ;-----------------------------------------------------------------------------------------------------------------------
  2922                                  ;
  2923                                  ;	Routine:	SetConsoleChar
  2924                                  ;
  2925                                  ;	Description:	This routine outputs an ASCII character at the given row and column.
  2926                                  ;
  2927                                  ;	In:		AL	ASCII character
  2928                                  ;			CL	column
  2929                                  ;			CH	row
  2930                                  ;			ES	CGA selector
  2931                                  ;
  2932                                  ;	Out:		EAX	last target address written (ES:)
  2933                                  ;			CL	column + 1
  2934                                  ;
  2935                                  ;-----------------------------------------------------------------------------------------------------------------------
  2936                                  SetConsoleChar		mov	dl,al						;ASCII character
  2937                                  			movzx	eax,ch						;row
  2938                                  			mov	ah,ECONCOLS					;cols/row
  2939                                  			mul	ah						;row * cols/row
  2940                                  			add	al,cl						;add column
  2941                                  			adc	ah,0						;handle carry
  2942                                  			shl	eax,1						;screen offset
  2943                                  			mov	[es:eax],dl					;store character
  2944                                  			inc	cl						;next column
  2945                                  			ret							;return
  2946                                  ;=======================================================================================================================
  2947                                  ;
  2948                                  ;	Input/Output Routines
  2949                                  ;
  2950                                  ;	These routines read and/or write directly to ports.
  2951                                  ;
  2952                                  ;	PlaceCursor
  2953                                  ;	PutPrimaryEndOfInt
  2954                                  ;	PutSecondaryEndOfInt
  2955                                  ;	ResetSystem
  2956                                  ;	SetKeyboardLamps
  2957                                  ;	WaitForKeyInBuffer
  2958                                  ;	WaitForKeyOutBuffer
  2959                                  ;
  2960                                  ;=======================================================================================================================
  2961                                  ;-----------------------------------------------------------------------------------------------------------------------
  2962                                  ;
  2963                                  ;	Routine:	PlaceCursor
  2964                                  ;
  2965                                  ;	Description:	This routine positions the cursor on the console.
  2966                                  ;
  2967                                  ;	In:		DS	OS data selector
  2968                                  ;
  2969                                  ;-----------------------------------------------------------------------------------------------------------------------
  2970                                  PlaceCursor		push	ecx						;save non-volatile regs
  2971                                  			mov	al,[wbConsoleRow]				;al = row
  2972                                  			mov	ah,ECONCOLS					;ah = cols/row
  2973                                  			mul	ah						;row offset
  2974                                  			add	al,[wbConsoleColumn]				;add column
  2975                                  			adc	ah,0						;add overflow
  2976                                  			mov	ecx,eax						;screen offset
  2977                                  			mov	dl,ECRTPORTLO					;crt controller port lo
  2978                                  			mov	dh,ECRTPORTHI					;crt controller port hi
  2979                                  			mov	al,ECRTCURLOCHI					;crt cursor loc reg hi
  2980                                  			out	dx,al						;select register
  2981                                  			inc	edx						;data port
  2982                                  			mov	al,ch						;hi-order cursor loc
  2983                                  			out	dx,al						;store hi-order loc
  2984                                  			dec	edx						;register select port
  2985                                  			mov	al,ECRTCURLOCLO					;crt cursor loc reg lo
  2986                                  			out	dx,al						;select register
  2987                                  			inc	edx						;data port
  2988                                  			mov	al,cl						;lo-order cursor loc
  2989                                  			out	dx,al						;store lo-order loc
  2990                                  			pop	ecx						;restore non-volatile regs
  2991                                  			ret							;return
  2992                                  ;-----------------------------------------------------------------------------------------------------------------------
  2993                                  ;
  2994                                  ;	Routine:	PutPrimaryEndOfInt
  2995                                  ;
  2996                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the primary PIC.
  2997                                  ;
  2998                                  ;-----------------------------------------------------------------------------------------------------------------------
  2999                                  PutPrimaryEndOfInt	sti							;enable maskable interrupts
  3000                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3001                                  			out	EPICPORTPRI,al					;send EOI to primary PIC
  3002                                  			ret							;return
  3003                                  ;-----------------------------------------------------------------------------------------------------------------------
  3004                                  ;
  3005                                  ;	Routine:	PutSecondaryEndOfInt
  3006                                  ;
  3007                                  ;	Description:	This routine sends a non-specific end-of-interrupt signal to the secondary PIC.
  3008                                  ;
  3009                                  ;-----------------------------------------------------------------------------------------------------------------------
  3010                                  PutSecondaryEndOfInt	sti							;enable maskable interrupts
  3011                                  			mov	al,EPICEOI					;non-specific end-of-interrupt
  3012                                  			out	EPICPORTSEC,al					;send EOI to secondary PIC
  3013                                  			ret							;return
  3014                                  ;-----------------------------------------------------------------------------------------------------------------------
  3015                                  ;
  3016                                  ;	Routine:	ResetSystem
  3017                                  ;
  3018                                  ;	Description:	This routine restarts the system using the 8042 controller.
  3019                                  ;
  3020                                  ;	Out:		N/A	This routine does not return.
  3021                                  ;
  3022                                  ;-----------------------------------------------------------------------------------------------------------------------
  3023                                  ResetSystem		mov	ecx,001fffffh					;delay to clear ints
  3024                                  			loop	$						;clear interrupts
  3025                                  			mov	al,EKEYBCMDRESET				;mask out bit zero
  3026                                  			out	EKEYBPORTSTAT,al				;drive bit zero low
  3027                                  .10			sti							;enable maskable interrupts
  3028                                  			hlt							;halt until interrupt
  3029                                  			jmp	.10						;repeat until reset kicks in
  3030                                  ;-----------------------------------------------------------------------------------------------------------------------
  3031                                  ;
  3032                                  ;	Routine:	SetKeyboardLamps
  3033                                  ;
  3034                                  ;	Description:	This routine sends the set/reset mode indicators command to the keyboard device.
  3035                                  ;
  3036                                  ;	In:		BH	00000CNS (C:Caps Lock,N:Num Lock,S:Scroll Lock)
  3037                                  ;
  3038                                  ;-----------------------------------------------------------------------------------------------------------------------
  3039                                  SetKeyboardLamps	call	WaitForKeyInBuffer				;wait for input buffer ready
  3040                                  			mov	al,EKEYBCMDLAMPS				;set/reset lamps command
  3041                                  			out	EKEYBPORTDATA,al				;send command to 8042
  3042                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3043                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  3044                                  			call	WaitForKeyInBuffer				;wait for input buffer ready
  3045                                  			mov	al,bh						;set/reset lamps value
  3046                                  			out	EKEYBPORTDATA,al				;send lamps value
  3047                                  			call	WaitForKeyOutBuffer				;wait for 8042 result
  3048                                  			in	al,EKEYBPORTDATA				;read 8042 'ACK' (0fah)
  3049                                  			ret							;return
  3050                                  ;-----------------------------------------------------------------------------------------------------------------------
  3051                                  ;
  3052                                  ;	Routine:	WaitForKeyInBuffer
  3053                                  ;
  3054                                  ;	Description:	This routine waits for keyboard input buffer to be ready for input.
  3055                                  ;
  3056                                  ;	Out:		ZF	1 = Input buffer ready
  3057                                  ;				0 = Input buffer not ready after timeout
  3058                                  ;
  3059                                  ;-----------------------------------------------------------------------------------------------------------------------
  3060                                  WaitForKeyInBuffer	push	ecx						;save non-volatile regs
  3061                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  3062                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  3063                                  			test	al,EKEYBBITIN					;is input buffer still full?
  3064                                  			loopnz	.10						;yes, repeat till timeout
  3065                                  			pop	ecx						;restore non-volatile regs
  3066                                  			ret							;return
  3067                                  ;-----------------------------------------------------------------------------------------------------------------------
  3068                                  ;
  3069                                  ;	Routine:	WaitForKeyOutBuffer
  3070                                  ;
  3071                                  ;	Description:	This routine waits for keyboard output buffer to have data to read.
  3072                                  ;
  3073                                  ;	Out:		ZF	1 = Output buffer has data from controller
  3074                                  ;				0 = Output buffer empty after timeout
  3075                                  ;
  3076                                  ;-----------------------------------------------------------------------------------------------------------------------
  3077                                  WaitForKeyOutBuffer	push	ecx						;save non-volatile regs
  3078                                  			mov	ecx,EKEYBWAITLOOP				;keyboard controller timeout
  3079                                  .10			in	al,EKEYBPORTSTAT				;keyboard status byte
  3080                                  			test	al,EKEYBBITOUT					;output buffer status bit
  3081                                  			loopz	.10						;loop until output buffer bit
  3082                                  			pop	ecx						;restore non-volatile regs
  3083                                  			ret							;return
  3084                                  ;-----------------------------------------------------------------------------------------------------------------------
  3085                                  ;
  3086                                  ;	End of the Kernel Function Library
  3087                                  ;
  3088                                  ;-----------------------------------------------------------------------------------------------------------------------
  3089                                  			times	8190-($-$$) db 0h				;zero fill to end of section
  3090                                  			db	055h,0AAh					;end of segment
  3091                                  ;=======================================================================================================================
  3092                                  ;
  3093                                  ;	Console Task
  3094                                  ;
  3095                                  ;	The only task defined in the kernel is the console task. This task consists of code, data, stack, and task state
  3096                                  ;	segments and a local descriptor table. The console task accepts and echos user keyboard input to the console
  3097                                  ;	screen and responds to user commands.
  3098                                  ;
  3099                                  ;=======================================================================================================================
  3100                                  ;-----------------------------------------------------------------------------------------------------------------------
  3101                                  ;
  3102                                  ;	Console Stack								@disk: 007400	@mem:  004000
  3103                                  ;
  3104                                  ;	This is the stack for the console task. It supports 448 nested calls.
  3105                                  ;
  3106                                  ;-----------------------------------------------------------------------------------------------------------------------
  3107                                  section			constack						;console task stack
  3108                                  			times	1792-($-$$) db 0h				;zero fill to end of section
  3109                                  ;-----------------------------------------------------------------------------------------------------------------------
  3110                                  ;
  3111                                  ;	Console Local Descriptor Table						@disk: 007B00	@mem:  004700
  3112                                  ;
  3113                                  ;	This is the LDT for the console task. It defines the stack, code, data and queue segments as well as data
  3114                                  ;	aliases for the TSS LDT. Data aliases allow inspection and altering of the TSS and LDT. This LDT can hold up to
  3115                                  ;	16 descriptors. Six are initially defined.
  3116                                  ;
  3117                                  ;-----------------------------------------------------------------------------------------------------------------------
  3118                                  section			conldt							;console local descriptors
  3119                                  			dq	004093004780007Fh				;04 TSS alias
  3120                                  			dq	004093004700007Fh				;0C LDT alias
  3121                                  			dq	00409300400006FFh				;14 stack
  3122                                  			dq	00CF93000000FFFFh				;1C data
  3123                                  			dq	00409B0050000FFFh				;24 code
  3124                                  			dq	00409300480007FFh				;2C message queue
  3125                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3126                                  ;-----------------------------------------------------------------------------------------------------------------------
  3127                                  ;
  3128                                  ;	Console Task State Segment						@disk: 007B80	@mem:  004780
  3129                                  ;
  3130                                  ;	This is the TSS for the console task. All rings share the same stack. DS and ES are set to the console data
  3131                                  ;	segment. CS to console code.
  3132                                  ;
  3133                                  ;-----------------------------------------------------------------------------------------------------------------------
  3134                                  section			contss							;console task state segment
  3135                                  			dd	0						;00 back-link tss
  3136                                  			dd	0700h						;04 esp ring 0
  3137                                  			dd	0014h						;08 ss ring 0
  3138                                  			dd	0700h						;0C esp ring 1
  3139                                  			dd	0014h						;10 es ring 1
  3140                                  			dd	0700h						;14 esp ring 2
  3141                                  			dd	0014h						;18 ss ring 2
  3142                                  			dd	0						;1C cr ring 3
  3143                                  			dd	0						;20 eip
  3144                                  			dd	0200h						;24 eflags
  3145                                  			dd	0						;28 eax
  3146                                  			dd	0						;2C ecx
  3147                                  			dd	0						;30 edx
  3148                                  			dd	0						;34 ebx
  3149                                  			dd	0700h						;38 esp ring 3
  3150                                  			dd	0						;3C ebp
  3151                                  			dd	0						;40 esi
  3152                                  			dd	0						;44 edi
  3153                                  			dd	001Ch						;48 es
  3154                                  			dd	0024h						;4C cs
  3155                                  			dd	0014h						;50 ss ring 3
  3156                                  			dd	001Ch						;54 ds
  3157                                  			dd	0						;58 fs
  3158                                  			dd	0						;5c gs
  3159                                  			dd	ESELCONSOLELDT					;60 ldt selector in gdt
  3160                                  			times	128-($-$$) db 0h				;zero fill to end of section
  3161                                  ;-----------------------------------------------------------------------------------------------------------------------
  3162                                  ;
  3163                                  ;	Console Message Queue							@disk: 007C00	@mem: 004800
  3164                                  ;
  3165                                  ;	The console message queue is 2048 bytes of memory organized as a queue of 510 double words (4 bytes each) and
  3166                                  ;	two double word values that act as indices. The queue is a FIFO that is fed by the keyboard hardware interrupt
  3167                                  ;	handler and consumed by a service routine called from a task. Each queue entry defines an input (keystroke)
  3168                                  ;	event.
  3169                                  ;
  3170                                  ;-----------------------------------------------------------------------------------------------------------------------
  3171                                  section			conmque							;console message queue
  3172                                  			dd	8						;head pointer
  3173                                  			dd	8						;tail pointer
  3174                                  			times	510 dd 0					;queue elements
  3175                                  ;-----------------------------------------------------------------------------------------------------------------------
  3176                                  ;
  3177                                  ;	Console Code								@disk: 008400	@mem: 005000
  3178                                  ;
  3179                                  ;	This is the code for the console task. The task is defined in the GDT in two descriptors, the Local Descriptor
  3180                                  ;	Table (LDT) at 0050h and the Task State Segment (TSS) at 0058h. Jumping to or calling a TSS selector causes a
  3181                                  ;	task switch, giving control to the code for the task at the CS:IP defined in the TSS for the current ring level.
  3182                                  ;	The initial CS:IP in the Console TSS is 24h:0, where 24h is a selector in the LDT. This selector points to the
  3183                                  ;	concode section, loaded into memory 5000h by the Loader. The console task is dedicated to accepting user key-
  3184                                  ;	board input, echoing to the console screen and responding to user commands.
  3185                                  ;
  3186                                  ;	When control reaches this section, our addressability is set up according to the following diagram.
  3187                                  ;
  3188                                  ;	DS,ES --------> 000000	+-----------------------------------------------+ DS,ES:0000
  3189                                  ;				|  Real Mode Interrupt Vectors			|
  3190                                  ;			000400	+-----------------------------------------------+ DS,ES:0400
  3191                                  ;				|  Reserved BIOS Memory Area			|
  3192                                  ;			000800	+-----------------------------------------------+ DS,ES:0800
  3193                                  ;				|  Shared Kernel Memory Area			|
  3194                                  ;			001000	+-----------------------------------------------+		<-- GDTR
  3195                                  ;				|  Global Descriptor Table (GDT)		|
  3196                                  ;			001800	+-----------------------------------------------+		<-- IDTR
  3197                                  ;				|  Interrupt Descriptor Table (IDT)		|
  3198                                  ;			002000	+-----------------------------------------------+
  3199                                  ;				|  Interrupt Handlers				|
  3200                                  ;				|  Kernel Function Library			|
  3201                                  ;	SS ----------->	004000	+===============================================+ SS:0000
  3202                                  ;				|  Console Task Stack Area			|
  3203                                  ;	SS:SP --------> 004700	+-----------------------------------------------+ SS:0700	<-- LDTR = GDT.SEL 0050h
  3204                                  ;				|  Console Task Local Descriptor Table (LDT)	|
  3205                                  ;			004780	+-----------------------------------------------+		<-- TR  = GDT.SEL 0058h
  3206                                  ;				|  Console Task Task State Segment (TSS)	|
  3207                                  ;			004800	+-----------------------------------------------+
  3208                                  ;				|  Console Task Message Queue			|
  3209                                  ;	CS,CS:IP ----->	005000	+-----------------------------------------------+ CS:0000
  3210                                  ;				|  Console Task Code				|
  3211                                  ;				|  Console Task Constants			|
  3212                                  ;			006000	+===============================================+
  3213                                  ;
  3214                                  ;-----------------------------------------------------------------------------------------------------------------------
  3215                                  section			concode	vstart=05000h					;labels relative to 5000h
  3216                                  ConCode			call	ConInitializeData				;initialize console variables
  3217                                  
  3218                                  			clearConsoleScreen					;clear the console screen
  3219                                  			putConsoleString czTitle				;display startup message
  3220                                  .10			putConsoleString czPrompt				;display input prompt
  3221                                  			placeCursor						;set CRT cursor location
  3222                                  			getConsoleString wzConsoleInBuffer,79,1,13		;accept keyboard input
  3223                                  			putConsoleString czNewLine				;newline
  3224                                  
  3225                                  			mov	byte [wzConsoleToken],0				;null-terminate token buffer
  3226                                  			mov	edx,wzConsoleInBuffer				;console input buffer
  3227                                  			mov	ebx,wzConsoleToken				;token buffer
  3228                                  			call	ConTakeToken					;handle console input
  3229                                  			mov	edx,wzConsoleToken				;token buffer
  3230                                  			call	ConDetermineCommand				;determine command number
  3231                                  			cmp	eax,ECONJMPTBLCNT				;valid command number?
  3232                                  			jb	.20						;yes, branch
  3233                                  
  3234                                  			putConsoleString czUnknownCommand			;display error message
  3235                                  
  3236                                  			jmp	.10						;next command
  3237                                  .20			shl	eax,2						;index into jump table
  3238                                  			mov	edx,tConJmpTbl					;jump table base address
  3239                                  			mov	eax,[edx+eax]					;command handler routine address
  3240                                  			call	eax						;call command handler
  3241                                  			jmp	.10						;next command
  3242                                  ;-----------------------------------------------------------------------------------------------------------------------
  3243                                  ;
  3244                                  ;	Routine:	ConInitializeData
  3245                                  ;
  3246                                  ;	Description:	This routine initializes console task variables.
  3247                                  ;
  3248                                  ;-----------------------------------------------------------------------------------------------------------------------
  3249                                  ConInitializeData	push	ecx						;save non-volatile regs
  3250                                  			push	edi						;
  3251                                  			push	es						;
  3252                                  ;
  3253                                  ;	Initialize console work areas
  3254                                  ;
  3255                                  			push	ESELDAT						;load OS data selector ...
  3256                                  			pop	es						;... into extra segment register
  3257                                  			mov	edi,ECONDATA					;OS console data address
  3258                                  			xor	al,al						;initialization value
  3259                                  			mov	ecx,ECONDATALEN					;size of OS console data
  3260                                  			cld							;forward strings
  3261                                  			rep	stosb						;initialize data
  3262                                  ;
  3263                                  ;	Restore and return
  3264                                  ;
  3265                                  			pop	es						;restore non-volatile regs
  3266                                  			pop	edi						;
  3267                                  			pop	ecx						;
  3268                                  			ret							;return
  3269                                  ;-----------------------------------------------------------------------------------------------------------------------
  3270                                  ;
  3271                                  ;	Routine:	ConTakeToken
  3272                                  ;
  3273                                  ;	Description:	This routine extracts the next token from the given source buffer.
  3274                                  ;
  3275                                  ;	In:		DS:EDX	source buffer address
  3276                                  ;			DS:EBX	target buffer address
  3277                                  ;
  3278                                  ;	Out:		DS:EDX	source buffer address
  3279                                  ;			DS:EBX	target buffer address
  3280                                  ;
  3281                                  ;	Command Form:	Line	= *3( *SP 1*ALNUM )
  3282                                  ;
  3283                                  ;-----------------------------------------------------------------------------------------------------------------------
  3284                                  ConTakeToken		push	esi						;save non-volatile regs
  3285                                  			push	edi						;
  3286                                  			mov	esi,edx						;source buffer address
  3287                                  			mov	edi,ebx						;target buffer address
  3288                                  			cld							;forward strings
  3289                                  .10			lodsb							;load byte
  3290                                  			cmp	al,EASCIISPACE					;space?
  3291                                  			je	.10						;yes, continue
  3292                                  			test	al,al						;end of line?
  3293                                  			jz	.40						;yes, branch
  3294                                  .20			stosb							;store byte
  3295                                  			lodsb							;load byte
  3296                                  			test	al,al						;end of line?
  3297                                  			jz	.40						;no, continue
  3298                                  			cmp	al,EASCIISPACE					;space?
  3299                                  			jne	.20						;no, continue
  3300                                  .30			lodsb							;load byte
  3301                                  			cmp	al,EASCIISPACE					;space?
  3302                                  			je	.30						;yes, continue
  3303                                  			dec	esi						;pre-position
  3304                                  .40			mov	byte [edi],0					;terminate buffer
  3305                                  			mov	edi,edx						;source buffer address
  3306                                  .50			lodsb							;remaining byte
  3307                                  			stosb							;move to front of buffer
  3308                                  			test	al,al						;end of line?
  3309                                  			jnz	.50						;no, continue
  3310                                  			pop	edi						;restore non-volatile regs
  3311                                  			pop	esi						;
  3312                                  			ret							;return
  3313                                  ;-----------------------------------------------------------------------------------------------------------------------
  3314                                  ;
  3315                                  ;	Routine:	ConDetermineCommand
  3316                                  ;
  3317                                  ;	Description:	This routine determines the command number for the command at DS:EDX.
  3318                                  ;
  3319                                  ;	input:		DS:EDX	command address
  3320                                  ;
  3321                                  ;	output:		EAX	>=0	= command nbr
  3322                                  ;				0	= unknown command
  3323                                  ;
  3324                                  ;-----------------------------------------------------------------------------------------------------------------------
  3325                                  ConDetermineCommand	push	ebx						;save non-volatile regs
  3326                                  			push	ecx						;
  3327                                  			push	esi						;
  3328                                  			push	edi						;
  3329                                  
  3330                                  			upperCaseString						;upper-case string at EDX
  3331                                  
  3332                                  			mov	esi,tConCmdTbl					;commands table
  3333                                  			xor	edi,edi						;intialize command number
  3334                                  			cld							;forward strings
  3335                                  .10			lodsb							;command length
  3336                                  			movzx	ecx,al						;command length
  3337                                  			jecxz	.20						;branch if end of table
  3338                                  			mov	ebx,esi						;table entry address
  3339                                  			add	esi,ecx						;next table entry address
  3340                                  
  3341                                  			compareMemory						;compare byte arrays at EDX, EBX
  3342                                  
  3343                                  			jecxz	.20						;branch if equal
  3344                                  			inc	edi						;increment command nbr
  3345                                  			jmp	.10						;repeat
  3346                                  .20			mov	eax,edi						;command number
  3347                                  			pop	edi						;restore non-volatile regs
  3348                                  			pop	esi						;
  3349                                  			pop	ecx						;
  3350                                  			pop	ebx						;
  3351                                  			ret							;return
  3352                                  ;-----------------------------------------------------------------------------------------------------------------------
  3353                                  ;
  3354                                  ;	Routine:	ConClear
  3355                                  ;
  3356                                  ;	Description:	This routine handles the CLEAR command and its CLS alias.
  3357                                  ;
  3358                                  ;-----------------------------------------------------------------------------------------------------------------------
  3359                                  ConClear		clearConsoleScreen					;clear console screen
  3360                                  			ret							;return
  3361                                  ;-----------------------------------------------------------------------------------------------------------------------
  3362                                  ;
  3363                                  ;	Routine:	ConExit
  3364                                  ;
  3365                                  ;	Description:	This routine handles the EXIT command and its SHUTDOWN and QUIT aliases.
  3366                                  ;
  3367                                  ;-----------------------------------------------------------------------------------------------------------------------
  3368                                  ConExit			resetSystem						;issue system reset
  3369                                  			ret							;return
  3370                                  ;-----------------------------------------------------------------------------------------------------------------------
  3371                                  ;
  3372                                  ;	Routine:	ConVersion
  3373                                  ;
  3374                                  ;	Description:	This routine handles the VERSION command and its alias, VER.
  3375                                  ;
  3376                                  ;-----------------------------------------------------------------------------------------------------------------------
  3377                                  ConVersion		putConsoleString czTitle				;display version message
  3378                                  			ret							;return
  3379                                  ;-----------------------------------------------------------------------------------------------------------------------
  3380                                  ;
  3381                                  ;	Tables
  3382                                  ;
  3383                                  ;-----------------------------------------------------------------------------------------------------------------------
  3384                                  										;---------------------------------------
  3385                                  										;  Command Jump Table
  3386                                  										;---------------------------------------
  3387                                  tConJmpTbl		equ	$						;command jump table
  3388                                  			dd	ConExit		- ConCode			;shutdown command routine offset
  3389                                  			dd	ConVersion	- ConCode			;version command routine offset
  3390                                  			dd	ConClear	- ConCode			;clear command routine offset
  3391                                  			dd	ConExit		- ConCode			;exit command routine offset
  3392                                  			dd	ConExit		- ConCode			;quit command routine offset
  3393                                  			dd	ConClear	- ConCode			;cls command routine offset
  3394                                  			dd	ConVersion	- ConCode			;ver command routine offset
  3395                                  ECONJMPTBLL		equ	($-tConJmpTbl)					;table length
  3396                                  ECONJMPTBLCNT		equ	ECONJMPTBLL/4					;table entries
  3397                                  										;---------------------------------------
  3398                                  										;  Command Name Table
  3399                                  										;---------------------------------------
  3400                                  tConCmdTbl		equ	$						;command name table
  3401                                  			db	9,"SHUTDOWN",0					;shutdown command
  3402                                  			db	8,"VERSION",0					;version command
  3403                                  			db	6,"CLEAR",0					;clear command
  3404                                  			db	5,"EXIT",0					;exit command
  3405                                  			db	5,"QUIT",0					;quit command
  3406                                  			db	4,"CLS",0					;cls command
  3407                                  			db	4,"VER",0					;ver command
  3408                                  			db	0						;end of table
  3409                                  ;-----------------------------------------------------------------------------------------------------------------------
  3410                                  ;
  3411                                  ;	Constants
  3412                                  ;
  3413                                  ;-----------------------------------------------------------------------------------------------------------------------
  3414                                  czNewLine		db	13,10,0						;new line string
  3415                                  czPrompt		db	":",0						;prompt string
  3416                                  czTitle			db	"Custom Operating System 1.0",13,10,0		;version string
  3417                                  czUnknownCommand	db	"Unknown command",13,10,0			;unknown command response string
  3418                                  			times	4094-($-$$) db 0h				;zero fill to end of section
  3419                                  			db	055h,0AAh					;end of section
  3420                                  %endif
  3421                                  %ifdef BUILDDISK
  3422                                  ;-----------------------------------------------------------------------------------------------------------------------
  3423                                  ;
  3424                                  ;	Free Disk Space								@disk: 009400	@mem:  n/a
  3425                                  ;
  3426                                  ;	Following the convention introduced by DOS, we use the value 'F6' to indicate unused floppy disk storage.
  3427                                  ;
  3428                                  ;-----------------------------------------------------------------------------------------------------------------------
  3429                                  section			unused							;unused disk space
  3430                                  			times	EBOOTDISKBYTES-09400h db 0F6h			;fill to end of disk image
  3431                                  %endif
  3432                                  ;=======================================================================================================================
  3433                                  ;
  3434                                  ;	End of Program Code
  3435                                  ;
  3436                                  ;=======================================================================================================================
